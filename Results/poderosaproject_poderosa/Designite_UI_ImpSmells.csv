Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Poderosa.UI,HotKey,C:\repos\poderosaproject_poderosa\UI\HotKey.cs,FormatKey,Cyclomatic complexity of the method is 10
Long Parameter List,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawImage,The method has 5 parameters. Parameters: g' state' image' x' y
Long Parameter List,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawText,The method has 5 parameters. Parameters: g' text' state' x' y
Long Parameter List,Poderosa.UI,DivisionList,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,DivisionList,The method has 7 parameters. Parameters: division' parent' direction' pane1' pane2' host_size' host_dock
Long Parameter List,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawRoundRect,The method has 6 parameters. Parameters: g' x' y' width' height' colors
Long Parameter List,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawRoundCorner,The method has 6 parameters. Parameters: hdc' bx' by' dx' dy' colors
Long Parameter List,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,FillHorizontalGradation,The method has 7 parameters. Parameters: g' x' y' width' height' top_color' bottom_color
Long Parameter List,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawOmittedMark,The method has 5 parameters. Parameters: g' x' y' color' is_bold
Long Parameter List,Poderosa.Forms,TabBarButton,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,DrawImage,The method has 5 parameters. Parameters: g' state' image' x' y
Long Statement,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawBackground,The length of the statement  "                    g.DrawRectangle(state == DrawState.Disabled ? SystemPens.ControlDark : SystemPens.ControlDarkDark' rc.Left' rc.Top' rc.Width - 1' rc.Height - 1); " is 145.
Long Statement,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawMenuText,The length of the statement  "                e.Graphics.DrawLine(_menuLightPen' e.Bounds.X + Consts.PIC_AREA_SIZE + 6' e.Bounds.Y + 2' e.Bounds.Width' e.Bounds.Y + 2); " is 122.
Long Statement,Poderosa.UI,HotKey,C:\repos\poderosaproject_poderosa\UI\HotKey.cs,IsTerminalKey,The length of the statement  "                key == Keys.Home || key == Keys.End || key == Keys.Next || key == Keys.Prior || key == Keys.PageDown || key == Keys.PageUp || " is 125.
Long Statement,Poderosa.UI,PaneDivision,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,CreateDivisionNodeList,The length of the statement  "                    DockStyle dock = tag.Next == null ? (info.Direction == Direction.TB ? DockStyle.Bottom : DockStyle.Right) : DockStyle.Fill; " is 123.
Long Statement,Poderosa.UI,DivisionNode,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,AdjustSplitPosition,The length of the statement  "                            new Size(size.Width' size.Height - PaneSplitter.SPLITTER_WIDTH - splitpos) : new Size(size.Width - PaneSplitter.SPLITTER_WIDTH - splitpos' size.Height); " is 152.
Long Statement,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The length of the statement  "                g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH)); " is 127.
Long Statement,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The length of the statement  "                g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH)); " is 127.
Long Statement,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The length of the statement  "                DrawMark(g' _elementBottom' new Rectangle(mid - size.Width / 2' _output.SplitClientHeight - size.Height' size.Width' size.Height)); " is 131.
Long Statement,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The length of the statement  "                DrawMark(g' _elementRight' new Rectangle(_output.SplitClientWidth - size.Width' mid - size.Height / 2' size.Width' size.Height)); " is 129.
Long Statement,Poderosa.UI,IconUtil,C:\repos\poderosaproject_poderosa\UI\Util.cs,CreateColoredIcon,The length of the statement  "                    g.DrawImage(mask' new Rectangle(0' 0' mask.Width' mask.Height)' 0' 0' mask.Width' mask.Height' GraphicsUnit.Pixel' attr); " is 121.
Long Statement,Poderosa.Forms,TabBarDrawing,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,CreateNormalStyle,The length of the statement  "            t._roundRectColors.lightlight_color = DrawUtil.MergeColor(t._roundRectColors.border_color' t._roundRectColors.outer_color); " is 123.
Long Statement,Poderosa.Forms,TabBarDrawing,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,CreateNormalStyle,The length of the statement  "            t._roundRectColors.light_color = DrawUtil.MergeColor(t._roundRectColors.lightlight_color' t._roundRectColors.border_color); " is 123.
Long Statement,Poderosa.Forms,TabBarDrawing,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,CreateActiveStyle,The length of the statement  "            t._roundRectColors.lightlight_color = DrawUtil.MergeColor(t._roundRectColors.border_color' t._roundRectColors.outer_color); " is 123.
Long Statement,Poderosa.Forms,TabBarDrawing,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,CreateActiveStyle,The length of the statement  "            t._roundRectColors.light_color = DrawUtil.MergeColor(t._roundRectColors.lightlight_color' t._roundRectColors.border_color); " is 123.
Long Statement,Poderosa.Forms,TabBarButton,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,OnPaint,The length of the statement  "                DrawUtil.FillHorizontalGradation(g' 0' 0' this.Width - 1' this.Height - 1' SystemColors.ControlLightLight' SystemColors.Control); " is 129.
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: const int border = 3;
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: const int right_border = 15;
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: Rectangle rc = new Rectangle(border' border'                                          r.Width - border - right_border - 1' r.Height - border * 2 - 1);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: Point p1 = new Point(r.Width - 9' r.Height / 2 - 1);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: Point p1 = new Point(r.Width - 9' r.Height / 2 - 1);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: Point p2 = new Point(r.Width - 5' r.Height / 2 - 1);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: Point p2 = new Point(r.Width - 5' r.Height / 2 - 1);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 8' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 8' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 6' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 6' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 7' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 7' r.Height / 2);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 7' r.Height / 2 + 1);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 7' r.Height / 2 + 1);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 12' 4);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 12' 4);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 12' r.Height - 5);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 12' r.Height - 5);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 11' 4);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p1 = new Point(r.Width - 11' 4);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 11' r.Height - 5);
Magic Number,Poderosa.UI,ColorButton,C:\repos\poderosaproject_poderosa\UI\ColorButton.cs,OnPaint,The following statement contains a magic number: p2 = new Point(r.Width - 11' r.Height - 5);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: Size = new Size(158' 132);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: Size = new Size(158' 132);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: moreColorsButton.Size = new Size(142' 22);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: moreColorsButton.Size = new Size(142' 22);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: moreColorsButton.Location = new Point(5' 99);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: moreColorsButton.Location = new Point(5' 99);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: cancelButton.Size = new Size(5' 5);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: cancelButton.Size = new Size(5' 5);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: cancelButton.Location = new Point(-10' -10);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,ColorPaletteDialog,The following statement contains a magic number: cancelButton.Location = new Point(-10' -10);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,BuildPalette,The following statement contains a magic number: byte pwidth = 16;
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,BuildPalette,The following statement contains a magic number: byte pheight = 16;
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,BuildPalette,The following statement contains a magic number: byte pdistance = 2;
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,BuildPalette,The following statement contains a magic number: byte border = 5;
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,BuildPalette,The following statement contains a magic number: for (int i = 0; i < max; i++) {                  panel[i] = new Panel();                  panel[i].Height = pwidth;                  panel[i].Width = pheight;                  panel[i].Location = new Point(x' y);                  toolTip.SetToolTip(panel[i]' colorName[i]);                    this.Controls.Add(panel[i]);                    if (x < (7 * (pwidth + pdistance)))                      x += pwidth + pdistance;                  else {                      x = border;                      y += pheight + pdistance;                  }                    panel[i].BackColor = color[i];                  panel[i].MouseEnter += new EventHandler(OnMouseEnterPanel);                  panel[i].MouseLeave += new EventHandler(OnMouseLeavePanel);                  panel[i].MouseDown += new MouseEventHandler(OnMouseDownPanel);                  panel[i].MouseUp += new MouseEventHandler(OnMouseUpPanel);                  panel[i].Paint += new PaintEventHandler(OnPanelPaint);              }
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,OnMouseDownPanel,The following statement contains a magic number: DrawPanel(sender' 2);
Magic Number,Poderosa.UI,ColorPaletteDialog,C:\repos\poderosaproject_poderosa\UI\ColorDialog.cs,DrawPanel,The following statement contains a magic number: if (state == 1) {       //mouse over                  pen1 = new Pen(SystemColors.ControlLightLight);                  pen2 = new Pen(SystemColors.ControlDarkDark);              }              else if (state == 2) {  //clicked                  pen1 = new Pen(SystemColors.ControlDarkDark);                  pen2 = new Pen(SystemColors.ControlLightLight);              }              else {                  //neutral                  pen1 = new Pen(SystemColors.ControlDark);                  pen2 = new Pen(SystemColors.ControlDark);              }
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: Color frontColor = Color.FromArgb(255' front);
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: Color backColor = Color.FromArgb(255' back);
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,ColorUtil,C:\repos\poderosaproject_poderosa\UI\ColorUtil.cs,CalculateColor,The following statement contains a magic number: return Color.FromArgb(255' newRed' newGreen' newBlue);
Magic Number,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawButtonState,The following statement contains a magic number: if (has_text && !has_image) {                  x = BodyWidth / 2;                  y = Height / 2;                  DrawText(g' Text' state' x' y);              }              else if (has_image && !has_text) {                  x = (BodyWidth - this.Image.Width) / 2;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);              }              else if (has_image && has_text) {                  x = 1;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);                  x += this.Image.Width + 2;                  DrawText(g' this.Text' state' x' y);              }
Magic Number,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawButtonState,The following statement contains a magic number: if (has_text && !has_image) {                  x = BodyWidth / 2;                  y = Height / 2;                  DrawText(g' Text' state' x' y);              }              else if (has_image && !has_text) {                  x = (BodyWidth - this.Image.Width) / 2;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);              }              else if (has_image && has_text) {                  x = 1;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);                  x += this.Image.Width + 2;                  DrawText(g' this.Text' state' x' y);              }
Magic Number,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawButtonState,The following statement contains a magic number: if (has_text && !has_image) {                  x = BodyWidth / 2;                  y = Height / 2;                  DrawText(g' Text' state' x' y);              }              else if (has_image && !has_text) {                  x = (BodyWidth - this.Image.Width) / 2;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);              }              else if (has_image && has_text) {                  x = 1;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);                  x += this.Image.Width + 2;                  DrawText(g' this.Text' state' x' y);              }
Magic Number,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawButtonState,The following statement contains a magic number: if (has_text && !has_image) {                  x = BodyWidth / 2;                  y = Height / 2;                  DrawText(g' Text' state' x' y);              }              else if (has_image && !has_text) {                  x = (BodyWidth - this.Image.Width) / 2;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);              }              else if (has_image && has_text) {                  x = 1;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);                  x += this.Image.Width + 2;                  DrawText(g' this.Text' state' x' y);              }
Magic Number,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawButtonState,The following statement contains a magic number: if (has_text && !has_image) {                  x = BodyWidth / 2;                  y = Height / 2;                  DrawText(g' Text' state' x' y);              }              else if (has_image && !has_text) {                  x = (BodyWidth - this.Image.Width) / 2;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);              }              else if (has_image && has_text) {                  x = 1;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);                  x += this.Image.Width + 2;                  DrawText(g' this.Text' state' x' y);              }
Magic Number,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawButtonState,The following statement contains a magic number: if (has_text && !has_image) {                  x = BodyWidth / 2;                  y = Height / 2;                  DrawText(g' Text' state' x' y);              }              else if (has_image && !has_text) {                  x = (BodyWidth - this.Image.Width) / 2;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);              }              else if (has_image && has_text) {                  x = 1;                  y = (Height - this.Image.Height) / 2;                  if (_checked) {                      x++;                      y++;                  }                  DrawImage(g' state' this.Image' x' y);                  x += this.Image.Width + 2;                  DrawText(g' this.Text' state' x' y);              }
Magic Number,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawComboStyleTriangle,The following statement contains a magic number: int y = this.Height / 2;
Magic Number,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawComboStyleTriangle,The following statement contains a magic number: g.DrawLine(p' x' y - 1' x + 5' y - 1);
Magic Number,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawComboStyleTriangle,The following statement contains a magic number: g.DrawLine(p' x + 1' y' x + 4' y);
Magic Number,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawComboStyleTriangle,The following statement contains a magic number: g.DrawLine(p' x + 2' y + 1' x + 3' y + 1);
Magic Number,Poderosa.UI,GButton,C:\repos\poderosaproject_poderosa\UI\GButton.cs,DrawComboStyleTriangle,The following statement contains a magic number: g.DrawLine(p' x + 2' y + 1' x + 3' y + 1);
Magic Number,Poderosa.UI,GMainMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawHoverRect,The following statement contains a magic number: Rectangle rect = new Rectangle(e.Bounds.X'                  e.Bounds.Y + 1'                  e.Bounds.Width'                  e.Bounds.Height - 2);
Magic Number,Poderosa.UI,GMainMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawSelectionRect,The following statement contains a magic number: Rectangle rect = new Rectangle(e.Bounds.X'                  e.Bounds.Y + 1'                  e.Bounds.Width'                  e.Bounds.Height - 2);
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,OnMeasureItem,The following statement contains a magic number: if (this.Text == "-") {                  e.ItemHeight = 7;                  e.ItemWidth = 16;                  Debug.Assert(this.OwnerDraw);              }              else {                  string miText = this.Text.Replace("&"' "");                  // get the item's text size                  SizeF miSize = e.Graphics.MeasureString(miText' Consts.menuFont);                  int scWidth = 0;                  // get the short cut width                  if (_shortcut != Keys.None) {                      SizeF scSize = e.Graphics.MeasureString(FormatShortcut(_shortcut)' Consts.menuFont);                      scWidth = Convert.ToInt32(scSize.Width);                  }                  // set the bounds                  int miHeight = Convert.ToInt32(miSize.Height) + 7;                  if (miHeight < 25)                      miHeight = Consts.MIN_MENU_HEIGHT;                  e.ItemHeight = miHeight;                  e.ItemWidth = Convert.ToInt32(miSize.Width) + scWidth + (Consts.PIC_AREA_SIZE * 2);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,OnMeasureItem,The following statement contains a magic number: if (this.Text == "-") {                  e.ItemHeight = 7;                  e.ItemWidth = 16;                  Debug.Assert(this.OwnerDraw);              }              else {                  string miText = this.Text.Replace("&"' "");                  // get the item's text size                  SizeF miSize = e.Graphics.MeasureString(miText' Consts.menuFont);                  int scWidth = 0;                  // get the short cut width                  if (_shortcut != Keys.None) {                      SizeF scSize = e.Graphics.MeasureString(FormatShortcut(_shortcut)' Consts.menuFont);                      scWidth = Convert.ToInt32(scSize.Width);                  }                  // set the bounds                  int miHeight = Convert.ToInt32(miSize.Height) + 7;                  if (miHeight < 25)                      miHeight = Consts.MIN_MENU_HEIGHT;                  e.ItemHeight = miHeight;                  e.ItemWidth = Convert.ToInt32(miSize.Width) + scWidth + (Consts.PIC_AREA_SIZE * 2);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,OnMeasureItem,The following statement contains a magic number: if (this.Text == "-") {                  e.ItemHeight = 7;                  e.ItemWidth = 16;                  Debug.Assert(this.OwnerDraw);              }              else {                  string miText = this.Text.Replace("&"' "");                  // get the item's text size                  SizeF miSize = e.Graphics.MeasureString(miText' Consts.menuFont);                  int scWidth = 0;                  // get the short cut width                  if (_shortcut != Keys.None) {                      SizeF scSize = e.Graphics.MeasureString(FormatShortcut(_shortcut)' Consts.menuFont);                      scWidth = Convert.ToInt32(scSize.Width);                  }                  // set the bounds                  int miHeight = Convert.ToInt32(miSize.Height) + 7;                  if (miHeight < 25)                      miHeight = Consts.MIN_MENU_HEIGHT;                  e.ItemHeight = miHeight;                  e.ItemWidth = Convert.ToInt32(miSize.Width) + scWidth + (Consts.PIC_AREA_SIZE * 2);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,OnMeasureItem,The following statement contains a magic number: if (this.Text == "-") {                  e.ItemHeight = 7;                  e.ItemWidth = 16;                  Debug.Assert(this.OwnerDraw);              }              else {                  string miText = this.Text.Replace("&"' "");                  // get the item's text size                  SizeF miSize = e.Graphics.MeasureString(miText' Consts.menuFont);                  int scWidth = 0;                  // get the short cut width                  if (_shortcut != Keys.None) {                      SizeF scSize = e.Graphics.MeasureString(FormatShortcut(_shortcut)' Consts.menuFont);                      scWidth = Convert.ToInt32(scSize.Width);                  }                  // set the bounds                  int miHeight = Convert.ToInt32(miSize.Height) + 7;                  if (miHeight < 25)                      miHeight = Consts.MIN_MENU_HEIGHT;                  e.ItemHeight = miHeight;                  e.ItemWidth = Convert.ToInt32(miSize.Width) + scWidth + (Consts.PIC_AREA_SIZE * 2);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,OnMeasureItem,The following statement contains a magic number: if (this.Text == "-") {                  e.ItemHeight = 7;                  e.ItemWidth = 16;                  Debug.Assert(this.OwnerDraw);              }              else {                  string miText = this.Text.Replace("&"' "");                  // get the item's text size                  SizeF miSize = e.Graphics.MeasureString(miText' Consts.menuFont);                  int scWidth = 0;                  // get the short cut width                  if (_shortcut != Keys.None) {                      SizeF scSize = e.Graphics.MeasureString(FormatShortcut(_shortcut)' Consts.menuFont);                      scWidth = Convert.ToInt32(scSize.Width);                  }                  // set the bounds                  int miHeight = Convert.ToInt32(miSize.Height) + 7;                  if (miHeight < 25)                      miHeight = Consts.MIN_MENU_HEIGHT;                  e.ItemHeight = miHeight;                  e.ItemWidth = Convert.ToInt32(miSize.Width) + scWidth + (Consts.PIC_AREA_SIZE * 2);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawMenuText,The following statement contains a magic number: if (this.Text == "-") {                  // draw seperator line                  e.Graphics.DrawLine(_menuLightPen' e.Bounds.X + Consts.PIC_AREA_SIZE + 6' e.Bounds.Y + 2' e.Bounds.Width' e.Bounds.Y + 2);              }              else {                  // create StringFormat object and set the alignment to center                  StringFormat sf = new StringFormat();                  sf.LineAlignment = StringAlignment.Center;                  sf.HotkeyPrefix = HotkeyPrefix.Show;                    // create the rectangle that will hold the text                  RectangleF rect = new Rectangle(Consts.PIC_AREA_SIZE + 4' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height);                    // check the menuitem status                  if (this.Enabled)                      textBrush = _textBrush;                  else                      textBrush = _textDisabledBrush;                    // Draw the text                  e.Graphics.DrawString(this.Text' Consts.menuFont' textBrush' rect' sf);                    // Draw the shortcut text                  DrawShortCutText(e);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawMenuText,The following statement contains a magic number: if (this.Text == "-") {                  // draw seperator line                  e.Graphics.DrawLine(_menuLightPen' e.Bounds.X + Consts.PIC_AREA_SIZE + 6' e.Bounds.Y + 2' e.Bounds.Width' e.Bounds.Y + 2);              }              else {                  // create StringFormat object and set the alignment to center                  StringFormat sf = new StringFormat();                  sf.LineAlignment = StringAlignment.Center;                  sf.HotkeyPrefix = HotkeyPrefix.Show;                    // create the rectangle that will hold the text                  RectangleF rect = new Rectangle(Consts.PIC_AREA_SIZE + 4' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height);                    // check the menuitem status                  if (this.Enabled)                      textBrush = _textBrush;                  else                      textBrush = _textDisabledBrush;                    // Draw the text                  e.Graphics.DrawString(this.Text' Consts.menuFont' textBrush' rect' sf);                    // Draw the shortcut text                  DrawShortCutText(e);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawMenuText,The following statement contains a magic number: if (this.Text == "-") {                  // draw seperator line                  e.Graphics.DrawLine(_menuLightPen' e.Bounds.X + Consts.PIC_AREA_SIZE + 6' e.Bounds.Y + 2' e.Bounds.Width' e.Bounds.Y + 2);              }              else {                  // create StringFormat object and set the alignment to center                  StringFormat sf = new StringFormat();                  sf.LineAlignment = StringAlignment.Center;                  sf.HotkeyPrefix = HotkeyPrefix.Show;                    // create the rectangle that will hold the text                  RectangleF rect = new Rectangle(Consts.PIC_AREA_SIZE + 4' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height);                    // check the menuitem status                  if (this.Enabled)                      textBrush = _textBrush;                  else                      textBrush = _textDisabledBrush;                    // Draw the text                  e.Graphics.DrawString(this.Text' Consts.menuFont' textBrush' rect' sf);                    // Draw the shortcut text                  DrawShortCutText(e);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawMenuText,The following statement contains a magic number: if (this.Text == "-") {                  // draw seperator line                  e.Graphics.DrawLine(_menuLightPen' e.Bounds.X + Consts.PIC_AREA_SIZE + 6' e.Bounds.Y + 2' e.Bounds.Width' e.Bounds.Y + 2);              }              else {                  // create StringFormat object and set the alignment to center                  StringFormat sf = new StringFormat();                  sf.LineAlignment = StringAlignment.Center;                  sf.HotkeyPrefix = HotkeyPrefix.Show;                    // create the rectangle that will hold the text                  RectangleF rect = new Rectangle(Consts.PIC_AREA_SIZE + 4' e.Bounds.Y' e.Bounds.Width' e.Bounds.Height);                    // check the menuitem status                  if (this.Enabled)                      textBrush = _textBrush;                  else                      textBrush = _textDisabledBrush;                    // Draw the text                  e.Graphics.DrawString(this.Text' Consts.menuFont' textBrush' rect' sf);                    // Draw the shortcut text                  DrawShortCutText(e);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawShortCutText,The following statement contains a magic number: if (this.ShortcutKey != Keys.None) {                  string shortcut_text = FormatShortcut(this.ShortcutKey);                  // get the shortcut text size                  SizeF scSize =                      e.Graphics.MeasureString(shortcut_text'                      Consts.menuFont);                    // Create the text rectangle                  Rectangle rect =                      new Rectangle(e.Bounds.Width - Convert.ToInt32(scSize.Width) - 3'                      e.Bounds.Y'                      Convert.ToInt32(scSize.Width) + 3'                      e.Bounds.Height);                    // set it to right-to-left' and center it                  StringFormat sf = new StringFormat();                  //sf.FormatFlags = StringFormatFlags.DirectionRightToLeft;                  sf.LineAlignment = StringAlignment.Center;                    // draw the text                  if (this.Enabled)                      e.Graphics.DrawString(shortcut_text'                          Consts.menuFont'                          _textBrush'                          rect' sf);                  else {                      // if menuItem is disabled                      e.Graphics.DrawString(shortcut_text'                          Consts.menuFont'                          _textDisabledBrush'                          rect' sf);                  }              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawShortCutText,The following statement contains a magic number: if (this.ShortcutKey != Keys.None) {                  string shortcut_text = FormatShortcut(this.ShortcutKey);                  // get the shortcut text size                  SizeF scSize =                      e.Graphics.MeasureString(shortcut_text'                      Consts.menuFont);                    // Create the text rectangle                  Rectangle rect =                      new Rectangle(e.Bounds.Width - Convert.ToInt32(scSize.Width) - 3'                      e.Bounds.Y'                      Convert.ToInt32(scSize.Width) + 3'                      e.Bounds.Height);                    // set it to right-to-left' and center it                  StringFormat sf = new StringFormat();                  //sf.FormatFlags = StringFormatFlags.DirectionRightToLeft;                  sf.LineAlignment = StringAlignment.Center;                    // draw the text                  if (this.Enabled)                      e.Graphics.DrawString(shortcut_text'                          Consts.menuFont'                          _textBrush'                          rect' sf);                  else {                      // if menuItem is disabled                      e.Graphics.DrawString(shortcut_text'                          Consts.menuFont'                          _textDisabledBrush'                          rect' sf);                  }              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawItemPicture,The following statement contains a magic number: const int MAX_PIC_SIZE = 16;
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawItemPicture,The following statement contains a magic number: if (img != null) {                  // if the size exceeds the maximum picture's size' fix it                  int width = img.Width > MAX_PIC_SIZE ? MAX_PIC_SIZE : img.Width;                  int height = img.Height > MAX_PIC_SIZE ? MAX_PIC_SIZE : img.Height;                    // set the picture coordinates                  int x = e.Bounds.X + 2;                  int y = e.Bounds.Y + ((e.Bounds.Height - height) / 2);                    // create the picture rectangle                  Rectangle rect = new Rectangle(x' y' width' height);                    // Now check the items state' if enabled just draw the picture                  // if not enabled' make a water mark and draw it.                  if (this.Enabled) {                      // draw the image                      e.Graphics.DrawImage(img' x' y' width' height);                  }                  else {                      // make water mark of the picture                      ColorMatrix myColorMatrix = new ColorMatrix();                      myColorMatrix.Matrix00 = 1.00f; // Red                      myColorMatrix.Matrix11 = 1.00f; // Green                      myColorMatrix.Matrix22 = 1.00f; // Blue                      myColorMatrix.Matrix33 = 1.30f; // alpha                      myColorMatrix.Matrix44 = 1.00f; // w                        // Create an ImageAttributes object and set the color matrix.                      ImageAttributes imageAttr = new ImageAttributes();                      imageAttr.SetColorMatrix(myColorMatrix);                        // draw the image                      e.Graphics.DrawImage(img'                          rect'                          0'                          0'                          width'                          height'                          GraphicsUnit.Pixel'                          imageAttr);                  }              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawItemPicture,The following statement contains a magic number: if (img != null) {                  // if the size exceeds the maximum picture's size' fix it                  int width = img.Width > MAX_PIC_SIZE ? MAX_PIC_SIZE : img.Width;                  int height = img.Height > MAX_PIC_SIZE ? MAX_PIC_SIZE : img.Height;                    // set the picture coordinates                  int x = e.Bounds.X + 2;                  int y = e.Bounds.Y + ((e.Bounds.Height - height) / 2);                    // create the picture rectangle                  Rectangle rect = new Rectangle(x' y' width' height);                    // Now check the items state' if enabled just draw the picture                  // if not enabled' make a water mark and draw it.                  if (this.Enabled) {                      // draw the image                      e.Graphics.DrawImage(img' x' y' width' height);                  }                  else {                      // make water mark of the picture                      ColorMatrix myColorMatrix = new ColorMatrix();                      myColorMatrix.Matrix00 = 1.00f; // Red                      myColorMatrix.Matrix11 = 1.00f; // Green                      myColorMatrix.Matrix22 = 1.00f; // Blue                      myColorMatrix.Matrix33 = 1.30f; // alpha                      myColorMatrix.Matrix44 = 1.00f; // w                        // Create an ImageAttributes object and set the color matrix.                      ImageAttributes imageAttr = new ImageAttributes();                      imageAttr.SetColorMatrix(myColorMatrix);                        // draw the image                      e.Graphics.DrawImage(img'                          rect'                          0'                          0'                          width'                          height'                          GraphicsUnit.Pixel'                          imageAttr);                  }              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: int cbSize = Consts.PIC_AREA_SIZE - 5;
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: Rectangle rect = new Rectangle(e.Bounds.X + 1'                  e.Bounds.Y + ((e.Bounds.Height - cbSize) / 2)'                  cbSize'                  cbSize);
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: if (img == null) {                  // Draw the check mark                  e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);                    e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: if (img == null) {                  // Draw the check mark                  e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);                    e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: if (img == null) {                  // Draw the check mark                  e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);                    e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: if (img == null) {                  // Draw the check mark                  e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);                    e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: if (img == null) {                  // Draw the check mark                  e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);                    e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: if (img == null) {                  // Draw the check mark                  e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);                    e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: if (img == null) {                  // Draw the check mark                  e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);                    e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);              }
Magic Number,Poderosa.UI,GMenuItem,C:\repos\poderosaproject_poderosa\UI\GMenuItem.cs,DrawCheckBox,The following statement contains a magic number: if (img == null) {                  // Draw the check mark                  e.Graphics.DrawLine(pen' e.Bounds.X + 7'                      e.Bounds.Y + 10'                      e.Bounds.X + 10'                      e.Bounds.Y + 14);                    e.Graphics.DrawLine(pen'                      e.Bounds.X + 10'                      e.Bounds.Y + 14'                      e.Bounds.X + 15'                      e.Bounds.Y + 9);              }
Magic Number,Poderosa.UI,HotKey,C:\repos\poderosaproject_poderosa\UI\HotKey.cs,AppendDebugText,The following statement contains a magic number: if (data.Length >= 5) {                  string[] n = new string[5];                  Array.Copy(data' data.Length - 4' n' 0' 4);                  n[4] = text;                  _debugTextBox.Lines = n;              }              else {                  string[] n = new string[data.Length + 1];                  Array.Copy(data' 0' n' 0' data.Length);                  n[data.Length] = text;                  _debugTextBox.Lines = n;              }
Magic Number,Poderosa.UI,HotKey,C:\repos\poderosaproject_poderosa\UI\HotKey.cs,AppendDebugText,The following statement contains a magic number: if (data.Length >= 5) {                  string[] n = new string[5];                  Array.Copy(data' data.Length - 4' n' 0' 4);                  n[4] = text;                  _debugTextBox.Lines = n;              }              else {                  string[] n = new string[data.Length + 1];                  Array.Copy(data' 0' n' 0' data.Length);                  n[data.Length] = text;                  _debugTextBox.Lines = n;              }
Magic Number,Poderosa.UI,HotKey,C:\repos\poderosaproject_poderosa\UI\HotKey.cs,AppendDebugText,The following statement contains a magic number: if (data.Length >= 5) {                  string[] n = new string[5];                  Array.Copy(data' data.Length - 4' n' 0' 4);                  n[4] = text;                  _debugTextBox.Lines = n;              }              else {                  string[] n = new string[data.Length + 1];                  Array.Copy(data' 0' n' 0' data.Length);                  n[data.Length] = text;                  _debugTextBox.Lines = n;              }
Magic Number,Poderosa.UI,HotKey,C:\repos\poderosaproject_poderosa\UI\HotKey.cs,AppendDebugText,The following statement contains a magic number: if (data.Length >= 5) {                  string[] n = new string[5];                  Array.Copy(data' data.Length - 4' n' 0' 4);                  n[4] = text;                  _debugTextBox.Lines = n;              }              else {                  string[] n = new string[data.Length + 1];                  Array.Copy(data' 0' n' 0' data.Length);                  n[data.Length] = text;                  _debugTextBox.Lines = n;              }
Magic Number,Poderosa.UI,HotKey,C:\repos\poderosaproject_poderosa\UI\HotKey.cs,AppendDebugText,The following statement contains a magic number: if (data.Length >= 5) {                  string[] n = new string[5];                  Array.Copy(data' data.Length - 4' n' 0' 4);                  n[4] = text;                  _debugTextBox.Lines = n;              }              else {                  string[] n = new string[data.Length + 1];                  Array.Copy(data' 0' n' 0' data.Length);                  n[data.Length] = text;                  _debugTextBox.Lines = n;              }
Magic Number,Poderosa.UI,PaneDivision,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,PaneDivision,The following statement contains a magic number: _countLimit = 16;
Magic Number,Poderosa.UI,PaneDivision,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,PaneDivision,The following statement contains a magic number: _minimumEdgeLength = 24;
Magic Number,Poderosa.UI,PaneDivision,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,SplitPane,The following statement contains a magic number: if (SizeToLength(target.Size' direction) < _minimumEdgeLength * 2 + PaneSplitter.SPLITTER_WIDTH)                  return SplitResult.F_TooSmallToSplit;
Magic Number,Poderosa.UI,PaneDivision,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,UnifyPane,The following statement contains a magic number: bool unifying_root = node.ParentList == _rootList && _rootList.NodeCount == 2;
Magic Number,Poderosa.UI,DivisionNode,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,AdjustSplitPosition,The following statement contains a magic number: if (IsLast) { //splitter持たず                      if (!IsLeaf)                          _childList.AdjustSplitPosition(size);                  }                  else {                      int splitpos = (int)(_parent.HostingLength * SumRatio(_next)) - PaneSplitter.SPLITTER_WIDTH / 2;                      //上限・下限                      int minimum_splitpos = _next.RequiredMinimumLength;                      int maximum_splitpos = SizeToLength(size) - this.RequiredMinimumHostingLength - PaneSplitter.SPLITTER_WIDTH;                      splitpos = UIUtil.AdjustRange(splitpos' minimum_splitpos' maximum_splitpos);                        SetSplitterPosition(splitpos);                        Size splitsize = _parent.Direction == Direction.TB ?                          new Size(size.Width' splitpos) : new Size(splitpos' size.Height);                      _splitter.TargetControl.Size = splitsize; //next.HostingControl or _container                        //末尾、次いで枝へと再帰                      _next.AdjustSplitPosition(splitsize);                        if (!IsLeaf) {                          Size hostingsize = _parent.Direction == Direction.TB ?                              new Size(size.Width' size.Height - PaneSplitter.SPLITTER_WIDTH - splitpos) : new Size(size.Width - PaneSplitter.SPLITTER_WIDTH - splitpos' size.Height);                          _childList.AdjustSplitPosition(hostingsize);                      }                  }
Magic Number,Poderosa.UI,DivisionNode,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,InsertNext,The following statement contains a magic number: _ratio /= 2;
Magic Number,Poderosa.UI,Node,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,ToString,The following statement contains a magic number: bld.Append(_ratio == ALL_OF_REST ? "L" : ((int)(_ratio * 100)).ToString());
Magic Number,Poderosa.UI,Node,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,Parse,The following statement contains a magic number: if (ratio == "L")                      _ratio = ALL_OF_REST;                  else {                      int r = Int32.Parse(ratio);                      if (r <= 0 || r >= 100)                          throw new FormatException("ratio range error");                      _ratio = r / 100.0;                  }
Magic Number,Poderosa.UI,Node,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,Parse,The following statement contains a magic number: if (ratio == "L")                      _ratio = ALL_OF_REST;                  else {                      int r = Int32.Parse(ratio);                      if (r <= 0 || r >= 100)                          throw new FormatException("ratio range error");                      _ratio = r / 100.0;                  }
Magic Number,Poderosa.UI,Node,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,Parse,The following statement contains a magic number: if (format[colon + 1] == 'L') { //label                      int l = SplitFormat.FindChar2(format' colon + 2' '''' ')');                      _label = new string(format' colon + 2' l - (colon + 2));                      return l;                  }                  else { //split                      _content = new SplitFormat();                      return _content.Parse(format' colon + 1);                  }
Magic Number,Poderosa.UI,Node,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,Parse,The following statement contains a magic number: if (format[colon + 1] == 'L') { //label                      int l = SplitFormat.FindChar2(format' colon + 2' '''' ')');                      _label = new string(format' colon + 2' l - (colon + 2));                      return l;                  }                  else { //split                      _content = new SplitFormat();                      return _content.Parse(format' colon + 1);                  }
Magic Number,Poderosa.UI,Node,C:\repos\poderosaproject_poderosa\UI\PaneDivision.cs,Parse,The following statement contains a magic number: if (format[colon + 1] == 'L') { //label                      int l = SplitFormat.FindChar2(format' colon + 2' '''' ')');                      _label = new string(format' colon + 2' l - (colon + 2));                      return l;                  }                  else { //split                      _content = new SplitFormat();                      return _content.Parse(format' colon + 1);                  }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,PaneSplitter,The following statement contains a magic number: _hotColor = CalculateColor(SystemColors.Highlight' SystemColors.Window' 70);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,PaneSplitter,The following statement contains a magic number: this.MinSize = 32;
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,PaneSplitter,The following statement contains a magic number: this.MinExtra = 32;
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnResize,The following statement contains a magic number: _tagRect = this.IsVSplitter ?                  new Rectangle(0' ((this.ClientSize.Height - TAG_LENGTH) / 2)' SPLITTER_WIDTH' TAG_LENGTH) :                  new Rectangle(((this.ClientSize.Width - TAG_LENGTH) / 2)' 0' TAG_LENGTH' SPLITTER_WIDTH);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnResize,The following statement contains a magic number: _tagRect = this.IsVSplitter ?                  new Rectangle(0' ((this.ClientSize.Height - TAG_LENGTH) / 2)' SPLITTER_WIDTH' TAG_LENGTH) :                  new Rectangle(((this.ClientSize.Width - TAG_LENGTH) / 2)' 0' TAG_LENGTH' SPLITTER_WIDTH);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (this.IsVSplitter) {                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' SPLITTER_WIDTH' TAG_LENGTH));                    // draw the top & bottom lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Y' _tagRect.X + _tagRect.Width - 2' _tagRect.Y);                  g.DrawLine(SystemPens.ControlDark' _tagRect.X + 1' _tagRect.Bottom' _tagRect.X + _tagRect.Width - 2' _tagRect.Bottom);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 1;                  int y = _tagRect.Y + 14;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x' y + 1);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 1' y + 2);                        y += 3;                  }              }              else { //HSplitter                  // draw the background color for our control image                  g.FillRectangle(_isHot ? _hotBrush : SystemBrushes.Control' new Rectangle(_tagRect.X' _tagRect.Y' TAG_LENGTH' SPLITTER_WIDTH));                    // draw the left & right lines for our control image                  g.DrawLine(SystemPens.ControlDark' _tagRect.X' _tagRect.Y + 1' _tagRect.X' _tagRect.Bottom - 2);                  g.DrawLine(SystemPens.ControlDark' _tagRect.Right' _tagRect.Y + 1' _tagRect.Right' _tagRect.Bottom - 2);                    // draw the dots for our control image using a loop                  int x = _tagRect.X + 14;                  int y = _tagRect.Y + 1;                    for (int i = 0; i < 30; i++) {                      // light dot                      g.DrawLine(SystemPens.ControlLightLight' x' y' x + 1' y);                      // dark dot                      g.DrawLine(SystemPens.ControlDarkDark' x + 1' y + 1' x + 2' y + 1);                        x += 3;                  }                }
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: Color frontColor = Color.FromArgb(255' front);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: Color backColor = Color.FromArgb(255' back);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,Poderosa.UI,PaneSplitter,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalculateColor,The following statement contains a magic number: return Color.FromArgb(255' newRed' newGreen' newBlue);
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (_state == MarkState.TopBottom) {                  Size size = _markSizeTopBottom;                  int mid = _output.SplitClientWidth / 2;                  DrawMark(g' _elementTop' new Rectangle(mid - size.Width / 2' 0' size.Width' size.Height));                  DrawMark(g' _elementBottom' new Rectangle(mid - size.Width / 2' _output.SplitClientHeight - size.Height' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' mid' size.Height' mid' _output.SplitClientHeight - size.Height);              }              else { //LeftRight                  Size size = _markSizeLeftRight;                  int mid = _output.SplitClientHeight / 2;                  DrawMark(g' _elementLeft' new Rectangle(0' mid - size.Height / 2' size.Width' size.Height));                  DrawMark(g' _elementRight' new Rectangle(_output.SplitClientWidth - size.Width' mid - size.Height / 2' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' size.Width' mid' _output.SplitClientWidth - size.Width' mid);              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (_state == MarkState.TopBottom) {                  Size size = _markSizeTopBottom;                  int mid = _output.SplitClientWidth / 2;                  DrawMark(g' _elementTop' new Rectangle(mid - size.Width / 2' 0' size.Width' size.Height));                  DrawMark(g' _elementBottom' new Rectangle(mid - size.Width / 2' _output.SplitClientHeight - size.Height' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' mid' size.Height' mid' _output.SplitClientHeight - size.Height);              }              else { //LeftRight                  Size size = _markSizeLeftRight;                  int mid = _output.SplitClientHeight / 2;                  DrawMark(g' _elementLeft' new Rectangle(0' mid - size.Height / 2' size.Width' size.Height));                  DrawMark(g' _elementRight' new Rectangle(_output.SplitClientWidth - size.Width' mid - size.Height / 2' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' size.Width' mid' _output.SplitClientWidth - size.Width' mid);              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (_state == MarkState.TopBottom) {                  Size size = _markSizeTopBottom;                  int mid = _output.SplitClientWidth / 2;                  DrawMark(g' _elementTop' new Rectangle(mid - size.Width / 2' 0' size.Width' size.Height));                  DrawMark(g' _elementBottom' new Rectangle(mid - size.Width / 2' _output.SplitClientHeight - size.Height' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' mid' size.Height' mid' _output.SplitClientHeight - size.Height);              }              else { //LeftRight                  Size size = _markSizeLeftRight;                  int mid = _output.SplitClientHeight / 2;                  DrawMark(g' _elementLeft' new Rectangle(0' mid - size.Height / 2' size.Width' size.Height));                  DrawMark(g' _elementRight' new Rectangle(_output.SplitClientWidth - size.Width' mid - size.Height / 2' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' size.Width' mid' _output.SplitClientWidth - size.Width' mid);              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (_state == MarkState.TopBottom) {                  Size size = _markSizeTopBottom;                  int mid = _output.SplitClientWidth / 2;                  DrawMark(g' _elementTop' new Rectangle(mid - size.Width / 2' 0' size.Width' size.Height));                  DrawMark(g' _elementBottom' new Rectangle(mid - size.Width / 2' _output.SplitClientHeight - size.Height' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' mid' size.Height' mid' _output.SplitClientHeight - size.Height);              }              else { //LeftRight                  Size size = _markSizeLeftRight;                  int mid = _output.SplitClientHeight / 2;                  DrawMark(g' _elementLeft' new Rectangle(0' mid - size.Height / 2' size.Width' size.Height));                  DrawMark(g' _elementRight' new Rectangle(_output.SplitClientWidth - size.Width' mid - size.Height / 2' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' size.Width' mid' _output.SplitClientWidth - size.Width' mid);              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (_state == MarkState.TopBottom) {                  Size size = _markSizeTopBottom;                  int mid = _output.SplitClientWidth / 2;                  DrawMark(g' _elementTop' new Rectangle(mid - size.Width / 2' 0' size.Width' size.Height));                  DrawMark(g' _elementBottom' new Rectangle(mid - size.Width / 2' _output.SplitClientHeight - size.Height' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' mid' size.Height' mid' _output.SplitClientHeight - size.Height);              }              else { //LeftRight                  Size size = _markSizeLeftRight;                  int mid = _output.SplitClientHeight / 2;                  DrawMark(g' _elementLeft' new Rectangle(0' mid - size.Height / 2' size.Width' size.Height));                  DrawMark(g' _elementRight' new Rectangle(_output.SplitClientWidth - size.Width' mid - size.Height / 2' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' size.Width' mid' _output.SplitClientWidth - size.Width' mid);              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnPaint,The following statement contains a magic number: if (_state == MarkState.TopBottom) {                  Size size = _markSizeTopBottom;                  int mid = _output.SplitClientWidth / 2;                  DrawMark(g' _elementTop' new Rectangle(mid - size.Width / 2' 0' size.Width' size.Height));                  DrawMark(g' _elementBottom' new Rectangle(mid - size.Width / 2' _output.SplitClientHeight - size.Height' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' mid' size.Height' mid' _output.SplitClientHeight - size.Height);              }              else { //LeftRight                  Size size = _markSizeLeftRight;                  int mid = _output.SplitClientHeight / 2;                  DrawMark(g' _elementLeft' new Rectangle(0' mid - size.Height / 2' size.Width' size.Height));                  DrawMark(g' _elementRight' new Rectangle(_output.SplitClientWidth - size.Width' mid - size.Height / 2' size.Width' size.Height));                  if (_pen != null)                      g.DrawLine(_pen' size.Width' mid' _output.SplitClientWidth - size.Width' mid);              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnMouseMove,The following statement contains a magic number: if (_enabled && _output.CanSplit) {                  int x = args.X;                  int y = args.Y;                  if (Near(x' y' _output.SplitClientWidth / 2' MIN_DISTANCE))                      _state = MarkState.TopBottom;                  else if (Near(x' y' _output.SplitClientWidth / 2' _output.SplitClientHeight - MIN_DISTANCE))                      _state = MarkState.TopBottom;                  else if (Near(x' y' MIN_DISTANCE' _output.SplitClientHeight / 2))                      _state = MarkState.LeftRight;                  else if (Near(x' y' _output.SplitClientWidth - MIN_DISTANCE' _output.SplitClientHeight / 2))                      _state = MarkState.LeftRight;                    if (_state == MarkState.None)                      _markCancelling = false; //マウス移動の結果分割用意でなくなった場合キャンセル解除                  else if (_markCancelling)                      _state = MarkState.None; //キャンセル発動中              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnMouseMove,The following statement contains a magic number: if (_enabled && _output.CanSplit) {                  int x = args.X;                  int y = args.Y;                  if (Near(x' y' _output.SplitClientWidth / 2' MIN_DISTANCE))                      _state = MarkState.TopBottom;                  else if (Near(x' y' _output.SplitClientWidth / 2' _output.SplitClientHeight - MIN_DISTANCE))                      _state = MarkState.TopBottom;                  else if (Near(x' y' MIN_DISTANCE' _output.SplitClientHeight / 2))                      _state = MarkState.LeftRight;                  else if (Near(x' y' _output.SplitClientWidth - MIN_DISTANCE' _output.SplitClientHeight / 2))                      _state = MarkState.LeftRight;                    if (_state == MarkState.None)                      _markCancelling = false; //マウス移動の結果分割用意でなくなった場合キャンセル解除                  else if (_markCancelling)                      _state = MarkState.None; //キャンセル発動中              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnMouseMove,The following statement contains a magic number: if (_enabled && _output.CanSplit) {                  int x = args.X;                  int y = args.Y;                  if (Near(x' y' _output.SplitClientWidth / 2' MIN_DISTANCE))                      _state = MarkState.TopBottom;                  else if (Near(x' y' _output.SplitClientWidth / 2' _output.SplitClientHeight - MIN_DISTANCE))                      _state = MarkState.TopBottom;                  else if (Near(x' y' MIN_DISTANCE' _output.SplitClientHeight / 2))                      _state = MarkState.LeftRight;                  else if (Near(x' y' _output.SplitClientWidth - MIN_DISTANCE' _output.SplitClientHeight / 2))                      _state = MarkState.LeftRight;                    if (_state == MarkState.None)                      _markCancelling = false; //マウス移動の結果分割用意でなくなった場合キャンセル解除                  else if (_markCancelling)                      _state = MarkState.None; //キャンセル発動中              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,OnMouseMove,The following statement contains a magic number: if (_enabled && _output.CanSplit) {                  int x = args.X;                  int y = args.Y;                  if (Near(x' y' _output.SplitClientWidth / 2' MIN_DISTANCE))                      _state = MarkState.TopBottom;                  else if (Near(x' y' _output.SplitClientWidth / 2' _output.SplitClientHeight - MIN_DISTANCE))                      _state = MarkState.TopBottom;                  else if (Near(x' y' MIN_DISTANCE' _output.SplitClientHeight / 2))                      _state = MarkState.LeftRight;                  else if (Near(x' y' _output.SplitClientWidth - MIN_DISTANCE' _output.SplitClientHeight / 2))                      _state = MarkState.LeftRight;                    if (_state == MarkState.None)                      _markCancelling = false; //マウス移動の結果分割用意でなくなった場合キャンセル解除                  else if (_markCancelling)                      _state = MarkState.None; //キャンセル発動中              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalcSize,The following statement contains a magic number: if (VisualStyleInformation.IsEnabledByUser) {                  VisualStyleRenderer renderer = new VisualStyleRenderer(_elementTop.VSElement);                  _markSizeTopBottom = renderer.GetPartSize(g' ThemeSizeType.True);                  renderer.SetParameters(_elementLeft.VSElement);                  _markSizeLeftRight = renderer.GetPartSize(g' ThemeSizeType.True);              }              else {                  _markSizeTopBottom = new Size(16' 16); //このサイズでは設定によってはダメかも                  _markSizeLeftRight = new Size(16' 16);              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalcSize,The following statement contains a magic number: if (VisualStyleInformation.IsEnabledByUser) {                  VisualStyleRenderer renderer = new VisualStyleRenderer(_elementTop.VSElement);                  _markSizeTopBottom = renderer.GetPartSize(g' ThemeSizeType.True);                  renderer.SetParameters(_elementLeft.VSElement);                  _markSizeLeftRight = renderer.GetPartSize(g' ThemeSizeType.True);              }              else {                  _markSizeTopBottom = new Size(16' 16); //このサイズでは設定によってはダメかも                  _markSizeLeftRight = new Size(16' 16);              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalcSize,The following statement contains a magic number: if (VisualStyleInformation.IsEnabledByUser) {                  VisualStyleRenderer renderer = new VisualStyleRenderer(_elementTop.VSElement);                  _markSizeTopBottom = renderer.GetPartSize(g' ThemeSizeType.True);                  renderer.SetParameters(_elementLeft.VSElement);                  _markSizeLeftRight = renderer.GetPartSize(g' ThemeSizeType.True);              }              else {                  _markSizeTopBottom = new Size(16' 16); //このサイズでは設定によってはダメかも                  _markSizeLeftRight = new Size(16' 16);              }
Magic Number,Poderosa.UI,SplitMarkSupport,C:\repos\poderosaproject_poderosa\UI\PaneSplitter.cs,CalcSize,The following statement contains a magic number: if (VisualStyleInformation.IsEnabledByUser) {                  VisualStyleRenderer renderer = new VisualStyleRenderer(_elementTop.VSElement);                  _markSizeTopBottom = renderer.GetPartSize(g' ThemeSizeType.True);                  renderer.SetParameters(_elementLeft.VSElement);                  _markSizeLeftRight = renderer.GetPartSize(g' ThemeSizeType.True);              }              else {                  _markSizeTopBottom = new Size(16' 16); //このサイズでは設定によってはダメかも                  _markSizeLeftRight = new Size(16' 16);              }
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawRoundRect,The following statement contains a magic number: const int ROUND_SIZE = 3;
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawRoundCorner,The following statement contains a magic number: for (int j = 0; j < 3; j++) {                  int x = bx;                  for (int i = 0; i < 3; i++) {                      Win32.SetPixel(hdc' x' y' colors.GetColor(_round_border_info[i' j]));                      x += dx;                  }                  y += dy;              }
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawRoundCorner,The following statement contains a magic number: for (int j = 0; j < 3; j++) {                  int x = bx;                  for (int i = 0; i < 3; i++) {                      Win32.SetPixel(hdc' x' y' colors.GetColor(_round_border_info[i' j]));                      x += dx;                  }                  y += dy;              }
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DarkColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2' src.G / 2' src.B / 2);
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DarkColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2' src.G / 2' src.B / 2);
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DarkColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2' src.G / 2' src.B / 2);
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,LightColor,The following statement contains a magic number: return Color.FromArgb(src.R / 2 + 128' src.G / 2 + 128' src.B / 2 + 128);
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,ToCOLORREF,The following statement contains a magic number: return ((t & 0x000000FF) << 16) | (t & 0x0000FF00) | ((t & 0x00FF0000) >> 16);
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,ToCOLORREF,The following statement contains a magic number: return ((t & 0x000000FF) << 16) | (t & 0x0000FF00) | ((t & 0x00FF0000) >> 16);
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawOmittedMark,The following statement contains a magic number: if (is_bold) {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 1' y' c);                  Win32.SetPixel(hdc' x + 3' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);                  Win32.SetPixel(hdc' x + 6' y' c);                  Win32.SetPixel(hdc' x + 7' y' c);              }              else {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 2' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);              }
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawOmittedMark,The following statement contains a magic number: if (is_bold) {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 1' y' c);                  Win32.SetPixel(hdc' x + 3' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);                  Win32.SetPixel(hdc' x + 6' y' c);                  Win32.SetPixel(hdc' x + 7' y' c);              }              else {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 2' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);              }
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawOmittedMark,The following statement contains a magic number: if (is_bold) {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 1' y' c);                  Win32.SetPixel(hdc' x + 3' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);                  Win32.SetPixel(hdc' x + 6' y' c);                  Win32.SetPixel(hdc' x + 7' y' c);              }              else {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 2' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);              }
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawOmittedMark,The following statement contains a magic number: if (is_bold) {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 1' y' c);                  Win32.SetPixel(hdc' x + 3' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);                  Win32.SetPixel(hdc' x + 6' y' c);                  Win32.SetPixel(hdc' x + 7' y' c);              }              else {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 2' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);              }
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawOmittedMark,The following statement contains a magic number: if (is_bold) {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 1' y' c);                  Win32.SetPixel(hdc' x + 3' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);                  Win32.SetPixel(hdc' x + 6' y' c);                  Win32.SetPixel(hdc' x + 7' y' c);              }              else {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 2' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);              }
Magic Number,Poderosa.Util.Drawing,DrawUtil,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,DrawOmittedMark,The following statement contains a magic number: if (is_bold) {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 1' y' c);                  Win32.SetPixel(hdc' x + 3' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);                  Win32.SetPixel(hdc' x + 6' y' c);                  Win32.SetPixel(hdc' x + 7' y' c);              }              else {                  Win32.SetPixel(hdc' x' y' c);                  Win32.SetPixel(hdc' x + 2' y' c);                  Win32.SetPixel(hdc' x + 4' y' c);              }
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,GetTabAreaWidth,The following statement contains a magic number: return this.Width - 4;
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,CreateButton,The following statement contains a magic number: b.Height = UNITHEIGHT - 2;
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,OnMouseMove,The following statement contains a magic number: if (Math.Abs(_dragStartPosX - args.X) + Math.Abs(_dragStartPosY - args.Y) >= 3) {                  TabBarButton btn = sender as TabBarButton;                  Debug.Assert(btn != null);                  btn.ClearMouseTrackingFlags();                  _dragAndDrop.StartDrag(btn);              }
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,ArrangeButtons,The following statement contains a magic number: int remaining = this.ClientSize.Width - x * 2/*両端マージン*/ - (_buttons.Count - 1) * BUTTON_MARGIN;
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,OnPaint,The following statement contains a magic number: using (TabBarUpdateState state = new TabBarUpdateState("repaint")) {                  base.OnPaint(arg);                  //上に区切り線を引く                  Graphics g = arg.Graphics;                  Pen p = SystemPens.WindowFrame;                  g.DrawLine(p' 0' 0' Width' 0);                  p = SystemPens.ControlLight;                  g.DrawLine(p' 0' 1' Width' 1);                    //DropPoint Effect                  if (_dragAndDrop.OwnsDropPoint(this)) {                      DrawDropPointEffect(g' _dragAndDrop.CurrentDropPoint.PosX(2) - 1' BUTTON_Y);                  }              }
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,OnDragOver,The following statement contains a magic number: if (_dragAndDrop.CanDrop(drgevent.Data' this)) {                  const int DROP_CAPACITY_WIDTH = 6; //ボタンの境界からどの位置までをドロップ可能とするか                  if (_buttons.Count == 0) { //ボタンがないときは特例で                      point = new DragAndDropSupport.DropPoint(this' null' true);                  }                  else {                      Point pt = this.PointToClient(new Point(drgevent.X' drgevent.Y));                      for (int i = 0; i < _buttons.Count; i++) {                          TabBarButton btn = _buttons[i];                          if (Math.Abs(btn.Top + btn.Height / 2 - pt.Y) < btn.Height / 2) {                              if (Math.Abs(btn.Left - BUTTON_MARGIN / 2 - pt.X) < DROP_CAPACITY_WIDTH) {                                  point = new DragAndDropSupport.DropPoint(this' btn' true);                                  break;                              }                              else if (i == _buttons.Count - 1 && btn.Right + BUTTON_MARGIN / 2 < pt.X) { //右端設定ができるのは最後のコントロールだけ                                  point = new DragAndDropSupport.DropPoint(this' btn' false);                                  break;                              }                          }                      }                  }                    if (point != null)                      drgevent.Effect = DragDropEffects.Link;                  else                      drgevent.Effect = DragDropEffects.Move;              }
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,OnDragOver,The following statement contains a magic number: if (_dragAndDrop.CanDrop(drgevent.Data' this)) {                  const int DROP_CAPACITY_WIDTH = 6; //ボタンの境界からどの位置までをドロップ可能とするか                  if (_buttons.Count == 0) { //ボタンがないときは特例で                      point = new DragAndDropSupport.DropPoint(this' null' true);                  }                  else {                      Point pt = this.PointToClient(new Point(drgevent.X' drgevent.Y));                      for (int i = 0; i < _buttons.Count; i++) {                          TabBarButton btn = _buttons[i];                          if (Math.Abs(btn.Top + btn.Height / 2 - pt.Y) < btn.Height / 2) {                              if (Math.Abs(btn.Left - BUTTON_MARGIN / 2 - pt.X) < DROP_CAPACITY_WIDTH) {                                  point = new DragAndDropSupport.DropPoint(this' btn' true);                                  break;                              }                              else if (i == _buttons.Count - 1 && btn.Right + BUTTON_MARGIN / 2 < pt.X) { //右端設定ができるのは最後のコントロールだけ                                  point = new DragAndDropSupport.DropPoint(this' btn' false);                                  break;                              }                          }                      }                  }                    if (point != null)                      drgevent.Effect = DragDropEffects.Link;                  else                      drgevent.Effect = DragDropEffects.Move;              }
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,OnDragOver,The following statement contains a magic number: if (_dragAndDrop.CanDrop(drgevent.Data' this)) {                  const int DROP_CAPACITY_WIDTH = 6; //ボタンの境界からどの位置までをドロップ可能とするか                  if (_buttons.Count == 0) { //ボタンがないときは特例で                      point = new DragAndDropSupport.DropPoint(this' null' true);                  }                  else {                      Point pt = this.PointToClient(new Point(drgevent.X' drgevent.Y));                      for (int i = 0; i < _buttons.Count; i++) {                          TabBarButton btn = _buttons[i];                          if (Math.Abs(btn.Top + btn.Height / 2 - pt.Y) < btn.Height / 2) {                              if (Math.Abs(btn.Left - BUTTON_MARGIN / 2 - pt.X) < DROP_CAPACITY_WIDTH) {                                  point = new DragAndDropSupport.DropPoint(this' btn' true);                                  break;                              }                              else if (i == _buttons.Count - 1 && btn.Right + BUTTON_MARGIN / 2 < pt.X) { //右端設定ができるのは最後のコントロールだけ                                  point = new DragAndDropSupport.DropPoint(this' btn' false);                                  break;                              }                          }                      }                  }                    if (point != null)                      drgevent.Effect = DragDropEffects.Link;                  else                      drgevent.Effect = DragDropEffects.Move;              }
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,OnDragOver,The following statement contains a magic number: if (_dragAndDrop.CanDrop(drgevent.Data' this)) {                  const int DROP_CAPACITY_WIDTH = 6; //ボタンの境界からどの位置までをドロップ可能とするか                  if (_buttons.Count == 0) { //ボタンがないときは特例で                      point = new DragAndDropSupport.DropPoint(this' null' true);                  }                  else {                      Point pt = this.PointToClient(new Point(drgevent.X' drgevent.Y));                      for (int i = 0; i < _buttons.Count; i++) {                          TabBarButton btn = _buttons[i];                          if (Math.Abs(btn.Top + btn.Height / 2 - pt.Y) < btn.Height / 2) {                              if (Math.Abs(btn.Left - BUTTON_MARGIN / 2 - pt.X) < DROP_CAPACITY_WIDTH) {                                  point = new DragAndDropSupport.DropPoint(this' btn' true);                                  break;                              }                              else if (i == _buttons.Count - 1 && btn.Right + BUTTON_MARGIN / 2 < pt.X) { //右端設定ができるのは最後のコントロールだけ                                  point = new DragAndDropSupport.DropPoint(this' btn' false);                                  break;                              }                          }                      }                  }                    if (point != null)                      drgevent.Effect = DragDropEffects.Link;                  else                      drgevent.Effect = DragDropEffects.Move;              }
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,OnDragOver,The following statement contains a magic number: if (_dragAndDrop.CanDrop(drgevent.Data' this)) {                  const int DROP_CAPACITY_WIDTH = 6; //ボタンの境界からどの位置までをドロップ可能とするか                  if (_buttons.Count == 0) { //ボタンがないときは特例で                      point = new DragAndDropSupport.DropPoint(this' null' true);                  }                  else {                      Point pt = this.PointToClient(new Point(drgevent.X' drgevent.Y));                      for (int i = 0; i < _buttons.Count; i++) {                          TabBarButton btn = _buttons[i];                          if (Math.Abs(btn.Top + btn.Height / 2 - pt.Y) < btn.Height / 2) {                              if (Math.Abs(btn.Left - BUTTON_MARGIN / 2 - pt.X) < DROP_CAPACITY_WIDTH) {                                  point = new DragAndDropSupport.DropPoint(this' btn' true);                                  break;                              }                              else if (i == _buttons.Count - 1 && btn.Right + BUTTON_MARGIN / 2 < pt.X) { //右端設定ができるのは最後のコントロールだけ                                  point = new DragAndDropSupport.DropPoint(this' btn' false);                                  break;                              }                          }                      }                  }                    if (point != null)                      drgevent.Effect = DragDropEffects.Link;                  else                      drgevent.Effect = DragDropEffects.Move;              }
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,DrawDropPointEffect,The following statement contains a magic number: int height = UNITHEIGHT - 4;
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,DrawDropPointEffect,The following statement contains a magic number: g.DrawLine(SystemPens.ControlText' x - 3' y' x + 4' y);
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,DrawDropPointEffect,The following statement contains a magic number: g.DrawLine(SystemPens.ControlText' x - 3' y' x + 4' y);
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,DrawDropPointEffect,The following statement contains a magic number: g.DrawLine(SystemPens.ControlText' x - 3' y + height' x + 4' y + height);
Magic Number,Poderosa.Forms,TabBar,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,DrawDropPointEffect,The following statement contains a magic number: g.DrawLine(SystemPens.ControlText' x - 3' y + height' x + 4' y + height);
Magic Number,Poderosa.Forms,TabBarButton,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,CalcSufficientWidth,The following statement contains a magic number: _sufficientWidth =                  img_width                  + (int)Math.Floor(index_width)                  + (int)Math.Ceiling(text_width)                  + TEXT_MARGIN * 4 /* 左、右、img-index' index-bodyで４こ */                  + 2 /* border lines */;
Magic Number,Poderosa.Forms,TabBarButton,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,CalcSufficientWidth,The following statement contains a magic number: _sufficientWidth =                  img_width                  + (int)Math.Floor(index_width)                  + (int)Math.Ceiling(text_width)                  + TEXT_MARGIN * 4 /* 左、右、img-index' index-bodyで４こ */                  + 2 /* border lines */;
Magic Number,Poderosa.Forms,TabBarButton,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,CalcSufficientWidth,The following statement contains a magic number: if (_selected)                  _sufficientWidth += 2;
Magic Number,Poderosa.Forms,TabBarButton,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,AdjustTextAndWidth,The following statement contains a magic number: int remaining = width - (_image == null ? 0 : _image.Width + TEXT_MARGIN) - TEXT_MARGIN * 2 - 2;
Magic Number,Poderosa.Forms,TabBarButton,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,AdjustTextAndWidth,The following statement contains a magic number: int remaining = width - (_image == null ? 0 : _image.Width + TEXT_MARGIN) - TEXT_MARGIN * 2 - 2;
Magic Number,Poderosa.Forms,TabBarButton,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,DrawOrangeBar,The following statement contains a magic number: g.FillRectangle(b' 1' 0' this.Width - 2' 2);
Magic Number,Poderosa.Forms,TabBarButton,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,DrawOrangeBar,The following statement contains a magic number: g.FillRectangle(b' 1' 0' this.Width - 2' 2);
Magic Number,Poderosa.Forms,TabBarButton,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,DrawButtonInternal,The following statement contains a magic number: if (_image != null) {                  int y = (clientSize.Height - _image.Height) / 2 + offsetY;                  DrawImage(g' DrawState.Normal' _image' x' y);                  x += _image.Width + TEXT_MARGIN;              }
Magic Number,Poderosa.Forms,TabBarButton,C:\repos\poderosaproject_poderosa\UI\TabBar.cs,DrawButtonInternal,The following statement contains a magic number: if (_showIndexText) {                  SizeF indexTextSize = g.MeasureString(_indexText' drawing.Font);                  g.DrawString(                      _indexText'                      drawing.Font'                      SystemBrushes.ControlDark'                      x'                      (clientSize.Height - (int)Math.Ceiling(indexTextSize.Height) + 1) / 2 + offsetY);                  x += (int)Math.Floor(indexTextSize.Width) + TEXT_MARGIN;              }
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button1.Location = new System.Drawing.Point(8' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button1.Location = new System.Drawing.Point(8' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button1.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button1.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button2.Location = new System.Drawing.Point(112' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button2.Location = new System.Drawing.Point(112' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button2.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button2.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button3.Location = new System.Drawing.Point(216' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button3.Location = new System.Drawing.Point(216' 56);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button3.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button3.Size = new System.Drawing.Size(96' 23);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._button3.TabIndex = 2;
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._message.Location = new System.Drawing.Point(64' 8);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._message.Location = new System.Drawing.Point(64' 8);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._message.Size = new System.Drawing.Size(232' 48);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._message.Size = new System.Drawing.Size(232' 48);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this._message.TabIndex = 3;
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(322' 85);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(322' 85);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,OnPaint,The following statement contains a magic number: a.Graphics.DrawIcon(_questionIcon' 16' 8);
Magic Number,Poderosa.Forms,ThreeButtonMessageBox,C:\repos\poderosaproject_poderosa\UI\ThreeButtonMessageBox.cs,OnPaint,The following statement contains a magic number: a.Graphics.DrawIcon(_questionIcon' 16' 8);
Missing Default,Poderosa.Util.Drawing,RoundRectColors,C:\repos\poderosaproject_poderosa\UI\DrawUtil.cs,GetColor,The following switch statement is missing a default case: switch (e) {                      case RoundBorderElement.Inner:                          return inner_color;                      case RoundBorderElement.Outer:                          return outer_color;                      case RoundBorderElement.Light:                          return light_color;                      case RoundBorderElement.LightLight:                          return lightlight_color;                  }
