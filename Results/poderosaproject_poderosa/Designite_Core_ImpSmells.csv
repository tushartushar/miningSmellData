Implementation smell,Namespace,Class,File,Method,Description
Long Method,Poderosa.Document,GLine,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,Render,The method has 132 lines of code.
Complex Method,Poderosa.Forms,MainWindowArgument,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,ApplyToLoadedWindow,Cyclomatic complexity of the method is 11
Complex Method,Poderosa.Commands,PositionDesignationSorter,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CommandPositionEx.cs,BuildResult,Cyclomatic complexity of the method is 10
Complex Method,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,InvalidateEx,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,OnPaint,Cyclomatic complexity of the method is 12
Complex Method,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,BuildTransientDocument,Cyclomatic complexity of the method is 12
Complex Method,Poderosa.View,TextSelectionUIHandler,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,OnMouseMove,Cyclomatic complexity of the method is 11
Complex Method,Poderosa.View,TextSelection,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\TextSelection.cs,ConvertSelectionPosition,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.View,RenderProfile,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,CalcFontInternal,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,Cyclomatic complexity of the method is 19
Complex Method,Poderosa.Document,GLine,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,Render,Cyclomatic complexity of the method is 17
Complex Method,Poderosa.Document,GLine,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,CreateSimpleGLine,Cyclomatic complexity of the method is 8
Complex Method,Poderosa.Document,Unicode,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Unicode.cs,DetermineUnicodeCharFlags,Cyclomatic complexity of the method is 11
Complex Method,Poderosa.Document,TextDecoration,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\TextDecoration.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,Poderosa.Sessions,SessionManagerPlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Session.cs,CloseMultipleDocuments,Cyclomatic complexity of the method is 9
Complex Method,Poderosa.Preferences,PreferenceFolder,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Preferences.cs,LoadFrom,Cyclomatic complexity of the method is 14
Long Parameter List,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,DrawString,The method has 5 parameters. Parameters: g' text' font' br' y
Long Parameter List,Poderosa.Forms,MainWindowArgument,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,MainWindowArgument,The method has 5 parameters. Parameters: location' state' split' toolbar' tabrowcount
Long Parameter List,Poderosa.Commands,BasicCommand,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\BasicCommands.cs,BasicCommand,The method has 6 parameters. Parameters: id' description' category' defaultkey' body' enabled
Long Parameter List,Poderosa.Commands,BasicCommand,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\BasicCommands.cs,BasicCommand,The method has 5 parameters. Parameters: id' description' category' defaultkey' body
Long Parameter List,Poderosa.Commands,GeneralCommandImpl,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CommandEx.cs,GeneralCommandImpl,The method has 6 parameters. Parameters: commandID' sr' descriptionTextID' commandCategory' exec' canExecute
Long Parameter List,Poderosa.Commands,GeneralCommandImpl,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CommandEx.cs,GeneralCommandImpl,The method has 5 parameters. Parameters: commandID' description' category' execute' canExecute
Long Parameter List,Poderosa.Commands,GeneralCommandImpl,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CommandEx.cs,GeneralCommandImpl,The method has 5 parameters. Parameters: commandID' sr' descriptionTextID' category' execute
Long Parameter List,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Scaled,The method has 5 parameters. Parameters: g' img' clip' fitWidth' fitHeight
Long Parameter List,Poderosa.View,TextSelection,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\TextSelection.cs,StartSelection,The method has 5 parameters. Parameters: line' position' type' x' y
Long Parameter List,Poderosa.View,RenderProfile,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,DetermineColors,The method has 6 parameters. Parameters: attr' color24' caret' baseBackColor' backColor' foreColor
Long Parameter List,Poderosa.Document,GCellArrayMixin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,Fill,The method has 5 parameters. Parameters: dstArray' offsetStart' offsetEnd' fillChar' fillAttr
Long Parameter List,Poderosa.Document,GLine,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,Fill,The method has 5 parameters. Parameters: start' end' ch' attr' color
Long Parameter List,Poderosa.Document,GLine,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,Render,The method has 6 parameters. Parameters: hdc' prof' caret' baseBackColor' x' y
Long Parameter List,Poderosa.Document,GLine,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,DrawUnderline,The method has 5 parameters. Parameters: hdc' col' x' y' length
Long Parameter List,Poderosa.Preferences,PreferenceFolderArray,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Preferences.cs,PreferenceFolderArray,The method has 5 parameters. Parameters: master' parent' id' index' template
Long Parameter List,Poderosa.Preferences,TypedPreferenceItem<T>,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Preferences.cs,TypedPreferenceItem,The method has 6 parameters. Parameters: parent' id' index' initialValue' validator' adapter
Long Parameter List,Poderosa.Preferences,BoolPreferenceItem,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Preferences.cs,BoolPreferenceItem,The method has 5 parameters. Parameters: parent' id' index' initialValue' validator
Long Parameter List,Poderosa.Preferences,IntPreferenceItem,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Preferences.cs,IntPreferenceItem,The method has 5 parameters. Parameters: parent' id' index' initialValue' validator
Long Parameter List,Poderosa.Preferences,StringPreferenceItem,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Preferences.cs,StringPreferenceItem,The method has 5 parameters. Parameters: parent' id' index' initialValue' validator
Long Identifier,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,,The length of the parameter _enableAutoScrollBarAdjustment is 30.
Long Identifier,Poderosa.Sessions,SessionManagerPlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Session.cs,,The length of the parameter _activeDocumentChangeListeners is 30.
Long Statement,Poderosa.Forms,AboutBoxUtil,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBoxEx.cs,DefineExtensionPoint,The length of the statement  "            IExtensionPoint pt = pm.CreateExtensionPoint("org.poderosa.window.aboutbox"' typeof(IPoderosaAboutBoxFactory)' WindowManagerPlugin.Instance); " is 141.
Long Statement,Poderosa.Forms,AboutBoxUtil,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBoxEx.cs,GetCurrentAboutBoxFactory,The length of the statement  "            IPoderosaAboutBoxFactory[] factories = (IPoderosaAboutBoxFactory[])WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint("org.poderosa.window.aboutbox").GetExtensions(); " is 191.
Long Statement,Poderosa.Forms,AboutBoxUtil,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBoxEx.cs,ProcessDialogChar,The length of the statement  "            IPoderosaAboutBoxFactory[] factories = (IPoderosaAboutBoxFactory[])WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint("org.poderosa.window.aboutbox").GetExtensions(); " is 191.
Long Statement,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,OnPaintCredit,The length of the statement  "                DrawString(g' WindowManagerPlugin.Instance.WindowPreference.OriginalPreference.Language == Language.English ? e._en_name : e._ja_name' _mainPanel.Font' br' y); " is 159.
Long Statement,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,FillList,The length of the statement  "            IPluginInspector pi = (IPluginInspector)WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.GetAdapter(typeof(IPluginInspector)); " is 134.
Long Statement,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The length of the statement  "            this._list.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 138.
Long Statement,Poderosa.Forms,MainWindow,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\MainWindow.cs,InitContent,The length of the statement  "            IExtensionPoint creator_ext = WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.MAINWINDOWCONTENT_ID); " is 151.
Long Statement,Poderosa.Forms,MainWindow,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\MainWindow.cs,InitContent,The length of the statement  "            this.Controls.Add(_statusBar); //こうでなく、_toolStripContainer.BottomToolStripPanelに_statusBarを追加してもよさそうだが、そうするとツールバー項目がステータスバーの上下に挿入可能になってしまう " is 138.
Long Statement,Poderosa.Forms,FixedShortcutKeyHandler,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\MainWindow.cs,OnKeyProcess,The length of the statement  "            else if (body == Keys.Tab && (modifier == Keys.Control || modifier == (Keys.Control | Keys.Shift))) { //Ctrl+Tab' Ctrl+Shift+Tab " is 128.
Long Statement,Poderosa.Forms,FixedShortcutKeyHandler,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\MainWindow.cs,OnKeyProcess,The length of the statement  "                    SessionManagerPlugin.Instance.ActivateDocument(_window.DocumentTabFeature.GetAtOrNull(index)' ActivateReason.InternalAction); " is 125.
Long Statement,Poderosa.Forms,MenuUtil,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\MenuUtil.cs,OnClickMenu,The length of the statement  "                    CommandManagerPlugin.Instance.Execute(item.AssociatedCommand' tag.CommandTarget' ((IPoderosaMenuItemWithArgs)item).AdditionalArgs); " is 131.
Long Statement,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,FillList,The length of the statement  "            IPluginInspector pi = (IPluginInspector)WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.GetAdapter(typeof(IPluginInspector)); " is 134.
Long Statement,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The length of the statement  "            this._list.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 138.
Long Statement,Poderosa.Forms,ViewFactoryManager,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\SplittableView.cs,LateCheck,The length of the statement  "            IExtensionPoint fs = WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.VIEW_FACTORY_ID); " is 137.
Long Statement,Poderosa.Forms,SplittableViewManager,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\SplittableView.cs,ApplySplitInfo,The length of the statement  "                        sm.AttachDocumentAndView(documents[i]' sm.FindDocumentHost(documents[i]).LastAttachedView); //LastAttachedViewはこの上のループで適用済み " is 123.
Long Statement,Poderosa.Forms,SplittableViewManager,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\SplittableView.cs,FireOnSplit,The length of the statement  "            foreach (IViewFormatEventHandler eh in WindowManagerPlugin.Instance.ViewFactoryManager.ViewFormatChangeHandler.GetExtensions()) { " is 129.
Long Statement,Poderosa.Forms,SplittableViewManager,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\SplittableView.cs,FireOnUnify,The length of the statement  "            foreach (IViewFormatEventHandler eh in WindowManagerPlugin.Instance.ViewFactoryManager.ViewFormatChangeHandler.GetExtensions()) { " is 129.
Long Statement,Poderosa.Forms,SplittableViewPane,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\SplittableView.cs,AssureViewClass,The length of the statement  "            IContentReplaceableViewSite site = (IContentReplaceableViewSite)_content.GetAdapter(typeof(IContentReplaceableViewSite)); " is 121.
Long Statement,Poderosa.Forms,SplittableViewPane,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\SplittableView.cs,AssureViewClass,The length of the statement  "            Debug.WriteLineIf(DebugOpt.ViewManagement' String.Format("Replace ViewClass {0} => {1}"' _content.GetType().Name' viewclass.Name)); " is 131.
Long Statement,Poderosa.Forms,SplittableViewPane,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\SplittableView.cs,AssureEmptyViewClass,The length of the statement  "            IViewManagerFactory[] vm = (IViewManagerFactory[])WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.MAINWINDOWCONTENT_ID).GetExtensions(); " is 187.
Long Statement,Poderosa.Forms,PoderosaToolStripContainer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ToolBar.cs,CreateInternal,The length of the statement  "            IToolBarComponent[] components = (IToolBarComponent[])WindowManagerPlugin.Instance.PoderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.TOOLBARCOMPONENT_ID).GetExtensions(); " is 190.
Long Statement,Poderosa.Forms,PoderosaToolStripContainer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ToolBar.cs,CreateToolBarComponent,The length of the statement  "            Debug.WriteLineIf(DebugOpt.BuildToolBar' "toolbar " + comp.GetType().Name + " location=" + _currentToolStrip.Location.ToString()); " is 130.
Long Statement,Poderosa.Forms,WindowManagerPlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,RunExtension,The length of the statement  "                _poderosaWorld.Culture.SetCulture(CoreServicePreferenceAdapter.LangToCulture(_preferences.OriginalPreference.Language)); " is 120.
Long Statement,Poderosa.Forms,WindowManagerPlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,BypassDragEnter,The length of the statement  "                IFileDropHandler[] hs = (IFileDropHandler[])_poderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.FILEDROPHANDLER_ID).GetExtensions(); " is 151.
Long Statement,Poderosa.Forms,WindowManagerPlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,BypassDragDrop,The length of the statement  "                IFileDropHandler[] hs = (IFileDropHandler[])_poderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.FILEDROPHANDLER_ID).GetExtensions(); " is 151.
Long Statement,Poderosa.Forms,WindowManagerPlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,NotifyMainWindowLoaded,The length of the statement  "            IMainWindowEventHandler[] hs = (IMainWindowEventHandler[])_poderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.MAINWINDOWEVENTHANDLER_ID).GetExtensions(); " is 172.
Long Statement,Poderosa.Forms,WindowManagerPlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,NotifyMainWindowUnloaded,The length of the statement  "            IMainWindowEventHandler[] hs = (IMainWindowEventHandler[])_poderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.MAINWINDOWEVENTHANDLER_ID).GetExtensions(); " is 172.
Long Statement,Poderosa.Forms,WindowManagerPlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,OpenShortcutFile,The length of the statement  "            IFileDropHandler[] hs = (IFileDropHandler[])_poderosaWorld.PluginManager.FindExtensionPoint(WindowManagerConstants.FILEDROPHANDLER_ID).GetExtensions(); " is 151.
Long Statement,Poderosa.Forms,CoreServicePreferenceAdapter,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowPreference.cs,DefineItems,The length of the statement  "            _caretInterval = builder.DefineIntValue(_folder' "caretInterval"' 300' PreferenceValidatorUtil.PositiveIntegerValidator); " is 121.
Long Statement,Poderosa.Forms,CoreServicePreferenceAdapter,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowPreference.cs,DefineItems,The length of the statement  "            _splitLimitCount = builder.DefineIntValue(_folder' "splitLimitCount"' 16' PreferenceValidatorUtil.IntRangeValidator(1' 50)); " is 124.
Long Statement,Poderosa.Forms,WindowPreference,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowPreference.cs,FormatWindowPreference,The length of the statement  "            _windowArrayPreference.ConvertItem(element' _windowPositionPreference).AsString().Value = String.Format("({0}{1}'{2}'{3}'{4})"' " is 127.
Long Statement,Poderosa.Commands,BasicCommandImplementation,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\BasicCommands.cs,Build,The length of the statement  "                "Command.CloseDocument"' _window' Alt(Keys.W)' new ExecuteDelegate(CmdCloseCurrentDocument)' DoesExistCurrentDocument)); " is 120.
Long Statement,Poderosa.Commands,BasicCommandImplementation,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\BasicCommands.cs,Build,The length of the statement  "                "Command.SplitHorizontal"' _window' Alt(Keys.H)' new ExecuteDelegate(CmdSplitHorizontal)' new CanExecuteDelegate(CanSplit))); " is 125.
Long Statement,Poderosa.Commands,BasicCommandImplementation,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\BasicCommands.cs,Build,The length of the statement  "                "Command.SplitVertical"' _window' Alt(Keys.J)' new ExecuteDelegate(CmdSplitVertical)' new CanExecuteDelegate(CanSplit))); " is 121.
Long Statement,Poderosa.Commands,BasicCommandImplementation,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\BasicCommands.cs,Build,The length of the statement  "                "Command.SplitUnify"' _window' Alt(Keys.U)' new ExecuteDelegate(CmdSplitUnify)' new CanExecuteDelegate(CanSplitUnify))); " is 120.
Long Statement,Poderosa.Commands,BasicCommandImplementation,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\BasicCommands.cs,CmdCloseCurrentDocument,The length of the statement  "            IPoderosaMainWindow window = view == null ? null : (IPoderosaMainWindow)view.ParentForm.GetAdapter(typeof(IPoderosaMainWindow)); " is 128.
Long Statement,Poderosa.Commands,BasicCommandImplementation,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\BasicCommands.cs,CmdCloseAll,The length of the statement  "            PrepareCloseResult r = SessionManagerPlugin.Instance.CloseMultipleDocuments(new ClosingContext(window)' hosted_documents); " is 122.
Long Statement,Poderosa.Commands,CloseDocumentGroup,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\BasicMenus.cs,CreateChildMenus,The length of the statement  "            return new IPoderosaMenu[] { new BasicMenuItem("Menu.ConsoleClose"' "org.poderosa.core.session.closedocument") }; //今や必ずしもConsoleではない " is 133.
Long Statement,Poderosa.Commands,KeyBindConfiguration,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CommandManager.cs,LoadFrom,The length of the statement  "                Keys key = key_description == null ? tag.Command.DefaultShortcutKey : WinFormsUtil.ParseKey(key_description.Split('+')); " is 120.
Long Statement,Poderosa.Commands,PositionDesignationSorter,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CommandPositionEx.cs,FindDependencyFor,The length of the statement  "                    throw new ArgumentException("IPositionDesignation#Target must return a member of the argument collection of SortItem()"); " is 121.
Long Statement,Poderosa.Commands,PositionDesignationSorter,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CommandPositionEx.cs,FindDependencyFor,The length of the statement  "                if (!(e.designation.DesignationPosition == PositionType.NextTo || e.designation.DesignationPosition == PositionType.PreviousTo)) " is 128.
Long Statement,Poderosa.Commands,PositionDesignationSorter,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CommandPositionEx.cs,FindDependencyFor,The length of the statement  "                    throw new ArgumentException("if IPositionDesignation#Target returns an object' #Position must be PreviousTo or NextTo"); " is 120.
Long Statement,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,AdjustScrollBar,The length of the statement  "            int largechange = (int)Math.Floor((this.ClientSize.Height - BORDER * 2 + prof.LineSpacing) / ch); //きちんと表示できる行数をLargeChangeにセット " is 127.
Long Statement,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,MousePosToTextPos,The length of the statement  "            textX = RuntimeUtil.AdjustIntRange((int)Math.Floor((mouseX - CharacterDocumentViewer.BORDER) / pitch.Width)' 0' Int32.MaxValue); " is 128.
Long Statement,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,MousePosToTextPos,The length of the statement  "            textY = RuntimeUtil.AdjustIntRange((int)Math.Floor((mouseY - CharacterDocumentViewer.BORDER) / (pitch.Height + GetRenderProfile().LineSpacing))' 0' Int32.MaxValue); " is 164.
Long Statement,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,OnPaint,The length of the statement  "                    _caret.Enabled = _caret.Enabled && this.Focused; //TODO さらにIME起動中はキャレットを表示しないように. TerminalControlだったらAdjustCaretでIMEをみてるので問題はない " is 127.
Long Statement,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,BuildTransientDocument,The length of the statement  "            //	this.Width - _VScrollBar.Width - sm.ControlBorderWidth + 8' //この８がない値が正当だが、.NETの文字サイズ丸め問題のため行の最終文字が表示されないことがある。これを回避するためにちょっと増やす " is 131.
Long Statement,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,BuildTransientDocument,The length of the statement  "            //Caret画面外にあるなら処理はしなくてよい。２番目の条件は、Attach-ResizeTerminalの流れの中でこのOnPaintを実行した場合にTerminalHeight>lines.Countになるケースがあるのを防止するため " is 120.
Long Statement,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawBarCaret,The length of the statement  "            PointF pt1 = new PointF(profile.Pitch.Width * x + BORDER' (profile.Pitch.Height + profile.LineSpacing) * y + BORDER + 2); " is 121.
Long Statement,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawUnderLineCaret,The length of the statement  "            PointF pt1 = new PointF(profile.Pitch.Width * x + BORDER + 2' (profile.Pitch.Height + profile.LineSpacing) * y + BORDER + profile.Pitch.Height); " is 144.
Long Statement,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Normal,The length of the statement  "                offset_x = (style == ImageStyle.TopLeft || style == ImageStyle.BottomLeft) ? 0 : (this.ClientSize.Width - _VScrollBar.Width - img.Width); " is 137.
Long Statement,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Normal,The length of the statement  "            Rectangle target = Rectangle.Intersect(new Rectangle(clip.Left - offset_x' clip.Top - offset_y' clip.Width' clip.Height)' new Rectangle(0' 0' img.Width' img.Height)); " is 166.
Long Statement,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Normal,The length of the statement  "                g.DrawImage(img' new Rectangle(target.Left + offset_x' target.Top + offset_y' target.Width' target.Height)' target' GraphicsUnit.Pixel); " is 136.
Long Statement,Poderosa.View,TextSelectionUIHandler,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,OnMouseDown,The length of the statement  "                        rt = sel.PivotType == RangeType.Char ? RangeType.Word : sel.PivotType == RangeType.Word ? RangeType.Line : RangeType.Char; " is 122.
Long Statement,Poderosa.View,RenderProfile,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,CreateFonts,The length of the statement  "            _cjkBoldUnderlinefont = new FontHandle(new Font(_cjkFont.Font' fs | FontStyle.Underline | FontStyle.Bold)' _useClearType); " is 122.
Long Statement,Poderosa.View,RenderProfile,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,DetermineColors,The length of the statement  "                    backColor = DetermineActualBackColor(caret.Color.IsEmpty ? DetermineNormalBackColor(attr' color24) : caret.Color' baseBackColor); " is 129.
Long Statement,Poderosa.View,RenderProfile,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,DetermineColors,The length of the statement  "                    backColor = DetermineActualBackColor(caret.Color.IsEmpty ? DetermineNormalForeColor(attr' color24) : caret.Color' baseBackColor); " is 129.
Long Statement,Poderosa.Document,ColorSpec,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\TextDecoration.cs,ToString,The length of the statement  "                        .Append('{').Append(c.A).Append(''').Append(c.R).Append(''').Append(c.G).Append(''').Append(c.B).Append('}').ToString(); " is 120.
Long Statement,Poderosa.Sessions,SessionManagerPlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Session.cs,InitializePlugin,The length of the statement  "            _docViewRelationHandler = poderosa.PluginManager.CreateExtensionPoint("org.poderosa.core.sessions.docViewRelationHandler"' typeof(IDocViewRelationEventHandler)' this); " is 167.
Long Statement,Poderosa.Sessions,SessionManagerPlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Session.cs,AttachDocumentAndView,The length of the statement  "                Debug.WriteLineIf(DebugOpt.DumpDocumentRelation' String.Format("Detach Destination View doc={0} view={1}"' existing_doc.GetType().Name' ViewName(view))); " is 153.
Long Statement,Poderosa.Sessions,SessionManagerPlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Session.cs,DumpDocumentRelation,The length of the statement  "                Debug.WriteLine(String.Format("  doc {0}' current={1}' last={2}"' dh.Document.GetType().Name' ViewName(dh.CurrentView)' ViewName(dh.LastAttachedView))); " is 152.
Long Statement,Poderosa.Sessions,DocumentHost,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Session.cs,AttachView,The length of the statement  "            IPoderosaView internalview = rv == null ? view : rv.AssureViewClass(vf.GetViewType()); //ContentReplaceableViewのときは中身を使用 " is 120.
Long Statement,Poderosa.Serializing,SerializeServicePlugin,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Serialize.cs,InitializePlugin,The length of the statement  "            _serviceElements = poderosa.PluginManager.CreateExtensionPoint(EXTENSIONPOINT_NAME' typeof(ISerializeServiceElement)' this); " is 124.
Complex Conditional,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,BuildTransientDocument,The conditional expression  "pos >= 0 && pos < l.DisplayLength && index >= 0 && index < _transientLines.Count"  is complex.
Complex Conditional,Poderosa.Document,ASCIIWordBreakTable,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,Reset,The conditional expression  "('0' <= c && c <= '9') || ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') || c == '_'"  is complex.
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(176' 192);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(176' 192);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._versionText.Location = new System.Drawing.Point(0' 88);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._versionText.Size = new System.Drawing.Size(280' 96);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._versionText.Size = new System.Drawing.Size(280' 96);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._versionText.TabIndex = 2;
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._pictureBox.Size = new System.Drawing.Size(280' 88);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._pictureBox.Size = new System.Drawing.Size(280' 88);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._pictureBox.TabIndex = 3;
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._creditButton.Location = new System.Drawing.Point(8' 192);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._creditButton.Location = new System.Drawing.Point(8' 192);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._creditButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._creditButton.Size = new System.Drawing.Size(88' 23);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this._creditButton.TabIndex = 5;
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 224);
Magic Number,Poderosa.Forms,AboutBox,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBox.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 224);
Magic Number,Poderosa.Forms,AboutBoxUtil,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBoxEx.cs,GetVersionInfoContent,The following statement contains a magic number: string[] s = new string[6];
Magic Number,Poderosa.Forms,AboutBoxUtil,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBoxEx.cs,GetVersionInfoContent,The following statement contains a magic number: s[2] = "All Rights Reserved.";
Magic Number,Poderosa.Forms,AboutBoxUtil,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBoxEx.cs,GetVersionInfoContent,The following statement contains a magic number: s[3] = "";
Magic Number,Poderosa.Forms,AboutBoxUtil,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBoxEx.cs,GetVersionInfoContent,The following statement contains a magic number: s[4] = " Version : " + VersionInfo.PODEROSA_VERSION;
Magic Number,Poderosa.Forms,AboutBoxUtil,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\AboutBoxEx.cs,GetVersionInfoContent,The following statement contains a magic number: s[5] = " CLR     : " + System.Environment.Version.ToString();
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._pictureBox.Size = new System.Drawing.Size(288' 80);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._pictureBox.Size = new System.Drawing.Size(288' 80);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(104' 216);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(104' 216);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._okButton.TabIndex = 2;
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._mainPanel.Location = new System.Drawing.Point(0' 80);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._mainPanel.Size = new System.Drawing.Size(288' 128);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._mainPanel.Size = new System.Drawing.Size(288' 128);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this._mainPanel.TabIndex = 3;
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 12);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(290' 242);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(290' 242);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,OnLoad,The following statement contains a magic number: _boldFont = new Font(_mainPanel.Font.FontFamily' 11.25f' FontStyle.Bold);
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,OnLoad,The following statement contains a magic number: _timer.Interval = 50;
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,OnTimer,The following statement contains a magic number: ++_creditStep == 30
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,OnPaintCredit,The following statement contains a magic number: col = ColorUtil.CalculateColor(SystemColors.WindowText' SystemColors.Window' _creditStep * (255 / 10));
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,OnPaintCredit,The following statement contains a magic number: col = ColorUtil.CalculateColor(SystemColors.WindowText' SystemColors.Window' _creditStep * (255 / 10));
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,OnPaintCredit,The following statement contains a magic number: _creditStep < 10
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,OnPaintCredit,The following statement contains a magic number: float y = (_mainPanel.Height - (name_size.Height * (1 + grp._credits.Length))) / 2;
Magic Number,Poderosa.Forms,Credits,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Credits.cs,DrawString,The following statement contains a magic number: g.DrawString(text' font' br' (_mainPanel.Width - sz.Width) / 2' y);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._list.Size = new System.Drawing.Size(558' 209);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._list.Size = new System.Drawing.Size(558' 209);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._idHeader.Width = 200;
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._ownerHeader.Width = 200;
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._countHeader.Width = 100;
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(389' 214);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(389' 214);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(470' 214);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(470' 214);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.TabIndex = 2;
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(557' 243);
Magic Number,Poderosa.Forms,ExtensionPointList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ExtensionPointList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(557' 243);
Magic Number,Poderosa.Forms,FixedShortcutKeyHandler,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\MainWindow.cs,OnKeyProcess,The following statement contains a magic number: modifier == Keys.Alt && n >= 0 && n <= 8
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._list.Size = new System.Drawing.Size(558' 209);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._list.Size = new System.Drawing.Size(558' 209);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._enableHeader.Width = 38;
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._idHeader.Width = 200;
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._versionHeader.Width = 71;
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._venderHeader.Width = 120;
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(389' 214);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Location = new System.Drawing.Point(389' 214);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._okButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(470' 214);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Location = new System.Drawing.Point(470' 214);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._cancelButton.TabIndex = 2;
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._createShortcutButton.Location = new System.Drawing.Point(13' 214);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._createShortcutButton.Location = new System.Drawing.Point(13' 214);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._createShortcutButton.Size = new System.Drawing.Size(140' 23);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._createShortcutButton.Size = new System.Drawing.Size(140' 23);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this._createShortcutButton.TabIndex = 3;
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(557' 243);
Magic Number,Poderosa.Forms,PluginList,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PluginList.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(557' 243);
Magic Number,Poderosa.Forms,PopupViewContainer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PopupViewContainer.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,PopupViewContainer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PopupViewContainer.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 12F);
Magic Number,Poderosa.Forms,PoderosaToolStripContainer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ToolBar.cs,CreateInternal,The following statement contains a magic number: Point pt = new Point(TryParseInt(locations' index * 2)' TryParseInt(locations' index * 2 + 1));
Magic Number,Poderosa.Forms,PoderosaToolStripContainer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ToolBar.cs,CreateInternal,The following statement contains a magic number: Point pt = new Point(TryParseInt(locations' index * 2)' TryParseInt(locations' index * 2 + 1));
Magic Number,Poderosa.Forms,PoderosaToolStripContainer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ToolBar.cs,DefineCommandButton,The following statement contains a magic number: button.Size = new Size(24' 23);
Magic Number,Poderosa.Forms,PoderosaToolStripContainer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\ToolBar.cs,DefineCommandButton,The following statement contains a magic number: button.Size = new Size(24' 23);
Magic Number,Poderosa.Forms,PopupViewCreationParam,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManagerEx.cs,PopupViewCreationParam,The following statement contains a magic number: _initialSize = new Size(300' 300);
Magic Number,Poderosa.Forms,PopupViewCreationParam,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManagerEx.cs,PopupViewCreationParam,The following statement contains a magic number: _initialSize = new Size(300' 300);
Magic Number,Poderosa.Forms,PoderosaStatusBar,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\StatusBar.cs,PoderosaStatusBar,The following statement contains a magic number: _timer.Interval = 800;
Magic Number,Poderosa.Forms,PoderosaStatusBar,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\StatusBar.cs,CreateIconPane,The following statement contains a magic number: l.Size = new Size(18' 18);
Magic Number,Poderosa.Forms,PoderosaStatusBar,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\StatusBar.cs,CreateIconPane,The following statement contains a magic number: l.Size = new Size(18' 18);
Magic Number,Poderosa.Forms,MainWindowArgument,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,ApplyToLoadedWindow,The following statement contains a magic number: const int MARGIN = 3;
Magic Number,Poderosa.Forms,MainWindowArgument,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,ApplyToLoadedWindow,The following statement contains a magic number: Rectangle titlebarRect =                  new Rectangle(_location.X + MARGIN' _location.Y + MARGIN'                                  Math.Max(_location.Width - MARGIN * 2' 1)'                                  Math.Max(SystemInformation.CaptionHeight - MARGIN * 2' 1));
Magic Number,Poderosa.Forms,MainWindowArgument,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,ApplyToLoadedWindow,The following statement contains a magic number: Rectangle titlebarRect =                  new Rectangle(_location.X + MARGIN' _location.Y + MARGIN'                                  Math.Max(_location.Width - MARGIN * 2' 1)'                                  Math.Max(SystemInformation.CaptionHeight - MARGIN * 2' 1));
Magic Number,Poderosa.Forms,MainWindowArgument,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,ApplyToLoadedWindow,The following statement contains a magic number: _location.X = sb.X + (sb.Width - _location.Width) / 2;
Magic Number,Poderosa.Forms,MainWindowArgument,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,ApplyToLoadedWindow,The following statement contains a magic number: _location.Y = sb.Y + (sb.Height - _location.Height) / 2;
Magic Number,Poderosa.Forms,MainWindowArgument,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,GetInitialLocation,The following statement contains a magic number: return new Rectangle(r.X + r.Width / 4' r.Y + r.Height / 4' r.Width / 2' r.Height / 2);
Magic Number,Poderosa.Forms,MainWindowArgument,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,GetInitialLocation,The following statement contains a magic number: return new Rectangle(r.X + r.Width / 4' r.Y + r.Height / 4' r.Width / 2' r.Height / 2);
Magic Number,Poderosa.Forms,MainWindowArgument,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,GetInitialLocation,The following statement contains a magic number: return new Rectangle(r.X + r.Width / 4' r.Y + r.Height / 4' r.Width / 2' r.Height / 2);
Magic Number,Poderosa.Forms,MainWindowArgument,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowManager.cs,GetInitialLocation,The following statement contains a magic number: return new Rectangle(r.X + r.Width / 4' r.Y + r.Height / 4' r.Width / 2' r.Height / 2);
Magic Number,Poderosa.Forms,CoreServicePreferenceAdapter,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowPreference.cs,DefineItems,The following statement contains a magic number: _caretInterval = builder.DefineIntValue(_folder' "caretInterval"' 300' PreferenceValidatorUtil.PositiveIntegerValidator);
Magic Number,Poderosa.Forms,CoreServicePreferenceAdapter,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowPreference.cs,DefineItems,The following statement contains a magic number: _splitLimitCount = builder.DefineIntValue(_folder' "splitLimitCount"' 16' PreferenceValidatorUtil.IntRangeValidator(1' 50));
Magic Number,Poderosa.Forms,CoreServicePreferenceAdapter,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\WindowPreference.cs,DefineItems,The following statement contains a magic number: _splitLimitCount = builder.DefineIntValue(_folder' "splitLimitCount"' 16' PreferenceValidatorUtil.IntRangeValidator(1' 50));
Magic Number,Poderosa.Forms,PoderosaForm,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\PoderosaForm.cs,ContextMenuStripVisibleChanged,The following statement contains a magic number: _contextMenuDisposeTimer.Interval = 500;
Magic Number,Poderosa.Commands,BasicCommandImplementation,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\BasicCommands.cs,CmdNewWindow,The following statement contains a magic number: location.X += 20;
Magic Number,Poderosa.Commands,BasicCommandImplementation,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\BasicCommands.cs,CmdNewWindow,The following statement contains a magic number: location.Y += 20;
Magic Number,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,AdjustScrollBar,The following statement contains a magic number: int largechange = (int)Math.Floor((this.ClientSize.Height - BORDER * 2 + prof.LineSpacing) / ch);
Magic Number,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,GetHeightInLines,The following statement contains a magic number: int height = (int)Math.Floor((this.ClientSize.Height - BORDER * 2 + prof.LineSpacing) / ch);
Magic Number,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,InitializeComponent,The following statement contains a magic number: this._VScrollBar.Maximum = 2;
Magic Number,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawBarCaret,The following statement contains a magic number: PointF pt1 = new PointF(profile.Pitch.Width * x + BORDER' (profile.Pitch.Height + profile.LineSpacing) * y + BORDER + 2);
Magic Number,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawBarCaret,The following statement contains a magic number: PointF pt2 = new PointF(pt1.X' pt1.Y + profile.Pitch.Height - 2);
Magic Number,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawUnderLineCaret,The following statement contains a magic number: PointF pt1 = new PointF(profile.Pitch.Width * x + BORDER + 2' (profile.Pitch.Height + profile.LineSpacing) * y + BORDER + profile.Pitch.Height);
Magic Number,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawUnderLineCaret,The following statement contains a magic number: PointF pt2 = new PointF(pt1.X + profile.Pitch.Width - 2' pt1.Y);
Magic Number,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Normal,The following statement contains a magic number: offset_x = (this.Width - _VScrollBar.Width - img.Width) / 2;
Magic Number,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,DrawBackgroundImage_Normal,The following statement contains a magic number: offset_y = (this.Height - img.Height) / 2;
Magic Number,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,OnMouseWheelCore,The following statement contains a magic number: int d = e.Delta / 120;
Magic Number,Poderosa.View,CharacterDocumentViewer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\CharacterDocumentViewer.cs,OnMouseWheelCore,The following statement contains a magic number: d *= 3;
Magic Number,Poderosa.View,RenderProfileSerializer,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfileSerialize.cs,Deserialize,The following statement contains a magic number: prof.FontSize = ParseUtil.ParseFloat(storage.Get("font-size")' 10.0f);
Magic Number,Poderosa.View,FontHandle,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,CreateFont,The following statement contains a magic number: major > 5 || (major == 5 && minor >= 1)
Magic Number,Poderosa.View,FontHandle,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,CreateFont,The following statement contains a magic number: major > 5 || (major == 5 && minor >= 1)
Magic Number,Poderosa.View,RenderProfile,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,CreateFonts,The following statement contains a magic number: Win32.GetTextExtentPoint32(hdc' "AAA"' 3' out charsize2);
Magic Number,Poderosa.View,RenderProfile,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,CreateFonts,The following statement contains a magic number: _pitch = new SizeF((charsize2.width - charsize1.width) / 2' charsize1.height);
Magic Number,Poderosa.View,RenderProfile,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,CreateFonts,The following statement contains a magic number: _chargap = (charsize1.width - _pitch.Width) / 2;
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.View,EscapesequenceColorSet,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\RenderProfile.cs,GetDefaultColorValue,The following statement contains a magic number: switch (index) {                  case 0:                      return Color.Black;                  case 1:                      return Color.Red;                  case 2:                      return Color.Green;                  case 3:                      return Color.Yellow;                  case 4:                      return Color.Blue;                  case 5:                      return Color.Magenta;                  case 6:                      return Color.Cyan;                  case 7:                      return Color.White;                  case 8:                      return Color.FromArgb(64' 64' 64);                  case 9:                      return Color.FromArgb(255' 64' 64);                  case 10:                      return Color.FromArgb(64' 255' 64);                  case 11:                      return Color.FromArgb(255' 255' 64);                  case 12:                      return Color.FromArgb(64' 64' 255);                  case 13:                      return Color.FromArgb(255' 64' 255);                  case 14:                      return Color.FromArgb(64' 255' 255);                  case 15:                      return Color.White;                  default:                      if (index >= 16 && index <= 231) {                          r = (index - 16) / 36 % 6;                          g = (index - 16) / 6 % 6;                          b = (index - 16) % 6;                          return Color.FromArgb((r == 0) ? 0 : r * 40 + 55' (g == 0) ? 0 : g * 40 + 55' (b == 0) ? 0 : b * 40 + 55);                      }                      else if (index >= 232 && index <= 255) {                          r = (index - 232) * 10 + 8;                          return Color.FromArgb(r' r' r);                      }                      else {                          return Color.Empty;                      }              }
Magic Number,Poderosa.Document,GAttr,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,GAttr,The following statement contains a magic number: bits |= (uint)((backColor & 0xff) << 8);
Magic Number,Poderosa.Document,GAttr,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,CopyWith8bitBackColor,The following statement contains a magic number: return new GAttr(                          (this._bits & ~(0xff00u | (uint)GAttrFlags.Use8bitBackColor | (uint)GAttrFlags.Use24bitBackColor))                          | ((uint)(color & 0xff) << 8)                          | (uint)GAttrFlags.Use8bitBackColor);
Magic Number,Poderosa.Document,GLine,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,GetInternalTemporaryBufferForCopy,The following statement contains a magic number: return GetInternalTemporaryCharBuffer(_cell.Length * 2);
Magic Number,Poderosa.Document,GLine,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,Render,The following statement contains a magic number: char[] tmpCharBuf = GetInternalTemporaryCharBuffer(2);
Magic Number,Poderosa.Document,GLine,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,Render,The following statement contains a magic number: cellIndex += 2;
Magic Number,Poderosa.Document,GLine,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,Render,The following statement contains a magic number: cellIndex += 2;
Magic Number,Poderosa.Document,GLine,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,CreateSimpleGLine,The following statement contains a magic number: GCell[] buff = new GCell[text.Length * 2];
Magic Number,Poderosa.Document,GLineManipulator,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\GLine.cs,Load,The following statement contains a magic number: Reset(80);
Magic Number,Poderosa.Document,Unicode,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Unicode.cs,DetermineUnicodeCharFlags,The following statement contains a magic number: byte upperByte = (byte)(codePoint >> 8);
Magic Number,Poderosa.Document,Unicode,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Unicode.cs,DetermineUnicodeCharFlags,The following statement contains a magic number: switch (upperByte) {                  case 0x00:                      t = WIDTH_MAP_0000_00FF[codePoint];                      break;                  case 0x02:                  case 0x03:                  case 0x04:                      t = WIDTH_MAP_0200_04FF[codePoint - 0x0200u];                      break;                  case 0x20:                      if (codePoint == 0x2017u) // for OEM850                          t = 0;                      else                          t = 2;                      break;                  case 0x25:                      t = WIDTH_MAP_2500_25FF[codePoint - 0x2500u];                      break;                  case 0xff:                      t = WIDTH_MAP_FF00_FFFF[codePoint - 0xff00u];                      break;                  default:                      t = 2;                      break;              }
Magic Number,Poderosa.Document,Unicode,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Unicode.cs,DetermineUnicodeCharFlags,The following statement contains a magic number: switch (upperByte) {                  case 0x00:                      t = WIDTH_MAP_0000_00FF[codePoint];                      break;                  case 0x02:                  case 0x03:                  case 0x04:                      t = WIDTH_MAP_0200_04FF[codePoint - 0x0200u];                      break;                  case 0x20:                      if (codePoint == 0x2017u) // for OEM850                          t = 0;                      else                          t = 2;                      break;                  case 0x25:                      t = WIDTH_MAP_2500_25FF[codePoint - 0x2500u];                      break;                  case 0xff:                      t = WIDTH_MAP_FF00_FFFF[codePoint - 0xff00u];                      break;                  default:                      t = 2;                      break;              }
Magic Number,Poderosa.Document,Unicode,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Unicode.cs,DetermineUnicodeCharFlags,The following statement contains a magic number: switch (t) {                  case 1:                      return UnicodeCharFlags.CJK;    // CJK Hankaku                  case 2:                      return UnicodeCharFlags.CJK | UnicodeCharFlags.WideWidth;   // CJK Zenkaku                  default:                      return UnicodeCharFlags.None;   // Latin Hankaku              }
Magic Number,Poderosa.Document,Unicode,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\Unicode.cs,SurrogatePairToCodePoint,The following statement contains a magic number: return 0x10000u + (((uint)highSurrogate - 0xd800u) << 10) + ((uint)lowSurrogate - 0xdc00u);
Missing Default,Poderosa.View,TextSelection,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\TextSelection.cs,StartSelection,The following switch statement is missing a default case: switch (type) {                  case RangeType.Char:                      _forwardPivot.Column = position;                      _backwardPivot.Column = position;                      break;                  case RangeType.Word: {                          int start;                          int end;                          line.FindWordBreakPoint(position' out start' out end);                          _forwardPivot.Column = start;                          _backwardPivot.Column = end;                      }                      break;                  case RangeType.Line:                      _forwardPivot.Column = 0;                      _backwardPivot.Column = line.DisplayLength;                      break;              }
Missing Default,Poderosa.View,TextSelection,C:\research\architectureSmells\repos\poderosaproject_poderosa\Core\TextSelection.cs,ExpandTo,The following switch statement is missing a default case: switch (type) {                  case RangeType.Char:                      _forwardDestination.Column = position;                      _backwardDestination.Column = position;                      break;                  case RangeType.Word: {                          int start;                          int end;                          line.FindWordBreakPoint(position' out start' out end);                          _forwardDestination.Column = start;                          _backwardDestination.Column = end;                      }                      break;                  case RangeType.Line:                      _forwardDestination.Column = 0;                      _backwardDestination.Column = line.DisplayLength;                      break;              }
