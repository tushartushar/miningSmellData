Implementation smell,Namespace,Class,File,Method,Description
Long Statement,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,openGLControl1_OpenGLInitialized,The length of the statement  "            float[] global_ambient = new float[] { 0.2f' 0.2f' 0.2f' 1.0f };		// Set Ambient Lighting To Fairly Dark Light (No Color) " is 121.
Long Statement,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FormRadialBlurSample)); " is 140.
Long Statement,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The length of the statement  "            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The length of the statement  "            this.openGLControl1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 150.
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,openGLControl1_OpenGLDraw,The following statement contains a magic number: DrawBlur(25'0.02f);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,EmptyTexture,The following statement contains a magic number: byte[] data = new byte[((128 * 128)* 4 * sizeof(uint))];
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,EmptyTexture,The following statement contains a magic number: byte[] data = new byte[((128 * 128)* 4 * sizeof(uint))];
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,EmptyTexture,The following statement contains a magic number: byte[] data = new byte[((128 * 128)* 4 * sizeof(uint))];
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,EmptyTexture,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_2D' 0' 4' 128' 128' 0'                  OpenGL.GL_RGBA' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,EmptyTexture,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_2D' 0' 4' 128' 128' 0'                  OpenGL.GL_RGBA' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,EmptyTexture,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_2D' 0' 4' 128' 128' 0'                  OpenGL.GL_RGBA' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ReduceToUnit,The following statement contains a magic number: length = (float)Math.Sqrt((vector[0]*vector[0]) + (vector[1]*vector[1]) + (vector[2]*vector[2]));
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ReduceToUnit,The following statement contains a magic number: length = (float)Math.Sqrt((vector[0]*vector[0]) + (vector[1]*vector[1]) + (vector[2]*vector[2]));
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ReduceToUnit,The following statement contains a magic number: vector[2] /= length;
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,calcNormal,The following statement contains a magic number: float[] v1 = new float[3];
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,calcNormal,The following statement contains a magic number: float[] v2 = new float[3];
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,calcNormal,The following statement contains a magic number: const int z = 2;
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,calcNormal,The following statement contains a magic number: v2[x] = v[1' x] - v[2' x];
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,calcNormal,The following statement contains a magic number: v2[y] = v[1' y] - v[2' y];
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,calcNormal,The following statement contains a magic number: v2[z] = v[1' z] - v[2' z];
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: int twists = 5;
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: gl.LookAt(0' 5' 50' 0' 0' 0' 0' 1' 0);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: gl.LookAt(0' 5' 50' 0' 0' 0' 0' 1' 0);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: gl.Translate(0'0'-50);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,ProcessHelix,The following statement contains a magic number: for(phi=0; phi <= 360; phi+=20.0f)				// 360 Degrees In Steps Of 20  	        {  		        for(theta=0; theta<=360*twists; theta+=20.0f)		// 360 Degrees * Number Of Twists In Steps Of 20  		        {  			        v=(phi/180.0f*3.142f);				// Calculate Angle Of First Point	(  0 )  			        u=(theta/180.0f*3.142f);			// Calculate Angle Of First Point	(  0 )    			        x= (float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (1st Point)  			        y= (float)(Math.Sin(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate y Position (1st Point)  			        z= (float)((( u-(2.0f*3.142f)) + Math.Sin(v) ) * r);	// Calculate z Position (1st Point)    			        vertexes[0' 0]=x;				// Set x Value Of First Vertex  			        vertexes[0' 1]=y;				// Set y Value Of First Vertex  			        vertexes[0' 2]=z;				// Set z Value Of First Vertex    			        v=(phi/180.0f*3.142f);				// Calculate Angle Of Second Point	(  0 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Second Point	( 20 )    			        x=(float)(Math.Cos(u)*(2.0f+Math.Cos(v) ))*r;		// Calculate x Position (2nd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (2nd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (2nd Point)    			        vertexes[1' 0]=x;				// Set x Value Of Second Vertex  			        vertexes[1' 1]=y;				// Set y Value Of Second Vertex  			        vertexes[1' 2]=z;				// Set z Value Of Second Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )  			        u=((theta+20)/180.0f*3.142f);			// Calculate Angle Of Third Point	( 20 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (3rd Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (3rd Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (3rd Point)    			        vertexes[2' 0]=x;				// Set x Value Of Third Vertex  			        vertexes[2' 1]=y;				// Set y Value Of Third Vertex  			        vertexes[2' 2]=z;				// Set z Value Of Third Vertex    			        v=((phi+20)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	( 20 )  			        u=((theta)/180.0f*3.142f);			// Calculate Angle Of Fourth Point	(  0 )                        x = (float)(Math.Cos(u) * (2.0f + Math.Cos(v))) * r;		// Calculate x Position (4th Point)                      y = (float)(Math.Sin(u) * (2.0f + Math.Cos(v))) * r;		// Calculate y Position (4th Point)                      z = (float)(((u - (2.0f * 3.142f)) + Math.Sin(v)) * r);	// Calculate z Position (4th Point)    			        vertexes[3' 0]=x;				// Set x Value Of Fourth Vertex  			        vertexes[3' 1]=y;				// Set y Value Of Fourth Vertex  			        vertexes[3' 2]=z;				// Set z Value Of Fourth Vertex    			        calcNormal(vertexes'normal);			// Calculate The Quad Normal    			        gl.Normal(normal[0]'normal[1]'normal[2]);	// Set The Normal    			        // Render The Quad  			        gl.Vertex(vertexes[0' 0]'vertexes[0' 1]'vertexes[0' 2]);  			        gl.Vertex(vertexes[1' 0]'vertexes[1' 1]'vertexes[1' 2]);  			        gl.Vertex(vertexes[2' 0]'vertexes[2' 1]'vertexes[2' 2]);  			        gl.Vertex(vertexes[3' 0]'vertexes[3' 1]'vertexes[3' 2]);  		        }  	        }
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,RenderToTexture,The following statement contains a magic number: gl.Viewport(0'0'128'128);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,RenderToTexture,The following statement contains a magic number: gl.Viewport(0'0'128'128);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,RenderToTexture,The following statement contains a magic number: gl.CopyTexImage2D(OpenGL.GL_TEXTURE_2D' 0' OpenGL.GL_LUMINANCE' 0' 0' 128' 128' 0);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,RenderToTexture,The following statement contains a magic number: gl.CopyTexImage2D(OpenGL.GL_TEXTURE_2D' 0' OpenGL.GL_LUMINANCE' 0' 0' 128' 128' 0);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,openGLControl1_OpenGLInitialized,The following statement contains a magic number: gl.Perspective(50' (float)Width / (float)Height' 5' 2000);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,openGLControl1_OpenGLInitialized,The following statement contains a magic number: gl.Perspective(50' (float)Width / (float)Height' 5' 2000);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,openGLControl1_OpenGLInitialized,The following statement contains a magic number: gl.Perspective(50' (float)Width / (float)Height' 5' 2000);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,openGLControl1_OpenGLInitialized,The following statement contains a magic number: gl.Material(OpenGL.GL_FRONT' OpenGL.GL_SHININESS' 128);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(8' 456);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(8' 456);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(728' 48);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(728' 48);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The following statement contains a magic number: this.openGLControl1.FrameRate = 20;
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The following statement contains a magic number: this.openGLControl1.Location = new System.Drawing.Point(11' 12);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The following statement contains a magic number: this.openGLControl1.Location = new System.Drawing.Point(11' 12);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The following statement contains a magic number: this.openGLControl1.Size = new System.Drawing.Size(725' 436);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The following statement contains a magic number: this.openGLControl1.Size = new System.Drawing.Size(725' 436);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(747' 510);
Magic Number,RadialBlurSample,FormRadialBlurSample,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\RadialBlurSample\FormRadialBlurSample.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(747' 510);
