Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SharpGL.WPF,CollectionCountToVisibilityConverter,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\CollectionCountToVisibilityConverter.cs,Convert,The length of the statement  "		throw new Exception ("CollectionCountToVisibiltyConverter is only compatible with objects that implement ICollection."); " is 120.
Long Statement,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The length of the statement  "			Scene.OpenGL.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime)); " is 158.
Long Statement,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The length of the statement  "			RenderContextProviders.DIBSectionRenderContextProvider provider = Scene.OpenGL.RenderContextProvider as RenderContextProviders.DIBSectionRenderContextProvider; " is 159.
Long Statement,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The length of the statement  "			RenderContextProviders.FBORenderContextProvider provider = Scene.OpenGL.RenderContextProvider as RenderContextProviders.FBORenderContextProvider; " is 145.
Long Statement,SharpGL.WPF,BitmapConversion,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\BitmapConversion.cs,HBitmapToBitmapSource,The length of the statement  "			bitSrc = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap (hBitmap' IntPtr.Zero' Int32Rect.Empty' BitmapSizeOptions.FromEmptyOptions ()); " is 149.
Long Statement,SharpGL.WPF,BitmapConversion,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\BitmapConversion.cs,DIBSectionToBitmapSource,The length of the statement  "		bitSrc = System.Windows.Interop.Imaging.CreateBitmapSourceFromMemorySection (dibSection.Bits' dibSection.Width' dibSection.Height' PixelFormats.Bgra32' dibSection.Width * 4' 0); " is 177.
Long Statement,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,timer_Tick,The length of the statement  "			gl.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime)); " is 148.
Magic Number,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,OnApplyTemplate,The following statement contains a magic number: timer.Interval = new TimeSpan (0' 0' 0' 0' (int)(1000.0 / FrameRate));  
Magic Number,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The following statement contains a magic number: lock (Scene) {  	//  Start the stopwatch so that we can time the rendering.  	stopwatch.Restart ();  	//  Draw the scene.  	Scene.Draw (Camera);  	//  Draw the FPS.  	if (DrawFPS) {  		Scene.OpenGL.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  		Scene.OpenGL.Flush ();  	}  	if (Scene.OpenGL.RenderContextProvider is RenderContextProviders.DIBSectionRenderContextProvider) {  		RenderContextProviders.DIBSectionRenderContextProvider provider = Scene.OpenGL.RenderContextProvider as RenderContextProviders.DIBSectionRenderContextProvider;  		//  TODO: We have to remove the alpha channel - for some reason it comes out as 0.0   		//  meaning the drawing comes out transparent.  		FormatConvertedBitmap newFormatedBitmapSource = new FormatConvertedBitmap ();  		newFormatedBitmapSource.BeginInit ();  		newFormatedBitmapSource.Source = BitmapConversion.HBitmapToBitmapSource (provider.DIBSection.HBitmap);  		newFormatedBitmapSource.DestinationFormat = PixelFormats.Rgb24;  		newFormatedBitmapSource.EndInit ();  		//  Copy the pixels over.  		image.Source = newFormatedBitmapSource;  	} else if (Scene.OpenGL.RenderContextProvider is RenderContextProviders.FBORenderContextProvider) {  		RenderContextProviders.FBORenderContextProvider provider = Scene.OpenGL.RenderContextProvider as RenderContextProviders.FBORenderContextProvider;  		//  TODO: We have to remove the alpha channel - for some reason it comes out as 0.0   		//  meaning the drawing comes out transparent.  		FormatConvertedBitmap newFormatedBitmapSource = new FormatConvertedBitmap ();  		newFormatedBitmapSource.BeginInit ();  		newFormatedBitmapSource.Source = BitmapConversion.HBitmapToBitmapSource (provider.InternalDIBSection.HBitmap);  		newFormatedBitmapSource.DestinationFormat = PixelFormats.Rgb24;  		newFormatedBitmapSource.EndInit ();  		//  Copy the pixels over.  		image.Source = newFormatedBitmapSource;  	}  	//  Stop the stopwatch.  	stopwatch.Stop ();  	//  Store the frame time.  	frameTime = stopwatch.Elapsed.TotalMilliseconds;  }  
Magic Number,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The following statement contains a magic number: lock (Scene) {  	//  Start the stopwatch so that we can time the rendering.  	stopwatch.Restart ();  	//  Draw the scene.  	Scene.Draw (Camera);  	//  Draw the FPS.  	if (DrawFPS) {  		Scene.OpenGL.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  		Scene.OpenGL.Flush ();  	}  	if (Scene.OpenGL.RenderContextProvider is RenderContextProviders.DIBSectionRenderContextProvider) {  		RenderContextProviders.DIBSectionRenderContextProvider provider = Scene.OpenGL.RenderContextProvider as RenderContextProviders.DIBSectionRenderContextProvider;  		//  TODO: We have to remove the alpha channel - for some reason it comes out as 0.0   		//  meaning the drawing comes out transparent.  		FormatConvertedBitmap newFormatedBitmapSource = new FormatConvertedBitmap ();  		newFormatedBitmapSource.BeginInit ();  		newFormatedBitmapSource.Source = BitmapConversion.HBitmapToBitmapSource (provider.DIBSection.HBitmap);  		newFormatedBitmapSource.DestinationFormat = PixelFormats.Rgb24;  		newFormatedBitmapSource.EndInit ();  		//  Copy the pixels over.  		image.Source = newFormatedBitmapSource;  	} else if (Scene.OpenGL.RenderContextProvider is RenderContextProviders.FBORenderContextProvider) {  		RenderContextProviders.FBORenderContextProvider provider = Scene.OpenGL.RenderContextProvider as RenderContextProviders.FBORenderContextProvider;  		//  TODO: We have to remove the alpha channel - for some reason it comes out as 0.0   		//  meaning the drawing comes out transparent.  		FormatConvertedBitmap newFormatedBitmapSource = new FormatConvertedBitmap ();  		newFormatedBitmapSource.BeginInit ();  		newFormatedBitmapSource.Source = BitmapConversion.HBitmapToBitmapSource (provider.InternalDIBSection.HBitmap);  		newFormatedBitmapSource.DestinationFormat = PixelFormats.Rgb24;  		newFormatedBitmapSource.EndInit ();  		//  Copy the pixels over.  		image.Source = newFormatedBitmapSource;  	}  	//  Stop the stopwatch.  	stopwatch.Stop ();  	//  Store the frame time.  	frameTime = stopwatch.Elapsed.TotalMilliseconds;  }  
Magic Number,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The following statement contains a magic number: lock (Scene) {  	//  Start the stopwatch so that we can time the rendering.  	stopwatch.Restart ();  	//  Draw the scene.  	Scene.Draw (Camera);  	//  Draw the FPS.  	if (DrawFPS) {  		Scene.OpenGL.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  		Scene.OpenGL.Flush ();  	}  	if (Scene.OpenGL.RenderContextProvider is RenderContextProviders.DIBSectionRenderContextProvider) {  		RenderContextProviders.DIBSectionRenderContextProvider provider = Scene.OpenGL.RenderContextProvider as RenderContextProviders.DIBSectionRenderContextProvider;  		//  TODO: We have to remove the alpha channel - for some reason it comes out as 0.0   		//  meaning the drawing comes out transparent.  		FormatConvertedBitmap newFormatedBitmapSource = new FormatConvertedBitmap ();  		newFormatedBitmapSource.BeginInit ();  		newFormatedBitmapSource.Source = BitmapConversion.HBitmapToBitmapSource (provider.DIBSection.HBitmap);  		newFormatedBitmapSource.DestinationFormat = PixelFormats.Rgb24;  		newFormatedBitmapSource.EndInit ();  		//  Copy the pixels over.  		image.Source = newFormatedBitmapSource;  	} else if (Scene.OpenGL.RenderContextProvider is RenderContextProviders.FBORenderContextProvider) {  		RenderContextProviders.FBORenderContextProvider provider = Scene.OpenGL.RenderContextProvider as RenderContextProviders.FBORenderContextProvider;  		//  TODO: We have to remove the alpha channel - for some reason it comes out as 0.0   		//  meaning the drawing comes out transparent.  		FormatConvertedBitmap newFormatedBitmapSource = new FormatConvertedBitmap ();  		newFormatedBitmapSource.BeginInit ();  		newFormatedBitmapSource.Source = BitmapConversion.HBitmapToBitmapSource (provider.InternalDIBSection.HBitmap);  		newFormatedBitmapSource.DestinationFormat = PixelFormats.Rgb24;  		newFormatedBitmapSource.EndInit ();  		//  Copy the pixels over.  		image.Source = newFormatedBitmapSource;  	}  	//  Stop the stopwatch.  	stopwatch.Stop ();  	//  Store the frame time.  	frameTime = stopwatch.Elapsed.TotalMilliseconds;  }  
Magic Number,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The following statement contains a magic number: if (DrawFPS) {  	Scene.OpenGL.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  	Scene.OpenGL.Flush ();  }  
Magic Number,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The following statement contains a magic number: if (DrawFPS) {  	Scene.OpenGL.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  	Scene.OpenGL.Flush ();  }  
Magic Number,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The following statement contains a magic number: if (DrawFPS) {  	Scene.OpenGL.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  	Scene.OpenGL.Flush ();  }  
Magic Number,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The following statement contains a magic number: Scene.OpenGL.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  
Magic Number,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The following statement contains a magic number: Scene.OpenGL.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  
Magic Number,SharpGL.WPF,SceneView,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\SceneView.xaml.cs,timer_Tick,The following statement contains a magic number: Scene.OpenGL.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  
Magic Number,SharpGL.WPF,BitmapConversion,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\BitmapConversion.cs,DIBSectionToBitmapSource,The following statement contains a magic number: try {  	bitSrc = System.Windows.Interop.Imaging.CreateBitmapSourceFromMemorySection (dibSection.Bits' dibSection.Width' dibSection.Height' PixelFormats.Bgra32' dibSection.Width * 4' 0);  } catch (Win32Exception) {  	bitSrc = null;  }  
Magic Number,SharpGL.WPF,BitmapConversion,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\BitmapConversion.cs,DIBSectionToBitmapSource,The following statement contains a magic number: bitSrc = System.Windows.Interop.Imaging.CreateBitmapSourceFromMemorySection (dibSection.Bits' dibSection.Width' dibSection.Height' PixelFormats.Bgra32' dibSection.Width * 4' 0);  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,OnApplyTemplate,The following statement contains a magic number: lock (gl) {  	//  Create OpenGL.  	gl.Create (OpenGLVersion' RenderContextType' 1' 1' 32' null);  }  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,OnApplyTemplate,The following statement contains a magic number: gl.Create (OpenGLVersion' RenderContextType' 1' 1' 32' null);  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,OnApplyTemplate,The following statement contains a magic number: timer.Interval = new TimeSpan (0' 0' 0' 0' (int)(1000.0 / FrameRate));  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,timer_Tick,The following statement contains a magic number: lock (gl) {  	//  Start the stopwatch so that we can time the rendering.  	stopwatch.Restart ();  	//  Make GL current.  	gl.MakeCurrent ();  	//	If there is a draw handler' then call it.  	var handler = OpenGLDraw;  	if (handler != null)  		handler (this' eventArgsFast);  	else  		gl.Clear (OpenGL.GL_COLOR_BUFFER_BIT);  	//  Draw the FPS.  	if (DrawFPS) {  		gl.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  		gl.Flush ();  	}  	//  Render.  	gl.Blit (IntPtr.Zero);  	switch (RenderContextType) {  	case RenderContextType.DIBSection:  		{  			var provider = gl.RenderContextProvider as DIBSectionRenderContextProvider;  			var hBitmap = provider.DIBSection.HBitmap;  			if (hBitmap != IntPtr.Zero) {  				var newFormatedBitmapSource = GetFormatedBitmapSource (hBitmap);  				//  Copy the pixels over.  				image.Source = newFormatedBitmapSource;  			}  		}  		break;  	case RenderContextType.NativeWindow:  		break;  	case RenderContextType.HiddenWindow:  		break;  	case RenderContextType.FBO:  		{  			var provider = gl.RenderContextProvider as FBORenderContextProvider;  			var hBitmap = provider.InternalDIBSection.HBitmap;  			if (hBitmap != IntPtr.Zero) {  				var newFormatedBitmapSource = GetFormatedBitmapSource (hBitmap);  				//  Copy the pixels over.  				image.Source = newFormatedBitmapSource;  			}  		}  		break;  	default:  		break;  	}  	//  Stop the stopwatch.  	stopwatch.Stop ();  	//  Store the frame time.  	frameTime = stopwatch.Elapsed.TotalMilliseconds;  }  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,timer_Tick,The following statement contains a magic number: lock (gl) {  	//  Start the stopwatch so that we can time the rendering.  	stopwatch.Restart ();  	//  Make GL current.  	gl.MakeCurrent ();  	//	If there is a draw handler' then call it.  	var handler = OpenGLDraw;  	if (handler != null)  		handler (this' eventArgsFast);  	else  		gl.Clear (OpenGL.GL_COLOR_BUFFER_BIT);  	//  Draw the FPS.  	if (DrawFPS) {  		gl.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  		gl.Flush ();  	}  	//  Render.  	gl.Blit (IntPtr.Zero);  	switch (RenderContextType) {  	case RenderContextType.DIBSection:  		{  			var provider = gl.RenderContextProvider as DIBSectionRenderContextProvider;  			var hBitmap = provider.DIBSection.HBitmap;  			if (hBitmap != IntPtr.Zero) {  				var newFormatedBitmapSource = GetFormatedBitmapSource (hBitmap);  				//  Copy the pixels over.  				image.Source = newFormatedBitmapSource;  			}  		}  		break;  	case RenderContextType.NativeWindow:  		break;  	case RenderContextType.HiddenWindow:  		break;  	case RenderContextType.FBO:  		{  			var provider = gl.RenderContextProvider as FBORenderContextProvider;  			var hBitmap = provider.InternalDIBSection.HBitmap;  			if (hBitmap != IntPtr.Zero) {  				var newFormatedBitmapSource = GetFormatedBitmapSource (hBitmap);  				//  Copy the pixels over.  				image.Source = newFormatedBitmapSource;  			}  		}  		break;  	default:  		break;  	}  	//  Stop the stopwatch.  	stopwatch.Stop ();  	//  Store the frame time.  	frameTime = stopwatch.Elapsed.TotalMilliseconds;  }  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,timer_Tick,The following statement contains a magic number: lock (gl) {  	//  Start the stopwatch so that we can time the rendering.  	stopwatch.Restart ();  	//  Make GL current.  	gl.MakeCurrent ();  	//	If there is a draw handler' then call it.  	var handler = OpenGLDraw;  	if (handler != null)  		handler (this' eventArgsFast);  	else  		gl.Clear (OpenGL.GL_COLOR_BUFFER_BIT);  	//  Draw the FPS.  	if (DrawFPS) {  		gl.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  		gl.Flush ();  	}  	//  Render.  	gl.Blit (IntPtr.Zero);  	switch (RenderContextType) {  	case RenderContextType.DIBSection:  		{  			var provider = gl.RenderContextProvider as DIBSectionRenderContextProvider;  			var hBitmap = provider.DIBSection.HBitmap;  			if (hBitmap != IntPtr.Zero) {  				var newFormatedBitmapSource = GetFormatedBitmapSource (hBitmap);  				//  Copy the pixels over.  				image.Source = newFormatedBitmapSource;  			}  		}  		break;  	case RenderContextType.NativeWindow:  		break;  	case RenderContextType.HiddenWindow:  		break;  	case RenderContextType.FBO:  		{  			var provider = gl.RenderContextProvider as FBORenderContextProvider;  			var hBitmap = provider.InternalDIBSection.HBitmap;  			if (hBitmap != IntPtr.Zero) {  				var newFormatedBitmapSource = GetFormatedBitmapSource (hBitmap);  				//  Copy the pixels over.  				image.Source = newFormatedBitmapSource;  			}  		}  		break;  	default:  		break;  	}  	//  Stop the stopwatch.  	stopwatch.Stop ();  	//  Store the frame time.  	frameTime = stopwatch.Elapsed.TotalMilliseconds;  }  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,timer_Tick,The following statement contains a magic number: if (DrawFPS) {  	gl.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  	gl.Flush ();  }  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,timer_Tick,The following statement contains a magic number: if (DrawFPS) {  	gl.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  	gl.Flush ();  }  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,timer_Tick,The following statement contains a magic number: if (DrawFPS) {  	gl.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  	gl.Flush ();  }  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,timer_Tick,The following statement contains a magic number: gl.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,timer_Tick,The following statement contains a magic number: gl.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  
Magic Number,SharpGL.WPF,OpenGLControl,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.WPF\OpenGLControl.xaml.cs,timer_Tick,The following statement contains a magic number: gl.DrawText (5' 5' 1.0f' 0.0f' 0.0f' "Courier New"' 12.0f' string.Format ("Draw Time: {0:0.0000} ms ~ {1:0.0} FPS"' frameTime' 1000.0 / frameTime));  
