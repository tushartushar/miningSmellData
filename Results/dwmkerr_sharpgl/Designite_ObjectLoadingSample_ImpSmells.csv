Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,Cyclomatic complexity of the method is 9
Complex Method,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderImmediateMode,Cyclomatic complexity of the method is 9
Complex Method,ObjectLoadingSample,MainWindow,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\MainWindow.xaml.cs,comboBoxPolygonMode_SelectionChanged,Cyclomatic complexity of the method is 9
Long Statement,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The length of the statement  "	BitmapData bitmapData = image.LockBits (new Rectangle (0' 0' image.Width' image.Height)' ImageLockMode.ReadOnly' PixelFormat.Format32bppArgb); " is 142.
Long Statement,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The length of the statement  "	gl.TexImage2D (OpenGL.GL_TEXTURE_2D' 0' (int)OpenGL.GL_RGBA' (int)Width' (int)Height' 0' OpenGL.GL_BGRA' OpenGL.GL_UNSIGNED_BYTE' bitmapData.Scan0); " is 148.
Long Statement,ObjectLoadingSample,SceneDenormaliser,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\SceneDenormaliser.cs,Denormalize,The length of the statement  "				var ns = indices.Any (ind => ind.normal.HasValue == false) ? null : indices.Select (ind => normals [ind.normal.Value]).Select (v => new vec3 (v.x' v.y' v.z)).ToArray (); " is 169.
Long Statement,ObjectLoadingSample,SceneDenormaliser,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\SceneDenormaliser.cs,Denormalize,The length of the statement  "				var ts = indices.Any (ind => ind.uv.HasValue == false) ? null : indices.Select (ind => uvs [ind.uv.Value]).Select (v => new vec2 (v.u' v.v)).ToArray (); " is 152.
Long Statement,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,Initialise,The length of the statement  "	shaderPerPixel.Create (gl' ManifestResourceLoader.LoadTextFile (@"Shaders\PerPixel.vert")' ManifestResourceLoader.LoadTextFile (@"Shaders\PerPixel.frag")' null); " is 161.
Long Statement,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderRetainedMode,The length of the statement  "			shaderPerPixel.SetUniform3 (gl' "DiffuseMaterial"' mesh.material.Diffuse.r' mesh.material.Diffuse.g' mesh.material.Diffuse.b); " is 126.
Long Statement,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderRetainedMode,The length of the statement  "			shaderPerPixel.SetUniform3 (gl' "AmbientMaterial"' mesh.material.Ambient.r' mesh.material.Ambient.g' mesh.material.Ambient.b); " is 126.
Long Statement,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderRetainedMode,The length of the statement  "			shaderPerPixel.SetUniform3 (gl' "SpecularMaterial"' mesh.material.Specular.r' mesh.material.Specular.g' mesh.material.Specular.b); " is 130.
Long Statement,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,CreateVertexBufferArray,The length of the statement  "	verticesVertexBuffer.SetData (gl' VertexAttributes.Position' mesh.vertices.SelectMany (v => v.to_array ()).ToArray ()' false' 3); " is 129.
Long Statement,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,CreateVertexBufferArray,The length of the statement  "		normalsVertexBuffer.SetData (gl' VertexAttributes.Normal' mesh.normals.SelectMany (v => v.to_array ()).ToArray ()' false' 3); " is 125.
Long Statement,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,CreateVertexBufferArray,The length of the statement  "		texCoordsVertexBuffer.SetData (gl' VertexAttributes.TexCoord' mesh.uvs.SelectMany (v => v.to_array ()).ToArray ()' false' 2); " is 125.
Magic Number,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The following statement contains a magic number: for (int size = 1; size <= textureMaxSize [0]; size *= 2) {  	if (image.Width < size) {  		targetWidth = size / 2;  		break;  	}  	if (image.Width == size)  		targetWidth = size;  }  
Magic Number,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The following statement contains a magic number: for (int size = 1; size <= textureMaxSize [0]; size *= 2) {  	if (image.Width < size) {  		targetWidth = size / 2;  		break;  	}  	if (image.Width == size)  		targetWidth = size;  }  
Magic Number,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The following statement contains a magic number: size *= 2
Magic Number,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The following statement contains a magic number: if (image.Width < size) {  	targetWidth = size / 2;  	break;  }  
Magic Number,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The following statement contains a magic number: targetWidth = size / 2;  
Magic Number,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The following statement contains a magic number: for (int size = 1; size <= textureMaxSize [0]; size *= 2) {  	if (image.Height < size) {  		targetHeight = size / 2;  		break;  	}  	if (image.Height == size)  		targetHeight = size;  }  
Magic Number,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The following statement contains a magic number: for (int size = 1; size <= textureMaxSize [0]; size *= 2) {  	if (image.Height < size) {  		targetHeight = size / 2;  		break;  	}  	if (image.Height == size)  		targetHeight = size;  }  
Magic Number,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The following statement contains a magic number: size *= 2
Magic Number,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The following statement contains a magic number: if (image.Height < size) {  	targetHeight = size / 2;  	break;  }  
Magic Number,SharpGL.Textures,Texture2D,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Extensions\Texture2D.cs,SetImage,The following statement contains a magic number: targetHeight = size / 2;  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,CreateProjectionMatrix,The following statement contains a magic number: projectionMatrix = glm.frustum (-S' S' -H' H' 1' 100);  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderImmediateMode,The following statement contains a magic number: foreach (var mesh in meshes) {  	var texture = meshTextures.ContainsKey (mesh) ? meshTextures [mesh] : null;  	if (texture != null)  		texture.Bind (gl);  	uint mode = OpenGL.GL_TRIANGLES;  	if (mesh.indicesPerFace == 4)  		mode = OpenGL.GL_QUADS;  	else if (mesh.indicesPerFace > 4)  		mode = OpenGL.GL_POLYGON;  	//  Render the group faces.  	gl.Begin (mode);  	for (int i = 0; i < mesh.vertices.Length; i++) {  		gl.Vertex (mesh.vertices [i].x' mesh.vertices [i].y' mesh.vertices [i].z);  		if (mesh.normals != null)  			gl.Normal (mesh.normals [i].x' mesh.normals [i].y' mesh.normals [i].z);  		if (mesh.uvs != null)  			gl.TexCoord (mesh.uvs [i].x' mesh.uvs [i].y);  	}  	gl.End ();  	if (texture != null)  		texture.Unbind (gl);  }  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderImmediateMode,The following statement contains a magic number: foreach (var mesh in meshes) {  	var texture = meshTextures.ContainsKey (mesh) ? meshTextures [mesh] : null;  	if (texture != null)  		texture.Bind (gl);  	uint mode = OpenGL.GL_TRIANGLES;  	if (mesh.indicesPerFace == 4)  		mode = OpenGL.GL_QUADS;  	else if (mesh.indicesPerFace > 4)  		mode = OpenGL.GL_POLYGON;  	//  Render the group faces.  	gl.Begin (mode);  	for (int i = 0; i < mesh.vertices.Length; i++) {  		gl.Vertex (mesh.vertices [i].x' mesh.vertices [i].y' mesh.vertices [i].z);  		if (mesh.normals != null)  			gl.Normal (mesh.normals [i].x' mesh.normals [i].y' mesh.normals [i].z);  		if (mesh.uvs != null)  			gl.TexCoord (mesh.uvs [i].x' mesh.uvs [i].y);  	}  	gl.End ();  	if (texture != null)  		texture.Unbind (gl);  }  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderImmediateMode,The following statement contains a magic number: if (mesh.indicesPerFace == 4)  	mode = OpenGL.GL_QUADS;  else if (mesh.indicesPerFace > 4)  	mode = OpenGL.GL_POLYGON;  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderImmediateMode,The following statement contains a magic number: if (mesh.indicesPerFace == 4)  	mode = OpenGL.GL_QUADS;  else if (mesh.indicesPerFace > 4)  	mode = OpenGL.GL_POLYGON;  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderImmediateMode,The following statement contains a magic number: if (mesh.indicesPerFace > 4)  	mode = OpenGL.GL_POLYGON;  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderRetainedMode,The following statement contains a magic number: foreach (var mesh in meshes) {  	//  If we have a material for the mesh' we'll use it. If we don't' we'll use the default material.  	if (mesh.material != null) {  		shaderPerPixel.SetUniform3 (gl' "DiffuseMaterial"' mesh.material.Diffuse.r' mesh.material.Diffuse.g' mesh.material.Diffuse.b);  		shaderPerPixel.SetUniform3 (gl' "AmbientMaterial"' mesh.material.Ambient.r' mesh.material.Ambient.g' mesh.material.Ambient.b);  		shaderPerPixel.SetUniform3 (gl' "SpecularMaterial"' mesh.material.Specular.r' mesh.material.Specular.g' mesh.material.Specular.b);  		shaderPerPixel.SetUniform1 (gl' "Shininess"' mesh.material.Shininess);  	} else {  		int i = 0;  		//  TODO: we should really set a default material here.  	}  	var vertexBufferArray = meshVertexBufferArrays [mesh];  	vertexBufferArray.Bind (gl);  	//  IMPORTANT: This is interesting. If you use OpenGL 2.1' you can use quads. If you move to 3.0 or onwards'   	//  you can only draw the triangle types - cause 3.0 onwards deprecates other types.  	//  see: http://stackoverflow.com/questions/8041361/simple-opengl-clarification  	//  this shows that the OpenGL mode selection works - if I choose 2.1 I can draw quads' otherwise I can't.  	//  There's a good article on tesselating quads to triangles here:  	//  http://prideout.net/blog/?p=49  	//  This should be a sample!  	uint mode = OpenGL.GL_TRIANGLES;  	if (mesh.indicesPerFace == 4)  		mode = OpenGL.GL_QUADS;  	else if (mesh.indicesPerFace > 4)  		mode = OpenGL.GL_POLYGON;  	gl.DrawArrays (mode' 0' mesh.vertices.Length);  }  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderRetainedMode,The following statement contains a magic number: foreach (var mesh in meshes) {  	//  If we have a material for the mesh' we'll use it. If we don't' we'll use the default material.  	if (mesh.material != null) {  		shaderPerPixel.SetUniform3 (gl' "DiffuseMaterial"' mesh.material.Diffuse.r' mesh.material.Diffuse.g' mesh.material.Diffuse.b);  		shaderPerPixel.SetUniform3 (gl' "AmbientMaterial"' mesh.material.Ambient.r' mesh.material.Ambient.g' mesh.material.Ambient.b);  		shaderPerPixel.SetUniform3 (gl' "SpecularMaterial"' mesh.material.Specular.r' mesh.material.Specular.g' mesh.material.Specular.b);  		shaderPerPixel.SetUniform1 (gl' "Shininess"' mesh.material.Shininess);  	} else {  		int i = 0;  		//  TODO: we should really set a default material here.  	}  	var vertexBufferArray = meshVertexBufferArrays [mesh];  	vertexBufferArray.Bind (gl);  	//  IMPORTANT: This is interesting. If you use OpenGL 2.1' you can use quads. If you move to 3.0 or onwards'   	//  you can only draw the triangle types - cause 3.0 onwards deprecates other types.  	//  see: http://stackoverflow.com/questions/8041361/simple-opengl-clarification  	//  this shows that the OpenGL mode selection works - if I choose 2.1 I can draw quads' otherwise I can't.  	//  There's a good article on tesselating quads to triangles here:  	//  http://prideout.net/blog/?p=49  	//  This should be a sample!  	uint mode = OpenGL.GL_TRIANGLES;  	if (mesh.indicesPerFace == 4)  		mode = OpenGL.GL_QUADS;  	else if (mesh.indicesPerFace > 4)  		mode = OpenGL.GL_POLYGON;  	gl.DrawArrays (mode' 0' mesh.vertices.Length);  }  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderRetainedMode,The following statement contains a magic number: if (mesh.indicesPerFace == 4)  	mode = OpenGL.GL_QUADS;  else if (mesh.indicesPerFace > 4)  	mode = OpenGL.GL_POLYGON;  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderRetainedMode,The following statement contains a magic number: if (mesh.indicesPerFace == 4)  	mode = OpenGL.GL_QUADS;  else if (mesh.indicesPerFace > 4)  	mode = OpenGL.GL_POLYGON;  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,RenderRetainedMode,The following statement contains a magic number: if (mesh.indicesPerFace > 4)  	mode = OpenGL.GL_POLYGON;  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,CreateVertexBufferArray,The following statement contains a magic number: verticesVertexBuffer.SetData (gl' VertexAttributes.Position' mesh.vertices.SelectMany (v => v.to_array ()).ToArray ()' false' 3);  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,CreateVertexBufferArray,The following statement contains a magic number: if (mesh.normals != null) {  	var normalsVertexBuffer = new VertexBuffer ();  	normalsVertexBuffer.Create (gl);  	normalsVertexBuffer.Bind (gl);  	normalsVertexBuffer.SetData (gl' VertexAttributes.Normal' mesh.normals.SelectMany (v => v.to_array ()).ToArray ()' false' 3);  }  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,CreateVertexBufferArray,The following statement contains a magic number: normalsVertexBuffer.SetData (gl' VertexAttributes.Normal' mesh.normals.SelectMany (v => v.to_array ()).ToArray ()' false' 3);  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,CreateVertexBufferArray,The following statement contains a magic number: if (mesh.uvs != null) {  	var texCoordsVertexBuffer = new VertexBuffer ();  	texCoordsVertexBuffer.Create (gl);  	texCoordsVertexBuffer.Bind (gl);  	texCoordsVertexBuffer.SetData (gl' VertexAttributes.TexCoord' mesh.uvs.SelectMany (v => v.to_array ()).ToArray ()' false' 2);  }  
Magic Number,ObjectLoadingSample,Scene,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\Scene.cs,CreateVertexBufferArray,The following statement contains a magic number: texCoordsVertexBuffer.SetData (gl' VertexAttributes.TexCoord' mesh.uvs.SelectMany (v => v.to_array ()).ToArray ()' false' 2);  
Magic Number,ObjectLoadingSample,MainWindow,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\MainWindow.xaml.cs,comboBoxPolygonMode_SelectionChanged,The following statement contains a magic number: switch (comboBoxPolygonMode.SelectedIndex) {  case 0:  	openGlCtrl.OpenGL.PolygonMode (FaceMode.FrontAndBack' PolygonMode.Points);  	break;  case 1:  	openGlCtrl.OpenGL.PolygonMode (FaceMode.FrontAndBack' PolygonMode.Lines);  	break;  case 2:  	openGlCtrl.OpenGL.PolygonMode (FaceMode.FrontAndBack' PolygonMode.Filled);  	break;  }  
Missing Default,ObjectLoadingSample,MainWindow,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\MainWindow.xaml.cs,OpenGLControl_OpenGLDraw,The following switch statement is missing a default case: switch (comboBoxRenderMode.SelectedIndex) {  case 0:  	scene.RenderImmediateMode (gl);  	break;  case 1:  	scene.RenderRetainedMode (gl);  	break;  }  
Missing Default,ObjectLoadingSample,MainWindow,F:\newReposMay17\dwmkerr_sharpgl\source\SharpGL\Samples\WPF\ObjectLoadingSample\MainWindow.xaml.cs,comboBoxPolygonMode_SelectionChanged,The following switch statement is missing a default case: switch (comboBoxPolygonMode.SelectedIndex) {  case 0:  	openGlCtrl.OpenGL.PolygonMode (FaceMode.FrontAndBack' PolygonMode.Points);  	break;  case 1:  	openGlCtrl.OpenGL.PolygonMode (FaceMode.FrontAndBack' PolygonMode.Lines);  	break;  case 2:  	openGlCtrl.OpenGL.PolygonMode (FaceMode.FrontAndBack' PolygonMode.Filled);  	break;  }  
