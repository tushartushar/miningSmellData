Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpGL.Serialization.Caligari,PolygonChunk,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\PolygonChunk.cs,ReadData,Cyclomatic complexity of the method is 8
Complex Method,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,Cyclomatic complexity of the method is 10
Magic Number,SharpGL.Serialization.Caligari,CaligariFileHeader,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariFileHeader.cs,Read,The following statement contains a magic number: id = new string(stream.ReadChars(9));
Magic Number,SharpGL.Serialization.Caligari,CaligariFileHeader,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariFileHeader.cs,Read,The following statement contains a magic number: version = new string(stream.ReadChars(6));
Magic Number,SharpGL.Serialization.Caligari,CaligariFileHeader,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariFileHeader.cs,Read,The following statement contains a magic number: bitFormat = new string(stream.ReadChars(2));
Magic Number,SharpGL.Serialization.Caligari,CaligariFileHeader,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariFileHeader.cs,Read,The following statement contains a magic number: stream.ReadChars(14);
Magic Number,SharpGL.Serialization.Caligari,CaligariFileHeader,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariFileHeader.cs,Write,The following statement contains a magic number: writer.Write(new byte[14]' 0' 14);
Magic Number,SharpGL.Serialization.Caligari,CaligariFileHeader,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariFileHeader.cs,Write,The following statement contains a magic number: writer.Write(new byte[14]' 0' 14);
Magic Number,SharpGL.Serialization.Caligari,CaligariChunkHeader,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariFileHeader.cs,Read,The following statement contains a magic number: chunkType = new string(stream.ReadChars(4));
Magic Number,SharpGL.Serialization.Caligari,CaligariAxies,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: angleX = (180 * angleX) / (float)Math.PI;
Magic Number,SharpGL.Serialization.Caligari,CaligariAxies,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: angleY = (180 * angleY) / (float)Math.PI;
Magic Number,SharpGL.Serialization.Caligari,CaligariAxies,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: angleZ = (180 * angleZ) / (float)Math.PI;
Magic Number,SharpGL.Serialization.Caligari,CaligariPosition,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: matrix[0'2] = row1[2];
Magic Number,SharpGL.Serialization.Caligari,CaligariPosition,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: matrix[0'2] = row1[2];
Magic Number,SharpGL.Serialization.Caligari,CaligariPosition,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: matrix[1'2] = row2[2];
Magic Number,SharpGL.Serialization.Caligari,CaligariPosition,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: matrix[1'2] = row2[2];
Magic Number,SharpGL.Serialization.Caligari,CaligariPosition,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: matrix[2'0] = row3[0];
Magic Number,SharpGL.Serialization.Caligari,CaligariPosition,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: matrix[2'1] = row3[1];
Magic Number,SharpGL.Serialization.Caligari,CaligariPosition,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: matrix[2'2] = row3[2];
Magic Number,SharpGL.Serialization.Caligari,CaligariPosition,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: matrix[2'2] = row3[2];
Magic Number,SharpGL.Serialization.Caligari,CaligariPosition,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\CaligariPrimitives.cs,Read,The following statement contains a magic number: matrix[2'2] = row3[2];
Magic Number,SharpGL.Serialization.Caligari,PolygonChunk,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\PolygonChunk.cs,ReadData,The following statement contains a magic number: if (header.minorVersion > 4)              {                  //	read flags.                  reader.ReadChars(4);                    if ((header.minorVersion > 5) && (header.minorVersion < 8))                      reader.ReadChars(2);              }
Magic Number,SharpGL.Serialization.Caligari,PolygonChunk,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\PolygonChunk.cs,ReadData,The following statement contains a magic number: if (header.minorVersion > 4)              {                  //	read flags.                  reader.ReadChars(4);                    if ((header.minorVersion > 5) && (header.minorVersion < 8))                      reader.ReadChars(2);              }
Magic Number,SharpGL.Serialization.Caligari,PolygonChunk,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\PolygonChunk.cs,ReadData,The following statement contains a magic number: if (header.minorVersion > 4)              {                  //	read flags.                  reader.ReadChars(4);                    if ((header.minorVersion > 5) && (header.minorVersion < 8))                      reader.ReadChars(2);              }
Magic Number,SharpGL.Serialization.Caligari,PolygonChunk,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\PolygonChunk.cs,ReadData,The following statement contains a magic number: if (header.minorVersion > 4)              {                  //	read flags.                  reader.ReadChars(4);                    if ((header.minorVersion > 5) && (header.minorVersion < 8))                      reader.ReadChars(2);              }
Magic Number,SharpGL.Serialization.Caligari,PolygonChunk,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Caligari\PolygonChunk.cs,ReadData,The following statement contains a magic number: if (header.minorVersion > 4)              {                  //	read flags.                  reader.ReadChars(4);                    if ((header.minorVersion > 5) && (header.minorVersion < 8))                      reader.ReadChars(2);              }
Magic Number,SharpGL.Serialization.Discreet,MAXChunkHeader,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Discreet\Chunks.cs,Read,The following statement contains a magic number: dataBytes = allDataBytes - 6;
Magic Number,SharpGL.Serialization.Discreet,MAXChunkHeader,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Discreet\Chunks.cs,Peep,The following statement contains a magic number: stream.BaseStream.Seek(-6' System.IO.SeekOrigin.Current);
Magic Number,SharpGL.Serialization.Discreet,TriangleMeshChunk,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Discreet\Chunks.cs,ReadData,The following statement contains a magic number: Matrix matrix = new Matrix(Matrix.Identity(4));
Magic Number,SharpGL.Serialization.Discreet,TrMatrixChunk,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Discreet\Chunks.cs,ReadData,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  for (int j = 0; j < 4; j++)                      matrix[i'j] = stream.ReadSingle();              }
Magic Number,SharpGL.Serialization.Discreet,TrMatrixChunk,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Discreet\Chunks.cs,ReadData,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  for (int j = 0; j < 4; j++)                      matrix[i'j] = stream.ReadSingle();              }
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,ReadMaterialColor,The following statement contains a magic number: if (lineParts.Length >= 4)              {                  // Convert float a'r'g'b values to byte values.  Make sure they fall in 0-255 range.                  int a = Convert.ToInt32(255 * alpha);                  if (a < 0) a = 0; if (a > 255) a = 255;                  int r = Convert.ToInt32(255 * Convert.ToSingle(lineParts[1]));                  if (r < 0) r = 0; if (r > 255) r = 255;                  int g = Convert.ToInt32(255 * Convert.ToSingle(lineParts[2]));                  if (g < 0) g = 0; if (g > 255) g = 255;                  int b = Convert.ToInt32(255 * Convert.ToSingle(lineParts[3]));                  if (b < 0) b = 0; if (b > 255) b = 255;                  return System.Drawing.Color.FromArgb(a' r' g' b);              }              else                  return System.Drawing.Color.White;
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,SetAlphaForMaterial,The following statement contains a magic number: int a = Convert.ToInt32(255 * alpha);
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,LoadData,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))              {                  //  Read line by line.                  string line = null;                  while ((line = reader.ReadLine()) != null)                  {                      //  Skip any comments (lines that start with '#').                      if (line.StartsWith("#"))                          continue;                        //  Do we have a texture coordinate?                      if (line.StartsWith("vt"))                      {                          //  Get the texture coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse texture coordinates.                          float u = float.Parse(values[0]);                          float v = float.Parse(values[1]);                            //  Add the texture coordinate.                          polygon.UVs.Add(new UV(u' v));                            continue;                      }                        //  Do we have a normal coordinate?                      if (line.StartsWith("vn"))                      {                          //  Get the normal coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse normal coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //  Add the normal.                          polygon.Normals.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a vertex?                      if (line.StartsWith("v"))                      {                          //  Get the vertex coord strings.                          string[] values = line.Substring(2).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse vertex coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //   Add the vertices.                          polygon.Vertices.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a face?                      if (line.StartsWith("f"))                      {                          Face face = new Face();                            if (!String.IsNullOrWhiteSpace(mtlName))                              face.Material = scene.Assets.Where(t => t.Name == mtlName).FirstOrDefault() as Material;                            //  Get the face indices                          string[] indices = line.Substring(2).Split(split'                              StringSplitOptions.RemoveEmptyEntries);                            //  Add each index.                          foreach (var index in indices)                          {                              //  Split the parts.                              string[] parts = index.Split(new char[] { '/' }' StringSplitOptions.None);                                //  Add each part.                              face.Indices.Add(new Index(                                  (parts.Length > 0 && parts[0].Length > 0) ? int.Parse(parts[0]) - 1 : -1'                                  (parts.Length > 1 && parts[1].Length > 0) ? int.Parse(parts[1]) - 1 : -1'                                  (parts.Length > 2 && parts[2].Length > 0) ? int.Parse(parts[2]) - 1 : -1));                          }                                //  Add the face.                          polygon.Faces.Add(face);                            continue;                      }                        if (line.StartsWith("mtllib"))                      {                          // Set current directory in case a relative path to material file is used.                          Environment.CurrentDirectory = Path.GetDirectoryName(path);                            // Load materials file.                          string mtlPath = ReadMaterialValue(line);                          LoadMaterials(mtlPath' scene);                      }                        if (line.StartsWith("usemtl"))                          mtlName = ReadMaterialValue(line);                  }              }
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,LoadData,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))              {                  //  Read line by line.                  string line = null;                  while ((line = reader.ReadLine()) != null)                  {                      //  Skip any comments (lines that start with '#').                      if (line.StartsWith("#"))                          continue;                        //  Do we have a texture coordinate?                      if (line.StartsWith("vt"))                      {                          //  Get the texture coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse texture coordinates.                          float u = float.Parse(values[0]);                          float v = float.Parse(values[1]);                            //  Add the texture coordinate.                          polygon.UVs.Add(new UV(u' v));                            continue;                      }                        //  Do we have a normal coordinate?                      if (line.StartsWith("vn"))                      {                          //  Get the normal coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse normal coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //  Add the normal.                          polygon.Normals.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a vertex?                      if (line.StartsWith("v"))                      {                          //  Get the vertex coord strings.                          string[] values = line.Substring(2).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse vertex coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //   Add the vertices.                          polygon.Vertices.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a face?                      if (line.StartsWith("f"))                      {                          Face face = new Face();                            if (!String.IsNullOrWhiteSpace(mtlName))                              face.Material = scene.Assets.Where(t => t.Name == mtlName).FirstOrDefault() as Material;                            //  Get the face indices                          string[] indices = line.Substring(2).Split(split'                              StringSplitOptions.RemoveEmptyEntries);                            //  Add each index.                          foreach (var index in indices)                          {                              //  Split the parts.                              string[] parts = index.Split(new char[] { '/' }' StringSplitOptions.None);                                //  Add each part.                              face.Indices.Add(new Index(                                  (parts.Length > 0 && parts[0].Length > 0) ? int.Parse(parts[0]) - 1 : -1'                                  (parts.Length > 1 && parts[1].Length > 0) ? int.Parse(parts[1]) - 1 : -1'                                  (parts.Length > 2 && parts[2].Length > 0) ? int.Parse(parts[2]) - 1 : -1));                          }                                //  Add the face.                          polygon.Faces.Add(face);                            continue;                      }                        if (line.StartsWith("mtllib"))                      {                          // Set current directory in case a relative path to material file is used.                          Environment.CurrentDirectory = Path.GetDirectoryName(path);                            // Load materials file.                          string mtlPath = ReadMaterialValue(line);                          LoadMaterials(mtlPath' scene);                      }                        if (line.StartsWith("usemtl"))                          mtlName = ReadMaterialValue(line);                  }              }
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,LoadData,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))              {                  //  Read line by line.                  string line = null;                  while ((line = reader.ReadLine()) != null)                  {                      //  Skip any comments (lines that start with '#').                      if (line.StartsWith("#"))                          continue;                        //  Do we have a texture coordinate?                      if (line.StartsWith("vt"))                      {                          //  Get the texture coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse texture coordinates.                          float u = float.Parse(values[0]);                          float v = float.Parse(values[1]);                            //  Add the texture coordinate.                          polygon.UVs.Add(new UV(u' v));                            continue;                      }                        //  Do we have a normal coordinate?                      if (line.StartsWith("vn"))                      {                          //  Get the normal coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse normal coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //  Add the normal.                          polygon.Normals.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a vertex?                      if (line.StartsWith("v"))                      {                          //  Get the vertex coord strings.                          string[] values = line.Substring(2).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse vertex coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //   Add the vertices.                          polygon.Vertices.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a face?                      if (line.StartsWith("f"))                      {                          Face face = new Face();                            if (!String.IsNullOrWhiteSpace(mtlName))                              face.Material = scene.Assets.Where(t => t.Name == mtlName).FirstOrDefault() as Material;                            //  Get the face indices                          string[] indices = line.Substring(2).Split(split'                              StringSplitOptions.RemoveEmptyEntries);                            //  Add each index.                          foreach (var index in indices)                          {                              //  Split the parts.                              string[] parts = index.Split(new char[] { '/' }' StringSplitOptions.None);                                //  Add each part.                              face.Indices.Add(new Index(                                  (parts.Length > 0 && parts[0].Length > 0) ? int.Parse(parts[0]) - 1 : -1'                                  (parts.Length > 1 && parts[1].Length > 0) ? int.Parse(parts[1]) - 1 : -1'                                  (parts.Length > 2 && parts[2].Length > 0) ? int.Parse(parts[2]) - 1 : -1));                          }                                //  Add the face.                          polygon.Faces.Add(face);                            continue;                      }                        if (line.StartsWith("mtllib"))                      {                          // Set current directory in case a relative path to material file is used.                          Environment.CurrentDirectory = Path.GetDirectoryName(path);                            // Load materials file.                          string mtlPath = ReadMaterialValue(line);                          LoadMaterials(mtlPath' scene);                      }                        if (line.StartsWith("usemtl"))                          mtlName = ReadMaterialValue(line);                  }              }
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,LoadData,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))              {                  //  Read line by line.                  string line = null;                  while ((line = reader.ReadLine()) != null)                  {                      //  Skip any comments (lines that start with '#').                      if (line.StartsWith("#"))                          continue;                        //  Do we have a texture coordinate?                      if (line.StartsWith("vt"))                      {                          //  Get the texture coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse texture coordinates.                          float u = float.Parse(values[0]);                          float v = float.Parse(values[1]);                            //  Add the texture coordinate.                          polygon.UVs.Add(new UV(u' v));                            continue;                      }                        //  Do we have a normal coordinate?                      if (line.StartsWith("vn"))                      {                          //  Get the normal coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse normal coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //  Add the normal.                          polygon.Normals.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a vertex?                      if (line.StartsWith("v"))                      {                          //  Get the vertex coord strings.                          string[] values = line.Substring(2).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse vertex coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //   Add the vertices.                          polygon.Vertices.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a face?                      if (line.StartsWith("f"))                      {                          Face face = new Face();                            if (!String.IsNullOrWhiteSpace(mtlName))                              face.Material = scene.Assets.Where(t => t.Name == mtlName).FirstOrDefault() as Material;                            //  Get the face indices                          string[] indices = line.Substring(2).Split(split'                              StringSplitOptions.RemoveEmptyEntries);                            //  Add each index.                          foreach (var index in indices)                          {                              //  Split the parts.                              string[] parts = index.Split(new char[] { '/' }' StringSplitOptions.None);                                //  Add each part.                              face.Indices.Add(new Index(                                  (parts.Length > 0 && parts[0].Length > 0) ? int.Parse(parts[0]) - 1 : -1'                                  (parts.Length > 1 && parts[1].Length > 0) ? int.Parse(parts[1]) - 1 : -1'                                  (parts.Length > 2 && parts[2].Length > 0) ? int.Parse(parts[2]) - 1 : -1));                          }                                //  Add the face.                          polygon.Faces.Add(face);                            continue;                      }                        if (line.StartsWith("mtllib"))                      {                          // Set current directory in case a relative path to material file is used.                          Environment.CurrentDirectory = Path.GetDirectoryName(path);                            // Load materials file.                          string mtlPath = ReadMaterialValue(line);                          LoadMaterials(mtlPath' scene);                      }                        if (line.StartsWith("usemtl"))                          mtlName = ReadMaterialValue(line);                  }              }
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,LoadData,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))              {                  //  Read line by line.                  string line = null;                  while ((line = reader.ReadLine()) != null)                  {                      //  Skip any comments (lines that start with '#').                      if (line.StartsWith("#"))                          continue;                        //  Do we have a texture coordinate?                      if (line.StartsWith("vt"))                      {                          //  Get the texture coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse texture coordinates.                          float u = float.Parse(values[0]);                          float v = float.Parse(values[1]);                            //  Add the texture coordinate.                          polygon.UVs.Add(new UV(u' v));                            continue;                      }                        //  Do we have a normal coordinate?                      if (line.StartsWith("vn"))                      {                          //  Get the normal coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse normal coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //  Add the normal.                          polygon.Normals.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a vertex?                      if (line.StartsWith("v"))                      {                          //  Get the vertex coord strings.                          string[] values = line.Substring(2).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse vertex coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //   Add the vertices.                          polygon.Vertices.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a face?                      if (line.StartsWith("f"))                      {                          Face face = new Face();                            if (!String.IsNullOrWhiteSpace(mtlName))                              face.Material = scene.Assets.Where(t => t.Name == mtlName).FirstOrDefault() as Material;                            //  Get the face indices                          string[] indices = line.Substring(2).Split(split'                              StringSplitOptions.RemoveEmptyEntries);                            //  Add each index.                          foreach (var index in indices)                          {                              //  Split the parts.                              string[] parts = index.Split(new char[] { '/' }' StringSplitOptions.None);                                //  Add each part.                              face.Indices.Add(new Index(                                  (parts.Length > 0 && parts[0].Length > 0) ? int.Parse(parts[0]) - 1 : -1'                                  (parts.Length > 1 && parts[1].Length > 0) ? int.Parse(parts[1]) - 1 : -1'                                  (parts.Length > 2 && parts[2].Length > 0) ? int.Parse(parts[2]) - 1 : -1));                          }                                //  Add the face.                          polygon.Faces.Add(face);                            continue;                      }                        if (line.StartsWith("mtllib"))                      {                          // Set current directory in case a relative path to material file is used.                          Environment.CurrentDirectory = Path.GetDirectoryName(path);                            // Load materials file.                          string mtlPath = ReadMaterialValue(line);                          LoadMaterials(mtlPath' scene);                      }                        if (line.StartsWith("usemtl"))                          mtlName = ReadMaterialValue(line);                  }              }
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,LoadData,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))              {                  //  Read line by line.                  string line = null;                  while ((line = reader.ReadLine()) != null)                  {                      //  Skip any comments (lines that start with '#').                      if (line.StartsWith("#"))                          continue;                        //  Do we have a texture coordinate?                      if (line.StartsWith("vt"))                      {                          //  Get the texture coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse texture coordinates.                          float u = float.Parse(values[0]);                          float v = float.Parse(values[1]);                            //  Add the texture coordinate.                          polygon.UVs.Add(new UV(u' v));                            continue;                      }                        //  Do we have a normal coordinate?                      if (line.StartsWith("vn"))                      {                          //  Get the normal coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse normal coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //  Add the normal.                          polygon.Normals.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a vertex?                      if (line.StartsWith("v"))                      {                          //  Get the vertex coord strings.                          string[] values = line.Substring(2).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse vertex coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //   Add the vertices.                          polygon.Vertices.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a face?                      if (line.StartsWith("f"))                      {                          Face face = new Face();                            if (!String.IsNullOrWhiteSpace(mtlName))                              face.Material = scene.Assets.Where(t => t.Name == mtlName).FirstOrDefault() as Material;                            //  Get the face indices                          string[] indices = line.Substring(2).Split(split'                              StringSplitOptions.RemoveEmptyEntries);                            //  Add each index.                          foreach (var index in indices)                          {                              //  Split the parts.                              string[] parts = index.Split(new char[] { '/' }' StringSplitOptions.None);                                //  Add each part.                              face.Indices.Add(new Index(                                  (parts.Length > 0 && parts[0].Length > 0) ? int.Parse(parts[0]) - 1 : -1'                                  (parts.Length > 1 && parts[1].Length > 0) ? int.Parse(parts[1]) - 1 : -1'                                  (parts.Length > 2 && parts[2].Length > 0) ? int.Parse(parts[2]) - 1 : -1));                          }                                //  Add the face.                          polygon.Faces.Add(face);                            continue;                      }                        if (line.StartsWith("mtllib"))                      {                          // Set current directory in case a relative path to material file is used.                          Environment.CurrentDirectory = Path.GetDirectoryName(path);                            // Load materials file.                          string mtlPath = ReadMaterialValue(line);                          LoadMaterials(mtlPath' scene);                      }                        if (line.StartsWith("usemtl"))                          mtlName = ReadMaterialValue(line);                  }              }
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,LoadData,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))              {                  //  Read line by line.                  string line = null;                  while ((line = reader.ReadLine()) != null)                  {                      //  Skip any comments (lines that start with '#').                      if (line.StartsWith("#"))                          continue;                        //  Do we have a texture coordinate?                      if (line.StartsWith("vt"))                      {                          //  Get the texture coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse texture coordinates.                          float u = float.Parse(values[0]);                          float v = float.Parse(values[1]);                            //  Add the texture coordinate.                          polygon.UVs.Add(new UV(u' v));                            continue;                      }                        //  Do we have a normal coordinate?                      if (line.StartsWith("vn"))                      {                          //  Get the normal coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse normal coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //  Add the normal.                          polygon.Normals.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a vertex?                      if (line.StartsWith("v"))                      {                          //  Get the vertex coord strings.                          string[] values = line.Substring(2).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse vertex coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //   Add the vertices.                          polygon.Vertices.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a face?                      if (line.StartsWith("f"))                      {                          Face face = new Face();                            if (!String.IsNullOrWhiteSpace(mtlName))                              face.Material = scene.Assets.Where(t => t.Name == mtlName).FirstOrDefault() as Material;                            //  Get the face indices                          string[] indices = line.Substring(2).Split(split'                              StringSplitOptions.RemoveEmptyEntries);                            //  Add each index.                          foreach (var index in indices)                          {                              //  Split the parts.                              string[] parts = index.Split(new char[] { '/' }' StringSplitOptions.None);                                //  Add each part.                              face.Indices.Add(new Index(                                  (parts.Length > 0 && parts[0].Length > 0) ? int.Parse(parts[0]) - 1 : -1'                                  (parts.Length > 1 && parts[1].Length > 0) ? int.Parse(parts[1]) - 1 : -1'                                  (parts.Length > 2 && parts[2].Length > 0) ? int.Parse(parts[2]) - 1 : -1));                          }                                //  Add the face.                          polygon.Faces.Add(face);                            continue;                      }                        if (line.StartsWith("mtllib"))                      {                          // Set current directory in case a relative path to material file is used.                          Environment.CurrentDirectory = Path.GetDirectoryName(path);                            // Load materials file.                          string mtlPath = ReadMaterialValue(line);                          LoadMaterials(mtlPath' scene);                      }                        if (line.StartsWith("usemtl"))                          mtlName = ReadMaterialValue(line);                  }              }
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,LoadData,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))              {                  //  Read line by line.                  string line = null;                  while ((line = reader.ReadLine()) != null)                  {                      //  Skip any comments (lines that start with '#').                      if (line.StartsWith("#"))                          continue;                        //  Do we have a texture coordinate?                      if (line.StartsWith("vt"))                      {                          //  Get the texture coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse texture coordinates.                          float u = float.Parse(values[0]);                          float v = float.Parse(values[1]);                            //  Add the texture coordinate.                          polygon.UVs.Add(new UV(u' v));                            continue;                      }                        //  Do we have a normal coordinate?                      if (line.StartsWith("vn"))                      {                          //  Get the normal coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse normal coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //  Add the normal.                          polygon.Normals.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a vertex?                      if (line.StartsWith("v"))                      {                          //  Get the vertex coord strings.                          string[] values = line.Substring(2).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse vertex coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //   Add the vertices.                          polygon.Vertices.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a face?                      if (line.StartsWith("f"))                      {                          Face face = new Face();                            if (!String.IsNullOrWhiteSpace(mtlName))                              face.Material = scene.Assets.Where(t => t.Name == mtlName).FirstOrDefault() as Material;                            //  Get the face indices                          string[] indices = line.Substring(2).Split(split'                              StringSplitOptions.RemoveEmptyEntries);                            //  Add each index.                          foreach (var index in indices)                          {                              //  Split the parts.                              string[] parts = index.Split(new char[] { '/' }' StringSplitOptions.None);                                //  Add each part.                              face.Indices.Add(new Index(                                  (parts.Length > 0 && parts[0].Length > 0) ? int.Parse(parts[0]) - 1 : -1'                                  (parts.Length > 1 && parts[1].Length > 0) ? int.Parse(parts[1]) - 1 : -1'                                  (parts.Length > 2 && parts[2].Length > 0) ? int.Parse(parts[2]) - 1 : -1));                          }                                //  Add the face.                          polygon.Faces.Add(face);                            continue;                      }                        if (line.StartsWith("mtllib"))                      {                          // Set current directory in case a relative path to material file is used.                          Environment.CurrentDirectory = Path.GetDirectoryName(path);                            // Load materials file.                          string mtlPath = ReadMaterialValue(line);                          LoadMaterials(mtlPath' scene);                      }                        if (line.StartsWith("usemtl"))                          mtlName = ReadMaterialValue(line);                  }              }
Magic Number,SharpGL.Serialization.Wavefront,ObjFileFormat,C:\repos\dwmkerr_sharpgl\source\SharpGL\Core\SharpGL.Serialization\Wavefront\ObjFileFormat.cs,LoadData,The following statement contains a magic number: using (StreamReader reader = new StreamReader(path))              {                  //  Read line by line.                  string line = null;                  while ((line = reader.ReadLine()) != null)                  {                      //  Skip any comments (lines that start with '#').                      if (line.StartsWith("#"))                          continue;                        //  Do we have a texture coordinate?                      if (line.StartsWith("vt"))                      {                          //  Get the texture coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse texture coordinates.                          float u = float.Parse(values[0]);                          float v = float.Parse(values[1]);                            //  Add the texture coordinate.                          polygon.UVs.Add(new UV(u' v));                            continue;                      }                        //  Do we have a normal coordinate?                      if (line.StartsWith("vn"))                      {                          //  Get the normal coord strings.                          string[] values = line.Substring(3).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse normal coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //  Add the normal.                          polygon.Normals.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a vertex?                      if (line.StartsWith("v"))                      {                          //  Get the vertex coord strings.                          string[] values = line.Substring(2).Split(split' StringSplitOptions.RemoveEmptyEntries);                            //  Parse vertex coordinates.                          float x = float.Parse(values[0]);                          float y = float.Parse(values[1]);                          float z = float.Parse(values[2]);                            //   Add the vertices.                          polygon.Vertices.Add(new Vertex(x' y' z));                            continue;                      }                        //  Do we have a face?                      if (line.StartsWith("f"))                      {                          Face face = new Face();                            if (!String.IsNullOrWhiteSpace(mtlName))                              face.Material = scene.Assets.Where(t => t.Name == mtlName).FirstOrDefault() as Material;                            //  Get the face indices                          string[] indices = line.Substring(2).Split(split'                              StringSplitOptions.RemoveEmptyEntries);                            //  Add each index.                          foreach (var index in indices)                          {                              //  Split the parts.                              string[] parts = index.Split(new char[] { '/' }' StringSplitOptions.None);                                //  Add each part.                              face.Indices.Add(new Index(                                  (parts.Length > 0 && parts[0].Length > 0) ? int.Parse(parts[0]) - 1 : -1'                                  (parts.Length > 1 && parts[1].Length > 0) ? int.Parse(parts[1]) - 1 : -1'                                  (parts.Length > 2 && parts[2].Length > 0) ? int.Parse(parts[2]) - 1 : -1));                          }                                //  Add the face.                          polygon.Faces.Add(face);                            continue;                      }                        if (line.StartsWith("mtllib"))                      {                          // Set current directory in case a relative path to material file is used.                          Environment.CurrentDirectory = Path.GetDirectoryName(path);                            // Load materials file.                          string mtlPath = ReadMaterialValue(line);                          LoadMaterials(mtlPath' scene);                      }                        if (line.StartsWith("usemtl"))                          mtlName = ReadMaterialValue(line);                  }              }
