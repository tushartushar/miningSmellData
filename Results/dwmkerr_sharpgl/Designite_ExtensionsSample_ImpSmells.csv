Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The method has 153 lines of code.
Long Method,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The method has 121 lines of code.
Complex Method,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,Cyclomatic complexity of the method is 8
Complex Method,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,Cyclomatic complexity of the method is 13
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The length of the statement  "                gl.VertexPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 0)); " is 124.
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The length of the statement  "                gl.TexCoordPointer(2' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 12)); " is 127.
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The length of the statement  "                gl.TexCoordPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 56)); " is 127.
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The length of the statement  "                gl.VertexPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 0)); " is 125.
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The length of the statement  "                gl.NormalPointer(OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 44 )); " is 124.
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The length of the statement  "                gl.TexCoordPointer(2' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 12)); " is 128.
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ExtensionsSampleForm)); " is 140.
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The length of the statement  "            this.openGLControl1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 150.
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The length of the statement  "            this.checkBoxDrawBumps.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 155.
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The length of the statement  "            this.checkBoxDrawColor.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 155.
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The length of the statement  "            this.linkLabel1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The length of the statement  "            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The length of the statement  "                vertices[i].position = (new Vertex(1.5f' 0.0f' 0.0f)).GetRotatedZ(i * 360.0f / torusPrecision) + new Vertex(4.0f' 0.0f' 0.0f); " is 126.
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The following statement contains a magic number: if(drawBumps)              {                  //  Bind normal map to texture unit 0                  normalMap.Bind(gl);                  gl.Enable(OpenGL.GL_TEXTURE_2D);                    //  Bind normalisation cube map to texture unit 1                                    //  Extensions: We can use the Extension format' such as below. However in this                  //  case we'll get a warning saying that this particular extension is deprecated                  //  in OpenGL 3.0. However...                  gl.ActiveTextureARB(OpenGL.GL_TEXTURE1_ARB);                  gl.BindTexture(OpenGL.GL_TEXTURE_CUBE_MAP_EXT' normalisationCubeMap);                  gl.Enable(OpenGL.GL_TEXTURE_CUBE_MAP_EXT);                  //  Extensions: ...it's deprecated because it's actually core functionality                  //  in OpenGL 3.0.                  gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //Set vertex arrays for torus                  var vertexHandle = GCHandle.Alloc(torus.Vertices' GCHandleType.Pinned);                  //  Address of TorusVertex.Position                  gl.VertexPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 0));                  gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);                    //Send texture coords for normal map to unit 0                  //  Address of TorusVertex.S                  gl.TexCoordPointer(2' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 12));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                    //Send tangent space light vectors for normalisation to unit 1                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  //  Address of TorusVertex.TangentSpaceLight                  gl.TexCoordPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 56));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE0_ARB);                  vertexHandle.Free();                    //Set up texture environment to do (tex0 dot tex1)*color                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_COMBINE_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE0_RGB_ARB' OpenGL.GL_TEXTURE);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_COMBINE_RGB_ARB' OpenGL.GL_REPLACE);                    gl.ActiveTexture(OpenGL.GL_TEXTURE1_ARB);                    gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_COMBINE_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE0_RGB_ARB' OpenGL.GL_TEXTURE);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_COMBINE_RGB_ARB' OpenGL.GL_DOT3_RGB_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE1_RGB_ARB' OpenGL.GL_PREVIOUS_ARB);                    gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Draw torus                  gl.DrawElements(OpenGL.GL_TRIANGLES' (int)torus.NumIndices' torus.Indices);                    //  Disable textures                  gl.Disable(OpenGL.GL_TEXTURE_2D);                    gl.ActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  gl.Disable(OpenGL.GL_TEXTURE_CUBE_MAP);                  gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Disable vertex arrays                  gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);                    gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                    gl.ClientActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Return to standard modulate texenv                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_MODULATE);              }
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The following statement contains a magic number: if(drawBumps)              {                  //  Bind normal map to texture unit 0                  normalMap.Bind(gl);                  gl.Enable(OpenGL.GL_TEXTURE_2D);                    //  Bind normalisation cube map to texture unit 1                                    //  Extensions: We can use the Extension format' such as below. However in this                  //  case we'll get a warning saying that this particular extension is deprecated                  //  in OpenGL 3.0. However...                  gl.ActiveTextureARB(OpenGL.GL_TEXTURE1_ARB);                  gl.BindTexture(OpenGL.GL_TEXTURE_CUBE_MAP_EXT' normalisationCubeMap);                  gl.Enable(OpenGL.GL_TEXTURE_CUBE_MAP_EXT);                  //  Extensions: ...it's deprecated because it's actually core functionality                  //  in OpenGL 3.0.                  gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //Set vertex arrays for torus                  var vertexHandle = GCHandle.Alloc(torus.Vertices' GCHandleType.Pinned);                  //  Address of TorusVertex.Position                  gl.VertexPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 0));                  gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);                    //Send texture coords for normal map to unit 0                  //  Address of TorusVertex.S                  gl.TexCoordPointer(2' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 12));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                    //Send tangent space light vectors for normalisation to unit 1                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  //  Address of TorusVertex.TangentSpaceLight                  gl.TexCoordPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 56));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE0_ARB);                  vertexHandle.Free();                    //Set up texture environment to do (tex0 dot tex1)*color                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_COMBINE_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE0_RGB_ARB' OpenGL.GL_TEXTURE);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_COMBINE_RGB_ARB' OpenGL.GL_REPLACE);                    gl.ActiveTexture(OpenGL.GL_TEXTURE1_ARB);                    gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_COMBINE_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE0_RGB_ARB' OpenGL.GL_TEXTURE);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_COMBINE_RGB_ARB' OpenGL.GL_DOT3_RGB_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE1_RGB_ARB' OpenGL.GL_PREVIOUS_ARB);                    gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Draw torus                  gl.DrawElements(OpenGL.GL_TRIANGLES' (int)torus.NumIndices' torus.Indices);                    //  Disable textures                  gl.Disable(OpenGL.GL_TEXTURE_2D);                    gl.ActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  gl.Disable(OpenGL.GL_TEXTURE_CUBE_MAP);                  gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Disable vertex arrays                  gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);                    gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                    gl.ClientActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Return to standard modulate texenv                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_MODULATE);              }
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The following statement contains a magic number: if(drawBumps)              {                  //  Bind normal map to texture unit 0                  normalMap.Bind(gl);                  gl.Enable(OpenGL.GL_TEXTURE_2D);                    //  Bind normalisation cube map to texture unit 1                                    //  Extensions: We can use the Extension format' such as below. However in this                  //  case we'll get a warning saying that this particular extension is deprecated                  //  in OpenGL 3.0. However...                  gl.ActiveTextureARB(OpenGL.GL_TEXTURE1_ARB);                  gl.BindTexture(OpenGL.GL_TEXTURE_CUBE_MAP_EXT' normalisationCubeMap);                  gl.Enable(OpenGL.GL_TEXTURE_CUBE_MAP_EXT);                  //  Extensions: ...it's deprecated because it's actually core functionality                  //  in OpenGL 3.0.                  gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //Set vertex arrays for torus                  var vertexHandle = GCHandle.Alloc(torus.Vertices' GCHandleType.Pinned);                  //  Address of TorusVertex.Position                  gl.VertexPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 0));                  gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);                    //Send texture coords for normal map to unit 0                  //  Address of TorusVertex.S                  gl.TexCoordPointer(2' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 12));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                    //Send tangent space light vectors for normalisation to unit 1                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  //  Address of TorusVertex.TangentSpaceLight                  gl.TexCoordPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 56));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE0_ARB);                  vertexHandle.Free();                    //Set up texture environment to do (tex0 dot tex1)*color                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_COMBINE_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE0_RGB_ARB' OpenGL.GL_TEXTURE);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_COMBINE_RGB_ARB' OpenGL.GL_REPLACE);                    gl.ActiveTexture(OpenGL.GL_TEXTURE1_ARB);                    gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_COMBINE_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE0_RGB_ARB' OpenGL.GL_TEXTURE);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_COMBINE_RGB_ARB' OpenGL.GL_DOT3_RGB_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE1_RGB_ARB' OpenGL.GL_PREVIOUS_ARB);                    gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Draw torus                  gl.DrawElements(OpenGL.GL_TRIANGLES' (int)torus.NumIndices' torus.Indices);                    //  Disable textures                  gl.Disable(OpenGL.GL_TEXTURE_2D);                    gl.ActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  gl.Disable(OpenGL.GL_TEXTURE_CUBE_MAP);                  gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Disable vertex arrays                  gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);                    gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                    gl.ClientActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Return to standard modulate texenv                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_MODULATE);              }
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The following statement contains a magic number: if(drawBumps)              {                  //  Bind normal map to texture unit 0                  normalMap.Bind(gl);                  gl.Enable(OpenGL.GL_TEXTURE_2D);                    //  Bind normalisation cube map to texture unit 1                                    //  Extensions: We can use the Extension format' such as below. However in this                  //  case we'll get a warning saying that this particular extension is deprecated                  //  in OpenGL 3.0. However...                  gl.ActiveTextureARB(OpenGL.GL_TEXTURE1_ARB);                  gl.BindTexture(OpenGL.GL_TEXTURE_CUBE_MAP_EXT' normalisationCubeMap);                  gl.Enable(OpenGL.GL_TEXTURE_CUBE_MAP_EXT);                  //  Extensions: ...it's deprecated because it's actually core functionality                  //  in OpenGL 3.0.                  gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //Set vertex arrays for torus                  var vertexHandle = GCHandle.Alloc(torus.Vertices' GCHandleType.Pinned);                  //  Address of TorusVertex.Position                  gl.VertexPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 0));                  gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);                    //Send texture coords for normal map to unit 0                  //  Address of TorusVertex.S                  gl.TexCoordPointer(2' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 12));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                    //Send tangent space light vectors for normalisation to unit 1                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  //  Address of TorusVertex.TangentSpaceLight                  gl.TexCoordPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 56));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE0_ARB);                  vertexHandle.Free();                    //Set up texture environment to do (tex0 dot tex1)*color                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_COMBINE_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE0_RGB_ARB' OpenGL.GL_TEXTURE);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_COMBINE_RGB_ARB' OpenGL.GL_REPLACE);                    gl.ActiveTexture(OpenGL.GL_TEXTURE1_ARB);                    gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_COMBINE_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE0_RGB_ARB' OpenGL.GL_TEXTURE);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_COMBINE_RGB_ARB' OpenGL.GL_DOT3_RGB_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE1_RGB_ARB' OpenGL.GL_PREVIOUS_ARB);                    gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Draw torus                  gl.DrawElements(OpenGL.GL_TRIANGLES' (int)torus.NumIndices' torus.Indices);                    //  Disable textures                  gl.Disable(OpenGL.GL_TEXTURE_2D);                    gl.ActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  gl.Disable(OpenGL.GL_TEXTURE_CUBE_MAP);                  gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Disable vertex arrays                  gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);                    gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                    gl.ClientActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Return to standard modulate texenv                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_MODULATE);              }
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The following statement contains a magic number: if(drawBumps)              {                  //  Bind normal map to texture unit 0                  normalMap.Bind(gl);                  gl.Enable(OpenGL.GL_TEXTURE_2D);                    //  Bind normalisation cube map to texture unit 1                                    //  Extensions: We can use the Extension format' such as below. However in this                  //  case we'll get a warning saying that this particular extension is deprecated                  //  in OpenGL 3.0. However...                  gl.ActiveTextureARB(OpenGL.GL_TEXTURE1_ARB);                  gl.BindTexture(OpenGL.GL_TEXTURE_CUBE_MAP_EXT' normalisationCubeMap);                  gl.Enable(OpenGL.GL_TEXTURE_CUBE_MAP_EXT);                  //  Extensions: ...it's deprecated because it's actually core functionality                  //  in OpenGL 3.0.                  gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //Set vertex arrays for torus                  var vertexHandle = GCHandle.Alloc(torus.Vertices' GCHandleType.Pinned);                  //  Address of TorusVertex.Position                  gl.VertexPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 0));                  gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);                    //Send texture coords for normal map to unit 0                  //  Address of TorusVertex.S                  gl.TexCoordPointer(2' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 12));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                    //Send tangent space light vectors for normalisation to unit 1                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  //  Address of TorusVertex.TangentSpaceLight                  gl.TexCoordPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(vertexHandle.AddrOfPinnedObject()' 56));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE0_ARB);                  vertexHandle.Free();                    //Set up texture environment to do (tex0 dot tex1)*color                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_COMBINE_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE0_RGB_ARB' OpenGL.GL_TEXTURE);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_COMBINE_RGB_ARB' OpenGL.GL_REPLACE);                    gl.ActiveTexture(OpenGL.GL_TEXTURE1_ARB);                    gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_COMBINE_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE0_RGB_ARB' OpenGL.GL_TEXTURE);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_COMBINE_RGB_ARB' OpenGL.GL_DOT3_RGB_ARB);                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_SOURCE1_RGB_ARB' OpenGL.GL_PREVIOUS_ARB);                    gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Draw torus                  gl.DrawElements(OpenGL.GL_TRIANGLES' (int)torus.NumIndices' torus.Indices);                    //  Disable textures                  gl.Disable(OpenGL.GL_TEXTURE_2D);                    gl.ActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  gl.Disable(OpenGL.GL_TEXTURE_CUBE_MAP);                  gl.ActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Disable vertex arrays                  gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);                    gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                    gl.ClientActiveTexture(OpenGL.GL_TEXTURE1_ARB);                  gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  gl.ClientActiveTexture(OpenGL.GL_TEXTURE0_ARB);                    //  Return to standard modulate texenv                  gl.TexEnv(OpenGL.GL_TEXTURE_ENV' OpenGL.GL_TEXTURE_ENV_MODE' OpenGL.GL_MODULATE);              }
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The following statement contains a magic number: if(drawColor)              {                  if(!drawBumps)                  {                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_POSITION' objectLightPosition);                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_DIFFUSE' white);                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_AMBIENT' black);                      gl.LightModel(OpenGL.GL_LIGHT_MODEL_AMBIENT' black);                      gl.Enable(OpenGL.GL_LIGHT1);                      gl.Enable(OpenGL.GL_LIGHTING);                        gl.Material(OpenGL.GL_FRONT' OpenGL.GL_DIFFUSE' white);                  }                    //  Bind decal texture                  decalImage.Bind(gl);                  gl.Enable(OpenGL.GL_TEXTURE_2D);                                    //  Set vertex arrays for torus                  var torusVertices = GCHandle.Alloc(torus.Vertices' GCHandleType.Pinned);                  //  Address of TorusVertex.Position                  gl.VertexPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 0));                  gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);                    //  Address of TorusVertex.Normal                  gl.NormalPointer(OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 44 ));                  gl.EnableClientState(OpenGL.GL_NORMAL_ARRAY);                    //  Address of TorusVertex.S                  gl.TexCoordPointer(2' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 12));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  torusVertices.Free();                                    //  Draw torus                  gl.DrawElements(OpenGL.GL_TRIANGLES' (int)torus.NumIndices' torus.Indices);                    if(!drawBumps)                      gl.Disable(OpenGL.GL_LIGHTING);                    //  Disable texture                  gl.Disable(OpenGL.GL_TEXTURE_2D);                    //  Disable vertex arrays                  gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);                  gl.DisableClientState(OpenGL.GL_NORMAL_ARRAY);                  gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);              }
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The following statement contains a magic number: if(drawColor)              {                  if(!drawBumps)                  {                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_POSITION' objectLightPosition);                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_DIFFUSE' white);                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_AMBIENT' black);                      gl.LightModel(OpenGL.GL_LIGHT_MODEL_AMBIENT' black);                      gl.Enable(OpenGL.GL_LIGHT1);                      gl.Enable(OpenGL.GL_LIGHTING);                        gl.Material(OpenGL.GL_FRONT' OpenGL.GL_DIFFUSE' white);                  }                    //  Bind decal texture                  decalImage.Bind(gl);                  gl.Enable(OpenGL.GL_TEXTURE_2D);                                    //  Set vertex arrays for torus                  var torusVertices = GCHandle.Alloc(torus.Vertices' GCHandleType.Pinned);                  //  Address of TorusVertex.Position                  gl.VertexPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 0));                  gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);                    //  Address of TorusVertex.Normal                  gl.NormalPointer(OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 44 ));                  gl.EnableClientState(OpenGL.GL_NORMAL_ARRAY);                    //  Address of TorusVertex.S                  gl.TexCoordPointer(2' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 12));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  torusVertices.Free();                                    //  Draw torus                  gl.DrawElements(OpenGL.GL_TRIANGLES' (int)torus.NumIndices' torus.Indices);                    if(!drawBumps)                      gl.Disable(OpenGL.GL_LIGHTING);                    //  Disable texture                  gl.Disable(OpenGL.GL_TEXTURE_2D);                    //  Disable vertex arrays                  gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);                  gl.DisableClientState(OpenGL.GL_NORMAL_ARRAY);                  gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);              }
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The following statement contains a magic number: if(drawColor)              {                  if(!drawBumps)                  {                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_POSITION' objectLightPosition);                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_DIFFUSE' white);                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_AMBIENT' black);                      gl.LightModel(OpenGL.GL_LIGHT_MODEL_AMBIENT' black);                      gl.Enable(OpenGL.GL_LIGHT1);                      gl.Enable(OpenGL.GL_LIGHTING);                        gl.Material(OpenGL.GL_FRONT' OpenGL.GL_DIFFUSE' white);                  }                    //  Bind decal texture                  decalImage.Bind(gl);                  gl.Enable(OpenGL.GL_TEXTURE_2D);                                    //  Set vertex arrays for torus                  var torusVertices = GCHandle.Alloc(torus.Vertices' GCHandleType.Pinned);                  //  Address of TorusVertex.Position                  gl.VertexPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 0));                  gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);                    //  Address of TorusVertex.Normal                  gl.NormalPointer(OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 44 ));                  gl.EnableClientState(OpenGL.GL_NORMAL_ARRAY);                    //  Address of TorusVertex.S                  gl.TexCoordPointer(2' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 12));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  torusVertices.Free();                                    //  Draw torus                  gl.DrawElements(OpenGL.GL_TRIANGLES' (int)torus.NumIndices' torus.Indices);                    if(!drawBumps)                      gl.Disable(OpenGL.GL_LIGHTING);                    //  Disable texture                  gl.Disable(OpenGL.GL_TEXTURE_2D);                    //  Disable vertex arrays                  gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);                  gl.DisableClientState(OpenGL.GL_NORMAL_ARRAY);                  gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);              }
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_OpenGLDraw,The following statement contains a magic number: if(drawColor)              {                  if(!drawBumps)                  {                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_POSITION' objectLightPosition);                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_DIFFUSE' white);                      gl.Light(OpenGL.GL_LIGHT1' OpenGL.GL_AMBIENT' black);                      gl.LightModel(OpenGL.GL_LIGHT_MODEL_AMBIENT' black);                      gl.Enable(OpenGL.GL_LIGHT1);                      gl.Enable(OpenGL.GL_LIGHTING);                        gl.Material(OpenGL.GL_FRONT' OpenGL.GL_DIFFUSE' white);                  }                    //  Bind decal texture                  decalImage.Bind(gl);                  gl.Enable(OpenGL.GL_TEXTURE_2D);                                    //  Set vertex arrays for torus                  var torusVertices = GCHandle.Alloc(torus.Vertices' GCHandleType.Pinned);                  //  Address of TorusVertex.Position                  gl.VertexPointer(3' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 0));                  gl.EnableClientState(OpenGL.GL_VERTEX_ARRAY);                    //  Address of TorusVertex.Normal                  gl.NormalPointer(OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 44 ));                  gl.EnableClientState(OpenGL.GL_NORMAL_ARRAY);                    //  Address of TorusVertex.S                  gl.TexCoordPointer(2' OpenGL.GL_FLOAT' Marshal.SizeOf(typeof(TorusVertex))' IntPtr.Add(torusVertices.AddrOfPinnedObject()' 12));                  gl.EnableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);                  torusVertices.Free();                                    //  Draw torus                  gl.DrawElements(OpenGL.GL_TRIANGLES' (int)torus.NumIndices' torus.Indices);                    if(!drawBumps)                      gl.Disable(OpenGL.GL_LIGHTING);                    //  Disable texture                  gl.Disable(OpenGL.GL_TEXTURE_2D);                    //  Disable vertex arrays                  gl.DisableClientState(OpenGL.GL_VERTEX_ARRAY);                  gl.DisableClientState(OpenGL.GL_NORMAL_ARRAY);                  gl.DisableClientState(OpenGL.GL_TEXTURE_COORD_ARRAY);              }
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_Resized,The following statement contains a magic number: gl.Perspective(45' (double)Width / (double)Height' 1.0' 100.0);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,openGLControl1_Resized,The following statement contains a magic number: gl.Perspective(45' (double)Width / (double)Height' 1.0' 100.0);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: byte[] data = new byte[32 * 32 * 3];
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: byte[] data = new byte[32 * 32 * 3];
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: byte[] data = new byte[32 * 32 * 3];
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: int size = 32;
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_POSITIVE_X'                  0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_POSITIVE_X'                  0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_NEGATIVE_X'                              0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_NEGATIVE_X'                              0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_POSITIVE_Y'                              0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_POSITIVE_Y'                              0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y'                              0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y'                              0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_POSITIVE_Z'                              0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_POSITIVE_Z'                              0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z'                              0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,GenerateNormalisationCubeMap,The following statement contains a magic number: gl.TexImage2D(OpenGL.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z'                              0' OpenGL.GL_RGBA8' 32' 32' 0' OpenGL.GL_RGB' OpenGL.GL_UNSIGNED_BYTE' data);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.openGLControl1.FrameRate = 20;
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.openGLControl1.Location = new System.Drawing.Point(12' 12);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.openGLControl1.Location = new System.Drawing.Point(12' 12);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.openGLControl1.Size = new System.Drawing.Size(740' 364);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.openGLControl1.Size = new System.Drawing.Size(740' 364);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDrawBumps.Location = new System.Drawing.Point(96' 395);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDrawBumps.Location = new System.Drawing.Point(96' 395);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDrawBumps.Size = new System.Drawing.Size(86' 17);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDrawBumps.Size = new System.Drawing.Size(86' 17);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDrawColor.Location = new System.Drawing.Point(12' 395);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDrawColor.Location = new System.Drawing.Point(12' 395);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDrawColor.Size = new System.Drawing.Size(78' 17);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDrawColor.Size = new System.Drawing.Size(78' 17);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Location = new System.Drawing.Point(424' 399);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Location = new System.Drawing.Point(424' 399);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Size = new System.Drawing.Size(328' 13);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.Size = new System.Drawing.Size(328' 13);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel1.TabIndex = 2;
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(345' 399);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(345' 399);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(73' 13);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(73' 13);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 3;
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(764' 424);
Magic Number,ExtensionsSample,ExtensionsSampleForm,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\ExtensionsSampleForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(764' 424);
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: numIndices=2*torusPrecision*torusPrecision*3;
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: numIndices=2*torusPrecision*torusPrecision*3;
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,Torus,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\Torus.cs,InitialiseTorus,The following statement contains a magic number: for (uint ring = 0; ring < torusPrecision; ring++)              {                  for (uint i = 0; i < torusPrecision; i++)                  {                      indices[((ring * torusPrecision + i) * 2) * 3 + 0] = ring * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2) * 3 + 2] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 0] = ring * (torusPrecision + 1) + i + 1;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 1] = (ring + 1) * (torusPrecision + 1) + i;                      indices[((ring * torusPrecision + i) * 2 + 1) * 3 + 2] = (ring + 1) * (torusPrecision + 1) + i + 1;                  }              }
Magic Number,ExtensionsSample,VertexExtensions,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\VertexExtensions.cs,GetRotatedX,The following statement contains a magic number: float sinAngle = (float)Math.Sin(Math.PI * angle / 180);
Magic Number,ExtensionsSample,VertexExtensions,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\VertexExtensions.cs,GetRotatedX,The following statement contains a magic number: float cosAngle = (float)Math.Cos(Math.PI * angle / 180);
Magic Number,ExtensionsSample,VertexExtensions,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\VertexExtensions.cs,GetRotatedY,The following statement contains a magic number: float sinAngle = (float)Math.Sin(Math.PI * angle / 180);
Magic Number,ExtensionsSample,VertexExtensions,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\VertexExtensions.cs,GetRotatedY,The following statement contains a magic number: float cosAngle = (float)Math.Cos(Math.PI * angle / 180);
Magic Number,ExtensionsSample,VertexExtensions,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\VertexExtensions.cs,GetRotatedZ,The following statement contains a magic number: float sinAngle = (float)Math.Sin(Math.PI * angle / 180);
Magic Number,ExtensionsSample,VertexExtensions,C:\repos\dwmkerr_sharpgl\source\SharpGL\Samples\WinForms\ExtensionsSample\VertexExtensions.cs,GetRotatedZ,The following statement contains a magic number: float cosAngle = (float)Math.Cos(Math.PI * angle / 180);
