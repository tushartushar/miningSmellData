Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Route53DDNSLib.accessor,Route53UpdateARecordForHostedZoneAccessor,C:\repos\dreamins_Route53DDNS\Route53DDNSLib\accessor\Route53UpdateARecordForHostedZoneAccessor.cs,Route53UpdateARecordForHostedZoneAccessor,The method has 5 parameters. Parameters: client' hostedZone' oldIP' myIP' domainName
Long Statement,Route53DDNSLib.accessor,Route53AIPForHostedZoneAccessor,C:\repos\dreamins_Route53DDNS\Route53DDNSLib\accessor\Route53AIPForHostedZoneAccessor.cs,get,The length of the statement  "                throw new ConfigurationException("Cannot get previous IP from Route53. Make sure you have one A record in your hosted zone!"); " is 126.
Long Statement,Route53DDNSLib.accessor,Route53UpdateARecordForHostedZoneAccessor,C:\repos\dreamins_Route53DDNS\Route53DDNSLib\accessor\Route53UpdateARecordForHostedZoneAccessor.cs,get,The length of the statement  "                throw new ConfigurationException("Cannot get previous IP from Route53. Make sure you have one A record in your hosted zone!"); " is 126.
Long Statement,Route53DDNSLib,Runner,C:\repos\dreamins_Route53DDNS\Route53DDNSLib\Runner.cs,doIt,The length of the statement  "                Route53Client client = new DefaultRoute53Client(localOptions.AWSOptions.AWSAccessKey' localOptions.AWSOptions.AWSSecretKey' localOptions.AWSOptions.AWSRegion); " is 159.
Long Statement,Route53DDNSLib,Runner,C:\repos\dreamins_Route53DDNS\Route53DDNSLib\Runner.cs,doIt,The length of the statement  "                Route53AIPForHostedZoneAccessor accessor = new Route53AIPForHostedZoneAccessor(client' localOptions.AWSOptions.HostedZoneId' localOptions.GeneralOptions.DomainName); " is 165.
Long Statement,Route53DDNSLib,Runner,C:\repos\dreamins_Route53DDNS\Route53DDNSLib\Runner.cs,doIt,The length of the statement  "                new Route53UpdateARecordForHostedZoneAccessor(client' localOptions.AWSOptions.HostedZoneId' oldIP' myIP' localOptions.GeneralOptions.DomainName).get(); " is 151.
Magic Number,Route53DDNSLib.accessor,GetExternalIPAccessor,C:\repos\dreamins_Route53DDNS\Route53DDNSLib\accessor\ExternalIPAccessor.cs,doHttpRequest,The following statement contains a magic number: byte[] buf = new byte[8192];
Magic Number,Route53DDNSLib,Runner,C:\repos\dreamins_Route53DDNS\Route53DDNSLib\Runner.cs,start,The following statement contains a magic number: const int MILLIS_IN_SEC = 1000;
Magic Number,Route53DDNSLib,Runner,C:\repos\dreamins_Route53DDNS\Route53DDNSLib\Runner.cs,start,The following statement contains a magic number: try              {                  opts = Options.loadFromConfig();                  long initialDelaySec = 0;                  if (opts.GeneralOptions.HasInitialDelay)                  {                      // calculate start delay from somewhat random' but stable for given client source                      System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create();                      byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(opts.AWSOptions.AWSAccessKey);                      byte[] hashBytes = md5.ComputeHash(inputBytes);                      initialDelaySec = hashBytes[0] % opts.GeneralOptions.TimerPeriodSec;                      logger.Info("Sleeping for initial delay of " + initialDelaySec + " seconds ");                  }                  else                  {                      logger.Warn("Initial delay is disabled. This is not recommended!");                  }                    long periodSec = opts.GeneralOptions.TimerPeriodSec < 30 ? 30 : opts.GeneralOptions.TimerPeriodSec;                  timer = new Timer(this.doIt' null' initialDelaySec * MILLIS_IN_SEC' periodSec * MILLIS_IN_SEC);                  running = true;              }              catch (Route53DDNSException ex)              {                  logger.Error("Caught an exception' cannot start runner"' ex);              }
Magic Number,Route53DDNSLib,Runner,C:\repos\dreamins_Route53DDNS\Route53DDNSLib\Runner.cs,start,The following statement contains a magic number: try              {                  opts = Options.loadFromConfig();                  long initialDelaySec = 0;                  if (opts.GeneralOptions.HasInitialDelay)                  {                      // calculate start delay from somewhat random' but stable for given client source                      System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create();                      byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(opts.AWSOptions.AWSAccessKey);                      byte[] hashBytes = md5.ComputeHash(inputBytes);                      initialDelaySec = hashBytes[0] % opts.GeneralOptions.TimerPeriodSec;                      logger.Info("Sleeping for initial delay of " + initialDelaySec + " seconds ");                  }                  else                  {                      logger.Warn("Initial delay is disabled. This is not recommended!");                  }                    long periodSec = opts.GeneralOptions.TimerPeriodSec < 30 ? 30 : opts.GeneralOptions.TimerPeriodSec;                  timer = new Timer(this.doIt' null' initialDelaySec * MILLIS_IN_SEC' periodSec * MILLIS_IN_SEC);                  running = true;              }              catch (Route53DDNSException ex)              {                  logger.Error("Caught an exception' cannot start runner"' ex);              }
Magic Number,Route53DDNSLib.type,Options,C:\repos\dreamins_Route53DDNS\Route53DDNSLib\type\Options.cs,loadFromConfig,The following statement contains a magic number: lock (lockObject)              {                  logger.Info("Loading configuration");                  GeneralOptions generalOpts = null;                  AWSOptions awsOpts = null;                  try                  {                      generalOpts = GeneralOptions.load();                      awsOpts = AWSOptions.load();                      if (!String.IsNullOrEmpty(generalOpts.DomainName)                           && generalOpts.DomainName[generalOpts.DomainName.Length - 1] != '.')                      {                          logger.Debug("Forcefully terminating domain name with dot.");                          generalOpts.DomainName = generalOpts.DomainName + ".";                      }                  }                  catch (FileNotFoundException)                  {                      if (generalOpts == null)                      {                          generalOpts = new GeneralOptions();                          generalOpts.ExternalIPNeeded = true;                          generalOpts.HasInitialDelay = true;                          generalOpts.IPProviders = new List<IPProvider>();                          generalOpts.RunOnStart = false;                          generalOpts.TimerPeriodSec = 300;                      }                        if (awsOpts == null)                      {                          awsOpts = new AWSOptions();                          awsOpts.AWSAccessKey = String.Empty;                          awsOpts.AWSSecretKey = String.Empty;                          awsOpts.HostedZoneId = String.Empty;                      }                  }                  return new Options(generalOpts' awsOpts);              }
