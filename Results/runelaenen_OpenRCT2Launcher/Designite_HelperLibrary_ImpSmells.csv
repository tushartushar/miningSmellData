Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,Cyclomatic complexity of the method is 22
Complex Method,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,InsertLine,Cyclomatic complexity of the method is 8
Complex Method,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,ReadPropertyValue,Cyclomatic complexity of the method is 10
Complex Method,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,ReadEscapedCharacter,Cyclomatic complexity of the method is 10
Complex Method,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,Cyclomatic complexity of the method is 12
Long Parameter List,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,AdjustTokenPrivileges,The method has 6 parameters.
Long Parameter List,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,CreateFile,The method has 7 parameters.
Long Parameter List,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,DeviceIoControl,The method has 8 parameters.
Long Statement,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,GetPropertyInt32,The length of the statement  "	return Int32.TryParse (properties [propertyName].Value' NumberStyles.Any' CultureInfo.InvariantCulture' out result) ? result : defaultValue; " is 140.
Long Statement,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,GetPropertyDouble,The length of the statement  "	return Double.TryParse (properties [propertyName].Value' NumberStyles.Any' CultureInfo.InvariantCulture' out result) ? result : defaultValue; " is 141.
Long Statement,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,Main,The length of the statement  "		if (!parameters.ContainsKey (CreateLinkPathArgumentTitle) || !parameters.ContainsKey (CreateDestinationArgumentTitle) || !parameters.ContainsKey (CreateLinkTypeArgumentTitle) || !Enum.TryParse (parameters [CreateLinkTypeArgumentTitle]' out type)) { " is 248.
Long Statement,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,Main,The length of the statement  "		var success = CreateSymbolicLink (parameters [CreateLinkPathArgumentTitle]' parameters [CreateDestinationArgumentTitle]' type); " is 127.
Long Statement,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The length of the statement  "	success = AdjustTokenPrivileges (tokenHandle' false' ref tokenPrivileges' Marshal.SizeOf (tokenPrivileges)' IntPtr.Zero' IntPtr.Zero); " is 134.
Long Statement,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The length of the statement  "	var fileHandle = CreateFile (linkPath' FileAccess.Read' FileShare.ReadWrite' 0' FileMode.Open' FileFlagOpenReparsePoint | FileFlagBackupSemantics' IntPtr.Zero); " is 160.
Long Statement,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The length of the statement  "	success = DeviceIoControl (fileHandle' ControlCode' IntPtr.Zero' 0' out buffer' (16 * 1024)' out bytesReturned' IntPtr.Zero); " is 125.
Complex Conditional,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,Main,The conditional expression  "!parameters.ContainsKey (CreateLinkPathArgumentTitle) || !parameters.ContainsKey (CreateDestinationArgumentTitle) || !parameters.ContainsKey (CreateLinkTypeArgumentTitle) || !Enum.TryParse (parameters [CreateLinkTypeArgumentTitle]' out type)"  is complex.
Empty Catch Block,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,Parse,The method has an empty catch block.
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: foreach (string Txt in args) {  	// Look for new parameters (-'/ or --) and a  	// possible enclosed value (=':)  	var parts = Spliter.Split (Txt' 3);  	switch (parts.Length) {  	// Found a value (for the last parameter   	// found (space separator))  	case 1:  		if (parameter != null) {  			if (!ContainsKey (parameter)) {  				parts [0] = Remover.Replace (parts [0]' "$1");  				Add (parameter' parts [0]);  			}  			parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		// Remove possible enclosing characters ("'')  		if (!ContainsKey (parameter)) {  			parts [2] = Remover.Replace (parts [2]' "$1");  			Add (parameter' parts [2]);  		}  		parameter = null;  		break;  	}  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: foreach (string Txt in args) {  	// Look for new parameters (-'/ or --) and a  	// possible enclosed value (=':)  	var parts = Spliter.Split (Txt' 3);  	switch (parts.Length) {  	// Found a value (for the last parameter   	// found (space separator))  	case 1:  		if (parameter != null) {  			if (!ContainsKey (parameter)) {  				parts [0] = Remover.Replace (parts [0]' "$1");  				Add (parameter' parts [0]);  			}  			parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		// Remove possible enclosing characters ("'')  		if (!ContainsKey (parameter)) {  			parts [2] = Remover.Replace (parts [2]' "$1");  			Add (parameter' parts [2]);  		}  		parameter = null;  		break;  	}  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: foreach (string Txt in args) {  	// Look for new parameters (-'/ or --) and a  	// possible enclosed value (=':)  	var parts = Spliter.Split (Txt' 3);  	switch (parts.Length) {  	// Found a value (for the last parameter   	// found (space separator))  	case 1:  		if (parameter != null) {  			if (!ContainsKey (parameter)) {  				parts [0] = Remover.Replace (parts [0]' "$1");  				Add (parameter' parts [0]);  			}  			parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		// Remove possible enclosing characters ("'')  		if (!ContainsKey (parameter)) {  			parts [2] = Remover.Replace (parts [2]' "$1");  			Add (parameter' parts [2]);  		}  		parameter = null;  		break;  	}  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: foreach (string Txt in args) {  	// Look for new parameters (-'/ or --) and a  	// possible enclosed value (=':)  	var parts = Spliter.Split (Txt' 3);  	switch (parts.Length) {  	// Found a value (for the last parameter   	// found (space separator))  	case 1:  		if (parameter != null) {  			if (!ContainsKey (parameter)) {  				parts [0] = Remover.Replace (parts [0]' "$1");  				Add (parameter' parts [0]);  			}  			parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		// Remove possible enclosing characters ("'')  		if (!ContainsKey (parameter)) {  			parts [2] = Remover.Replace (parts [2]' "$1");  			Add (parameter' parts [2]);  		}  		parameter = null;  		break;  	}  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: foreach (string Txt in args) {  	// Look for new parameters (-'/ or --) and a  	// possible enclosed value (=':)  	var parts = Spliter.Split (Txt' 3);  	switch (parts.Length) {  	// Found a value (for the last parameter   	// found (space separator))  	case 1:  		if (parameter != null) {  			if (!ContainsKey (parameter)) {  				parts [0] = Remover.Replace (parts [0]' "$1");  				Add (parameter' parts [0]);  			}  			parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		// Remove possible enclosing characters ("'')  		if (!ContainsKey (parameter)) {  			parts [2] = Remover.Replace (parts [2]' "$1");  			Add (parameter' parts [2]);  		}  		parameter = null;  		break;  	}  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: foreach (string Txt in args) {  	// Look for new parameters (-'/ or --) and a  	// possible enclosed value (=':)  	var parts = Spliter.Split (Txt' 3);  	switch (parts.Length) {  	// Found a value (for the last parameter   	// found (space separator))  	case 1:  		if (parameter != null) {  			if (!ContainsKey (parameter)) {  				parts [0] = Remover.Replace (parts [0]' "$1");  				Add (parameter' parts [0]);  			}  			parameter = null;  		}  		// else Error: no parameter waiting for a value (skipped)  		break;  	// Found just a parameter  	case 2:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		break;  	// Parameter with enclosed value  	case 3:  		// The last parameter is still waiting.   		// With no value' set it to true.  		if (parameter != null) {  			if (!ContainsKey (parameter))  				Add (parameter' "true");  		}  		parameter = parts [1];  		// Remove possible enclosing characters ("'')  		if (!ContainsKey (parameter)) {  			parts [2] = Remover.Replace (parts [2]' "$1");  			Add (parameter' parts [2]);  		}  		parameter = null;  		break;  	}  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: switch (parts.Length) {  // Found a value (for the last parameter   // found (space separator))  case 1:  	if (parameter != null) {  		if (!ContainsKey (parameter)) {  			parts [0] = Remover.Replace (parts [0]' "$1");  			Add (parameter' parts [0]);  		}  		parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	// Remove possible enclosing characters ("'')  	if (!ContainsKey (parameter)) {  		parts [2] = Remover.Replace (parts [2]' "$1");  		Add (parameter' parts [2]);  	}  	parameter = null;  	break;  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: switch (parts.Length) {  // Found a value (for the last parameter   // found (space separator))  case 1:  	if (parameter != null) {  		if (!ContainsKey (parameter)) {  			parts [0] = Remover.Replace (parts [0]' "$1");  			Add (parameter' parts [0]);  		}  		parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	// Remove possible enclosing characters ("'')  	if (!ContainsKey (parameter)) {  		parts [2] = Remover.Replace (parts [2]' "$1");  		Add (parameter' parts [2]);  	}  	parameter = null;  	break;  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: switch (parts.Length) {  // Found a value (for the last parameter   // found (space separator))  case 1:  	if (parameter != null) {  		if (!ContainsKey (parameter)) {  			parts [0] = Remover.Replace (parts [0]' "$1");  			Add (parameter' parts [0]);  		}  		parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	// Remove possible enclosing characters ("'')  	if (!ContainsKey (parameter)) {  		parts [2] = Remover.Replace (parts [2]' "$1");  		Add (parameter' parts [2]);  	}  	parameter = null;  	break;  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: switch (parts.Length) {  // Found a value (for the last parameter   // found (space separator))  case 1:  	if (parameter != null) {  		if (!ContainsKey (parameter)) {  			parts [0] = Remover.Replace (parts [0]' "$1");  			Add (parameter' parts [0]);  		}  		parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	// Remove possible enclosing characters ("'')  	if (!ContainsKey (parameter)) {  		parts [2] = Remover.Replace (parts [2]' "$1");  		Add (parameter' parts [2]);  	}  	parameter = null;  	break;  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: switch (parts.Length) {  // Found a value (for the last parameter   // found (space separator))  case 1:  	if (parameter != null) {  		if (!ContainsKey (parameter)) {  			parts [0] = Remover.Replace (parts [0]' "$1");  			Add (parameter' parts [0]);  		}  		parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	// Remove possible enclosing characters ("'')  	if (!ContainsKey (parameter)) {  		parts [2] = Remover.Replace (parts [2]' "$1");  		Add (parameter' parts [2]);  	}  	parameter = null;  	break;  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: if (!ContainsKey (parameter)) {  	parts [2] = Remover.Replace (parts [2]' "$1");  	Add (parameter' parts [2]);  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: if (!ContainsKey (parameter)) {  	parts [2] = Remover.Replace (parts [2]' "$1");  	Add (parameter' parts [2]);  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: if (!ContainsKey (parameter)) {  	parts [2] = Remover.Replace (parts [2]' "$1");  	Add (parameter' parts [2]);  }  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: parts [2] = Remover.Replace (parts [2]' "$1");  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: parts [2] = Remover.Replace (parts [2]' "$1");  
Magic Number,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following statement contains a magic number: Add (parameter' parts [2]);  
Magic Number,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,ReadEscapedCharacter,The following statement contains a magic number: switch (c) {  case '0':  	return '\0';  case 't':  	return '\t';  case 'r':  	return '\r';  case 'n':  	return '\n';  case 'x':  	char[] hexCode = new char[4];  	if (reader.ReadBlock (hexCode' 0' 4) != 4)  		throw new Exception ("Wrong format for escaped unicode character.");  	return (char)Int32.Parse (new string (hexCode)' NumberStyles.AllowHexSpecifier);  default:  	return c;  }  
Magic Number,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,ReadEscapedCharacter,The following statement contains a magic number: switch (c) {  case '0':  	return '\0';  case 't':  	return '\t';  case 'r':  	return '\r';  case 'n':  	return '\n';  case 'x':  	char[] hexCode = new char[4];  	if (reader.ReadBlock (hexCode' 0' 4) != 4)  		throw new Exception ("Wrong format for escaped unicode character.");  	return (char)Int32.Parse (new string (hexCode)' NumberStyles.AllowHexSpecifier);  default:  	return c;  }  
Magic Number,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,ReadEscapedCharacter,The following statement contains a magic number: switch (c) {  case '0':  	return '\0';  case 't':  	return '\t';  case 'r':  	return '\r';  case 'n':  	return '\n';  case 'x':  	char[] hexCode = new char[4];  	if (reader.ReadBlock (hexCode' 0' 4) != 4)  		throw new Exception ("Wrong format for escaped unicode character.");  	return (char)Int32.Parse (new string (hexCode)' NumberStyles.AllowHexSpecifier);  default:  	return c;  }  
Magic Number,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,ReadEscapedCharacter,The following statement contains a magic number: if (reader.ReadBlock (hexCode' 0' 4) != 4)  	throw new Exception ("Wrong format for escaped unicode character.");  
Magic Number,HelperLibrary.Utils,IniConfiguration,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\IniConfiguration.cs,ReadEscapedCharacter,The following statement contains a magic number: if (reader.ReadBlock (hexCode' 0' 4) != 4)  	throw new Exception ("Wrong format for escaped unicode character.");  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: success = DeviceIoControl (fileHandle' ControlCode' IntPtr.Zero' 0' out buffer' (16 * 1024)' out bytesReturned' IntPtr.Zero);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: success = DeviceIoControl (fileHandle' ControlCode' IntPtr.Zero' 0' out buffer' (16 * 1024)' out bytesReturned' IntPtr.Zero);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagSymlink) {  	subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  }  else if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagSymlink) {  	subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  }  else if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagSymlink) {  	subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  }  else if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagSymlink) {  	subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  }  else if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagSymlink) {  	subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  }  else if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagSymlink) {  	subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  }  else if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagSymlink) {  	subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  }  else if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagSymlink) {  	subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  }  else if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagSymlink) {  	subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  }  else if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagSymlink) {  	subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  }  else if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: subsString = new string (buffer.reparseTarget' (buffer.subsNameOffset / 2 + 2)' buffer.subsNameLength / 2);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: printString = new string (buffer.reparseTarget' (buffer.printNameOffset / 2 + 2)' buffer.printNameLength / 2);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagMountpoint) {  	subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  	printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: subsString = new string (buffer.reparseTarget' buffer.subsNameOffset / 2' buffer.subsNameLength / 2);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: printString = new string (buffer.reparseTarget' buffer.printNameOffset / 2' buffer.printNameLength / 2);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (!string.IsNullOrEmpty (printString)) {  	relativeString = printString;  }  else {  	relativeString = subsString;  	if (relativeString.StartsWith (@"\??\")) {  		relativeString = relativeString.Substring (4);  	}  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (relativeString.StartsWith (@"\??\")) {  	relativeString = relativeString.Substring (4);  }  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: relativeString = relativeString.Substring (4);  
Magic Number,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,GetTarget,The following statement contains a magic number: if (buffer.reparseTag == ReparseTagSymlink && (relativeString.Length < 2 || relativeString [1] != ':')) {  	absoluteString = Path.Combine (linkPath' @"..\" + relativeString);  }  else {  	absoluteString = relativeString;  }  
Missing Default,HelperLibrary.Utils,CommandLineArgs,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\CommandLineArgs.cs,CommandLineArgs,The following switch statement is missing a default case: switch (parts.Length) {  // Found a value (for the last parameter   // found (space separator))  case 1:  	if (parameter != null) {  		if (!ContainsKey (parameter)) {  			parts [0] = Remover.Replace (parts [0]' "$1");  			Add (parameter' parts [0]);  		}  		parameter = null;  	}  	// else Error: no parameter waiting for a value (skipped)  	break;  // Found just a parameter  case 2:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	break;  // Parameter with enclosed value  case 3:  	// The last parameter is still waiting.   	// With no value' set it to true.  	if (parameter != null) {  		if (!ContainsKey (parameter))  			Add (parameter' "true");  	}  	parameter = parts [1];  	// Remove possible enclosing characters ("'')  	if (!ContainsKey (parameter)) {  		parts [2] = Remover.Replace (parts [2]' "$1");  		Add (parameter' parts [2]);  	}  	parameter = null;  	break;  }  
Missing Default,HelperLibrary.Utils,ReparsePoint,C:\repos\runelaenen_OpenRCT2Launcher\Launcher\ReparsePointLibrary\Utils\ReparsePoint.cs,Main,The following switch statement is missing a default case: switch (parameters [ActionArgumentTitle]) {  case ActionArgumentCreate: {  	LinkType type;  	if (!parameters.ContainsKey (CreateLinkPathArgumentTitle) || !parameters.ContainsKey (CreateDestinationArgumentTitle) || !parameters.ContainsKey (CreateLinkTypeArgumentTitle) || !Enum.TryParse (parameters [CreateLinkTypeArgumentTitle]' out type)) {  		return;  	}  	var linkPath = parameters [CreateLinkPathArgumentTitle];  	if (Directory.Exists (linkPath))  		Directory.Delete (linkPath' true);  	else if (File.Exists (linkPath))  		File.Delete (linkPath);  	var success = CreateSymbolicLink (parameters [CreateLinkPathArgumentTitle]' parameters [CreateDestinationArgumentTitle]' type);  	if (!success) {  		var error = Marshal.GetLastWin32Error ();  		#if DEBUG  		Debugger.Break ();  		#endif  	}  	break;  }  }  
