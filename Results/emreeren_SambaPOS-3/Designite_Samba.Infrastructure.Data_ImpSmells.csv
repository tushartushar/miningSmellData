Implementation smell,Namespace,Class,File,Method,Description
Long Method,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeObject,The method has 101 lines of code.
Complex Method,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,OldDeserializeObject,Cyclomatic complexity of the method is 10
Complex Method,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeObject,Cyclomatic complexity of the method is 15
Complex Method,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,SerializeObject,Cyclomatic complexity of the method is 10
Complex Method,Samba.Infrastructure.Data.Injection,EntityInjection,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Injection\EntityInjection.cs,SetValue,Cyclomatic complexity of the method is 11
Complex Method,Samba.Infrastructure.Data.Serializer,PropertyComparor,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\PropertyComparor.cs,AreEquals,Cyclomatic complexity of the method is 9
Complex Method,Samba.Infrastructure.Data.Serializer,XmlDeserializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlDeserializerHelper.cs,GetProperties,Cyclomatic complexity of the method is 10
Complex Method,Samba.Infrastructure.Data.Serializer,XmlDeserializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlDeserializerHelper.cs,GetAssembly,Cyclomatic complexity of the method is 11
Complex Method,Samba.Infrastructure.Data.Serializer,XmlDeserializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlDeserializerHelper.cs,CreateInstance,Cyclomatic complexity of the method is 10
Complex Method,Samba.Infrastructure.Data.Serializer,XmlSerializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlSerializerHelper.cs,SetCollectionItems,Cyclomatic complexity of the method is 8
Long Parameter List,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,OldDeserializeArrayPart,The method has 5 parameters.
Long Parameter List,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeArrayPart,The method has 6 parameters.
Long Parameter List,Samba.Infrastructure.Data,CollectionIdUpdater,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\CollectionIdUpdater.cs,UpdateCollectionIds,The method has 5 parameters.
Long Statement,Samba.Infrastructure.Data.BinarySerializer,GetWritableAttributes,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\GetWritableAttributes.cs,GetAccessors,The length of the statement  "		var index = (SilverlightSerializer.IsChecksum ? 1 : 0) + (SilverlightSerializer.IsChecksum && SilverlightSerializer.IgnoreIds ? 1 : 0); " is 135.
Long Statement,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,GetPropertyInfo,The length of the statement  "				ret = Type.GetTypeFromHandle (itm).GetProperties (BindingFlags.Instance | BindingFlags.Public).Where (p => p.PropertyType.GetCustomAttributes (typeof(DoNotSerialize)' true).Count () == 0 && p.GetCustomAttributes (typeof(DoNotSerialize)' true).Count () == 0 && !(p.GetIndexParameters ().Count () > 0) && (p.GetSetMethod () != null)).ToArray (); " is 343.
Long Statement,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,GetPropertyInfo,The length of the statement  "				ret = Type.GetTypeFromHandle (itm).GetProperties (BindingFlags.Instance | BindingFlags.Public).Where (p => p.PropertyType.GetCustomAttributes (typeof(DoNotSerialize)' true).Count () == 0 && p.GetCustomAttributes (typeof(DoNotSerialize)' true).Count () == 0 && p.GetCustomAttributes (typeof(DoNotChecksum)' true).Count () == 0 && !(p.GetIndexParameters ().Count () > 0) && (p.GetSetMethod () != null)).ToArray (); " is 412.
Long Statement,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,GetPropertyInfo,The length of the statement  "		return IgnoreIds && ret != null ? ret.Where (p => p.GetCustomAttributes (typeof(SerializerId)' true).Count () == 0) : ret; " is 122.
Long Statement,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,GetFieldInfo,The length of the statement  "			ret = FieldLists [itm] = Type.GetTypeFromHandle (itm).GetFields (BindingFlags.Instance | BindingFlags.Public | BindingFlags.SetField).Where (p => p.FieldType.GetCustomAttributes (typeof(DoNotSerialize)' true).Count () == 0 && p.GetCustomAttributes (typeof(DoNotSerialize)' false).Count () == 0).ToArray (); " is 306.
Long Statement,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeObject,The length of the statement  "			//return Convert.ChangeType(storage.ReadSimpleValue(Enum.GetUnderlyingType(itemType))' itemType' System.Globalization.CultureInfo.InvariantCulture); " is 148.
Long Statement,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,SerializeObject,The length of the statement  "		storage.WriteSimpleValue (itemType.IsEnum ? Convert.ChangeType (item' Enum.GetUnderlyingType (itemType)' CultureInfo.InvariantCulture) : item); " is 143.
Long Statement,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,IsSimpleType,The length of the statement  "	return tp.IsPrimitive || tp == typeof(DateTime) || tp == typeof(TimeSpan) || tp == typeof(string) || tp.IsEnum || tp == typeof(Guid) || tp == typeof(decimal); " is 158.
Long Statement,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,CreateObject,The length of the statement  "		return itemType.IsDefined (typeof(CreateUsingEvent)' false) ? CreateInstance (itemType) : Activator.CreateInstance (itemType); " is 126.
Long Statement,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,CreateInstance,The length of the statement  "	var error = string.Format ("Could not construct an object of type '{0}'' it must be creatable in this scope and have a default parameterless constructor or you should handle the CreateType event on SilverlightSerializer to construct the object"' itemType.FullName); " is 265.
Long Statement,Samba.Infrastructure.Data,CollectionIdUpdater,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\CollectionIdUpdater.cs,UpdateCollectionIds,The length of the statement  "			type.GetProperties ().Where (x => x.PropertyType.IsGenericType && x.PropertyType.GetInterfaces ().Contains (typeof(IEnumerable))).ToList ().ForEach (x => UpdateCollectionIds (type.Name' vitem.Id' x' item' iDCreator)); " is 217.
Long Statement,Samba.Infrastructure.Data.Injection,EntityInjection,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Injection\EntityInjection.cs,SetValue,The length of the statement  "				var rmvItems = (c.TargetProp.Value as IEnumerable).Cast<IValueClass> ().Where (x => x.Id > 0 && !(c.SourceProp.Value as IEnumerable).Cast<IValueClass> ().Any (y => y.Id == x.Id)); " is 179.
Long Statement,Samba.Infrastructure.Data.Injection,EntityInjection,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Injection\EntityInjection.cs,SetValue,The length of the statement  "				rmvItems = (c.TargetProp.Value as IEnumerable).Cast<IValueClass> ().Where (x => !(c.SourceProp.Value as IEnumerable).Cast<IValueClass> ().Contains (x)); " is 152.
Long Statement,Samba.Infrastructure.Data.Injection,EntityInjection,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Injection\EntityInjection.cs,SetValue,The length of the statement  "					var target = (c.TargetProp.Value as IEnumerable).Cast<IValueClass> ().SingleOrDefault (z => z.Id == sv.Id && z.Id != 0); " is 120.
Long Statement,Samba.Infrastructure.Data.Serializer,XmlDeserializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlDeserializerHelper.cs,Deserialize,The length of the statement  "			throw new ArgumentException ("Invalid node. The specified node or its direct children do not contain a " + taglib.OBJECT_TAG + " tag."' "XmlNode node"); " is 152.
Long Statement,Samba.Infrastructure.Data.Serializer,XmlDeserializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlDeserializerHelper.cs,SetDictionaryValues,The length of the statement  "		string path = taglib.PROPERTIES_TAG + "/" + taglib.PROPERTY_TAG + "[@" + taglib.NAME_TAG + "='" + taglib.NAME_ATT_KEY_TAG + "']"; " is 129.
Long Statement,Samba.Infrastructure.Data.Serializer,XmlDeserializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlDeserializerHelper.cs,SetDictionaryValues,The length of the statement  "		path = taglib.PROPERTIES_TAG + "/" + taglib.PROPERTY_TAG + "[@" + taglib.NAME_TAG + "='" + taglib.NAME_ATT_VALUE_TAG + "']"; " is 124.
Long Statement,Samba.Infrastructure.Data.Serializer,XmlDeserializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlDeserializerHelper.cs,CreateInstance,The length of the statement  "		string msg = "Creation of an instance failed. Type: " + info.Type + " Assembly: " + info.Assembly + " Cause: " + e.Message; " is 123.
Long Statement,Samba.Infrastructure.Data.Serializer,TypeInfo,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlSerializationHelpers.cs,HasBinaryConstructor,The length of the statement  "			if (typeof(Stream).IsAssignableFrom (pai [0].ParameterType) || typeof(byte[]).IsAssignableFrom (pai [0].ParameterType)) { " is 121.
Long Statement,Samba.Infrastructure.Data.Serializer,XmlSerializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlSerializerHelper.cs,SetProperties,The length of the statement  "	Debug.Assert (piarr.Length > 0' "No property found to serialize for type " + obj.GetType ().Name + "! Current implementation of Ellisys.Util.Serialization.XmlSerializer only work on public properties with get and set"); " is 219.
Long Statement,Samba.Infrastructure.Data.Serializer,XmlSerializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlSerializerHelper.cs,SetProperty,The length of the statement  "		if (CheckPropertyHasToBeSerialized (pi) && (pt.IsSerializable || IgnoreSerializableAttribute) && (pi.CanWrite) && ((pt.IsPublic) || (pt.IsEnum))) { " is 147.
Long Statement,Samba.Infrastructure.Data.Serializer,XmlSerializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlSerializerHelper.cs,SetXmlElementFromBasicPropertyValue,The length of the statement  "		Debug.Assert (piarr2.Length > 0' "No property found to serialize for type " + pt.Name + "! Current implementation of Ellisys.Util.Serialization.XmlSerializer only work on public properties with get and set"); " is 208.
Long Statement,Samba.Infrastructure.Data.Serializer,XmlSerializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlSerializerHelper.cs,SetXmlElementFromBasicPropertyValue,The length of the statement  "			if (CheckPropertyHasToBeSerialized (pi2) && (pi2.PropertyType.IsSerializable || IgnoreSerializableAttribute) && (pi2.CanWrite) && ((pi2.PropertyType.IsPublic) || (pi2.PropertyType.IsEnum))) { " is 191.
Long Statement,Samba.Infrastructure.Data.Serializer,XmlSerializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlSerializerHelper.cs,WriteTypeDictionary,The length of the statement  "			XmlComment comment = parentNode.OwnerDocument.CreateComment (" TypeDictionary : Don't edit anything in this section at all ! "); " is 128.
Long Statement,Samba.Infrastructure.Data.SQL,EFWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\SQL\EFWorkspace.cs,Single,The length of the statement  "	var result = includes.Aggregate (_context.Trackable<T> ()' (current' include) => current.Include (include)).Where (expression); " is 127.
Long Statement,Samba.Infrastructure.Data.SQL,EFWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\SQL\EFWorkspace.cs,All,The length of the statement  "	return includes.Aggregate (_context.Trackable<T> ()' (current' include) => current.Include (include)).Where (expression); " is 121.
Long Statement,Samba.Infrastructure.Data.SQL,ReadOnlyEFWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\SQL\ReadOnlyEFWorkspace.cs,Query,The length of the statement  "		return includes.Aggregate (_context.ReadOnly<T> ()' (current' include) => current.Include (include)).Where (predictate); " is 120.
Long Statement,Samba.Infrastructure.Data.SQL,ReadOnlyEFWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\SQL\ReadOnlyEFWorkspace.cs,Distinct,The length of the statement  "	return _context.ReadOnly<T> ().Where (prediction).Select (expression).Distinct ().Where (x => !string.IsNullOrEmpty (x)).ToList (); " is 131.
Long Statement,Samba.Infrastructure.Data.SQL,ReadOnlyEFWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\SQL\ReadOnlyEFWorkspace.cs,Single,The length of the statement  "	return includes.Aggregate (_context.ReadOnly<T> ()' (current' include) => current.Include (include)).SingleOrDefault (predictate); " is 130.
Long Statement,Samba.Infrastructure.Data.SQL,ReadOnlyEFWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\SQL\ReadOnlyEFWorkspace.cs,First,The length of the statement  "	return includes.Aggregate (_context.ReadOnly<T> ()' (current' include) => current.Include (include)).FirstOrDefault (predictate); " is 129.
Long Statement,Samba.Infrastructure.Data.SQL,ReadOnlyEFWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\SQL\ReadOnlyEFWorkspace.cs,Select,The length of the statement  "		return includes.Aggregate (_context.ReadOnly<TSource> ()' (current' include) => current.Include (include)).Where (predictate).Select (expression); " is 146.
Long Statement,Samba.Infrastructure.Data.SQL,ReadOnlyEFWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\SQL\ReadOnlyEFWorkspace.cs,Select,The length of the statement  "		return includes.Aggregate (_context.ReadOnly<TSource> ()' (current' include) => current.Include (include)).Select (expression); " is 127.
Long Statement,Samba.Infrastructure.Data.SQL,ReadOnlyEFWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\SQL\ReadOnlyEFWorkspace.cs,Sum,The length of the statement  "		return predictate != null ? _context.ReadOnly<T> ().Where (predictate).Sum (selector) : _context.ReadOnly<T> ().Sum (selector); " is 127.
Long Statement,Samba.Infrastructure.Data.SQL,ReadOnlyEFWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\SQL\ReadOnlyEFWorkspace.cs,Last,The length of the statement  "	return includes.Aggregate (_context.ReadOnly<T> ()' (current' include) => current.Include (include)).Where (predictate).OrderByDescending (x => x.Id).Take (1).FirstOrDefault (); " is 177.
Long Statement,Samba.Infrastructure.Data.Text,IdFixer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Text\IdFixer.cs,FixIdNumbers,The length of the statement  "			obj.GetType ().GetProperties ().Where (x => x.PropertyType.IsGenericType && x.PropertyType.GetInterfaces ().Contains (typeof(IEnumerable))).ToList ().ForEach (x => CollectionIdUpdater.UpdateCollectionIds (className' id' x' obj' iDCreator)); " is 240.
Long Statement,Samba.Infrastructure.Data.Text,TextFileWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Text\TextFileWorkspace.cs,AddSubItems,The length of the statement  "	var collections = item.GetType ().GetProperties ().Where (x => x.PropertyType.IsGenericType && x.PropertyType.GetInterfaces ().Contains (typeof(IEnumerable))); " is 159.
Long Statement,Samba.Infrastructure.Data.Text,TextFileWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Text\TextFileWorkspace.cs,AddSubItems,The length of the statement  "	foreach (var collectionType in collections.Where (x => x.PropertyType.GetGenericArguments () [0].GetInterfaces ().Any (y => y == typeof(IValueClass)))) { " is 153.
Long Statement,Samba.Infrastructure.Data.Text,TextFileWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Text\TextFileWorkspace.cs,Distinct,The length of the statement  "	return _storage.GetItems<T> ().Select (expression.Compile ()).Distinct ().Where (x => !string.IsNullOrEmpty (x)).ToList (); " is 123.
Long Statement,Samba.Infrastructure.Data.Text,TextFileWorkspace,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Text\TextFileWorkspace.cs,Distinct,The length of the statement  "	return _storage.GetItems<T> ().Where (prediction.Compile ()).Select (expression.Compile ()).Distinct ().Where (x => !string.IsNullOrEmpty (x)).ToList (); " is 153.
Complex Conditional,Samba.Infrastructure.Data.Serializer,XmlSerializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlSerializerHelper.cs,SetProperty,The conditional expression  "CheckPropertyHasToBeSerialized (pi) && (pt.IsSerializable || IgnoreSerializableAttribute) && (pi.CanWrite) && ((pt.IsPublic) || (pt.IsEnum))"  is complex.
Complex Conditional,Samba.Infrastructure.Data.Serializer,XmlSerializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlSerializerHelper.cs,SetXmlElementFromBasicPropertyValue,The conditional expression  "CheckPropertyHasToBeSerialized (pi2) && (pi2.PropertyType.IsSerializable || IgnoreSerializableAttribute) && (pi2.CanWrite) && ((pi2.PropertyType.IsPublic) || (pi2.PropertyType.IsEnum))"  is complex.
Empty Catch Block,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,ScanAllTypesForAttribute,The method has an empty catch block.
Empty Catch Block,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,OldDeserializeProperties,The method has an empty catch block.
Empty Catch Block,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,OldDeserializeFields,The method has an empty catch block.
Empty Catch Block,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeProperties,The method has an empty catch block.
Empty Catch Block,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeProperties,The method has an empty catch block.
Empty Catch Block,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeFields,The method has an empty catch block.
Empty Catch Block,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeFields,The method has an empty catch block.
Empty Catch Block,Samba.Infrastructure.Data.Serializer,XmlDeserializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlDeserializerHelper.cs,GetAssembly,The method has an empty catch block.
Empty Catch Block,Samba.Infrastructure.Data.Serializer,XmlDeserializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlDeserializerHelper.cs,CreateType,The method has an empty catch block.
Magic Number,Samba.Infrastructure.Data.BinarySerializer,GetWritableAttributes,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\GetWritableAttributes.cs,GetAccessors,The following statement contains a magic number: lock (PropertyAccess) {  	var index = (SilverlightSerializer.IsChecksum ? 1 : 0) + (SilverlightSerializer.IsChecksum && SilverlightSerializer.IgnoreIds ? 1 : 0);  	GetSet[][][] collection;  	if (!PropertyAccess.TryGetValue (type' out collection)) {  		collection = new GetSet[3][][];  		PropertyAccess [type] = collection;  	}  	var accessors = collection [index];  	if (accessors == null) {  		var vanilla = GetVanilla (type);  		var acs = new List<GetSet> ();  		var props = SilverlightSerializer.GetPropertyInfo (type);  		foreach (var p in props) {  			var gs = typeof(GetSetGeneric<' >);  			var tp = gs.MakeGenericType (new Type[] {  				Type.GetTypeFromHandle (type)'  				p.PropertyType  			});  			var getSet = (GetSet)Activator.CreateInstance (tp' new object[] {  				p  			});  			getSet.Vanilla = getSet.Get (vanilla);  			acs.Add (getSet);  		}  		accessors = new GetSet[2][];  		accessors [0] = acs.ToArray ();  		acs.Clear ();  		var fields = SilverlightSerializer.GetFieldInfo (type);  		foreach (var f in fields) {  			var gs = typeof(GetSetGeneric<' >);  			var tp = gs.MakeGenericType (new Type[] {  				Type.GetTypeFromHandle (type)'  				f.FieldType  			});  			var getSet = (GetSet)Activator.CreateInstance (tp' new object[] {  				f  			});  			getSet.Vanilla = getSet.Get (vanilla);  			acs.Add (getSet);  		}  		accessors [1] = acs.ToArray ();  		collection [index] = accessors;  	}  	return accessors;  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,GetWritableAttributes,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\GetWritableAttributes.cs,GetAccessors,The following statement contains a magic number: lock (PropertyAccess) {  	var index = (SilverlightSerializer.IsChecksum ? 1 : 0) + (SilverlightSerializer.IsChecksum && SilverlightSerializer.IgnoreIds ? 1 : 0);  	GetSet[][][] collection;  	if (!PropertyAccess.TryGetValue (type' out collection)) {  		collection = new GetSet[3][][];  		PropertyAccess [type] = collection;  	}  	var accessors = collection [index];  	if (accessors == null) {  		var vanilla = GetVanilla (type);  		var acs = new List<GetSet> ();  		var props = SilverlightSerializer.GetPropertyInfo (type);  		foreach (var p in props) {  			var gs = typeof(GetSetGeneric<' >);  			var tp = gs.MakeGenericType (new Type[] {  				Type.GetTypeFromHandle (type)'  				p.PropertyType  			});  			var getSet = (GetSet)Activator.CreateInstance (tp' new object[] {  				p  			});  			getSet.Vanilla = getSet.Get (vanilla);  			acs.Add (getSet);  		}  		accessors = new GetSet[2][];  		accessors [0] = acs.ToArray ();  		acs.Clear ();  		var fields = SilverlightSerializer.GetFieldInfo (type);  		foreach (var f in fields) {  			var gs = typeof(GetSetGeneric<' >);  			var tp = gs.MakeGenericType (new Type[] {  				Type.GetTypeFromHandle (type)'  				f.FieldType  			});  			var getSet = (GetSet)Activator.CreateInstance (tp' new object[] {  				f  			});  			getSet.Vanilla = getSet.Get (vanilla);  			acs.Add (getSet);  		}  		accessors [1] = acs.ToArray ();  		collection [index] = accessors;  	}  	return accessors;  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,GetWritableAttributes,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\GetWritableAttributes.cs,GetAccessors,The following statement contains a magic number: if (!PropertyAccess.TryGetValue (type' out collection)) {  	collection = new GetSet[3][][];  	PropertyAccess [type] = collection;  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,GetWritableAttributes,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\GetWritableAttributes.cs,GetAccessors,The following statement contains a magic number: collection = new GetSet[3][][];  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,GetWritableAttributes,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\GetWritableAttributes.cs,GetAccessors,The following statement contains a magic number: if (accessors == null) {  	var vanilla = GetVanilla (type);  	var acs = new List<GetSet> ();  	var props = SilverlightSerializer.GetPropertyInfo (type);  	foreach (var p in props) {  		var gs = typeof(GetSetGeneric<' >);  		var tp = gs.MakeGenericType (new Type[] {  			Type.GetTypeFromHandle (type)'  			p.PropertyType  		});  		var getSet = (GetSet)Activator.CreateInstance (tp' new object[] {  			p  		});  		getSet.Vanilla = getSet.Get (vanilla);  		acs.Add (getSet);  	}  	accessors = new GetSet[2][];  	accessors [0] = acs.ToArray ();  	acs.Clear ();  	var fields = SilverlightSerializer.GetFieldInfo (type);  	foreach (var f in fields) {  		var gs = typeof(GetSetGeneric<' >);  		var tp = gs.MakeGenericType (new Type[] {  			Type.GetTypeFromHandle (type)'  			f.FieldType  		});  		var getSet = (GetSet)Activator.CreateInstance (tp' new object[] {  			f  		});  		getSet.Vanilla = getSet.Get (vanilla);  		acs.Add (getSet);  	}  	accessors [1] = acs.ToArray ();  	collection [index] = accessors;  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,GetWritableAttributes,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\GetWritableAttributes.cs,GetAccessors,The following statement contains a magic number: accessors = new GetSet[2][];  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,BinarySerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SerializationUnits.cs,StartDeserializing,The following statement contains a magic number: SilverlightSerializer.currentVersion = int.Parse (version.Substring (4));  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,BinarySerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SerializationUnits.cs,StartDeserializing,The following statement contains a magic number: if (SilverlightSerializer.currentVersion >= 3)  	SilverlightSerializer.Verbose = reader.ReadBoolean ();  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,BinarySerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SerializationUnits.cs,ReadSimpleArray,The following statement contains a magic number: if (elementType.IsPrimitive && SilverlightSerializer.currentVersion >= 6) {  	var ba = ReadSimpleValue<byte[]> ();  	var a = Array.CreateInstance (elementType' count);  	Buffer.BlockCopy (ba' 0' a' 0' ba.Length);  	return a;  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,GetChecksum,The following statement contains a magic number: for (var i = 0; i < toBytes.Length; i++) {  	checksum [i & 15] ^= toBytes [i];  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,GetChecksum,The following statement contains a magic number: checksum [i & 15] ^= toBytes [i];  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,Deserialize,The following statement contains a magic number: try {  	KtStack.Push (KnownTypes);  	PiStack.Push (PropertyIds);  	_loStack.Push (_loadedObjects);  	_loadedObjects = new Dictionary<int' object> ();  	var rw = new BinaryReader (inputStream);  	var version = rw.ReadString ();  	currentVersion = Int32.Parse (version.Substring (4));  	if (currentVersion >= 5) {  		inputStream.Position = 0;  		BinarySerializer serializer = new BinarySerializer (rw.ReadBytes ((int)inputStream.Length));  		serializer.StartDeserializing ();  		var ob = DeserializeObject (new Entry () {  			Name = "root"  		}' serializer);  		serializer.FinishedDeserializing ();  		return ob;  	}  	var count = rw.ReadInt32 ();  	if (currentVersion >= 3)  		Verbose = rw.ReadBoolean ();  	PropertyIds = new List<string> ();  	KnownTypes = new List<RuntimeTypeHandle> ();  	for (var i = 0; i < count; i++) {  		var typeName = rw.ReadString ();  		var tp = Type.GetType (typeName);  		if (tp == null) {  			var map = new TypeMappingEventArgs {  				TypeName = typeName  			};  			InvokeMapMissingType (map);  			tp = map.UseType;  		}  		if (!Verbose)  			if (tp == null)  				throw new ArgumentException (String.Format ("Cannot reference type {0} in this context"' typeName));  		KnownTypes.Add (tp.TypeHandle);  	}  	count = rw.ReadInt32 ();  	for (var i = 0; i < count; i++) {  		PropertyIds.Add (rw.ReadString ());  	}  	object obj = OldDeserializeObject (rw' null' instance);  	return obj;  } finally {  	IsReference = false;  	KnownTypes = KtStack.Pop ();  	PropertyIds = PiStack.Pop ();  	_loadedObjects = _loStack.Pop ();  	Verbose = v;  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,Deserialize,The following statement contains a magic number: try {  	KtStack.Push (KnownTypes);  	PiStack.Push (PropertyIds);  	_loStack.Push (_loadedObjects);  	_loadedObjects = new Dictionary<int' object> ();  	var rw = new BinaryReader (inputStream);  	var version = rw.ReadString ();  	currentVersion = Int32.Parse (version.Substring (4));  	if (currentVersion >= 5) {  		inputStream.Position = 0;  		BinarySerializer serializer = new BinarySerializer (rw.ReadBytes ((int)inputStream.Length));  		serializer.StartDeserializing ();  		var ob = DeserializeObject (new Entry () {  			Name = "root"  		}' serializer);  		serializer.FinishedDeserializing ();  		return ob;  	}  	var count = rw.ReadInt32 ();  	if (currentVersion >= 3)  		Verbose = rw.ReadBoolean ();  	PropertyIds = new List<string> ();  	KnownTypes = new List<RuntimeTypeHandle> ();  	for (var i = 0; i < count; i++) {  		var typeName = rw.ReadString ();  		var tp = Type.GetType (typeName);  		if (tp == null) {  			var map = new TypeMappingEventArgs {  				TypeName = typeName  			};  			InvokeMapMissingType (map);  			tp = map.UseType;  		}  		if (!Verbose)  			if (tp == null)  				throw new ArgumentException (String.Format ("Cannot reference type {0} in this context"' typeName));  		KnownTypes.Add (tp.TypeHandle);  	}  	count = rw.ReadInt32 ();  	for (var i = 0; i < count; i++) {  		PropertyIds.Add (rw.ReadString ());  	}  	object obj = OldDeserializeObject (rw' null' instance);  	return obj;  } finally {  	IsReference = false;  	KnownTypes = KtStack.Pop ();  	PropertyIds = PiStack.Pop ();  	_loadedObjects = _loStack.Pop ();  	Verbose = v;  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,Deserialize,The following statement contains a magic number: try {  	KtStack.Push (KnownTypes);  	PiStack.Push (PropertyIds);  	_loStack.Push (_loadedObjects);  	_loadedObjects = new Dictionary<int' object> ();  	var rw = new BinaryReader (inputStream);  	var version = rw.ReadString ();  	currentVersion = Int32.Parse (version.Substring (4));  	if (currentVersion >= 5) {  		inputStream.Position = 0;  		BinarySerializer serializer = new BinarySerializer (rw.ReadBytes ((int)inputStream.Length));  		serializer.StartDeserializing ();  		var ob = DeserializeObject (new Entry () {  			Name = "root"  		}' serializer);  		serializer.FinishedDeserializing ();  		return ob;  	}  	var count = rw.ReadInt32 ();  	if (currentVersion >= 3)  		Verbose = rw.ReadBoolean ();  	PropertyIds = new List<string> ();  	KnownTypes = new List<RuntimeTypeHandle> ();  	for (var i = 0; i < count; i++) {  		var typeName = rw.ReadString ();  		var tp = Type.GetType (typeName);  		if (tp == null) {  			var map = new TypeMappingEventArgs {  				TypeName = typeName  			};  			InvokeMapMissingType (map);  			tp = map.UseType;  		}  		if (!Verbose)  			if (tp == null)  				throw new ArgumentException (String.Format ("Cannot reference type {0} in this context"' typeName));  		KnownTypes.Add (tp.TypeHandle);  	}  	count = rw.ReadInt32 ();  	for (var i = 0; i < count; i++) {  		PropertyIds.Add (rw.ReadString ());  	}  	object obj = OldDeserializeObject (rw' null' instance);  	return obj;  } finally {  	IsReference = false;  	KnownTypes = KtStack.Pop ();  	PropertyIds = PiStack.Pop ();  	_loadedObjects = _loStack.Pop ();  	Verbose = v;  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,Deserialize,The following statement contains a magic number: currentVersion = Int32.Parse (version.Substring (4));  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,Deserialize,The following statement contains a magic number: if (currentVersion >= 5) {  	inputStream.Position = 0;  	BinarySerializer serializer = new BinarySerializer (rw.ReadBytes ((int)inputStream.Length));  	serializer.StartDeserializing ();  	var ob = DeserializeObject (new Entry () {  		Name = "root"  	}' serializer);  	serializer.FinishedDeserializing ();  	return ob;  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,Deserialize,The following statement contains a magic number: if (currentVersion >= 3)  	Verbose = rw.ReadBoolean ();  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,OldDeserializeArrayPart,The following statement contains a magic number: for (var l = 0; l < length; l++) {  	indices [i] = l;  	if (i != sourceArrays.Rank - 2)  		OldDeserializeArrayPart (sourceArrays' i + 1' indices' itemType' binaryReader);  	else {  		Array sourceArray = (Array)OldDeserializeArray (itemType' binaryReader' -1);  		int cols = sourceArrays.GetLength (i + 1);  		for (int arrayStartIndex = 0; arrayStartIndex < cols; arrayStartIndex++) {  			indices [i + 1] = arrayStartIndex;  			sourceArrays.SetValue (sourceArray.GetValue (arrayStartIndex)' indices);  		}  	}  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,OldDeserializeArrayPart,The following statement contains a magic number: if (i != sourceArrays.Rank - 2)  	OldDeserializeArrayPart (sourceArrays' i + 1' indices' itemType' binaryReader);  else {  	Array sourceArray = (Array)OldDeserializeArray (itemType' binaryReader' -1);  	int cols = sourceArrays.GetLength (i + 1);  	for (int arrayStartIndex = 0; arrayStartIndex < cols; arrayStartIndex++) {  		indices [i + 1] = arrayStartIndex;  		sourceArrays.SetValue (sourceArray.GetValue (arrayStartIndex)' indices);  	}  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeArrayPart,The following statement contains a magic number: for (var l = 0; l < length; l++) {  	indices [i] = l;  	if (i != sourceArrays.Rank - 2)  		DeserializeArrayPart (sourceArrays' i + 1' indices' itemType' storage' objectID);  	else {  		Array sourceArray = (Array)DeserializeArray (itemType' storage' -1' objectID);  		int cols = sourceArrays.GetLength (i + 1);  		for (int arrayStartIndex = 0; arrayStartIndex < cols; arrayStartIndex++) {  			indices [i + 1] = arrayStartIndex;  			sourceArrays.SetValue (sourceArray.GetValue (arrayStartIndex)' indices);  		}  	}  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeArrayPart,The following statement contains a magic number: if (i != sourceArrays.Rank - 2)  	DeserializeArrayPart (sourceArrays' i + 1' indices' itemType' storage' objectID);  else {  	Array sourceArray = (Array)DeserializeArray (itemType' storage' -1' objectID);  	int cols = sourceArrays.GetLength (i + 1);  	for (int arrayStartIndex = 0; arrayStartIndex < cols; arrayStartIndex++) {  		indices [i + 1] = arrayStartIndex;  		sourceArrays.SetValue (sourceArray.GetValue (arrayStartIndex)' indices);  	}  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeDictionary,The following statement contains a magic number: if (currentVersion >= 7)  	DeserializeObjectAndProperties (o' itemType' storage);  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DeserializeList,The following statement contains a magic number: if (currentVersion >= 7)  	DeserializeObjectAndProperties (o' itemType' storage);  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,SerializeArrayPart,The following statement contains a magic number: for (var l = 0; l < length; l++) {  	indices [i] = l;  	if (i != item.Rank - 2)  		SerializeArrayPart (item' i + 1' indices' storage);  	else {  		Type arrayType = item.GetType ().GetElementType ();  		var cols = item.GetLength (i + 1);  		var baseArray = Array.CreateInstance (arrayType' cols);  		// Convert the whole multi-dimensional array to be 'row' based  		// and serialize using the existing code  		for (int arrayStartIndex = 0; arrayStartIndex < cols; arrayStartIndex++) {  			indices [i + 1] = arrayStartIndex;  			baseArray.SetValue (item.GetValue (indices)' arrayStartIndex);  		}  		SerializeArray (baseArray' baseArray.GetType ()' storage);  	}  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,SerializeArrayPart,The following statement contains a magic number: if (i != item.Rank - 2)  	SerializeArrayPart (item' i + 1' indices' storage);  else {  	Type arrayType = item.GetType ().GetElementType ();  	var cols = item.GetLength (i + 1);  	var baseArray = Array.CreateInstance (arrayType' cols);  	// Convert the whole multi-dimensional array to be 'row' based  	// and serialize using the existing code  	for (int arrayStartIndex = 0; arrayStartIndex < cols; arrayStartIndex++) {  		indices [i + 1] = arrayStartIndex;  		baseArray.SetValue (item.GetValue (indices)' arrayStartIndex);  	}  	SerializeArray (baseArray' baseArray.GetType ()' storage);  }  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DecimalReader,The following statement contains a magic number: array [2] = (int)reader.ReadInt32 ();  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DecimalReader,The following statement contains a magic number: array [3] = (int)reader.ReadInt32 ();  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DecimalWriter,The following statement contains a magic number: writer.Write (array [2]);  
Magic Number,Samba.Infrastructure.Data.BinarySerializer,SilverlightSerializer,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\BinarySerializer\SilverlightSerializer.cs,DecimalWriter,The following statement contains a magic number: writer.Write (array [3]);  
Magic Number,Samba.Infrastructure.Data.Serializer,XmlDeserializerHelper,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Infrastructure.Data\Serializer\XmlDeserializerHelper.cs,CreateArrayInstance,The following statement contains a magic number: Contract.Requires (0 <= info.Type.Length - 2);  
