Implementation smell,Namespace,Class,File,Method,Description
Long Method,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The method has 101 lines of code.
Long Method,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The method has 156 lines of code.
Long Method,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpressionsWithPrecedence,The method has 141 lines of code.
Long Method,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The method has 187 lines of code.
Long Method,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The method has 308 lines of code.
Complex Method,Fluentscript.Lib.Helpers,PreprocessHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\PreprocessHelper.cs,Process,Cyclomatic complexity of the method is 15
Complex Method,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseDocTags,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Helpers,FluentHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FluentHelper.cs,ParseFuncParameters,Cyclomatic complexity of the method is 15
Complex Method,Fluentscript.Lib.Helpers,LangTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TypeHelper.cs,ConvertArgs,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Helpers,LangTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TypeHelper.cs,ConvertToHostLangArray,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanNumber,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,SkipUntilPrefixedWord,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,GetTokenBatch,Cyclomatic complexity of the method is 14
Complex Method,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,Cyclomatic complexity of the method is 28
Complex Method,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedString,Cyclomatic complexity of the method is 13
Complex Method,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedTokens,Cyclomatic complexity of the method is 15
Complex Method,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseStatement,Cyclomatic complexity of the method is 14
Complex Method,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,Cyclomatic complexity of the method is 28
Complex Method,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseBlock,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpressionsWithPrecedence,Cyclomatic complexity of the method is 26
Complex Method,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseFuncExpression,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseIdExpression,Cyclomatic complexity of the method is 12
Complex Method,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseParameters,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Advance,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Parser,AstVisitor,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Visitor.cs,VisitExpr,Cyclomatic complexity of the method is 13
Complex Method,Fluentscript.Lib.Parser.Integration,RegisteredPlugins,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Integration\Plugins.cs,GetPlugin,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Parser.MetaPlugins,GrammerParser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\GrammarParser.cs,DoParse,Cyclomatic complexity of the method is 13
Complex Method,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,Register,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,Validate,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CanHandleTok,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,Cyclomatic complexity of the method is 48
Complex Method,Fluentscript.Lib.Plugins.Parser,FluentMemberPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentMemberPlugin.cs,Match,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Plugins.Parser,FluentMemberPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentMemberPlugin.cs,IsMatch,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Plugins.Parser,RecordsPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\RecordsPlugin.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Plugins.Parser,TypeOperationsExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TypeOperationsPlugin.cs,CheckExplicitType,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Plugins.Parser,VariablePathPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\VariablePathPlugin.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Plugins.System,VarPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\System\VarPlugin.cs,ParseAssignment,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Runtime,EvalHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\EvalHelper.cs,Compare,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Runtime,EvalHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\EvalHelper.cs,CompareDayDifference,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDay,Cyclomatic complexity of the method is 14
Complex Method,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitForEach,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitBinary,Cyclomatic complexity of the method is 12
Complex Method,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,PushParametersInScope,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Runtime.Switches,TokensSwitch,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Switches\TokensSwitch.cs,DoExecute,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Types,LTypeMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\LTypeMethods.cs,ExecuteMethod,Cyclomatic complexity of the method is 11
Long Parameter List,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,Try,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Helpers,FluentHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FluentHelper.cs,ParseFuncParameters,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Helpers,FunctionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallFunction,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Helpers,FunctionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallMemberOnBasicType,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Helpers,FunctionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallMemberOnClass,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Helpers,FunctionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallFunctionInScript,The method has 7 parameters.
Long Parameter List,Fluentscript.Lib.Helpers,FunctionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,MethodCall,The method has 8 parameters.
Long Parameter List,Fluentscript.Lib.Helpers,MemberHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\MemberHelper.cs,GetMemberAccess,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Helpers,MemberHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\MemberHelper.cs,GetExternalTypeMember,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Helpers,ParamHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\ParamHelper.cs,ResolveParameters,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Parser,Exprs,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Exprs.cs,Date,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Parser,Exprs,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Exprs.cs,Unary,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,PeekCustomLimitedWord,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanUntilChars,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpressionsWithPrecedence,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckMatchesForLexer,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Parser.MetaPlugins,TokenMatch,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\TokenMatch.cs,Init,The method has 8 parameters.
Long Parameter List,Fluentscript.Lib.Plugins.Parser,FluentMemberPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentMemberPlugin.cs,IsMatch,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Plugins.System,VarPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\System\VarPlugin.cs,AddAssignment,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Runtime,AssignHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\AssignHelper.cs,SetVariableValue,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Runtime,AssignHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\AssignHelper.cs,SetMemberValue,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Runtime,AssignHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\AssignHelper.cs,SetIndexValue,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Runtime,EvalHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\EvalHelper.cs,CalcUnits,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Types,ConvertSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\ConvertSpec.cs,ConvertSpec,The method has 8 parameters.
Long Parameter List,Fluentscript.Lib.Types,LTypeMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\LTypeMethods.cs,AddProperty,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Types,LTypeMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\LTypeMethods.cs,AddArg,The method has 8 parameters.
Long Parameter List,Fluentscript.Lib.Types,LTypeMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\LTypeMethods.cs,AddMethodInfo,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,SetHours,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,SetUtcHours,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,SetDateTime,The method has 9 parameters.
Long Parameter List,Fluentscript.Lib.Types.Javascript,LJSTimeMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSTimeMethods.cs,SetHours,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib.Types.Javascript,LJSTimeMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSTimeMethods.cs,SetDateTime,The method has 9 parameters.
Long Parameter List,Fluentscript.Lib._Core,LangException,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangException.cs,LangException,The method has 5 parameters.
Long Parameter List,Fluentscript.Lib._Core.Grammar,TypeSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,TypeSpec,The method has 6 parameters.
Long Parameter List,Fluentscript.Lib._Core.Grammar,ExprSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,ExprSpec,The method has 16 parameters.
Long Parameter List,Fluentscript.Lib._Core.Meta.Types,FunctionMetaData,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Meta\Types\FunctionMeta.cs,AddArg,The method has 7 parameters.
Long Identifier,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The length of the parameter enableIdentTokenTextAsEndToken is 30.
Long Identifier,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,PeekConsequetiveIdsAppendedWithTokenCounts,The length of the parameter enableCamelCasingAsSeparateWords is 32.
Long Statement,Fluentscript.Lib.AST.Core,MemberExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\AST\Core\MemberExpr.cs,IsMemberInstanceAccess,The length of the statement  "	MemberInfo[] members = type.GetMember (MemberName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase); " is 122.
Long Statement,Fluentscript.Lib.AST.Core,MemberExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\AST\Core\MemberExpr.cs,IsMemberStaticAccess,The length of the statement  "	MemberInfo[] members = type.GetMember (MemberName' BindingFlags.Public | BindingFlags.Static | BindingFlags.IgnoreCase); " is 120.
Long Statement,Fluentscript.Lib.AST.Core,MemberExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\AST\Core\MemberExpr.cs,GetMemberAccess,The length of the statement  "	members = type.GetMember (MemberName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.IgnoreCase); " is 131.
Long Statement,Fluentscript.Lib.Helpers,ExceptionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\ExceptionHelper.cs,NotNull,The length of the statement  "		throw new LangException ("Runtime Error"' "Can not perform " + message + " on null object"' node.Ref.ScriptName' node.Ref.Line' node.Ref.CharPos); " is 146.
Long Statement,Fluentscript.Lib.Helpers,ExceptionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\ExceptionHelper.cs,ExpectType,The length of the statement  "		throw new LangException ("Runtime Error"' "Expected type " + lType.Name' node.Ref.ScriptName' node.Ref.Line' node.Ref.CharPos); " is 127.
Long Statement,Fluentscript.Lib.Helpers,ExceptionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\ExceptionHelper.cs,NotNullType,The length of the statement  "		throw new LangException ("Runtime Error"' "Expected type " + lType.Name' node.Ref.ScriptName' node.Ref.Line' node.Ref.CharPos); " is 127.
Long Statement,Fluentscript.Lib.Helpers,FluentHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FluentHelper.cs,ParseFuncParameters,The length of the statement  "		if ((meta == null && token.Kind == TokenKind.Ident && peek == Tokens.Colon) || (token.Kind == TokenKind.Ident && isParamNameMatch && !isVar) || (token.Kind == TokenKind.Ident && !isParamNameMatch && !isVar && peek == Tokens.Colon) || (isKeywordParamName && !isVar)) { " is 267.
Long Statement,Fluentscript.Lib.Helpers,FunctionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallFunction,The length of the statement  "		result = FunctionHelper.CallFunctionInScript (ctx' visitor' functionName' func' fexpr.ParamListExpressions' fexpr.ParamList' resolveParams); " is 140.
Long Statement,Fluentscript.Lib.Helpers,FunctionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallMemberOnClass,The length of the statement  "		result = FunctionHelper.MethodCall (ctx' obj' type' memberAccess.Method' paramListExpressions' paramList' true' visitor); " is 121.
Long Statement,Fluentscript.Lib.Helpers,MemberHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\MemberHelper.cs,GetMemberAccess,The length of the statement  "	var member = MemberHelper.GetExternalTypeMember (node' lclassType.DataType' variableName' lclass.Value' memberName' false); " is 123.
Long Statement,Fluentscript.Lib.Helpers,MemberHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\MemberHelper.cs,GetExternalTypeMember,The length of the statement  "	var members = type.GetMember (memberName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.IgnoreCase); " is 135.
Long Statement,Fluentscript.Lib.Helpers,ParamHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\ParamHelper.cs,ResolveParametersForScriptFunction,The length of the statement  "	ResolveParameters (totalParams' paramListExpressions' paramList' namedParam => meta.ArgumentsLookup [namedParam.Name].Index' namedParam => meta.ArgumentsLookup.ContainsKey (namedParam.Name)' visitor); " is 200.
Long Statement,Fluentscript.Lib.Helpers,ParamHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\ParamHelper.cs,ResolveParametersForMethodCall,The length of the statement  "	ResolveParameters (parameters.Length' paramListExpressions' paramList' namedParam => map [namedParam.Name].Position' namedParam => map.ContainsKey (namedParam.Name)' visitor); " is 175.
Long Statement,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,The length of the statement  "	var pattern = @"(?<hours>[0-9]+)((\:)(?<minutes>[0-9]{2}))?((\:)(?<seconds>[0-9]{2}))?\s*(?<ampm>(am|a\.m\.|a\.m|pm|p\.m\.|p\.m))?\s*"; " is 135.
Long Statement,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,PeekWord,The length of the statement  "		var isValidChar = (('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') || ch == '$' || ch == '_' || (!first && '0' <= ch && ch <= '9')); " is 137.
Long Statement,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,PeekCustomLimitedWord,The length of the statement  "		var isValidChar = (('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') || ch == '$' || ch == '_' || (!first && '0' <= ch && ch <= '9')); " is 137.
Long Statement,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanId,The length of the statement  "		var isValidChar = (('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') || ch == '$' || ch == '_' || (!first && '0' <= ch && ch <= '9')); " is 137.
Long Statement,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanUri,The length of the statement  "		if (ch == SPACE || ch == TAB || ch == '(' || ch == ')' || ch == ''' || ch == ';' || ch == '[' || ch == ']' || ch == '\r' || ch == '\n' || ch == '{' || ch == '}') { " is 163.
Long Statement,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanWordUntilChars,The length of the statement  "		if (('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') || ('0' <= ch && ch <= '9') || ch == '_' || (!first && ch == '-') || ch == extra1 || ch == extra2) { " is 157.
Long Statement,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,IsOp,The length of the statement  "	if (c == '*' || c == '/' || c == '+' || c == '-' || c == '%' || c == '<' || c == '>' || c == '!' || c == '=' || c == '&' || c == '|') " is 133.
Long Statement,Fluentscript.Lib.Parser,Interpreter,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Interpreter.cs,RegisterMetaPlugins,The length of the statement  "		throw new DirectoryNotFoundException ("Directory for meta plugins : " + this.Settings.PluginsFolder + " does not exist"); " is 121.
Long Statement,Fluentscript.Lib.Parser,Interpreter,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Interpreter.cs,ToTokens,The length of the statement  "	}' () => string.Format ("Last token: {0}' Line : {1}' Pos : {2} "' lexer.LastToken.Text' lexer.State.Line' lexer.State.LineCharPosition)); " is 138.
Long Statement,Fluentscript.Lib.Parser,Interpreter,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Interpreter.cs,InitSystemFunctions,The length of the statement  "	_parser.Context.ExternalFunctions.Register ("print"' (objname' method' exp) => LogHelper.Print (_settings' exp' false)); " is 120.
Long Statement,Fluentscript.Lib.Parser,Interpreter,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Interpreter.cs,InitSystemFunctions,The length of the statement  "	_parser.Context.ExternalFunctions.Register ("println"' (objname' method' exp) => LogHelper.Print (_settings' exp' true)); " is 121.
Long Statement,Fluentscript.Lib.Parser,Interpreter,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Interpreter.cs,InitSystemFunctions,The length of the statement  "	_parser.Context.ExternalFunctions.Register ("metacompiler.*"' (objname' method' exp) => RunCompilerMethod (objname' method' _settings' exp)); " is 141.
Long Statement,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,GetTokenBatch,The length of the statement  "			throw new LangException ("Syntax Error"' "Unexpected token"' string.Empty' _scanner.State.Line' _scanner.State.LineCharPosition); " is 129.
Long Statement,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The length of the statement  "	if ((t.Token.Kind == TokenKind.Symbol || t.Token.Type == TokenTypes.Unknown || t.Token.Type == TokenTypes.WhiteSpace) && _scanner.State.Pos == pos) " is 147.
Long Statement,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadString,The length of the statement  "			throw new LangException ("Syntax Error"' "Unterminated string"' string.Empty' _scanner.State.Line' _scanner.State.LineCharPosition); " is 132.
Long Statement,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedString,The length of the statement  "		throw new LangException ("Syntax Error"' "Unterminated string"' string.Empty' _scanner.State.Line' _scanner.State.LineCharPosition); " is 132.
Long Statement,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedTokens,The length of the statement  "			throw new LangException ("syntax"' "unexpected text in string"' string.Empty' _scanner.State.Line' _scanner.State.LineCharPosition); " is 132.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseStatement,The length of the statement  "		if (!isNewLineOrComment && hasTokenReplacePlugins && (nexttoken.Kind == TokenKind.Ident) && _context.PluginsMeta.CanHandleTok (nexttoken' true)) { " is 146.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The length of the statement  "		if (enableIdentTokenTextAsEndToken && next.Token.Kind == TokenKind.Ident && identEndTokens.ContainsKey (next.Token.Text)) " is 121.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The length of the statement  "			exp = token == Tokens.Null ? Exprs.Const (LObjects.Null' tokenData) : Exprs.Const (TokenHelper.ConvertToLangLiteral (token)' tokenData); " is 136.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The length of the statement  "				exp = ParseExpression (endTokens' handleMathOperator' handleSingleExpression' enablePlugins' passNewLine' enableIdentTokenTextAsEndToken); " is 138.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The length of the statement  "		else if (token.Kind == TokenKind.Symbol && handleMathOperator && token != Tokens.RightParenthesis && Terminators.ExpMathShuntingYard.ContainsKey (token)) { " is 155.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The length of the statement  "		} else if (((token.Kind == TokenKind.Keyword) || (token.Kind == TokenKind.Symbol)) && token != Tokens.RightBracket && token != Tokens.RightBrace) { " is 147.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseInterpolatedExpression,The length of the statement  "			exp = token == Tokens.Null ? Exprs.Const (LObjects.Null' tokenData) : Exprs.Const (TokenHelper.ConvertToLangLiteral (token)' tokenData); " is 136.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpressionsWithPrecedence,The length of the statement  "		if (current != Tokens.EndToken && enableTokenPlugins && hasTokenReplacePlugins && _context.PluginsMeta.CanHandleTok (current' true)) { " is 134.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseFuncExpression,The length of the statement  "		FluentHelper.ParseFuncParameters (funcExp.ParamListExpressions' _tokenIt' this' expectParenthesis' !expectParenthesis' meta); " is 125.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseFuncExpression,The length of the statement  "		FluentHelper.ParseFuncParameters (funcExp.ParamListExpressions' _tokenIt' this' expectParenthesis' !expectParenthesis' null); " is 125.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseFuncExpression,The length of the statement  "		FluentHelper.ParseFuncParameters (funcExp.ParamListExpressions' _tokenIt' this' expectParenthesis' !expectParenthesis' meta); " is 125.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseIdExpression,The length of the statement  "	bool isMemberAccessAhead = (aheadToken.Token == Tokens.LeftParenthesis || aheadToken.Token == Tokens.LeftBracket || aheadToken.Token == Tokens.Dot); " is 148.
Long Statement,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,IsIncrementOp,The length of the statement  "	if (token == Tokens.Increment || token == Tokens.Decrement || token == Tokens.IncrementAdd || token == Tokens.IncrementDivide || token == Tokens.IncrementMultiply || token == Tokens.IncrementSubtract) " is 200.
Long Statement,Fluentscript.Lib.Parser,ParserBase,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\ParserBase.cs,HandleComment,The length of the statement  "	if (text.Contains ("@summary") || text.Contains (" @summary") || text.Contains ("@scriptmeta-start") || text.Contains (" @scriptmeta-start")) { " is 143.
Long Statement,Fluentscript.Lib.Parser,ParserBase,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\ParserBase.cs,ApplyDocTagsToFunction,The length of the statement  "			//_tokenIt.BuildSyntaxException("Doc argument name : '" + arg.Name + "' does not exist in function : " + func.Meta.Name); " is 121.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Init,The length of the statement  "	// 5. llk is used to reduce memory footprint for storing tokens. At any one point there is a list of llk count tokens available " is 127.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Init,The length of the statement  "	// 6. if llk is not set ( eg. -1 ) then the number of tokens retrieved from the lexer equal the number of tokens in a script " is 124.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Peek,The length of the statement  "		else if (next.Token != Tokens.WhiteSpace && next.Token != Tokens.CommentMLine && next.Token != Tokens.CommentSLine && next.Token != Tokens.NewLine) " is 147.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Advance,The length of the statement  "		else if (NextToken.Token != Tokens.WhiteSpace && NextToken.Token != Tokens.CommentMLine && NextToken.Token != Tokens.NewLine) { " is 127.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildSyntaxExpectedException,The length of the statement  "	return new LangException ("Syntax Error"' string.Format ("Expected {0} but found '{1}'"' expected' NextToken.Token.Text)' ScriptPath' NextToken.Line' NextToken.LineCharPos); " is 173.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildSyntaxExpectedTokenException,The length of the statement  "	return new LangException ("Syntax Error"' string.Format ("Expected {0} but found '{1}'"' token.Text' NextToken.Token.Text)' ScriptPath' NextToken.Line' NextToken.LineCharPos); " is 175.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildSyntaxUnexpectedTokenException,The length of the statement  "	return new LangException ("Syntax Error"' string.Format ("Unexpected token found '{0}'"' NextToken.Token.Text)' ScriptPath' NextToken.Line' NextToken.LineCharPos); " is 163.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildSyntaxUnexpectedTokenException,The length of the statement  "	return new LangException ("Syntax Error"' string.Format ("Unexpected token found '{0}'"' token.Token.Text)' ScriptPath' token.Line' token.LineCharPos); " is 151.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildSyntaxUnexpectedTokenException,The length of the statement  "	return new LangException ("Syntax Error"' string.Format ("Unexpected token found {0}"' unexpectedTokenText)' ScriptPath' token.Line' token.LineCharPos); " is 152.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildEndOfScriptException,The length of the statement  "	return new LangException ("Syntax Error"' "Unexpected end of script"' ScriptPath' NextToken.Line' NextToken.LineCharPos); " is 121.
Long Statement,Fluentscript.Lib.Parser.Integration,RegisteredPlugins,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Integration\Plugins.cs,GetPlugin,The length of the statement  "	if ((token.Kind == TokenKind.Ident || token.Kind == TokenKind.Keyword || token.Kind == TokenKind.Symbol) && map.ContainsKey (name)) { " is 133.
Long Statement,Fluentscript.Lib.Parser.Integration,RegisteredTypes,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Integration\RegisteredTypes.cs,Create,The length of the statement  "	object customType = args == null ? Activator.CreateInstance (registeredType.DataType) : Activator.CreateInstance (registeredType.DataType' args); " is 145.
Long Statement,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The length of the statement  "		if (match.TokenType == "@exprTerminators" && (Terminators.ExpFlexibleEnd.ContainsKey (token.Token) || Terminators.ExpThenEnd.ContainsKey (token.Token))) { " is 154.
Long Statement,Fluentscript.Lib.Parser.Core,Limits,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Core\Limits.cs,CheckParserExpression,The length of the statement  "	if (_hasSettings && _ctx.Settings.MaxConsequetiveExpressions > 0 && expressionCount > _ctx.Settings.MaxConsequetiveExpressions) " is 127.
Long Statement,Fluentscript.Lib.Parser.Core,Limits,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Core\Limits.cs,CheckParserExpression,The length of the statement  "		throw BuildLimitException (node' "consequetive expressions (" + expressionCount + ")"' _ctx.Settings.MaxConsequetiveExpressions); " is 129.
Long Statement,Fluentscript.Lib.Parser.Core,Limits,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Core\Limits.cs,CheckParserMemberAccess,The length of the statement  "	if (_hasSettings && _ctx.Settings.MaxConsequetiveMemberAccess > 0 && memberAccessCount > _ctx.Settings.MaxConsequetiveMemberAccess) " is 131.
Long Statement,Fluentscript.Lib.Parser.Core,Limits,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Core\Limits.cs,CheckParserMemberAccess,The length of the statement  "		throw BuildLimitException (node' "consequetive member access ( '()'[]'.' )"' _ctx.Settings.MaxConsequetiveMemberAccess); " is 120.
Long Statement,Fluentscript.Lib.Plugins.Parser,AggregatePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AggregatePlugin.cs,CanHandle,The length of the statement  "	if (next == Tokens.LeftParenthesis || string.Compare (next.Text' "of"' StringComparison.InvariantCultureIgnoreCase) == 0) " is 121.
Long Statement,Fluentscript.Lib.Plugins.Parser,EnvLexPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\EnvPlugin.cs,Parse,The length of the statement  "	if (string.Compare (part.Text' "sys"' StringComparison.InvariantCultureIgnoreCase) == 0 || string.Compare (part.Text' "user"' StringComparison.InvariantCultureIgnoreCase) == 0) { " is 178.
Long Statement,Fluentscript.Lib.Plugins.Parser,EnvExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\EnvPlugin.cs,DoEvaluate,The length of the statement  "	EnvironmentVariableTarget target = (_scope == "sys") ? EnvironmentVariableTarget.Machine : EnvironmentVariableTarget.User; " is 122.
Long Statement,Fluentscript.Lib.Plugins.Parser,FluentMemberPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentMemberPlugin.cs,Parse,The length of the statement  "		if (helper.IsClassMethod (matchResult.Item1' memExp.MemberName) || helper.IsInstanceMethod (matchResult.Item1' memExp.MemberName)) { " is 132.
Long Statement,Fluentscript.Lib.Plugins.Parser,PercentPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PercentPlugin.cs,Parse,The length of the statement  "		throw _tokenIt.BuildSyntaxException ("number required when percentage( % ) : " + percentToken.Token.Text' percentToken); " is 120.
Long Statement,Fluentscript.Lib.Plugins.Parser,SortPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\SortPlugin.cs,Parse,The length of the statement  "	if (string.Compare (ascDesc' "asc"' StringComparison.InvariantCultureIgnoreCase) == 0 || string.Compare (ascDesc' "desc"' StringComparison.InvariantCultureIgnoreCase) == 0) { " is 174.
Long Statement,Fluentscript.Lib.Plugins.Parser,VariablePathPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\VariablePathPlugin.cs,AppendPathPart,The length of the statement  "	var start = isConstant ? Exprs.Const (new LString (text)' _tokenIt.NextToken) as Expr : Exprs.Ident (text' _tokenIt.NextToken) as Expr; " is 135.
Long Statement,Fluentscript.Lib.Runtime,EvalHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\EvalHelper.cs,Compare,The length of the statement  "	else if ((left.Type == LTypes.Date && right.Type == LTypes.Time) || (left.Type == LTypes.Time && right.Type == LTypes.Date)) " is 124.
Long Statement,Fluentscript.Lib.Runtime,EvalHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\EvalHelper.cs,IncrementString,The length of the statement  "		throw new LangException ("Syntax Error"' "string operation with " + expr.Op.ToString () + " not supported"' expr.Ref.ScriptName' expr.Ref.Line' expr.Ref.CharPos); " is 162.
Long Statement,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDuration,The length of the statement  "			throw new LangException ("TypeError"' "Days away must of type of number"' expr.Ref.ScriptName' expr.Ref.Line' expr.Ref.CharPos); " is 128.
Long Statement,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitForEach,The length of the statement  "		var current = enumerator.Current is LObject ? enumerator.Current : LangTypeHelper.ConvertToLangClass (enumerator.Current); " is 122.
Long Statement,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitFunctionCall,The length of the statement  "		result = FunctionHelper.CallFunctionInScript (this.Ctx' this' fexpr.Meta.Name' fexpr' expr.ParamListExpressions' expr.ParamList' resolveParams); " is 144.
Long Statement,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitFunctionCall,The length of the statement  "		result = FunctionHelper.CallMemberOnBasicType (this.Ctx' expr' maccess' expr.ParamListExpressions' expr.ParamList' this); " is 121.
Long Statement,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitFunctionCall,The length of the statement  "	} // CASE 5: Member call via "." : either static or instance method call. e.g. Person.Create() or instance1.FullName() e.g. " is 123.
Long Statement,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,IsMemberCall,The length of the statement  "	if (maccess.IsInternalExternalFunctionCall () || (maccess.Mode == MemberMode.MethodMember || maccess.Mode == MemberMode.PropertyMember && maccess.Type != null) || maccess.Mode == MemberMode.CustObjMethodInstance || maccess.Mode == MemberMode.CustObjMethodStatic) " is 262.
Long Statement,Fluentscript.Lib.Runtime.Switches,InteractiveSwitch,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Switches\InteractiveSwitch.cs,DoExecute,The length of the statement  "		if (string.Compare (script' "exit"' StringComparison.InvariantCultureIgnoreCase) == 0 || string.Compare (script' "Exit"' StringComparison.InvariantCultureIgnoreCase) == 0 || string.Compare (script' "EXIT"' StringComparison.InvariantCultureIgnoreCase) == 0) " is 256.
Long Statement,Fluentscript.Lib._Core,RunResult,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\RunResult.cs,ToString,The length of the statement  "	string result = string.Format (template' Success' Duration.Milliseconds' StartTime.ToShortTimeString ()' EndTime.ToShortTimeString ()' TotalErrors' Message); " is 157.
Long Statement,Fluentscript.Lib._Core,TokenData,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\TokenData.cs,ToString,The length of the statement  "	string info = string.Format ("Index: {0}' Line: {1}' CharPos: {2}' Pos: {3}' Type: {4}' Text: {5}"' Index' Line' LineCharPos' Pos' tokenType' text); " is 148.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "ArrayExpr"' name: "Array"' extends: "IndexableExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "List<Expr>:Exprs")' " is 349.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "AnyOfExpr"' name: "AnyOf"' extends: "Expr"' implements: "IParameterExpression"' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:CompareExpr;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList")' " is 425.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "AssignExpr"' name: "Assign"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:VarExp;Expr:ValueExp;bool:IsDeclaration")' " is 370.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "AssignMultiExpr"' name: "AssignMulti"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "List<AssignExpr>:Assignments")' " is 364.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "BinaryExpr"' name: "Binary"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: true' createNewSymScope: false' hasOperator: true' qualifiedName: "return \"\";"' extraProps: null)' " is 326.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "CompareExpr"' name: "Compare"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: true' createNewSymScope: false' hasOperator: true' qualifiedName: "return \"\";"' extraProps: null)' " is 328.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "ConditionExpr"' name: "Condition"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: true' createNewSymScope: false' hasOperator: true' qualifiedName: "return \"\";"' extraProps: null)' " is 332.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "ConstantExpr"' name: "Constant"' extends: "ValueExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: null)' " is 337.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "DayExpr"' name: "Day"' extends: "ValueExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:Name;string:Time")' " is 348.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "DurationExpr"' name: "Duration"' extends: "ValueExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:Duration;string:Mode")' " is 362.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "DateExpr"' name: "Date"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "int:Month;int:Day;int:Year;string:Time")' " is 360.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "DateRelativeExpr"' name: "DateRelative"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "int:Month;int:DayOfTheWeek;string:RelativeDay")' " is 383.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "FunctionCallExpr"' name: "FunctionCall"' extends: "Expr"' implements: "IParameterExpression"' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return this.NameExp != null ? this.NameExp.ToQualifiedName() : \"\";"' extraProps: "Expr:NameExp;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList;FunctionExpr:Function;bool:RetainEvaluatedParams;bool:IsScopeVariable")' " is 561.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "FunctionExpr"' name: "Function"' extends: "BlockExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "FunctionMetaData:Meta;long:ExecutionCount;long:ErrorCount;bool:HasReturnValue;object:ReturnValue;List<object>:ArgumentValues;bool:ContinueRunning")' " is 478.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "IndexExpr"' name: "Index"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:IndexExp;Expr:VarExp;bool:IsAssignment")' " is 367.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "InterpolatedExpr"' name: "Interpolated"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "List<Expr>:Expressions")' " is 360.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "ListCheckExpr"' name: "ListCheck"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:NameExp")' " is 344.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "MapExpr"' name: "Map"' extends: "IndexableExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "List<Tuple<string'Expr>>:Expressions")' " is 365.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "MemberAccessExpr"' name: "MemberAccess"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return this.VarExp.ToQualifiedName() + \".\" + this.MemberName;"' extraProps: "string:MemberName;Expr:VarExp;bool:IsAssignment")' " is 436.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "NamedParameterExpr"' name: "NamedParameter"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return this.Name;"' extraProps: "string:Name;Expr:Value;int:Pos")' " is 377.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "NegateExpr"' name: "Negate"' extends: "VariableExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:Expression")' " is 349.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "NewExpr"' name: "New"' extends: "Expr"' implements: "IParameterExpression"' token: "new"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:TypeName;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList")' " is 422.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "ParameterExpr"' name: "Parameter"' extends: "Expr"' implements: "IParameterExpression"' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "FunctionMetaData:Meta;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList;")' " is 439.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "RunExpr"' name: "Run"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:FuncName;string:Mode;Expr:FuncCallOnAfterExpr;Expr:FuncCallExpr")' " is 390.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "TableExpr"' name: "Table"' extends: "IndexableExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "List<string>:Fields")' " is 352.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "UnaryExpr"' name: "Unary"' extends: "VariableExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Operator:Op;Expr:Expression;double:Increment")' " is 376.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "BreakExpr"' name: "Break"' extends: "Expr"' implements: ""' token: "break"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: true' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: null)' " is 328.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "ContinueExpr"' name: "Continue"' extends: "Expr"' implements: ""' token: "continue"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: true' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: null)' " is 337.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "ForEachExpr"' name: "ForEach"' extends: "WhileExpr"' implements: ""' token: "for"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:VarName;Expr:SourceExpr;string:SourceName")' " is 380.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "ForExpr"' name: "For"' extends: "WhileExpr"' implements: ""' token: "for"' createPlugin: true' pluginImplements: ""' precedence: 2' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:Start;Expr:Increment")' " is 349.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "FunctionDeclareExpr"' name: "FunctionDeclare"' extends: "Expr"' implements: ""' token: "function"' createPlugin: true' pluginImplements: "IParserCallbacks"' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "FunctionExpr:Function")' " is 385.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "IfExpr"' name: "If"' extends: "ConditionalBlockExpr"' implements: ""' token: "if"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "BlockExpr:Else")' " is 346.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "LambdaExpr"' name: "Lambda"' extends: "Expr"' implements: ""' token: "function"' createPlugin: true' pluginImplements: "IParserCallbacks"' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "FunctionExpr:Expr")' " is 363.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "ReturnExpr"' name: "Return"' extends: "Expr"' implements: ""' token: "return"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: true' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:Exp")' " is 337.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "ThrowExpr"' name: "Throw"' extends: "Expr"' implements: ""' token: "throw"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: true' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:Exp")' " is 334.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "TryCatchExpr"' name: "TryCatch"' extends: "Expr"' implements: "IBlockExpr"' token: "try"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:ErrorName;List<Expr>:prop-Statements;BlockExpr:Catch")' " is 398.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "WhileExpr"' name: "While"' extends: "ConditionalBlockExpr"' implements: "ILoop"' token: "while"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "bool:prop-DoBreakLoop;bool:prop-DoContinueLoop;bool:prop-DoContinueRunning")' " is 420.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "		new ExprSpec (className: "VariableExpr"' name: "Variable"' extends: "Expr"' implements: ""' token: "@ident"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return this.Name;"' extraProps: "string:Name")' " is 351.
Complex Conditional,Fluentscript.Lib.Helpers,ConversionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\ConversionHelper.cs,Convert_String_To_Bool,The conditional expression  "s == "yes" || s == "true" || s == "1" || s == "ok" || s == "on""  is complex.
Complex Conditional,Fluentscript.Lib.Helpers,FluentHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FluentHelper.cs,ParseFuncParameters,The conditional expression  "(meta == null && token.Kind == TokenKind.Ident && peek == Tokens.Colon) || (token.Kind == TokenKind.Ident && isParamNameMatch && !isVar) || (token.Kind == TokenKind.Ident && !isParamNameMatch && !isVar && peek == Tokens.Colon) || (isKeywordParamName && !isVar)"  is complex.
Complex Conditional,Fluentscript.Lib.Helpers,FunctionHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallFunctionInScript,The conditional expression  "resolveParams && function != null && (hasArguments || hasParams)"  is complex.
Complex Conditional,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,The conditional expression  "string.IsNullOrEmpty (ampm) || ampm == "am" || ampm == "a.m" || ampm == "a.m.""  is complex.
Complex Conditional,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CanCreateDateFrom,The conditional expression  "paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,PeekCustomLimitedWord,The conditional expression  "!isValidChar && (hasExtra1 && ch != extra1) && (hasExtra2 && ch != extra2)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanUri,The conditional expression  "ch == SPACE || ch == TAB || ch == '(' || ch == ')' || ch == ''' || ch == ';' || ch == '[' || ch == ']' || ch == '\r' || ch == '\n' || ch == '{' || ch == '}'"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanWordUntilChars,The conditional expression  "('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') || ('0' <= ch && ch <= '9') || ch == '_' || (!first && ch == '-') || ch == extra1 || ch == extra2"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,IsOp,The conditional expression  "c == '*' || c == '/' || c == '+' || c == '-' || c == '%' || c == '<' || c == '>' || c == '!' || c == '=' || c == '&' || c == '|'"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The conditional expression  "(t.Token.Kind == TokenKind.Symbol || t.Token.Type == TokenTypes.Unknown || t.Token.Type == TokenTypes.WhiteSpace) && _scanner.State.Pos == pos"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseStatement,The conditional expression  "!isNewLineOrComment && hasTokenReplacePlugins && (nexttoken.Kind == TokenKind.Ident) && _context.PluginsMeta.CanHandleTok (nexttoken' true)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The conditional expression  "okToCheckPlugins && enablePlugins && hasTokenReplacePlugins && _context.PluginsMeta.CanHandleTok (token' true)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The conditional expression  "okToCheckPlugins && enablePlugins && hasMetaPlugins && _context.PluginsMeta.CanHandleExp (token)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The conditional expression  "okToCheckPlugins && enablePlugins && hasPlugins && _context.Plugins.CanHandleExp (token)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The conditional expression  "token.Kind == TokenKind.Symbol && handleMathOperator && token != Tokens.RightParenthesis && Terminators.ExpMathShuntingYard.ContainsKey (token)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The conditional expression  "((token.Kind == TokenKind.Keyword) || (token.Kind == TokenKind.Symbol)) && token != Tokens.RightBracket && token != Tokens.RightBrace"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpressionsWithPrecedence,The conditional expression  "current != Tokens.EndToken && enableTokenPlugins && hasTokenReplacePlugins && _context.PluginsMeta.CanHandleTok (current' true)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseIdExpression,The conditional expression  "withEnabled && !isFunction && !isVariable && !isModule && !isExternalFunc && varName != Exprs.WithName ()"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,IsExplicitIdentQualifierExpression,The conditional expression  "isVar && (ahead.Token == Tokens.Dot || ahead.Token == Tokens.LeftBracket || ahead.Token == Tokens.Assignment)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,IsIncrementOp,The conditional expression  "token == Tokens.Increment || token == Tokens.Decrement || token == Tokens.IncrementAdd || token == Tokens.IncrementDivide || token == Tokens.IncrementMultiply || token == Tokens.IncrementSubtract"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,ParserBase,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\ParserBase.cs,HandleComment,The conditional expression  "text.Contains ("@summary") || text.Contains (" @summary") || text.Contains ("@scriptmeta-start") || text.Contains (" @scriptmeta-start")"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,IsEndOfStmtOrBlock,The conditional expression  "t == Tokens.Semicolon || t == Tokens.NewLine || t == Tokens.EndToken || t == Tokens.RightBrace"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Peek,The conditional expression  "next.Token != Tokens.WhiteSpace && next.Token != Tokens.CommentMLine && next.Token != Tokens.CommentSLine && next.Token != Tokens.NewLine"  is complex.
Complex Conditional,Fluentscript.Lib.Parser.Integration,RegisteredPlugins,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Integration\Plugins.cs,GetPlugin,The conditional expression  "(token.Kind == TokenKind.Ident || token.Kind == TokenKind.Keyword || token.Kind == TokenKind.Symbol) && map.ContainsKey (name)"  is complex.
Complex Conditional,Fluentscript.Lib.Plugins.Parser,NamedIndexPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\NamedIndexPlugin.cs,CanHandle,The conditional expression  "nextText != "st" && nextText != "nd" && nextText != "rd" && nextText != "th""  is complex.
Complex Conditional,Fluentscript.Lib.Runtime,EvalHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\EvalHelper.cs,Compare,The conditional expression  "(left.Type == LTypes.Date && right.Type == LTypes.Time) || (left.Type == LTypes.Time && right.Type == LTypes.Date)"  is complex.
Complex Conditional,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,IsMemberCall,The conditional expression  "maccess.IsInternalExternalFunctionCall () || (maccess.Mode == MemberMode.MethodMember || maccess.Mode == MemberMode.PropertyMember && maccess.Type != null) || maccess.Mode == MemberMode.CustObjMethodInstance || maccess.Mode == MemberMode.CustObjMethodStatic"  is complex.
Complex Conditional,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The conditional expression  "c == '<' && n1 == '!' && n2 == '-' && n3 == '-'"  is complex.
Complex Conditional,Fluentscript.Lib.Types,LTypeMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\LTypeMethods.cs,ExecuteMethod,The conditional expression  "!isRequired && arg.DefaultValue == null && arg.Name == "params" && ndx >= parameters.Length"  is complex.
Complex Conditional,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFrom,The conditional expression  "paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6"  is complex.
Complex Conditional,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFromArgs,The conditional expression  "paramCount == 0 || paramCount == 1 || paramCount == 3 || paramCount == 6"  is complex.
Empty Catch Block,Fluentscript.Lib.Parser.Integration,RegisteredPlugins,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Integration\Plugins.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Fluentscript.Lib.Plugins.Parser,LogExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\LogPlugin.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Fluentscript.Lib.Plugins.Parser,TypeOperationsExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TypeOperationsPlugin.cs,TryConvertValue,The method has an empty catch block.
Magic Number,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: if (totalFields >= 2)  	arg.Desc = fields [1].Trim ();  
Magic Number,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: if (totalFields >= 3)  	arg.Type = fields [2].Trim ();  
Magic Number,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: if (totalFields >= 3)  	arg.Type = fields [2].Trim ();  
Magic Number,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: arg.Type = fields [2].Trim ();  
Magic Number,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: if (totalFields >= 4)  	arg.Alias = fields [3].Trim ();  
Magic Number,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: if (totalFields >= 4)  	arg.Alias = fields [3].Trim ();  
Magic Number,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: arg.Alias = fields [3].Trim ();  
Magic Number,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: if (totalFields >= 5) {  	var example = fields [4];  	ParseExamples (arg' example);  }  
Magic Number,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: if (totalFields >= 5) {  	var example = fields [4];  	ParseExamples (arg' example);  }  
Magic Number,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseExample,The following statement contains a magic number: example.Desc = exText.Substring (9' ndxFirstComma - 9).Trim ();  
Magic Number,Fluentscript.Lib.Helpers,DocHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseExample,The following statement contains a magic number: example.Desc = exText.Substring (9' ndxFirstComma - 9).Trim ();  
Magic Number,Fluentscript.Lib.Helpers,LangHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\LangHelper.cs,ProcessShuntingYardList,The following statement contains a magic number: while (index < stack.Count && stack.Count > 0) {  	// Keep moving forward to the first operator * - + / && that is found    	// This is a postfix algorithm so it works by creating an expression  	// from the last 2 items behind an operator.  	if (!(stack [index] is TokenData)) {  		index++;  		continue;  	}  	// At this point... we hit an operator   	// So get the last 2 items on the stack ( they have to be expressions )  	// left  is 2 behind current position  	// right is 1 behind current position  	var left = stack [index - 2] as Expr;  	var right = stack [index - 1] as Expr;  	TokenData tdata = stack [index] as TokenData;  	Token top = tdata.Token;  	Operator op = Operators.ToOp (top.Text);  	Expr exp = null;  	if (Operators.IsMath (op))  		exp = Exprs.Binary (left' op' right' tdata);  	else if (Operators.IsConditional (op))  		exp = Exprs.Condition (left' op' right' tdata);  	else if (Operators.IsCompare (op))  		exp = Exprs.Compare (left' op' right' tdata);  	parser.SetupContext (exp' tdata);  	stack.RemoveRange (index - 2' 2);  	index = index - 2;  	stack [index] = exp;  	index++;  }  
Magic Number,Fluentscript.Lib.Helpers,LangHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\LangHelper.cs,ProcessShuntingYardList,The following statement contains a magic number: while (index < stack.Count && stack.Count > 0) {  	// Keep moving forward to the first operator * - + / && that is found    	// This is a postfix algorithm so it works by creating an expression  	// from the last 2 items behind an operator.  	if (!(stack [index] is TokenData)) {  		index++;  		continue;  	}  	// At this point... we hit an operator   	// So get the last 2 items on the stack ( they have to be expressions )  	// left  is 2 behind current position  	// right is 1 behind current position  	var left = stack [index - 2] as Expr;  	var right = stack [index - 1] as Expr;  	TokenData tdata = stack [index] as TokenData;  	Token top = tdata.Token;  	Operator op = Operators.ToOp (top.Text);  	Expr exp = null;  	if (Operators.IsMath (op))  		exp = Exprs.Binary (left' op' right' tdata);  	else if (Operators.IsConditional (op))  		exp = Exprs.Condition (left' op' right' tdata);  	else if (Operators.IsCompare (op))  		exp = Exprs.Compare (left' op' right' tdata);  	parser.SetupContext (exp' tdata);  	stack.RemoveRange (index - 2' 2);  	index = index - 2;  	stack [index] = exp;  	index++;  }  
Magic Number,Fluentscript.Lib.Helpers,LangHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\LangHelper.cs,ProcessShuntingYardList,The following statement contains a magic number: while (index < stack.Count && stack.Count > 0) {  	// Keep moving forward to the first operator * - + / && that is found    	// This is a postfix algorithm so it works by creating an expression  	// from the last 2 items behind an operator.  	if (!(stack [index] is TokenData)) {  		index++;  		continue;  	}  	// At this point... we hit an operator   	// So get the last 2 items on the stack ( they have to be expressions )  	// left  is 2 behind current position  	// right is 1 behind current position  	var left = stack [index - 2] as Expr;  	var right = stack [index - 1] as Expr;  	TokenData tdata = stack [index] as TokenData;  	Token top = tdata.Token;  	Operator op = Operators.ToOp (top.Text);  	Expr exp = null;  	if (Operators.IsMath (op))  		exp = Exprs.Binary (left' op' right' tdata);  	else if (Operators.IsConditional (op))  		exp = Exprs.Condition (left' op' right' tdata);  	else if (Operators.IsCompare (op))  		exp = Exprs.Compare (left' op' right' tdata);  	parser.SetupContext (exp' tdata);  	stack.RemoveRange (index - 2' 2);  	index = index - 2;  	stack [index] = exp;  	index++;  }  
Magic Number,Fluentscript.Lib.Helpers,LangHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\LangHelper.cs,ProcessShuntingYardList,The following statement contains a magic number: while (index < stack.Count && stack.Count > 0) {  	// Keep moving forward to the first operator * - + / && that is found    	// This is a postfix algorithm so it works by creating an expression  	// from the last 2 items behind an operator.  	if (!(stack [index] is TokenData)) {  		index++;  		continue;  	}  	// At this point... we hit an operator   	// So get the last 2 items on the stack ( they have to be expressions )  	// left  is 2 behind current position  	// right is 1 behind current position  	var left = stack [index - 2] as Expr;  	var right = stack [index - 1] as Expr;  	TokenData tdata = stack [index] as TokenData;  	Token top = tdata.Token;  	Operator op = Operators.ToOp (top.Text);  	Expr exp = null;  	if (Operators.IsMath (op))  		exp = Exprs.Binary (left' op' right' tdata);  	else if (Operators.IsConditional (op))  		exp = Exprs.Condition (left' op' right' tdata);  	else if (Operators.IsCompare (op))  		exp = Exprs.Compare (left' op' right' tdata);  	parser.SetupContext (exp' tdata);  	stack.RemoveRange (index - 2' 2);  	index = index - 2;  	stack [index] = exp;  	index++;  }  
Magic Number,Fluentscript.Lib.Helpers,LangHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\LangHelper.cs,ProcessShuntingYardList,The following statement contains a magic number: stack.RemoveRange (index - 2' 2);  
Magic Number,Fluentscript.Lib.Helpers,LangHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\LangHelper.cs,ProcessShuntingYardList,The following statement contains a magic number: stack.RemoveRange (index - 2' 2);  
Magic Number,Fluentscript.Lib.Helpers,LangHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\LangHelper.cs,ProcessShuntingYardList,The following statement contains a magic number: index = index - 2;  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CanCreateTimeFrom,The following statement contains a magic number: if (paramCount == 0 || paramCount == 3 || paramCount == 4)  	return true;  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CanCreateTimeFrom,The following statement contains a magic number: if (paramCount == 0 || paramCount == 3 || paramCount == 4)  	return true;  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateTimeFrom,The following statement contains a magic number: if (len == 3)  	return new TimeSpan (timeArgs [0]' timeArgs [1]' timeArgs [2]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateTimeFrom,The following statement contains a magic number: if (len == 3)  	return new TimeSpan (timeArgs [0]' timeArgs [1]' timeArgs [2]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateTimeFrom,The following statement contains a magic number: return new TimeSpan (timeArgs [0]' timeArgs [1]' timeArgs [2]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateTimeFrom,The following statement contains a magic number: return new TimeSpan (timeArgs [0]' timeArgs [1]' timeArgs [2]' timeArgs [3]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateTimeFrom,The following statement contains a magic number: return new TimeSpan (timeArgs [0]' timeArgs [1]' timeArgs [2]' timeArgs [3]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,The following statement contains a magic number: if (hours != 12 && !isAm)  	hours += 12;  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,The following statement contains a magic number: if (hours != 12 && !isAm)  	hours += 12;  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,The following statement contains a magic number: hours += 12;  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,The following statement contains a magic number: if (hours == 12 && isAm)  	return new Tuple<TimeSpan' bool' string> (new TimeSpan (0' minutes' seconds)' true' string.Empty);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: if (time <= 12) {  	hours = time;  } // 130 - 930    am|pm  else if (time < 1000) {  	hours = Convert.ToInt32 (numericPart [0].ToString ());  	minutes = Convert.ToInt32 (numericPart.Substring (1));  } // 1030 - 1230  am|pm                  else {  	hours = Convert.ToInt32 (numericPart.Substring (0' 2));  	minutes = Convert.ToInt32 (numericPart.Substring (2));  }  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: if (time <= 12) {  	hours = time;  } // 130 - 930    am|pm  else if (time < 1000) {  	hours = Convert.ToInt32 (numericPart [0].ToString ());  	minutes = Convert.ToInt32 (numericPart.Substring (1));  } // 1030 - 1230  am|pm                  else {  	hours = Convert.ToInt32 (numericPart.Substring (0' 2));  	minutes = Convert.ToInt32 (numericPart.Substring (2));  }  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: if (time <= 12) {  	hours = time;  } // 130 - 930    am|pm  else if (time < 1000) {  	hours = Convert.ToInt32 (numericPart [0].ToString ());  	minutes = Convert.ToInt32 (numericPart.Substring (1));  } // 1030 - 1230  am|pm                  else {  	hours = Convert.ToInt32 (numericPart.Substring (0' 2));  	minutes = Convert.ToInt32 (numericPart.Substring (2));  }  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: if (time <= 12) {  	hours = time;  } // 130 - 930    am|pm  else if (time < 1000) {  	hours = Convert.ToInt32 (numericPart [0].ToString ());  	minutes = Convert.ToInt32 (numericPart.Substring (1));  } // 1030 - 1230  am|pm                  else {  	hours = Convert.ToInt32 (numericPart.Substring (0' 2));  	minutes = Convert.ToInt32 (numericPart.Substring (2));  }  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: if (time < 1000) {  	hours = Convert.ToInt32 (numericPart [0].ToString ());  	minutes = Convert.ToInt32 (numericPart.Substring (1));  } // 1030 - 1230  am|pm                  else {  	hours = Convert.ToInt32 (numericPart.Substring (0' 2));  	minutes = Convert.ToInt32 (numericPart.Substring (2));  }  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: if (time < 1000) {  	hours = Convert.ToInt32 (numericPart [0].ToString ());  	minutes = Convert.ToInt32 (numericPart.Substring (1));  } // 1030 - 1230  am|pm                  else {  	hours = Convert.ToInt32 (numericPart.Substring (0' 2));  	minutes = Convert.ToInt32 (numericPart.Substring (2));  }  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: if (time < 1000) {  	hours = Convert.ToInt32 (numericPart [0].ToString ());  	minutes = Convert.ToInt32 (numericPart.Substring (1));  } // 1030 - 1230  am|pm                  else {  	hours = Convert.ToInt32 (numericPart.Substring (0' 2));  	minutes = Convert.ToInt32 (numericPart.Substring (2));  }  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: hours = Convert.ToInt32 (numericPart.Substring (0' 2));  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: minutes = Convert.ToInt32 (numericPart.Substring (2));  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: if (!isAm && hours < 12)  	hours += 12;  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: if (!isAm && hours < 12)  	hours += 12;  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: hours += 12;  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CanCreateDateFrom,The following statement contains a magic number: if (paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6)  	return false;  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CanCreateDateFrom,The following statement contains a magic number: if (paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6)  	return false;  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: if (parameters.Length == 3)  	return new DateTime (args [0]' args [1]' args [2]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: if (parameters.Length == 3)  	return new DateTime (args [0]' args [1]' args [2]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: return new DateTime (args [0]' args [1]' args [2]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: if (parameters.Length == 6)  	return new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: if (parameters.Length == 6)  	return new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: if (parameters.Length == 6)  	return new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: if (parameters.Length == 6)  	return new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: if (parameters.Length == 6)  	return new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: return new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: return new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: return new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]);  
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: return new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]);  
Magic Number,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,UpdateLineState,The following statement contains a magic number: if (currentPos <= LAST_POSITION) {  	_pos.CurrentChar = _pos.Text [currentPos];  	_pos.LastChar = _pos.Text [currentPos - 1];  } else {  	_pos.CurrentChar = _pos.Text [currentPos - 1];  	_pos.LastChar = _pos.Text [currentPos - 2];  }  
Magic Number,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,UpdateLineState,The following statement contains a magic number: _pos.LastChar = _pos.Text [currentPos - 2];  
Magic Number,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanUntilChars,The following statement contains a magic number: while (_pos.Pos <= LAST_POSITION - 1) {  	var ch = _pos.Text [_pos.Pos];  	// Case 1: Matching  	if (ch == first) {  		var n1 = this.PeekChar ();  		if (n1 == second) {  			_pos.Pos += 2;  			break;  		}  		_pos.Pos++;  	} // Case 2: New line  	else if (ch == '\r' || ch == '\n') {  		this.ScanNewLine (ch);  		lineStartPos = _pos.Pos;  	} else {  		_pos.Pos++;  	}  }  
Magic Number,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanUntilChars,The following statement contains a magic number: if (ch == first) {  	var n1 = this.PeekChar ();  	if (n1 == second) {  		_pos.Pos += 2;  		break;  	}  	_pos.Pos++;  } // Case 2: New line  else if (ch == '\r' || ch == '\n') {  	this.ScanNewLine (ch);  	lineStartPos = _pos.Pos;  } else {  	_pos.Pos++;  }  
Magic Number,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanUntilChars,The following statement contains a magic number: if (n1 == second) {  	_pos.Pos += 2;  	break;  }  
Magic Number,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanUntilChars,The following statement contains a magic number: _pos.Pos += 2;  
Magic Number,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanEscape,The following statement contains a magic number: if (setPosAfterToken) {  	_pos.Pos += 2;  	_pos.LineCharPosition += 2;  }  
Magic Number,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanEscape,The following statement contains a magic number: if (setPosAfterToken) {  	_pos.Pos += 2;  	_pos.LineCharPosition += 2;  }  
Magic Number,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanEscape,The following statement contains a magic number: _pos.Pos += 2;  
Magic Number,Fluentscript.Lib.Parser,Scanner,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanEscape,The following statement contains a magic number: _pos.LineCharPosition += 2;  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_scanner.IsEnded ()) {  	_lastToken = Tokens.EndToken;  } // Empty space.  else if (c == ' ' || c == '\t') {  	_scanner.ConsumeWhiteSpace (false' true);  	_lastToken = Tokens.WhiteSpace;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	//tokenLengthCalcMode = TokenLengthCalcMode.WhiteSpace;  } // Variable  else if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_scanner.IsEnded ()) {  	_lastToken = Tokens.EndToken;  } // Empty space.  else if (c == ' ' || c == '\t') {  	_scanner.ConsumeWhiteSpace (false' true);  	_lastToken = Tokens.WhiteSpace;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	//tokenLengthCalcMode = TokenLengthCalcMode.WhiteSpace;  } // Variable  else if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_scanner.IsEnded ()) {  	_lastToken = Tokens.EndToken;  } // Empty space.  else if (c == ' ' || c == '\t') {  	_scanner.ConsumeWhiteSpace (false' true);  	_lastToken = Tokens.WhiteSpace;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	//tokenLengthCalcMode = TokenLengthCalcMode.WhiteSpace;  } // Variable  else if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_scanner.IsEnded ()) {  	_lastToken = Tokens.EndToken;  } // Empty space.  else if (c == ' ' || c == '\t') {  	_scanner.ConsumeWhiteSpace (false' true);  	_lastToken = Tokens.WhiteSpace;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	//tokenLengthCalcMode = TokenLengthCalcMode.WhiteSpace;  } // Variable  else if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ' ' || c == '\t') {  	_scanner.ConsumeWhiteSpace (false' true);  	_lastToken = Tokens.WhiteSpace;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	//tokenLengthCalcMode = TokenLengthCalcMode.WhiteSpace;  } // Variable  else if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ' ' || c == '\t') {  	_scanner.ConsumeWhiteSpace (false' true);  	_lastToken = Tokens.WhiteSpace;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	//tokenLengthCalcMode = TokenLengthCalcMode.WhiteSpace;  } // Variable  else if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ' ' || c == '\t') {  	_scanner.ConsumeWhiteSpace (false' true);  	_lastToken = Tokens.WhiteSpace;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	//tokenLengthCalcMode = TokenLengthCalcMode.WhiteSpace;  } // Variable  else if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ' ' || c == '\t') {  	_scanner.ConsumeWhiteSpace (false' true);  	_lastToken = Tokens.WhiteSpace;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	//tokenLengthCalcMode = TokenLengthCalcMode.WhiteSpace;  } // Variable  else if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_scanner.IsIdentStart (c)) {  	_lastToken = ReadWord ();  } // Single line  else if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '/' && n == '/') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanToNewLine (false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	tokenLength = (_scanner.State.Pos - pos) + 1;  	_lastToken = TokenBuilder.ToComment (false' result.Text);  } // Multi-line  else if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: _scanner.MoveChars (2);  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '/' && n == '*') {  	_scanner.MoveChars (2);  	var result = _scanner.ScanUntilChars (false' '*'' '/'' false' true);  	//tokenLengthCalcMode = TokenLengthCalcMode.MultilineComment;  	tokenLength = _scanner.State.LineCharPosition;  	_lastToken = TokenBuilder.ToComment (true' result.Text);  } else if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: _scanner.MoveChars (2);  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '|' && n != '|') {  	_lastToken = Tokens.Pipe;  } // Operator ( Math' Compare' Increment ) * / + -' < < > >= ! =  else if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_scanner.IsOp (c) == true) {  	_lastToken = ReadOperator ();  } else if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '(') {  	_lastToken = Tokens.LeftParenthesis;  } else if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ')') {  	_lastToken = Tokens.RightParenthesis;  } else if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '[') {  	_lastToken = Tokens.LeftBracket;  } else if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ']') {  	_lastToken = Tokens.RightBracket;  } else if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '.') {  	_lastToken = Tokens.Dot;  } else if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ''') {  	_lastToken = Tokens.Comma;  } else if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ':') {  	_lastToken = Tokens.Colon;  } else if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '{') {  	_lastToken = Tokens.LeftBrace;  } else if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '}') {  	_lastToken = Tokens.RightBrace;  } else if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == ';') {  	_lastToken = Tokens.Semicolon;  } else if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '$') {  	_lastToken = Tokens.Dollar;  } else if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '@') {  	_lastToken = Tokens.At;  } else if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '#') {  	_lastToken = Tokens.Pound;  } else if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '?') {  	_lastToken = Tokens.Question;  } else if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '\\') {  	_lastToken = Tokens.BackSlash;  } // String literal  else if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (c == '"' || c == '\'') {  	_lastToken = ReadString (c == '"');  	//tokenLengthCalcMode = TokenLengthCalcMode.String;  	if (_lastToken.Kind == TokenKind.Multi) {  		tokenLength = (_scanner.State.Pos - pos) - 2;  		string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  		_lastToken.SetText (text);  	} else {  		tokenLength = _lastToken.Text.Length + 2;  	}  } else if (_scanner.IsNumeric (c)) {  	_lastToken = ReadNumber ();  } else if (c == '\r') {  	bool is2CharNewline = n == '\n';  	IncrementLine (is2CharNewline);  } else {  	_lastToken = Tokens.Unknown;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_lastToken.Kind == TokenKind.Multi) {  	tokenLength = (_scanner.State.Pos - pos) - 2;  	string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  	_lastToken.SetText (text);  } else {  	tokenLength = _lastToken.Text.Length + 2;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: if (_lastToken.Kind == TokenKind.Multi) {  	tokenLength = (_scanner.State.Pos - pos) - 2;  	string text = _scanner.State.Text.Substring (pos + 1' tokenLength);  	_lastToken.SetText (text);  } else {  	tokenLength = _lastToken.Text.Length + 2;  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: tokenLength = (_scanner.State.Pos - pos) - 2;  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The following statement contains a magic number: tokenLength = _lastToken.Text.Length + 2;  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedString,The following statement contains a magic number: while (_scanner.State.Pos <= _scanner.LAST_POSITION) {  	// End string " or '  	if (!readLine && curr == quote) {  		matched = true;  		_scanner.MoveChars (1);  		break;  	}  	// End of line.  	if (readLine && (curr == '\r' || curr == '\n')) {  		matched = true;  		if (!includeNewLine)  			break;  		var is2CharNewLine = _scanner.ScanNewLine (curr);  		var newline = is2CharNewLine ? "\r\n" : "\n";  		buffer.Append (newline);  		token = Tokens.NewLine;  		break;  	} // Interpolation.  	else if (curr == _interpolatedStartChar && next == '{') {  		// Keep track of interpolations and their start positions.  		interpolationCount++;  		int interpolatedStringStartPos = _scanner.State.LineCharPosition + 2;  		int interpolatedStringLinePos = _scanner.State.Line;  		// Add any existing text before the interpolation as a token.  		if (buffer.Length > 0) {  			string text = buffer.ToString ();  			token = TokenBuilder.ToLiteralString (text);  			var t = new TokenData () {  				Token = token'  				LineCharPos = 0'  				Line = _scanner.State.Line  			};  			allTokens.Add (t);  			buffer.Clear ();  		}  		_scanner.MoveChars (1);  		var tokens = ReadInterpolatedTokens ();  		token = TokenBuilder.ToInterpolated (string.Empty' tokens);  		var iTokenData = new TokenData () {  			Token = token'  			LineCharPos = interpolatedStringStartPos'  			Line = interpolatedStringLinePos  		};  		allTokens.Add (iTokenData);  	} // Not an \ for escaping so just append.  	else if (curr != escapeChar) {  		buffer.Append (curr);  	} // Escape \  	else if (curr == escapeChar) {  		var result = _scanner.ScanEscape (quote' false);  		buffer.Append (result.Text);  		_scanner.MoveChars (1);  	}  	curr = _scanner.ReadChar ();  	next = _scanner.PeekChar ();  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedString,The following statement contains a magic number: if (readLine && (curr == '\r' || curr == '\n')) {  	matched = true;  	if (!includeNewLine)  		break;  	var is2CharNewLine = _scanner.ScanNewLine (curr);  	var newline = is2CharNewLine ? "\r\n" : "\n";  	buffer.Append (newline);  	token = Tokens.NewLine;  	break;  } // Interpolation.  else if (curr == _interpolatedStartChar && next == '{') {  	// Keep track of interpolations and their start positions.  	interpolationCount++;  	int interpolatedStringStartPos = _scanner.State.LineCharPosition + 2;  	int interpolatedStringLinePos = _scanner.State.Line;  	// Add any existing text before the interpolation as a token.  	if (buffer.Length > 0) {  		string text = buffer.ToString ();  		token = TokenBuilder.ToLiteralString (text);  		var t = new TokenData () {  			Token = token'  			LineCharPos = 0'  			Line = _scanner.State.Line  		};  		allTokens.Add (t);  		buffer.Clear ();  	}  	_scanner.MoveChars (1);  	var tokens = ReadInterpolatedTokens ();  	token = TokenBuilder.ToInterpolated (string.Empty' tokens);  	var iTokenData = new TokenData () {  		Token = token'  		LineCharPos = interpolatedStringStartPos'  		Line = interpolatedStringLinePos  	};  	allTokens.Add (iTokenData);  } // Not an \ for escaping so just append.  else if (curr != escapeChar) {  	buffer.Append (curr);  } // Escape \  else if (curr == escapeChar) {  	var result = _scanner.ScanEscape (quote' false);  	buffer.Append (result.Text);  	_scanner.MoveChars (1);  }  
Magic Number,Fluentscript.Lib.Parser,Lexer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedString,The following statement contains a magic number: if (curr == _interpolatedStartChar && next == '{') {  	// Keep track of interpolations and their start positions.  	interpolationCount++;  	int interpolatedStringStartPos = _scanner.State.LineCharPosition + 2;  	int interpolatedStringLinePos = _scanner.State.Line;  	// Add any existing text before the interpolation as a token.  	if (buffer.Length > 0) {  		string text = buffer.ToString ();  		token = TokenBuilder.ToLiteralString (text);  		var t = new TokenData () {  			Token = token'  			LineCharPos = 0'  			Line = _scanner.State.Line  		};  		allTokens.Add (t);  		buffer.Clear ();  	}  	_scanner.MoveChars (1);  	var tokens = ReadInterpolatedTokens ();  	token = TokenBuilder.ToInterpolated (string.Empty' tokens);  	var iTokenData = new TokenData () {  		Token = token'  		LineCharPos = interpolatedStringStartPos'  		Line = interpolatedStringLinePos  	};  	allTokens.Add (iTokenData);  } // Not an \ for escaping so just append.  else if (curr != escapeChar) {  	buffer.Append (curr);  } // Escape \  else if (curr == escapeChar) {  	var result = _scanner.ScanEscape (quote' false);  	buffer.Append (result.Text);  	_scanner.MoveChars (1);  }  
Magic Number,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseInterpolatedExpression,The following statement contains a magic number: foreach (var tokenData in tokens) {  	var token = tokenData.Token;  	Expr exp = null;  	// 1. true / false / "name" / 123 / null;  	if (token.IsLiteralAny ()) {  		exp = token == Tokens.Null ? Exprs.Const (LObjects.Null' tokenData) : Exprs.Const (TokenHelper.ConvertToLangLiteral (token)' tokenData);  		this.SetupContext (exp' tokenData);  		_state.ExpressionCount++;  	} // 2. ${first + 'abc'} or ${ result / 2 + max }  	else if (token.Kind == TokenKind.Multi) {  		var tokenIterator = new TokenIterator ();  		var tokens2 = token.Value as List<TokenData>;  		tokenIterator.Init (tokens2' 1' 100);  		tokenIterator.Advance ();  		var exisiting = _tokenIt;  		// a. Temporarily set the token iterator for the parser to the one for the interpolation.  		_tokenIt = tokenIterator;  		SetupTokenIteratorReferences (this._tokenIt);  		Exprs.Setup (_tokenIt' _context' _scriptPath);  		// b. Now parse only the tokens supplied.  		exp = ParseExpression (null);  		// c. Reset the token iterator to the global one for the entire script.  		_tokenIt = exisiting;  		SetupTokenIteratorReferences (this._tokenIt);  		Exprs.Setup (_tokenIt' _context' _scriptPath);  	}  	iexp.Expressions.Add (exp);  }  
Magic Number,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseInterpolatedExpression,The following statement contains a magic number: if (token.IsLiteralAny ()) {  	exp = token == Tokens.Null ? Exprs.Const (LObjects.Null' tokenData) : Exprs.Const (TokenHelper.ConvertToLangLiteral (token)' tokenData);  	this.SetupContext (exp' tokenData);  	_state.ExpressionCount++;  } // 2. ${first + 'abc'} or ${ result / 2 + max }  else if (token.Kind == TokenKind.Multi) {  	var tokenIterator = new TokenIterator ();  	var tokens2 = token.Value as List<TokenData>;  	tokenIterator.Init (tokens2' 1' 100);  	tokenIterator.Advance ();  	var exisiting = _tokenIt;  	// a. Temporarily set the token iterator for the parser to the one for the interpolation.  	_tokenIt = tokenIterator;  	SetupTokenIteratorReferences (this._tokenIt);  	Exprs.Setup (_tokenIt' _context' _scriptPath);  	// b. Now parse only the tokens supplied.  	exp = ParseExpression (null);  	// c. Reset the token iterator to the global one for the entire script.  	_tokenIt = exisiting;  	SetupTokenIteratorReferences (this._tokenIt);  	Exprs.Setup (_tokenIt' _context' _scriptPath);  }  
Magic Number,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseInterpolatedExpression,The following statement contains a magic number: if (token.Kind == TokenKind.Multi) {  	var tokenIterator = new TokenIterator ();  	var tokens2 = token.Value as List<TokenData>;  	tokenIterator.Init (tokens2' 1' 100);  	tokenIterator.Advance ();  	var exisiting = _tokenIt;  	// a. Temporarily set the token iterator for the parser to the one for the interpolation.  	_tokenIt = tokenIterator;  	SetupTokenIteratorReferences (this._tokenIt);  	Exprs.Setup (_tokenIt' _context' _scriptPath);  	// b. Now parse only the tokens supplied.  	exp = ParseExpression (null);  	// c. Reset the token iterator to the global one for the entire script.  	_tokenIt = exisiting;  	SetupTokenIteratorReferences (this._tokenIt);  	Exprs.Setup (_tokenIt' _context' _scriptPath);  }  
Magic Number,Fluentscript.Lib.Parser,Parser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseInterpolatedExpression,The following statement contains a magic number: tokenIterator.Init (tokens2' 1' 100);  
Magic Number,Fluentscript.Lib.Parser,ParserBase,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\ParserBase.cs,Tokenize,The following statement contains a magic number: _tokenIt.Init (llk => _lexer.GetTokenBatch (llk)' 12' null);  
Magic Number,Fluentscript.Lib.Parser,SemActs,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\SemActs.cs,CheckFunctionDeclaration,The following statement contains a magic number: if (func.Meta.Arguments.Count > 12)  	AddErrorCode (ErrorCodes.Func1004' exp);  
Magic Number,Fluentscript.Lib.Parser,SemActs,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\SemActs.cs,CheckFunctionDeclaration,The following statement contains a magic number: if (func.Meta.Aliases != null && func.Meta.Aliases.Count > 5)  	AddError (ErrorCodes.Func1005' exp);  
Magic Number,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Init,The following statement contains a magic number: if (llK < 4)  	throw new ArgumentException ("Can not initialize token iterator with llk less than 4");  
Magic Number,Fluentscript.Lib.Parser,TokenIterator,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Init,The following statement contains a magic number: _tokenBatchMidPoint = batchSize / 2;  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,CompilerPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\CompilerPlugin.cs,GetFullGrammar,The following statement contains a magic number: if (string.IsNullOrEmpty (this.Grammar))  	grammar = this.GrammarMatch;  else {  	var ndxRef = this.Grammar.IndexOf ("#grammarmatch");  	if (ndxRef >= 0)  		grammar = this.GrammarMatch + " " + this.Grammar.Substring (ndxRef + 13);  }  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,CompilerPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\CompilerPlugin.cs,GetFullGrammar,The following statement contains a magic number: if (ndxRef >= 0)  	grammar = this.GrammarMatch + " " + this.Grammar.Substring (ndxRef + 13);  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,CompilerPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\CompilerPlugin.cs,GetFullGrammar,The following statement contains a magic number: grammar = this.GrammarMatch + " " + this.Grammar.Substring (ndxRef + 13);  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,GrammerParser,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\GrammarParser.cs,ProcessOperatorForOr,The following statement contains a magic number: if (matches.Count >= 2) {  	// 1. Get last 2  	var lastIndex = matches.Count - 1;  	var right = matches [lastIndex];  	var left = matches [lastIndex - 1];  	// 2. Create a or group  	var groupOr = new TokenGroupOr (left' right);  	// 3. Remove last 2  	matches.RemoveAt (lastIndex);  	matches.RemoveAt (lastIndex - 1);  	matches.Add (groupOr);  	_orCount--;  	this.RemoveLastOperator ();  }  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The following statement contains a magic number: foreach (var match in matches) {  	var continueCheck = false;  	var trackNamedArgs = true;  	var valueMatched = false;  	// Termninators  	if (match.TokenType == "@exprTerminators" && (Terminators.ExpFlexibleEnd.ContainsKey (token.Token) || Terminators.ExpThenEnd.ContainsKey (token.Token))) {  		// Don't increment the peekcount  		isMatch = totalMatched >= plugin.TotalRequiredMatches;  		break;  	}  	// Check for ";" and EOF ( end of file/text )  	if (token.Token == Tokens.Semicolon || token.Token == Tokens.EndToken) {  		isMatch = totalMatched >= plugin.TotalRequiredMatches;  		break;  	}  	// Check 1: Group tokens ?  	if (match.IsGroup) {  		var submatches = ((TokenGroup)match).Matches;  		var result = CheckExpressionMatches (plugin' submatches' args' peekCount' totalMatched);  		if (match.IsRequired && !result.Success) {  			isMatch = false;  			break;  		}  		if (result.Success) {  			peekCount = result.TokenCount;  			if (match.IsRequired)  				totalMatched += result.TotalMatched;  		}  	} // Check 2: starttoken?  	else if (match.TokenType == "@starttoken") {  		continueCheck = true;  		totalMatched++;  	} // Check 2a: tokenmap1  	else if (match.TokenType == "@tokenmap1") {  		if (plugin.TokenMap1 == null || !plugin.TokenMap1.ContainsKey (token.Token.Text)) {  			isMatch = false;  			break;  		}  		continueCheck = true;  		totalMatched++;  	} else if (match.TokenType == "@tokenmap2") {  		if (plugin.TokenMap2 == null || !plugin.TokenMap2.ContainsKey (token.Token.Text)) {  			isMatch = false;  			break;  		}  		continueCheck = true;  		totalMatched++;  	} // Check 2c: "identSymbol" must exist  	else if (match.TokenType == "@identsymbol") {  		var symbolExists = this.Symbols.Contains (token.Token.Text);  		continueCheck = symbolExists;  		if (!continueCheck) {  			isMatch = false;  			break;  		}  		totalMatched++;  	} // Check 2c: "identSymbol" must exist  	else if (match.TokenType == "@singularsymbol") {  		var plural = token.Token.Text + "s";  		var symbolExists = this.Symbols.Contains (plural);  		continueCheck = symbolExists;  		if (!continueCheck) {  			isMatch = false;  			break;  		}  		totalMatched++;  	} // Check 2d: paramlist = @word ( ' @word )* parameter names  	else if (match.TokenType == "@paramnames") {  		var isvalidParamList = true;  		var maxParams = 10;  		var totalParams = 0;  		var paramList = new List<object> ();  		while (totalParams <= maxParams) {  			var token2 = this.TokenIt.Peek (peekCount' false);  			if (token2.Token == Tokens.Comma) {  				peekCount++;  			} else if (token2.Token.Kind == TokenKind.Ident) {  				paramList.Add (token2.Token.Text);  				peekCount++;  			} else {  				peekCount--;  				break;  			}  			totalParams++;  		}  		isMatch = isvalidParamList;  		continueCheck = isMatch;  		if (continueCheck) {  			trackNamedArgs = false;  			if (!string.IsNullOrEmpty (match.Name)) {  				args [match.Name] = token;  				args [match.Name + "Value"] = new LArray (paramList);  			}  			totalMatched++;  		} else {  			break;  		}  	} // Check 3a: Optional words with text  	else if (!match.IsRequired && match.Text != null && match.Text != token.Token.Text) {  		continueCheck = false;  	} // Check 3b: Optional words matched  	else if (!match.IsRequired && match.IsMatchingValue (token.Token)) {  		continueCheck = true;  	} // Check 4: Optional word not matched  	else if (!match.IsRequired && !match.IsMatchingValue (token.Token)) {  		continueCheck = false;  	} // Check 5a: Expected word  	else if (match.IsRequired && match.TokenType == null && match.Text == token.Token.Text) {  		continueCheck = true;  		totalMatched++;  	} // Check 5b: Expected word in list  	else if (match.IsRequired && match.TokenType == null && match.Values != null) {  		if (!match.IsMatchingValue (token.Token)) {  			isMatch = false;  			break;  		}  		continueCheck = true;  		valueMatched = true;  		totalMatched++;  	} // Check 6: check the type of n1  	else if (match.IsMatchingType (token.Token)) {  		continueCheck = true;  		totalMatched++;  	} else {  		isMatch = false;  		break;  	}  	if (continueCheck) {  		if (!string.IsNullOrEmpty (match.Name) && trackNamedArgs) {  			args [match.Name] = token;  			if (match.TokenPropEnabled) {  				// 1. figure out which token map to use.  				var lookupmap = plugin.StartTokenMap;  				if (match.TokenType == "@tokenmap1")  					lookupmap = plugin.TokenMap1;  				else if (match.TokenType == "@tokenmap2")  					lookupmap = plugin.TokenMap2;  				// Case 1: Start token replacement value  				if (match.TokenPropValue == "value") {  					var startToken = token.Token.Text;  					args [match.Name + "Value"] = lookupmap [startToken];  				} // Case 2: Token value  				else if (match.TokenPropValue == "tvalue") {  					LObject val = LObjects.Null;  					if (match.TokenType == "@number")  						val = new LNumber ((double)token.Token.Value);  					else if (match.TokenType == "@time")  						val = new LTime ((TimeSpan)token.Token.Value);  					else if (match.TokenType == "@word")  						val = new LString ((string)token.Token.Value);  					else if (match.TokenType == "@starttoken")  						val = new LString (token.Token.Text);  					args [match.Name + "Value"] = val;  				} // Case 2: Token value  				else if (match.TokenPropValue == "tvaluestring") {  					LObject val = LObjects.Null;  					if (match.TokenType == "@number")  						val = new LString (((double)token.Token.Value).ToString (CultureInfo.InvariantCulture));  					else if (match.TokenType == "@time")  						val = new LString (((TimeSpan)token.Token.Value).ToString ());  					else if (match.TokenType == "@starttoken")  						val = new LString (token.Token.Text);  					else if (match.TokenType == "@word")  						val = new LString (token.Token.Text);  					else if (match.TokenType == "@singularsymbol")  						val = new LString (token.Token.Text);  					args [match.Name + "Value"] = val;  				}  			} // matching values  			else if (valueMatched) {  				args [match.Name + "Value"] = token.Token.Text;  			}  		}  		// Matched: increment.  		peekCount++;  		token = this.TokenIt.Peek (peekCount' false);  	}  }  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The following statement contains a magic number: if (match.IsGroup) {  	var submatches = ((TokenGroup)match).Matches;  	var result = CheckExpressionMatches (plugin' submatches' args' peekCount' totalMatched);  	if (match.IsRequired && !result.Success) {  		isMatch = false;  		break;  	}  	if (result.Success) {  		peekCount = result.TokenCount;  		if (match.IsRequired)  			totalMatched += result.TotalMatched;  	}  } // Check 2: starttoken?  else if (match.TokenType == "@starttoken") {  	continueCheck = true;  	totalMatched++;  } // Check 2a: tokenmap1  else if (match.TokenType == "@tokenmap1") {  	if (plugin.TokenMap1 == null || !plugin.TokenMap1.ContainsKey (token.Token.Text)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	totalMatched++;  } else if (match.TokenType == "@tokenmap2") {  	if (plugin.TokenMap2 == null || !plugin.TokenMap2.ContainsKey (token.Token.Text)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	totalMatched++;  } // Check 2c: "identSymbol" must exist  else if (match.TokenType == "@identsymbol") {  	var symbolExists = this.Symbols.Contains (token.Token.Text);  	continueCheck = symbolExists;  	if (!continueCheck) {  		isMatch = false;  		break;  	}  	totalMatched++;  } // Check 2c: "identSymbol" must exist  else if (match.TokenType == "@singularsymbol") {  	var plural = token.Token.Text + "s";  	var symbolExists = this.Symbols.Contains (plural);  	continueCheck = symbolExists;  	if (!continueCheck) {  		isMatch = false;  		break;  	}  	totalMatched++;  } // Check 2d: paramlist = @word ( ' @word )* parameter names  else if (match.TokenType == "@paramnames") {  	var isvalidParamList = true;  	var maxParams = 10;  	var totalParams = 0;  	var paramList = new List<object> ();  	while (totalParams <= maxParams) {  		var token2 = this.TokenIt.Peek (peekCount' false);  		if (token2.Token == Tokens.Comma) {  			peekCount++;  		} else if (token2.Token.Kind == TokenKind.Ident) {  			paramList.Add (token2.Token.Text);  			peekCount++;  		} else {  			peekCount--;  			break;  		}  		totalParams++;  	}  	isMatch = isvalidParamList;  	continueCheck = isMatch;  	if (continueCheck) {  		trackNamedArgs = false;  		if (!string.IsNullOrEmpty (match.Name)) {  			args [match.Name] = token;  			args [match.Name + "Value"] = new LArray (paramList);  		}  		totalMatched++;  	} else {  		break;  	}  } // Check 3a: Optional words with text  else if (!match.IsRequired && match.Text != null && match.Text != token.Token.Text) {  	continueCheck = false;  } // Check 3b: Optional words matched  else if (!match.IsRequired && match.IsMatchingValue (token.Token)) {  	continueCheck = true;  } // Check 4: Optional word not matched  else if (!match.IsRequired && !match.IsMatchingValue (token.Token)) {  	continueCheck = false;  } // Check 5a: Expected word  else if (match.IsRequired && match.TokenType == null && match.Text == token.Token.Text) {  	continueCheck = true;  	totalMatched++;  } // Check 5b: Expected word in list  else if (match.IsRequired && match.TokenType == null && match.Values != null) {  	if (!match.IsMatchingValue (token.Token)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	valueMatched = true;  	totalMatched++;  } // Check 6: check the type of n1  else if (match.IsMatchingType (token.Token)) {  	continueCheck = true;  	totalMatched++;  } else {  	isMatch = false;  	break;  }  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The following statement contains a magic number: if (match.TokenType == "@starttoken") {  	continueCheck = true;  	totalMatched++;  } // Check 2a: tokenmap1  else if (match.TokenType == "@tokenmap1") {  	if (plugin.TokenMap1 == null || !plugin.TokenMap1.ContainsKey (token.Token.Text)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	totalMatched++;  } else if (match.TokenType == "@tokenmap2") {  	if (plugin.TokenMap2 == null || !plugin.TokenMap2.ContainsKey (token.Token.Text)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	totalMatched++;  } // Check 2c: "identSymbol" must exist  else if (match.TokenType == "@identsymbol") {  	var symbolExists = this.Symbols.Contains (token.Token.Text);  	continueCheck = symbolExists;  	if (!continueCheck) {  		isMatch = false;  		break;  	}  	totalMatched++;  } // Check 2c: "identSymbol" must exist  else if (match.TokenType == "@singularsymbol") {  	var plural = token.Token.Text + "s";  	var symbolExists = this.Symbols.Contains (plural);  	continueCheck = symbolExists;  	if (!continueCheck) {  		isMatch = false;  		break;  	}  	totalMatched++;  } // Check 2d: paramlist = @word ( ' @word )* parameter names  else if (match.TokenType == "@paramnames") {  	var isvalidParamList = true;  	var maxParams = 10;  	var totalParams = 0;  	var paramList = new List<object> ();  	while (totalParams <= maxParams) {  		var token2 = this.TokenIt.Peek (peekCount' false);  		if (token2.Token == Tokens.Comma) {  			peekCount++;  		} else if (token2.Token.Kind == TokenKind.Ident) {  			paramList.Add (token2.Token.Text);  			peekCount++;  		} else {  			peekCount--;  			break;  		}  		totalParams++;  	}  	isMatch = isvalidParamList;  	continueCheck = isMatch;  	if (continueCheck) {  		trackNamedArgs = false;  		if (!string.IsNullOrEmpty (match.Name)) {  			args [match.Name] = token;  			args [match.Name + "Value"] = new LArray (paramList);  		}  		totalMatched++;  	} else {  		break;  	}  } // Check 3a: Optional words with text  else if (!match.IsRequired && match.Text != null && match.Text != token.Token.Text) {  	continueCheck = false;  } // Check 3b: Optional words matched  else if (!match.IsRequired && match.IsMatchingValue (token.Token)) {  	continueCheck = true;  } // Check 4: Optional word not matched  else if (!match.IsRequired && !match.IsMatchingValue (token.Token)) {  	continueCheck = false;  } // Check 5a: Expected word  else if (match.IsRequired && match.TokenType == null && match.Text == token.Token.Text) {  	continueCheck = true;  	totalMatched++;  } // Check 5b: Expected word in list  else if (match.IsRequired && match.TokenType == null && match.Values != null) {  	if (!match.IsMatchingValue (token.Token)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	valueMatched = true;  	totalMatched++;  } // Check 6: check the type of n1  else if (match.IsMatchingType (token.Token)) {  	continueCheck = true;  	totalMatched++;  } else {  	isMatch = false;  	break;  }  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The following statement contains a magic number: if (match.TokenType == "@tokenmap1") {  	if (plugin.TokenMap1 == null || !plugin.TokenMap1.ContainsKey (token.Token.Text)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	totalMatched++;  } else if (match.TokenType == "@tokenmap2") {  	if (plugin.TokenMap2 == null || !plugin.TokenMap2.ContainsKey (token.Token.Text)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	totalMatched++;  } // Check 2c: "identSymbol" must exist  else if (match.TokenType == "@identsymbol") {  	var symbolExists = this.Symbols.Contains (token.Token.Text);  	continueCheck = symbolExists;  	if (!continueCheck) {  		isMatch = false;  		break;  	}  	totalMatched++;  } // Check 2c: "identSymbol" must exist  else if (match.TokenType == "@singularsymbol") {  	var plural = token.Token.Text + "s";  	var symbolExists = this.Symbols.Contains (plural);  	continueCheck = symbolExists;  	if (!continueCheck) {  		isMatch = false;  		break;  	}  	totalMatched++;  } // Check 2d: paramlist = @word ( ' @word )* parameter names  else if (match.TokenType == "@paramnames") {  	var isvalidParamList = true;  	var maxParams = 10;  	var totalParams = 0;  	var paramList = new List<object> ();  	while (totalParams <= maxParams) {  		var token2 = this.TokenIt.Peek (peekCount' false);  		if (token2.Token == Tokens.Comma) {  			peekCount++;  		} else if (token2.Token.Kind == TokenKind.Ident) {  			paramList.Add (token2.Token.Text);  			peekCount++;  		} else {  			peekCount--;  			break;  		}  		totalParams++;  	}  	isMatch = isvalidParamList;  	continueCheck = isMatch;  	if (continueCheck) {  		trackNamedArgs = false;  		if (!string.IsNullOrEmpty (match.Name)) {  			args [match.Name] = token;  			args [match.Name + "Value"] = new LArray (paramList);  		}  		totalMatched++;  	} else {  		break;  	}  } // Check 3a: Optional words with text  else if (!match.IsRequired && match.Text != null && match.Text != token.Token.Text) {  	continueCheck = false;  } // Check 3b: Optional words matched  else if (!match.IsRequired && match.IsMatchingValue (token.Token)) {  	continueCheck = true;  } // Check 4: Optional word not matched  else if (!match.IsRequired && !match.IsMatchingValue (token.Token)) {  	continueCheck = false;  } // Check 5a: Expected word  else if (match.IsRequired && match.TokenType == null && match.Text == token.Token.Text) {  	continueCheck = true;  	totalMatched++;  } // Check 5b: Expected word in list  else if (match.IsRequired && match.TokenType == null && match.Values != null) {  	if (!match.IsMatchingValue (token.Token)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	valueMatched = true;  	totalMatched++;  } // Check 6: check the type of n1  else if (match.IsMatchingType (token.Token)) {  	continueCheck = true;  	totalMatched++;  } else {  	isMatch = false;  	break;  }  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The following statement contains a magic number: if (match.TokenType == "@tokenmap2") {  	if (plugin.TokenMap2 == null || !plugin.TokenMap2.ContainsKey (token.Token.Text)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	totalMatched++;  } // Check 2c: "identSymbol" must exist  else if (match.TokenType == "@identsymbol") {  	var symbolExists = this.Symbols.Contains (token.Token.Text);  	continueCheck = symbolExists;  	if (!continueCheck) {  		isMatch = false;  		break;  	}  	totalMatched++;  } // Check 2c: "identSymbol" must exist  else if (match.TokenType == "@singularsymbol") {  	var plural = token.Token.Text + "s";  	var symbolExists = this.Symbols.Contains (plural);  	continueCheck = symbolExists;  	if (!continueCheck) {  		isMatch = false;  		break;  	}  	totalMatched++;  } // Check 2d: paramlist = @word ( ' @word )* parameter names  else if (match.TokenType == "@paramnames") {  	var isvalidParamList = true;  	var maxParams = 10;  	var totalParams = 0;  	var paramList = new List<object> ();  	while (totalParams <= maxParams) {  		var token2 = this.TokenIt.Peek (peekCount' false);  		if (token2.Token == Tokens.Comma) {  			peekCount++;  		} else if (token2.Token.Kind == TokenKind.Ident) {  			paramList.Add (token2.Token.Text);  			peekCount++;  		} else {  			peekCount--;  			break;  		}  		totalParams++;  	}  	isMatch = isvalidParamList;  	continueCheck = isMatch;  	if (continueCheck) {  		trackNamedArgs = false;  		if (!string.IsNullOrEmpty (match.Name)) {  			args [match.Name] = token;  			args [match.Name + "Value"] = new LArray (paramList);  		}  		totalMatched++;  	} else {  		break;  	}  } // Check 3a: Optional words with text  else if (!match.IsRequired && match.Text != null && match.Text != token.Token.Text) {  	continueCheck = false;  } // Check 3b: Optional words matched  else if (!match.IsRequired && match.IsMatchingValue (token.Token)) {  	continueCheck = true;  } // Check 4: Optional word not matched  else if (!match.IsRequired && !match.IsMatchingValue (token.Token)) {  	continueCheck = false;  } // Check 5a: Expected word  else if (match.IsRequired && match.TokenType == null && match.Text == token.Token.Text) {  	continueCheck = true;  	totalMatched++;  } // Check 5b: Expected word in list  else if (match.IsRequired && match.TokenType == null && match.Values != null) {  	if (!match.IsMatchingValue (token.Token)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	valueMatched = true;  	totalMatched++;  } // Check 6: check the type of n1  else if (match.IsMatchingType (token.Token)) {  	continueCheck = true;  	totalMatched++;  } else {  	isMatch = false;  	break;  }  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The following statement contains a magic number: if (match.TokenType == "@identsymbol") {  	var symbolExists = this.Symbols.Contains (token.Token.Text);  	continueCheck = symbolExists;  	if (!continueCheck) {  		isMatch = false;  		break;  	}  	totalMatched++;  } // Check 2c: "identSymbol" must exist  else if (match.TokenType == "@singularsymbol") {  	var plural = token.Token.Text + "s";  	var symbolExists = this.Symbols.Contains (plural);  	continueCheck = symbolExists;  	if (!continueCheck) {  		isMatch = false;  		break;  	}  	totalMatched++;  } // Check 2d: paramlist = @word ( ' @word )* parameter names  else if (match.TokenType == "@paramnames") {  	var isvalidParamList = true;  	var maxParams = 10;  	var totalParams = 0;  	var paramList = new List<object> ();  	while (totalParams <= maxParams) {  		var token2 = this.TokenIt.Peek (peekCount' false);  		if (token2.Token == Tokens.Comma) {  			peekCount++;  		} else if (token2.Token.Kind == TokenKind.Ident) {  			paramList.Add (token2.Token.Text);  			peekCount++;  		} else {  			peekCount--;  			break;  		}  		totalParams++;  	}  	isMatch = isvalidParamList;  	continueCheck = isMatch;  	if (continueCheck) {  		trackNamedArgs = false;  		if (!string.IsNullOrEmpty (match.Name)) {  			args [match.Name] = token;  			args [match.Name + "Value"] = new LArray (paramList);  		}  		totalMatched++;  	} else {  		break;  	}  } // Check 3a: Optional words with text  else if (!match.IsRequired && match.Text != null && match.Text != token.Token.Text) {  	continueCheck = false;  } // Check 3b: Optional words matched  else if (!match.IsRequired && match.IsMatchingValue (token.Token)) {  	continueCheck = true;  } // Check 4: Optional word not matched  else if (!match.IsRequired && !match.IsMatchingValue (token.Token)) {  	continueCheck = false;  } // Check 5a: Expected word  else if (match.IsRequired && match.TokenType == null && match.Text == token.Token.Text) {  	continueCheck = true;  	totalMatched++;  } // Check 5b: Expected word in list  else if (match.IsRequired && match.TokenType == null && match.Values != null) {  	if (!match.IsMatchingValue (token.Token)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	valueMatched = true;  	totalMatched++;  } // Check 6: check the type of n1  else if (match.IsMatchingType (token.Token)) {  	continueCheck = true;  	totalMatched++;  } else {  	isMatch = false;  	break;  }  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The following statement contains a magic number: if (match.TokenType == "@singularsymbol") {  	var plural = token.Token.Text + "s";  	var symbolExists = this.Symbols.Contains (plural);  	continueCheck = symbolExists;  	if (!continueCheck) {  		isMatch = false;  		break;  	}  	totalMatched++;  } // Check 2d: paramlist = @word ( ' @word )* parameter names  else if (match.TokenType == "@paramnames") {  	var isvalidParamList = true;  	var maxParams = 10;  	var totalParams = 0;  	var paramList = new List<object> ();  	while (totalParams <= maxParams) {  		var token2 = this.TokenIt.Peek (peekCount' false);  		if (token2.Token == Tokens.Comma) {  			peekCount++;  		} else if (token2.Token.Kind == TokenKind.Ident) {  			paramList.Add (token2.Token.Text);  			peekCount++;  		} else {  			peekCount--;  			break;  		}  		totalParams++;  	}  	isMatch = isvalidParamList;  	continueCheck = isMatch;  	if (continueCheck) {  		trackNamedArgs = false;  		if (!string.IsNullOrEmpty (match.Name)) {  			args [match.Name] = token;  			args [match.Name + "Value"] = new LArray (paramList);  		}  		totalMatched++;  	} else {  		break;  	}  } // Check 3a: Optional words with text  else if (!match.IsRequired && match.Text != null && match.Text != token.Token.Text) {  	continueCheck = false;  } // Check 3b: Optional words matched  else if (!match.IsRequired && match.IsMatchingValue (token.Token)) {  	continueCheck = true;  } // Check 4: Optional word not matched  else if (!match.IsRequired && !match.IsMatchingValue (token.Token)) {  	continueCheck = false;  } // Check 5a: Expected word  else if (match.IsRequired && match.TokenType == null && match.Text == token.Token.Text) {  	continueCheck = true;  	totalMatched++;  } // Check 5b: Expected word in list  else if (match.IsRequired && match.TokenType == null && match.Values != null) {  	if (!match.IsMatchingValue (token.Token)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	valueMatched = true;  	totalMatched++;  } // Check 6: check the type of n1  else if (match.IsMatchingType (token.Token)) {  	continueCheck = true;  	totalMatched++;  } else {  	isMatch = false;  	break;  }  
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The following statement contains a magic number: if (match.TokenType == "@paramnames") {  	var isvalidParamList = true;  	var maxParams = 10;  	var totalParams = 0;  	var paramList = new List<object> ();  	while (totalParams <= maxParams) {  		var token2 = this.TokenIt.Peek (peekCount' false);  		if (token2.Token == Tokens.Comma) {  			peekCount++;  		} else if (token2.Token.Kind == TokenKind.Ident) {  			paramList.Add (token2.Token.Text);  			peekCount++;  		} else {  			peekCount--;  			break;  		}  		totalParams++;  	}  	isMatch = isvalidParamList;  	continueCheck = isMatch;  	if (continueCheck) {  		trackNamedArgs = false;  		if (!string.IsNullOrEmpty (match.Name)) {  			args [match.Name] = token;  			args [match.Name + "Value"] = new LArray (paramList);  		}  		totalMatched++;  	} else {  		break;  	}  } // Check 3a: Optional words with text  else if (!match.IsRequired && match.Text != null && match.Text != token.Token.Text) {  	continueCheck = false;  } // Check 3b: Optional words matched  else if (!match.IsRequired && match.IsMatchingValue (token.Token)) {  	continueCheck = true;  } // Check 4: Optional word not matched  else if (!match.IsRequired && !match.IsMatchingValue (token.Token)) {  	continueCheck = false;  } // Check 5a: Expected word  else if (match.IsRequired && match.TokenType == null && match.Text == token.Token.Text) {  	continueCheck = true;  	totalMatched++;  } // Check 5b: Expected word in list  else if (match.IsRequired && match.TokenType == null && match.Values != null) {  	if (!match.IsMatchingValue (token.Token)) {  		isMatch = false;  		break;  	}  	continueCheck = true;  	valueMatched = true;  	totalMatched++;  } // Check 6: check the type of n1  else if (match.IsMatchingType (token.Token)) {  	continueCheck = true;  	totalMatched++;  } else {  	isMatch = false;  	break;  }  
Magic Number,Fluentscript.Lib.Plugins.Core,TokenReplacePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Core\TokenReplacePlugin.cs,CanHandle,The following statement contains a magic number: _matchedAdvanceCount = isCurrent ? 1 : 2;  
Magic Number,Fluentscript.Lib.Plugins.Parser,AggregatePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AggregatePlugin.cs,Parse,The following statement contains a magic number: if (next == Tokens.LeftParenthesis) {  	_tokenIt.Advance (2);  	exp = _parser.ParseExpression (Terminators.ExpParenthesisEnd' passNewLine: false);  	_tokenIt.Expect (Tokens.RightParenthesis);  } // 2. sum of <expression>  else if (string.Compare (next.Text' "of"' StringComparison.InvariantCultureIgnoreCase) == 0) {  	_tokenIt.Advance (2);  	exp = _parser.ParseExpression (null' false' true' passNewLine: false);  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,AggregatePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AggregatePlugin.cs,Parse,The following statement contains a magic number: if (next == Tokens.LeftParenthesis) {  	_tokenIt.Advance (2);  	exp = _parser.ParseExpression (Terminators.ExpParenthesisEnd' passNewLine: false);  	_tokenIt.Expect (Tokens.RightParenthesis);  } // 2. sum of <expression>  else if (string.Compare (next.Text' "of"' StringComparison.InvariantCultureIgnoreCase) == 0) {  	_tokenIt.Advance (2);  	exp = _parser.ParseExpression (null' false' true' passNewLine: false);  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,AggregatePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AggregatePlugin.cs,Parse,The following statement contains a magic number: _tokenIt.Advance (2);  
Magic Number,Fluentscript.Lib.Plugins.Parser,AggregatePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AggregatePlugin.cs,Parse,The following statement contains a magic number: if (string.Compare (next.Text' "of"' StringComparison.InvariantCultureIgnoreCase) == 0) {  	_tokenIt.Advance (2);  	exp = _parser.ParseExpression (null' false' true' passNewLine: false);  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,AggregatePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AggregatePlugin.cs,Parse,The following statement contains a magic number: _tokenIt.Advance (2);  
Magic Number,Fluentscript.Lib.Plugins.Parser,ConstCapsPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\ConstCapsPlugin.cs,EnsureAdditionalConst,The following statement contains a magic number: if (!IsConstMatch (peek.Token' 2))  	_tokenIt.BuildSyntaxExpectedException ("constant");  
Magic Number,Fluentscript.Lib.Plugins.Parser,AnyOfPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AnyOfPlugin.cs,Parse,The following statement contains a magic number: _tokenIt.Advance (2);  
Magic Number,Fluentscript.Lib.Plugins.Parser,PhoneNumberPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PhoneNumberPlugin.cs,CanHandle,The following statement contains a magic number: if (current.Text.Length > 3)  	return false;  
Magic Number,Fluentscript.Lib.Plugins.Parser,PhoneNumberPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PhoneNumberPlugin.cs,Parse,The following statement contains a magic number: _lexer.Scanner.MoveChars (9);  
Magic Number,Fluentscript.Lib.Plugins.Parser,PluginExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PluginPlugin.cs,LoadTokenReplacements,The following statement contains a magic number: foreach (var record in records) {  	var list = record as LArray;  	if (list != null) {  		var columns = list.Value;  		var alias = columns [0] as LString;  		var replacement = columns [1] as LString;  		if (alias != null && replacement != null) {  			replacements.Add (new string[2] {  				alias.Value'  				replacement.Value  			});  		}  	}  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,PluginExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PluginPlugin.cs,LoadTokenReplacements,The following statement contains a magic number: if (list != null) {  	var columns = list.Value;  	var alias = columns [0] as LString;  	var replacement = columns [1] as LString;  	if (alias != null && replacement != null) {  		replacements.Add (new string[2] {  			alias.Value'  			replacement.Value  		});  	}  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,PluginExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PluginPlugin.cs,LoadTokenReplacements,The following statement contains a magic number: if (alias != null && replacement != null) {  	replacements.Add (new string[2] {  		alias.Value'  		replacement.Value  	});  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,PluginExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PluginPlugin.cs,LoadTokenReplacements,The following statement contains a magic number: replacements.Add (new string[2] {  	alias.Value'  	replacement.Value  });  
Magic Number,Fluentscript.Lib.Plugins.Parser,NamedIndexPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\NamedIndexPlugin.cs,CanHandle,The following statement contains a magic number: n = _tokenIt.Peek (2).Token;  
Magic Number,Fluentscript.Lib.Plugins.Parser,DateNumberPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\DateNumberPlugin.cs,CanHandle,The following statement contains a magic number: if (next.Length < 5)  	return false;  
Magic Number,Fluentscript.Lib.Plugins.Parser,FileExtPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FileExtPlugin.cs,CanHandle,The following statement contains a magic number: if (_lexer.State.Pos - 2 >= 0)  	last = _lexer.State.Text [_lexer.State.Pos - 2];  
Magic Number,Fluentscript.Lib.Plugins.Parser,FileExtPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FileExtPlugin.cs,CanHandle,The following statement contains a magic number: if (_lexer.State.Pos - 2 >= 0)  	last = _lexer.State.Text [_lexer.State.Pos - 2];  
Magic Number,Fluentscript.Lib.Plugins.Parser,FileExtPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FileExtPlugin.cs,CanHandle,The following statement contains a magic number: last = _lexer.State.Text [_lexer.State.Pos - 2];  
Magic Number,Fluentscript.Lib.Plugins.Parser,FluentFuncPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentFuncPlugin.cs,FluentFuncPlugin,The following statement contains a magic number: this.Precedence = 100;  
Magic Number,Fluentscript.Lib.Plugins.Parser,FluentMemberPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentMemberPlugin.cs,FluentMemberPlugin,The following statement contains a magic number: this.Precedence = 200;  
Magic Number,Fluentscript.Lib.Plugins.Parser,FuncWildCardPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FuncWildCardPlugin.cs,FuncWildCardPlugin,The following statement contains a magic number: this.Precedence = 10;  
Magic Number,Fluentscript.Lib.Plugins.Parser,HolidayPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\HolidayPlugin.cs,HolidayPlugin,The following statement contains a magic number: this.Precedence = 100;  
Magic Number,Fluentscript.Lib.Plugins.Parser,LogPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\LogPlugin.cs,LogPlugin,The following statement contains a magic number: this.Precedence = 100;  
Magic Number,Fluentscript.Lib.Plugins.Parser,LogExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\LogPlugin.cs,SetupFileLog,The following statement contains a magic number: if (ParamList.Count > 2) {  	string format = Convert.ToString (ParamList [2]);  	format = format.Replace ("${yyyy-MM-dd}"' DateTime.Now.ToString ("yyyy-MM-dd"));  	format = format.Replace ("${HH-mm-ss}"' DateTime.Now.ToString ("HH-mm-ss"));  	format = format.Replace ("${yyyy}"' DateTime.Now.ToString ("yyyy"));  	format = format.Replace ("${yy}"' DateTime.Now.ToString ("yy"));  	format = format.Replace ("${MM}"' DateTime.Now.ToString ("MM"));  	format = format.Replace ("${dd}"' DateTime.Now.ToString ("dd"));  	format = format.Replace ("${HH}"' DateTime.Now.ToString ("HH"));  	format = format.Replace ("${mm}"' DateTime.Now.ToString ("mm"));  	format = format.Replace ("${ss}"' DateTime.Now.ToString ("ss"));  	name = name + "-" + format + file.Extension;  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,LogExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\LogPlugin.cs,SetupFileLog,The following statement contains a magic number: if (ParamList.Count > 2) {  	string format = Convert.ToString (ParamList [2]);  	format = format.Replace ("${yyyy-MM-dd}"' DateTime.Now.ToString ("yyyy-MM-dd"));  	format = format.Replace ("${HH-mm-ss}"' DateTime.Now.ToString ("HH-mm-ss"));  	format = format.Replace ("${yyyy}"' DateTime.Now.ToString ("yyyy"));  	format = format.Replace ("${yy}"' DateTime.Now.ToString ("yy"));  	format = format.Replace ("${MM}"' DateTime.Now.ToString ("MM"));  	format = format.Replace ("${dd}"' DateTime.Now.ToString ("dd"));  	format = format.Replace ("${HH}"' DateTime.Now.ToString ("HH"));  	format = format.Replace ("${mm}"' DateTime.Now.ToString ("mm"));  	format = format.Replace ("${ss}"' DateTime.Now.ToString ("ss"));  	name = name + "-" + format + file.Extension;  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,MachineInfoPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\MachineInfoPlugin.cs,CanHandle,The following statement contains a magic number: if (next.Token == Tokens.Dot) {  	next = _tokenIt.Peek (2);  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,MachineInfoPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\MachineInfoPlugin.cs,CanHandle,The following statement contains a magic number: next = _tokenIt.Peek (2);  
Magic Number,Fluentscript.Lib.Plugins.Parser,PercentPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PercentPlugin.cs,CanHandle,The following statement contains a magic number: t = _tokenIt.Peek (2' false);  
Magic Number,Fluentscript.Lib.Plugins.Parser,PercentPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PercentPlugin.cs,Parse,The following statement contains a magic number: val = val / 100;  
Magic Number,Fluentscript.Lib.Plugins.Parser,PrintPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PrintPlugin.cs,Parse,The following statement contains a magic number: if (resultTokens.Length == 2 && includeNewLine) {  	var first = resultTokens [1];  	if (first.Kind != TokenKind.Multi)  		first.SetTextAndValue (first.Text' first.Text + Environment.NewLine);  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,RepeatPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\RepeatPlugin.cs,RepeatPlugin,The following statement contains a magic number: this.Precedence = 50;  
Magic Number,Fluentscript.Lib.Plugins.Parser,RoundExpr,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\RoundPlugin.cs,DoEvaluate,The following statement contains a magic number: if (_mode == RoundPlugin.RoundMode.Round) {  	var d = Convert.ToDouble (val + .5);  	d = Math.Floor (d);  	val = Convert.ToDouble (d);  } else if (_mode == RoundPlugin.RoundMode.RoundDown)  	val = Math.Floor (val);  else if (_mode == RoundPlugin.RoundMode.RoundUp)  	val = Math.Ceiling (val);  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,TimeExprPlugin,The following statement contains a magic number: _aliases ["noon"] = new TimeSpan (12' 0' 0);  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,TimeExprPlugin,The following statement contains a magic number: _aliases ["Noon"] = new TimeSpan (12' 0' 0);  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: if ((next == "am" || next == "pm") && tokenText.Length > 2) {  	var time = hours;  	// 130 - 930    am|pm  	if (time < 1000) {  		hours = Convert.ToDouble (tokenText [0].ToString ());  		minutes = Convert.ToDouble (tokenText.Substring (1));  	} // 1030 - 1230  am|pm                  	else {  		hours = Convert.ToDouble (tokenText.Substring (0' 2));  		minutes = Convert.ToDouble (tokenText.Substring (2));  	}  } // 5. Time specified with ":" 10:30 pm  else if (next == ":") {  	tokenIt.Advance ();  	// 6. Minutes part.  	minutes = tokenIt.ExpectNumber (true);  	if (tokenIt.NextToken.Token == Tokens.Colon) {  		tokenIt.Advance ();  		seconds = tokenIt.ExpectNumber (true);  	}  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: if ((next == "am" || next == "pm") && tokenText.Length > 2) {  	var time = hours;  	// 130 - 930    am|pm  	if (time < 1000) {  		hours = Convert.ToDouble (tokenText [0].ToString ());  		minutes = Convert.ToDouble (tokenText.Substring (1));  	} // 1030 - 1230  am|pm                  	else {  		hours = Convert.ToDouble (tokenText.Substring (0' 2));  		minutes = Convert.ToDouble (tokenText.Substring (2));  	}  } // 5. Time specified with ":" 10:30 pm  else if (next == ":") {  	tokenIt.Advance ();  	// 6. Minutes part.  	minutes = tokenIt.ExpectNumber (true);  	if (tokenIt.NextToken.Token == Tokens.Colon) {  		tokenIt.Advance ();  		seconds = tokenIt.ExpectNumber (true);  	}  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: if ((next == "am" || next == "pm") && tokenText.Length > 2) {  	var time = hours;  	// 130 - 930    am|pm  	if (time < 1000) {  		hours = Convert.ToDouble (tokenText [0].ToString ());  		minutes = Convert.ToDouble (tokenText.Substring (1));  	} // 1030 - 1230  am|pm                  	else {  		hours = Convert.ToDouble (tokenText.Substring (0' 2));  		minutes = Convert.ToDouble (tokenText.Substring (2));  	}  } // 5. Time specified with ":" 10:30 pm  else if (next == ":") {  	tokenIt.Advance ();  	// 6. Minutes part.  	minutes = tokenIt.ExpectNumber (true);  	if (tokenIt.NextToken.Token == Tokens.Colon) {  		tokenIt.Advance ();  		seconds = tokenIt.ExpectNumber (true);  	}  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: if ((next == "am" || next == "pm") && tokenText.Length > 2) {  	var time = hours;  	// 130 - 930    am|pm  	if (time < 1000) {  		hours = Convert.ToDouble (tokenText [0].ToString ());  		minutes = Convert.ToDouble (tokenText.Substring (1));  	} // 1030 - 1230  am|pm                  	else {  		hours = Convert.ToDouble (tokenText.Substring (0' 2));  		minutes = Convert.ToDouble (tokenText.Substring (2));  	}  } // 5. Time specified with ":" 10:30 pm  else if (next == ":") {  	tokenIt.Advance ();  	// 6. Minutes part.  	minutes = tokenIt.ExpectNumber (true);  	if (tokenIt.NextToken.Token == Tokens.Colon) {  		tokenIt.Advance ();  		seconds = tokenIt.ExpectNumber (true);  	}  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: if (time < 1000) {  	hours = Convert.ToDouble (tokenText [0].ToString ());  	minutes = Convert.ToDouble (tokenText.Substring (1));  } // 1030 - 1230  am|pm                  else {  	hours = Convert.ToDouble (tokenText.Substring (0' 2));  	minutes = Convert.ToDouble (tokenText.Substring (2));  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: if (time < 1000) {  	hours = Convert.ToDouble (tokenText [0].ToString ());  	minutes = Convert.ToDouble (tokenText.Substring (1));  } // 1030 - 1230  am|pm                  else {  	hours = Convert.ToDouble (tokenText.Substring (0' 2));  	minutes = Convert.ToDouble (tokenText.Substring (2));  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: if (time < 1000) {  	hours = Convert.ToDouble (tokenText [0].ToString ());  	minutes = Convert.ToDouble (tokenText.Substring (1));  } // 1030 - 1230  am|pm                  else {  	hours = Convert.ToDouble (tokenText.Substring (0' 2));  	minutes = Convert.ToDouble (tokenText.Substring (2));  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: hours = Convert.ToDouble (tokenText.Substring (0' 2));  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: minutes = Convert.ToDouble (tokenText.Substring (2));  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: if (text == "pm" && hours >= 1 && hours <= 11)  	hours += 12;  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: if (text == "pm" && hours >= 1 && hours <= 11)  	hours += 12;  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: hours += 12;  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,TimePlugin,The following statement contains a magic number: _aliases ["noon"] = new TimeSpan (12' 0' 0);  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,TimePlugin,The following statement contains a magic number: _aliases ["Noon"] = new TimeSpan (12' 0' 0);  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,CanHandle,The following statement contains a magic number: if (text.IndexOf (":") < 0) {  	text = current.Text + text.Substring (0' ndxAmOrPm + 2);  	_time = DateTimeTypeHelper.ParseTimeWithoutColons (current.Text' isAm);  	_endPos = _lexer.State.Pos + ndxAmOrPm + 1;  	return true;  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,CanHandle,The following statement contains a magic number: text = current.Text + text.Substring (0' ndxAmOrPm + 2);  
Magic Number,Fluentscript.Lib.Plugins.Parser,TimePlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,CanHandle,The following statement contains a magic number: text = current.Text + text.Substring (0' ndxAmOrPm + 2);  
Magic Number,Fluentscript.Lib.Plugins.Parser,VariablePathPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\VariablePathPlugin.cs,CanHandle,The following statement contains a magic number: if (current == Tokens.At) {  	idToken = _tokenIt.Peek ().Token;  	afterIdToken = _tokenIt.Peek (2).Token;  } else if (current.Kind == TokenKind.Ident) {  	afterIdToken = _tokenIt.Peek (1).Token;  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,VariablePathPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\VariablePathPlugin.cs,CanHandle,The following statement contains a magic number: afterIdToken = _tokenIt.Peek (2).Token;  
Magic Number,Fluentscript.Lib.Plugins.Parser,VariablePathPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\VariablePathPlugin.cs,ConstructBinaryExpr,The following statement contains a magic number: if (pathExps.Count == 2) {  	return Exprs.Binary (pathExps [0]' Operator.Add' pathExps [1]' pathExps [0].Token);  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,VariablePathPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\VariablePathPlugin.cs,ConstructBinaryExpr,The following statement contains a magic number: for (var ndx = lastIndex - 2; ndx >= 0; ndx--) {  	left = pathExps [ndx];  	exp = Exprs.Binary (left' Operator.Add' exp' left.Token);  }  
Magic Number,Fluentscript.Lib.Plugins.Parser,WordsPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\WordsPlugin.cs,Parse,The following statement contains a magic number: _tokenIt.Advance (2' false);  
Magic Number,Fluentscript.Lib.Plugins,ForPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\PluginsSys.cs,ForPlugin,The following statement contains a magic number: this.Precedence = 2;  
Magic Number,Fluentscript.Lib.Plugins.System,VarPlugin,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\System\VarPlugin.cs,VarPlugin,The following statement contains a magic number: this.Precedence = 1000;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [1] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [2] = 28;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [2] = 28;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [3] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [3] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [4] = 30;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [4] = 30;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [5] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [5] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [6] = 30;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [6] = 30;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [7] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [7] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [8] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [8] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [9] = 30;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [9] = 30;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [10] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [10] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [11] = 30;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [11] = 30;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [12] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth [12] = 31;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "last") {  	// 1. Add 2 weeks at least  	date = date.AddDays (14);  	var i = 0;  	var totalDaysInMonth = _daysInMonth [date.Month];  	while (i < 2) {  		// 2. feb check  		if (date.Month == 2 && (date.Day + 7) <= 28) {  			date = date.AddDays (7);  		} else if (date.Day + 7 <= totalDaysInMonth) {  			date = date.AddDays (7);  		}  		i++;  	}  } // Case 2:   else {  	var weekCount = 0;  	if (relDay == "first")  		weekCount = 1;  	else if (relDay == "second")  		weekCount = 2;  	else if (relDay == "third")  		weekCount = 3;  	else if (relDay == "fourth")  		weekCount = 4;  	// Case 2a: "first|second|third|fourth" of month  	if (weekCount > 0) {  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	} // Case 2b: ( 1st | 2nd | 3rd| 4th ) of month   	else {  		weekCount = Convert.ToInt32 (expr.RelativeDay);  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "last") {  	// 1. Add 2 weeks at least  	date = date.AddDays (14);  	var i = 0;  	var totalDaysInMonth = _daysInMonth [date.Month];  	while (i < 2) {  		// 2. feb check  		if (date.Month == 2 && (date.Day + 7) <= 28) {  			date = date.AddDays (7);  		} else if (date.Day + 7 <= totalDaysInMonth) {  			date = date.AddDays (7);  		}  		i++;  	}  } // Case 2:   else {  	var weekCount = 0;  	if (relDay == "first")  		weekCount = 1;  	else if (relDay == "second")  		weekCount = 2;  	else if (relDay == "third")  		weekCount = 3;  	else if (relDay == "fourth")  		weekCount = 4;  	// Case 2a: "first|second|third|fourth" of month  	if (weekCount > 0) {  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	} // Case 2b: ( 1st | 2nd | 3rd| 4th ) of month   	else {  		weekCount = Convert.ToInt32 (expr.RelativeDay);  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "last") {  	// 1. Add 2 weeks at least  	date = date.AddDays (14);  	var i = 0;  	var totalDaysInMonth = _daysInMonth [date.Month];  	while (i < 2) {  		// 2. feb check  		if (date.Month == 2 && (date.Day + 7) <= 28) {  			date = date.AddDays (7);  		} else if (date.Day + 7 <= totalDaysInMonth) {  			date = date.AddDays (7);  		}  		i++;  	}  } // Case 2:   else {  	var weekCount = 0;  	if (relDay == "first")  		weekCount = 1;  	else if (relDay == "second")  		weekCount = 2;  	else if (relDay == "third")  		weekCount = 3;  	else if (relDay == "fourth")  		weekCount = 4;  	// Case 2a: "first|second|third|fourth" of month  	if (weekCount > 0) {  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	} // Case 2b: ( 1st | 2nd | 3rd| 4th ) of month   	else {  		weekCount = Convert.ToInt32 (expr.RelativeDay);  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "last") {  	// 1. Add 2 weeks at least  	date = date.AddDays (14);  	var i = 0;  	var totalDaysInMonth = _daysInMonth [date.Month];  	while (i < 2) {  		// 2. feb check  		if (date.Month == 2 && (date.Day + 7) <= 28) {  			date = date.AddDays (7);  		} else if (date.Day + 7 <= totalDaysInMonth) {  			date = date.AddDays (7);  		}  		i++;  	}  } // Case 2:   else {  	var weekCount = 0;  	if (relDay == "first")  		weekCount = 1;  	else if (relDay == "second")  		weekCount = 2;  	else if (relDay == "third")  		weekCount = 3;  	else if (relDay == "fourth")  		weekCount = 4;  	// Case 2a: "first|second|third|fourth" of month  	if (weekCount > 0) {  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	} // Case 2b: ( 1st | 2nd | 3rd| 4th ) of month   	else {  		weekCount = Convert.ToInt32 (expr.RelativeDay);  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "last") {  	// 1. Add 2 weeks at least  	date = date.AddDays (14);  	var i = 0;  	var totalDaysInMonth = _daysInMonth [date.Month];  	while (i < 2) {  		// 2. feb check  		if (date.Month == 2 && (date.Day + 7) <= 28) {  			date = date.AddDays (7);  		} else if (date.Day + 7 <= totalDaysInMonth) {  			date = date.AddDays (7);  		}  		i++;  	}  } // Case 2:   else {  	var weekCount = 0;  	if (relDay == "first")  		weekCount = 1;  	else if (relDay == "second")  		weekCount = 2;  	else if (relDay == "third")  		weekCount = 3;  	else if (relDay == "fourth")  		weekCount = 4;  	// Case 2a: "first|second|third|fourth" of month  	if (weekCount > 0) {  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	} // Case 2b: ( 1st | 2nd | 3rd| 4th ) of month   	else {  		weekCount = Convert.ToInt32 (expr.RelativeDay);  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "last") {  	// 1. Add 2 weeks at least  	date = date.AddDays (14);  	var i = 0;  	var totalDaysInMonth = _daysInMonth [date.Month];  	while (i < 2) {  		// 2. feb check  		if (date.Month == 2 && (date.Day + 7) <= 28) {  			date = date.AddDays (7);  		} else if (date.Day + 7 <= totalDaysInMonth) {  			date = date.AddDays (7);  		}  		i++;  	}  } // Case 2:   else {  	var weekCount = 0;  	if (relDay == "first")  		weekCount = 1;  	else if (relDay == "second")  		weekCount = 2;  	else if (relDay == "third")  		weekCount = 3;  	else if (relDay == "fourth")  		weekCount = 4;  	// Case 2a: "first|second|third|fourth" of month  	if (weekCount > 0) {  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	} // Case 2b: ( 1st | 2nd | 3rd| 4th ) of month   	else {  		weekCount = Convert.ToInt32 (expr.RelativeDay);  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "last") {  	// 1. Add 2 weeks at least  	date = date.AddDays (14);  	var i = 0;  	var totalDaysInMonth = _daysInMonth [date.Month];  	while (i < 2) {  		// 2. feb check  		if (date.Month == 2 && (date.Day + 7) <= 28) {  			date = date.AddDays (7);  		} else if (date.Day + 7 <= totalDaysInMonth) {  			date = date.AddDays (7);  		}  		i++;  	}  } // Case 2:   else {  	var weekCount = 0;  	if (relDay == "first")  		weekCount = 1;  	else if (relDay == "second")  		weekCount = 2;  	else if (relDay == "third")  		weekCount = 3;  	else if (relDay == "fourth")  		weekCount = 4;  	// Case 2a: "first|second|third|fourth" of month  	if (weekCount > 0) {  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	} // Case 2b: ( 1st | 2nd | 3rd| 4th ) of month   	else {  		weekCount = Convert.ToInt32 (expr.RelativeDay);  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "last") {  	// 1. Add 2 weeks at least  	date = date.AddDays (14);  	var i = 0;  	var totalDaysInMonth = _daysInMonth [date.Month];  	while (i < 2) {  		// 2. feb check  		if (date.Month == 2 && (date.Day + 7) <= 28) {  			date = date.AddDays (7);  		} else if (date.Day + 7 <= totalDaysInMonth) {  			date = date.AddDays (7);  		}  		i++;  	}  } // Case 2:   else {  	var weekCount = 0;  	if (relDay == "first")  		weekCount = 1;  	else if (relDay == "second")  		weekCount = 2;  	else if (relDay == "third")  		weekCount = 3;  	else if (relDay == "fourth")  		weekCount = 4;  	// Case 2a: "first|second|third|fourth" of month  	if (weekCount > 0) {  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	} // Case 2b: ( 1st | 2nd | 3rd| 4th ) of month   	else {  		weekCount = Convert.ToInt32 (expr.RelativeDay);  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "last") {  	// 1. Add 2 weeks at least  	date = date.AddDays (14);  	var i = 0;  	var totalDaysInMonth = _daysInMonth [date.Month];  	while (i < 2) {  		// 2. feb check  		if (date.Month == 2 && (date.Day + 7) <= 28) {  			date = date.AddDays (7);  		} else if (date.Day + 7 <= totalDaysInMonth) {  			date = date.AddDays (7);  		}  		i++;  	}  } // Case 2:   else {  	var weekCount = 0;  	if (relDay == "first")  		weekCount = 1;  	else if (relDay == "second")  		weekCount = 2;  	else if (relDay == "third")  		weekCount = 3;  	else if (relDay == "fourth")  		weekCount = 4;  	// Case 2a: "first|second|third|fourth" of month  	if (weekCount > 0) {  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	} // Case 2b: ( 1st | 2nd | 3rd| 4th ) of month   	else {  		weekCount = Convert.ToInt32 (expr.RelativeDay);  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "last") {  	// 1. Add 2 weeks at least  	date = date.AddDays (14);  	var i = 0;  	var totalDaysInMonth = _daysInMonth [date.Month];  	while (i < 2) {  		// 2. feb check  		if (date.Month == 2 && (date.Day + 7) <= 28) {  			date = date.AddDays (7);  		} else if (date.Day + 7 <= totalDaysInMonth) {  			date = date.AddDays (7);  		}  		i++;  	}  } // Case 2:   else {  	var weekCount = 0;  	if (relDay == "first")  		weekCount = 1;  	else if (relDay == "second")  		weekCount = 2;  	else if (relDay == "third")  		weekCount = 3;  	else if (relDay == "fourth")  		weekCount = 4;  	// Case 2a: "first|second|third|fourth" of month  	if (weekCount > 0) {  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	} // Case 2b: ( 1st | 2nd | 3rd| 4th ) of month   	else {  		weekCount = Convert.ToInt32 (expr.RelativeDay);  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "last") {  	// 1. Add 2 weeks at least  	date = date.AddDays (14);  	var i = 0;  	var totalDaysInMonth = _daysInMonth [date.Month];  	while (i < 2) {  		// 2. feb check  		if (date.Month == 2 && (date.Day + 7) <= 28) {  			date = date.AddDays (7);  		} else if (date.Day + 7 <= totalDaysInMonth) {  			date = date.AddDays (7);  		}  		i++;  	}  } // Case 2:   else {  	var weekCount = 0;  	if (relDay == "first")  		weekCount = 1;  	else if (relDay == "second")  		weekCount = 2;  	else if (relDay == "third")  		weekCount = 3;  	else if (relDay == "fourth")  		weekCount = 4;  	// Case 2a: "first|second|third|fourth" of month  	if (weekCount > 0) {  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	} // Case 2b: ( 1st | 2nd | 3rd| 4th ) of month   	else {  		weekCount = Convert.ToInt32 (expr.RelativeDay);  		date = date.AddDays ((weekCount - 1) * DaysInWeek);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: date = date.AddDays (14);  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: while (i < 2) {  	// 2. feb check  	if (date.Month == 2 && (date.Day + 7) <= 28) {  		date = date.AddDays (7);  	} else if (date.Day + 7 <= totalDaysInMonth) {  		date = date.AddDays (7);  	}  	i++;  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: while (i < 2) {  	// 2. feb check  	if (date.Month == 2 && (date.Day + 7) <= 28) {  		date = date.AddDays (7);  	} else if (date.Day + 7 <= totalDaysInMonth) {  		date = date.AddDays (7);  	}  	i++;  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: while (i < 2) {  	// 2. feb check  	if (date.Month == 2 && (date.Day + 7) <= 28) {  		date = date.AddDays (7);  	} else if (date.Day + 7 <= totalDaysInMonth) {  		date = date.AddDays (7);  	}  	i++;  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: while (i < 2) {  	// 2. feb check  	if (date.Month == 2 && (date.Day + 7) <= 28) {  		date = date.AddDays (7);  	} else if (date.Day + 7 <= totalDaysInMonth) {  		date = date.AddDays (7);  	}  	i++;  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: while (i < 2) {  	// 2. feb check  	if (date.Month == 2 && (date.Day + 7) <= 28) {  		date = date.AddDays (7);  	} else if (date.Day + 7 <= totalDaysInMonth) {  		date = date.AddDays (7);  	}  	i++;  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: while (i < 2) {  	// 2. feb check  	if (date.Month == 2 && (date.Day + 7) <= 28) {  		date = date.AddDays (7);  	} else if (date.Day + 7 <= totalDaysInMonth) {  		date = date.AddDays (7);  	}  	i++;  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: while (i < 2) {  	// 2. feb check  	if (date.Month == 2 && (date.Day + 7) <= 28) {  		date = date.AddDays (7);  	} else if (date.Day + 7 <= totalDaysInMonth) {  		date = date.AddDays (7);  	}  	i++;  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (date.Month == 2 && (date.Day + 7) <= 28) {  	date = date.AddDays (7);  } else if (date.Day + 7 <= totalDaysInMonth) {  	date = date.AddDays (7);  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (date.Month == 2 && (date.Day + 7) <= 28) {  	date = date.AddDays (7);  } else if (date.Day + 7 <= totalDaysInMonth) {  	date = date.AddDays (7);  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (date.Month == 2 && (date.Day + 7) <= 28) {  	date = date.AddDays (7);  } else if (date.Day + 7 <= totalDaysInMonth) {  	date = date.AddDays (7);  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (date.Month == 2 && (date.Day + 7) <= 28) {  	date = date.AddDays (7);  } else if (date.Day + 7 <= totalDaysInMonth) {  	date = date.AddDays (7);  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (date.Month == 2 && (date.Day + 7) <= 28) {  	date = date.AddDays (7);  } else if (date.Day + 7 <= totalDaysInMonth) {  	date = date.AddDays (7);  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (date.Month == 2 && (date.Day + 7) <= 28) {  	date = date.AddDays (7);  } else if (date.Day + 7 <= totalDaysInMonth) {  	date = date.AddDays (7);  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: date = date.AddDays (7);  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (date.Day + 7 <= totalDaysInMonth) {  	date = date.AddDays (7);  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (date.Day + 7 <= totalDaysInMonth) {  	date = date.AddDays (7);  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: date = date.AddDays (7);  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "first")  	weekCount = 1;  else if (relDay == "second")  	weekCount = 2;  else if (relDay == "third")  	weekCount = 3;  else if (relDay == "fourth")  	weekCount = 4;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "first")  	weekCount = 1;  else if (relDay == "second")  	weekCount = 2;  else if (relDay == "third")  	weekCount = 3;  else if (relDay == "fourth")  	weekCount = 4;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "first")  	weekCount = 1;  else if (relDay == "second")  	weekCount = 2;  else if (relDay == "third")  	weekCount = 3;  else if (relDay == "fourth")  	weekCount = 4;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "second")  	weekCount = 2;  else if (relDay == "third")  	weekCount = 3;  else if (relDay == "fourth")  	weekCount = 4;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "second")  	weekCount = 2;  else if (relDay == "third")  	weekCount = 3;  else if (relDay == "fourth")  	weekCount = 4;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "second")  	weekCount = 2;  else if (relDay == "third")  	weekCount = 3;  else if (relDay == "fourth")  	weekCount = 4;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: weekCount = 2;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "third")  	weekCount = 3;  else if (relDay == "fourth")  	weekCount = 4;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "third")  	weekCount = 3;  else if (relDay == "fourth")  	weekCount = 4;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: weekCount = 3;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: if (relDay == "fourth")  	weekCount = 4;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: weekCount = 4;  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDay,The following statement contains a magic number: if (isDayOfWeek) {  	// Case 1a: day of week only  	if (!isTimeSpecified)  		return new LDayOfWeek (dayOfweek);  	// Case 1b: day of week ( with time )  	var today = DateTime.Today;  	var count = 0;  	while (today.DayOfWeek != dayOfweek && count < 8) {  		today = today.AddDays (1);  	}  }  
Magic Number,Fluentscript.Lib.Runtime,Execution,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDay,The following statement contains a magic number: while (today.DayOfWeek != dayOfweek && count < 8) {  	today = today.AddDays (1);  }  
Magic Number,Fluentscript.Lib.Runtime,MetaCompilerData,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\MetaCompilerData.cs,Init,The following statement contains a magic number: _daysToName [7] = "today";  
Magic Number,Fluentscript.Lib.Runtime,MetaCompilerData,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\MetaCompilerData.cs,Init,The following statement contains a magic number: _daysToName [8] = "yesterday";  
Magic Number,Fluentscript.Lib.Runtime,MetaCompilerData,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\MetaCompilerData.cs,Init,The following statement contains a magic number: _daysToName [9] = "tomorrow";  
Magic Number,Fluentscript.Lib.Runtime.Switches,TokensSwitch,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Switches\TokensSwitch.cs,DoExecute,The following statement contains a magic number: using (var writer = new StreamWriter (_outpath)) {  	foreach (TokenData tokendata in tokens) {  		// Option 1: Do not display newlines in the token list  		if (_excludeNewLines && tokendata.Token == Tokens.NewLine)  			continue;  		// Option 2: Just include line #' line char # and text.  		if (_conciseMode) {  			// Create only if needed.  			if (_paddings == null)  				_paddings = new Dictionary<int' string> ();  			var text = tokendata.Line.ToString () + " - " + tokendata.LineCharPos.ToString ();  			var lineinfo = this.Pad (text' 8);  			var tokenText = tokendata.Token.Text;  			if (tokendata.Token.Kind == TokenKind.LiteralString)  				tokenText = "'" + tokenText + "'";  			writer.WriteLine ("{0} : {1}"' lineinfo' tokenText);  		} else  			writer.WriteLine (tokendata.ToString ());  	}  	writer.Flush ();  }  
Magic Number,Fluentscript.Lib.Runtime.Switches,TokensSwitch,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Switches\TokensSwitch.cs,DoExecute,The following statement contains a magic number: foreach (TokenData tokendata in tokens) {  	// Option 1: Do not display newlines in the token list  	if (_excludeNewLines && tokendata.Token == Tokens.NewLine)  		continue;  	// Option 2: Just include line #' line char # and text.  	if (_conciseMode) {  		// Create only if needed.  		if (_paddings == null)  			_paddings = new Dictionary<int' string> ();  		var text = tokendata.Line.ToString () + " - " + tokendata.LineCharPos.ToString ();  		var lineinfo = this.Pad (text' 8);  		var tokenText = tokendata.Token.Text;  		if (tokendata.Token.Kind == TokenKind.LiteralString)  			tokenText = "'" + tokenText + "'";  		writer.WriteLine ("{0} : {1}"' lineinfo' tokenText);  	} else  		writer.WriteLine (tokendata.ToString ());  }  
Magic Number,Fluentscript.Lib.Runtime.Switches,TokensSwitch,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Switches\TokensSwitch.cs,DoExecute,The following statement contains a magic number: if (_conciseMode) {  	// Create only if needed.  	if (_paddings == null)  		_paddings = new Dictionary<int' string> ();  	var text = tokendata.Line.ToString () + " - " + tokendata.LineCharPos.ToString ();  	var lineinfo = this.Pad (text' 8);  	var tokenText = tokendata.Token.Text;  	if (tokendata.Token.Kind == TokenKind.LiteralString)  		tokenText = "'" + tokenText + "'";  	writer.WriteLine ("{0} : {1}"' lineinfo' tokenText);  } else  	writer.WriteLine (tokendata.ToString ());  
Magic Number,Fluentscript.Lib.Runtime.Switches,ListPluginsSwitch,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Switches\ListPluginsSwitch.cs,DoExecute,The following statement contains a magic number: printer.WriteLines (2);  
Magic Number,Fluentscript.Lib.Runtime.Switches,ListPluginsSwitch,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Switches\ListPluginsSwitch.cs,DoExecute,The following statement contains a magic number: i.Context.PluginsMeta.EachPlugin (plugin => {  	printer.WriteKeyValue (true' "Name: "' true' plugin.Name);  	printer.WriteKeyValue (true' "Desc: "' false' plugin.Desc);  	printer.WriteKeyValue (true' "Docs: "' false' plugin.Doc);  	printer.WriteKeyValue (true' "Type: "' false' plugin.PluginType);  	printer.WriteKeyValue (true' "IsOn: "' true' plugin.IsEnabled.ToString ().ToLower ());  	printer.WriteKeyValue (true' "Gram: "' true' plugin.GetFullGrammar ());  	printer.WriteKeyValue (true' "Examples: "' false' string.Empty);  	for (var ndx = 0; ndx < plugin.Examples.Length; ndx++) {  		var count = (ndx + 1).ToString (CultureInfo.InvariantCulture);  		printer.WriteLine (count + ". " + plugin.Examples [ndx]);  	}  	printer.WriteLines (3);  });  
Magic Number,Fluentscript.Lib.Runtime.Switches,ListPluginsSwitch,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Switches\ListPluginsSwitch.cs,DoExecute,The following statement contains a magic number: printer.WriteLines (3);  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,Interpret,The following statement contains a magic number: while (_pos < _scriptLength) {  	char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	// <html>  	if (c == TEMPLATE_START && n1 != CODE_START) {  		HandleHtml ();  	} // <%= expression %>  	else if (c == TEMPLATE_START && n1 == CODE_START && n2 == EXP_START) {  		HandleCodeExpression ();  	} // <%- comment %>  	else if (c == TEMPLATE_START && n1 == CODE_START && n2 == COMMENT_START) {  		HandleComment ();  	} // <% code %>  	else if (c == TEMPLATE_START && n1 == CODE_START) {  		HandleCodeBlock ();  	} // %% escape  	else if (c == TEMPLATE_START && n1 == ESCAPE && n2 == ESCAPE) {  		_lastText += '%';  		_lastState = State.Html;  	} else {  		HandleHtml ();  	}  	_pos++;  	_posInLine++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,Interpret,The following statement contains a magic number: while (_pos < _scriptLength) {  	char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	// <html>  	if (c == TEMPLATE_START && n1 != CODE_START) {  		HandleHtml ();  	} // <%= expression %>  	else if (c == TEMPLATE_START && n1 == CODE_START && n2 == EXP_START) {  		HandleCodeExpression ();  	} // <%- comment %>  	else if (c == TEMPLATE_START && n1 == CODE_START && n2 == COMMENT_START) {  		HandleComment ();  	} // <% code %>  	else if (c == TEMPLATE_START && n1 == CODE_START) {  		HandleCodeBlock ();  	} // %% escape  	else if (c == TEMPLATE_START && n1 == ESCAPE && n2 == ESCAPE) {  		_lastText += '%';  		_lastState = State.Html;  	} else {  		HandleHtml ();  	}  	_pos++;  	_posInLine++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,HandleHtml,The following statement contains a magic number: if (lastCodeIndex >= 1) {  	CodeBlock last = _buffer [lastCodeIndex];  	CodeBlock secondToLast = _buffer [lastCodeIndex - 1];  	if (secondToLast.TextType == State.Html && last.TextType == State.CodeBlock) {  		if (text == "\\r\\n") {  			text = string.Empty;  		} else if (text.StartsWith ("\\r\\n")) {  			text = text.Substring (4);  		}  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,HandleHtml,The following statement contains a magic number: if (secondToLast.TextType == State.Html && last.TextType == State.CodeBlock) {  	if (text == "\\r\\n") {  		text = string.Empty;  	} else if (text.StartsWith ("\\r\\n")) {  		text = text.Substring (4);  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,HandleHtml,The following statement contains a magic number: if (text == "\\r\\n") {  	text = string.Empty;  } else if (text.StartsWith ("\\r\\n")) {  	text = text.Substring (4);  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,HandleHtml,The following statement contains a magic number: if (text.StartsWith ("\\r\\n")) {  	text = text.Substring (4);  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,HandleHtml,The following statement contains a magic number: text = text.Substring (4);  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	if (c == '\r' && n1 == '\n') {  		text += "\\r\\n";  		_pos += 2;  		RegisterNewLine ();  	}  	if (n1 == expected1 && n2 == expected2) {  		text += c;  		if (readToEndOfExpected)  			_pos += 2;  		break;  	} else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	if (c == '\r' && n1 == '\n') {  		text += "\\r\\n";  		_pos += 2;  		RegisterNewLine ();  	}  	if (n1 == expected1 && n2 == expected2) {  		text += c;  		if (readToEndOfExpected)  			_pos += 2;  		break;  	} else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	if (c == '\r' && n1 == '\n') {  		text += "\\r\\n";  		_pos += 2;  		RegisterNewLine ();  	}  	if (n1 == expected1 && n2 == expected2) {  		text += c;  		if (readToEndOfExpected)  			_pos += 2;  		break;  	} else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	if (c == '\r' && n1 == '\n') {  		text += "\\r\\n";  		_pos += 2;  		RegisterNewLine ();  	}  	if (n1 == expected1 && n2 == expected2) {  		text += c;  		if (readToEndOfExpected)  			_pos += 2;  		break;  	} else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: if (c == '\r' && n1 == '\n') {  	text += "\\r\\n";  	_pos += 2;  	RegisterNewLine ();  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: _pos += 2;  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: if (n1 == expected1 && n2 == expected2) {  	text += c;  	if (readToEndOfExpected)  		_pos += 2;  	break;  } else {  	text += c;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: if (readToEndOfExpected)  	_pos += 2;  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: _pos += 2;  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	if (c == '\r' && n1 == '\n') {  		text += "\r\n";  		_pos += 2;  		RegisterNewLine ();  	} // "abc" - string  	else if (c == '"') {  		text += ReadCodeString (true);  	} // %>  	else if (c == expected1 && n1 == expected2) {  		if (readToEndOfExpected)  			_pos += 1;  		break;  	} else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	if (c == '\r' && n1 == '\n') {  		text += "\r\n";  		_pos += 2;  		RegisterNewLine ();  	} // "abc" - string  	else if (c == '"') {  		text += ReadCodeString (true);  	} // %>  	else if (c == expected1 && n1 == expected2) {  		if (readToEndOfExpected)  			_pos += 1;  		break;  	} else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	if (c == '\r' && n1 == '\n') {  		text += "\r\n";  		_pos += 2;  		RegisterNewLine ();  	} // "abc" - string  	else if (c == '"') {  		text += ReadCodeString (true);  	} // %>  	else if (c == expected1 && n1 == expected2) {  		if (readToEndOfExpected)  			_pos += 1;  		break;  	} else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,The following statement contains a magic number: if (c == '\r' && n1 == '\n') {  	text += "\r\n";  	_pos += 2;  	RegisterNewLine ();  } // "abc" - string  else if (c == '"') {  	text += ReadCodeString (true);  } // %>  else if (c == expected1 && n1 == expected2) {  	if (readToEndOfExpected)  		_pos += 1;  	break;  } else {  	text += c;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,The following statement contains a magic number: _pos += 2;  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	char n3 = _pos + 3 >= _scriptLength ? ' ' : _script [_pos + 3];  	// new line  	if (c == '\r' && n1 == '\n') {  		text += "\\r\\n";  		_pos += 2;  		RegisterNewLine ();  	} // <% - begin code block  	else if (c == TEMPLATE_START && n1 == CODE_START && n2 != CODE_START) {  		_pos--;  		break;  	} // "abc" - string  	else if (c == '"') {  		text += "\\\"";  		_pos++;  	} // <!-- --> html comment  	else if (c == '<' && n1 == '!' && n2 == '-' && n3 == '-') {  		text += ReadHtmlComment ();  	} // text.  	else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	char n3 = _pos + 3 >= _scriptLength ? ' ' : _script [_pos + 3];  	// new line  	if (c == '\r' && n1 == '\n') {  		text += "\\r\\n";  		_pos += 2;  		RegisterNewLine ();  	} // <% - begin code block  	else if (c == TEMPLATE_START && n1 == CODE_START && n2 != CODE_START) {  		_pos--;  		break;  	} // "abc" - string  	else if (c == '"') {  		text += "\\\"";  		_pos++;  	} // <!-- --> html comment  	else if (c == '<' && n1 == '!' && n2 == '-' && n3 == '-') {  		text += ReadHtmlComment ();  	} // text.  	else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	char n3 = _pos + 3 >= _scriptLength ? ' ' : _script [_pos + 3];  	// new line  	if (c == '\r' && n1 == '\n') {  		text += "\\r\\n";  		_pos += 2;  		RegisterNewLine ();  	} // <% - begin code block  	else if (c == TEMPLATE_START && n1 == CODE_START && n2 != CODE_START) {  		_pos--;  		break;  	} // "abc" - string  	else if (c == '"') {  		text += "\\\"";  		_pos++;  	} // <!-- --> html comment  	else if (c == '<' && n1 == '!' && n2 == '-' && n3 == '-') {  		text += ReadHtmlComment ();  	} // text.  	else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	char n3 = _pos + 3 >= _scriptLength ? ' ' : _script [_pos + 3];  	// new line  	if (c == '\r' && n1 == '\n') {  		text += "\\r\\n";  		_pos += 2;  		RegisterNewLine ();  	} // <% - begin code block  	else if (c == TEMPLATE_START && n1 == CODE_START && n2 != CODE_START) {  		_pos--;  		break;  	} // "abc" - string  	else if (c == '"') {  		text += "\\\"";  		_pos++;  	} // <!-- --> html comment  	else if (c == '<' && n1 == '!' && n2 == '-' && n3 == '-') {  		text += ReadHtmlComment ();  	} // text.  	else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	char n1 = _pos + 1 >= _scriptLength ? ' ' : _script [_pos + 1];  	char n2 = _pos + 2 >= _scriptLength ? ' ' : _script [_pos + 2];  	char n3 = _pos + 3 >= _scriptLength ? ' ' : _script [_pos + 3];  	// new line  	if (c == '\r' && n1 == '\n') {  		text += "\\r\\n";  		_pos += 2;  		RegisterNewLine ();  	} // <% - begin code block  	else if (c == TEMPLATE_START && n1 == CODE_START && n2 != CODE_START) {  		_pos--;  		break;  	} // "abc" - string  	else if (c == '"') {  		text += "\\\"";  		_pos++;  	} // <!-- --> html comment  	else if (c == '<' && n1 == '!' && n2 == '-' && n3 == '-') {  		text += ReadHtmlComment ();  	} // text.  	else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: if (c == '\r' && n1 == '\n') {  	text += "\\r\\n";  	_pos += 2;  	RegisterNewLine ();  } // <% - begin code block  else if (c == TEMPLATE_START && n1 == CODE_START && n2 != CODE_START) {  	_pos--;  	break;  } // "abc" - string  else if (c == '"') {  	text += "\\\"";  	_pos++;  } // <!-- --> html comment  else if (c == '<' && n1 == '!' && n2 == '-' && n3 == '-') {  	text += ReadHtmlComment ();  } // text.  else {  	text += c;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: _pos += 2;  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeString,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	Char n1 = _script [_pos + 1];  	// \\  	if (c == '\\' && n1 == '\\') {  		text += "\\\\";  		_pos += 2;  	} // \"  	else if (c == '\\' && n1 == '"') {  		text += "\\\"";  		_pos += 2;  	} // \r  	else if (c == '\\') {  		text += "\\";  		_pos++;  	} else if (c == '"') {  		text += "\"";  		if (advanceAfterEndQuote)  			_pos++;  		break;  	} else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeString,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c = _script [_pos];  	Char n1 = _script [_pos + 1];  	// \\  	if (c == '\\' && n1 == '\\') {  		text += "\\\\";  		_pos += 2;  	} // \"  	else if (c == '\\' && n1 == '"') {  		text += "\\\"";  		_pos += 2;  	} // \r  	else if (c == '\\') {  		text += "\\";  		_pos++;  	} else if (c == '"') {  		text += "\"";  		if (advanceAfterEndQuote)  			_pos++;  		break;  	} else {  		text += c;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeString,The following statement contains a magic number: if (c == '\\' && n1 == '\\') {  	text += "\\\\";  	_pos += 2;  } // \"  else if (c == '\\' && n1 == '"') {  	text += "\\\"";  	_pos += 2;  } // \r  else if (c == '\\') {  	text += "\\";  	_pos++;  } else if (c == '"') {  	text += "\"";  	if (advanceAfterEndQuote)  		_pos++;  	break;  } else {  	text += c;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeString,The following statement contains a magic number: if (c == '\\' && n1 == '\\') {  	text += "\\\\";  	_pos += 2;  } // \"  else if (c == '\\' && n1 == '"') {  	text += "\\\"";  	_pos += 2;  } // \r  else if (c == '\\') {  	text += "\\";  	_pos++;  } else if (c == '"') {  	text += "\"";  	if (advanceAfterEndQuote)  		_pos++;  	break;  } else {  	text += c;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeString,The following statement contains a magic number: _pos += 2;  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeString,The following statement contains a magic number: if (c == '\\' && n1 == '"') {  	text += "\\\"";  	_pos += 2;  } // \r  else if (c == '\\') {  	text += "\\";  	_pos++;  } else if (c == '"') {  	text += "\"";  	if (advanceAfterEndQuote)  		_pos++;  	break;  } else {  	text += c;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeString,The following statement contains a magic number: _pos += 2;  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtmlComment,The following statement contains a magic number: _pos += 4;  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtmlComment,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c1 = _script [_pos];  	if (c1 == '"') {  		text += "\\\"";  		_pos++;  	} else if (c1 == '\\') {  		text += "\\\\";  		_pos++;  	} else if (c1 == '-' && _script [_pos + 1] == '-' && _script [_pos + 2] == '>') {  		text += " -->";  		_pos += 3;  		break;  	} else {  		text += c1;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtmlComment,The following statement contains a magic number: while (_pos < _scriptLength) {  	Char c1 = _script [_pos];  	if (c1 == '"') {  		text += "\\\"";  		_pos++;  	} else if (c1 == '\\') {  		text += "\\\\";  		_pos++;  	} else if (c1 == '-' && _script [_pos + 1] == '-' && _script [_pos + 2] == '>') {  		text += " -->";  		_pos += 3;  		break;  	} else {  		text += c1;  		_pos++;  	}  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtmlComment,The following statement contains a magic number: if (c1 == '"') {  	text += "\\\"";  	_pos++;  } else if (c1 == '\\') {  	text += "\\\\";  	_pos++;  } else if (c1 == '-' && _script [_pos + 1] == '-' && _script [_pos + 2] == '>') {  	text += " -->";  	_pos += 3;  	break;  } else {  	text += c1;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtmlComment,The following statement contains a magic number: if (c1 == '"') {  	text += "\\\"";  	_pos++;  } else if (c1 == '\\') {  	text += "\\\\";  	_pos++;  } else if (c1 == '-' && _script [_pos + 1] == '-' && _script [_pos + 2] == '>') {  	text += " -->";  	_pos += 3;  	break;  } else {  	text += c1;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtmlComment,The following statement contains a magic number: if (c1 == '\\') {  	text += "\\\\";  	_pos++;  } else if (c1 == '-' && _script [_pos + 1] == '-' && _script [_pos + 2] == '>') {  	text += " -->";  	_pos += 3;  	break;  } else {  	text += c1;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtmlComment,The following statement contains a magic number: if (c1 == '\\') {  	text += "\\\\";  	_pos++;  } else if (c1 == '-' && _script [_pos + 1] == '-' && _script [_pos + 2] == '>') {  	text += " -->";  	_pos += 3;  	break;  } else {  	text += c1;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtmlComment,The following statement contains a magic number: if (c1 == '-' && _script [_pos + 1] == '-' && _script [_pos + 2] == '>') {  	text += " -->";  	_pos += 3;  	break;  } else {  	text += c1;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtmlComment,The following statement contains a magic number: if (c1 == '-' && _script [_pos + 1] == '-' && _script [_pos + 2] == '>') {  	text += " -->";  	_pos += 3;  	break;  } else {  	text += c1;  	_pos++;  }  
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtmlComment,The following statement contains a magic number: _pos += 3;  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("length"' "ft"' "foot"' 12);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("length"' "ft"' "feet"' 12);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("length"' "yd"' "yard"' 36);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("length"' "yd"' "yards"' 36);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("length"' "mi"' "mile"' 63360);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("length"' "mi"' "miles"' 63360);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("computerspace"' "kb"' "kilobyte"' 12);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("computerspace"' "kb"' "kilobytes"' 12);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("computerspace"' "mb"' "megabyte"' 36);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("computerspace"' "mb"' "megabytes"' 36);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("computerspace"' "gig"' "gigabyte"' 63360);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("computerspace"' "gigs"' "gigabytes"' 63360);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "lb"' "pound"' 16);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "lbs"' "pounds"' 16);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "tn"' "ton"' 32000);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "tn"' "tons"' 32000);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "mg"' "milligram"' .000352739);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "mg"' "milligrams"' .000352739);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "g"' "gram"' .0352739);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "g"' "grams"' .0352739);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "kg"' "kilogram"' 35.273962);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "kg"' "kilograms"' 35.273962);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "t"' "tonne"' 32000);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("weight"' "t"' "tonnes"' 32000);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("volume"' "tbsp"' "tablespoon"' 3);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("volume"' "tbsp"' "tablespoons"' 3);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("volume"' "cup"' "cup"' 48);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("volume"' "cup"' "cups"' 48);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("volume"' "pt"' "pint"' 96);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("volume"' "pt"' "pints"' 96);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("volume"' "qt"' "quart"' 192);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("volume"' "qt"' "quarts"' 192);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("volume"' "gal"' "gallon"' 768);  
Magic Number,Fluentscript.Lib.Types,Units,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit ("volume"' "gal"' "gallons"' 768);  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSTableMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSTableMethods.cs,Reverse,The following statement contains a magic number: if (length % 2 == 0)  	stopIndex--;  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSArrayMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSArrayMethods.cs,Reverse,The following statement contains a magic number: if (length % 2 == 0)  	stopIndex--;  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFrom,The following statement contains a magic number: if (paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6)  	return false;  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFrom,The following statement contains a magic number: if (paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6)  	return false;  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFromArgs,The following statement contains a magic number: if (paramCount == 0 || paramCount == 1 || paramCount == 3 || paramCount == 6)  	return true;  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFromArgs,The following statement contains a magic number: if (paramCount == 0 || paramCount == 1 || paramCount == 3 || paramCount == 6)  	return true;  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: if (parameters.Length == 3)  	return new LDate (new DateTime (args [0]' args [1]' args [2]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: if (parameters.Length == 3)  	return new LDate (new DateTime (args [0]' args [1]' args [2]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: return new LDate (new DateTime (args [0]' args [1]' args [2]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: if (parameters.Length == 6)  	return new LDate (new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: if (parameters.Length == 6)  	return new LDate (new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: if (parameters.Length == 6)  	return new LDate (new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: if (parameters.Length == 6)  	return new LDate (new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: if (parameters.Length == 6)  	return new LDate (new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: return new LDate (new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: return new LDate (new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: return new LDate (new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: return new LDate (new DateTime (args [0]' args [1]' args [2]' args [3]' args [4]' args [5]));  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSTimeMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSTimeMethods.cs,CanCreateFromArgs,The following statement contains a magic number: if (paramCount == 0 || paramCount == 3 || paramCount == 4)  	return true;  
Magic Number,Fluentscript.Lib.Types.Javascript,LJSTimeMethods,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSTimeMethods.cs,CanCreateFromArgs,The following statement contains a magic number: if (paramCount == 0 || paramCount == 3 || paramCount == 4)  	return true;  
Magic Number,Fluentscript.Lib._Core,LangSettings,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxConsequetiveExpressions = 7;  
Magic Number,Fluentscript.Lib._Core,LangSettings,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxConsequetiveMemberAccess = 5;  
Magic Number,Fluentscript.Lib._Core,LangSettings,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxExceptions = 10;  
Magic Number,Fluentscript.Lib._Core,LangSettings,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxFuncParams = 10;  
Magic Number,Fluentscript.Lib._Core,LangSettings,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxLoopLimit = 200;  
Magic Number,Fluentscript.Lib._Core,LangSettings,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxCallStack = 15;  
Magic Number,Fluentscript.Lib._Core,LangSettings,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxStatements = 200;  
Magic Number,Fluentscript.Lib._Core,LangSettings,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxScriptLength = 20000;  
Magic Number,Fluentscript.Lib._Core.Grammar,ExtendedPropsHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Parse,The following statement contains a magic number: if (!string.IsNullOrEmpty (extraProps)) {  	if (!extraProps.Contains (';'))  		extraProps += ";";  	var props = extraProps.Split (';');  	foreach (var prop in props) {  		if (!string.IsNullOrEmpty (prop)) {  			var tokens = prop.Split (':');  			var name = tokens [1];  			var type = tokens [0];  			var modifier = ";";  			if (name.StartsWith ("prop-")) {  				name = name.Substring (5);  				modifier = " { get; set; }";  			}  			propsList.Add (new ExtendedProp () {  				Name = name'  				TypeName = type'  				PostModifier = modifier  			});  		}  	}  }  
Magic Number,Fluentscript.Lib._Core.Grammar,ExtendedPropsHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Parse,The following statement contains a magic number: foreach (var prop in props) {  	if (!string.IsNullOrEmpty (prop)) {  		var tokens = prop.Split (':');  		var name = tokens [1];  		var type = tokens [0];  		var modifier = ";";  		if (name.StartsWith ("prop-")) {  			name = name.Substring (5);  			modifier = " { get; set; }";  		}  		propsList.Add (new ExtendedProp () {  			Name = name'  			TypeName = type'  			PostModifier = modifier  		});  	}  }  
Magic Number,Fluentscript.Lib._Core.Grammar,ExtendedPropsHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Parse,The following statement contains a magic number: if (!string.IsNullOrEmpty (prop)) {  	var tokens = prop.Split (':');  	var name = tokens [1];  	var type = tokens [0];  	var modifier = ";";  	if (name.StartsWith ("prop-")) {  		name = name.Substring (5);  		modifier = " { get; set; }";  	}  	propsList.Add (new ExtendedProp () {  		Name = name'  		TypeName = type'  		PostModifier = modifier  	});  }  
Magic Number,Fluentscript.Lib._Core.Grammar,ExtendedPropsHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Parse,The following statement contains a magic number: if (name.StartsWith ("prop-")) {  	name = name.Substring (5);  	modifier = " { get; set; }";  }  
Magic Number,Fluentscript.Lib._Core.Grammar,ExtendedPropsHelper,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Parse,The following statement contains a magic number: name = name.Substring (5);  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec> () {  	new TokenSpec (100' "Keyword"' "var"' "Var")'  	new TokenSpec (101' "Keyword"' "if"' "If")'  	new TokenSpec (102' "Keyword"' "else"' "Else")'  	new TokenSpec (103' "Keyword"' "break"' "Break")'  	new TokenSpec (104' "Keyword"' "continue"' "Continue")'  	new TokenSpec (105' "Keyword"' "for"' "For")'  	new TokenSpec (106' "Keyword"' "while"' "While")'  	new TokenSpec (107' "Keyword"' "function"' "Function")'  	new TokenSpec (108' "Keyword"' "return"' "Return")'  	new TokenSpec (109' "Keyword"' "new"' "New")'  	new TokenSpec (110' "Keyword"' "try"' "Try")'  	new TokenSpec (111' "Keyword"' "catch"' "Catch")'  	new TokenSpec (112' "Keyword"' "throw"' "Throw")'  	new TokenSpec (113' "Keyword"' "in"' "In")'  	new TokenSpec (114' "Keyword"' "run"' "Run")'  	new TokenSpec (115' "Keyword"' "then"' "Then")'  	new TokenSpec (300' "Symbol"' "+"' "Plus")'  	new TokenSpec (301' "Symbol"' "-"' "Minus")'  	new TokenSpec (302' "Symbol"' "*"' "Multiply")'  	new TokenSpec (303' "Symbol"' "/"' "Divide")'  	new TokenSpec (304' "Symbol"' "%"' "Percent")'  	new TokenSpec (305' "Symbol"' "<"' "LessThan")'  	new TokenSpec (306' "Symbol"' "<="' "LessThanOrEqual")'  	new TokenSpec (307' "Symbol"' ">"' "MoreThan")'  	new TokenSpec (308' "Symbol"' ">="' "MoreThanOrEqual")'  	new TokenSpec (309' "Symbol"' "=="' "EqualEqual")'  	new TokenSpec (310' "Symbol"' "!="' "NotEqual")'  	new TokenSpec (311' "Symbol"' "&&"' "LogicalAnd")'  	new TokenSpec (312' "Symbol"' "||"' "LogicalOr")'  	new TokenSpec (313' "Symbol"' "!"' "LogicalNot")'  	new TokenSpec (314' "Symbol"' "?"' "Question")'  	new TokenSpec (315' "Symbol"' "++"' "Increment")'  	new TokenSpec (316' "Symbol"' "--"' "Decrement")'  	new TokenSpec (317' "Symbol"' "+="' "IncrementAdd")'  	new TokenSpec (318' "Symbol"' "-="' "IncrementSubtract")'  	new TokenSpec (319' "Symbol"' "*="' "IncrementMultiply")'  	new TokenSpec (320' "Symbol"' "/="' "IncrementDivide")'  	new TokenSpec (321' "Symbol"' "{"' "LeftBrace")'  	new TokenSpec (322' "Symbol"' "}"' "RightBrace")'  	new TokenSpec (323' "Symbol"' "("' "LeftParenthesis")'  	new TokenSpec (324' "Symbol"' ")"' "RightParenthesis")'  	new TokenSpec (325' "Symbol"' "["' "LeftBracket")'  	new TokenSpec (326' "Symbol"' "]"' "RightBracket")'  	new TokenSpec (327' "Symbol"' ";"' "Semicolon")'  	new TokenSpec (328' "Symbol"' "'"' "Comma")'  	new TokenSpec (329' "Symbol"' "."' "Dot")'  	new TokenSpec (330' "Symbol"' ":"' "Colon")'  	new TokenSpec (331' "Symbol"' "="' "Assignment")'  	new TokenSpec (332' "Symbol"' "$"' "Dollar")'  	new TokenSpec (333' "Symbol"' "@"' "At")'  	new TokenSpec (334' "Symbol"' "#"' "Pound")'  	new TokenSpec (335' "Symbol"' "|"' "Pipe")'  	new TokenSpec (336' "Symbol"' "\\"' "BackSlash")'  	new TokenSpec (400' "LiteralOther"' "eof:\"eof\""' "EndToken")'  	new TokenSpec (401' "LiteralOther"' "unknown:\"unknown\""' "Unknown")'  	new TokenSpec (402' "LiteralOther"' "multi:\"multi\""' "Multi") {  		GenerateObject = false  	}'  	new TokenSpec (200' "LiteralBool"' "true:true"' "True")'  	new TokenSpec (201' "LiteralBool"' "false:false"' "False")'  	new TokenSpec (202' "LiteralOther"' "null:null"' "Null")'  	new TokenSpec (203' "LiteralOther"' " :\"\""' "WhiteSpace")'  	new TokenSpec (204' "LiteralOther"' "newline:\"newline\""' "NewLine")'  	new TokenSpec (205' "LiteralOther"' "comment_sl:\"comment_sl\""' "CommentSLine")'  	new TokenSpec (206' "LiteralOther"' "comment_ml:\"comment_ml\""' "CommentMLine")'  	new TokenSpec (207' "LiteralIdent"' "na:\"na\""' "Ident") {  		GenerateObject = false  	}'  	new TokenSpec (208' "LiteralOther"' "na:\"na\""' "LiteralBool") {  		GenerateObject = false  	}'  	new TokenSpec (209' "LiteralOther"' "na:\"na\""' "LiteralDate") {  		GenerateObject = false  	}'  	new TokenSpec (210' "LiteralOther"' "na:\"na\""' "LiteralDay") {  		GenerateObject = false  	}'  	new TokenSpec (211' "LiteralOther"' "na:\"na\""' "LiteralNumber") {  		GenerateObject = false  	}'  	new TokenSpec (212' "LiteralOther"' "na:\"na\""' "LiteralString") {  		GenerateObject = false  	}'  	new TokenSpec (213' "LiteralOther"' "na:\"na\""' "LiteralTime") {  		GenerateObject = false  	}'  	new TokenSpec (214' "LiteralOther"' "na:\"na\""' "LiteralVersion") {  		GenerateObject = false  	}'  	new TokenSpec (215' "LiteralOther"' "na:\"na\""' "LiteralOther") {  		GenerateObject = false  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.ExprSpecs = new List<ExprSpec> () {  	new ExprSpec (className: "ArrayExpr"' name: "Array"' extends: "IndexableExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "List<Expr>:Exprs")'  	new ExprSpec (className: "AnyOfExpr"' name: "AnyOf"' extends: "Expr"' implements: "IParameterExpression"' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:CompareExpr;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList")'  	new ExprSpec (className: "AssignExpr"' name: "Assign"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:VarExp;Expr:ValueExp;bool:IsDeclaration")'  	new ExprSpec (className: "AssignMultiExpr"' name: "AssignMulti"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "List<AssignExpr>:Assignments")'  	new ExprSpec (className: "BinaryExpr"' name: "Binary"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: true' createNewSymScope: false' hasOperator: true' qualifiedName: "return \"\";"' extraProps: null)'  	new ExprSpec (className: "CompareExpr"' name: "Compare"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: true' createNewSymScope: false' hasOperator: true' qualifiedName: "return \"\";"' extraProps: null)'  	new ExprSpec (className: "ConditionExpr"' name: "Condition"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: true' createNewSymScope: false' hasOperator: true' qualifiedName: "return \"\";"' extraProps: null)'  	new ExprSpec (className: "ConstantExpr"' name: "Constant"' extends: "ValueExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: null)'  	new ExprSpec (className: "DayExpr"' name: "Day"' extends: "ValueExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:Name;string:Time")'  	new ExprSpec (className: "DurationExpr"' name: "Duration"' extends: "ValueExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:Duration;string:Mode")'  	new ExprSpec (className: "DateExpr"' name: "Date"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "int:Month;int:Day;int:Year;string:Time")'  	new ExprSpec (className: "DateRelativeExpr"' name: "DateRelative"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "int:Month;int:DayOfTheWeek;string:RelativeDay")'  	new ExprSpec (className: "FunctionCallExpr"' name: "FunctionCall"' extends: "Expr"' implements: "IParameterExpression"' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return this.NameExp != null ? this.NameExp.ToQualifiedName() : \"\";"' extraProps: "Expr:NameExp;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList;FunctionExpr:Function;bool:RetainEvaluatedParams;bool:IsScopeVariable")'  	new ExprSpec (className: "FunctionExpr"' name: "Function"' extends: "BlockExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "FunctionMetaData:Meta;long:ExecutionCount;long:ErrorCount;bool:HasReturnValue;object:ReturnValue;List<object>:ArgumentValues;bool:ContinueRunning")'  	new ExprSpec (className: "IndexExpr"' name: "Index"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:IndexExp;Expr:VarExp;bool:IsAssignment")'  	new ExprSpec (className: "InterpolatedExpr"' name: "Interpolated"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "List<Expr>:Expressions")'  	new ExprSpec (className: "ListCheckExpr"' name: "ListCheck"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:NameExp")'  	new ExprSpec (className: "MapExpr"' name: "Map"' extends: "IndexableExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "List<Tuple<string'Expr>>:Expressions")'  	new ExprSpec (className: "MemberAccessExpr"' name: "MemberAccess"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return this.VarExp.ToQualifiedName() + \".\" + this.MemberName;"' extraProps: "string:MemberName;Expr:VarExp;bool:IsAssignment")'  	new ExprSpec (className: "NamedParameterExpr"' name: "NamedParameter"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return this.Name;"' extraProps: "string:Name;Expr:Value;int:Pos")'  	new ExprSpec (className: "NegateExpr"' name: "Negate"' extends: "VariableExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:Expression")'  	new ExprSpec (className: "NewExpr"' name: "New"' extends: "Expr"' implements: "IParameterExpression"' token: "new"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:TypeName;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList")'  	new ExprSpec (className: "ParameterExpr"' name: "Parameter"' extends: "Expr"' implements: "IParameterExpression"' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "FunctionMetaData:Meta;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList;")'  	new ExprSpec (className: "RunExpr"' name: "Run"' extends: "Expr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:FuncName;string:Mode;Expr:FuncCallOnAfterExpr;Expr:FuncCallExpr")'  	new ExprSpec (className: "TableExpr"' name: "Table"' extends: "IndexableExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "List<string>:Fields")'  	new ExprSpec (className: "UnaryExpr"' name: "Unary"' extends: "VariableExpr"' implements: ""' token: ""' createPlugin: false' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Operator:Op;Expr:Expression;double:Increment")'  	new ExprSpec (className: "BreakExpr"' name: "Break"' extends: "Expr"' implements: ""' token: "break"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: true' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: null)'  	new ExprSpec (className: "ContinueExpr"' name: "Continue"' extends: "Expr"' implements: ""' token: "continue"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: true' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: null)'  	new ExprSpec (className: "ForEachExpr"' name: "ForEach"' extends: "WhileExpr"' implements: ""' token: "for"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:VarName;Expr:SourceExpr;string:SourceName")'  	new ExprSpec (className: "ForExpr"' name: "For"' extends: "WhileExpr"' implements: ""' token: "for"' createPlugin: true' pluginImplements: ""' precedence: 2' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:Start;Expr:Increment")'  	new ExprSpec (className: "FunctionDeclareExpr"' name: "FunctionDeclare"' extends: "Expr"' implements: ""' token: "function"' createPlugin: true' pluginImplements: "IParserCallbacks"' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "FunctionExpr:Function")'  	new ExprSpec (className: "IfExpr"' name: "If"' extends: "ConditionalBlockExpr"' implements: ""' token: "if"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "BlockExpr:Else")'  	new ExprSpec (className: "LambdaExpr"' name: "Lambda"' extends: "Expr"' implements: ""' token: "function"' createPlugin: true' pluginImplements: "IParserCallbacks"' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "FunctionExpr:Expr")'  	new ExprSpec (className: "ReturnExpr"' name: "Return"' extends: "Expr"' implements: ""' token: "return"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: true' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:Exp")'  	new ExprSpec (className: "ThrowExpr"' name: "Throw"' extends: "Expr"' implements: ""' token: "throw"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: true' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "Expr:Exp")'  	new ExprSpec (className: "TryCatchExpr"' name: "TryCatch"' extends: "Expr"' implements: "IBlockExpr"' token: "try"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "string:ErrorName;List<Expr>:prop-Statements;BlockExpr:Catch")'  	new ExprSpec (className: "WhileExpr"' name: "While"' extends: "ConditionalBlockExpr"' implements: "ILoop"' token: "while"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: true' hasTerminator: false' isBlock: true' hasLhsRhs: false' createNewSymScope: true' hasOperator: false' qualifiedName: "return \"\";"' extraProps: "bool:prop-DoBreakLoop;bool:prop-DoContinueLoop;bool:prop-DoContinueRunning")'  	new ExprSpec (className: "VariableExpr"' name: "Variable"' extends: "Expr"' implements: ""' token: "@ident"' createPlugin: true' pluginImplements: ""' precedence: 1' isStatement: false' hasTerminator: false' isBlock: false' hasLhsRhs: false' createNewSymScope: false' hasOperator: false' qualifiedName: "return this.Name;"' extraProps: "string:Name")'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,F:\newReposMay17\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec> () {  	new TypeSpec () {  		ClassName = "Array"'  		Generate = true'  		ConstValue = "Array"'  		Type = ""'  		Name = "array"'  		FullName = "sys.array"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Bool"'  		Generate = true'  		ConstValue = "Bool"'  		Type = ""'  		Name = "bool"'  		FullName = "sys.bool"'  		HostDataType = "bool"'  		Value = 2'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Class"'  		Generate = true'  		ConstValue = "LClass"'  		Type = ""'  		Name = "class"'  		FullName = "ext.class"'  		HostDataType = "object"'  		Value = 3'  		ExtraTypeProps = "Type:DataType"  	}'  	new TypeSpec () {  		ClassName = "Date"'  		Generate = true'  		ConstValue = "Date"'  		Type = ""'  		Name = "datetime"'  		FullName = "sys.datetime"'  		HostDataType = "DateTime"'  		Value = 4'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "DayOfWeek"'  		Generate = true'  		ConstValue = "DayOfWeek"'  		Type = ""'  		Name = "dayofweek"'  		FullName = "sys.dayofweek"'  		HostDataType = "DayOfWeek"'  		Value = 5'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Function"'  		Generate = true'  		ConstValue = "Function"'  		Type = ""'  		Name = "function"'  		FullName = "ext.function"'  		HostDataType = "object"'  		Value = 6'  		ExtraTypeProps = "LType:Parent"  	}'  	new TypeSpec () {  		ClassName = "Map"'  		Generate = true'  		ConstValue = "Map"'  		Type = ""'  		Name = "map"'  		FullName = "sys.map"'  		HostDataType = "IDictionary<string' object>"'  		Value = 7'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Module"'  		Generate = true'  		ConstValue = "Module"'  		Type = ""'  		Name = "module"'  		FullName = "ext.module"'  		HostDataType = "object"'  		Value = 8'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Null"'  		Generate = true'  		ConstValue = "Null"'  		Type = ""'  		Name = "null"'  		FullName = "sys.null"'  		HostDataType = "object"'  		Value = 9'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Number"'  		Generate = true'  		ConstValue = "Number"'  		Type = ""'  		Name = "number"'  		FullName = "sys.number"'  		HostDataType = "double"'  		Value = 10'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Object"'  		Generate = false'  		ConstValue = "Object"'  		Type = ""'  		Name = "object"'  		FullName = "sys.object"'  		HostDataType = "object"'  		Value = 11'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "String"'  		Generate = true'  		ConstValue = "String"'  		Type = ""'  		Name = "string"'  		FullName = "sys.string"'  		HostDataType = "string"'  		Value = 12'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Table"'  		Generate = true'  		ConstValue = "Table"'  		Type = ""'  		Name = "table"'  		FullName = "sys.table"'  		HostDataType = "IList"'  		Value = 1'  		ExtraTypeProps = ""'  		ExtraProps = "List<string>:Fields"  	}'  	new TypeSpec () {  		ClassName = "Time"'  		Generate = true'  		ConstValue = "Time"'  		Type = ""'  		Name = "time"'  		FullName = "sys.time"'  		HostDataType = "TimeSpan"'  		Value = 13'  		ExtraTypeProps = ""  	}'  	new TypeSpec () {  		ClassName = "Unit"'  		Generate = true'  		ConstValue = "Unit"'  		Type = ""'  		Name = "unit"'  		FullName = "sys.unit"'  		HostDataType = "double"'  		Value = 14'  		ExtraTypeProps = ""'  		ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"  	}'  };  
