Implementation smell,Namespace,Class,File,Method,Description
Long Method,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The method has 151 lines of code.
Long Method,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The method has 199 lines of code.
Long Method,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpressionsWithPrecedence,The method has 163 lines of code.
Long Method,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseIdExpression,The method has 111 lines of code.
Long Method,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The method has 247 lines of code.
Long Method,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The method has 143 lines of code.
Complex Method,Fluentscript.Lib.Helpers,PreprocessHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\PreprocessHelper.cs,Process,Cyclomatic complexity of the method is 15
Complex Method,Fluentscript.Lib.Helpers,TokenHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TokenHelper.cs,ConvertToLangLiteral,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Helpers,DocHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseDocTags,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Helpers,FluentHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FluentHelper.cs,MatchFunctionName,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Helpers,FluentHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FluentHelper.cs,ParseFuncParameters,Cyclomatic complexity of the method is 15
Complex Method,Fluentscript.Lib.Helpers,MemberHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\MemberHelper.cs,GetMemberAccess,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Helpers,LangTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TypeHelper.cs,ConvertToLangValue,Cyclomatic complexity of the method is 13
Complex Method,Fluentscript.Lib.Helpers,LangTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TypeHelper.cs,ConvertToLangType,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Helpers,LangTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TypeHelper.cs,ConvertToHostLangType,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Helpers,LangTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TypeHelper.cs,ConvertArgs,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Helpers,LangTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TypeHelper.cs,IsBasicTypeCSharpType,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Helpers,LangTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TypeHelper.cs,ConvertToHostLangArray,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanNumber,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,SkipUntilPrefixedWord,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,GetTokenBatch,Cyclomatic complexity of the method is 14
Complex Method,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,Cyclomatic complexity of the method is 28
Complex Method,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedString,Cyclomatic complexity of the method is 13
Complex Method,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedTokens,Cyclomatic complexity of the method is 15
Complex Method,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseStatement,Cyclomatic complexity of the method is 14
Complex Method,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,Cyclomatic complexity of the method is 27
Complex Method,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseBlock,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpressionsWithPrecedence,Cyclomatic complexity of the method is 25
Complex Method,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseFuncExpression,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseIdExpression,Cyclomatic complexity of the method is 12
Complex Method,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseParameters,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Peek,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Advance,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Parser,AstVisitor,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Visitor.cs,VisitExpr,Cyclomatic complexity of the method is 13
Complex Method,Fluentscript.Lib.Parser.Integration,RegisteredPlugins,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Integration\Plugins.cs,GetPlugin,Cyclomatic complexity of the method is 14
Complex Method,Fluentscript.Lib.Parser.MetaPlugins,GrammerParser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\GrammarParser.cs,DoParse,Cyclomatic complexity of the method is 13
Complex Method,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,Register,Cyclomatic complexity of the method is 12
Complex Method,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,Validate,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CanHandleExp,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CanHandleTok,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,Cyclomatic complexity of the method is 48
Complex Method,Fluentscript.Lib.Plugins.Parser,AggregateExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AggregatePlugin.cs,DoEvaluate,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Plugins.Parser,DateNumberPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\DateNumberPlugin.cs,CanHandle,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Plugins.Parser,FileExtPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FileExtPlugin.cs,CanHandle,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Plugins.Parser,FluentMemberPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentMemberPlugin.cs,Match,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Plugins.Parser,FluentMemberPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentMemberPlugin.cs,IsMatch,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Plugins.Parser,LogExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\LogPlugin.cs,DoEvaluate,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Plugins.Parser,RecordsPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\RecordsPlugin.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Plugins.Parser,TimePlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,CanHandle,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Plugins.Parser,TypeOperationsExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TypeOperationsPlugin.cs,CheckExplicitType,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Plugins.Parser,VariablePathPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\VariablePathPlugin.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Plugins.System,VarPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\System\VarPlugin.cs,ParseAssignment,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Runtime,EvalHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\EvalHelper.cs,Compare,Cyclomatic complexity of the method is 10
Complex Method,Fluentscript.Lib.Runtime,EvalHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\EvalHelper.cs,CompareDayDifference,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDay,Cyclomatic complexity of the method is 15
Complex Method,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitForEach,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitBinary,Cyclomatic complexity of the method is 12
Complex Method,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitFunctionCall,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,PushParametersInScope,Cyclomatic complexity of the method is 11
Complex Method,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,Cyclomatic complexity of the method is 8
Complex Method,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,Cyclomatic complexity of the method is 9
Complex Method,Fluentscript.Lib.Types,LTypeMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\LTypeMethods.cs,ExecuteMethod,Cyclomatic complexity of the method is 11
Long Parameter List,Fluentscript.Lib.Helpers,DocHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,Try,The method has 5 parameters. Parameters: action' errorType' line' lineNum' warnings
Long Parameter List,Fluentscript.Lib.Helpers,FluentHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FluentHelper.cs,ParseFuncParameters,The method has 6 parameters. Parameters: args' tokenIt' parser' expectParenthesis' enableNewLineAsEnd' meta
Long Parameter List,Fluentscript.Lib.Helpers,FunctionHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallFunction,The method has 5 parameters. Parameters: ctx' fexpr' functionName' pushCallStack' visitor
Long Parameter List,Fluentscript.Lib.Helpers,FunctionHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallMemberOnBasicType,The method has 6 parameters. Parameters: ctx' node' memberAccess' paramListExpressions' paramList' visitor
Long Parameter List,Fluentscript.Lib.Helpers,FunctionHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallMemberOnClass,The method has 6 parameters. Parameters: ctx' node' memberAccess' paramListExpressions' paramList' visitor
Long Parameter List,Fluentscript.Lib.Helpers,FunctionHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallFunctionInScript,The method has 7 parameters. Parameters: ctx' visitor' functionName' function' paramListExpressions' paramVals' resolveParams
Long Parameter List,Fluentscript.Lib.Helpers,FunctionHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,MethodCall,The method has 8 parameters. Parameters: ctx' obj' datatype' methodInfo' paramListExpressions' paramList' resolveParams' visitor
Long Parameter List,Fluentscript.Lib.Helpers,MemberHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\MemberHelper.cs,GetMemberAccess,The method has 5 parameters. Parameters: node' ctx' varExp' memberName' visitor
Long Parameter List,Fluentscript.Lib.Helpers,MemberHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\MemberHelper.cs,GetExternalTypeMember,The method has 6 parameters. Parameters: node' type' varName' obj' memberName' isStatic
Long Parameter List,Fluentscript.Lib.Helpers,ParamHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\ParamHelper.cs,ResolveParameters,The method has 6 parameters. Parameters: totalParams' paramListExpressions' paramList' indexLookup' containsLookup' visitor
Long Parameter List,Fluentscript.Lib.Parser,Exprs,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Exprs.cs,Date,The method has 5 parameters. Parameters: month' day' year' time' token
Long Parameter List,Fluentscript.Lib.Parser,Exprs,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Exprs.cs,Unary,The method has 5 parameters. Parameters: name' incExpr' incValue' op' token
Long Parameter List,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,PeekCustomLimitedWord,The method has 5 parameters. Parameters: advanceFirst' expectChar' maxAdvancesBeforeExpected' extra1' extra2
Long Parameter List,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanUntilChars,The method has 5 parameters. Parameters: advanceFirst' first' second' includeChars' setPosAfterToken
Long Parameter List,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The method has 6 parameters. Parameters: endTokens' handleMathOperator' handleSingleExpression' enablePlugins' passNewLine' enableIdentTokenTextAsEndToken
Long Parameter List,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpressionsWithPrecedence,The method has 5 parameters. Parameters: endTokens' initial' enableTokenPlugins' identTokens' enableIdentTokensAsEndTokens
Long Parameter List,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckMatchesForLexer,The method has 5 parameters. Parameters: plugin' matches' args' peekCount' matchCount
Long Parameter List,Fluentscript.Lib.Parser.MetaPlugins,MetaPluginContainer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\MetaPlugins.cs,CheckExpressionMatches,The method has 5 parameters. Parameters: plugin' matches' args' peekCount' matchCount
Long Parameter List,Fluentscript.Lib.Parser.MetaPlugins,TokenMatch,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\TokenMatch.cs,Init,The method has 8 parameters. Parameters: varname' tokenIndex' required' name' type' min' max' vals
Long Parameter List,Fluentscript.Lib.Plugins.Parser,FluentMemberPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentMemberPlugin.cs,IsMatch,The method has 6 parameters. Parameters: helper' type' klass' instance' prop' method
Long Parameter List,Fluentscript.Lib.Plugins.System,VarPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\System\VarPlugin.cs,AddAssignment,The method has 5 parameters. Parameters: expectVar' varExp' valExp' declarations' token
Long Parameter List,Fluentscript.Lib.Runtime,AssignHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\AssignHelper.cs,SetVariableValue,The method has 6 parameters. Parameters: ctx' visitor' node' isDeclaration' varExp' valExp
Long Parameter List,Fluentscript.Lib.Runtime,AssignHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\AssignHelper.cs,SetMemberValue,The method has 5 parameters. Parameters: ctx' visitor' node' varExp' valExp
Long Parameter List,Fluentscript.Lib.Runtime,AssignHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\AssignHelper.cs,SetIndexValue,The method has 5 parameters. Parameters: ctx' visitor' node' varExp' valExp
Long Parameter List,Fluentscript.Lib.Runtime,EvalHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\EvalHelper.cs,CalcUnits,The method has 5 parameters. Parameters: node' left' right' op' units
Long Parameter List,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The method has 6 parameters. Parameters: expected1' expected2' advanceFirst' advanceCount' readToEndOfExpected' excludeBeginningSpace
Long Parameter List,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,The method has 6 parameters. Parameters: expected1' expected2' advanceFirst' advanceCount' readToEndOfExpected' excludeBeginningSpace
Long Parameter List,Fluentscript.Lib.Types,ConvertSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\ConvertSpec.cs,ConvertSpec,The method has 8 parameters. Parameters: sourceType' destType' canChange' isCaseSensitive' convertMode' regex' handler' allowedVals
Long Parameter List,Fluentscript.Lib.Types,LTypeMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\LTypeMethods.cs,AddProperty,The method has 6 parameters. Parameters: allowGet' allowSet' name' implementationMethod' returnType' description
Long Parameter List,Fluentscript.Lib.Types,LTypeMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\LTypeMethods.cs,AddArg,The method has 8 parameters. Parameters: funcName' name' type' required' alias' defaultVal' examples' desc
Long Parameter List,Fluentscript.Lib.Types,LTypeMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\LTypeMethods.cs,AddMethodInfo,The method has 6 parameters. Parameters: memberType' name' implementationMethod' returnType' description' convertParams
Long Parameter List,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,SetHours,The method has 5 parameters. Parameters: date' hours' minutes' seconds' milliseconds
Long Parameter List,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,SetUtcHours,The method has 5 parameters. Parameters: date' hours' minutes' seconds' milliseconds
Long Parameter List,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,SetDateTime,The method has 9 parameters. Parameters: date' kind' year' month' day' hour' minute' second' millisecond
Long Parameter List,Fluentscript.Lib.Types.Javascript,LJSTimeMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSTimeMethods.cs,SetHours,The method has 5 parameters. Parameters: time' hours' minutes' seconds' milliseconds
Long Parameter List,Fluentscript.Lib.Types.Javascript,LJSTimeMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSTimeMethods.cs,SetDateTime,The method has 9 parameters. Parameters: target' kind' year' month' day' hour' minute' second' millisecond
Long Parameter List,Fluentscript.Lib._Core,LangException,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangException.cs,LangException,The method has 5 parameters. Parameters: errorType' error' scriptpath' lineNumber' charPos
Long Parameter List,Fluentscript.Lib._Core.Grammar,TypeSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,TypeSpec,The method has 6 parameters. Parameters: className' val' name' fullName' varname' hostDataType
Long Parameter List,Fluentscript.Lib._Core.Grammar,ExprSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,ExprSpec,The method has 16 parameters. Parameters: className' name' extends' implements' token' createPlugin' pluginImplements' precedence' isStatement' hasTerminator' isBlock' hasLhsRhs' createNewSymScope' hasOperator' qualifiedName' extraProps
Long Parameter List,Fluentscript.Lib._Core.Meta.Types,FunctionMetaData,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Meta\Types\FunctionMeta.cs,AddArg,The method has 7 parameters. Parameters: name' type' required' alias' defaultVal' examples' desc
Long Identifier,Fluentscript.Lib.Parser,Interpreter,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Interpreter.cs,,The length of the parameter _lastInitializationPluginCount is 30.
Long Identifier,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The length of the parameter enableIdentTokenTextAsEndToken is 30.
Long Identifier,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,PeekConsequetiveIdsAppendedWithTokenCounts,The length of the parameter enableCamelCasingAsSeparateWords is 32.
Long Identifier,Fluentscript.Lib.Parser.PluginSupport,ExprPluginBase,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\PluginSupport\ExprPluginBase.cs,,The length of the parameter _handleNewLineAsEndOfExpression is 31.
Long Statement,Fluentscript.Lib.AST.Core,MemberExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\AST\Core\MemberExpr.cs,IsMemberInstanceAccess,The length of the statement  "            MemberInfo[] members = type.GetMember(MemberName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase); " is 121.
Long Statement,Fluentscript.Lib.AST.Core,MemberExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\AST\Core\MemberExpr.cs,GetMemberAccess,The length of the statement  "            members = type.GetMember(MemberName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.IgnoreCase);             " is 130.
Long Statement,Fluentscript.Lib.Helpers,FunctionHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallMemberOnClass,The length of the statement  "                result = FunctionHelper.MethodCall(ctx' obj' type' memberAccess.Method' paramListExpressions' paramList' true' visitor); " is 120.
Long Statement,Fluentscript.Lib.Helpers,MemberHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\MemberHelper.cs,GetMemberAccess,The length of the statement  "            var member = MemberHelper.GetExternalTypeMember(node' lclassType.DataType' variableName' lclass.Value' memberName' false); " is 122.
Long Statement,Fluentscript.Lib.Helpers,MemberHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\MemberHelper.cs,GetExternalTypeMember,The length of the statement  "            var members = type.GetMember(memberName' BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.IgnoreCase); " is 134.
Long Statement,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,The length of the statement  "            var pattern = @"(?<hours>[0-9]+)((\:)(?<minutes>[0-9]{2}))?((\:)(?<seconds>[0-9]{2}))?\s*(?<ampm>(am|a\.m\.|a\.m|pm|p\.m\.|p\.m))?\s*"; " is 135.
Long Statement,Fluentscript.Lib.Parser,Interpreter,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Interpreter.cs,RegisterMetaPlugins,The length of the statement  "                throw new DirectoryNotFoundException("Directory for meta plugins : " + this.Settings.PluginsFolder + " does not exist"); " is 120.
Long Statement,Fluentscript.Lib.Parser,Interpreter,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Interpreter.cs,ToTokens,The length of the statement  "            () => string.Format("Last token: {0}' Line : {1}' Pos : {2} "' lexer.LastToken.Text' lexer.State.Line' lexer.State.LineCharPosition)); " is 134.
Long Statement,Fluentscript.Lib.Parser,Interpreter,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Interpreter.cs,InitSystemFunctions,The length of the statement  "            _parser.Context.ExternalFunctions.Register("metacompiler.*"' (objname' method' exp) => RunCompilerMethod(objname' method' _settings' exp)); " is 139.
Long Statement,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,GetTokenBatch,The length of the statement  "                    throw new LangException("Syntax Error"' "Unexpected token"' string.Empty' _scanner.State.Line' _scanner.State.LineCharPosition); " is 128.
Long Statement,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The length of the statement  "            if ((t.Token.Kind == TokenKind.Symbol || t.Token.Type == TokenTypes.Unknown || t.Token.Type == TokenTypes.WhiteSpace) && _scanner.State.Pos == pos) " is 147.
Long Statement,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,PeekToken,The length of the statement  "                _endTokenData = new TokenData() { Token = Tokens.EndToken' Line = _scanner.State.Line' Pos = _scanner.State.Pos' LineCharPos = _scanner.State.LineCharPosition }; " is 161.
Long Statement,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadString,The length of the statement  "                    throw new LangException("Syntax Error"' "Unterminated string"' string.Empty' _scanner.State.Line' _scanner.State.LineCharPosition); " is 131.
Long Statement,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedString,The length of the statement  "                    var iTokenData = new TokenData() { Token = token' LineCharPos = interpolatedStringStartPos' Line = interpolatedStringLinePos }; " is 127.
Long Statement,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedString,The length of the statement  "                throw new LangException("Syntax Error"' "Unterminated string"' string.Empty' _scanner.State.Line' _scanner.State.LineCharPosition); " is 131.
Long Statement,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedTokens,The length of the statement  "                    throw new LangException("syntax"' "unexpected text in string"' string.Empty' _scanner.State.Line' _scanner.State.LineCharPosition); " is 131.
Long Statement,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,ReadInterpolatedTokens,The length of the statement  "                var t = new TokenData() { Token = _lastToken' Line = _scanner.State.Line' LineCharPos = _scanner.State.LineCharPosition' Pos = pos }; " is 133.
Long Statement,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseStatement,The length of the statement  "                if (!isNewLineOrComment && hasTokenReplacePlugins && (nexttoken.Kind == TokenKind.Ident) && _context.PluginsMeta.CanHandleTok(nexttoken' true)) " is 143.
Long Statement,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The length of the statement  "                if (enableIdentTokenTextAsEndToken && next.Token.Kind == TokenKind.Ident && identEndTokens.ContainsKey(next.Token.Text)) " is 120.
Long Statement,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpressionsWithPrecedence,The length of the statement  "                if (current != Tokens.EndToken && enableTokenPlugins && hasTokenReplacePlugins && _context.PluginsMeta.CanHandleTok(current' true)) " is 131.
Long Statement,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseFuncExpression,The length of the statement  "                FluentHelper.ParseFuncParameters(funcExp.ParamListExpressions' _tokenIt' this' expectParenthesis' !expectParenthesis' meta); " is 124.
Long Statement,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseFuncExpression,The length of the statement  "                FluentHelper.ParseFuncParameters(funcExp.ParamListExpressions' _tokenIt' this' expectParenthesis' !expectParenthesis' null);                 " is 124.
Long Statement,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseFuncExpression,The length of the statement  "                FluentHelper.ParseFuncParameters(funcExp.ParamListExpressions' _tokenIt' this' expectParenthesis' !expectParenthesis' meta);  " is 124.
Long Statement,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseIdExpression,The length of the statement  "            bool isMemberAccessAhead = ( aheadToken.Token == Tokens.LeftParenthesis || aheadToken.Token == Tokens.LeftBracket || aheadToken.Token == Tokens.Dot ); " is 150.
Long Statement,Fluentscript.Lib.Parser,ParserBase,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\ParserBase.cs,ApplyDocTagsToFunction,The length of the statement  "                    //_tokenIt.BuildSyntaxException("Doc argument name : '" + arg.Name + "' does not exist in function : " + func.Meta.Name); " is 121.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Init,The length of the statement  "            // 5. llk is used to reduce memory footprint for storing tokens. At any one point there is a list of llk count tokens available " is 127.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Init,The length of the statement  "            // 6. if llk is not set ( eg. -1 ) then the number of tokens retrieved from the lexer equal the number of tokens in a script " is 124.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildSyntaxExpectedException,The length of the statement  "            return new LangException("Syntax Error"' string.Format("Expected {0} but found '{1}'"' expected' NextToken.Token.Text)' ScriptPath' NextToken.Line' NextToken.LineCharPos); " is 171.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildSyntaxExpectedTokenException,The length of the statement  "            return new LangException("Syntax Error"' string.Format("Expected {0} but found '{1}'"' token.Text' NextToken.Token.Text)' ScriptPath' NextToken.Line' NextToken.LineCharPos); " is 173.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildSyntaxUnexpectedTokenException,The length of the statement  "            return new LangException("Syntax Error"' string.Format("Unexpected token found '{0}'"' NextToken.Token.Text)' ScriptPath' NextToken.Line' NextToken.LineCharPos); " is 161.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildSyntaxUnexpectedTokenException,The length of the statement  "            return new LangException("Syntax Error"' string.Format("Unexpected token found '{0}'"' token.Token.Text)' ScriptPath' token.Line' token.LineCharPos); " is 149.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildSyntaxUnexpectedTokenException,The length of the statement  "            return new LangException("Syntax Error"' string.Format("Unexpected token found {0}"' unexpectedTokenText)' ScriptPath' token.Line' token.LineCharPos); " is 150.
Long Statement,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,BuildEndOfScriptException,The length of the statement  "            return new LangException("Syntax Error"' "Unexpected end of script"' ScriptPath' NextToken.Line' NextToken.LineCharPos); " is 120.
Long Statement,Fluentscript.Lib.Parser.Core,Limits,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Core\Limits.cs,CheckParserExpression,The length of the statement  "            if (_hasSettings && _ctx.Settings.MaxConsequetiveExpressions > 0 && expressionCount > _ctx.Settings.MaxConsequetiveExpressions) " is 127.
Long Statement,Fluentscript.Lib.Parser.Core,Limits,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Core\Limits.cs,CheckParserExpression,The length of the statement  "                throw BuildLimitException(node' "consequetive expressions (" + expressionCount + ")"' _ctx.Settings.MaxConsequetiveExpressions); " is 128.
Long Statement,Fluentscript.Lib.Parser.Core,Limits,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Core\Limits.cs,CheckParserMemberAccess,The length of the statement  "            if (_hasSettings && _ctx.Settings.MaxConsequetiveMemberAccess > 0 && memberAccessCount > _ctx.Settings.MaxConsequetiveMemberAccess) " is 131.
Long Statement,Fluentscript.Lib.Plugins.Parser,AggregatePlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AggregatePlugin.cs,CanHandle,The length of the statement  "            if (next == Tokens.LeftParenthesis || string.Compare(next.Text' "of"' StringComparison.InvariantCultureIgnoreCase) == 0) " is 120.
Long Statement,Fluentscript.Lib.Plugins.Parser,FluentMemberPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentMemberPlugin.cs,Parse,The length of the statement  "                if (helper.IsClassMethod(matchResult.Item1' memExp.MemberName) || helper.IsInstanceMethod(matchResult.Item1' memExp.MemberName)) " is 128.
Long Statement,Fluentscript.Lib.Plugins.Parser,SortPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\SortPlugin.cs,Parse,The length of the statement  "            if (string.Compare(ascDesc' "asc"' StringComparison.InvariantCultureIgnoreCase) == 0 || string.Compare(ascDesc' "desc"' StringComparison.InvariantCultureIgnoreCase) == 0) " is 170.
Long Statement,Fluentscript.Lib.Runtime,EvalHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\EvalHelper.cs,IncrementString,The length of the statement  "                throw new LangException("Syntax Error"' "string operation with " + expr.Op.ToString() + " not supported"' expr.Ref.ScriptName' expr.Ref.Line' expr.Ref.CharPos); " is 160.
Long Statement,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDuration,The length of the statement  "                    throw new LangException("TypeError"' "Days away must of type of number"' expr.Ref.ScriptName' expr.Ref.Line' expr.Ref.CharPos); " is 127.
Long Statement,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitForEach,The length of the statement  "                var current = enumerator.Current is LObject ? enumerator.Current : LangTypeHelper.ConvertToLangClass(enumerator.Current); " is 121.
Long Statement,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitFunctionCall,The length of the statement  "                result = FunctionHelper.CallFunctionInScript(this.Ctx' this' fexpr.Meta.Name' fexpr' expr.ParamListExpressions' expr.ParamList' resolveParams); " is 143.
Long Statement,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitFunctionCall,The length of the statement  "                result = FunctionHelper.CallMemberOnBasicType(this.Ctx' expr' maccess' expr.ParamListExpressions' expr.ParamList' this); " is 120.
Long Statement,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitFunctionCall,The length of the statement  "            // CASE 5: Member call via "." : either static or instance method call. e.g. Person.Create() or instance1.FullName() e.g. " is 121.
Long Statement,Fluentscript.Lib._Core,RunResult,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\RunResult.cs,ToString,The length of the statement  "            string result = string.Format(template' Success' Duration.Milliseconds' StartTime.ToShortTimeString()' EndTime.ToShortTimeString()' TotalErrors' Message ); " is 155.
Long Statement,Fluentscript.Lib._Core,SymbolsBase,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Symbols.cs,DefineConstant,The length of the statement  "            var symbol = new SymbolConstant() { Name = name' Category = SymbolCategory.Const' DataType = LTypes.Object' Value = value }; " is 124.
Long Statement,Fluentscript.Lib._Core,TokenData,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\TokenData.cs,ToString,The length of the statement  "            string info = string.Format("Index: {0}' Line: {1}' CharPos: {2}' Pos: {3}' Type: {4}' Text: {5}"' Index' Line' LineCharPos' Pos' tokenType' text); " is 147.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "ArrayExpr"' 			name: "Array"' 		     extends: "IndexableExpr"'          implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "List<Expr>:Exprs")' " is 477.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "AnyOfExpr"' 			name: "AnyOf"' 		     extends: "Expr"'                   implements: "IParameterExpression"' token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:CompareExpr;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList")' " is 542.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "AssignExpr"' 			name: "Assign"' 		 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:VarExp;Expr:ValueExp;bool:IsDeclaration")' " is 503.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "AssignMultiExpr"' 	name: "AssignMulti"' 	 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "List<AssignExpr>:Assignments")' " is 494.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "BinaryExpr"' 			name: "Binary"' 		 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: true '  createNewSymScope: false'  hasOperator: true '  qualifiedName: "return \"\";"'                                                            extraProps: null)' " is 461.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "CompareExpr"' 		name: "Compare"' 		 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: true '  createNewSymScope: false'  hasOperator: true '  qualifiedName: "return \"\";"'                                                            extraProps: null)' " is 462.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "ConditionExpr"' 		name: "Condition"' 		 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: true '  createNewSymScope: false'  hasOperator: true '  qualifiedName: "return \"\";"'                                                            extraProps: null)' " is 466.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "ConstantExpr"' 		name: "Constant"' 		 extends: "ValueExpr"'              implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: null)' " is 464.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "DayExpr"' 		    name: "Day"' 		     extends: "ValueExpr"'              implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:Name;string:Time")' " is 483.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "DurationExpr"' 		name: "Duration"' 		 extends: "ValueExpr"'              implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:Duration;string:Mode")' " is 489.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "DateExpr"' 		    name: "Date"' 		     extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "int:Month;int:Day;int:Year;string:Time")' " is 500.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "DateRelativeExpr"' 	name: "DateRelative"'    extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "int:Month;int:DayOfTheWeek;string:RelativeDay")' " is 514.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "FunctionCallExpr"' 	name: "FunctionCall"' 	 extends: "Expr"'                   implements: "IParameterExpression"' token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return this.NameExp != null ? this.NameExp.ToQualifiedName() : \"\";"'    extraProps: "Expr:NameExp;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList;FunctionExpr:Function;bool:RetainEvaluatedParams;bool:IsScopeVariable")' " is 615.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "FunctionExpr"' 		name: "Function"' 		 extends: "BlockExpr"'              implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "FunctionMetaData:Meta;long:ExecutionCount;long:ErrorCount;bool:HasReturnValue;object:ReturnValue;List<object>:ArgumentValues;bool:ContinueRunning")' " is 607.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "IndexExpr"' 			name: "Index"' 			 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:IndexExp;Expr:VarExp;bool:IsAssignment")' " is 501.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "InterpolatedExpr"' 	name: "Interpolated"' 	 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "List<Expr>:Expressions")' " is 490.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "ListCheckExpr"' 		name: "ListCheck"' 		 extends: "Expr"'                   implements: ""'                     token : ""	        '  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:NameExp")' " is 482.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "MapExpr"' 			name: "Map"' 			 extends: "IndexableExpr"'          implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "List<Tuple<string'Expr>>:Expressions")' " is 490.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "MemberAccessExpr"' 	name: "MemberAccess"' 	 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return this.VarExp.ToQualifiedName() + \".\" + this.MemberName;"'         extraProps: "string:MemberName;Expr:VarExp;bool:IsAssignment")' " is 515.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "NamedParameterExpr"' 	name: "NamedParameter"'  extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return this.Name;"'                                                       extraProps: "string:Name;Expr:Value;int:Pos")' " is 501.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "NegateExpr"' 			name: "Negate"' 		 extends: "VariableExpr"'           implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:Expression")' " is 474.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "NewExpr"' 			name: "New"' 			 extends: "Expr"'                   implements: "IParameterExpression"' token : "new"		'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:TypeName;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList")' " is 536.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "ParameterExpr"' 		name: "Parameter"' 		 extends: "Expr"'                   implements: "IParameterExpression"' token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "FunctionMetaData:Meta;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList;")' " is 551.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "RunExpr"' 		    name: "Run"' 		     extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:FuncName;string:Mode;Expr:FuncCallOnAfterExpr;Expr:FuncCallExpr")' " is 530.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "TableExpr"' 			name: "Table"' 		     extends: "IndexableExpr"'          implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "List<string>:Fields")' " is 480.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "UnaryExpr"' 			name: "Unary"' 			 extends: "VariableExpr"'           implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Operator:Op;Expr:Expression;double:Increment")' " is 502.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "BreakExpr"' 			name: "Break"' 			 extends: "Expr"'                   implements: ""'                     token : "break"	    '  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: true '  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: null)' " is 467.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "ContinueExpr"' 		name: "Continue"' 		 extends: "Expr"'                   implements: ""'                     token : "continue"	'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: true '  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: null)' " is 470.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "ForEachExpr"' 		name: "ForEach"' 		 extends: "WhileExpr"'              implements: ""'                     token : "for"		'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:VarName;Expr:SourceExpr;string:SourceName")' " is 510.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "ForExpr"' 			name: "For"' 			 extends: "WhileExpr"'              implements: ""'                     token : "for"		'  createPlugin : true '  pluginImplements: ""'                 precedence: 2'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:Start;Expr:Increment")' " is 481.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "FunctionDeclareExpr"' name: "FunctionDeclare"' extends: "Expr"'                   implements: ""'                     token : "function"	'  createPlugin : true '  pluginImplements: "IParserCallbacks"' precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "FunctionExpr:Function")' " is 498.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "IfExpr"' 				name: "If"' 			 extends: "ConditionalBlockExpr"'   implements: ""'                     token : "if"		'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "BlockExpr:Else")' " is 468.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "LambdaExpr"' 			name: "Lambda"' 		 extends: "Expr"'                   implements: ""'                     token : "function"	'  createPlugin : true '  pluginImplements: "IParserCallbacks"' precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "FunctionExpr:Expr")' " is 482.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "ReturnExpr"' 			name: "Return"' 		 extends: "Expr"'                   implements: ""'                     token : "return"	'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: true '  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:Exp")' " is 471.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "ThrowExpr"' 			name: "Throw"' 			 extends: "Expr"'                   implements: ""'                     token : "throw"	    '  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: true '  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:Exp")' " is 473.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "TryCatchExpr"' 		name: "TryCatch"' 		 extends: "Expr"'                   implements: "IBlockExpr"'           token : "try"		'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:ErrorName;List<Expr>:prop-Statements;BlockExpr:Catch")' " is 523.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "WhileExpr"' 			name: "While"' 			 extends: "ConditionalBlockExpr"'   implements: "ILoop"'                token : "while"	    '  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "bool:prop-DoBreakLoop;bool:prop-DoContinueLoop;bool:prop-DoContinueRunning")' " is 539.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new ExprSpec(className : "VariableExpr"' 		name: "Variable"' 		 extends: "Expr"'                   implements: ""'                     token : "@ident"	'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return this.Name;"'                                                       extraProps: "string:Name")' " is 477.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}' " is 229.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}' " is 229.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }' " is 243.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}' " is 229.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}' " is 229.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }' " is 242.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}' " is 229.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }' " is 230.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}' " is 229.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}' " is 229.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}' " is 229.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}' " is 229.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}' " is 265.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                 " is 229.
Long Statement,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The length of the statement  "                new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}' " is 306.
Complex Conditional,Fluentscript.Lib.Helpers,ConversionHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\ConversionHelper.cs,Convert_String_To_Bool,The conditional expression  "s == "yes" || s == "true" || s == "1" || s == "ok" || s == "on""  is complex.
Complex Conditional,Fluentscript.Lib.Helpers,FluentHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FluentHelper.cs,ParseFuncParameters,The conditional expression  "(meta == null && token.Kind == TokenKind.Ident && peek == Tokens.Colon )                       || (token.Kind == TokenKind.Ident && isParamNameMatch && !isVar)                       || (token.Kind == TokenKind.Ident && !isParamNameMatch && !isVar && peek == Tokens.Colon)                      || (isKeywordParamName && !isVar )"  is complex.
Complex Conditional,Fluentscript.Lib.Helpers,FunctionHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\FunctionHelper.cs,CallFunctionInScript,The conditional expression  "resolveParams && function != null && (hasArguments || hasParams)"  is complex.
Complex Conditional,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,The conditional expression  "string.IsNullOrEmpty(ampm) || ampm == "am" || ampm == "a.m" || ampm == "a.m.""  is complex.
Complex Conditional,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CanCreateDateFrom,The conditional expression  "paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,PeekCustomLimitedWord,The conditional expression  "!isValidChar && (hasExtra1 && ch != extra1) && (hasExtra2 && ch != extra2)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanUri,The conditional expression  "ch == SPACE || ch == TAB || ch == '(' || ch == ')'                      || ch == ''' || ch == ';' || ch == '[' || ch == ']'                      || ch == '\r' || ch == '\n' || ch == '{' || ch == '}'"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanWordUntilChars,The conditional expression  "('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') ||                       ('0' <= ch && ch <= '9') ||  ch == '_' || (!first && ch == '-')                       || ch == extra1 || ch == extra2"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,IsOp,The conditional expression  "c == '*' || c == '/' || c == '+' || c == '-' || c == '%' ||                  c == '<' || c == '>' || c == '!' || c == '=' ||                  c == '&' || c == '|'"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Lexer,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Lexer.cs,NextToken,The conditional expression  "(t.Token.Kind == TokenKind.Symbol || t.Token.Type == TokenTypes.Unknown || t.Token.Type == TokenTypes.WhiteSpace) && _scanner.State.Pos == pos"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseStatement,The conditional expression  "!isNewLineOrComment && hasTokenReplacePlugins && (nexttoken.Kind == TokenKind.Ident) && _context.PluginsMeta.CanHandleTok(nexttoken' true)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The conditional expression  "okToCheckPlugins && enablePlugins && hasTokenReplacePlugins && _context.PluginsMeta.CanHandleTok(token' true)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The conditional expression  "okToCheckPlugins && enablePlugins && hasMetaPlugins && _context.PluginsMeta.CanHandleExp(token)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The conditional expression  "okToCheckPlugins && enablePlugins && hasPlugins && _context.Plugins.CanHandleExp(token)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The conditional expression  "token.Kind == TokenKind.Symbol && handleMathOperator                           && token != Tokens.RightParenthesis && Terminators.ExpMathShuntingYard.ContainsKey(token)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpression,The conditional expression  "((token.Kind == TokenKind.Keyword) || (token.Kind == TokenKind.Symbol))                      && token != Tokens.RightBracket && token != Tokens.RightBrace"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseExpressionsWithPrecedence,The conditional expression  "current != Tokens.EndToken && enableTokenPlugins && hasTokenReplacePlugins && _context.PluginsMeta.CanHandleTok(current' true)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,ParseIdExpression,The conditional expression  "withEnabled && !isFunction && !isVariable && !isModule && !isExternalFunc && varName != Exprs.WithName()"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,IsExplicitIdentQualifierExpression,The conditional expression  "isVar && ( ahead.Token == Tokens.Dot || ahead.Token == Tokens.LeftBracket || ahead.Token == Tokens.Assignment)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,Parser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Parser.cs,IsIncrementOp,The conditional expression  "token == Tokens.Increment || token == Tokens.Decrement || token == Tokens.IncrementAdd ||                   token == Tokens.IncrementDivide || token == Tokens.IncrementMultiply || token == Tokens.IncrementSubtract"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,ParserBase,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\ParserBase.cs,HandleComment,The conditional expression  "text.Contains("@summary") || text.Contains(" @summary")                  || text.Contains("@scriptmeta-start") || text.Contains(" @scriptmeta-start")"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,IsEndOfStmtOrBlock,The conditional expression  "t == Tokens.Semicolon || t == Tokens.NewLine || t == Tokens.EndToken || t == Tokens.RightBrace"  is complex.
Complex Conditional,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Peek,The conditional expression  "next.Token != Tokens.WhiteSpace                       && next.Token != Tokens.CommentMLine                      && next.Token != Tokens.CommentSLine                       && next.Token != Tokens.NewLine"  is complex.
Complex Conditional,Fluentscript.Lib.Parser.Integration,RegisteredPlugins,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Integration\Plugins.cs,GetPlugin,The conditional expression  "(token.Kind == TokenKind.Ident || token.Kind == TokenKind.Keyword || token.Kind == TokenKind.Symbol )                   && map.ContainsKey(name)"  is complex.
Complex Conditional,Fluentscript.Lib.Parser.MetaPlugins,GrammerParser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\GrammarParser.cs,ReadWord,The conditional expression  "_pos < END && ( Char.IsLetter(c)) || ( _pos > start && Char.IsNumber(c) )"  is complex.
Complex Conditional,Fluentscript.Lib.Plugins.Parser,NamedIndexPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\NamedIndexPlugin.cs,CanHandle,The conditional expression  "nextText != "st" && nextText != "nd" && nextText != "rd" && nextText != "th""  is complex.
Complex Conditional,Fluentscript.Lib.Runtime,EvalHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\EvalHelper.cs,Compare,The conditional expression  "(left.Type == LTypes.Date && right.Type == LTypes.Time)                      || (left.Type == LTypes.Time && right.Type == LTypes.Date)"  is complex.
Complex Conditional,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,IsMemberCall,The conditional expression  "maccess.IsInternalExternalFunctionCall()                  || (maccess.Mode == MemberMode.MethodMember || maccess.Mode == MemberMode.PropertyMember && maccess.Type != null)                  || maccess.Mode == MemberMode.CustObjMethodInstance || maccess.Mode == MemberMode.CustObjMethodStatic"  is complex.
Complex Conditional,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The conditional expression  "c == '<' && n1 == '!' && n2 == '-' && n3 == '-'"  is complex.
Complex Conditional,Fluentscript.Lib.Types,LTypeMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\LTypeMethods.cs,ExecuteMethod,The conditional expression  "!isRequired && arg.DefaultValue == null && arg.Name == "params" && ndx >= parameters.Length"  is complex.
Complex Conditional,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFrom,The conditional expression  "paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6"  is complex.
Complex Conditional,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFromArgs,The conditional expression  "paramCount == 0 || paramCount == 1 || paramCount == 3 || paramCount == 6"  is complex.
Virtual Method Call from Constructor,Fluentscript.Lib.Plugins.Parser,AggregateExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AggregatePlugin.cs,AggregateExpr,The constructor "AggregateExpr" calls a virtual method "InitBoundary".
Empty Catch Block,Fluentscript.Lib.Parser.Integration,RegisteredPlugins,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Integration\Plugins.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Fluentscript.Lib.Plugins.Parser,LogExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\LogPlugin.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Fluentscript.Lib.Plugins.Parser,TypeOperationsExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TypeOperationsPlugin.cs,TryConvertValue,The method has an empty catch block.
Magic Number,Fluentscript.Lib.Helpers,DocHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: totalFields >= 2
Magic Number,Fluentscript.Lib.Helpers,DocHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: arg.Type = fields[2].Trim();
Magic Number,Fluentscript.Lib.Helpers,DocHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: totalFields >= 3
Magic Number,Fluentscript.Lib.Helpers,DocHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: arg.Alias = fields[3].Trim();
Magic Number,Fluentscript.Lib.Helpers,DocHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: totalFields >= 4
Magic Number,Fluentscript.Lib.Helpers,DocHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: var example = fields[4];
Magic Number,Fluentscript.Lib.Helpers,DocHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseArgByPositionProperties,The following statement contains a magic number: totalFields >= 5
Magic Number,Fluentscript.Lib.Helpers,DocHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseExample,The following statement contains a magic number: example.Desc = exText.Substring(9' ndxFirstComma - 9).Trim();
Magic Number,Fluentscript.Lib.Helpers,DocHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\DocHelper.cs,ParseExample,The following statement contains a magic number: example.Desc = exText.Substring(9' ndxFirstComma - 9).Trim();
Magic Number,Fluentscript.Lib.Helpers,LangHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\LangHelper.cs,ProcessShuntingYardList,The following statement contains a magic number: var left = stack[index - 2] as Expr;
Magic Number,Fluentscript.Lib.Helpers,LangHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\LangHelper.cs,ProcessShuntingYardList,The following statement contains a magic number: stack.RemoveRange(index - 2' 2);
Magic Number,Fluentscript.Lib.Helpers,LangHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\LangHelper.cs,ProcessShuntingYardList,The following statement contains a magic number: stack.RemoveRange(index - 2' 2);
Magic Number,Fluentscript.Lib.Helpers,LangHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\LangHelper.cs,ProcessShuntingYardList,The following statement contains a magic number: index = index - 2;
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CanCreateTimeFrom,The following statement contains a magic number: paramCount == 0 || paramCount == 3 || paramCount == 4
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CanCreateTimeFrom,The following statement contains a magic number: paramCount == 0 || paramCount == 3 || paramCount == 4
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateTimeFrom,The following statement contains a magic number: return new TimeSpan(timeArgs[0]' timeArgs[1]' timeArgs[2]);
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateTimeFrom,The following statement contains a magic number: len == 3
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateTimeFrom,The following statement contains a magic number: return new TimeSpan(timeArgs[0]' timeArgs[1]' timeArgs[2]' timeArgs[3]);
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateTimeFrom,The following statement contains a magic number: return new TimeSpan(timeArgs[0]' timeArgs[1]' timeArgs[2]' timeArgs[3]);
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,The following statement contains a magic number: hours += 12;
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,The following statement contains a magic number: hours != 12 && !isAm
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTime,The following statement contains a magic number: hours == 12 && isAm
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: time <= 12
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: hours += 12;
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,ParseTimeWithoutColons,The following statement contains a magic number: !isAm && hours < 12
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CanCreateDateFrom,The following statement contains a magic number: paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CanCreateDateFrom,The following statement contains a magic number: paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: return new DateTime(args[0]' args[1]' args[2]);
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: parameters.Length == 3
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: return new DateTime(args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: return new DateTime(args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: return new DateTime(args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: return new DateTime(args[0]' args[1]' args[2]' args[3]' args[4]' args[5]);
Magic Number,Fluentscript.Lib.Helpers,DateTimeTypeHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Helpers\TimeTypeHelper.cs,CreateDateFrom,The following statement contains a magic number: parameters.Length == 6
Magic Number,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,IncrementLine,The following statement contains a magic number: int count = is2CharNewLine ? 2 : 1;
Magic Number,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanUntilChars,The following statement contains a magic number: _pos.Pos += 2;
Magic Number,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanUntilChars,The following statement contains a magic number: var endPos = includeChars ? _pos.Pos - 1 : _pos.Pos - 3;
Magic Number,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanEscape,The following statement contains a magic number: _pos.Pos += 2;
Magic Number,Fluentscript.Lib.Parser,Scanner,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\Scanner.cs,ScanEscape,The following statement contains a magic number: _pos.LineCharPosition += 2;
Magic Number,Fluentscript.Lib.Parser,ParserBase,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\ParserBase.cs,Tokenize,The following statement contains a magic number: _tokenIt.Init((llk) => _lexer.GetTokenBatch(llk)' 12' null);
Magic Number,Fluentscript.Lib.Parser,SemActs,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\SemActs.cs,CheckFunctionDeclaration,The following statement contains a magic number: func.Meta.Arguments.Count > 12
Magic Number,Fluentscript.Lib.Parser,SemActs,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\SemActs.cs,CheckFunctionDeclaration,The following statement contains a magic number: func.Meta.Aliases != null && func.Meta.Aliases.Count > 5
Magic Number,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Init,The following statement contains a magic number: llK < 4
Magic Number,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Init,The following statement contains a magic number: int batchSize = 2 * llK;
Magic Number,Fluentscript.Lib.Parser,TokenIterator,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\TokenIterator.cs,Init,The following statement contains a magic number: _tokenBatchMidPoint = batchSize / 2;
Magic Number,Fluentscript.Lib.Parser.MetaPlugins,GrammerParser,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Parser\MetaPlugins\GrammarParser.cs,ProcessOperatorForOr,The following statement contains a magic number: matches.Count >= 2
Magic Number,Fluentscript.Lib.Plugins.Core,TokenReplacePlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Core\TokenReplacePlugin.cs,CanHandle,The following statement contains a magic number: _matchedAdvanceCount = isCurrent ? 1 : 2;
Magic Number,Fluentscript.Lib.Plugins.Core,TokenReplacePlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Core\TokenReplacePlugin.cs,CanHandle,The following statement contains a magic number: int advanceCount = isCurrent ? 1 : 2;
Magic Number,Fluentscript.Lib.Plugins.Parser,AggregatePlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AggregatePlugin.cs,Parse,The following statement contains a magic number: _tokenIt.Advance(2);
Magic Number,Fluentscript.Lib.Plugins.Parser,ConstCapsPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\ConstCapsPlugin.cs,EnsureAdditionalConst,The following statement contains a magic number: !IsConstMatch(peek.Token' 2)
Magic Number,Fluentscript.Lib.Plugins.Parser,AnyOfPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\AnyOfPlugin.cs,Parse,The following statement contains a magic number: _tokenIt.Advance(2);
Magic Number,Fluentscript.Lib.Plugins.Parser,PhoneNumberPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PhoneNumberPlugin.cs,CanHandle,The following statement contains a magic number: current.Text.Length > 3
Magic Number,Fluentscript.Lib.Plugins.Parser,PhoneNumberPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PhoneNumberPlugin.cs,CanHandle,The following statement contains a magic number: var n2 = _lexer.Scanner.PeekMaxChars(8);
Magic Number,Fluentscript.Lib.Plugins.Parser,PhoneNumberPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PhoneNumberPlugin.cs,Parse,The following statement contains a magic number: var phoneText = _lexer.Scanner.PeekMaxChars(8);
Magic Number,Fluentscript.Lib.Plugins.Parser,PhoneNumberPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PhoneNumberPlugin.cs,Parse,The following statement contains a magic number: _lexer.Scanner.MoveChars(9);
Magic Number,Fluentscript.Lib.Plugins.Parser,PluginExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PluginPlugin.cs,LoadTokenReplacements,The following statement contains a magic number: replacements.Add(new string[2] { alias.Value' replacement.Value });
Magic Number,Fluentscript.Lib.Plugins.Parser,NamedIndexPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\NamedIndexPlugin.cs,CanHandle,The following statement contains a magic number: n = _tokenIt.Peek(2).Token;
Magic Number,Fluentscript.Lib.Plugins.Parser,DateNumberPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\DateNumberPlugin.cs,CanHandle,The following statement contains a magic number: next.Length < 5
Magic Number,Fluentscript.Lib.Plugins.Parser,EmailPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\EmailPlugin.cs,CanHandle,The following statement contains a magic number: var peekResult = _lexer.Scanner.PeekCustomLimitedWord(false' '@'' 25' '@'' '.');
Magic Number,Fluentscript.Lib.Plugins.Parser,FileExtPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FileExtPlugin.cs,CanHandle,The following statement contains a magic number: last = _lexer.State.Text[_lexer.State.Pos - 2];
Magic Number,Fluentscript.Lib.Plugins.Parser,FileExtPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FileExtPlugin.cs,CanHandle,The following statement contains a magic number: _lexer.State.Pos - 2 >= 0
Magic Number,Fluentscript.Lib.Plugins.Parser,FluentFuncPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentFuncPlugin.cs,FluentFuncPlugin,The following statement contains a magic number: this.Precedence = 100;
Magic Number,Fluentscript.Lib.Plugins.Parser,FluentMemberPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FluentMemberPlugin.cs,FluentMemberPlugin,The following statement contains a magic number: this.Precedence = 200;
Magic Number,Fluentscript.Lib.Plugins.Parser,FuncWildCardPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\FuncWildCardPlugin.cs,FuncWildCardPlugin,The following statement contains a magic number: this.Precedence = 10;
Magic Number,Fluentscript.Lib.Plugins.Parser,HolidayPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\HolidayPlugin.cs,HolidayPlugin,The following statement contains a magic number: this.Precedence = 100;
Magic Number,Fluentscript.Lib.Plugins.Parser,LogPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\LogPlugin.cs,LogPlugin,The following statement contains a magic number: this.Precedence = 100;
Magic Number,Fluentscript.Lib.Plugins.Parser,LogExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\LogPlugin.cs,SetupFileLog,The following statement contains a magic number: string format = Convert.ToString(ParamList[2]);
Magic Number,Fluentscript.Lib.Plugins.Parser,LogExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\LogPlugin.cs,SetupFileLog,The following statement contains a magic number: ParamList.Count > 2
Magic Number,Fluentscript.Lib.Plugins.Parser,MachineInfoPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\MachineInfoPlugin.cs,CanHandle,The following statement contains a magic number: next = _tokenIt.Peek(2);
Magic Number,Fluentscript.Lib.Plugins.Parser,PercentPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PercentPlugin.cs,CanHandle,The following statement contains a magic number: t = _tokenIt.Peek(2' false);
Magic Number,Fluentscript.Lib.Plugins.Parser,PercentPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PercentPlugin.cs,Parse,The following statement contains a magic number: var t = _tokenIt.Advance(2);
Magic Number,Fluentscript.Lib.Plugins.Parser,PercentPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PercentPlugin.cs,Parse,The following statement contains a magic number: val = val / 100;
Magic Number,Fluentscript.Lib.Plugins.Parser,PrintPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\PrintPlugin.cs,Parse,The following statement contains a magic number: resultTokens.Length == 2 && includeNewLine
Magic Number,Fluentscript.Lib.Plugins.Parser,RecordsPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\RecordsPlugin.cs,CanHandle,The following statement contains a magic number: var next2 = _tokenIt.Peek(2).Token;
Magic Number,Fluentscript.Lib.Plugins.Parser,RepeatPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\RepeatPlugin.cs,RepeatPlugin,The following statement contains a magic number: this.Precedence = 50;
Magic Number,Fluentscript.Lib.Plugins.Parser,RoundExpr,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\RoundPlugin.cs,DoEvaluate,The following statement contains a magic number: var d = Convert.ToDouble(val + .5);
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,TimeExprPlugin,The following statement contains a magic number: _aliases["noon"] = new TimeSpan(12' 0' 0);
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,TimeExprPlugin,The following statement contains a magic number: _aliases["Noon"] = new TimeSpan(12' 0' 0);
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: time < 1000
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: (next == "am" || next == "pm") && tokenText.Length > 2
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: hours += 12;
Magic Number,Fluentscript.Lib.Plugins.Parser,TimeExprPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,ParseTime,The following statement contains a magic number: text == "pm" && hours >= 1 && hours <= 11
Magic Number,Fluentscript.Lib.Plugins.Parser,TimePlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,TimePlugin,The following statement contains a magic number: _aliases["noon"] = new TimeSpan(12' 0' 0);
Magic Number,Fluentscript.Lib.Plugins.Parser,TimePlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,TimePlugin,The following statement contains a magic number: _aliases["Noon"] = new TimeSpan(12' 0' 0);
Magic Number,Fluentscript.Lib.Plugins.Parser,TimePlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,CanHandle,The following statement contains a magic number: var text = Lexer.State.CurrentChar + _lexer.Scanner.PeekMaxChars(10);
Magic Number,Fluentscript.Lib.Plugins.Parser,TimePlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,CanHandle,The following statement contains a magic number: text = current.Text + text.Substring(0' ndxAmOrPm + 2);
Magic Number,Fluentscript.Lib.Plugins.Parser,TimePlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\TimePlugin.cs,CanHandle,The following statement contains a magic number: text = current.Text + text.Substring(0' ndxAmOrPm + 2);
Magic Number,Fluentscript.Lib.Plugins.Parser,VariablePathPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\VariablePathPlugin.cs,CanHandle,The following statement contains a magic number: afterIdToken = _tokenIt.Peek(2).Token;
Magic Number,Fluentscript.Lib.Plugins.Parser,VariablePathPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\VariablePathPlugin.cs,ConstructBinaryExpr,The following statement contains a magic number: pathExps.Count == 2
Magic Number,Fluentscript.Lib.Plugins.Parser,WordsPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\Parser\WordsPlugin.cs,Parse,The following statement contains a magic number: _tokenIt.Advance(2' false);
Magic Number,Fluentscript.Lib.Plugins,ForPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\PluginsSys.cs,ForPlugin,The following statement contains a magic number: this.Precedence = 2;
Magic Number,Fluentscript.Lib.Plugins.System,VarPlugin,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Plugins\System\VarPlugin.cs,VarPlugin,The following statement contains a magic number: this.Precedence = 1000;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[1] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[2] = 28;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[2] = 28;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[3] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[3] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[4] = 30;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[4] = 30;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[5] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[5] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[6] = 30;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[6] = 30;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[7] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[7] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[8] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[8] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[9] = 30;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[9] = 30;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[10] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[10] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[11] = 30;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[11] = 30;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[12] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,Execution,The following statement contains a magic number: _daysInMonth[12] = 31;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: var DaysInWeek = 7;
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: date = date.AddDays(14);
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: date = date.AddDays(7);
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: date.Month == 2 && (date.Day + 7) <= 28
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: date.Month == 2 && (date.Day + 7) <= 28
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: date.Month == 2 && (date.Day + 7) <= 28
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDateRelative,The following statement contains a magic number: i < 2
Magic Number,Fluentscript.Lib.Runtime,Execution,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Execution.cs,VisitDay,The following statement contains a magic number: today.DayOfWeek != dayOfweek && count < 8
Magic Number,Fluentscript.Lib.Runtime,MetaCompilerData,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\MetaCompilerData.cs,Init,The following statement contains a magic number: _daysToName[7] = "today";
Magic Number,Fluentscript.Lib.Runtime,MetaCompilerData,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\MetaCompilerData.cs,Init,The following statement contains a magic number: _daysToName[8] = "yesterday";
Magic Number,Fluentscript.Lib.Runtime,MetaCompilerData,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\MetaCompilerData.cs,Init,The following statement contains a magic number: _daysToName[9] = "tomorrow";
Magic Number,Fluentscript.Lib.Runtime.Bindings,MetaCompiler,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Bindings\MetaCompiler.cs,ToConstantDate,The following statement contains a magic number: var year = Convert.ToInt32(expr.ParamList[2]);
Magic Number,Fluentscript.Lib.Runtime.Bindings,MetaCompiler,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Bindings\MetaCompiler.cs,ToConstantDate,The following statement contains a magic number: var time = (string)expr.ParamList[3];
Magic Number,Fluentscript.Lib.Runtime.Bindings,MetaCompiler,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Bindings\MetaCompiler.cs,ToConstantDate,The following statement contains a magic number: var token = expr.ParamList[4] as TokenData;
Magic Number,Fluentscript.Lib.Runtime.Bindings,MetaCompiler,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Bindings\MetaCompiler.cs,ToRelativeDay,The following statement contains a magic number: var token = expr.ParamList[2] as TokenData;
Magic Number,Fluentscript.Lib.Runtime.Bindings,MetaCompiler,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Bindings\MetaCompiler.cs,ToRelativeDate,The following statement contains a magic number: var month = Convert.ToInt32(expr.ParamList[2]);
Magic Number,Fluentscript.Lib.Runtime.Bindings,MetaCompiler,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Bindings\MetaCompiler.cs,ToRelativeDate,The following statement contains a magic number: var token = expr.ParamList[3] as TokenData;
Magic Number,Fluentscript.Lib.Runtime.Bindings,MetaCompiler,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Bindings\MetaCompiler.cs,ToDuration,The following statement contains a magic number: var token = expr.ParamList[2] as TokenData;
Magic Number,Fluentscript.Lib.Runtime.Bindings,MetaCompiler,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Bindings\MetaCompiler.cs,ToEnumerableLoop,The following statement contains a magic number: var token = expr.ParamList[2] as TokenData;
Magic Number,Fluentscript.Lib.Runtime.Switches,TokensSwitch,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Switches\TokensSwitch.cs,DoExecute,The following statement contains a magic number: var lineinfo = this.Pad(text' 8);
Magic Number,Fluentscript.Lib.Runtime.Switches,ListPluginsSwitch,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Switches\ListPluginsSwitch.cs,DoExecute,The following statement contains a magic number: printer.WriteLines(2);
Magic Number,Fluentscript.Lib.Runtime.Switches,ListPluginsSwitch,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Runtime\Switches\ListPluginsSwitch.cs,DoExecute,The following statement contains a magic number: i.Context.PluginsMeta.EachPlugin(plugin =>              {                  printer.WriteKeyValue(true' "Name: "' true' plugin.Name);                  printer.WriteKeyValue(true' "Desc: "' false' plugin.Desc);                  printer.WriteKeyValue(true' "Docs: "' false' plugin.Doc);                  printer.WriteKeyValue(true' "Type: "' false' plugin.PluginType);                  printer.WriteKeyValue(true' "IsOn: "' true' plugin.IsEnabled.ToString().ToLower());                  printer.WriteKeyValue(true' "Gram: "' true' plugin.GetFullGrammar());                  printer.WriteKeyValue(true' "Examples: "' false' string.Empty);                  for (var ndx = 0; ndx < plugin.Examples.Length; ndx++)                  {                      var count = (ndx + 1).ToString(CultureInfo.InvariantCulture);                      printer.WriteLine(count + ". " + plugin.Examples[ndx]);                  }                  printer.WriteLines(3);              });
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,Interpret,The following statement contains a magic number: char n2 = _pos + 2 >= _scriptLength ? ' ' : _script[_pos + 2];
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,Interpret,The following statement contains a magic number: char n2 = _pos + 2 >= _scriptLength ? ' ' : _script[_pos + 2];
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,HandleComment,The following statement contains a magic number: string comment = ReadUntil(COMMENT_END' TEMPLATE_END' true' 3);
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,HandleCodeBlock,The following statement contains a magic number: string code = ReadCodeBlock(CODE_END' TEMPLATE_END' true' 2);
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,HandleCodeExpression,The following statement contains a magic number: string code = ReadCodeBlock(EXP_END' TEMPLATE_END' true' 3);
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: char n2 = _pos + 2 >= _scriptLength ? ' ' : _script[_pos + 2];
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: char n2 = _pos + 2 >= _scriptLength ? ' ' : _script[_pos + 2];
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: _pos += 2;
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadUntil,The following statement contains a magic number: _pos += 2;
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,The following statement contains a magic number: char n2 = _pos + 2 >= _scriptLength ? ' ' : _script[_pos + 2];
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,The following statement contains a magic number: char n2 = _pos + 2 >= _scriptLength ? ' ' : _script[_pos + 2];
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeBlock,The following statement contains a magic number: _pos += 2;
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: char n2 = _pos + 2 >= _scriptLength ? ' ' : _script[_pos + 2];
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: char n2 = _pos + 2 >= _scriptLength ? ' ' : _script[_pos + 2];
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: char n3 = _pos + 3 >= _scriptLength ? ' ' : _script[_pos + 3];
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: char n3 = _pos + 3 >= _scriptLength ? ' ' : _script[_pos + 3];
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtml,The following statement contains a magic number: _pos += 2;
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadCodeString,The following statement contains a magic number: _pos += 2;
Magic Number,Fluentscript.Lib.Templating,TemplateEngineDefault,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Templating\TemplateEngineDefault.cs,ReadHtmlComment,The following statement contains a magic number: _pos += 4;
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("length"' "ft"' "foot"' 12);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("length"' "ft"' "feet"' 12);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("length"' "yd"' "yard"' 36);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("length"' "yd"' "yards"' 36);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("length"' "mi"' "mile"' 63360);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("length"' "mi"' "miles"' 63360);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("computerspace"' "kb"' "kilobyte"' 12);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("computerspace"' "kb"' "kilobytes"' 12);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("computerspace"' "mb"' "megabyte"' 36);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("computerspace"' "mb"' "megabytes"'  36);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("computerspace"' "gig"' "gigabyte"' 63360);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("computerspace"' "gigs"' "gigabytes"'  63360);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "lb"' "pound"     '  16);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "lbs"'"pounds"    ' 16);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "tn"' "ton"       '  32000);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "tn"' "tons"      ' 32000);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "mg"' "milligram" ' .000352739);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "mg"' "milligrams"' .000352739);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "g"'  "gram"      ' .0352739);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "g"'  "grams"     ' .0352739);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "kg"' "kilogram"  ' 35.273962);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "kg"' "kilograms" ' 35.273962);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "t"'  "tonne"     ' 32000);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("weight"'  "t"'  "tonnes"    ' 32000);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("volume"'  "tbsp"' "tablespoon"' 3);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("volume"'  "tbsp"' "tablespoons"' 3);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("volume"'  "cup"' "cup"' 48);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("volume"'  "cup"' "cups"' 48);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("volume"' "pt"' "pint"' 96);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("volume"' "pt"' "pints"' 96);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("volume"' "qt"' "quart"' 192);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("volume"' "qt"' "quarts"' 192);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("volume"' "gal"' "gallon"' 768);
Magic Number,Fluentscript.Lib.Types,Units,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Units.cs,RegisterAll,The following statement contains a magic number: RegisterUnit("volume"' "gal"' "gallons"' 768);
Magic Number,Fluentscript.Lib.Types.Javascript,LJSTableMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSTableMethods.cs,Reverse,The following statement contains a magic number: int stopIndex = length / 2;
Magic Number,Fluentscript.Lib.Types.Javascript,LJSTableMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSTableMethods.cs,Reverse,The following statement contains a magic number: length % 2 == 0
Magic Number,Fluentscript.Lib.Types.Javascript,LJSArrayMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSArrayMethods.cs,Reverse,The following statement contains a magic number: int stopIndex = length / 2;
Magic Number,Fluentscript.Lib.Types.Javascript,LJSArrayMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSArrayMethods.cs,Reverse,The following statement contains a magic number: length % 2 == 0
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFrom,The following statement contains a magic number: paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFrom,The following statement contains a magic number: paramCount != 0 && paramCount != 1 && paramCount != 3 && paramCount != 6
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFromArgs,The following statement contains a magic number: paramCount == 0 || paramCount == 1 || paramCount == 3 || paramCount == 6
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CanCreateFromArgs,The following statement contains a magic number: paramCount == 0 || paramCount == 1 || paramCount == 3 || paramCount == 6
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: return new LDate(new DateTime(args[0]' args[1]' args[2]));
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: parameters.Length == 3
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: return new LDate(new DateTime(args[0]' args[1]' args[2]' args[3]' args[4]' args[5]));
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: return new LDate(new DateTime(args[0]' args[1]' args[2]' args[3]' args[4]' args[5]));
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: return new LDate(new DateTime(args[0]' args[1]' args[2]' args[3]' args[4]' args[5]));
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: return new LDate(new DateTime(args[0]' args[1]' args[2]' args[3]' args[4]' args[5]));
Magic Number,Fluentscript.Lib.Types.Javascript,LJSDateMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSDateMethods.cs,CreateFromArgs,The following statement contains a magic number: parameters.Length == 6
Magic Number,Fluentscript.Lib.Types.Javascript,LJSTimeMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSTimeMethods.cs,CanCreateFromArgs,The following statement contains a magic number: paramCount == 0 || paramCount == 3 || paramCount == 4
Magic Number,Fluentscript.Lib.Types.Javascript,LJSTimeMethods,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\Types\Javascript\LJSTimeMethods.cs,CanCreateFromArgs,The following statement contains a magic number: paramCount == 0 || paramCount == 3 || paramCount == 4
Magic Number,Fluentscript.Lib._Core,LangSettings,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxConsequetiveExpressions = 7;
Magic Number,Fluentscript.Lib._Core,LangSettings,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxConsequetiveMemberAccess = 5;
Magic Number,Fluentscript.Lib._Core,LangSettings,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxExceptions = 10;
Magic Number,Fluentscript.Lib._Core,LangSettings,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxFuncParams = 10;
Magic Number,Fluentscript.Lib._Core,LangSettings,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxLoopLimit = 200;
Magic Number,Fluentscript.Lib._Core,LangSettings,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxCallStack = 15;
Magic Number,Fluentscript.Lib._Core,LangSettings,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxStatements = 200;
Magic Number,Fluentscript.Lib._Core,LangSettings,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\LangSettings.cs,DefaultLimits,The following statement contains a magic number: MaxScriptLength = 20000;
Magic Number,Fluentscript.Lib._Core.Grammar,ExtendedPropsHelper,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Parse,The following statement contains a magic number: name = name.Substring(5);
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TokenSpecs = new List<TokenSpec>()              {                  new TokenSpec( 100'  "Keyword"'      "var"      '    "Var"       )'                  new TokenSpec( 101'  "Keyword"'      "if"       '    "If"        )'                  new TokenSpec( 102'  "Keyword"'      "else"     '    "Else"      )'                  new TokenSpec( 103'  "Keyword"'      "break"    '    "Break"     )'                  new TokenSpec( 104'  "Keyword"'      "continue" '    "Continue"  )'                  new TokenSpec( 105'  "Keyword"'      "for"      '    "For"       )'                  new TokenSpec( 106'  "Keyword"'      "while"    '    "While"     )'                  new TokenSpec( 107'  "Keyword"'      "function" '    "Function"  )'                  new TokenSpec( 108'  "Keyword"'      "return"   '    "Return"    )'                  new TokenSpec( 109'  "Keyword"'      "new"      '    "New"       )'                  new TokenSpec( 110'  "Keyword"'      "try"      '    "Try"       )'                  new TokenSpec( 111'  "Keyword"'      "catch"    '    "Catch"     )'                  new TokenSpec( 112'  "Keyword"'      "throw"    '    "Throw"     )'  	            new TokenSpec( 113'  "Keyword"'      "in"    	'    "In"     	 )'  	            new TokenSpec( 114'  "Keyword"'      "run"    	'    "Run"     	 )'  	            new TokenSpec( 115'  "Keyword"'      "then"     '    "Then"      )'                    new TokenSpec( 300'	 "Symbol"'	     "+"'	        "Plus"               	)'                  new TokenSpec( 301'	 "Symbol"'	     "-"'	        "Minus"              	)'                  new TokenSpec( 302'	 "Symbol"'	     "*"'	        "Multiply"           	)'                  new TokenSpec( 303'	 "Symbol"'	     "/"'	        "Divide"             	)'                  new TokenSpec( 304'	 "Symbol"'	     "%"'	        "Percent"             	)'  	            new TokenSpec( 305'	 "Symbol"'	     "<"'	        "LessThan" 				)'                  new TokenSpec( 306'	 "Symbol"'	     "<="'	        "LessThanOrEqual" 		)'                  new TokenSpec( 307'	 "Symbol"'	     ">"'	        "MoreThan" 				)'                  new TokenSpec( 308'	 "Symbol"'	     ">="'	        "MoreThanOrEqual" 		)'                  new TokenSpec( 309'	 "Symbol"'	     "=="'	        "EqualEqual" 			)'                  new TokenSpec( 310'	 "Symbol"'	     "!="'	        "NotEqual" 				)'                  new TokenSpec( 311'	 "Symbol"'	     "&&"'	        "LogicalAnd" 			)'                  new TokenSpec( 312'	 "Symbol"'	     "||"'	        "LogicalOr" 			)'                  new TokenSpec( 313'	 "Symbol"'	     "!"'	        "LogicalNot" 			)'                  new TokenSpec( 314'	 "Symbol"'	     "?"'	        "Question"	 			)'                  new TokenSpec( 315'	 "Symbol"'	     "++"'	        "Increment"				)'                  new TokenSpec( 316'	 "Symbol"'	     "--"'	        "Decrement"				)'                  new TokenSpec( 317'	 "Symbol"'	     "+="'	        "IncrementAdd" 			)'                  new TokenSpec( 318'	 "Symbol"'	     "-="'	        "IncrementSubtract"		)'                  new TokenSpec( 319'	 "Symbol"'	     "*="'	        "IncrementMultiply"		)'                  new TokenSpec( 320'	 "Symbol"'	     "/="'	        "IncrementDivide" 		)'                  new TokenSpec( 321'	 "Symbol"'	     "{"'	        "LeftBrace"				)'                  new TokenSpec( 322'	 "Symbol"'	     "}"'	        "RightBrace" 			)'                  new TokenSpec( 323'	 "Symbol"'	     "("'	        "LeftParenthesis" 		)'                  new TokenSpec( 324'	 "Symbol"'	     ")"'	        "RightParenthesis" 		)'                  new TokenSpec( 325'	 "Symbol"'	     "["'	        "LeftBracket" 			)'                  new TokenSpec( 326'	 "Symbol"'	     "]"'	        "RightBracket" 			)'                  new TokenSpec( 327'	 "Symbol"'	     ";"'	        "Semicolon"				)'                  new TokenSpec( 328'	 "Symbol"'	     "'"'	        "Comma"					)'                  new TokenSpec( 329'	 "Symbol"'	     "."'	        "Dot" 					)'                  new TokenSpec( 330'	 "Symbol"'	     ":"'	        "Colon"					)'                  new TokenSpec( 331'	 "Symbol"'	     "="'	        "Assignment" 			)'                  new TokenSpec( 332'	 "Symbol"'	     "$"'	        "Dollar" 				)'                  new TokenSpec( 333'	 "Symbol"'	     "@"'	        "At" 					)'                  new TokenSpec( 334'	 "Symbol"'	     "#"'	        "Pound"					)'                  new TokenSpec( 335'	 "Symbol"'	     "|"'	        "Pipe" 					)'                  new TokenSpec( 336'	 "Symbol"'	     "\\"'	        "BackSlash"				)'                                    new TokenSpec( 400'	 "LiteralOther"'	"eof:\"eof\""'	        "EndToken"				    )'                  new TokenSpec( 401'	 "LiteralOther"'	"unknown:\"unknown\""'	"Unknown"				)'                  new TokenSpec( 402'	 "LiteralOther"'	"multi:\"multi\""'	    "Multi"				    ) { GenerateObject =  false }'                    new TokenSpec( 200'   "LiteralBool"'   "true:true"                   '  "True")'                  new TokenSpec( 201'   "LiteralBool"'   "false:false"                 '  "False")'                  new TokenSpec( 202'   "LiteralOther"'  "null:null"                   '  "Null")'                  new TokenSpec( 203'   "LiteralOther"'  " :\"\""                      '  "WhiteSpace")'                  new TokenSpec( 204'   "LiteralOther"'  "newline:\"newline\""         '  "NewLine")'                  new TokenSpec( 205'   "LiteralOther"'  "comment_sl:\"comment_sl\""   '  "CommentSLine")'                  new TokenSpec( 206'   "LiteralOther"'  "comment_ml:\"comment_ml\""   '  "CommentMLine")'                  new TokenSpec( 207'   "LiteralIdent"'  "na:\"na\""   '  "Ident"	        ) { GenerateObject = false } '                  new TokenSpec( 208'   "LiteralOther"'  "na:\"na\""   '  "LiteralBool"	) { GenerateObject = false } '                  new TokenSpec( 209'   "LiteralOther"'  "na:\"na\""   '  "LiteralDate"	) { GenerateObject = false } '                  new TokenSpec( 210'   "LiteralOther"'  "na:\"na\""   '  "LiteralDay"	) { GenerateObject = false } '                  new TokenSpec( 211'   "LiteralOther"'  "na:\"na\""   '  "LiteralNumber"	) { GenerateObject = false } '                  new TokenSpec( 212'   "LiteralOther"'  "na:\"na\""   '  "LiteralString"	) { GenerateObject = false } '                  new TokenSpec( 213'   "LiteralOther"'  "na:\"na\""   '  "LiteralTime"	) { GenerateObject = false } '                  new TokenSpec( 214'   "LiteralOther"'  "na:\"na\""   '  "LiteralVersion") { GenerateObject = false } '                  new TokenSpec( 215'   "LiteralOther"'  "na:\"na\""   '  "LiteralOther"	) { GenerateObject = false } '                                };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.ExprSpecs = new List<ExprSpec>()              {                  new ExprSpec(className : "ArrayExpr"' 			name: "Array"' 		     extends: "IndexableExpr"'          implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "List<Expr>:Exprs")'                  new ExprSpec(className : "AnyOfExpr"' 			name: "AnyOf"' 		     extends: "Expr"'                   implements: "IParameterExpression"' token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:CompareExpr;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList")'                  new ExprSpec(className : "AssignExpr"' 			name: "Assign"' 		 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:VarExp;Expr:ValueExp;bool:IsDeclaration")'                  new ExprSpec(className : "AssignMultiExpr"' 	name: "AssignMulti"' 	 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "List<AssignExpr>:Assignments")'                  new ExprSpec(className : "BinaryExpr"' 			name: "Binary"' 		 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: true '  createNewSymScope: false'  hasOperator: true '  qualifiedName: "return \"\";"'                                                            extraProps: null)'                  new ExprSpec(className : "CompareExpr"' 		name: "Compare"' 		 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: true '  createNewSymScope: false'  hasOperator: true '  qualifiedName: "return \"\";"'                                                            extraProps: null)'                  new ExprSpec(className : "ConditionExpr"' 		name: "Condition"' 		 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: true '  createNewSymScope: false'  hasOperator: true '  qualifiedName: "return \"\";"'                                                            extraProps: null)'                  new ExprSpec(className : "ConstantExpr"' 		name: "Constant"' 		 extends: "ValueExpr"'              implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: null)'                  new ExprSpec(className : "DayExpr"' 		    name: "Day"' 		     extends: "ValueExpr"'              implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:Name;string:Time")'                  new ExprSpec(className : "DurationExpr"' 		name: "Duration"' 		 extends: "ValueExpr"'              implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:Duration;string:Mode")'                  new ExprSpec(className : "DateExpr"' 		    name: "Date"' 		     extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "int:Month;int:Day;int:Year;string:Time")'                  new ExprSpec(className : "DateRelativeExpr"' 	name: "DateRelative"'    extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "int:Month;int:DayOfTheWeek;string:RelativeDay")'                  new ExprSpec(className : "FunctionCallExpr"' 	name: "FunctionCall"' 	 extends: "Expr"'                   implements: "IParameterExpression"' token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return this.NameExp != null ? this.NameExp.ToQualifiedName() : \"\";"'    extraProps: "Expr:NameExp;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList;FunctionExpr:Function;bool:RetainEvaluatedParams;bool:IsScopeVariable")'                  new ExprSpec(className : "FunctionExpr"' 		name: "Function"' 		 extends: "BlockExpr"'              implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "FunctionMetaData:Meta;long:ExecutionCount;long:ErrorCount;bool:HasReturnValue;object:ReturnValue;List<object>:ArgumentValues;bool:ContinueRunning")'                  new ExprSpec(className : "IndexExpr"' 			name: "Index"' 			 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:IndexExp;Expr:VarExp;bool:IsAssignment")'                  new ExprSpec(className : "InterpolatedExpr"' 	name: "Interpolated"' 	 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "List<Expr>:Expressions")'                  new ExprSpec(className : "ListCheckExpr"' 		name: "ListCheck"' 		 extends: "Expr"'                   implements: ""'                     token : ""	        '  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:NameExp")'                  new ExprSpec(className : "MapExpr"' 			name: "Map"' 			 extends: "IndexableExpr"'          implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "List<Tuple<string'Expr>>:Expressions")'                  new ExprSpec(className : "MemberAccessExpr"' 	name: "MemberAccess"' 	 extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return this.VarExp.ToQualifiedName() + \".\" + this.MemberName;"'         extraProps: "string:MemberName;Expr:VarExp;bool:IsAssignment")'                  new ExprSpec(className : "NamedParameterExpr"' 	name: "NamedParameter"'  extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return this.Name;"'                                                       extraProps: "string:Name;Expr:Value;int:Pos")'                  new ExprSpec(className : "NegateExpr"' 			name: "Negate"' 		 extends: "VariableExpr"'           implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:Expression")'                  new ExprSpec(className : "NewExpr"' 			name: "New"' 			 extends: "Expr"'                   implements: "IParameterExpression"' token : "new"		'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:TypeName;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList")'                  new ExprSpec(className : "ParameterExpr"' 		name: "Parameter"' 		 extends: "Expr"'                   implements: "IParameterExpression"' token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "FunctionMetaData:Meta;List<Expr>:prop-ParamListExpressions;List<object>:prop-ParamList;")'                  new ExprSpec(className : "RunExpr"' 		    name: "Run"' 		     extends: "Expr"'                   implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:FuncName;string:Mode;Expr:FuncCallOnAfterExpr;Expr:FuncCallExpr")'                  new ExprSpec(className : "TableExpr"' 			name: "Table"' 		     extends: "IndexableExpr"'          implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "List<string>:Fields")'                  new ExprSpec(className : "UnaryExpr"' 			name: "Unary"' 			 extends: "VariableExpr"'           implements: ""'                     token : ""			'  createPlugin : false'  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Operator:Op;Expr:Expression;double:Increment")'                  new ExprSpec(className : "BreakExpr"' 			name: "Break"' 			 extends: "Expr"'                   implements: ""'                     token : "break"	    '  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: true '  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: null)'                  new ExprSpec(className : "ContinueExpr"' 		name: "Continue"' 		 extends: "Expr"'                   implements: ""'                     token : "continue"	'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: true '  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: null)'                  new ExprSpec(className : "ForEachExpr"' 		name: "ForEach"' 		 extends: "WhileExpr"'              implements: ""'                     token : "for"		'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:VarName;Expr:SourceExpr;string:SourceName")'                  new ExprSpec(className : "ForExpr"' 			name: "For"' 			 extends: "WhileExpr"'              implements: ""'                     token : "for"		'  createPlugin : true '  pluginImplements: ""'                 precedence: 2'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:Start;Expr:Increment")'                  new ExprSpec(className : "FunctionDeclareExpr"' name: "FunctionDeclare"' extends: "Expr"'                   implements: ""'                     token : "function"	'  createPlugin : true '  pluginImplements: "IParserCallbacks"' precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "FunctionExpr:Function")'                  new ExprSpec(className : "IfExpr"' 				name: "If"' 			 extends: "ConditionalBlockExpr"'   implements: ""'                     token : "if"		'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "BlockExpr:Else")'                  new ExprSpec(className : "LambdaExpr"' 			name: "Lambda"' 		 extends: "Expr"'                   implements: ""'                     token : "function"	'  createPlugin : true '  pluginImplements: "IParserCallbacks"' precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "FunctionExpr:Expr")'                  new ExprSpec(className : "ReturnExpr"' 			name: "Return"' 		 extends: "Expr"'                   implements: ""'                     token : "return"	'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: true '  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:Exp")'                  new ExprSpec(className : "ThrowExpr"' 			name: "Throw"' 			 extends: "Expr"'                   implements: ""'                     token : "throw"	    '  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: true '  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "Expr:Exp")'                  new ExprSpec(className : "TryCatchExpr"' 		name: "TryCatch"' 		 extends: "Expr"'                   implements: "IBlockExpr"'           token : "try"		'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "string:ErrorName;List<Expr>:prop-Statements;BlockExpr:Catch")'                  new ExprSpec(className : "WhileExpr"' 			name: "While"' 			 extends: "ConditionalBlockExpr"'   implements: "ILoop"'                token : "while"	    '  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: true'   hasTerminator: false'  isBlock: true '  hasLhsRhs: false'  createNewSymScope: true '  hasOperator: false'  qualifiedName: "return \"\";"'                                                            extraProps: "bool:prop-DoBreakLoop;bool:prop-DoContinueLoop;bool:prop-DoContinueRunning")'                  new ExprSpec(className : "VariableExpr"' 		name: "Variable"' 		 extends: "Expr"'                   implements: ""'                     token : "@ident"	'  createPlugin : true '  pluginImplements: ""'                 precedence: 1'  isStatement: false'  hasTerminator: false'  isBlock: false'  hasLhsRhs: false'  createNewSymScope: false'  hasOperator: false'  qualifiedName: "return this.Name;"'                                                       extraProps: "string:Name")'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
Magic Number,Fluentscript.Lib._Core.Grammar,FSGrammarSpec,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Lib\FluentScript\_Core\Grammar\FSGrammar.cs,Setup,The following statement contains a magic number: this.TypeSpecs = new List<TypeSpec>()              {                  new TypeSpec(){ ClassName = "Array"'     Generate = true'  ConstValue = "Array"'     Type= ""'  Name = "array"'       FullName = "sys.array"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Bool"'      Generate = true'  ConstValue = "Bool"'      Type= ""'  Name = "bool"'        FullName = "sys.bool"'      HostDataType = "bool"'                          Value = 2 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Class"'     Generate = true'  ConstValue = "LClass"'    Type= ""' Name = "class"'       FullName = "ext.class"'     HostDataType = "object"'                        Value = 3 '    ExtraTypeProps = "Type:DataType" }'                  new TypeSpec(){ ClassName = "Date"'      Generate = true'  ConstValue = "Date"'      Type= ""'  Name = "datetime"'    FullName = "sys.datetime"'  HostDataType = "DateTime"'                      Value = 4 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "DayOfWeek"' Generate = true'  ConstValue = "DayOfWeek"' Type= ""'  Name = "dayofweek"'   FullName = "sys.dayofweek"' HostDataType = "DayOfWeek"'                     Value = 5 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Function"'  Generate = true'  ConstValue = "Function"'  Type= ""'  Name = "function"'    FullName = "ext.function"'  HostDataType = "object"'                        Value = 6 '   ExtraTypeProps = "LType:Parent" }'                  new TypeSpec(){ ClassName = "Map"'       Generate = true'  ConstValue = "Map"'       Type= ""'  Name = "map"'         FullName = "sys.map"'       HostDataType = "IDictionary<string' object>"'   Value = 7 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Module"'    Generate = true'  ConstValue = "Module"'    Type= ""'  Name = "module"'      FullName = "ext.module"'    HostDataType = "object"'                        Value = 8 '   ExtraTypeProps = "" }'                  new TypeSpec(){ ClassName = "Null"'      Generate = true'  ConstValue = "Null"'      Type= ""'  Name = "null"'        FullName = "sys.null"'      HostDataType = "object"'                        Value = 9 '   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Number"'    Generate = true'  ConstValue = "Number"'    Type= ""'  Name = "number"'      FullName = "sys.number"'    HostDataType = "double"'                        Value = 10'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Object"'    Generate = false' ConstValue = "Object"'    Type= ""'  Name = "object"'      FullName = "sys.object"'    HostDataType = "object"'                        Value = 11'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "String"'    Generate = true'  ConstValue = "String"'    Type= ""'  Name = "string"'      FullName = "sys.string"'    HostDataType = "string"'                        Value = 12'   ExtraTypeProps = ""}'                  new TypeSpec(){ ClassName = "Table"'     Generate = true'  ConstValue = "Table"'     Type= ""'  Name = "table"'       FullName = "sys.table"'     HostDataType = "IList"'                         Value = 1 '   ExtraTypeProps = ""' ExtraProps = "List<string>:Fields"}'                  new TypeSpec(){ ClassName = "Time"'      Generate = true'  ConstValue = "Time"'      Type= ""'  Name = "time"'        FullName = "sys.time"'      HostDataType = "TimeSpan"'                      Value = 13'   ExtraTypeProps = ""}'                                  new TypeSpec(){ ClassName = "Unit"'      Generate = true'  ConstValue = "Unit"'      Type= ""'  Name = "unit"'        FullName = "sys.unit"'      HostDataType = "double"'                        Value = 14'   ExtraTypeProps = ""' ExtraProps = "double:prop-BaseValue;string:prop-Group;string:prop-SubGroup"}'              };
