Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCreateExcludedTaxTransaction,The length of the statement  "            Assert.AreEqual((10 + (10 * .25)) * 3' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount)); " is 252.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleMultipleTax,The length of the statement  "            Assert.AreEqual(expLcTax * orderQuantiy' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount); " is 141.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleMultipleTax,The length of the statement  "            Assert.AreEqual(expStTax * orderQuantiy' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount); " is 141.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTax,The length of the statement  "            Assert.AreEqual(ticket.GetSum() - expTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == TicketType.SaleTransactionType.Id).Amount); " is 174.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTax,The length of the statement  "            Assert.AreEqual(expLcTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount); " is 126.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTax,The length of the statement  "            Assert.AreEqual(expStTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount); " is 126.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The length of the statement  "            Assert.AreEqual(ticket.GetSum() - expTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == TicketType.SaleTransactionType.Id).Amount); " is 174.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The length of the statement  "            Assert.AreEqual(expLcTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount); " is 126.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The length of the statement  "            Assert.AreEqual(expStTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount); " is 126.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The length of the statement  "                    .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 }) " is 140.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The length of the statement  "                    .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 }) " is 141.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The length of the statement  "            Assert.AreEqual(ticket.GetSum() - expTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == TicketType.SaleTransactionType.Id).Amount); " is 174.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The length of the statement  "            Assert.AreEqual(expLcTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount); " is 126.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The length of the statement  "            Assert.AreEqual(expStTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount); " is 126.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The length of the statement  "                    .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 }) " is 140.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The length of the statement  "                    .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 }) " is 141.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The length of the statement  "                    .ToggleOrderTag(new OrderTagGroup { Name = "OT3"' Id = 3' AddTagPriceToOrderPrice = true' TaxFree = true }' new OrderTag { Name = "t3"' Id = 3' Price = 5 }) " is 156.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The length of the statement  "            Assert.AreEqual(ticket.GetSum() - expTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == TicketType.SaleTransactionType.Id).Amount); " is 174.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The length of the statement  "            Assert.AreEqual(expLcTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount); " is 126.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The length of the statement  "            Assert.AreEqual(expStTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount); " is 126.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The length of the statement  "                .AddCalculation(new CalculationType { Name = "Discount"' AccountTransactionType = DiscountTransactionType' Amount = 10' DecreaseAmount = true }).Build(); " is 153.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The length of the statement  "            Assert.AreEqual(expLcTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount); " is 126.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The length of the statement  "            Assert.AreEqual(expStTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount); " is 126.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The length of the statement  "            Assert.AreEqual(0' ticket.TransactionDocument.AccountTransactions.Sum(x => x.AccountTransactionValues.Sum(y => y.Debit - y.Credit))); " is 133.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The length of the statement  "            Assert.AreEqual(9' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount)); " is 232.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateExcludedTaxWhenDiscountExists,The length of the statement  "                .AddCalculation(new CalculationType { Name = "Discount"' AccountTransactionType = DiscountTransactionType' Amount = 10' DecreaseAmount = true }) " is 144.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateExcludedTaxWhenDiscountExists,The length of the statement  "            Assert.AreEqual(11.25' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount)); " is 236.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateMultipleOrderExcludedTaxWhenDiscountExists,The length of the statement  "            Assert.AreEqual(22.50' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount)); " is 236.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The length of the statement  "            Assert.AreEqual(36.07' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount); " is 123.
Long Statement,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The length of the statement  "            Assert.AreEqual(34.78' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount); " is 123.
Magic Number,Samba.Domain.Tests,EntityTest,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\EntityTest.cs,CanUpdateEntityDateDataWithTodayTagAndInc,The following statement contains a magic number: Assert.AreEqual(DateTime.Today.AddDays(2).ToShortDateString()' entity.GetCustomData("Birthday"));
Magic Number,Samba.Domain.Tests,EntityTest,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\EntityTest.cs,CanUpdateEntityDateDataWithTodayTagAndInc2,The following statement contains a magic number: Assert.AreEqual(DateTime.Today.AddDays(30).ToShortDateString()' entity.GetCustomData("Birthday"));
Magic Number,Samba.Domain.Tests,EntityTest,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\EntityTest.cs,CanUpdateEntityDateDataWithTodayTagAndDec,The following statement contains a magic number: Assert.AreEqual(DateTime.Today.AddDays(-2).ToShortDateString()' entity.GetCustomData("Birthday"));
Magic Number,Samba.Domain.Tests,EntityTest,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\EntityTest.cs,CanUpdateEntityDateDataWithTodayTagAndInc3,The following statement contains a magic number: Assert.AreEqual(DateTime.Today.AddDays(2).ToShortDateString()' entity.GetCustomData("Birthday"));
Magic Number,Samba.Domain.Tests,EntityTest,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\EntityTest.cs,CanUpdateEntityDateDataWithTodayTagAndDec2,The following statement contains a magic number: Assert.AreEqual(DateTime.Today.AddDays(-2).ToShortDateString()' entity.GetCustomData("Birthday"));
Magic Number,Samba.Domain.Tests,MenuItemBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\MenuItemBuilderTests.cs,MenuBuilder_AddPortion_PortionAdded,The following statement contains a magic number: var menuItem = MenuItemBuilder.Create("Hamburger")                                        .AddPortion("Adet"' 5)                                        .Build();
Magic Number,Samba.Domain.Tests,MenuItemBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\MenuItemBuilderTests.cs,MenuBuilder_AddMultiplePortions_PortionCountCorrect,The following statement contains a magic number: var menuItem = MenuItemBuilder.Create("Hamburger")                                        .AddPortion("Küçük"' 5)                                        .AddPortion("Büyük"' 8)                                        .Build();
Magic Number,Samba.Domain.Tests,MenuItemBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\MenuItemBuilderTests.cs,MenuBuilder_AddMultiplePortions_PortionCountCorrect,The following statement contains a magic number: var menuItem = MenuItemBuilder.Create("Hamburger")                                        .AddPortion("Küçük"' 5)                                        .AddPortion("Büyük"' 8)                                        .Build();
Magic Number,Samba.Domain.Tests,MenuItemBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\MenuItemBuilderTests.cs,MenuBuilder_AddMultiplePortions_PortionCountCorrect,The following statement contains a magic number: Assert.AreEqual(2' menuItem.Portions.Count);
Magic Number,Samba.Domain.Tests,MenuItemBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\MenuItemBuilderTests.cs,MenuItemBuilder_AddGroupCode_GroupCodeAssigned,The following statement contains a magic number: var menuItem = MenuItemBuilder.Create("Hamburger")                                            .AddPortion("Küçük"' 5)                                            .WithGroupCode("İçecekler")                                            .Build();
Magic Number,Samba.Domain.Tests,MenuItemBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\MenuItemBuilderTests.cs,MenuItemBuilder_UpdateProductTag_ProductTagAssigned,The following statement contains a magic number: var menuItem = MenuItemBuilder.Create("Tost")                                            .AddPortion("Küçük"' 2)                                            .WithProductTag("NoSale")                                            .Build();
Magic Number,Samba.Domain.Tests,OrderBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,OrderBuilder_CreateOrderWithQuantity_UpdatesQuantity,The following statement contains a magic number: var order = OrderBuilder.Create()                                      .WithDepartment(testContext.Department)                                      .ForMenuItem(testContext.Hamburger)                                      .WithQuantity(5)                                      .WithAccountTransactionType(testContext.AccountTransactionType)                                      .Build();
Magic Number,Samba.Domain.Tests,OrderBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,OrderBuilder_CreateOrderWithQuantity_UpdatesQuantity,The following statement contains a magic number: Assert.AreEqual(5' order.Quantity);
Magic Number,Samba.Domain.Tests,OrderBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,OrderBuilder_CreateMenuItem_UpdatesOrderPrice,The following statement contains a magic number: var order = OrderBuilder.Create()                                      .CreateMenuItem("Tost").AddPortion("Küçük"' 4.5m).Do()                                      .WithDepartment(testContext.Department)                                      .WithAccountTransactionType(testContext.AccountTransactionType)                                      .Build();
Magic Number,Samba.Domain.Tests,OrderBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,OrderBuilder_CreateMenuItem_UpdatesOrderPrice,The following statement contains a magic number: Assert.AreEqual(4.5m' order.Price);
Magic Number,Samba.Domain.Tests,OrderBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,OrderBuilder_CreateMenuItemWithDoublePortions_PriceCorrect,The following statement contains a magic number: var tost = MenuItemBuilder.Create("Tost").AddPortion("Küçük"' 4.5m).AddPortion("Büyük"' 8).Build();
Magic Number,Samba.Domain.Tests,OrderBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,OrderBuilder_CreateMenuItemWithDoublePortions_PriceCorrect,The following statement contains a magic number: var tost = MenuItemBuilder.Create("Tost").AddPortion("Küçük"' 4.5m).AddPortion("Büyük"' 8).Build();
Magic Number,Samba.Domain.Tests,OrderBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,OrderBuilder_CreateMenuItemWithDoublePortions_PriceCorrect,The following statement contains a magic number: Assert.AreEqual(8m' order.Price);
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.Hamburger = new MenuItem { Name = "Hamburger"' Id = 5 };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.HamburgerPortion = new MenuItemPortion { MenuItemId = 5' Id = 2' Name = "Standard"' Price = 5 };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.HamburgerPortion = new MenuItemPortion { MenuItemId = 5' Id = 2' Name = "Standard"' Price = 5 };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.HamburgerPortion = new MenuItemPortion { MenuItemId = 5' Id = 2' Name = "Standard"' Price = 5 };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.BigHamburger = new MenuItemPortion { MenuItemId = 5' Id = 4' Name = "Big"' Price = 8 };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.BigHamburger = new MenuItemPortion { MenuItemId = 5' Id = 4' Name = "Big"' Price = 8 };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.BigHamburger = new MenuItemPortion { MenuItemId = 5' Id = 4' Name = "Big"' Price = 8 };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.HamburgerHappyHourPrice = 5;
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.Department = new Department { Id = 5' TicketTypeId = 3' WarehouseId = 8 };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.Department = new Department { Id = 5' TicketTypeId = 3' WarehouseId = 8 };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.Department = new Department { Id = 5' TicketTypeId = 3' WarehouseId = 8 };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,CreateDefault,The following statement contains a magic number: result.AccountTransactionType = new AccountTransactionType { Id = 15 };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,With18PTaxTemplate,The following statement contains a magic number: TaxTemplate = new TaxTemplate                               {                                   Id = 8'                                   Name = "%18 Tax"'                                   Rate = 18'                                   AccountTransactionType = AccountTransactionType.Default                               };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,With18PTaxTemplate,The following statement contains a magic number: TaxTemplate = new TaxTemplate                               {                                   Id = 8'                                   Name = "%18 Tax"'                                   Rate = 18'                                   AccountTransactionType = AccountTransactionType.Default                               };
Magic Number,Samba.Domain.Tests,OrderBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\OrderBuilderTests.cs,WithProductTimer,The following statement contains a magic number: ProductTimer = new ProductTimer { Id = 12 };
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: Pizza = CreateMenuItem(1' "Pizza"' 10);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: Cola = CreateMenuItem(2' "Cola"' 5);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: Cola = CreateMenuItem(2' "Cola"' 5);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: Beer = CreateMenuItem(3' "Beer"' 10);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: Beer = CreateMenuItem(3' "Beer"' 10);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: Product = CreateMenuItem(4' "Product"' 1);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var taxAccountType = new AccountType { Name = "Tax Accounts"' Id = 2 };
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var receivableAccountType = new AccountType { Name = "Receivable Accounts"' Id = 3 };
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var discountAccountType = new AccountType { Name = "Discount Accounts"' Id = 4 };
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var receivableAccount = new Account { AccountTypeId = receivableAccountType.Id' Name = "Receivables"' Id = 2 };
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var stateTaxAccount = new Account { AccountTypeId = taxAccountType.Id' Name = "State Tax"' Id = 3 };
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var localTaxAccount = new Account { AccountTypeId = taxAccountType.Id' Name = "Local Tax"' Id = 4 };
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var defaultDiscountAccount = new Account { AccountTypeId = discountAccountType.Id' Name = "Discount"' Id = 5 };
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var localTaxTransactionType = new AccountTransactionType              {                  Id = 2'                  Name = "Local Tax Transaction"'                  SourceAccountTypeId = taxAccountType.Id'                  TargetAccountTypeId = receivableAccountType.Id'                  DefaultSourceAccountId = localTaxAccount.Id'                  DefaultTargetAccountId = receivableAccount.Id              };
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var stateTaxTransactionType = new AccountTransactionType              {                  Id = 3'                  Name = "State Tax Transaction"'                  SourceAccountTypeId = taxAccountType.Id'                  TargetAccountTypeId = receivableAccountType.Id'                  DefaultSourceAccountId = stateTaxAccount.Id'                  DefaultTargetAccountId = receivableAccount.Id              };
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: DiscountTransactionType = new AccountTransactionType              {                  Id = 4'                  Name = "Discount Transaction"'                  SourceAccountTypeId = receivableAccountType.Id'                  TargetAccountTypeId = discountAccountType.Id'                  DefaultSourceAccountId = receivableAccount.Id'                  DefaultTargetAccountId = defaultDiscountAccount.Id              };
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var stateTax = TaxTemplateBuilder.Create("State Tax")                                               .WithRate(25)                                               .WithRounding(2)                                               .WithAccountTransactionType(stateTaxTransactionType)                                               .AddDefaultTaxTemplateMap()                                               .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var stateTax = TaxTemplateBuilder.Create("State Tax")                                               .WithRate(25)                                               .WithRounding(2)                                               .WithAccountTransactionType(stateTaxTransactionType)                                               .AddDefaultTaxTemplateMap()                                               .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var localTax = TaxTemplateBuilder.Create("Local Tax").WithRate(3)                                               .AddTaxTemplateMap(new TaxTemplateMap { MenuItemId = Cola.Id })                                               .AddTaxTemplateMap(new TaxTemplateMap { MenuItemId = Beer.Id })                                               .WithAccountTransactionType(localTaxTransactionType)                                               .WithRounding(2)                                               .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,Setup,The following statement contains a magic number: var localTax = TaxTemplateBuilder.Create("Local Tax").WithRate(3)                                               .AddTaxTemplateMap(new TaxTemplateMap { MenuItemId = Cola.Id })                                               .AddTaxTemplateMap(new TaxTemplateMap { MenuItemId = Beer.Id })                                               .WithAccountTransactionType(localTaxTransactionType)                                               .WithRounding(2)                                               .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanApplyTax,The following statement contains a magic number: Assert.AreEqual(25' GetTaxTemplates(Pizza.Id).Sum(x => x.Rate));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanApplyTax,The following statement contains a magic number: Assert.AreEqual(28' GetTaxTemplates(Cola.Id).Sum(x => x.Rate));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanApplyTax,The following statement contains a magic number: Assert.AreEqual(28' GetTaxTemplates(Beer.Id).Sum(x => x.Rate));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanApplyTax,The following statement contains a magic number: Assert.AreEqual(10' Pizza.Portions[0].Price);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanApplyTax,The following statement contains a magic number: Assert.AreEqual(5' Cola.Portions[0].Price);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,OrderBuilder_CreatesTaxExcludedOrder_CalculatesVisibleValue,The following statement contains a magic number: Assert.AreEqual(10' order.GetVisibleValue());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateTicket,The following statement contains a magic number: Assert.AreEqual(10' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateTax,The following statement contains a magic number: Assert.AreEqual(2' ticket.GetTaxTotal());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateTaxWhenVoidOrderExists,The following statement contains a magic number: Assert.AreEqual(2' ticket.GetTaxTotal());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateExcludedTax,The following statement contains a magic number: Assert.AreEqual(10 + (10 * .25)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateExcludedTax,The following statement contains a magic number: Assert.AreEqual(10 + (10 * .25)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateExcludedTax,The following statement contains a magic number: Assert.AreEqual(10 + (10 * .25)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCreateExcludedTaxTransaction,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxExcluded()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id)).WithQuantity(3).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCreateExcludedTaxTransaction,The following statement contains a magic number: Assert.AreEqual((10 + (10 * .25)) * 3' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCreateExcludedTaxTransaction,The following statement contains a magic number: Assert.AreEqual((10 + (10 * .25)) * 3' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCreateExcludedTaxTransaction,The following statement contains a magic number: Assert.AreEqual((10 + (10 * .25)) * 3' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCreateExcludedTaxTransaction,The following statement contains a magic number: Assert.AreEqual((10 + (10 * .25)) * 3' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCreateExcludedTaxTransaction,The following statement contains a magic number: Assert.AreEqual((10 + (10 * .25)) * 3' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCreateExcludedTaxTransaction,The following statement contains a magic number: Assert.AreEqual((10 + (10 * .25)) * 3' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleMultipleTax,The following statement contains a magic number: const decimal orderQuantiy = 2;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleMultipleTax,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).WithQuantity(2).Do().Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleMultipleTax,The following statement contains a magic number: const decimal expTax = 2.18m * orderQuantiy;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleMultipleTax,The following statement contains a magic number: const decimal expStTax = 1.95m;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleMultipleTax,The following statement contains a magic number: const decimal expLcTax = 0.23m;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleMultipleTax,The following statement contains a magic number: Assert.AreEqual(expLcTax * orderQuantiy' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleMultipleTax,The following statement contains a magic number: Assert.AreEqual(expStTax * orderQuantiy' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTax,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id)).WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTax,The following statement contains a magic number: const decimal expTax = 2.18m + 1;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTax,The following statement contains a magic number: const decimal expStTax = 1.95m + 1;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTax,The following statement contains a magic number: const decimal expLcTax = 0.23m;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTax,The following statement contains a magic number: Assert.AreEqual(expLcTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTax,The following statement contains a magic number: Assert.AreEqual(expStTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id)).WithPrice(5)                      .ToggleOrderTag(new OrderTagGroup { AddTagPriceToOrderPrice = true }' new OrderTag { Price = 5 }).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id)).WithPrice(5)                      .ToggleOrderTag(new OrderTagGroup { AddTagPriceToOrderPrice = true }' new OrderTag { Price = 5 }).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The following statement contains a magic number: const decimal expTax = 2.18m + 2;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The following statement contains a magic number: const decimal expTax = 2.18m + 2;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The following statement contains a magic number: const decimal expStTax = 1.95m + 2;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The following statement contains a magic number: const decimal expStTax = 1.95m + 2;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The following statement contains a magic number: const decimal expLcTax = 0.23m;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The following statement contains a magic number: Assert.AreEqual(expLcTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithOrderTag,The following statement contains a magic number: Assert.AreEqual(expStTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: const decimal expTax = 2.18m + 3;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: const decimal expTax = 2.18m + 3;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: const decimal expStTax = 1.95m + 3;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: const decimal expStTax = 1.95m + 3;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: const decimal expLcTax = 0.23m;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: Assert.AreEqual(expLcTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTag,The following statement contains a magic number: Assert.AreEqual(expStTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT3"' Id = 3' AddTagPriceToOrderPrice = true' TaxFree = true }' new OrderTag { Name = "t3"' Id = 3' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT3"' Id = 3' AddTagPriceToOrderPrice = true' TaxFree = true }' new OrderTag { Name = "t3"' Id = 3' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT3"' Id = 3' AddTagPriceToOrderPrice = true' TaxFree = true }' new OrderTag { Name = "t3"' Id = 3' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT3"' Id = 3' AddTagPriceToOrderPrice = true' TaxFree = true }' new OrderTag { Name = "t3"' Id = 3' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT3"' Id = 3' AddTagPriceToOrderPrice = true' TaxFree = true }' new OrderTag { Name = "t3"' Id = 3' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT3"' Id = 3' AddTagPriceToOrderPrice = true' TaxFree = true }' new OrderTag { Name = "t3"' Id = 3' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT3"' Id = 3' AddTagPriceToOrderPrice = true' TaxFree = true }' new OrderTag { Name = "t3"' Id = 3' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id))                      .ToggleOrderTag(new OrderTagGroup { Name = "OT1"' Id = 1' AddTagPriceToOrderPrice = true }' new OrderTag { Name = "t1"' Id = 1' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT2"' Id = 2' AddTagPriceToOrderPrice = false }' new OrderTag { Name = "t2"' Id = 2' Price = 5 })                      .ToggleOrderTag(new OrderTagGroup { Name = "OT3"' Id = 3' AddTagPriceToOrderPrice = true' TaxFree = true }' new OrderTag { Name = "t3"' Id = 3' Price = 5 })                      .WithPrice(5).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: const decimal expTax = 2.18m + 3;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: const decimal expTax = 2.18m + 3;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: const decimal expStTax = 1.95m + 3;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: const decimal expStTax = 1.95m + 3;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: const decimal expLcTax = 0.23m;
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: Assert.AreEqual(expLcTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDoubleOrdersMultipleTaxWithMultipleOrderTagOneTaxFree,The following statement contains a magic number: Assert.AreEqual(expStTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .AddOrderFor(Beer).WithTaxTemplates(GetTaxTemplates(Beer.Id)).Do()                  .AddCalculation(new CalculationType { Name = "Discount"' AccountTransactionType = DiscountTransactionType' Amount = 10' DecreaseAmount = true }).Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: var expStTax = decimal.Round((9 * 25) / 128m' 2);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: var expStTax = decimal.Round((9 * 25) / 128m' 2);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: var expStTax = decimal.Round((9 * 25) / 128m' 2);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: var expStTax = decimal.Round((9 * 25) / 128m' 2);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: var expLcTax = decimal.Round((9 * 3) / 128m' 2);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: var expLcTax = decimal.Round((9 * 3) / 128m' 2);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: var expLcTax = decimal.Round((9 * 3) / 128m' 2);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: var expLcTax = decimal.Round((9 * 3) / 128m' 2);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: Assert.AreEqual(9' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: Assert.AreEqual(expLcTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: Assert.AreEqual(expStTax' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: Assert.AreEqual(9' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: Assert.AreEqual(9' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateDiscountTax,The following statement contains a magic number: Assert.AreEqual(9' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateExcludedTaxWhenDiscountExists,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .TaxExcluded()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id)).Do()                  .AddCalculation(new CalculationType { Name = "Discount"' AccountTransactionType = DiscountTransactionType' Amount = 10' DecreaseAmount = true })                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateExcludedTaxWhenDiscountExists,The following statement contains a magic number: Assert.AreEqual(11.25' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateExcludedTaxWhenDiscountExists,The following statement contains a magic number: Assert.AreEqual(11.25' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateExcludedTaxWhenDiscountExists,The following statement contains a magic number: Assert.AreEqual(11.25' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateExcludedTaxWhenDiscountExists,The following statement contains a magic number: Assert.AreEqual(11.25' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateMultipleOrderExcludedTaxWhenDiscountExists,The following statement contains a magic number: var calculationType = CalculationTypeBuilder.Create("Discount")                  .WithAccountTransactionType(DiscountTransactionType)                  .WithAmount(10)                  .DecreaseAmount()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateMultipleOrderExcludedTaxWhenDiscountExists,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default)                  .TaxExcluded()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id)).Do(2)                  .AddCalculation(calculationType)                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateMultipleOrderExcludedTaxWhenDiscountExists,The following statement contains a magic number: Assert.AreEqual(22.50' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateMultipleOrderExcludedTaxWhenDiscountExists,The following statement contains a magic number: Assert.AreEqual(22.50' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateMultipleOrderExcludedTaxWhenDiscountExists,The following statement contains a magic number: Assert.AreEqual(22.50' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateMultipleOrderExcludedTaxWhenDiscountExists,The following statement contains a magic number: Assert.AreEqual(22.50' ticket.TransactionDocument.AccountTransactions.Where(x => x.TargetAccountTypeId == 3).Sum(x => x.Amount) - ticket.TransactionDocument.AccountTransactions.Where(x => x.SourceAccountTypeId == 3).Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanVoidAll,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxExcluded()                  .AddOrderFor(Pizza).WithTaxTemplates(GetTaxTemplates(Pizza.Id)).CalculatePrice(false).Do(2)                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase2,The following statement contains a magic number: var tax5 = TaxTemplateBuilder.Create("%5 Tax").WithRate(5)                                           .CreateAccountTransactionType().WithId(3).Do()                                           .WithRounding(0)                                           .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase2,The following statement contains a magic number: var tax5 = TaxTemplateBuilder.Create("%5 Tax").WithRate(5)                                           .CreateAccountTransactionType().WithId(3).Do()                                           .WithRounding(0)                                           .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase2,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxExcluded()                      .AddOrderFor(Product).WithTaxTemplate(tax5).WithPrice(8.95m).WithQuantity(1).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase2,The following statement contains a magic number: Assert.AreEqual(9.40m' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var tax8 = TaxTemplateBuilder.Create("%8 Tax").WithRate(8)                      .CreateAccountTransactionType().WithId(2).Do()                  .WithRounding(0)                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var tax8 = TaxTemplateBuilder.Create("%8 Tax").WithRate(8)                      .CreateAccountTransactionType().WithId(2).Do()                  .WithRounding(0)                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var tax18 = TaxTemplateBuilder.Create("%18 Tax").WithRate(18)                      .CreateAccountTransactionType().WithId(3).Do()                  .WithRounding(0)                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var tax18 = TaxTemplateBuilder.Create("%18 Tax").WithRate(18)                      .CreateAccountTransactionType().WithId(3).Do()                  .WithRounding(0)                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType' Department.Default).TaxIncluded()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(6).WithQuantity(16).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(3).WithQuantity(10).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(7).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(18).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(5).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(28).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(32).WithQuantity(3).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax8).WithPrice(10).WithQuantity(2).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(9).WithQuantity(1).Do()                  .AddOrderFor(Product).WithTaxTemplate(tax18).WithPrice(105).WithQuantity(2).Do()                  .Build();
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: Assert.AreEqual(715' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: Assert.AreEqual(34.78 + 36.07' ticket.GetTaxTotal());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: Assert.AreEqual(34.78 + 36.07' ticket.GetTaxTotal());
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: Assert.AreEqual(36.07' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: Assert.AreEqual(36.07' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 2).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: Assert.AreEqual(34.78' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount);
Magic Number,Samba.Domain.Tests,TaxTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TaxTests.cs,CanCalculateSampleCase1,The following statement contains a magic number: Assert.AreEqual(34.78' ticket.TransactionDocument.AccountTransactions.Single(x => x.AccountTransactionTypeId == 3).Amount);
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_CreatesTicketWithExchangeRate_ExchangeRateAssigned,The following statement contains a magic number: var ticket = TicketBuilder.Create(context.TicketType' context.Department)                                        .WithExchangeRate(1.1m)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_CreatesTicketWithExchangeRate_ExchangeRateAssigned,The following statement contains a magic number: Assert.AreEqual(1.1m' ticket.ExchangeRate);
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_CreatesTicketWithCalculations_DiscountAdded,The following statement contains a magic number: Assert.AreEqual(10' ticket.Calculations.Sum(x => x.Amount));
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_CreatesOrder_OrderAdded,The following statement contains a magic number: var ticket = TicketBuilder.Create(context.TicketType' context.Department)                                        .AddOrder().ForMenuItem(MenuItemBuilder.Create("Hamburger").AddPortion("Adet"' 10).Build()).Do()                                        .Build();
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_CreatesOrder_OrderAdded,The following statement contains a magic number: Assert.AreEqual(10' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_CreatesOrderWithMenuItem_OrderAdded,The following statement contains a magic number: var ticket = TicketBuilder.Create(context.TicketType' context.Department)                                        .AddOrder()                                          .CreateMenuItem("Hamburger").AddPortion("Adet"' 10).Do()                                        .Do()                                        .Build();
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_CreatesOrderWithMenuItem_OrderAdded,The following statement contains a magic number: Assert.AreEqual(10' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded1,The following statement contains a magic number: var hamburger = MenuItemBuilder.Create("Hamburger").AddPortion("Adet"' 10).Build();
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded1,The following statement contains a magic number: var tost = MenuItemBuilder.Create("Tost").AddPortion("Adet"' 4).Build();
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded1,The following statement contains a magic number: var order2 = OrderBuilder.Create(context.TicketType.SaleTransactionType' context.Department)                                       .ForMenuItem(tost).WithQuantity(2);
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded1,The following statement contains a magic number: Assert.AreEqual(10 + (4 * 2)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded1,The following statement contains a magic number: Assert.AreEqual(10 + (4 * 2)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded1,The following statement contains a magic number: Assert.AreEqual(10 + (4 * 2)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded2,The following statement contains a magic number: var hamburger = MenuItemBuilder.Create("Hamburger").AddPortion("Adet"' 10).Build();
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded2,The following statement contains a magic number: var tost = MenuItemBuilder.Create("Tost").AddPortion("Adet"' 4).Build();
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded2,The following statement contains a magic number: var ticket = TicketBuilder.Create(context.TicketType' context.Department)                                        .AddOrderFor(hamburger).Do()                                        .AddOrderFor(tost).WithQuantity(2).Do()                                        .Build();
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded2,The following statement contains a magic number: Assert.AreEqual(10 + (4 * 2)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded2,The following statement contains a magic number: Assert.AreEqual(10 + (4 * 2)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded2,The following statement contains a magic number: Assert.AreEqual(10 + (4 * 2)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded3,The following statement contains a magic number: var ticket = TicketBuilder.Create(context.TicketType' context.Department)                                        .AddOrder()                                          .CreateMenuItem("Hamburger").AddPortion("Adet"' 10).Do()                                        .Do()                                        .AddOrder()                                          .CreateMenuItem("Tost").AddPortion("Adet"' 4).Do()                                        .WithQuantity(2)                                        .Do()                                        .Build();
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded3,The following statement contains a magic number: var ticket = TicketBuilder.Create(context.TicketType' context.Department)                                        .AddOrder()                                          .CreateMenuItem("Hamburger").AddPortion("Adet"' 10).Do()                                        .Do()                                        .AddOrder()                                          .CreateMenuItem("Tost").AddPortion("Adet"' 4).Do()                                        .WithQuantity(2)                                        .Do()                                        .Build();
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded3,The following statement contains a magic number: var ticket = TicketBuilder.Create(context.TicketType' context.Department)                                        .AddOrder()                                          .CreateMenuItem("Hamburger").AddPortion("Adet"' 10).Do()                                        .Do()                                        .AddOrder()                                          .CreateMenuItem("Tost").AddPortion("Adet"' 4).Do()                                        .WithQuantity(2)                                        .Do()                                        .Build();
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded3,The following statement contains a magic number: Assert.AreEqual(10 + (4 * 2)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded3,The following statement contains a magic number: Assert.AreEqual(10 + (4 * 2)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketBuilderTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,TicketBuilder_AddsOrderWithMultipleMenuItems_OrdersAdded3,The following statement contains a magic number: Assert.AreEqual(10 + (4 * 2)' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketBuilderTestContext,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketBuilderTests.cs,With10PercentDiscount,The following statement contains a magic number: Calculations.Add(new CalculationType              {                  CalculationMethod = 0'                  Amount = 10'                  Name = "%10 Discount"'                  AccountTransactionType = new AccountTransactionType()              });
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanAddOrders,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanAddOrders,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanAddOrders,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanMergeOrders,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanMergeOrders,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanMergeMultipleOrders,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanMergeMultipleOrders,The following statement contains a magic number: var pizza = MenuItemBuilder.Create("Pizza").AddPortion("Adet"' 10).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanMergeMultipleOrders,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .AddOrder().ForMenuItem(pizza).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanMergeMultipleOrders,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .AddOrder().ForMenuItem(pizza).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanMergeMultipleOrders,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanUpdateQuantityOfMergedOrders,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanUpdateQuantityOfMergedOrders,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,CanUpdateQuantityOfMergedOrders,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders[0].Quantity);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentPrice_ShouldSkipMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentPrice_ShouldSkipMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentPrice_ShouldSkipMerge,The following statement contains a magic number: ticket.Orders[0].UpdatePrice(4' "");
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentPrice_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OrdersTagged_ShouldSkipMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OrdersTagged_ShouldSkipMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OrdersTagged_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentOrderStates_ShouldSkipMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentOrderStates_ShouldSkipMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentOrderStates_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentOrderStates_ShouldSkipMerge2,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentOrderStates_ShouldSkipMerge2,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentOrderStates_ShouldSkipMerge2,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentOrderStates_ShouldMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentOrderStates_ShouldMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_SameOrderStates_ShouldMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_SameOrderStates_ShouldMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentOrderQuantites_ShouldSkipMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentOrderQuantites_ShouldSkipMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).WithQuantity(2).Do()                                        .AddOrder().ForMenuItem(kola).WithQuantity(1).Do()                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_DifferentOrderQuantites_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OneOrderLocked_ShouldSkipMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OneOrderLocked_ShouldSkipMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OneOrderLocked_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OneOrderIsGift_ShouldSkipMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OneOrderIsGift_ShouldSkipMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OneOrderIsGift_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OneOrderPortionDifferent_ShouldSkipMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).AddPortion("Büyük"' 6).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OneOrderPortionDifferent_ShouldSkipMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).AddPortion("Büyük"' 6).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OneOrderPortionDifferent_ShouldSkipMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OneOrderPortionDifferent_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeOrders_OneOrderPortionDifferent_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(11' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_OneOrderLocked_ShouldSkipMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_OneOrderLocked_ShouldSkipMerge,The following statement contains a magic number: var pizza = MenuItemBuilder.Create("Pizza").AddPortion("Adet"' 10).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_OneOrderLocked_ShouldSkipMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .AddOrder().ForMenuItem(pizza).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_OneOrderLocked_ShouldSkipMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do(2)                                        .AddOrder().ForMenuItem(pizza).Do(2)                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_OneOrderLocked_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(3' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_OneOrderLocked_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(30' ticket.GetSum());
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_DifferentOrders_ShouldSkipMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_DifferentOrders_ShouldSkipMerge,The following statement contains a magic number: var pizza = MenuItemBuilder.Create("Pizza").WithId(2).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_DifferentOrders_ShouldSkipMerge,The following statement contains a magic number: var pizza = MenuItemBuilder.Create("Pizza").WithId(2).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_DifferentOrders_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(2' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_DifferentOrderQuantities_ShouldSkipMerge,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_DifferentOrderQuantities_ShouldSkipMerge,The following statement contains a magic number: var pizza = MenuItemBuilder.Create("Pizza").WithId(2).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_DifferentOrderQuantities_ShouldSkipMerge,The following statement contains a magic number: var pizza = MenuItemBuilder.Create("Pizza").WithId(2).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_DifferentOrderQuantities_ShouldSkipMerge,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).Do()                                        .AddOrder().ForMenuItem(kola).Do()                                        .AddOrder().ForMenuItem(kola).WithQuantity(2).Do()                                        .AddOrder().ForMenuItem(pizza).Do()                                        .AddOrder().ForMenuItem(pizza).Do()                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,MergeMultipleOrders_DifferentOrderQuantities_ShouldSkipMerge,The following statement contains a magic number: Assert.AreEqual(4' ticket.Orders.Count);
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMergerMerges_CanCompareOrders,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithDifferentQuantity_ReturnsFalse,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithDifferentQuantity_ReturnsFalse,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).WithQuantity(2).Do()                                        .AddOrder().ForMenuItem(kola).Do()                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithDifferentPrice_ReturnsFalse,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithDifferentPrice_ReturnsFalse,The following statement contains a magic number: var ticket = TicketBuilder.Create(TicketType.Default' Department.Default)                                        .AddOrder().ForMenuItem(kola).WithPrice(3).Do()                                        .AddOrder().ForMenuItem(kola).Do()                                        .Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithDifferentPortions_ReturnsFalse,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).AddPortion("Büyük"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithDifferentPortions_ReturnsFalse,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).AddPortion("Büyük"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithOneOfThemGift_ReturnsFalse,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).AddPortion("Büyük"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithOneOfThemGift_ReturnsFalse,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).AddPortion("Büyük"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithDifferentMenuItemId_ReturnsFalse,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithDifferentMenuItemId_ReturnsFalse,The following statement contains a magic number: var pizza = MenuItemBuilder.Create("Pizza").WithId(2).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithDifferentMenuItemId_ReturnsFalse,The following statement contains a magic number: var pizza = MenuItemBuilder.Create("Pizza").WithId(2).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithDifferentOrderTags_ReturnsFalse,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithSameOrderStates_ReturnsTrue,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).Build();
Magic Number,Samba.Domain.Tests,TicketMergeTests,D:\research\architectureSmells\repos\emreeren_SambaPOS-3\Samba.Domain.Tests\TicketMergeTests.cs,OrderMerge_CanCompareOrdersWithDifferentOrderStates_ReturnsFalse,The following statement contains a magic number: var kola = MenuItemBuilder.Create("Kola").WithId(1).AddPortion("Adet"' 5).Build();
