Implementation smell,Namespace,Class,File,Method,Description
Long Method,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,CreateData,The method has 390 lines of code.
Long Method,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GenerateSystemRules,The method has 457 lines of code.
Complex Method,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateAccounts,Cyclomatic complexity of the method is 9
Complex Method,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,Cyclomatic complexity of the method is 19
Complex Method,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypeDocuments,Cyclomatic complexity of the method is 10
Complex Method,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,CloseTicket,Cyclomatic complexity of the method is 8
Complex Method,Samba.Presentation.Services.Implementations.WorkPeriodModule,WorkPeriodService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\WorkPeriodModule\WorkPeriodService.cs,StartWorkPeriod,Cyclomatic complexity of the method is 8
Complex Method,Samba.Presentation.Services.Implementations.WorkPeriodModule,WorkPeriodService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\WorkPeriodModule\WorkPeriodService.cs,StopWorkPeriod,Cyclomatic complexity of the method is 8
Long Parameter List,Samba.Presentation.Services,IEntityServiceClient,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\IEntityServiceClient.cs,UpdateEntityState,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services,IEntityServiceClient,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\IEntityServiceClient.cs,UpdateEntityState,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services,ITicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\ITicketService.cs,AddOrder,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services,ITicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\ITicketService.cs,AddPayment,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services,ITicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\ITicketService.cs,UpdateEntity,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services,ITicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\ITicketService.cs,TagOrders,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services,ITicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\ITicketService.cs,UpdateOrderStates,The method has 8 parameters.
Long Parameter List,Samba.Presentation.Services,ITicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\ITicketService.cs,UpdateTicketState,The method has 6 parameters.
Long Parameter List,Samba.Presentation.Services,ITicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\ITicketService.cs,AddAccountTransaction,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services.Implementations.EntityModule,EntityServiceClient,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\EntityModule\EntityServiceClient.cs,UpdateEntityState,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services.Implementations.EntityModule,EntityServiceClient,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\EntityModule\EntityServiceClient.cs,UpdateEntityState,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,TicketService,The method has 9 parameters.
Long Parameter List,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,UpdateEntity,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,AddPayment,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,UpdateTicketState,The method has 6 parameters.
Long Parameter List,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,TagOrders,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,UpdateOrderStates,The method has 8 parameters.
Long Parameter List,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,AddAccountTransaction,The method has 5 parameters.
Long Parameter List,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,AddOrder,The method has 5 parameters.
Long Identifier,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,CreateData,The length of the parameter customerAccountTransactionType is 30.
Long Statement,Samba.Presentation.Services.Common,ExtensionMethods,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\ExtensionMethods.cs,PublishEvent,The length of the statement  "		Application.Current.Dispatcher.BeginInvoke (new PublishEventDelegate<TEventsubject> (Publish)' eventArgs' eventTopic' null); " is 124.
Long Statement,Samba.Presentation.Services.Common,ExtensionMethods,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\ExtensionMethods.cs,PublishIdEvent,The length of the statement  "	Application.Current.Dispatcher.BeginInvoke (new PublishEventDelegate<int> (InternalPublishIdEvent)' id' eventTopic' expectedAction); " is 132.
Long Statement,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,ImportItems,The length of the statement  "	var fileName = string.Format ("{0}\\Imports\\" + typeof(T).Name.ToLower () + "{1}.txt"' LocalSettings.AppPath' "_" + LocalSettings.CurrentLanguage); " is 148.
Long Statement,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GetName,The length of the statement  "		result = string.Format (GetResource (commandName [0]' type)' GetResourceF (commandName [1]' commandName [2]' type)' type); " is 122.
Long Statement,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GenerateSystemRules,The length of the statement  "		EnabledStates = string.Format ("{0}'{1}'{2}'{3}'IsClosed"' Resources.New' Resources.NewOrders' Resources.Unpaid' Resources.Locked)' " is 131.
Long Statement,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GenerateSystemRules,The length of the statement  "		Parameter = Params ().Add ("IncreaseInventory"' "[:Increase]").Add ("DecreaseInventory"' "[:Decrease]").Add ("CalculatePrice"' "[:Calculate Price]").Add ("Locked"' "[:Locked]").ToString ()' " is 189.
Long Statement,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GenerateSystemRules,The length of the statement  "		Parameter = Params ().Add ("StateName"' Resources.Status).Add ("State"' "[:Status]").Add ("CurrentState"' "[:Current Status]").ToString ()' " is 139.
Long Statement,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GenerateSystemRules,The length of the statement  "		Parameter = Params ().Add ("StateName"' "Status").Add ("State"' "[:Status]").Add ("CurrentState"' "[:Current Status]").ToString ()' " is 131.
Long Statement,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GenerateSystemRules,The length of the statement  "		Parameter = Params ().Add ("StateName"' "GStatus").Add ("GroupOrder"' "1").Add ("CurrentState"' "[:Current Status]").Add ("State"' "[:Status]").Add ("StateOrder"' "1").Add ("StateValue"' "[:Value]").ToString ()' " is 211.
Long Statement,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GenerateSystemRules,The length of the statement  "		Parameter = Params ().Add ("PrintJobName"' Resources.PrintOrdersToKitchenPrinter).Add ("OrderStateName"' "Status").Add ("OrderState"' Resources.New).ToString ()' " is 161.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,GetTransactionItems,The length of the statement  "	return _inventoryDao.GetTransactionItems (_applicationState.CurrentWorkPeriod.StartDate' inventoryItem.Id' warehouse.Id); " is 121.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,GetSaleTransactions,The length of the statement  "		var sd = salesData.SingleOrDefault (x => x.MenuItemId == mi.Id && x.MenuItemName == mi.Name && x.PortionName == port.Name) ?? new SalesData (); " is 143.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,AddMissingItems,The length of the statement  "	foreach (var inventoryItem in inventoryItems.Where (inventoryItem => whc.PeriodicConsumptionItems.All (x => x.InventoryItemId != inventoryItem.Id))) { " is 150.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,Filter,The length of the statement  "		var items = warehouseConsumption.PeriodicConsumptionItems.Where (x => x.InStock == 0 && x.Consumption == 0 && x.Added == 0 && x.Removed == 0 && x.PhysicalInventory == null); " is 173.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,Filter,The length of the statement  "		var removingItems = keepMappedItems ? items.Where (x => !ShouldKeep (x' inventoryItems' warehouse)).ToList () : items.ToList (); " is 128.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,GetPreviousPeriodicConsumption,The length of the statement  "	return _applicationState.PreviousWorkPeriod == null ? null : _inventoryDao.GetPeriodicConsumptionByWorkPeriodId (_applicationState.PreviousWorkPeriod.Id); " is 154.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,GetCurrentPeriodicConsumption,The length of the statement  "	var pc = _inventoryDao.GetPeriodicConsumptionByWorkPeriodId (_applicationState.CurrentWorkPeriod.Id) ?? CreateNewPeriodicConsumption (true); " is 140.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,CalculateCost,The length of the statement  "		var recipes = GetSales (workPeriod' warehouseConsumption.WarehouseId).Select (sale => _cacheService.GetRecipe (sale.PortionName' sale.MenuItemId)); " is 147.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,GetInventory,The length of the statement  "		var ppci = _inventoryDao.GetPeriodConsumptionItem (_applicationState.PreviousWorkPeriod.Id' inventoryItem.Id' warehouse.Id); " is 124.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,GetInventory,The length of the statement  "	var positiveSum = transactions.Where (x => x.TargetWarehouseId == warehouse.Id).Sum (y => (y.Quantity * y.Multiplier) / inventoryItem.Multiplier); " is 146.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,GetInventory,The length of the statement  "	var negativeSum = transactions.Where (x => x.SourceWarehouseId == warehouse.Id).Sum (y => (y.Quantity * y.Multiplier) / inventoryItem.Multiplier); " is 146.
Long Statement,Samba.Presentation.Services.Implementations.InventoryModule,InventoryService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\InventoryModule\InventoryService.cs,GetInventory,The length of the statement  "	var cpci = _inventoryDao.GetPeriodConsumptionItem (_applicationState.CurrentWorkPeriod.Id' inventoryItem.Id' warehouse.Id); " is 123.
Long Statement,Samba.Presentation.Services.Implementations,ReportServiceClient,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\ReportServiceClient.cs,PrintAccountScreen,The length of the statement  "	_reportService.PrintAccountScreen (accountScreen' _applicationState.CurrentWorkPeriod' _applicationState.GetReportPrinter ()); " is 126.
Long Statement,Samba.Presentation.Services.Implementations,ReportServiceClient,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\ReportServiceClient.cs,PrintAccountTransactions,The length of the statement  "	_reportService.PrintAccountTransactions (account' _applicationState.CurrentWorkPeriod' _applicationState.GetReportPrinter ()' filter); " is 134.
Long Statement,Samba.Presentation.Services.Implementations.TaskModule.Parsers,ExpressionParser,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TaskModule\Parsers\ExpressionParser.cs,IsDate,The length of the statement  "	return DateTime.TryParseExact (result' CultureInfo.CurrentCulture.DateTimeFormat.GetAllDateTimePatterns ()' CultureInfo.CurrentCulture' DateTimeStyles.AssumeLocal' out dt); " is 172.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,CreateTicket,The length of the statement  "	var account = _cacheService.GetAccountById (_applicationState.CurrentTicketType.SaleTransactionType.DefaultTargetAccountId); " is 124.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,CreateTicket,The length of the statement  "	var result = TicketBuilder.Create (_applicationState.CurrentTicketType' _applicationState.CurrentDepartment.Model).WithExchangeRate (GetExchangeRate (account)).WithCalculations (_applicationState.GetCalculationSelectors ().Where (x => string.IsNullOrEmpty (x.ButtonHeader)).SelectMany (y => y.CalculationTypes)).Build (); " is 321.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,AddChangePayment,The length of the statement  "	ticket.AddChangePayment (paymentType' account' amount' GetExchangeRate (account)' _applicationState.CurrentLoggedInUser.Id); " is 124.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,GetAccountForPayment,The length of the statement  "	var rt = _cacheService.GetEntityTypes ().Where (x => x.AccountTypeId == paymentType.AccountTransactionType.TargetAccountTypeId).Select (x => x.Id); " is 147.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,UpdateTicketNumber,The length of the statement  "		var transaction = ticket.TransactionDocument.AccountTransactions.FirstOrDefault (x => x.AccountTransactionTypeId == ticketType.SaleTransactionType.Id); " is 151.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,MergeTickets,The length of the statement  "	var entitiesUnMatches = ticketList.SelectMany (x => x.TicketEntities).GroupBy (x => x.EntityTypeId).Any (x => x.Select (y => y.EntityId).Distinct ().Count () > 1); " is 163.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,MergeTickets,The length of the statement  "		ticket.AddPayment (_cacheService.GetPaymentTypeById (cp.PaymentTypeId)' account' cp.Amount' GetExchangeRate (account)' cp.UserId); " is 130.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,MergeTickets,The length of the statement  "		ticket.AddChangePayment (_cacheService.GetChangePaymentTypeById (cp.ChangePaymentTypeId)' account' cp.Amount' GetExchangeRate (account)' cp.UserId); " is 148.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,MergeTickets,The length of the statement  "	clonedEntites.ForEach (x => ticket.UpdateEntity (x.EntityTypeId' x.EntityId' x.EntityName' x.AccountTypeId' x.AccountId' x.EntityCustomData)); " is 142.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,RecalculateTicket,The length of the statement  "	ticket.Calculations.Where (x => x.CalculationType == 5).ToList ().ForEach (x => x.Amount = _expressionService.EvalCommand (FunctionNames.Calculation' "_" + x.Name' new { " is 169.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,UpdateTicketState,The length of the statement  "	if (sv != null && sv.StateName == stateName && sv.StateValue == stateValue && sv.State == state && sv.Quantity == QuantityFuncParser.Parse (quantity' sv.Quantity)) " is 163.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,TagOrders,The length of the statement  "		foreach (var order in so.Where (x => x.OrderTagExists (y => y.OrderTagGroupId == orderTagGroup.Id && y.TagValue != orderTag.Name))) { " is 133.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,UntagOrders,The length of the statement  "	foreach (var selectedOrder in selectedOrders.Where (selectedOrder => selectedOrder.UntagIfTagged (orderTagGroup' orderTag))) { " is 126.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,CanDeselectOrder,The length of the statement  "	return ots.Where (x => x.MinSelectedItems > 0).All (orderTagGroup => order.GetOrderTagValues (x => x.OrderTagGroupId == orderTagGroup.Id).Count () >= orderTagGroup.MinSelectedItems); " is 182.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,GetMandantoryOrderTagGroup,The length of the statement  "	return ots.Where (x => x.MinSelectedItems > 0).FirstOrDefault (orderTagGroup => order.GetOrderTagValues (x => x.OrderTagGroupId == orderTagGroup.Id).Count () < orderTagGroup.MinSelectedItems); " is 192.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,RefreshAccountTransactions,The length of the statement  "	foreach (var taxTransactionTemplate in ticket.GetTaxIds ().Select (x => _cacheService.GetAccountTransactionTypeById (x))) { " is 123.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,RefreshAccountTransactions,The length of the statement  "		ticket.TransactionDocument.AddSingletonTransaction (taxTransactionTemplate.Id' taxTransactionTemplate' ticket.GetTicketAccounts ()); " is 132.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,ChangeOrdersAccountTransactionTypeId,The length of the statement  "	accountTransactionTypeIds.Where (x => so.All (y => y.AccountTransactionTypeId != x)).ToList ().ForEach (x => ticket.TransactionDocument.AccountTransactions.Where (y => y.AccountTransactionTypeId == x).ToList ().ForEach (y => ticket.TransactionDocument.AccountTransactions.Remove (y))); " is 285.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,AddAccountTransaction,The length of the statement  "	var transactionType = _cacheService.FindAccountTransactionType (sourceAccount.AccountTypeId' targetAccount.AccountTypeId' sourceAccount.Id' targetAccount.Id); " is 158.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,AddAccountTransaction,The length of the statement  "		var transaction = ticket.TransactionDocument.AddNewTransaction (transactionType' ticket.GetTicketAccounts ()' amount' exchangeRate); " is 132.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,AddAccountTransaction,The length of the statement  "		transaction.UpdateDescription (string.Format ("{0} - {1}: {2}"' transaction.Name' Resources.TicketNumber' ticket.TicketNumber)); " is 128.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,UpdateOrderPrice,The length of the statement  "		var portion = !string.IsNullOrEmpty (portionName) ? mi.Portions.FirstOrDefault (x => x.Name == portionName) : mi.Portions.First (); " is 131.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,AddOrder,The length of the statement  "	var order = ticket.AddOrder (_applicationState.CurrentTicketType.SaleTransactionType' _applicationState.CurrentDepartment.Model' _applicationState.CurrentLoggedInUser.Name' menuItem' _applicationState.GetTaxTemplates (menuItem.Id).ToList ()' portion' priceTag' productTimer); " is 275.
Long Statement,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,AddOrder,The length of the statement  "	order.Quantity = quantity > 9 ? decimal.Round (quantity / portion.Multiplier' 3' MidpointRounding.AwayFromZero) : quantity; " is 123.
Complex Conditional,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,UpdateTicketState,The conditional expression  "sv != null && sv.StateName == stateName && sv.StateValue == stateValue && sv.State == state && sv.Quantity == QuantityFuncParser.Parse (quantity' sv.Quantity)"  is complex.
Virtual Method Call from Constructor,Samba.Presentation.Services.Common,AbstractService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\AbstractService.cs,AbstractService,The constructor "AbstractService" calls a virtual method "Reset".
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,CreateData,The following statement contains a magic number: accountScreen.AccountScreenValues.Add (new AccountScreenValue {  	AccountTypeName = saleAccountType.Name'  	AccountTypeId = saleAccountType.Id'  	DisplayDetails = true'  	SortOrder = 10  });  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,CreateData,The following statement contains a magic number: accountScreen.AccountScreenValues.Add (new AccountScreenValue {  	AccountTypeName = receivableAccountType.Name'  	AccountTypeId = receivableAccountType.Id'  	DisplayDetails = true'  	SortOrder = 20  });  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,CreateData,The following statement contains a magic number: accountScreen.AccountScreenValues.Add (new AccountScreenValue {  	AccountTypeName = discountAccountType.Name'  	AccountTypeId = discountAccountType.Id'  	DisplayDetails = true'  	SortOrder = 30  });  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,CreateData,The following statement contains a magic number: accountScreen.AccountScreenValues.Add (new AccountScreenValue {  	AccountTypeName = paymentAccountType.Name'  	AccountTypeId = paymentAccountType.Id'  	DisplayDetails = true'  	SortOrder = 40  });  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,CreateData,The following statement contains a magic number: ticketType.EntityTypeAssignments.Add (new EntityTypeAssignment {  	EntityTypeId = tableEntityType.Id'  	EntityTypeName = tableEntityType.Name'  	SortOrder = 10  });  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,CreateData,The following statement contains a magic number: ticketType.EntityTypeAssignments.Add (new EntityTypeAssignment {  	EntityTypeId = customerEntityType.Id'  	EntityTypeName = customerEntityType.Name'  	SortOrder = 20  });  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (values.Length > 0) {  	foreach (var item in values) {  		var parts = item.Split (';');  		if (parts.Count () > 2) {  			var name = parts [0].Trim ();  			if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  				continue;  			var sTempName = parts [1].Trim ();  			var tTempName = parts [2].Trim ();  			var dsa = parts.Length > 2 ? parts [3].Trim () : "";  			var dta = parts.Length > 3 ? parts [4].Trim () : "";  			var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  			if (sAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sAccTemplate = new AccountType {  						Name = sTempName  					};  					w.Add (sAccTemplate);  					w.CommitChanges ();  				}  			}  			var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  			if (tAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					tAccTemplate = new AccountType {  						Name = tTempName  					};  					w.Add (tAccTemplate);  					w.CommitChanges ();  				}  			}  			var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dsa) && sa == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sa = new Account {  						Name = dsa'  						AccountTypeId = sAccTemplate.Id  					};  					w.Add (sa);  					w.CommitChanges ();  				}  			}  			var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dta) && ta == null) {  				using (var w = WorkspaceFactory.Create ()) {  					ta = new Account {  						Name = dta'  						AccountTypeId = tAccTemplate.Id  					};  					w.Add (ta);  					w.CommitChanges ();  				}  			}  			var resultItem = new AccountTransactionType {  				Name = name'  				SourceAccountTypeId = sAccTemplate.Id'  				TargetAccountTypeId = tAccTemplate.Id  			};  			if (sa != null)  				resultItem.DefaultSourceAccountId = sa.Id;  			if (ta != null)  				resultItem.DefaultTargetAccountId = ta.Id;  			result.Add (resultItem);  		}  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (values.Length > 0) {  	foreach (var item in values) {  		var parts = item.Split (';');  		if (parts.Count () > 2) {  			var name = parts [0].Trim ();  			if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  				continue;  			var sTempName = parts [1].Trim ();  			var tTempName = parts [2].Trim ();  			var dsa = parts.Length > 2 ? parts [3].Trim () : "";  			var dta = parts.Length > 3 ? parts [4].Trim () : "";  			var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  			if (sAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sAccTemplate = new AccountType {  						Name = sTempName  					};  					w.Add (sAccTemplate);  					w.CommitChanges ();  				}  			}  			var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  			if (tAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					tAccTemplate = new AccountType {  						Name = tTempName  					};  					w.Add (tAccTemplate);  					w.CommitChanges ();  				}  			}  			var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dsa) && sa == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sa = new Account {  						Name = dsa'  						AccountTypeId = sAccTemplate.Id  					};  					w.Add (sa);  					w.CommitChanges ();  				}  			}  			var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dta) && ta == null) {  				using (var w = WorkspaceFactory.Create ()) {  					ta = new Account {  						Name = dta'  						AccountTypeId = tAccTemplate.Id  					};  					w.Add (ta);  					w.CommitChanges ();  				}  			}  			var resultItem = new AccountTransactionType {  				Name = name'  				SourceAccountTypeId = sAccTemplate.Id'  				TargetAccountTypeId = tAccTemplate.Id  			};  			if (sa != null)  				resultItem.DefaultSourceAccountId = sa.Id;  			if (ta != null)  				resultItem.DefaultTargetAccountId = ta.Id;  			result.Add (resultItem);  		}  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (values.Length > 0) {  	foreach (var item in values) {  		var parts = item.Split (';');  		if (parts.Count () > 2) {  			var name = parts [0].Trim ();  			if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  				continue;  			var sTempName = parts [1].Trim ();  			var tTempName = parts [2].Trim ();  			var dsa = parts.Length > 2 ? parts [3].Trim () : "";  			var dta = parts.Length > 3 ? parts [4].Trim () : "";  			var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  			if (sAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sAccTemplate = new AccountType {  						Name = sTempName  					};  					w.Add (sAccTemplate);  					w.CommitChanges ();  				}  			}  			var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  			if (tAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					tAccTemplate = new AccountType {  						Name = tTempName  					};  					w.Add (tAccTemplate);  					w.CommitChanges ();  				}  			}  			var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dsa) && sa == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sa = new Account {  						Name = dsa'  						AccountTypeId = sAccTemplate.Id  					};  					w.Add (sa);  					w.CommitChanges ();  				}  			}  			var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dta) && ta == null) {  				using (var w = WorkspaceFactory.Create ()) {  					ta = new Account {  						Name = dta'  						AccountTypeId = tAccTemplate.Id  					};  					w.Add (ta);  					w.CommitChanges ();  				}  			}  			var resultItem = new AccountTransactionType {  				Name = name'  				SourceAccountTypeId = sAccTemplate.Id'  				TargetAccountTypeId = tAccTemplate.Id  			};  			if (sa != null)  				resultItem.DefaultSourceAccountId = sa.Id;  			if (ta != null)  				resultItem.DefaultTargetAccountId = ta.Id;  			result.Add (resultItem);  		}  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (values.Length > 0) {  	foreach (var item in values) {  		var parts = item.Split (';');  		if (parts.Count () > 2) {  			var name = parts [0].Trim ();  			if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  				continue;  			var sTempName = parts [1].Trim ();  			var tTempName = parts [2].Trim ();  			var dsa = parts.Length > 2 ? parts [3].Trim () : "";  			var dta = parts.Length > 3 ? parts [4].Trim () : "";  			var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  			if (sAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sAccTemplate = new AccountType {  						Name = sTempName  					};  					w.Add (sAccTemplate);  					w.CommitChanges ();  				}  			}  			var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  			if (tAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					tAccTemplate = new AccountType {  						Name = tTempName  					};  					w.Add (tAccTemplate);  					w.CommitChanges ();  				}  			}  			var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dsa) && sa == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sa = new Account {  						Name = dsa'  						AccountTypeId = sAccTemplate.Id  					};  					w.Add (sa);  					w.CommitChanges ();  				}  			}  			var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dta) && ta == null) {  				using (var w = WorkspaceFactory.Create ()) {  					ta = new Account {  						Name = dta'  						AccountTypeId = tAccTemplate.Id  					};  					w.Add (ta);  					w.CommitChanges ();  				}  			}  			var resultItem = new AccountTransactionType {  				Name = name'  				SourceAccountTypeId = sAccTemplate.Id'  				TargetAccountTypeId = tAccTemplate.Id  			};  			if (sa != null)  				resultItem.DefaultSourceAccountId = sa.Id;  			if (ta != null)  				resultItem.DefaultTargetAccountId = ta.Id;  			result.Add (resultItem);  		}  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (values.Length > 0) {  	foreach (var item in values) {  		var parts = item.Split (';');  		if (parts.Count () > 2) {  			var name = parts [0].Trim ();  			if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  				continue;  			var sTempName = parts [1].Trim ();  			var tTempName = parts [2].Trim ();  			var dsa = parts.Length > 2 ? parts [3].Trim () : "";  			var dta = parts.Length > 3 ? parts [4].Trim () : "";  			var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  			if (sAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sAccTemplate = new AccountType {  						Name = sTempName  					};  					w.Add (sAccTemplate);  					w.CommitChanges ();  				}  			}  			var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  			if (tAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					tAccTemplate = new AccountType {  						Name = tTempName  					};  					w.Add (tAccTemplate);  					w.CommitChanges ();  				}  			}  			var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dsa) && sa == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sa = new Account {  						Name = dsa'  						AccountTypeId = sAccTemplate.Id  					};  					w.Add (sa);  					w.CommitChanges ();  				}  			}  			var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dta) && ta == null) {  				using (var w = WorkspaceFactory.Create ()) {  					ta = new Account {  						Name = dta'  						AccountTypeId = tAccTemplate.Id  					};  					w.Add (ta);  					w.CommitChanges ();  				}  			}  			var resultItem = new AccountTransactionType {  				Name = name'  				SourceAccountTypeId = sAccTemplate.Id'  				TargetAccountTypeId = tAccTemplate.Id  			};  			if (sa != null)  				resultItem.DefaultSourceAccountId = sa.Id;  			if (ta != null)  				resultItem.DefaultTargetAccountId = ta.Id;  			result.Add (resultItem);  		}  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (values.Length > 0) {  	foreach (var item in values) {  		var parts = item.Split (';');  		if (parts.Count () > 2) {  			var name = parts [0].Trim ();  			if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  				continue;  			var sTempName = parts [1].Trim ();  			var tTempName = parts [2].Trim ();  			var dsa = parts.Length > 2 ? parts [3].Trim () : "";  			var dta = parts.Length > 3 ? parts [4].Trim () : "";  			var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  			if (sAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sAccTemplate = new AccountType {  						Name = sTempName  					};  					w.Add (sAccTemplate);  					w.CommitChanges ();  				}  			}  			var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  			if (tAccTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					tAccTemplate = new AccountType {  						Name = tTempName  					};  					w.Add (tAccTemplate);  					w.CommitChanges ();  				}  			}  			var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dsa) && sa == null) {  				using (var w = WorkspaceFactory.Create ()) {  					sa = new Account {  						Name = dsa'  						AccountTypeId = sAccTemplate.Id  					};  					w.Add (sa);  					w.CommitChanges ();  				}  			}  			var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  			if (!string.IsNullOrEmpty (dta) && ta == null) {  				using (var w = WorkspaceFactory.Create ()) {  					ta = new Account {  						Name = dta'  						AccountTypeId = tAccTemplate.Id  					};  					w.Add (ta);  					w.CommitChanges ();  				}  			}  			var resultItem = new AccountTransactionType {  				Name = name'  				SourceAccountTypeId = sAccTemplate.Id'  				TargetAccountTypeId = tAccTemplate.Id  			};  			if (sa != null)  				resultItem.DefaultSourceAccountId = sa.Id;  			if (ta != null)  				resultItem.DefaultTargetAccountId = ta.Id;  			result.Add (resultItem);  		}  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: foreach (var item in values) {  	var parts = item.Split (';');  	if (parts.Count () > 2) {  		var name = parts [0].Trim ();  		if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  			continue;  		var sTempName = parts [1].Trim ();  		var tTempName = parts [2].Trim ();  		var dsa = parts.Length > 2 ? parts [3].Trim () : "";  		var dta = parts.Length > 3 ? parts [4].Trim () : "";  		var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  		if (sAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sAccTemplate = new AccountType {  					Name = sTempName  				};  				w.Add (sAccTemplate);  				w.CommitChanges ();  			}  		}  		var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  		if (tAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				tAccTemplate = new AccountType {  					Name = tTempName  				};  				w.Add (tAccTemplate);  				w.CommitChanges ();  			}  		}  		var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dsa) && sa == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sa = new Account {  					Name = dsa'  					AccountTypeId = sAccTemplate.Id  				};  				w.Add (sa);  				w.CommitChanges ();  			}  		}  		var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dta) && ta == null) {  			using (var w = WorkspaceFactory.Create ()) {  				ta = new Account {  					Name = dta'  					AccountTypeId = tAccTemplate.Id  				};  				w.Add (ta);  				w.CommitChanges ();  			}  		}  		var resultItem = new AccountTransactionType {  			Name = name'  			SourceAccountTypeId = sAccTemplate.Id'  			TargetAccountTypeId = tAccTemplate.Id  		};  		if (sa != null)  			resultItem.DefaultSourceAccountId = sa.Id;  		if (ta != null)  			resultItem.DefaultTargetAccountId = ta.Id;  		result.Add (resultItem);  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: foreach (var item in values) {  	var parts = item.Split (';');  	if (parts.Count () > 2) {  		var name = parts [0].Trim ();  		if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  			continue;  		var sTempName = parts [1].Trim ();  		var tTempName = parts [2].Trim ();  		var dsa = parts.Length > 2 ? parts [3].Trim () : "";  		var dta = parts.Length > 3 ? parts [4].Trim () : "";  		var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  		if (sAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sAccTemplate = new AccountType {  					Name = sTempName  				};  				w.Add (sAccTemplate);  				w.CommitChanges ();  			}  		}  		var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  		if (tAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				tAccTemplate = new AccountType {  					Name = tTempName  				};  				w.Add (tAccTemplate);  				w.CommitChanges ();  			}  		}  		var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dsa) && sa == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sa = new Account {  					Name = dsa'  					AccountTypeId = sAccTemplate.Id  				};  				w.Add (sa);  				w.CommitChanges ();  			}  		}  		var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dta) && ta == null) {  			using (var w = WorkspaceFactory.Create ()) {  				ta = new Account {  					Name = dta'  					AccountTypeId = tAccTemplate.Id  				};  				w.Add (ta);  				w.CommitChanges ();  			}  		}  		var resultItem = new AccountTransactionType {  			Name = name'  			SourceAccountTypeId = sAccTemplate.Id'  			TargetAccountTypeId = tAccTemplate.Id  		};  		if (sa != null)  			resultItem.DefaultSourceAccountId = sa.Id;  		if (ta != null)  			resultItem.DefaultTargetAccountId = ta.Id;  		result.Add (resultItem);  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: foreach (var item in values) {  	var parts = item.Split (';');  	if (parts.Count () > 2) {  		var name = parts [0].Trim ();  		if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  			continue;  		var sTempName = parts [1].Trim ();  		var tTempName = parts [2].Trim ();  		var dsa = parts.Length > 2 ? parts [3].Trim () : "";  		var dta = parts.Length > 3 ? parts [4].Trim () : "";  		var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  		if (sAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sAccTemplate = new AccountType {  					Name = sTempName  				};  				w.Add (sAccTemplate);  				w.CommitChanges ();  			}  		}  		var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  		if (tAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				tAccTemplate = new AccountType {  					Name = tTempName  				};  				w.Add (tAccTemplate);  				w.CommitChanges ();  			}  		}  		var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dsa) && sa == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sa = new Account {  					Name = dsa'  					AccountTypeId = sAccTemplate.Id  				};  				w.Add (sa);  				w.CommitChanges ();  			}  		}  		var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dta) && ta == null) {  			using (var w = WorkspaceFactory.Create ()) {  				ta = new Account {  					Name = dta'  					AccountTypeId = tAccTemplate.Id  				};  				w.Add (ta);  				w.CommitChanges ();  			}  		}  		var resultItem = new AccountTransactionType {  			Name = name'  			SourceAccountTypeId = sAccTemplate.Id'  			TargetAccountTypeId = tAccTemplate.Id  		};  		if (sa != null)  			resultItem.DefaultSourceAccountId = sa.Id;  		if (ta != null)  			resultItem.DefaultTargetAccountId = ta.Id;  		result.Add (resultItem);  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: foreach (var item in values) {  	var parts = item.Split (';');  	if (parts.Count () > 2) {  		var name = parts [0].Trim ();  		if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  			continue;  		var sTempName = parts [1].Trim ();  		var tTempName = parts [2].Trim ();  		var dsa = parts.Length > 2 ? parts [3].Trim () : "";  		var dta = parts.Length > 3 ? parts [4].Trim () : "";  		var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  		if (sAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sAccTemplate = new AccountType {  					Name = sTempName  				};  				w.Add (sAccTemplate);  				w.CommitChanges ();  			}  		}  		var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  		if (tAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				tAccTemplate = new AccountType {  					Name = tTempName  				};  				w.Add (tAccTemplate);  				w.CommitChanges ();  			}  		}  		var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dsa) && sa == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sa = new Account {  					Name = dsa'  					AccountTypeId = sAccTemplate.Id  				};  				w.Add (sa);  				w.CommitChanges ();  			}  		}  		var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dta) && ta == null) {  			using (var w = WorkspaceFactory.Create ()) {  				ta = new Account {  					Name = dta'  					AccountTypeId = tAccTemplate.Id  				};  				w.Add (ta);  				w.CommitChanges ();  			}  		}  		var resultItem = new AccountTransactionType {  			Name = name'  			SourceAccountTypeId = sAccTemplate.Id'  			TargetAccountTypeId = tAccTemplate.Id  		};  		if (sa != null)  			resultItem.DefaultSourceAccountId = sa.Id;  		if (ta != null)  			resultItem.DefaultTargetAccountId = ta.Id;  		result.Add (resultItem);  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: foreach (var item in values) {  	var parts = item.Split (';');  	if (parts.Count () > 2) {  		var name = parts [0].Trim ();  		if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  			continue;  		var sTempName = parts [1].Trim ();  		var tTempName = parts [2].Trim ();  		var dsa = parts.Length > 2 ? parts [3].Trim () : "";  		var dta = parts.Length > 3 ? parts [4].Trim () : "";  		var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  		if (sAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sAccTemplate = new AccountType {  					Name = sTempName  				};  				w.Add (sAccTemplate);  				w.CommitChanges ();  			}  		}  		var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  		if (tAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				tAccTemplate = new AccountType {  					Name = tTempName  				};  				w.Add (tAccTemplate);  				w.CommitChanges ();  			}  		}  		var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dsa) && sa == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sa = new Account {  					Name = dsa'  					AccountTypeId = sAccTemplate.Id  				};  				w.Add (sa);  				w.CommitChanges ();  			}  		}  		var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dta) && ta == null) {  			using (var w = WorkspaceFactory.Create ()) {  				ta = new Account {  					Name = dta'  					AccountTypeId = tAccTemplate.Id  				};  				w.Add (ta);  				w.CommitChanges ();  			}  		}  		var resultItem = new AccountTransactionType {  			Name = name'  			SourceAccountTypeId = sAccTemplate.Id'  			TargetAccountTypeId = tAccTemplate.Id  		};  		if (sa != null)  			resultItem.DefaultSourceAccountId = sa.Id;  		if (ta != null)  			resultItem.DefaultTargetAccountId = ta.Id;  		result.Add (resultItem);  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: foreach (var item in values) {  	var parts = item.Split (';');  	if (parts.Count () > 2) {  		var name = parts [0].Trim ();  		if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  			continue;  		var sTempName = parts [1].Trim ();  		var tTempName = parts [2].Trim ();  		var dsa = parts.Length > 2 ? parts [3].Trim () : "";  		var dta = parts.Length > 3 ? parts [4].Trim () : "";  		var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  		if (sAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sAccTemplate = new AccountType {  					Name = sTempName  				};  				w.Add (sAccTemplate);  				w.CommitChanges ();  			}  		}  		var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  		if (tAccTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				tAccTemplate = new AccountType {  					Name = tTempName  				};  				w.Add (tAccTemplate);  				w.CommitChanges ();  			}  		}  		var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dsa) && sa == null) {  			using (var w = WorkspaceFactory.Create ()) {  				sa = new Account {  					Name = dsa'  					AccountTypeId = sAccTemplate.Id  				};  				w.Add (sa);  				w.CommitChanges ();  			}  		}  		var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  		if (!string.IsNullOrEmpty (dta) && ta == null) {  			using (var w = WorkspaceFactory.Create ()) {  				ta = new Account {  					Name = dta'  					AccountTypeId = tAccTemplate.Id  				};  				w.Add (ta);  				w.CommitChanges ();  			}  		}  		var resultItem = new AccountTransactionType {  			Name = name'  			SourceAccountTypeId = sAccTemplate.Id'  			TargetAccountTypeId = tAccTemplate.Id  		};  		if (sa != null)  			resultItem.DefaultSourceAccountId = sa.Id;  		if (ta != null)  			resultItem.DefaultTargetAccountId = ta.Id;  		result.Add (resultItem);  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (parts.Count () > 2) {  	var name = parts [0].Trim ();  	if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  		continue;  	var sTempName = parts [1].Trim ();  	var tTempName = parts [2].Trim ();  	var dsa = parts.Length > 2 ? parts [3].Trim () : "";  	var dta = parts.Length > 3 ? parts [4].Trim () : "";  	var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  	if (sAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sAccTemplate = new AccountType {  				Name = sTempName  			};  			w.Add (sAccTemplate);  			w.CommitChanges ();  		}  	}  	var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  	if (tAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			tAccTemplate = new AccountType {  				Name = tTempName  			};  			w.Add (tAccTemplate);  			w.CommitChanges ();  		}  	}  	var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dsa) && sa == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sa = new Account {  				Name = dsa'  				AccountTypeId = sAccTemplate.Id  			};  			w.Add (sa);  			w.CommitChanges ();  		}  	}  	var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dta) && ta == null) {  		using (var w = WorkspaceFactory.Create ()) {  			ta = new Account {  				Name = dta'  				AccountTypeId = tAccTemplate.Id  			};  			w.Add (ta);  			w.CommitChanges ();  		}  	}  	var resultItem = new AccountTransactionType {  		Name = name'  		SourceAccountTypeId = sAccTemplate.Id'  		TargetAccountTypeId = tAccTemplate.Id  	};  	if (sa != null)  		resultItem.DefaultSourceAccountId = sa.Id;  	if (ta != null)  		resultItem.DefaultTargetAccountId = ta.Id;  	result.Add (resultItem);  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (parts.Count () > 2) {  	var name = parts [0].Trim ();  	if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  		continue;  	var sTempName = parts [1].Trim ();  	var tTempName = parts [2].Trim ();  	var dsa = parts.Length > 2 ? parts [3].Trim () : "";  	var dta = parts.Length > 3 ? parts [4].Trim () : "";  	var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  	if (sAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sAccTemplate = new AccountType {  				Name = sTempName  			};  			w.Add (sAccTemplate);  			w.CommitChanges ();  		}  	}  	var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  	if (tAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			tAccTemplate = new AccountType {  				Name = tTempName  			};  			w.Add (tAccTemplate);  			w.CommitChanges ();  		}  	}  	var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dsa) && sa == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sa = new Account {  				Name = dsa'  				AccountTypeId = sAccTemplate.Id  			};  			w.Add (sa);  			w.CommitChanges ();  		}  	}  	var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dta) && ta == null) {  		using (var w = WorkspaceFactory.Create ()) {  			ta = new Account {  				Name = dta'  				AccountTypeId = tAccTemplate.Id  			};  			w.Add (ta);  			w.CommitChanges ();  		}  	}  	var resultItem = new AccountTransactionType {  		Name = name'  		SourceAccountTypeId = sAccTemplate.Id'  		TargetAccountTypeId = tAccTemplate.Id  	};  	if (sa != null)  		resultItem.DefaultSourceAccountId = sa.Id;  	if (ta != null)  		resultItem.DefaultTargetAccountId = ta.Id;  	result.Add (resultItem);  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (parts.Count () > 2) {  	var name = parts [0].Trim ();  	if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  		continue;  	var sTempName = parts [1].Trim ();  	var tTempName = parts [2].Trim ();  	var dsa = parts.Length > 2 ? parts [3].Trim () : "";  	var dta = parts.Length > 3 ? parts [4].Trim () : "";  	var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  	if (sAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sAccTemplate = new AccountType {  				Name = sTempName  			};  			w.Add (sAccTemplate);  			w.CommitChanges ();  		}  	}  	var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  	if (tAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			tAccTemplate = new AccountType {  				Name = tTempName  			};  			w.Add (tAccTemplate);  			w.CommitChanges ();  		}  	}  	var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dsa) && sa == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sa = new Account {  				Name = dsa'  				AccountTypeId = sAccTemplate.Id  			};  			w.Add (sa);  			w.CommitChanges ();  		}  	}  	var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dta) && ta == null) {  		using (var w = WorkspaceFactory.Create ()) {  			ta = new Account {  				Name = dta'  				AccountTypeId = tAccTemplate.Id  			};  			w.Add (ta);  			w.CommitChanges ();  		}  	}  	var resultItem = new AccountTransactionType {  		Name = name'  		SourceAccountTypeId = sAccTemplate.Id'  		TargetAccountTypeId = tAccTemplate.Id  	};  	if (sa != null)  		resultItem.DefaultSourceAccountId = sa.Id;  	if (ta != null)  		resultItem.DefaultTargetAccountId = ta.Id;  	result.Add (resultItem);  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (parts.Count () > 2) {  	var name = parts [0].Trim ();  	if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  		continue;  	var sTempName = parts [1].Trim ();  	var tTempName = parts [2].Trim ();  	var dsa = parts.Length > 2 ? parts [3].Trim () : "";  	var dta = parts.Length > 3 ? parts [4].Trim () : "";  	var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  	if (sAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sAccTemplate = new AccountType {  				Name = sTempName  			};  			w.Add (sAccTemplate);  			w.CommitChanges ();  		}  	}  	var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  	if (tAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			tAccTemplate = new AccountType {  				Name = tTempName  			};  			w.Add (tAccTemplate);  			w.CommitChanges ();  		}  	}  	var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dsa) && sa == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sa = new Account {  				Name = dsa'  				AccountTypeId = sAccTemplate.Id  			};  			w.Add (sa);  			w.CommitChanges ();  		}  	}  	var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dta) && ta == null) {  		using (var w = WorkspaceFactory.Create ()) {  			ta = new Account {  				Name = dta'  				AccountTypeId = tAccTemplate.Id  			};  			w.Add (ta);  			w.CommitChanges ();  		}  	}  	var resultItem = new AccountTransactionType {  		Name = name'  		SourceAccountTypeId = sAccTemplate.Id'  		TargetAccountTypeId = tAccTemplate.Id  	};  	if (sa != null)  		resultItem.DefaultSourceAccountId = sa.Id;  	if (ta != null)  		resultItem.DefaultTargetAccountId = ta.Id;  	result.Add (resultItem);  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (parts.Count () > 2) {  	var name = parts [0].Trim ();  	if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  		continue;  	var sTempName = parts [1].Trim ();  	var tTempName = parts [2].Trim ();  	var dsa = parts.Length > 2 ? parts [3].Trim () : "";  	var dta = parts.Length > 3 ? parts [4].Trim () : "";  	var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  	if (sAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sAccTemplate = new AccountType {  				Name = sTempName  			};  			w.Add (sAccTemplate);  			w.CommitChanges ();  		}  	}  	var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  	if (tAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			tAccTemplate = new AccountType {  				Name = tTempName  			};  			w.Add (tAccTemplate);  			w.CommitChanges ();  		}  	}  	var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dsa) && sa == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sa = new Account {  				Name = dsa'  				AccountTypeId = sAccTemplate.Id  			};  			w.Add (sa);  			w.CommitChanges ();  		}  	}  	var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dta) && ta == null) {  		using (var w = WorkspaceFactory.Create ()) {  			ta = new Account {  				Name = dta'  				AccountTypeId = tAccTemplate.Id  			};  			w.Add (ta);  			w.CommitChanges ();  		}  	}  	var resultItem = new AccountTransactionType {  		Name = name'  		SourceAccountTypeId = sAccTemplate.Id'  		TargetAccountTypeId = tAccTemplate.Id  	};  	if (sa != null)  		resultItem.DefaultSourceAccountId = sa.Id;  	if (ta != null)  		resultItem.DefaultTargetAccountId = ta.Id;  	result.Add (resultItem);  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypes,The following statement contains a magic number: if (parts.Count () > 2) {  	var name = parts [0].Trim ();  	if (workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == name.ToLower ()) != null)  		continue;  	var sTempName = parts [1].Trim ();  	var tTempName = parts [2].Trim ();  	var dsa = parts.Length > 2 ? parts [3].Trim () : "";  	var dta = parts.Length > 3 ? parts [4].Trim () : "";  	var sAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == sTempName.ToLower ());  	if (sAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sAccTemplate = new AccountType {  				Name = sTempName  			};  			w.Add (sAccTemplate);  			w.CommitChanges ();  		}  	}  	var tAccTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == tTempName.ToLower ());  	if (tAccTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			tAccTemplate = new AccountType {  				Name = tTempName  			};  			w.Add (tAccTemplate);  			w.CommitChanges ();  		}  	}  	var sa = !string.IsNullOrEmpty (dsa) ? workspace.Single<Account> (x => x.Name.ToLower () == dsa.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dsa) && sa == null) {  		using (var w = WorkspaceFactory.Create ()) {  			sa = new Account {  				Name = dsa'  				AccountTypeId = sAccTemplate.Id  			};  			w.Add (sa);  			w.CommitChanges ();  		}  	}  	var ta = !string.IsNullOrEmpty (dta) ? workspace.Single<Account> (x => x.Name.ToLower () == dta.ToLower ()) : null;  	if (!string.IsNullOrEmpty (dta) && ta == null) {  		using (var w = WorkspaceFactory.Create ()) {  			ta = new Account {  				Name = dta'  				AccountTypeId = tAccTemplate.Id  			};  			w.Add (ta);  			w.CommitChanges ();  		}  	}  	var resultItem = new AccountTransactionType {  		Name = name'  		SourceAccountTypeId = sAccTemplate.Id'  		TargetAccountTypeId = tAccTemplate.Id  	};  	if (sa != null)  		resultItem.DefaultSourceAccountId = sa.Id;  	if (ta != null)  		resultItem.DefaultTargetAccountId = ta.Id;  	result.Add (resultItem);  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypeDocuments,The following statement contains a magic number: if (values.Length > 0) {  	foreach (var item in values) {  		var parts = item.Split (';');  		if (parts.Count () > 3) {  			var name = parts [0].Trim ();  			if (workspace.Single<AccountTransactionDocumentType> (x => x.Name.ToLower () == name.ToLower ()) != null)  				continue;  			var atName = parts [1].Trim ();  			var header = parts [2].Trim ();  			var accTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == atName.ToLower ());  			if (accTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					accTemplate = new AccountType {  						Name = atName  					};  					w.Add (accTemplate);  					w.CommitChanges ();  				}  			}  			var resultItem = new AccountTransactionDocumentType {  				Name = name'  				MasterAccountTypeId = accTemplate.Id'  				ButtonHeader = header'  				ButtonColor = "Gainsboro"  			};  			for (var i = 3; i < parts.Length; i++) {  				var n = parts [i].ToLower ();  				var tt = workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == n);  				if (tt != null)  					resultItem.TransactionTypes.Add (tt);  			}  			result.Add (resultItem);  		}  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypeDocuments,The following statement contains a magic number: if (values.Length > 0) {  	foreach (var item in values) {  		var parts = item.Split (';');  		if (parts.Count () > 3) {  			var name = parts [0].Trim ();  			if (workspace.Single<AccountTransactionDocumentType> (x => x.Name.ToLower () == name.ToLower ()) != null)  				continue;  			var atName = parts [1].Trim ();  			var header = parts [2].Trim ();  			var accTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == atName.ToLower ());  			if (accTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					accTemplate = new AccountType {  						Name = atName  					};  					w.Add (accTemplate);  					w.CommitChanges ();  				}  			}  			var resultItem = new AccountTransactionDocumentType {  				Name = name'  				MasterAccountTypeId = accTemplate.Id'  				ButtonHeader = header'  				ButtonColor = "Gainsboro"  			};  			for (var i = 3; i < parts.Length; i++) {  				var n = parts [i].ToLower ();  				var tt = workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == n);  				if (tt != null)  					resultItem.TransactionTypes.Add (tt);  			}  			result.Add (resultItem);  		}  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypeDocuments,The following statement contains a magic number: if (values.Length > 0) {  	foreach (var item in values) {  		var parts = item.Split (';');  		if (parts.Count () > 3) {  			var name = parts [0].Trim ();  			if (workspace.Single<AccountTransactionDocumentType> (x => x.Name.ToLower () == name.ToLower ()) != null)  				continue;  			var atName = parts [1].Trim ();  			var header = parts [2].Trim ();  			var accTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == atName.ToLower ());  			if (accTemplate == null) {  				using (var w = WorkspaceFactory.Create ()) {  					accTemplate = new AccountType {  						Name = atName  					};  					w.Add (accTemplate);  					w.CommitChanges ();  				}  			}  			var resultItem = new AccountTransactionDocumentType {  				Name = name'  				MasterAccountTypeId = accTemplate.Id'  				ButtonHeader = header'  				ButtonColor = "Gainsboro"  			};  			for (var i = 3; i < parts.Length; i++) {  				var n = parts [i].ToLower ();  				var tt = workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == n);  				if (tt != null)  					resultItem.TransactionTypes.Add (tt);  			}  			result.Add (resultItem);  		}  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypeDocuments,The following statement contains a magic number: foreach (var item in values) {  	var parts = item.Split (';');  	if (parts.Count () > 3) {  		var name = parts [0].Trim ();  		if (workspace.Single<AccountTransactionDocumentType> (x => x.Name.ToLower () == name.ToLower ()) != null)  			continue;  		var atName = parts [1].Trim ();  		var header = parts [2].Trim ();  		var accTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == atName.ToLower ());  		if (accTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				accTemplate = new AccountType {  					Name = atName  				};  				w.Add (accTemplate);  				w.CommitChanges ();  			}  		}  		var resultItem = new AccountTransactionDocumentType {  			Name = name'  			MasterAccountTypeId = accTemplate.Id'  			ButtonHeader = header'  			ButtonColor = "Gainsboro"  		};  		for (var i = 3; i < parts.Length; i++) {  			var n = parts [i].ToLower ();  			var tt = workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == n);  			if (tt != null)  				resultItem.TransactionTypes.Add (tt);  		}  		result.Add (resultItem);  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypeDocuments,The following statement contains a magic number: foreach (var item in values) {  	var parts = item.Split (';');  	if (parts.Count () > 3) {  		var name = parts [0].Trim ();  		if (workspace.Single<AccountTransactionDocumentType> (x => x.Name.ToLower () == name.ToLower ()) != null)  			continue;  		var atName = parts [1].Trim ();  		var header = parts [2].Trim ();  		var accTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == atName.ToLower ());  		if (accTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				accTemplate = new AccountType {  					Name = atName  				};  				w.Add (accTemplate);  				w.CommitChanges ();  			}  		}  		var resultItem = new AccountTransactionDocumentType {  			Name = name'  			MasterAccountTypeId = accTemplate.Id'  			ButtonHeader = header'  			ButtonColor = "Gainsboro"  		};  		for (var i = 3; i < parts.Length; i++) {  			var n = parts [i].ToLower ();  			var tt = workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == n);  			if (tt != null)  				resultItem.TransactionTypes.Add (tt);  		}  		result.Add (resultItem);  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypeDocuments,The following statement contains a magic number: foreach (var item in values) {  	var parts = item.Split (';');  	if (parts.Count () > 3) {  		var name = parts [0].Trim ();  		if (workspace.Single<AccountTransactionDocumentType> (x => x.Name.ToLower () == name.ToLower ()) != null)  			continue;  		var atName = parts [1].Trim ();  		var header = parts [2].Trim ();  		var accTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == atName.ToLower ());  		if (accTemplate == null) {  			using (var w = WorkspaceFactory.Create ()) {  				accTemplate = new AccountType {  					Name = atName  				};  				w.Add (accTemplate);  				w.CommitChanges ();  			}  		}  		var resultItem = new AccountTransactionDocumentType {  			Name = name'  			MasterAccountTypeId = accTemplate.Id'  			ButtonHeader = header'  			ButtonColor = "Gainsboro"  		};  		for (var i = 3; i < parts.Length; i++) {  			var n = parts [i].ToLower ();  			var tt = workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == n);  			if (tt != null)  				resultItem.TransactionTypes.Add (tt);  		}  		result.Add (resultItem);  	}  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypeDocuments,The following statement contains a magic number: if (parts.Count () > 3) {  	var name = parts [0].Trim ();  	if (workspace.Single<AccountTransactionDocumentType> (x => x.Name.ToLower () == name.ToLower ()) != null)  		continue;  	var atName = parts [1].Trim ();  	var header = parts [2].Trim ();  	var accTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == atName.ToLower ());  	if (accTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			accTemplate = new AccountType {  				Name = atName  			};  			w.Add (accTemplate);  			w.CommitChanges ();  		}  	}  	var resultItem = new AccountTransactionDocumentType {  		Name = name'  		MasterAccountTypeId = accTemplate.Id'  		ButtonHeader = header'  		ButtonColor = "Gainsboro"  	};  	for (var i = 3; i < parts.Length; i++) {  		var n = parts [i].ToLower ();  		var tt = workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == n);  		if (tt != null)  			resultItem.TransactionTypes.Add (tt);  	}  	result.Add (resultItem);  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypeDocuments,The following statement contains a magic number: if (parts.Count () > 3) {  	var name = parts [0].Trim ();  	if (workspace.Single<AccountTransactionDocumentType> (x => x.Name.ToLower () == name.ToLower ()) != null)  		continue;  	var atName = parts [1].Trim ();  	var header = parts [2].Trim ();  	var accTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == atName.ToLower ());  	if (accTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			accTemplate = new AccountType {  				Name = atName  			};  			w.Add (accTemplate);  			w.CommitChanges ();  		}  	}  	var resultItem = new AccountTransactionDocumentType {  		Name = name'  		MasterAccountTypeId = accTemplate.Id'  		ButtonHeader = header'  		ButtonColor = "Gainsboro"  	};  	for (var i = 3; i < parts.Length; i++) {  		var n = parts [i].ToLower ();  		var tt = workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == n);  		if (tt != null)  			resultItem.TransactionTypes.Add (tt);  	}  	result.Add (resultItem);  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypeDocuments,The following statement contains a magic number: if (parts.Count () > 3) {  	var name = parts [0].Trim ();  	if (workspace.Single<AccountTransactionDocumentType> (x => x.Name.ToLower () == name.ToLower ()) != null)  		continue;  	var atName = parts [1].Trim ();  	var header = parts [2].Trim ();  	var accTemplate = workspace.Single<AccountType> (x => x.Name.ToLower () == atName.ToLower ());  	if (accTemplate == null) {  		using (var w = WorkspaceFactory.Create ()) {  			accTemplate = new AccountType {  				Name = atName  			};  			w.Add (accTemplate);  			w.CommitChanges ();  		}  	}  	var resultItem = new AccountTransactionDocumentType {  		Name = name'  		MasterAccountTypeId = accTemplate.Id'  		ButtonHeader = header'  		ButtonColor = "Gainsboro"  	};  	for (var i = 3; i < parts.Length; i++) {  		var n = parts [i].ToLower ();  		var tt = workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == n);  		if (tt != null)  			resultItem.TransactionTypes.Add (tt);  	}  	result.Add (resultItem);  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,DataCreationService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\DataCreationService.cs,BatchCreateTransactionTypeDocuments,The following statement contains a magic number: for (var i = 3; i < parts.Length; i++) {  	var n = parts [i].ToLower ();  	var tt = workspace.Single<AccountTransactionType> (x => x.Name.ToLower () == n);  	if (tt != null)  		resultItem.TransactionTypes.Add (tt);  }  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GetResource,The following statement contains a magic number: if (type == 2)  	return Resources.ResourceManager.GetString (resourceName' CultureInfo.InvariantCulture);  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GetName,The following statement contains a magic number: if (commandName.Count () == 3)  	result = string.Format (GetResource (commandName [0]' type)' GetResourceF (commandName [1]' commandName [2]' type)' type);  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GetName,The following statement contains a magic number: if (commandName.Count () == 3)  	result = string.Format (GetResource (commandName [0]' type)' GetResourceF (commandName [1]' commandName [2]' type)' type);  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GetName,The following statement contains a magic number: result = string.Format (GetResource (commandName [0]' type)' GetResourceF (commandName [1]' commandName [2]' type)' type);  
Magic Number,Samba.Presentation.Services.Common.DataGeneration,RuleGenerator,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Common\DataGeneration\RuleGenerator.cs,GetName,The following statement contains a magic number: if (commandName.Count () == 2)  	result = GetResourceF (commandName [0]' commandName [1]' type);  
Magic Number,Samba.Presentation.Services.Implementations.TaskModule.Parsers,ExpressionParser,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TaskModule\Parsers\ExpressionParser.cs,GetTaskType,The following statement contains a magic number: return 2;  
Magic Number,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,RecalculateTicket,The following statement contains a magic number: ticket.Calculations.Where (x => x.CalculationType == 5).ToList ().ForEach (x => x.Amount = _expressionService.EvalCommand (FunctionNames.Calculation' "_" + x.Name' new {  	Ticket = ticket  }' 0m));  
Magic Number,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,CanMakeAccountTransaction,The following statement contains a magic number: if (result) {  	var accountType = _cacheService.GetAccountTypeById (entityType.AccountTypeId);  	if (accountType.WorkingRule != 0) {  		if (accountType.WorkingRule == 1 && targetBalance < 0)  			return false;  		//disallow credit  		if (accountType.WorkingRule == 2 && targetBalance > ticketEntity.GetCustomDataAsDecimal (Resources.CreditLimit))  			return false;  		//disallow debit  	}  }  
Magic Number,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,CanMakeAccountTransaction,The following statement contains a magic number: if (accountType.WorkingRule != 0) {  	if (accountType.WorkingRule == 1 && targetBalance < 0)  		return false;  	//disallow credit  	if (accountType.WorkingRule == 2 && targetBalance > ticketEntity.GetCustomDataAsDecimal (Resources.CreditLimit))  		return false;  	//disallow debit  }  
Magic Number,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,CanMakeAccountTransaction,The following statement contains a magic number: if (accountType.WorkingRule == 2 && targetBalance > ticketEntity.GetCustomDataAsDecimal (Resources.CreditLimit))  	return false;  
Magic Number,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,AddOrder,The following statement contains a magic number: order.Quantity = quantity > 9 ? decimal.Round (quantity / portion.Multiplier' 3' MidpointRounding.AwayFromZero) : quantity;  
Magic Number,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,AddOrder,The following statement contains a magic number: order.Quantity = quantity > 9 ? decimal.Round (quantity / portion.Multiplier' 3' MidpointRounding.AwayFromZero) : quantity;  
Magic Number,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,SetOrderState,The following statement contains a magic number: foreach (var state in orderStates) {  	string gn;  	string sv;  	if (state.Contains ("=")) {  		var sParts = state.Split ('=');  		gn = sParts [0];  		sv = sParts [1];  	} else {  		return;  	}  	order.SetStateValue (gn' 99 + i' sv' 99 + i' ""' _applicationState.CurrentLoggedInUser.Id);  	i++;  }  
Magic Number,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,SetOrderState,The following statement contains a magic number: foreach (var state in orderStates) {  	string gn;  	string sv;  	if (state.Contains ("=")) {  		var sParts = state.Split ('=');  		gn = sParts [0];  		sv = sParts [1];  	} else {  		return;  	}  	order.SetStateValue (gn' 99 + i' sv' 99 + i' ""' _applicationState.CurrentLoggedInUser.Id);  	i++;  }  
Magic Number,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,SetOrderState,The following statement contains a magic number: order.SetStateValue (gn' 99 + i' sv' 99 + i' ""' _applicationState.CurrentLoggedInUser.Id);  
Magic Number,Samba.Presentation.Services.Implementations.TicketModule,TicketService,F:\newReposMay17\emreeren_SambaPOS-3\Samba.Presentation.Services\Implementations\TicketModule\TicketService.cs,SetOrderState,The following statement contains a magic number: order.SetStateValue (gn' 99 + i' sv' 99 + i' ""' _applicationState.CurrentLoggedInUser.Id);  
