Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ClaudiaIDE,SildeShowImageProvider,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\ImageProvider\SildeShowImageProvider.cs,GetImagesFromDirectory,The length of the statement  "            return new ImageFiles{ Extensions = _setting.Extensions' ImageDirectoryPath = _setting.BackgroundImagesDirectoryAbsolutePath }; " is 127.
Long Statement,ClaudiaIDE,ImageFiles,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\ImageProvider\SildeShowImageProvider.cs,GetEnumerator,The length of the statement  "            if (string.IsNullOrEmpty(Extensions) || string.IsNullOrEmpty(ImageDirectoryPath) || !Directory.Exists(ImageDirectoryPath)) " is 122.
Long Statement,ClaudiaIDE.Helpers,ImageSourceAnimator,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Helpers\ImageSourceAnimator.cs,AnimateImageSourceChange,The length of the statement  "                var fadeInAnimation = new DoubleAnimation(0d' animationParameters.TargetOpacity' animationParameters.FadeTime) { AutoReverse = false }; " is 135.
Long Statement,ClaudiaIDE.Helpers,ImageSourceAnimator,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Helpers\ImageSourceAnimator.cs,AnimateImageSourceChange,The length of the statement  "                var fadeInAnimation = new DoubleAnimation(0d' animationParameters.TargetOpacity' animationParameters.FadeTime) { AutoReverse = false }; " is 135.
Long Statement,ClaudiaIDE.Settings,Setting,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Settings\Setting.cs,Load,The length of the statement  "            BackgroundImagesDirectoryAbsolutePath = Setting.ToFullPath((string)props.Item("BackgroundImageDirectoryAbsolutePath").Value' DefaultBackgroundFolder); " is 150.
Long Statement,ClaudiaIDE.Settings,Setting,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Settings\Setting.cs,Load,The length of the statement  "            BackgroundImageAbsolutePath = Setting.ToFullPath((string)props.Item("BackgroundImageAbsolutePath").Value' DefaultBackgroundImage); " is 130.
Long Statement,ClaudiaIDE.Settings,Setting,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Settings\Setting.cs,Deserialize,The length of the statement  "            ret.BackgroundImagesDirectoryAbsolutePath = ToFullPath(ret.BackgroundImagesDirectoryAbsolutePath' DefaultBackgroundFolder); " is 123.
Complex Conditional,ClaudiaIDE.Helpers,Utils,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Helpers\Utils.cs,EnsureMaxWidthHeight,The conditional expression  "maxWidth > 0 && maxHeight > 0                  && original.PixelWidth > maxWidth && original.PixelHeight > maxHeight"  is complex.
Empty Catch Block,ClaudiaIDE,ClaudiaIdePackage,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\ClaudiaIdePackage.cs,InvokeChangeImage,The method has an empty catch block.
Empty Catch Block,ClaudiaIDE,ClaudiaIdePackage,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\ClaudiaIdePackage.cs,ChangeImage,The method has an empty catch block.
Empty Catch Block,ClaudiaIDE,ClaudiaIDE,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\ClaudiaIDE.cs,ClaudiaIDE,The method has an empty catch block.
Empty Catch Block,ClaudiaIDE,ClaudiaIDE,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\ClaudiaIDE.cs,InvokeChangeImage,The method has an empty catch block.
Empty Catch Block,ClaudiaIDE,ClaudiaIDE,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\ClaudiaIDE.cs,ChangeImage,The method has an empty catch block.
Empty Catch Block,ClaudiaIDE,ClaudiaIDE,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\ClaudiaIDE.cs,RepositionImage,The method has an empty catch block.
Empty Catch Block,ClaudiaIDE,ClaudiaIDE,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\ClaudiaIDE.cs,SetCanvasBackground,The method has an empty catch block.
Empty Catch Block,ClaudiaIDE,ClaudiaIDE,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\ClaudiaIDE.cs,SetCanvasBackground,The method has an empty catch block.
Empty Catch Block,ClaudiaIDE.Options,ClaudiaIdeOptionPageGrid,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Options\ClaudiaIdeOptionPageGrid.cs,OnApply,The method has an empty catch block.
Empty Catch Block,ClaudiaIDE.Options,BrowseFile,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Options\ClaudiaIdeOptionPageGrid.cs,EditValue,The method has an empty catch block.
Empty Catch Block,ClaudiaIDE.Settings,Setting,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Settings\Setting.cs,OnApplyChanged,The method has an empty catch block.
Magic Number,ClaudiaIDE,ClaudiaIdePackage,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\ClaudiaIdePackage.cs,ChangeImage,The following statement contains a magic number: try              {                  var rRootGrid = (Grid)_mainWindow.Template.FindName("RootGrid"' _mainWindow);                  var newimage = _imageProvider.GetBitmap();                    foreach (UIElement el in rRootGrid.Children)                  {                      if (el.GetType() != typeof(Image)) continue;                      if (_current == null) _current = el as Image;                      if (_settings.ImageBackgroundType == ImageBackgroundType.Single || !_settings.ExpandToIDE)                      {                          rRootGrid.Children.Remove(el);                          _current = null;                      }                      break;                  }                    if (!_settings.ExpandToIDE) return;                    if (_settings.ImageBackgroundType == ImageBackgroundType.Single || _current == null)                  {                      var rImageControl = new Image()                      {                          Source = newimage'                          Stretch = _settings.ImageStretch.ConvertTo()'                          HorizontalAlignment = _settings.PositionHorizon.ConvertToHorizontalAlignment()'                          VerticalAlignment = _settings.PositionVertical.ConvertToVerticalAlignment()'                          Opacity = _settings.Opacity                      };                        Grid.SetRowSpan(rImageControl' 4);                      RenderOptions.SetBitmapScalingMode(rImageControl' BitmapScalingMode.Fant);                        rRootGrid.Children.Insert(0' rImageControl);                  }                  else                  {                      _current.AnimateImageSourceChange(                              newimage'                              (n) => {                                  n.Stretch = _settings.ImageStretch.ConvertTo();                                  n.HorizontalAlignment = _settings.PositionHorizon.ConvertToHorizontalAlignment();                                  n.VerticalAlignment = _settings.PositionVertical.ConvertToVerticalAlignment();                              }'                              new Helpers.AnimateImageChangeParams                              {                                  FadeTime = _settings.ImageFadeAnimationInterval'                                  TargetOpacity = _settings.Opacity                              }                          );                  }              }              catch              {              }
Magic Number,ClaudiaIDE.Helpers,Utils,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Helpers\Utils.cs,ConvertToDpi96,The following statement contains a magic number: var dpi = 96;
Magic Number,ClaudiaIDE.Helpers,Utils,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Helpers\Utils.cs,ConvertToDpi96,The following statement contains a magic number: var stride = width * 4;
Magic Number,ClaudiaIDE.Options,ClaudiaIdeOptionPageGrid,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Options\ClaudiaIdeOptionPageGrid.cs,ClaudiaIdeOptionPageGrid,The following statement contains a magic number: Opacity = 0.35;
Magic Number,ClaudiaIDE.Options,ClaudiaIdeOptionPageGrid,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Options\ClaudiaIdeOptionPageGrid.cs,ClaudiaIdeOptionPageGrid,The following statement contains a magic number: ImageFadeAnimationInterval = TimeSpan.FromSeconds(5);
Magic Number,ClaudiaIDE.Options,ImageStretchTypeConverter,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Options\ClaudiaIdeOptionPageGrid.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string))              {                  string result = null;                  if ((int)value == 0)                  {                      result = "None";                  }                  else if ((int)value == 1)                  {                      result = "Uniform";                  }                  else if ((int)value == 2)                  {                      result = "UniformToFill";                  }                  else if ((int)value == 3)                  {                      result = "Fill";                  }                    if (result != null) return result;              }
Magic Number,ClaudiaIDE.Options,ImageStretchTypeConverter,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Options\ClaudiaIdeOptionPageGrid.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string))              {                  string result = null;                  if ((int)value == 0)                  {                      result = "None";                  }                  else if ((int)value == 1)                  {                      result = "Uniform";                  }                  else if ((int)value == 2)                  {                      result = "UniformToFill";                  }                  else if ((int)value == 3)                  {                      result = "Fill";                  }                    if (result != null) return result;              }
Magic Number,ClaudiaIDE.Settings,Setting,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Settings\Setting.cs,Setting,The following statement contains a magic number: Opacity = 0.35;
Magic Number,ClaudiaIDE.Settings,Setting,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Settings\Setting.cs,Setting,The following statement contains a magic number: UpdateImageInterval = TimeSpan.FromMinutes(30);
Missing Default,ClaudiaIDE.Settings,ImageStretchConverter,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Settings\Setting.cs,ConvertTo,The following switch statement is missing a default case: switch(source)              {                  case ImageStretch.Fill:                      return System.Windows.Media.Stretch.Fill;                  case ImageStretch.None:                      return System.Windows.Media.Stretch.None;                  case ImageStretch.Uniform:                      return System.Windows.Media.Stretch.Uniform;                  case ImageStretch.UniformToFill:                      return System.Windows.Media.Stretch.UniformToFill;              }
Missing Default,ClaudiaIDE.Settings,PositionConverter,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Settings\Setting.cs,ConvertTo,The following switch statement is missing a default case: switch (source)              {                  case PositionV.Bottom:                      return System.Windows.Media.AlignmentY.Bottom;                  case PositionV.Center:                      return System.Windows.Media.AlignmentY.Center;                  case PositionV.Top:                      return System.Windows.Media.AlignmentY.Top;              }
Missing Default,ClaudiaIDE.Settings,PositionConverter,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Settings\Setting.cs,ConvertToVerticalAlignment,The following switch statement is missing a default case: switch (source)              {                  case PositionV.Bottom:                      return System.Windows.VerticalAlignment.Bottom;                  case PositionV.Center:                      return System.Windows.VerticalAlignment.Center;                  case PositionV.Top:                      return System.Windows.VerticalAlignment.Top;              }
Missing Default,ClaudiaIDE.Settings,PositionConverter,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Settings\Setting.cs,ConvertTo,The following switch statement is missing a default case: switch (source)              {                  case PositionH.Left:                      return System.Windows.Media.AlignmentX.Left;                  case PositionH.Center:                      return System.Windows.Media.AlignmentX.Center;                  case PositionH.Right:                      return System.Windows.Media.AlignmentX.Right;              }
Missing Default,ClaudiaIDE.Settings,PositionConverter,C:\repos\buchizo_ClaudiaIDE\ClaudiaIDE\Settings\Setting.cs,ConvertToHorizontalAlignment,The following switch statement is missing a default case: switch (source)              {                  case PositionH.Left:                      return System.Windows.HorizontalAlignment.Left;                  case PositionH.Center:                      return System.Windows.HorizontalAlignment.Center;                  case PositionH.Right:                      return System.Windows.HorizontalAlignment.Right;              }
