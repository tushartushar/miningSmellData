Implementation smell,Namespace,Class,File,Method,Description
Long Method,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,ReceiveThread,The method has 237 lines of code.
Long Method,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,ProcessInflightThread,The method has 335 lines of code.
Long Method,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The method has 124 lines of code.
Complex Method,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,EnqueueInflight,Cyclomatic complexity of the method is 11
Complex Method,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,ReceiveThread,Cyclomatic complexity of the method is 61
Complex Method,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,ReceiveEventThread,Cyclomatic complexity of the method is 30
Complex Method,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,Cyclomatic complexity of the method is 8
Complex Method,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,Cyclomatic complexity of the method is 9
Complex Method,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,Cyclomatic complexity of the method is 9
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,MqttClient,The method has 5 parameters.
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,MqttClient,The method has 5 parameters.
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,MqttClient,The method has 6 parameters.
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Init,The method has 6 parameters.
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Connect,The method has 5 parameters.
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Connect,The method has 10 parameters.
Long Parameter List,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Net\MqttNetworkChannel.cs,MqttNetworkChannel,The method has 6 parameters.
Long Parameter List,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,MqttMsgConnect,The method has 10 parameters.
Long Parameter List,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublish.cs,MqttMsgPublish,The method has 5 parameters.
Long Parameter List,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublishEventArgs,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublishEventArgs.cs,MqttMsgPublishEventArgs,The method has 5 parameters.
Long Parameter List,uPLibrary.Networking.M2Mqtt.Utility,Trace,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Utility\Trace.cs,WriteLine,The method has 5 parameters.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,MqttClient,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,MqttClient,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,MqttClient,The length of the parameter userCertificateSelectionCallback is 32.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,MqttClient,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,MqttClient,The length of the parameter userCertificateSelectionCallback is 32.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Init,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Init,The length of the parameter userCertificateSelectionCallback is 32.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Net\MqttNetworkChannel.cs,MqttNetworkChannel,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Net\MqttNetworkChannel.cs,MqttNetworkChannel,The length of the parameter userCertificateSelectionCallback is 32.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Init,The length of the statement  "	this.channel = new MqttNetworkChannel (this.brokerHostName' this.brokerPort' secure' caCert' userCertificateValidationCallback' userCertificateSelectionCallback); " is 162.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Connect,The length of the statement  "	return this.Connect (clientId' null' null' false' MqttMsgConnect.QOS_LEVEL_AT_MOST_ONCE' false' null' null' true' MqttMsgConnect.KEEP_ALIVE_PERIOD_DEFAULT); " is 156.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Connect,The length of the statement  "	return this.Connect (clientId' username' password' false' MqttMsgConnect.QOS_LEVEL_AT_MOST_ONCE' false' null' null' true' MqttMsgConnect.KEEP_ALIVE_PERIOD_DEFAULT); " is 164.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Connect,The length of the statement  "	return this.Connect (clientId' username' password' false' MqttMsgConnect.QOS_LEVEL_AT_MOST_ONCE' false' null' null' cleanSession' keepAlivePeriod); " is 147.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Connect,The length of the statement  "	MqttMsgConnect connect = new MqttMsgConnect (clientId' username' password' willRetain' willQosLevel' willFlag' willTopic' willMessage' cleanSession' keepAlivePeriod); " is 166.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,OnMqttMsgPublishReceived,The length of the statement  "		this.MqttMsgPublishReceived (this' new MqttMsgPublishEventArgs (publish.Topic' publish.Message' publish.DupFlag' publish.QosLevel' publish.Retain)); " is 148.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,EnqueueInflight,The length of the statement  "			MqttMsgContextFinder msgCtxFinder = new MqttMsgContextFinder (((MqttMsgPublish)msg).MessageId' MqttMsgFlow.ToAcknowledge); " is 122.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,EnqueueInternal,The length of the statement  "			MqttMsgContextFinder msgCtxFinder = new MqttMsgContextFinder (((MqttMsgPubrel)msg).MessageId' MqttMsgFlow.ToAcknowledge); " is 121.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,ProcessInflightThread,The length of the statement  "									if (((msgReceived.Type == MqttMsgBase.MQTT_MSG_PUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_PUBLISH_TYPE) && (((MqttMsgPuback)msgReceived).MessageId == ((MqttMsgPublish)msgInflight).MessageId)) || ((msgReceived.Type == MqttMsgBase.MQTT_MSG_SUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_SUBSCRIBE_TYPE) && (((MqttMsgSuback)msgReceived).MessageId == ((MqttMsgSubscribe)msgInflight).MessageId)) || ((msgReceived.Type == MqttMsgBase.MQTT_MSG_UNSUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_UNSUBSCRIBE_TYPE) && (((MqttMsgUnsuback)msgReceived).MessageId == ((MqttMsgUnsubscribe)msgInflight).MessageId))) { " is 637.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,GetMessageId,The length of the statement  "	this.messageIdCounter = ((this.messageIdCounter % UInt16.MaxValue) != 0) ? (ushort)(this.messageIdCounter + 1) : (ushort)1; " is 123.
Long Statement,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Net\MqttNetworkChannel.cs,Connect,The length of the statement  "		this.sslStream = new SslStream (this.netStream' false' this.userCertificateValidationCallback' this.userCertificateSelectionCallback); " is 134.
Complex Conditional,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,ProcessInflightThread,The conditional expression  "((msgReceived.Type == MqttMsgBase.MQTT_MSG_PUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_PUBLISH_TYPE) && (((MqttMsgPuback)msgReceived).MessageId == ((MqttMsgPublish)msgInflight).MessageId)) || ((msgReceived.Type == MqttMsgBase.MQTT_MSG_SUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_SUBSCRIBE_TYPE) && (((MqttMsgSuback)msgReceived).MessageId == ((MqttMsgSubscribe)msgInflight).MessageId)) || ((msgReceived.Type == MqttMsgBase.MQTT_MSG_UNSUBACK_TYPE) && (msgInflight.Type == MqttMsgBase.MQTT_MSG_UNSUBSCRIBE_TYPE) && (((MqttMsgUnsuback)msgReceived).MessageId == ((MqttMsgUnsubscribe)msgInflight).MessageId))"  is complex.
Empty Catch Block,uPLibrary.Networking.M2Mqtt,MqttNetworkChannel,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Net\MqttNetworkChannel.cs,MqttNetworkChannel,The method has an empty catch block.
Magic Number,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Connect,The following statement contains a magic number: if (connack.ReturnCode == MqttMsgConnack.CONN_ACCEPTED) {  	// set all client properties  	this.ClientId = clientId;  	this.CleanSession = cleanSession;  	this.WillFlag = willFlag;  	this.WillTopic = willTopic;  	this.WillMessage = willMessage;  	this.WillQosLevel = willQosLevel;  	this.keepAlivePeriod = keepAlivePeriod * 1000;  	// convert in ms  	// start thread for sending keep alive message to the broker  	Fx.StartThread (this.KeepAliveThread);  	// start thread for raising received message event from broker  	Fx.StartThread (this.ReceiveEventThread);  	// start thread for handling inflight messages queue to broker asynchronously (publish and acknowledge)  	Fx.StartThread (this.ProcessInflightThread);  	this.IsConnected = true;  }  
Magic Number,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,Connect,The following statement contains a magic number: this.keepAlivePeriod = keepAlivePeriod * 1000;  
Magic Number,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,ReceiveThread,The following statement contains a magic number: while (this.isRunning) {  	try {  		if (this.channel.DataAvailable)  			// read first byte (fixed header)  			readBytes = this.channel.Receive (fixedHeaderFirstByte);  		else {  			#if BROKER  			                        // client not connected (client didn't send CONNECT yet)                         if (!this.IsConnected)                         {                             now = Environment.TickCount;                              // if connect timeout exceeded ...                              if ((now - connectTime) >= this.settings.TimeoutOnConnection)                             {                                 // client must close connection                                 this.Close();                                  // client raw disconnection                                 this.OnMqttMsgDisconnected();                             }                         } #endif  			// no bytes available' sleep before retry  			readBytes = 0;  			Fx.SleepThread (10);  		}  		if (readBytes > 0) {  			#if BROKER  			                        // update last message received ticks                         this.lastCommTime = Environment.TickCount; #endif  			// extract message type from received byte  			msgType = (byte)((fixedHeaderFirstByte [0] & MqttMsgBase.MSG_TYPE_MASK) >> MqttMsgBase.MSG_TYPE_OFFSET);  			switch (msgType) {  			// CONNECT message received  			case MqttMsgBase.MQTT_MSG_CONNECT_TYPE:  				#if BROKER  				                                MqttMsgConnect connect = MqttMsgConnect.Parse(fixedHeaderFirstByte[0]' this.channel); #if TRACE  				#                                Trace.WriteLine(TraceLevel.Frame' "RECV {0}"' connect); #endif  				#                                 // raise message received event                                 this.OnMqttMsgReceived(connect);                                 break; #else  				throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  			#endif  			// CONNACK message received  			case MqttMsgBase.MQTT_MSG_CONNACK_TYPE:  				#if BROKER  				                                throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage); #else  				this.msgReceived = MqttMsgConnack.Parse (fixedHeaderFirstByte [0]' this.channel);  				#if TRACE  				MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' this.msgReceived);  				#endif  				this.syncEndReceiving.Set ();  				break;  			#endif  			// PINGREQ message received  			case MqttMsgBase.MQTT_MSG_PINGREQ_TYPE:  				#if BROKER  				                                this.msgReceived = MqttMsgPingReq.Parse(fixedHeaderFirstByte[0]' this.channel); #if TRACE  				#                                Trace.WriteLine(TraceLevel.Frame' "RECV {0}"' this.msgReceived); #endif  				#                                 MqttMsgPingResp pingresp = new MqttMsgPingResp();                                 this.Send(pingresp);                                  // raise message received event                                 //this.OnMqttMsgReceived(this.msgReceived);                                 break; #else  				throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  			#endif  			// PINGRESP message received  			case MqttMsgBase.MQTT_MSG_PINGRESP_TYPE:  				#if BROKER  				                                throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage); #else  				this.msgReceived = MqttMsgPingResp.Parse (fixedHeaderFirstByte [0]' this.channel);  				#if TRACE  				MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' this.msgReceived);  				#endif  				this.syncEndReceiving.Set ();  				break;  			#endif  			// SUBSCRIBE message received  			case MqttMsgBase.MQTT_MSG_SUBSCRIBE_TYPE:  				#if BROKER  				                                MqttMsgSubscribe subscribe = MqttMsgSubscribe.Parse(fixedHeaderFirstByte[0]' this.channel); #if TRACE  				#                                Trace.WriteLine(TraceLevel.Frame' "RECV {0}"' subscribe); #endif  				#                                 // raise message received event                                 this.OnMqttMsgReceived(subscribe);                                  break; #else  				throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  			#endif  			// SUBACK message received  			case MqttMsgBase.MQTT_MSG_SUBACK_TYPE:  				#if BROKER  				                                throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage); #else  				// enqueue SUBACK message received (for QoS Level 1) into the internal queue  				MqttMsgSuback suback = MqttMsgSuback.Parse (fixedHeaderFirstByte [0]' this.channel);  				#if TRACE  				MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' suback);  				#endif  				// enqueue SUBACK message into the internal queue  				this.EnqueueInternal (suback);  				break;  			#endif  			// PUBLISH message received  			case MqttMsgBase.MQTT_MSG_PUBLISH_TYPE:  				MqttMsgPublish publish = MqttMsgPublish.Parse (fixedHeaderFirstByte [0]' this.channel);  				#if TRACE  				MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' publish);  				#endif  				// enqueue PUBLISH message to acknowledge into the inflight queue  				this.EnqueueInflight (publish' MqttMsgFlow.ToAcknowledge);  				break;  			// PUBACK message received  			case MqttMsgBase.MQTT_MSG_PUBACK_TYPE:  				// enqueue PUBACK message received (for QoS Level 1) into the internal queue  				MqttMsgPuback puback = MqttMsgPuback.Parse (fixedHeaderFirstByte [0]' this.channel);  				#if TRACE  				MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' puback);  				#endif  				// enqueue PUBACK message into the internal queue  				this.EnqueueInternal (puback);  				break;  			// PUBREC message received  			case MqttMsgBase.MQTT_MSG_PUBREC_TYPE:  				// enqueue PUBREC message received (for QoS Level 2) into the internal queue  				MqttMsgPubrec pubrec = MqttMsgPubrec.Parse (fixedHeaderFirstByte [0]' this.channel);  				#if TRACE  				MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' pubrec);  				#endif  				// enqueue PUBREC message into the internal queue  				this.EnqueueInternal (pubrec);  				break;  			// PUBREL message received  			case MqttMsgBase.MQTT_MSG_PUBREL_TYPE:  				// enqueue PUBREL message received (for QoS Level 2) into the internal queue  				MqttMsgPubrel pubrel = MqttMsgPubrel.Parse (fixedHeaderFirstByte [0]' this.channel);  				#if TRACE  				MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' pubrel);  				#endif  				// enqueue PUBREL message into the internal queue  				this.EnqueueInternal (pubrel);  				break;  			// PUBCOMP message received  			case MqttMsgBase.MQTT_MSG_PUBCOMP_TYPE:  				// enqueue PUBCOMP message received (for QoS Level 2) into the internal queue  				MqttMsgPubcomp pubcomp = MqttMsgPubcomp.Parse (fixedHeaderFirstByte [0]' this.channel);  				#if TRACE  				MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' pubcomp);  				#endif  				// enqueue PUBCOMP message into the internal queue  				this.EnqueueInternal (pubcomp);  				break;  			// UNSUBSCRIBE message received  			case MqttMsgBase.MQTT_MSG_UNSUBSCRIBE_TYPE:  				#if BROKER  				                                MqttMsgUnsubscribe unsubscribe = MqttMsgUnsubscribe.Parse(fixedHeaderFirstByte[0]' this.channel); #if TRACE  				#                                Trace.WriteLine(TraceLevel.Frame' "RECV {0}"' unsubscribe); #endif  				#                                 // raise message received event                                 this.OnMqttMsgReceived(unsubscribe);                                  break; #else  				throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  			#endif  			// UNSUBACK message received  			case MqttMsgBase.MQTT_MSG_UNSUBACK_TYPE:  				#if BROKER  				                                throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage); #else  				// enqueue UNSUBACK message received (for QoS Level 1) into the internal queue  				MqttMsgUnsuback unsuback = MqttMsgUnsuback.Parse (fixedHeaderFirstByte [0]' this.channel);  				#if TRACE  				MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' unsuback);  				#endif  				// enqueue UNSUBACK message into the internal queue  				this.EnqueueInternal (unsuback);  				break;  			#endif  			// DISCONNECT message received  			case MqttMsgDisconnect.MQTT_MSG_DISCONNECT_TYPE:  				#if BROKER  				                                MqttMsgDisconnect disconnect = MqttMsgDisconnect.Parse(fixedHeaderFirstByte[0]' this.channel); #if TRACE  				#                                Trace.WriteLine(TraceLevel.Frame' "RECV {0}"' disconnect); #endif  				#                                 // raise message received event                                 this.OnMqttMsgReceived(disconnect);                                  break; #else  				throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  			#endif  			default:  				throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  			}  			this.exReceiving = null;  		}  	}  	catch (Exception e) {  		#if TRACE  		MqttUtility.Trace.WriteLine (TraceLevel.Error' "Exception occurred: {0}"' e.ToString ());  		#endif  		this.exReceiving = new MqttCommunicationException (e);  	}  }  
Magic Number,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,ReceiveThread,The following statement contains a magic number: try {  	if (this.channel.DataAvailable)  		// read first byte (fixed header)  		readBytes = this.channel.Receive (fixedHeaderFirstByte);  	else {  		#if BROKER  		                        // client not connected (client didn't send CONNECT yet)                         if (!this.IsConnected)                         {                             now = Environment.TickCount;                              // if connect timeout exceeded ...                              if ((now - connectTime) >= this.settings.TimeoutOnConnection)                             {                                 // client must close connection                                 this.Close();                                  // client raw disconnection                                 this.OnMqttMsgDisconnected();                             }                         } #endif  		// no bytes available' sleep before retry  		readBytes = 0;  		Fx.SleepThread (10);  	}  	if (readBytes > 0) {  		#if BROKER  		                        // update last message received ticks                         this.lastCommTime = Environment.TickCount; #endif  		// extract message type from received byte  		msgType = (byte)((fixedHeaderFirstByte [0] & MqttMsgBase.MSG_TYPE_MASK) >> MqttMsgBase.MSG_TYPE_OFFSET);  		switch (msgType) {  		// CONNECT message received  		case MqttMsgBase.MQTT_MSG_CONNECT_TYPE:  			#if BROKER  			                                MqttMsgConnect connect = MqttMsgConnect.Parse(fixedHeaderFirstByte[0]' this.channel); #if TRACE  			#                                Trace.WriteLine(TraceLevel.Frame' "RECV {0}"' connect); #endif  			#                                 // raise message received event                                 this.OnMqttMsgReceived(connect);                                 break; #else  			throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  		#endif  		// CONNACK message received  		case MqttMsgBase.MQTT_MSG_CONNACK_TYPE:  			#if BROKER  			                                throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage); #else  			this.msgReceived = MqttMsgConnack.Parse (fixedHeaderFirstByte [0]' this.channel);  			#if TRACE  			MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' this.msgReceived);  			#endif  			this.syncEndReceiving.Set ();  			break;  		#endif  		// PINGREQ message received  		case MqttMsgBase.MQTT_MSG_PINGREQ_TYPE:  			#if BROKER  			                                this.msgReceived = MqttMsgPingReq.Parse(fixedHeaderFirstByte[0]' this.channel); #if TRACE  			#                                Trace.WriteLine(TraceLevel.Frame' "RECV {0}"' this.msgReceived); #endif  			#                                 MqttMsgPingResp pingresp = new MqttMsgPingResp();                                 this.Send(pingresp);                                  // raise message received event                                 //this.OnMqttMsgReceived(this.msgReceived);                                 break; #else  			throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  		#endif  		// PINGRESP message received  		case MqttMsgBase.MQTT_MSG_PINGRESP_TYPE:  			#if BROKER  			                                throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage); #else  			this.msgReceived = MqttMsgPingResp.Parse (fixedHeaderFirstByte [0]' this.channel);  			#if TRACE  			MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' this.msgReceived);  			#endif  			this.syncEndReceiving.Set ();  			break;  		#endif  		// SUBSCRIBE message received  		case MqttMsgBase.MQTT_MSG_SUBSCRIBE_TYPE:  			#if BROKER  			                                MqttMsgSubscribe subscribe = MqttMsgSubscribe.Parse(fixedHeaderFirstByte[0]' this.channel); #if TRACE  			#                                Trace.WriteLine(TraceLevel.Frame' "RECV {0}"' subscribe); #endif  			#                                 // raise message received event                                 this.OnMqttMsgReceived(subscribe);                                  break; #else  			throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  		#endif  		// SUBACK message received  		case MqttMsgBase.MQTT_MSG_SUBACK_TYPE:  			#if BROKER  			                                throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage); #else  			// enqueue SUBACK message received (for QoS Level 1) into the internal queue  			MqttMsgSuback suback = MqttMsgSuback.Parse (fixedHeaderFirstByte [0]' this.channel);  			#if TRACE  			MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' suback);  			#endif  			// enqueue SUBACK message into the internal queue  			this.EnqueueInternal (suback);  			break;  		#endif  		// PUBLISH message received  		case MqttMsgBase.MQTT_MSG_PUBLISH_TYPE:  			MqttMsgPublish publish = MqttMsgPublish.Parse (fixedHeaderFirstByte [0]' this.channel);  			#if TRACE  			MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' publish);  			#endif  			// enqueue PUBLISH message to acknowledge into the inflight queue  			this.EnqueueInflight (publish' MqttMsgFlow.ToAcknowledge);  			break;  		// PUBACK message received  		case MqttMsgBase.MQTT_MSG_PUBACK_TYPE:  			// enqueue PUBACK message received (for QoS Level 1) into the internal queue  			MqttMsgPuback puback = MqttMsgPuback.Parse (fixedHeaderFirstByte [0]' this.channel);  			#if TRACE  			MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' puback);  			#endif  			// enqueue PUBACK message into the internal queue  			this.EnqueueInternal (puback);  			break;  		// PUBREC message received  		case MqttMsgBase.MQTT_MSG_PUBREC_TYPE:  			// enqueue PUBREC message received (for QoS Level 2) into the internal queue  			MqttMsgPubrec pubrec = MqttMsgPubrec.Parse (fixedHeaderFirstByte [0]' this.channel);  			#if TRACE  			MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' pubrec);  			#endif  			// enqueue PUBREC message into the internal queue  			this.EnqueueInternal (pubrec);  			break;  		// PUBREL message received  		case MqttMsgBase.MQTT_MSG_PUBREL_TYPE:  			// enqueue PUBREL message received (for QoS Level 2) into the internal queue  			MqttMsgPubrel pubrel = MqttMsgPubrel.Parse (fixedHeaderFirstByte [0]' this.channel);  			#if TRACE  			MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' pubrel);  			#endif  			// enqueue PUBREL message into the internal queue  			this.EnqueueInternal (pubrel);  			break;  		// PUBCOMP message received  		case MqttMsgBase.MQTT_MSG_PUBCOMP_TYPE:  			// enqueue PUBCOMP message received (for QoS Level 2) into the internal queue  			MqttMsgPubcomp pubcomp = MqttMsgPubcomp.Parse (fixedHeaderFirstByte [0]' this.channel);  			#if TRACE  			MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' pubcomp);  			#endif  			// enqueue PUBCOMP message into the internal queue  			this.EnqueueInternal (pubcomp);  			break;  		// UNSUBSCRIBE message received  		case MqttMsgBase.MQTT_MSG_UNSUBSCRIBE_TYPE:  			#if BROKER  			                                MqttMsgUnsubscribe unsubscribe = MqttMsgUnsubscribe.Parse(fixedHeaderFirstByte[0]' this.channel); #if TRACE  			#                                Trace.WriteLine(TraceLevel.Frame' "RECV {0}"' unsubscribe); #endif  			#                                 // raise message received event                                 this.OnMqttMsgReceived(unsubscribe);                                  break; #else  			throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  		#endif  		// UNSUBACK message received  		case MqttMsgBase.MQTT_MSG_UNSUBACK_TYPE:  			#if BROKER  			                                throw new MqttClientException(MqttClientErrorCode.WrongBrokerMessage); #else  			// enqueue UNSUBACK message received (for QoS Level 1) into the internal queue  			MqttMsgUnsuback unsuback = MqttMsgUnsuback.Parse (fixedHeaderFirstByte [0]' this.channel);  			#if TRACE  			MqttUtility.Trace.WriteLine (TraceLevel.Frame' "RECV {0}"' unsuback);  			#endif  			// enqueue UNSUBACK message into the internal queue  			this.EnqueueInternal (unsuback);  			break;  		#endif  		// DISCONNECT message received  		case MqttMsgDisconnect.MQTT_MSG_DISCONNECT_TYPE:  			#if BROKER  			                                MqttMsgDisconnect disconnect = MqttMsgDisconnect.Parse(fixedHeaderFirstByte[0]' this.channel); #if TRACE  			#                                Trace.WriteLine(TraceLevel.Frame' "RECV {0}"' disconnect); #endif  			#                                 // raise message received event                                 this.OnMqttMsgReceived(disconnect);                                  break; #else  			throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  		#endif  		default:  			throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  		}  		this.exReceiving = null;  	}  }  catch (Exception e) {  	#if TRACE  	MqttUtility.Trace.WriteLine (TraceLevel.Error' "Exception occurred: {0}"' e.ToString ());  	#endif  	this.exReceiving = new MqttCommunicationException (e);  }  
Magic Number,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,ReceiveThread,The following statement contains a magic number: if (this.channel.DataAvailable)  	// read first byte (fixed header)  	readBytes = this.channel.Receive (fixedHeaderFirstByte);  else {  	#if BROKER  	                        // client not connected (client didn't send CONNECT yet)                         if (!this.IsConnected)                         {                             now = Environment.TickCount;                              // if connect timeout exceeded ...                              if ((now - connectTime) >= this.settings.TimeoutOnConnection)                             {                                 // client must close connection                                 this.Close();                                  // client raw disconnection                                 this.OnMqttMsgDisconnected();                             }                         } #endif  	// no bytes available' sleep before retry  	readBytes = 0;  	Fx.SleepThread (10);  }  
Magic Number,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,ReceiveThread,The following statement contains a magic number: Fx.SleepThread (10);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,encodeRemainingLength,The following statement contains a magic number: do {  	digit = remainingLength % 128;  	remainingLength /= 128;  	if (remainingLength > 0)  		digit = digit | 0x80;  	buffer [index++] = (byte)digit;  }  while (remainingLength > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,encodeRemainingLength,The following statement contains a magic number: do {  	digit = remainingLength % 128;  	remainingLength /= 128;  	if (remainingLength > 0)  		digit = digit | 0x80;  	buffer [index++] = (byte)digit;  }  while (remainingLength > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,encodeRemainingLength,The following statement contains a magic number: digit = remainingLength % 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,encodeRemainingLength,The following statement contains a magic number: remainingLength /= 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,decodeRemainingLength,The following statement contains a magic number: do {  	// next digit from stream  	channel.Receive (nextByte);  	digit = nextByte [0];  	value += ((digit & 127) * multiplier);  	multiplier *= 128;  }  while ((digit & 128) != 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,decodeRemainingLength,The following statement contains a magic number: do {  	// next digit from stream  	channel.Receive (nextByte);  	digit = nextByte [0];  	value += ((digit & 127) * multiplier);  	multiplier *= 128;  }  while ((digit & 128) != 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,decodeRemainingLength,The following statement contains a magic number: do {  	// next digit from stream  	channel.Receive (nextByte);  	digit = nextByte [0];  	value += ((digit & 127) * multiplier);  	multiplier *= 128;  }  while ((digit & 128) != 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,decodeRemainingLength,The following statement contains a magic number: value += ((digit & 127) * multiplier);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,decodeRemainingLength,The following statement contains a magic number: multiplier *= 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,GetStringObject,The following statement contains a magic number: if (binary != null) {  	string hexChars = "0123456789ABCDEF";  	StringBuilder sb = new StringBuilder (binary.Length * 2);  	for (int i = 0; i < binary.Length; ++i) {  		sb.Append (hexChars [binary [i] >> 4]);  		sb.Append (hexChars [binary [i] & 0x0F]);  	}  	return sb.ToString ();  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,GetStringObject,The following statement contains a magic number: if (binary != null) {  	string hexChars = "0123456789ABCDEF";  	StringBuilder sb = new StringBuilder (binary.Length * 2);  	for (int i = 0; i < binary.Length; ++i) {  		sb.Append (hexChars [binary [i] >> 4]);  		sb.Append (hexChars [binary [i] & 0x0F]);  	}  	return sb.ToString ();  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,GetStringObject,The following statement contains a magic number: for (int i = 0; i < binary.Length; ++i) {  	sb.Append (hexChars [binary [i] >> 4]);  	sb.Append (hexChars [binary [i] & 0x0F]);  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgBase,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgBase.cs,GetStringObject,The following statement contains a magic number: sb.Append (hexChars [binary [i] >> 4]);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnack,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnack.cs,GetBytes,The following statement contains a magic number: do {  	fixedHeaderSize++;  	temp = temp / 128;  }  while (temp > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnack,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnack.cs,GetBytes,The following statement contains a magic number: temp = temp / 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: protNameUtf8Length = ((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: msg.keepAlivePeriod = (ushort)((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: clientIdUtf8Length = ((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: if (msg.willFlag) {  	willTopicUtf8Length = ((buffer [index++] << 8) & 0xFF00);  	willTopicUtf8Length |= buffer [index++];  	willTopicUtf8 = new byte[willTopicUtf8Length];  	Array.Copy (buffer' index' willTopicUtf8' 0' willTopicUtf8Length);  	index += willTopicUtf8Length;  	msg.willTopic = new String (Encoding.UTF8.GetChars (willTopicUtf8));  	willMessageUtf8Length = ((buffer [index++] << 8) & 0xFF00);  	willMessageUtf8Length |= buffer [index++];  	willMessageUtf8 = new byte[willMessageUtf8Length];  	Array.Copy (buffer' index' willMessageUtf8' 0' willMessageUtf8Length);  	index += willMessageUtf8Length;  	msg.willMessage = new String (Encoding.UTF8.GetChars (willMessageUtf8));  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: if (msg.willFlag) {  	willTopicUtf8Length = ((buffer [index++] << 8) & 0xFF00);  	willTopicUtf8Length |= buffer [index++];  	willTopicUtf8 = new byte[willTopicUtf8Length];  	Array.Copy (buffer' index' willTopicUtf8' 0' willTopicUtf8Length);  	index += willTopicUtf8Length;  	msg.willTopic = new String (Encoding.UTF8.GetChars (willTopicUtf8));  	willMessageUtf8Length = ((buffer [index++] << 8) & 0xFF00);  	willMessageUtf8Length |= buffer [index++];  	willMessageUtf8 = new byte[willMessageUtf8Length];  	Array.Copy (buffer' index' willMessageUtf8' 0' willMessageUtf8Length);  	index += willMessageUtf8Length;  	msg.willMessage = new String (Encoding.UTF8.GetChars (willMessageUtf8));  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: willTopicUtf8Length = ((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: willMessageUtf8Length = ((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: if (isUsernameFlag) {  	usernameUtf8Length = ((buffer [index++] << 8) & 0xFF00);  	usernameUtf8Length |= buffer [index++];  	usernameUtf8 = new byte[usernameUtf8Length];  	Array.Copy (buffer' index' usernameUtf8' 0' usernameUtf8Length);  	index += usernameUtf8Length;  	msg.username = new String (Encoding.UTF8.GetChars (usernameUtf8));  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: usernameUtf8Length = ((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: if (isPasswordFlag) {  	passwordUtf8Length = ((buffer [index++] << 8) & 0xFF00);  	passwordUtf8Length |= buffer [index++];  	passwordUtf8 = new byte[passwordUtf8Length];  	Array.Copy (buffer' index' passwordUtf8' 0' passwordUtf8Length);  	index += passwordUtf8Length;  	msg.password = new String (Encoding.UTF8.GetChars (passwordUtf8));  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,Parse,The following statement contains a magic number: passwordUtf8Length = ((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: payloadSize += clientIdUtf8.Length + 2;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: payloadSize += (willTopicUtf8 != null) ? (willTopicUtf8.Length + 2) : 0;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: payloadSize += (willMessageUtf8 != null) ? (willMessageUtf8.Length + 2) : 0;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: payloadSize += (usernameUtf8 != null) ? (usernameUtf8.Length + 2) : 0;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: payloadSize += (passwordUtf8 != null) ? (passwordUtf8.Length + 2) : 0;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: do {  	fixedHeaderSize++;  	temp = temp / 128;  }  while (temp > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: temp = temp / 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((this.keepAlivePeriod >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((clientIdUtf8.Length >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: if (this.willFlag && (this.willTopic != null)) {  	buffer [index++] = (byte)((willTopicUtf8.Length >> 8) & 0x00FF);  	// MSB  	buffer [index++] = (byte)(willTopicUtf8.Length & 0x00FF);  	// LSB  	Array.Copy (willTopicUtf8' 0' buffer' index' willTopicUtf8.Length);  	index += willTopicUtf8.Length;  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((willTopicUtf8.Length >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: if (this.willFlag && (this.willMessage != null)) {  	buffer [index++] = (byte)((willMessageUtf8.Length >> 8) & 0x00FF);  	// MSB  	buffer [index++] = (byte)(willMessageUtf8.Length & 0x00FF);  	// LSB  	Array.Copy (willMessageUtf8' 0' buffer' index' willMessageUtf8.Length);  	index += willMessageUtf8.Length;  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((willMessageUtf8.Length >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: if (this.username != null) {  	buffer [index++] = (byte)((usernameUtf8.Length >> 8) & 0x00FF);  	// MSB  	buffer [index++] = (byte)(usernameUtf8.Length & 0x00FF);  	// LSB  	Array.Copy (usernameUtf8' 0' buffer' index' usernameUtf8.Length);  	index += usernameUtf8.Length;  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((usernameUtf8.Length >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: if (this.password != null) {  	buffer [index++] = (byte)((passwordUtf8.Length >> 8) & 0x00FF);  	// MSB  	buffer [index++] = (byte)(passwordUtf8.Length & 0x00FF);  	// LSB  	Array.Copy (passwordUtf8' 0' buffer' index' passwordUtf8.Length);  	index += passwordUtf8.Length;  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgConnect,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgConnect.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((passwordUtf8.Length >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPuback.cs,GetBytes,The following statement contains a magic number: do {  	fixedHeaderSize++;  	temp = temp / 128;  }  while (temp > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPuback.cs,GetBytes,The following statement contains a magic number: temp = temp / 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPuback.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((this.messageId >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPuback.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubcomp,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubcomp.cs,GetBytes,The following statement contains a magic number: do {  	fixedHeaderSize++;  	temp = temp / 128;  }  while (temp > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubcomp,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubcomp.cs,GetBytes,The following statement contains a magic number: temp = temp / 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubcomp,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubcomp.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((this.messageId >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubcomp,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubcomp.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,The following statement contains a magic number: varHeaderSize += topicUtf8.Length + 2;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,The following statement contains a magic number: do {  	fixedHeaderSize++;  	temp = temp / 128;  }  while (temp > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,The following statement contains a magic number: temp = temp / 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((topicUtf8.Length >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,The following statement contains a magic number: if ((this.qosLevel == QOS_LEVEL_AT_LEAST_ONCE) || (this.qosLevel == QOS_LEVEL_EXACTLY_ONCE)) {  	// check message identifier assigned  	if (this.messageId == 0)  		throw new MqttClientException (MqttClientErrorCode.WrongMessageId);  	buffer [index++] = (byte)((this.messageId >> 8) & 0x00FF);  	// MSB  	buffer [index++] = (byte)(this.messageId & 0x00FF);  	// LSB  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublish.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((this.messageId >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublish.cs,Parse,The following statement contains a magic number: topicUtf8Length = ((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublish.cs,Parse,The following statement contains a magic number: if ((msg.qosLevel == QOS_LEVEL_AT_LEAST_ONCE) || (msg.qosLevel == QOS_LEVEL_EXACTLY_ONCE)) {  	// message id  	msg.messageId = (ushort)((buffer [index++] << 8) & 0xFF00);  	msg.messageId |= (buffer [index++]);  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPublish,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPublish.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrec,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubrec.cs,GetBytes,The following statement contains a magic number: do {  	fixedHeaderSize++;  	temp = temp / 128;  }  while (temp > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrec,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubrec.cs,GetBytes,The following statement contains a magic number: temp = temp / 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrec,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubrec.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((this.messageId >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrec,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubrec.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrel,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubrel.cs,GetBytes,The following statement contains a magic number: do {  	fixedHeaderSize++;  	temp = temp / 128;  }  while (temp > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrel,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubrel.cs,GetBytes,The following statement contains a magic number: temp = temp / 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrel,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubrel.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((this.messageId >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgPubrel,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgPubrel.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSuback.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSuback.cs,GetBytes,The following statement contains a magic number: do {  	fixedHeaderSize++;  	temp = temp / 128;  }  while (temp > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSuback.cs,GetBytes,The following statement contains a magic number: temp = temp / 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSuback.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((this.messageId >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSubscribe.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSubscribe.cs,Parse,The following statement contains a magic number: do {  	// topic name  	topicUtf8Length = ((buffer [index++] << 8) & 0xFF00);  	topicUtf8Length |= buffer [index++];  	topicUtf8 = new byte[topicUtf8Length];  	Array.Copy (buffer' index' topicUtf8' 0' topicUtf8Length);  	index += topicUtf8Length;  	tmpTopics.Add (new String (Encoding.UTF8.GetChars (topicUtf8)));  	// QoS level  	tmpQosLevels.Add (buffer [index++]);  }  while (index < remainingLength);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSubscribe.cs,Parse,The following statement contains a magic number: topicUtf8Length = ((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,The following statement contains a magic number: for (topicIdx = 0; topicIdx < this.topics.Length; topicIdx++) {  	// check topic length  	if ((this.topics [topicIdx].Length < MIN_TOPIC_LENGTH) || (this.topics [topicIdx].Length > MAX_TOPIC_LENGTH))  		throw new MqttClientException (MqttClientErrorCode.TopicLength);  	topicsUtf8 [topicIdx] = Encoding.UTF8.GetBytes (this.topics [topicIdx]);  	payloadSize += 2;  	// topic size (MSB' LSB)  	payloadSize += topicsUtf8 [topicIdx].Length;  	payloadSize++;  	// byte for QoS  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,The following statement contains a magic number: payloadSize += 2;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,The following statement contains a magic number: do {  	fixedHeaderSize++;  	temp = temp / 128;  }  while (temp > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,The following statement contains a magic number: temp = temp / 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((messageId >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,The following statement contains a magic number: for (topicIdx = 0; topicIdx < this.topics.Length; topicIdx++) {  	// topic name  	buffer [index++] = (byte)((topicsUtf8 [topicIdx].Length >> 8) & 0x00FF);  	// MSB  	buffer [index++] = (byte)(topicsUtf8 [topicIdx].Length & 0x00FF);  	// LSB  	Array.Copy (topicsUtf8 [topicIdx]' 0' buffer' index' topicsUtf8 [topicIdx].Length);  	index += topicsUtf8 [topicIdx].Length;  	// requested QoS  	buffer [index++] = this.qosLevels [topicIdx];  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgSubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgSubscribe.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((topicsUtf8 [topicIdx].Length >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsuback.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsuback.cs,GetBytes,The following statement contains a magic number: do {  	fixedHeaderSize++;  	temp = temp / 128;  }  while (temp > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsuback.cs,GetBytes,The following statement contains a magic number: temp = temp / 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsuback,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsuback.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((this.messageId >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,Parse,The following statement contains a magic number: msg.messageId = (ushort)((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,Parse,The following statement contains a magic number: do {  	// topic name  	topicUtf8Length = ((buffer [index++] << 8) & 0xFF00);  	topicUtf8Length |= buffer [index++];  	topicUtf8 = new byte[topicUtf8Length];  	Array.Copy (buffer' index' topicUtf8' 0' topicUtf8Length);  	index += topicUtf8Length;  	tmpTopics.Add (new String (Encoding.UTF8.GetChars (topicUtf8)));  }  while (index < remainingLength);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,Parse,The following statement contains a magic number: topicUtf8Length = ((buffer [index++] << 8) & 0xFF00);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,GetBytes,The following statement contains a magic number: for (topicIdx = 0; topicIdx < this.topics.Length; topicIdx++) {  	// check topic length  	if ((this.topics [topicIdx].Length < MIN_TOPIC_LENGTH) || (this.topics [topicIdx].Length > MAX_TOPIC_LENGTH))  		throw new MqttClientException (MqttClientErrorCode.TopicLength);  	topicsUtf8 [topicIdx] = Encoding.UTF8.GetBytes (this.topics [topicIdx]);  	payloadSize += 2;  	// topic size (MSB' LSB)  	payloadSize += topicsUtf8 [topicIdx].Length;  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,GetBytes,The following statement contains a magic number: payloadSize += 2;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,GetBytes,The following statement contains a magic number: do {  	fixedHeaderSize++;  	temp = temp / 128;  }  while (temp > 0);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,GetBytes,The following statement contains a magic number: temp = temp / 128;  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((messageId >> 8) & 0x00FF);  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,GetBytes,The following statement contains a magic number: for (topicIdx = 0; topicIdx < this.topics.Length; topicIdx++) {  	// topic name  	buffer [index++] = (byte)((topicsUtf8 [topicIdx].Length >> 8) & 0x00FF);  	// MSB  	buffer [index++] = (byte)(topicsUtf8 [topicIdx].Length & 0x00FF);  	// LSB  	Array.Copy (topicsUtf8 [topicIdx]' 0' buffer' index' topicsUtf8 [topicIdx].Length);  	index += topicsUtf8 [topicIdx].Length;  }  
Magic Number,uPLibrary.Networking.M2Mqtt.Messages,MqttMsgUnsubscribe,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\Messages\MqttMsgUnsubscribe.cs,GetBytes,The following statement contains a magic number: buffer [index++] = (byte)((topicsUtf8 [topicIdx].Length >> 8) & 0x00FF);  
Missing Default,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,EnqueueInflight,The following switch statement is missing a default case: switch (msg.QosLevel) {  // QoS Level 0  case MqttMsgBase.QOS_LEVEL_AT_MOST_ONCE:  	state = MqttMsgState.QueuedQos0;  	break;  // QoS Level 1  case MqttMsgBase.QOS_LEVEL_AT_LEAST_ONCE:  	state = MqttMsgState.QueuedQos1;  	break;  // QoS Level 2  case MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE:  	state = MqttMsgState.QueuedQos2;  	break;  }  
Missing Default,uPLibrary.Networking.M2Mqtt,MqttClient,C:\repos\ppatierno_mqttlocation\M2MqttLocation\m2mqtt\M2Mqtt\MqttClient.cs,ReceiveEventThread,The following switch statement is missing a default case: switch (msg.Type) {  // CONNECT message received  case MqttMsgBase.MQTT_MSG_CONNECT_TYPE:  	#if BROKER  	                                // raise connected client event (CONNECT message received)                                 this.OnMqttMsgConnected((MqttMsgConnect)msg);                                 break; #else  	throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  #endif  // SUBSCRIBE message received  case MqttMsgBase.MQTT_MSG_SUBSCRIBE_TYPE:  	#if BROKER  	                                MqttMsgSubscribe subscribe = (MqttMsgSubscribe)msg;                                 // raise subscribe topic event (SUBSCRIBE message received)                                 this.OnMqttMsgSubscribeReceived(subscribe.MessageId' subscribe.Topics' subscribe.QoSLevels);                                 break; #else  	throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  #endif  // SUBACK message received  case MqttMsgBase.MQTT_MSG_SUBACK_TYPE:  	// raise subscribed topic event (SUBACK message received)  	this.OnMqttMsgSubscribed ((MqttMsgSuback)msg);  	break;  // PUBLISH message received  case MqttMsgBase.MQTT_MSG_PUBLISH_TYPE:  	// raise PUBLISH message received event   	this.OnMqttMsgPublishReceived ((MqttMsgPublish)msg);  	break;  // PUBACK message received  case MqttMsgBase.MQTT_MSG_PUBACK_TYPE:  	// raise published message event  	// (PUBACK received for QoS Level 1)  	this.OnMqttMsgPublished (((MqttMsgPuback)msg).MessageId);  	break;  // PUBREL message received  case MqttMsgBase.MQTT_MSG_PUBREL_TYPE:  	// raise message received event   	// (PUBREL received for QoS Level 2)  	this.OnMqttMsgPublishReceived ((MqttMsgPublish)msg);  	break;  // PUBCOMP message received  case MqttMsgBase.MQTT_MSG_PUBCOMP_TYPE:  	// raise published message event  	// (PUBCOMP received for QoS Level 2)  	this.OnMqttMsgPublished (((MqttMsgPubcomp)msg).MessageId);  	break;  // UNSUBSCRIBE message received from client  case MqttMsgBase.MQTT_MSG_UNSUBSCRIBE_TYPE:  	#if BROKER  	                                MqttMsgUnsubscribe unsubscribe = (MqttMsgUnsubscribe)msg;                                 // raise unsubscribe topic event (UNSUBSCRIBE message received)                                 this.OnMqttMsgUnsubscribeReceived(unsubscribe.MessageId' unsubscribe.Topics);                                 break; #else  	throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  #endif  // UNSUBACK message received  case MqttMsgBase.MQTT_MSG_UNSUBACK_TYPE:  	// raise unsubscribed topic event  	this.OnMqttMsgUnsubscribed (((MqttMsgUnsuback)msg).MessageId);  	break;  // DISCONNECT message received from client  case MqttMsgDisconnect.MQTT_MSG_DISCONNECT_TYPE:  	#if BROKER  	                                // raise disconnected client event (DISCONNECT message received)                                 this.OnMqttMsgDisconnected();                                 break; #else  	throw new MqttClientException (MqttClientErrorCode.WrongBrokerMessage);  #endif  }  
