Implementation smell,Namespace,Class,File,Method,Description
Long Method,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The method has 117 lines of code.
Long Method,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,LoadRulesets,The method has 134 lines of code.
Long Method,TitleGenerator,Options,C:\repos\Measter_TitleGenerator\TitleGenerator\MiscClasses.cs,ToString,The method has 106 lines of code.
Long Method,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,CreateTitleString,The method has 116 lines of code.
Complex Method,TitleGenerator,CK2Data,C:\repos\Measter_TitleGenerator\TitleGenerator\CK2Data.cs,Clear,Cyclomatic complexity of the method is 8
Complex Method,TitleGenerator,CK2Data,C:\repos\Measter_TitleGenerator\TitleGenerator\CK2Data.cs,LoadData,Cyclomatic complexity of the method is 11
Complex Method,TitleGenerator,CK2Data,C:\repos\Measter_TitleGenerator\TitleGenerator\CK2Data.cs,LoadData,Cyclomatic complexity of the method is 10
Complex Method,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,Cyclomatic complexity of the method is 23
Complex Method,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,PopulateControls,Cyclomatic complexity of the method is 12
Complex Method,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,LoadRulesets,Cyclomatic complexity of the method is 62
Complex Method,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,VerifyData,Cyclomatic complexity of the method is 13
Complex Method,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetHistoryTasks,Cyclomatic complexity of the method is 13
Complex Method,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,TitleGenerator,Logger,C:\repos\Measter_TitleGenerator\TitleGenerator\Logger.cs,Log,Cyclomatic complexity of the method is 11
Complex Method,TitleGenerator,Logger,C:\repos\Measter_TitleGenerator\TitleGenerator\Logger.cs,Dump,Cyclomatic complexity of the method is 14
Complex Method,TitleGenerator,ModWriter,C:\repos\Measter_TitleGenerator\TitleGenerator\MiscClasses.cs,CreateModFile,Cyclomatic complexity of the method is 8
Complex Method,TitleGenerator,Options,C:\repos\Measter_TitleGenerator\TitleGenerator\MiscClasses.cs,ToString,Cyclomatic complexity of the method is 58
Complex Method,Measter,MarkovWordGenerator,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\MarkovWordGenerator.cs,NextName,Cyclomatic complexity of the method is 8
Complex Method,TitleGenerator.Tasks,CheckTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\CheckTitleTask.cs,CheckDuchyKingdom,Cyclomatic complexity of the method is 8
Complex Method,TitleGenerator.Tasks,DumpDataTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\DumpDataTask.cs,Execute,Cyclomatic complexity of the method is 9
Complex Method,TitleGenerator.Tasks,LoadTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\LoadTask.cs,Run,Cyclomatic complexity of the method is 12
Complex Method,TitleGenerator.Tasks.History,ApplyProvinceHistory,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\ApplyProvinceHistory.cs,ApplyHistory,Cyclomatic complexity of the method is 8
Complex Method,TitleGenerator.Tasks.History,ClearCharactersTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\ClearCharactersTask.cs,Execute,Cyclomatic complexity of the method is 12
Complex Method,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRulesetCharacters,Cyclomatic complexity of the method is 12
Complex Method,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,Cyclomatic complexity of the method is 20
Complex Method,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,Cyclomatic complexity of the method is 13
Complex Method,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,UpdateSet,Cyclomatic complexity of the method is 10
Complex Method,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GrowCultures,Cyclomatic complexity of the method is 8
Complex Method,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,Cyclomatic complexity of the method is 8
Complex Method,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,WriteCulture,Cyclomatic complexity of the method is 13
Complex Method,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GenerateCharacters,Cyclomatic complexity of the method is 8
Complex Method,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GrowRepublicRealm,Cyclomatic complexity of the method is 11
Complex Method,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetFamilyHoldingName,Cyclomatic complexity of the method is 13
Complex Method,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetPossibleKingdoms,Cyclomatic complexity of the method is 9
Complex Method,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeDukes,Cyclomatic complexity of the method is 12
Complex Method,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetFeudalDuchies,Cyclomatic complexity of the method is 10
Complex Method,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeFeudalRealms,Cyclomatic complexity of the method is 11
Complex Method,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeVassals,Cyclomatic complexity of the method is 20
Complex Method,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreateNewFeudalCharacters,Cyclomatic complexity of the method is 8
Complex Method,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,WriteTitleOwners,Cyclomatic complexity of the method is 11
Complex Method,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetLiegeTitle,Cyclomatic complexity of the method is 11
Complex Method,TitleGenerator.Tasks.TitleGeneration,NationTableTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\NationTableTask.cs,CreateTableEntry,Cyclomatic complexity of the method is 12
Complex Method,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,CreateTitleString,Cyclomatic complexity of the method is 30
Complex Method,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,CreateStringFromCounties,Cyclomatic complexity of the method is 8
Complex Method,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseRule,Cyclomatic complexity of the method is 41
Complex Method,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseCultureGenRules,Cyclomatic complexity of the method is 30
Complex Method,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseMiscRules,Cyclomatic complexity of the method is 36
Complex Method,TitleGenerator.HistoryRules,LawRules,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,FilterLaws,Cyclomatic complexity of the method is 8
Long Parameter List,TitleGenerator,CK2Data,C:\repos\Measter_TitleGenerator\TitleGenerator\CK2Data.cs,LoadData,The method has 7 parameters.
Long Parameter List,TitleGenerator,CK2Data,C:\repos\Measter_TitleGenerator\TitleGenerator\CK2Data.cs,GenerateWords,The method has 5 parameters.
Long Parameter List,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,DataUI_FormClosed,The method has 6 parameters.
Long Parameter List,TitleGenerator,Extensions,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\Extensions.cs,GetStandardDeviation,The method has 5 parameters.
Long Parameter List,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeDeJureLiege,The method has 5 parameters.
Long Parameter List,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The method has 10 parameters.
Long Parameter List,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreatePatritians,The method has 5 parameters.
Long Parameter List,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeFeudalRealms,The method has 5 parameters.
Long Parameter List,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,ParseScript,The method has 14 parameters.
Long Parameter List,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,MakeNameForTitle,The method has 6 parameters.
Long Parameter List,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,GetNewName,The method has 5 parameters.
Long Parameter List,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseLaws,The method has 6 parameters.
Long Statement,TitleGenerator,CK2Data,C:\repos\Measter_TitleGenerator\TitleGenerator\CK2Data.cs,SetInstallPath,The length of the statement  "	if (!File.Exists (Path.Combine (ckDir.FullName' "ck2.exe").Replace ('\\'' '/')) && !File.Exists (Path.Combine (ckDir.FullName' "ck2").Replace ('\\'' '/')) && !File.Exists (Path.Combine (ckDir.FullName' "CK2game.exe").Replace ('\\'' '/')) && !File.Exists (Path.Combine (ckDir.FullName' "GK2game").Replace ('\\'' '/'))) { " is 319.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,UsingCondition,The length of the statement  "	if (line.Equals ("$IfNoCul"' StringComparison.InvariantCultureIgnoreCase) && o.CultureLimit == Options.CultureOption.None) " is 122.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,UsingCondition,The length of the statement  "	if (line.Equals ("$IfCul"' StringComparison.InvariantCultureIgnoreCase) && o.CultureLimit == Options.CultureOption.Culture) " is 123.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,UsingCondition,The length of the statement  "	if (line.Equals ("$IfCulGroup"' StringComparison.InvariantCultureIgnoreCase) && o.CultureLimit == Options.CultureOption.CultureGroup) " is 133.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,UsingCondition,The length of the statement  "	if (line.Equals ("$IfNoRel"' StringComparison.InvariantCultureIgnoreCase) && o.ReligionLimit == Options.ReligionOption.None) " is 124.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,UsingCondition,The length of the statement  "	if (line.Equals ("$IfRel"' StringComparison.InvariantCultureIgnoreCase) && o.ReligionLimit == Options.ReligionOption.Religion) " is 126.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,UsingCondition,The length of the statement  "	if (line.Equals ("$IfRelGroup"' StringComparison.InvariantCultureIgnoreCase) && o.ReligionLimit == Options.ReligionOption.ReligionGroup) " is 136.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,LoadCK2,The length of the statement  "	m_ruleSets = dir.GetFiles ("*.txt"' SearchOption.TopDirectoryOnly).ToDictionary (f => f.Name.Replace (f.Extension' "")); " is 120.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,LoadCK2,The length of the statement  "	m_gainsScripts = dir.GetFiles ("*.txt"' SearchOption.TopDirectoryOnly).ToDictionary (f => f.Name.Replace (f.Extension' "")); " is 124.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,LoadCK2,The length of the statement  "	m_allowsScripts = dir.GetFiles ("*.txt"' SearchOption.TopDirectoryOnly).ToDictionary (f => f.Name.Replace (f.Extension' "")); " is 125.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,PopulateControls,The length of the statement  "		string dirTemp = m.ModPathType == ModReader.Folder.CKDir ? m_ck2Data.InstallDir.FullName : m_ck2Data.MyDocsDir.FullName; " is 120.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,PopulateControls,The length of the statement  "		if (!Directory.Exists (Path.Combine (dirTemp' "common/landed_titles")) && !Directory.Exists (Path.Combine (dirTemp' "common/religions")) && !Directory.Exists (Path.Combine (dirTemp' "common/cultures")) && !Directory.Exists (Path.Combine (dirTemp' "common/dynasties")) && !Directory.Exists (Path.Combine (dirTemp' "gfx/flags")) && !Directory.Exists (Path.Combine (dirTemp' "localisation")) && !Directory.Exists (Path.Combine (dirTemp' "history/provinces")) && !Directory.Exists (Path.Combine (dirTemp' "map"))) " is 509.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,ClearCK2,The length of the statement  "	m_ck2Data.Clear (CK2Data.DataTypes.Mods | CK2Data.DataTypes.Religions | CK2Data.DataTypes.Cultures | CK2Data.DataTypes.Dynasties | CK2Data.DataTypes.LandedTitles | CK2Data.DataTypes.Localisations | CK2Data.DataTypes.Provinces); " is 227.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,LoadRulesets,The length of the statement  "		if (rule.LawRules.LevyTax.Min != 0 && rule.LawRules.LevyTax.Normal != 0 && rule.LawRules.LevyTax.Large != 0 && rule.LawRules.LevyTax.Max != 0) { " is 144.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,RunTasks,The length of the statement  "		ShowError ("An error was encountered running the selected task.\n\nPlease check the log file."' "Unable to complete task."); " is 124.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,btnLoadData_Click,The length of the statement  "		ShowError ("An error was encountered while parsing the Rule Sets.\n\nPlease check the log file."' "Unable to load data."); " is 122.
Long Statement,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,btnGenerateTitles_Click,The length of the statement  "			var res = MessageBox.Show (this' "Unable to generate cultures because of incomplete Name Data.\n\n" + "Continue with generation?"' "Incomplete Name Data"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 204.
Long Statement,TitleGenerator,Options,C:\repos\Measter_TitleGenerator\TitleGenerator\MiscClasses.cs,ToString,The length of the statement  "	sb.AppendLine (" --Levy/Tax Weight: " + RuleSet.LawRules.LevyTax.Min + " " + RuleSet.LawRules.LevyTax.Normal + " " + RuleSet.LawRules.LevyTax.Large + " " + RuleSet.LawRules.LevyTax.Max); " is 186.
Long Statement,TitleGenerator,Options,C:\repos\Measter_TitleGenerator\TitleGenerator\MiscClasses.cs,ToString,The length of the statement  "		sb.AppendFormat ("        Character - IsFemale: {0}; Religion: {1}; Culture: {2};"' rule.IsFemale' rule.Religion' rule.Culture); " is 128.
Long Statement,Measter,Tuple,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\Tuple.cs,Equals,The length of the statement  "	return EqualityComparer<TFirst>.Default.Equals (First' other.First) && EqualityComparer<TSecond>.Default.Equals (Second' other.Second); " is 135.
Long Statement,Measter,Tuple,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\Tuple.cs,GetHashCode,The length of the statement  "		return (EqualityComparer<TFirst>.Default.GetHashCode (First) * 397) ^ EqualityComparer<TSecond>.Default.GetHashCode (Second); " is 125.
Long Statement,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The length of the statement  "	temp = Color.FromArgb ((int)Math.Round (255 * (R1 + m))' (int)Math.Round (255 * (G1 + m))' (int)Math.Round (255 * (B1 + m))); " is 125.
Long Statement,TitleGenerator.Tasks.History,ClearCharactersTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\ClearCharactersTask.cs,Execute,The length of the statement  "		dirTemp = m.ModPathType == ModReader.Folder.CKDir ? m_options.Data.InstallDir.FullName : m_options.Data.MyDocsDir.FullName; " is 123.
Long Statement,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,Execute,The length of the statement  "	StreamWriter charWriter = new StreamWriter (charFile.Open (FileMode.Create' FileAccess.Write)' Encoding.GetEncoding (1252)); " is 124.
Long Statement,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,WriteTitleOwner,The length of the statement  "	StreamWriter titleWriter = new StreamWriter (titleFile.Open (FileMode.Create' FileAccess.Write)' Encoding.GetEncoding (1252)); " is 126.
Long Statement,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The length of the statement  "				MakeCharactersForTitles (charWriter' availDynasties' tList' true' title.TitleID' true' title.TitleID' curChars [0]' null); " is 122.
Long Statement,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The length of the statement  "			MakeCharactersForTitles (charWriter' availDynasties' subTitleList' true' title.TitleID' true' title.TitleID' null' curChars [0]); " is 129.
Long Statement,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The length of the statement  "			dyn = m_options.Data.GetDynastyByCulture (availDynasties' m_options.Data.GetRandomCulture (m_options.Random).Value' m_options.Random); " is 134.
Long Statement,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The length of the statement  "			Log (" --Fetched realm laws: " + "\n      Succession: " + laws.Succession + "\n      Gender: " + laws.Gender + "\n      Crown: " + laws.CrownAuthority + "\n      Feudal Levy: " + laws.FeudalLevy + "\n      Feudal Tax: " + laws.FeudalTax + "\n      City Levy: " + laws.CityLevy + "\n      City Tax: " + laws.CityTax + "\n      Church Levy: " + laws.ChurchLevy + "\n      Church Tax: " + laws.ChurchTax + "\n      Iqta Levy: " + laws.IqtaLevy + "\n      Iqta Tax:" + laws.IqtaTax); " is 479.
Long Statement,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,MakeCultureGroups,The length of the statement  "			m_log.Log (String.Format ("CG Gen: Province {0}-{1}: Title ID is null or doesn't exist."' prov.ID' prov.Title)' Logger.LogType.Error); " is 134.
Long Statement,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,MakeCultureGroups,The length of the statement  "			m_log.Log (string.Format ("CG Gen: Province {0}-{1}: No adjective localisation."' prov.ID' prov.Title)' Logger.LogType.Error); " is 126.
Long Statement,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,MakeCultureGroups,The length of the statement  "			m_log.Log (String.Format ("CG Gen: Province {0}-{1}: Culture is null or doesn't exist."' prov.ID' prov.Title)' Logger.LogType.Error); " is 133.
Long Statement,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,WriteCultures,The length of the statement  "	StreamWriter cultures = new StreamWriter (cultureFile.Open (FileMode.Create' FileAccess.Write)' Encoding.GetEncoding (1252)); " is 125.
Long Statement,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeRepublicChars,The length of the statement  "			m_log.Log (String.Format ("Province {0}-{1}: Title ID is null or doesn't exist."' prov.ID' prov.Title)' Logger.LogType.Error); " is 126.
Long Statement,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeRepublicChars,The length of the statement  "		if (prov.Culture == null || prov.Religion == null || !m_options.Data.ContainsCulture (prov.Culture) || !m_options.Data.Religions.ContainsKey (prov.Religion)) { " is 159.
Long Statement,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeRepublicChars,The length of the statement  "			m_log.Log (String.Format ("Province {0}-{1}: Culture or religion is null or doesn't exist. {2}' {3}"' prov.ID' prov.Title' prov.Culture' prov.Religion)' Logger.LogType.Error); " is 175.
Long Statement,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeDukes,The length of the statement  "			duchy.SubTitles.Add (m_options.Data.Counties [provsOwnerByChar [0].Title].TitleID' m_options.Data.Counties [provsOwnerByChar [0].Title]); " is 137.
Long Statement,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeVassals,The length of the statement  "	int numVassals = vassalTier == TitleTier.Count ? vassalSize : m_options.Random.Next ((int)(vassalSize * 0.75)' (int)(vassalSize * 1.25)); " is 137.
Long Statement,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreateNewFeudalCharacters,The length of the statement  "			m_log.Log (String.Format ("Province {0}-{1}: Title ID is null or doesn't exist."' prov.ID' prov.Title)' Logger.LogType.Error); " is 126.
Long Statement,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreateNewFeudalCharacters,The length of the statement  "		if (prov.Culture == null || prov.Religion == null || !m_options.Data.ContainsCulture (prov.Culture) || !m_options.Data.Religions.ContainsKey (prov.Religion)) { " is 159.
Long Statement,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreateNewFeudalCharacters,The length of the statement  "			m_log.Log (String.Format ("Province {0}-{1}: Culture or religion is null or doesn't exist. {2}' {3}"' prov.ID' prov.Title' prov.Culture' prov.Religion)' Logger.LogType.Error); " is 175.
Long Statement,TitleGenerator.Tasks.TitleGeneration,NationTableTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\NationTableTask.cs,Execute,The length of the statement  "	StreamWriter nations = new StreamWriter (nationFile.Open (FileMode.Create' FileAccess.Write)' Encoding.GetEncoding (1252)); " is 123.
Long Statement,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,Execute,The length of the statement  "	StreamWriter titles = new StreamWriter (titleFile.Open (FileMode.Create' FileAccess.Write)' Encoding.GetEncoding (1252)); " is 121.
Long Statement,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,CreateTitleString,The length of the statement  "		scriptTemp = ParseScript (scriptTemp' prefix + t.TitleID.Substring (2)' t.Culture' m_options.Data.GetCulture (t.Culture).Group.Name' t.Religion' m_options.Data.Religions [t.Religion].Group.Name' capital' "c" + t.TitleID.Substring (1)' "d" + t.TitleID.Substring (1)' "k" + t.TitleID.Substring (1)' "e" + t.TitleID.Substring (1)' m_options.CountyLimit' m_options.DuchyLimit' m_options.KingdomLimit); " is 397.
Long Statement,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,CreateTitleString,The length of the statement  "		scriptTemp = ParseScript (scriptTemp' prefix + t.TitleID.Substring (2)' t.Culture' m_options.Data.GetCulture (t.Culture).Group.Name' t.Religion' m_options.Data.Religions [t.Religion].Group.Name' capital' "c" + t.TitleID.Substring (1)' "d" + t.TitleID.Substring (1)' "k" + t.TitleID.Substring (1)' "e" + t.TitleID.Substring (1)' m_options.CountyLimit' m_options.DuchyLimit' m_options.KingdomLimit); " is 397.
Complex Conditional,TitleGenerator,CK2Data,C:\repos\Measter_TitleGenerator\TitleGenerator\CK2Data.cs,SetInstallPath,The conditional expression  "!File.Exists (Path.Combine (ckDir.FullName' "ck2.exe").Replace ('\\'' '/')) && !File.Exists (Path.Combine (ckDir.FullName' "ck2").Replace ('\\'' '/')) && !File.Exists (Path.Combine (ckDir.FullName' "CK2game.exe").Replace ('\\'' '/')) && !File.Exists (Path.Combine (ckDir.FullName' "GK2game").Replace ('\\'' '/'))"  is complex.
Complex Conditional,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,PopulateControls,The conditional expression  "!Directory.Exists (Path.Combine (dirTemp' "common/landed_titles")) && !Directory.Exists (Path.Combine (dirTemp' "common/religions")) && !Directory.Exists (Path.Combine (dirTemp' "common/cultures")) && !Directory.Exists (Path.Combine (dirTemp' "common/dynasties")) && !Directory.Exists (Path.Combine (dirTemp' "gfx/flags")) && !Directory.Exists (Path.Combine (dirTemp' "localisation")) && !Directory.Exists (Path.Combine (dirTemp' "history/provinces")) && !Directory.Exists (Path.Combine (dirTemp' "map"))"  is complex.
Complex Conditional,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,LoadRulesets,The conditional expression  "rule.LawRules.LevyTax.Min != 0 && rule.LawRules.LevyTax.Normal != 0 && rule.LawRules.LevyTax.Large != 0 && rule.LawRules.LevyTax.Max != 0"  is complex.
Complex Conditional,TitleGenerator.Tasks,CheckTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\CheckTitleTask.cs,CheckDuchyKingdom,The conditional expression  "d.Primary || d.Landless || (d.IsTitular && d.Capital == -1)"  is complex.
Complex Conditional,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeRepublicChars,The conditional expression  "prov.Culture == null || prov.Religion == null || !m_options.Data.ContainsCulture (prov.Culture) || !m_options.Data.Religions.ContainsKey (prov.Religion)"  is complex.
Complex Conditional,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreateNewFeudalCharacters,The conditional expression  "prov.Culture == null || prov.Religion == null || !m_options.Data.ContainsCulture (prov.Culture) || !m_options.Data.Religions.ContainsKey (prov.Religion)"  is complex.
Empty Catch Block,FolderSelect,Reflector,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\Reflector.cs,New,The method has an empty catch block.
Magic Number,TitleGenerator,CK2Data,C:\repos\Measter_TitleGenerator\TitleGenerator\CK2Data.cs,GetRandomCulture,The following statement contains a magic number: if (m_useCustomCulture && rand.Next (2) == 0)  	return m_customCultures.RandomItem (rand);  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,DataUI,The following statement contains a magic number: m_log.LogLength = 100;  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,DataUI,The following statement contains a magic number: m_settings.Version = 5;  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistoryMode.SelectedIndex == 0) {  	ho = Options.HistoryOption.None;  	cho = Options.CreateHistoryOption.None;  }  else if (cbHistoryMode.SelectedIndex == 1) {  	// Clear history mode.  	cho = Options.CreateHistoryOption.None;  	if (cbHistoryClearLevel.SelectedIndex == 0)  		ho = Options.HistoryOption.Duchy;  	else if (cbHistoryClearLevel.SelectedIndex == 1)  		ho = Options.HistoryOption.Kingdom;  	else  		ho = Options.HistoryOption.Empire;  }  else {  	// Create history mode.  	ho = Options.HistoryOption.County;  	if (cbHistoryCreateType.SelectedIndex == 0)  		cho = Options.CreateHistoryOption.Counts;  	else if (cbHistoryCreateType.SelectedIndex == 1)  		cho = Options.CreateHistoryOption.Dukes;  	else if (cbHistoryCreateType.SelectedIndex == 2)  		cho = Options.CreateHistoryOption.Kings;  	else if (cbHistoryCreateType.SelectedIndex == 3)  		cho = Options.CreateHistoryOption.Empires;  	else  		cho = Options.CreateHistoryOption.Random;  }  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistoryMode.SelectedIndex == 0) {  	ho = Options.HistoryOption.None;  	cho = Options.CreateHistoryOption.None;  }  else if (cbHistoryMode.SelectedIndex == 1) {  	// Clear history mode.  	cho = Options.CreateHistoryOption.None;  	if (cbHistoryClearLevel.SelectedIndex == 0)  		ho = Options.HistoryOption.Duchy;  	else if (cbHistoryClearLevel.SelectedIndex == 1)  		ho = Options.HistoryOption.Kingdom;  	else  		ho = Options.HistoryOption.Empire;  }  else {  	// Create history mode.  	ho = Options.HistoryOption.County;  	if (cbHistoryCreateType.SelectedIndex == 0)  		cho = Options.CreateHistoryOption.Counts;  	else if (cbHistoryCreateType.SelectedIndex == 1)  		cho = Options.CreateHistoryOption.Dukes;  	else if (cbHistoryCreateType.SelectedIndex == 2)  		cho = Options.CreateHistoryOption.Kings;  	else if (cbHistoryCreateType.SelectedIndex == 3)  		cho = Options.CreateHistoryOption.Empires;  	else  		cho = Options.CreateHistoryOption.Random;  }  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistoryMode.SelectedIndex == 1) {  	// Clear history mode.  	cho = Options.CreateHistoryOption.None;  	if (cbHistoryClearLevel.SelectedIndex == 0)  		ho = Options.HistoryOption.Duchy;  	else if (cbHistoryClearLevel.SelectedIndex == 1)  		ho = Options.HistoryOption.Kingdom;  	else  		ho = Options.HistoryOption.Empire;  }  else {  	// Create history mode.  	ho = Options.HistoryOption.County;  	if (cbHistoryCreateType.SelectedIndex == 0)  		cho = Options.CreateHistoryOption.Counts;  	else if (cbHistoryCreateType.SelectedIndex == 1)  		cho = Options.CreateHistoryOption.Dukes;  	else if (cbHistoryCreateType.SelectedIndex == 2)  		cho = Options.CreateHistoryOption.Kings;  	else if (cbHistoryCreateType.SelectedIndex == 3)  		cho = Options.CreateHistoryOption.Empires;  	else  		cho = Options.CreateHistoryOption.Random;  }  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistoryMode.SelectedIndex == 1) {  	// Clear history mode.  	cho = Options.CreateHistoryOption.None;  	if (cbHistoryClearLevel.SelectedIndex == 0)  		ho = Options.HistoryOption.Duchy;  	else if (cbHistoryClearLevel.SelectedIndex == 1)  		ho = Options.HistoryOption.Kingdom;  	else  		ho = Options.HistoryOption.Empire;  }  else {  	// Create history mode.  	ho = Options.HistoryOption.County;  	if (cbHistoryCreateType.SelectedIndex == 0)  		cho = Options.CreateHistoryOption.Counts;  	else if (cbHistoryCreateType.SelectedIndex == 1)  		cho = Options.CreateHistoryOption.Dukes;  	else if (cbHistoryCreateType.SelectedIndex == 2)  		cho = Options.CreateHistoryOption.Kings;  	else if (cbHistoryCreateType.SelectedIndex == 3)  		cho = Options.CreateHistoryOption.Empires;  	else  		cho = Options.CreateHistoryOption.Random;  }  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistoryCreateType.SelectedIndex == 0)  	cho = Options.CreateHistoryOption.Counts;  else if (cbHistoryCreateType.SelectedIndex == 1)  	cho = Options.CreateHistoryOption.Dukes;  else if (cbHistoryCreateType.SelectedIndex == 2)  	cho = Options.CreateHistoryOption.Kings;  else if (cbHistoryCreateType.SelectedIndex == 3)  	cho = Options.CreateHistoryOption.Empires;  else  	cho = Options.CreateHistoryOption.Random;  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistoryCreateType.SelectedIndex == 0)  	cho = Options.CreateHistoryOption.Counts;  else if (cbHistoryCreateType.SelectedIndex == 1)  	cho = Options.CreateHistoryOption.Dukes;  else if (cbHistoryCreateType.SelectedIndex == 2)  	cho = Options.CreateHistoryOption.Kings;  else if (cbHistoryCreateType.SelectedIndex == 3)  	cho = Options.CreateHistoryOption.Empires;  else  	cho = Options.CreateHistoryOption.Random;  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistoryCreateType.SelectedIndex == 1)  	cho = Options.CreateHistoryOption.Dukes;  else if (cbHistoryCreateType.SelectedIndex == 2)  	cho = Options.CreateHistoryOption.Kings;  else if (cbHistoryCreateType.SelectedIndex == 3)  	cho = Options.CreateHistoryOption.Empires;  else  	cho = Options.CreateHistoryOption.Random;  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistoryCreateType.SelectedIndex == 1)  	cho = Options.CreateHistoryOption.Dukes;  else if (cbHistoryCreateType.SelectedIndex == 2)  	cho = Options.CreateHistoryOption.Kings;  else if (cbHistoryCreateType.SelectedIndex == 3)  	cho = Options.CreateHistoryOption.Empires;  else  	cho = Options.CreateHistoryOption.Random;  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistoryCreateType.SelectedIndex == 2)  	cho = Options.CreateHistoryOption.Kings;  else if (cbHistoryCreateType.SelectedIndex == 3)  	cho = Options.CreateHistoryOption.Empires;  else  	cho = Options.CreateHistoryOption.Random;  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistoryCreateType.SelectedIndex == 2)  	cho = Options.CreateHistoryOption.Kings;  else if (cbHistoryCreateType.SelectedIndex == 3)  	cho = Options.CreateHistoryOption.Empires;  else  	cho = Options.CreateHistoryOption.Random;  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistoryCreateType.SelectedIndex == 3)  	cho = Options.CreateHistoryOption.Empires;  else  	cho = Options.CreateHistoryOption.Random;  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: if (cbHistorySeed.Checked)  	seed = (int)nudHistorySeed.Value;  else {  	TimeSpan time = DateTime.Now - new DateTime (1970' 1' 1' 0' 0' 0);  	seed = (int)time.TotalSeconds;  }  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,GetOptions,The following statement contains a magic number: o.CharID = m_rules.CharacterStartID != -1 ? m_rules.CharacterStartID : 100000000;  
Magic Number,TitleGenerator,DataUI,C:\repos\Measter_TitleGenerator\TitleGenerator\DataUI.cs,cbHistoryCreateType_SelectedIndexChanged,The following statement contains a magic number: gbHistoryFullCreateOptions.Enabled = cbHistoryCreateType.SelectedIndex == 4;  
Magic Number,TitleGenerator,Extensions,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\Extensions.cs,GetStandardDeviation,The following statement contains a magic number: for (int i = 0; i < l.Length; i++)  	l [i] = Math.Pow (l [i] - mean' 2);  
Magic Number,TitleGenerator,Extensions,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\Extensions.cs,GetStandardDeviation,The following statement contains a magic number: l [i] = Math.Pow (l [i] - mean' 2);  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: using (FileStream fs = new FileStream (Filename' FileMode.Open' FileAccess.Read' FileShare.None))  	using (BinaryReader br = new BinaryReader (fs)) {  		byte vers = br.ReadByte ();  		if (vers == 1)  			LoadVersion1 (br);  		else if (vers == 2)  			LoadVersion2 (br);  		else if (vers == 3)  			LoadVersion3 (br);  		else if (vers == 4)  			LoadVersion4 (br);  		else  			LoadVersion5 (br);  	}  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: using (FileStream fs = new FileStream (Filename' FileMode.Open' FileAccess.Read' FileShare.None))  	using (BinaryReader br = new BinaryReader (fs)) {  		byte vers = br.ReadByte ();  		if (vers == 1)  			LoadVersion1 (br);  		else if (vers == 2)  			LoadVersion2 (br);  		else if (vers == 3)  			LoadVersion3 (br);  		else if (vers == 4)  			LoadVersion4 (br);  		else  			LoadVersion5 (br);  	}  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: using (FileStream fs = new FileStream (Filename' FileMode.Open' FileAccess.Read' FileShare.None))  	using (BinaryReader br = new BinaryReader (fs)) {  		byte vers = br.ReadByte ();  		if (vers == 1)  			LoadVersion1 (br);  		else if (vers == 2)  			LoadVersion2 (br);  		else if (vers == 3)  			LoadVersion3 (br);  		else if (vers == 4)  			LoadVersion4 (br);  		else  			LoadVersion5 (br);  	}  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: using (BinaryReader br = new BinaryReader (fs)) {  	byte vers = br.ReadByte ();  	if (vers == 1)  		LoadVersion1 (br);  	else if (vers == 2)  		LoadVersion2 (br);  	else if (vers == 3)  		LoadVersion3 (br);  	else if (vers == 4)  		LoadVersion4 (br);  	else  		LoadVersion5 (br);  }  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: using (BinaryReader br = new BinaryReader (fs)) {  	byte vers = br.ReadByte ();  	if (vers == 1)  		LoadVersion1 (br);  	else if (vers == 2)  		LoadVersion2 (br);  	else if (vers == 3)  		LoadVersion3 (br);  	else if (vers == 4)  		LoadVersion4 (br);  	else  		LoadVersion5 (br);  }  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: using (BinaryReader br = new BinaryReader (fs)) {  	byte vers = br.ReadByte ();  	if (vers == 1)  		LoadVersion1 (br);  	else if (vers == 2)  		LoadVersion2 (br);  	else if (vers == 3)  		LoadVersion3 (br);  	else if (vers == 4)  		LoadVersion4 (br);  	else  		LoadVersion5 (br);  }  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: if (vers == 1)  	LoadVersion1 (br);  else if (vers == 2)  	LoadVersion2 (br);  else if (vers == 3)  	LoadVersion3 (br);  else if (vers == 4)  	LoadVersion4 (br);  else  	LoadVersion5 (br);  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: if (vers == 1)  	LoadVersion1 (br);  else if (vers == 2)  	LoadVersion2 (br);  else if (vers == 3)  	LoadVersion3 (br);  else if (vers == 4)  	LoadVersion4 (br);  else  	LoadVersion5 (br);  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: if (vers == 1)  	LoadVersion1 (br);  else if (vers == 2)  	LoadVersion2 (br);  else if (vers == 3)  	LoadVersion3 (br);  else if (vers == 4)  	LoadVersion4 (br);  else  	LoadVersion5 (br);  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: if (vers == 2)  	LoadVersion2 (br);  else if (vers == 3)  	LoadVersion3 (br);  else if (vers == 4)  	LoadVersion4 (br);  else  	LoadVersion5 (br);  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: if (vers == 2)  	LoadVersion2 (br);  else if (vers == 3)  	LoadVersion3 (br);  else if (vers == 4)  	LoadVersion4 (br);  else  	LoadVersion5 (br);  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: if (vers == 2)  	LoadVersion2 (br);  else if (vers == 3)  	LoadVersion3 (br);  else if (vers == 4)  	LoadVersion4 (br);  else  	LoadVersion5 (br);  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: if (vers == 3)  	LoadVersion3 (br);  else if (vers == 4)  	LoadVersion4 (br);  else  	LoadVersion5 (br);  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: if (vers == 3)  	LoadVersion3 (br);  else if (vers == 4)  	LoadVersion4 (br);  else  	LoadVersion5 (br);  
Magic Number,TitleGenerator,SettingsStore,C:\repos\Measter_TitleGenerator\TitleGenerator\SettingsStore.cs,Load,The following statement contains a magic number: if (vers == 4)  	LoadVersion4 (br);  else  	LoadVersion5 (br);  
Magic Number,TitleGenerator,ProgressPopup,C:\repos\Measter_TitleGenerator\TitleGenerator\ProgressPopup.cs,UpdateProgressBar,The following statement contains a magic number: pbProgress.Value = (int)(progress * 100);  
Magic Number,FolderSelect,FolderSelectDialog,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\FolderSelectDialog.cs,ShowDialog,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6) {  	var r = new Reflector ("System.Windows.Forms");  	uint num = 0;  	Type typeIFileDialog = r.GetType ("FileDialogNative.IFileDialog");  	object dialog = r.Call (ofd' "CreateVistaDialog");  	r.Call (ofd' "OnBeforeVistaDialog"' dialog);  	uint options = (uint)r.CallAs (typeof(System.Windows.Forms.FileDialog)' ofd' "GetOptions");  	options |= (uint)r.GetEnum ("FileDialogNative.FOS"' "FOS_PICKFOLDERS");  	r.CallAs (typeIFileDialog' dialog' "SetOptions"' options);  	object pfde = r.New ("FileDialog.VistaDialogEvents"' ofd);  	object[] parameters = new object[] {  		pfde'  		num  	};  	r.CallAs2 (typeIFileDialog' dialog' "Advise"' parameters);  	num = (uint)parameters [1];  	try {  		int num2 = (int)r.CallAs (typeIFileDialog' dialog' "Show"' hWndOwner);  		flag = 0 == num2;  	}  	finally {  		r.CallAs (typeIFileDialog' dialog' "Unadvise"' num);  		GC.KeepAlive (pfde);  	}  }  else {  	var fbd = new FolderBrowserDialog ();  	fbd.Description = this.Title;  	fbd.SelectedPath = this.InitialDirectory;  	fbd.ShowNewFolderButton = false;  	if (fbd.ShowDialog (new WindowWrapper (hWndOwner)) != DialogResult.OK)  		return false;  	ofd.FileName = fbd.SelectedPath;  	flag = true;  }  
Magic Number,Measter,MarkovWordGenerator,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\MarkovWordGenerator.cs,MarkovWordGenerator,The following statement contains a magic number: m_order = order < 1 ? 3 : order;  
Magic Number,Measter,MarkovWordGenerator,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\MarkovWordGenerator.cs,SampleWord,The following statement contains a magic number: nulledWord = String.Concat (new string (m_nullChar' 3)' s.ToUpper ()' m_nullChar);  
Magic Number,Measter,Tuple,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\Tuple.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (EqualityComparer<TFirst>.Default.GetHashCode (First) * 397) ^ EqualityComparer<TSecond>.Default.GetHashCode (Second);  }  
Magic Number,Measter,Tuple,C:\repos\Measter_TitleGenerator\TitleGenerator\Includes\Tuple.cs,GetHashCode,The following statement contains a magic number: return (EqualityComparer<TFirst>.Default.GetHashCode (First) * 397) ^ EqualityComparer<TSecond>.Default.GetHashCode (Second);  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: hue *= 360;  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: H = hue / 60;  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: X = C * (1 - Math.Abs ((H % 2) - 1));  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 1) {  	R1 = C;  	G1 = X;  	B1 = 0;  }  else if (H < 2) {  	R1 = X;  	G1 = C;  	B1 = 0;  }  else if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 1) {  	R1 = C;  	G1 = X;  	B1 = 0;  }  else if (H < 2) {  	R1 = X;  	G1 = C;  	B1 = 0;  }  else if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 1) {  	R1 = C;  	G1 = X;  	B1 = 0;  }  else if (H < 2) {  	R1 = X;  	G1 = C;  	B1 = 0;  }  else if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 1) {  	R1 = C;  	G1 = X;  	B1 = 0;  }  else if (H < 2) {  	R1 = X;  	G1 = C;  	B1 = 0;  }  else if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 1) {  	R1 = C;  	G1 = X;  	B1 = 0;  }  else if (H < 2) {  	R1 = X;  	G1 = C;  	B1 = 0;  }  else if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 2) {  	R1 = X;  	G1 = C;  	B1 = 0;  }  else if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 2) {  	R1 = X;  	G1 = C;  	B1 = 0;  }  else if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 2) {  	R1 = X;  	G1 = C;  	B1 = 0;  }  else if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 2) {  	R1 = X;  	G1 = C;  	B1 = 0;  }  else if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 2) {  	R1 = X;  	G1 = C;  	B1 = 0;  }  else if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 3) {  	R1 = 0;  	G1 = C;  	B1 = X;  }  else if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 4) {  	R1 = 0;  	G1 = X;  	B1 = C;  }  else if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H < 5) {  	R1 = X;  	G1 = 0;  	B1 = C;  }  else if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: if (H <= 6) {  	R1 = C;  	G1 = 0;  	B1 = X;  }  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: temp = Color.FromArgb ((int)Math.Round (255 * (R1 + m))' (int)Math.Round (255 * (G1 + m))' (int)Math.Round (255 * (B1 + m)));  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: temp = Color.FromArgb ((int)Math.Round (255 * (R1 + m))' (int)Math.Round (255 * (G1 + m))' (int)Math.Round (255 * (B1 + m)));  
Magic Number,TitleGenerator.Tasks,SharedTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\SharedTask.cs,HSVtoRGB,The following statement contains a magic number: temp = Color.FromArgb ((int)Math.Round (255 * (R1 + m))' (int)Math.Round (255 * (G1 + m))' (int)Math.Round (255 * (B1 + m)));  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,SaveProvinceHistory,The following statement contains a magic number: foreach (var pair in m_options.Data.Provinces) {  	prov = pair.Value;  	if (m_options.RuleSet.IgnoredTitles.Contains (prov.Title))  		continue;  	curProv = new FileInfo (prov.Filename);  	string titlePath = Path.Combine (m_options.Data.MyDocsDir.FullName' m_options.Mod.Path);  	titlePath = Path.Combine (titlePath' "history/provinces/").Replace ('\\'' '/');  	titlePath = Path.Combine (titlePath' curProv.Name);  	using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  		sw.WriteLine ("title = " + prov.Title);  		sw.WriteLine ();  		sw.WriteLine ("max_settlements = " + prov.MaxSettlements);  		foreach (Settlement s in prov.Settlements)  			sw.WriteLine (s.Title + " = " + s.Type);  		sw.WriteLine ();  		sw.WriteLine ("culture = " + prov.Culture);  		sw.WriteLine ("religion = " + prov.Religion);  	}  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,SaveProvinceHistory,The following statement contains a magic number: using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  	sw.WriteLine ("title = " + prov.Title);  	sw.WriteLine ();  	sw.WriteLine ("max_settlements = " + prov.MaxSettlements);  	foreach (Settlement s in prov.Settlements)  		sw.WriteLine (s.Title + " = " + s.Type);  	sw.WriteLine ();  	sw.WriteLine ("culture = " + prov.Culture);  	sw.WriteLine ("religion = " + prov.Religion);  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeDeJureLiege,The following statement contains a magic number: using (FileStream stream = titleFile.Open (FileMode.Append' FileAccess.Write))  	using (StreamWriter sw = new StreamWriter (stream' Encoding.GetEncoding (1252))) {  		sw.WriteLine ((m_options.StartDate - 2) + ".1.1 = {");  		if (setDeJureLiege)  			sw.WriteLine ("\tde_jure_liege=\"" + deJureLiege + "\"");  		if (setLiege)  			sw.WriteLine ("\tliege=\"" + (String.IsNullOrEmpty (liege) ? "0" : liege) + "\"");  		sw.WriteLine ("}");  	}  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeDeJureLiege,The following statement contains a magic number: using (FileStream stream = titleFile.Open (FileMode.Append' FileAccess.Write))  	using (StreamWriter sw = new StreamWriter (stream' Encoding.GetEncoding (1252))) {  		sw.WriteLine ((m_options.StartDate - 2) + ".1.1 = {");  		if (setDeJureLiege)  			sw.WriteLine ("\tde_jure_liege=\"" + deJureLiege + "\"");  		if (setLiege)  			sw.WriteLine ("\tliege=\"" + (String.IsNullOrEmpty (liege) ? "0" : liege) + "\"");  		sw.WriteLine ("}");  	}  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeDeJureLiege,The following statement contains a magic number: using (StreamWriter sw = new StreamWriter (stream' Encoding.GetEncoding (1252))) {  	sw.WriteLine ((m_options.StartDate - 2) + ".1.1 = {");  	if (setDeJureLiege)  		sw.WriteLine ("\tde_jure_liege=\"" + deJureLiege + "\"");  	if (setLiege)  		sw.WriteLine ("\tliege=\"" + (String.IsNullOrEmpty (liege) ? "0" : liege) + "\"");  	sw.WriteLine ("}");  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeDeJureLiege,The following statement contains a magic number: using (StreamWriter sw = new StreamWriter (stream' Encoding.GetEncoding (1252))) {  	sw.WriteLine ((m_options.StartDate - 2) + ".1.1 = {");  	if (setDeJureLiege)  		sw.WriteLine ("\tde_jure_liege=\"" + deJureLiege + "\"");  	if (setLiege)  		sw.WriteLine ("\tliege=\"" + (String.IsNullOrEmpty (liege) ? "0" : liege) + "\"");  	sw.WriteLine ("}");  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeDeJureLiege,The following statement contains a magic number: sw.WriteLine ((m_options.StartDate - 2) + ".1.1 = {");  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: foreach (var title in titles) {  	if (TaskStatus.Abort)  		return;  	if (title.IsTitular)  		continue;  	if (title.Landless)  		continue;  	if (title.Culture == null || title.Religion == null)  		continue;  	Log ("Title " + title.TitleID);  	if (!m_options.Data.ContainsCulture (title.Culture) || !m_options.Data.Religions.ContainsKey (title.Religion)) {  		Log (" --Unable to find culture or religion");  		continue;  	}  	if (m_options.RuleSet.IgnoredTitles.Contains (title.TitleID)) {  		Log (" --Title in Ignore List");  		continue;  	}  	if (presetChar == null) {  		Log (" --Creating Character");  		CharacterOption charOptions = new CharacterOption ();  		if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeCultureChance)  			charOptions.Culture = m_options.Data.GetCulture (title.Culture);  		else  			charOptions.Culture = m_options.Data.GetCulture (liegeChar.Culture);  		charOptions.SpecifiedCulture = true;  		if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeReligionChance)  			charOptions.Religion = m_options.Data.Religions [title.Religion];  		else  			charOptions.Religion = m_options.Data.Religions [liegeChar.Religion];  		charOptions.SpecifiedReligion = true;  		charOptions.IsSpouse = false;  		charOptions.Gender = RuleSet.Gender.Random;  		curChars = CreateRandomCharacter (charOptions' availDynasties' true);  		foreach (Character c in curChars)  			WriteCharacter (charWriter' c);  	}  	else {  		curChars = new List<Character> ();  		curChars.Add (presetChar);  	}  	Log (" --Giving Title");  	titleFile = new FileInfo (Path.Combine (titlePath' "history/titles/" + title.TitleID + ".txt").Replace ('\\'' '/'));  	WriteTitleOwner (titleFile' curChars [0]);  	MakeDeJureLiege (titleFile' setLiege' liege' setDeJureLiege' deJureLiege);  	if (title.TitleID.StartsWith ("c_"))  		continue;  	//Randomise title order.  	List<Title> subTitles = title.SubTitles.Values.ToList ().OrderBy (a => m_options.Random.Next ()).ToList ();  	int reserved = 2;  	if (title.TitleID.StartsWith ("d_"))  		reserved = m_options.Random.Next (3' 5);  	Log (" --Giving First " + reserved + " Sub-Titles");  	Title subTitle;  	for (int i = 0; i < reserved && i < subTitles.Count; i++) {  		subTitle = subTitles [i];  		if (m_options.RuleSet.IgnoredTitles.Contains (subTitle.TitleID))  			continue;  		titleFile = new FileInfo (Path.Combine (titlePath' "history/titles/" + subTitle.TitleID + ".txt").Replace ('\\'' '/'));  		if (subTitle.TitleID.StartsWith ("c_")) {  			WriteTitleOwner (titleFile' curChars [0]);  			MakeDeJureLiege (titleFile' true' title.TitleID' false' null);  		}  		else {  			List<Title> tList = new List<Title> ();  			tList.Add (subTitle);  			MakeCharactersForTitles (charWriter' availDynasties' tList' true' title.TitleID' true' title.TitleID' curChars [0]' null);  		}  	}  	if (subTitles.Count > reserved) {  		Log (" --Making Vassals for Remaining Sub-Titles");  		List<Title> subTitleList = new List<Title> ();  		for (int i = reserved; i < subTitles.Count; i++)  			subTitleList.Add (subTitles [i]);  		MakeCharactersForTitles (charWriter' availDynasties' subTitleList' true' title.TitleID' true' title.TitleID' null' curChars [0]);  	}  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: foreach (var title in titles) {  	if (TaskStatus.Abort)  		return;  	if (title.IsTitular)  		continue;  	if (title.Landless)  		continue;  	if (title.Culture == null || title.Religion == null)  		continue;  	Log ("Title " + title.TitleID);  	if (!m_options.Data.ContainsCulture (title.Culture) || !m_options.Data.Religions.ContainsKey (title.Religion)) {  		Log (" --Unable to find culture or religion");  		continue;  	}  	if (m_options.RuleSet.IgnoredTitles.Contains (title.TitleID)) {  		Log (" --Title in Ignore List");  		continue;  	}  	if (presetChar == null) {  		Log (" --Creating Character");  		CharacterOption charOptions = new CharacterOption ();  		if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeCultureChance)  			charOptions.Culture = m_options.Data.GetCulture (title.Culture);  		else  			charOptions.Culture = m_options.Data.GetCulture (liegeChar.Culture);  		charOptions.SpecifiedCulture = true;  		if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeReligionChance)  			charOptions.Religion = m_options.Data.Religions [title.Religion];  		else  			charOptions.Religion = m_options.Data.Religions [liegeChar.Religion];  		charOptions.SpecifiedReligion = true;  		charOptions.IsSpouse = false;  		charOptions.Gender = RuleSet.Gender.Random;  		curChars = CreateRandomCharacter (charOptions' availDynasties' true);  		foreach (Character c in curChars)  			WriteCharacter (charWriter' c);  	}  	else {  		curChars = new List<Character> ();  		curChars.Add (presetChar);  	}  	Log (" --Giving Title");  	titleFile = new FileInfo (Path.Combine (titlePath' "history/titles/" + title.TitleID + ".txt").Replace ('\\'' '/'));  	WriteTitleOwner (titleFile' curChars [0]);  	MakeDeJureLiege (titleFile' setLiege' liege' setDeJureLiege' deJureLiege);  	if (title.TitleID.StartsWith ("c_"))  		continue;  	//Randomise title order.  	List<Title> subTitles = title.SubTitles.Values.ToList ().OrderBy (a => m_options.Random.Next ()).ToList ();  	int reserved = 2;  	if (title.TitleID.StartsWith ("d_"))  		reserved = m_options.Random.Next (3' 5);  	Log (" --Giving First " + reserved + " Sub-Titles");  	Title subTitle;  	for (int i = 0; i < reserved && i < subTitles.Count; i++) {  		subTitle = subTitles [i];  		if (m_options.RuleSet.IgnoredTitles.Contains (subTitle.TitleID))  			continue;  		titleFile = new FileInfo (Path.Combine (titlePath' "history/titles/" + subTitle.TitleID + ".txt").Replace ('\\'' '/'));  		if (subTitle.TitleID.StartsWith ("c_")) {  			WriteTitleOwner (titleFile' curChars [0]);  			MakeDeJureLiege (titleFile' true' title.TitleID' false' null);  		}  		else {  			List<Title> tList = new List<Title> ();  			tList.Add (subTitle);  			MakeCharactersForTitles (charWriter' availDynasties' tList' true' title.TitleID' true' title.TitleID' curChars [0]' null);  		}  	}  	if (subTitles.Count > reserved) {  		Log (" --Making Vassals for Remaining Sub-Titles");  		List<Title> subTitleList = new List<Title> ();  		for (int i = reserved; i < subTitles.Count; i++)  			subTitleList.Add (subTitles [i]);  		MakeCharactersForTitles (charWriter' availDynasties' subTitleList' true' title.TitleID' true' title.TitleID' null' curChars [0]);  	}  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: foreach (var title in titles) {  	if (TaskStatus.Abort)  		return;  	if (title.IsTitular)  		continue;  	if (title.Landless)  		continue;  	if (title.Culture == null || title.Religion == null)  		continue;  	Log ("Title " + title.TitleID);  	if (!m_options.Data.ContainsCulture (title.Culture) || !m_options.Data.Religions.ContainsKey (title.Religion)) {  		Log (" --Unable to find culture or religion");  		continue;  	}  	if (m_options.RuleSet.IgnoredTitles.Contains (title.TitleID)) {  		Log (" --Title in Ignore List");  		continue;  	}  	if (presetChar == null) {  		Log (" --Creating Character");  		CharacterOption charOptions = new CharacterOption ();  		if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeCultureChance)  			charOptions.Culture = m_options.Data.GetCulture (title.Culture);  		else  			charOptions.Culture = m_options.Data.GetCulture (liegeChar.Culture);  		charOptions.SpecifiedCulture = true;  		if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeReligionChance)  			charOptions.Religion = m_options.Data.Religions [title.Religion];  		else  			charOptions.Religion = m_options.Data.Religions [liegeChar.Religion];  		charOptions.SpecifiedReligion = true;  		charOptions.IsSpouse = false;  		charOptions.Gender = RuleSet.Gender.Random;  		curChars = CreateRandomCharacter (charOptions' availDynasties' true);  		foreach (Character c in curChars)  			WriteCharacter (charWriter' c);  	}  	else {  		curChars = new List<Character> ();  		curChars.Add (presetChar);  	}  	Log (" --Giving Title");  	titleFile = new FileInfo (Path.Combine (titlePath' "history/titles/" + title.TitleID + ".txt").Replace ('\\'' '/'));  	WriteTitleOwner (titleFile' curChars [0]);  	MakeDeJureLiege (titleFile' setLiege' liege' setDeJureLiege' deJureLiege);  	if (title.TitleID.StartsWith ("c_"))  		continue;  	//Randomise title order.  	List<Title> subTitles = title.SubTitles.Values.ToList ().OrderBy (a => m_options.Random.Next ()).ToList ();  	int reserved = 2;  	if (title.TitleID.StartsWith ("d_"))  		reserved = m_options.Random.Next (3' 5);  	Log (" --Giving First " + reserved + " Sub-Titles");  	Title subTitle;  	for (int i = 0; i < reserved && i < subTitles.Count; i++) {  		subTitle = subTitles [i];  		if (m_options.RuleSet.IgnoredTitles.Contains (subTitle.TitleID))  			continue;  		titleFile = new FileInfo (Path.Combine (titlePath' "history/titles/" + subTitle.TitleID + ".txt").Replace ('\\'' '/'));  		if (subTitle.TitleID.StartsWith ("c_")) {  			WriteTitleOwner (titleFile' curChars [0]);  			MakeDeJureLiege (titleFile' true' title.TitleID' false' null);  		}  		else {  			List<Title> tList = new List<Title> ();  			tList.Add (subTitle);  			MakeCharactersForTitles (charWriter' availDynasties' tList' true' title.TitleID' true' title.TitleID' curChars [0]' null);  		}  	}  	if (subTitles.Count > reserved) {  		Log (" --Making Vassals for Remaining Sub-Titles");  		List<Title> subTitleList = new List<Title> ();  		for (int i = reserved; i < subTitles.Count; i++)  			subTitleList.Add (subTitles [i]);  		MakeCharactersForTitles (charWriter' availDynasties' subTitleList' true' title.TitleID' true' title.TitleID' null' curChars [0]);  	}  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: foreach (var title in titles) {  	if (TaskStatus.Abort)  		return;  	if (title.IsTitular)  		continue;  	if (title.Landless)  		continue;  	if (title.Culture == null || title.Religion == null)  		continue;  	Log ("Title " + title.TitleID);  	if (!m_options.Data.ContainsCulture (title.Culture) || !m_options.Data.Religions.ContainsKey (title.Religion)) {  		Log (" --Unable to find culture or religion");  		continue;  	}  	if (m_options.RuleSet.IgnoredTitles.Contains (title.TitleID)) {  		Log (" --Title in Ignore List");  		continue;  	}  	if (presetChar == null) {  		Log (" --Creating Character");  		CharacterOption charOptions = new CharacterOption ();  		if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeCultureChance)  			charOptions.Culture = m_options.Data.GetCulture (title.Culture);  		else  			charOptions.Culture = m_options.Data.GetCulture (liegeChar.Culture);  		charOptions.SpecifiedCulture = true;  		if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeReligionChance)  			charOptions.Religion = m_options.Data.Religions [title.Religion];  		else  			charOptions.Religion = m_options.Data.Religions [liegeChar.Religion];  		charOptions.SpecifiedReligion = true;  		charOptions.IsSpouse = false;  		charOptions.Gender = RuleSet.Gender.Random;  		curChars = CreateRandomCharacter (charOptions' availDynasties' true);  		foreach (Character c in curChars)  			WriteCharacter (charWriter' c);  	}  	else {  		curChars = new List<Character> ();  		curChars.Add (presetChar);  	}  	Log (" --Giving Title");  	titleFile = new FileInfo (Path.Combine (titlePath' "history/titles/" + title.TitleID + ".txt").Replace ('\\'' '/'));  	WriteTitleOwner (titleFile' curChars [0]);  	MakeDeJureLiege (titleFile' setLiege' liege' setDeJureLiege' deJureLiege);  	if (title.TitleID.StartsWith ("c_"))  		continue;  	//Randomise title order.  	List<Title> subTitles = title.SubTitles.Values.ToList ().OrderBy (a => m_options.Random.Next ()).ToList ();  	int reserved = 2;  	if (title.TitleID.StartsWith ("d_"))  		reserved = m_options.Random.Next (3' 5);  	Log (" --Giving First " + reserved + " Sub-Titles");  	Title subTitle;  	for (int i = 0; i < reserved && i < subTitles.Count; i++) {  		subTitle = subTitles [i];  		if (m_options.RuleSet.IgnoredTitles.Contains (subTitle.TitleID))  			continue;  		titleFile = new FileInfo (Path.Combine (titlePath' "history/titles/" + subTitle.TitleID + ".txt").Replace ('\\'' '/'));  		if (subTitle.TitleID.StartsWith ("c_")) {  			WriteTitleOwner (titleFile' curChars [0]);  			MakeDeJureLiege (titleFile' true' title.TitleID' false' null);  		}  		else {  			List<Title> tList = new List<Title> ();  			tList.Add (subTitle);  			MakeCharactersForTitles (charWriter' availDynasties' tList' true' title.TitleID' true' title.TitleID' curChars [0]' null);  		}  	}  	if (subTitles.Count > reserved) {  		Log (" --Making Vassals for Remaining Sub-Titles");  		List<Title> subTitleList = new List<Title> ();  		for (int i = reserved; i < subTitles.Count; i++)  			subTitleList.Add (subTitles [i]);  		MakeCharactersForTitles (charWriter' availDynasties' subTitleList' true' title.TitleID' true' title.TitleID' null' curChars [0]);  	}  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: foreach (var title in titles) {  	if (TaskStatus.Abort)  		return;  	if (title.IsTitular)  		continue;  	if (title.Landless)  		continue;  	if (title.Culture == null || title.Religion == null)  		continue;  	Log ("Title " + title.TitleID);  	if (!m_options.Data.ContainsCulture (title.Culture) || !m_options.Data.Religions.ContainsKey (title.Religion)) {  		Log (" --Unable to find culture or religion");  		continue;  	}  	if (m_options.RuleSet.IgnoredTitles.Contains (title.TitleID)) {  		Log (" --Title in Ignore List");  		continue;  	}  	if (presetChar == null) {  		Log (" --Creating Character");  		CharacterOption charOptions = new CharacterOption ();  		if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeCultureChance)  			charOptions.Culture = m_options.Data.GetCulture (title.Culture);  		else  			charOptions.Culture = m_options.Data.GetCulture (liegeChar.Culture);  		charOptions.SpecifiedCulture = true;  		if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeReligionChance)  			charOptions.Religion = m_options.Data.Religions [title.Religion];  		else  			charOptions.Religion = m_options.Data.Religions [liegeChar.Religion];  		charOptions.SpecifiedReligion = true;  		charOptions.IsSpouse = false;  		charOptions.Gender = RuleSet.Gender.Random;  		curChars = CreateRandomCharacter (charOptions' availDynasties' true);  		foreach (Character c in curChars)  			WriteCharacter (charWriter' c);  	}  	else {  		curChars = new List<Character> ();  		curChars.Add (presetChar);  	}  	Log (" --Giving Title");  	titleFile = new FileInfo (Path.Combine (titlePath' "history/titles/" + title.TitleID + ".txt").Replace ('\\'' '/'));  	WriteTitleOwner (titleFile' curChars [0]);  	MakeDeJureLiege (titleFile' setLiege' liege' setDeJureLiege' deJureLiege);  	if (title.TitleID.StartsWith ("c_"))  		continue;  	//Randomise title order.  	List<Title> subTitles = title.SubTitles.Values.ToList ().OrderBy (a => m_options.Random.Next ()).ToList ();  	int reserved = 2;  	if (title.TitleID.StartsWith ("d_"))  		reserved = m_options.Random.Next (3' 5);  	Log (" --Giving First " + reserved + " Sub-Titles");  	Title subTitle;  	for (int i = 0; i < reserved && i < subTitles.Count; i++) {  		subTitle = subTitles [i];  		if (m_options.RuleSet.IgnoredTitles.Contains (subTitle.TitleID))  			continue;  		titleFile = new FileInfo (Path.Combine (titlePath' "history/titles/" + subTitle.TitleID + ".txt").Replace ('\\'' '/'));  		if (subTitle.TitleID.StartsWith ("c_")) {  			WriteTitleOwner (titleFile' curChars [0]);  			MakeDeJureLiege (titleFile' true' title.TitleID' false' null);  		}  		else {  			List<Title> tList = new List<Title> ();  			tList.Add (subTitle);  			MakeCharactersForTitles (charWriter' availDynasties' tList' true' title.TitleID' true' title.TitleID' curChars [0]' null);  		}  	}  	if (subTitles.Count > reserved) {  		Log (" --Making Vassals for Remaining Sub-Titles");  		List<Title> subTitleList = new List<Title> ();  		for (int i = reserved; i < subTitles.Count; i++)  			subTitleList.Add (subTitles [i]);  		MakeCharactersForTitles (charWriter' availDynasties' subTitleList' true' title.TitleID' true' title.TitleID' null' curChars [0]);  	}  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: if (presetChar == null) {  	Log (" --Creating Character");  	CharacterOption charOptions = new CharacterOption ();  	if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeCultureChance)  		charOptions.Culture = m_options.Data.GetCulture (title.Culture);  	else  		charOptions.Culture = m_options.Data.GetCulture (liegeChar.Culture);  	charOptions.SpecifiedCulture = true;  	if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeReligionChance)  		charOptions.Religion = m_options.Data.Religions [title.Religion];  	else  		charOptions.Religion = m_options.Data.Religions [liegeChar.Religion];  	charOptions.SpecifiedReligion = true;  	charOptions.IsSpouse = false;  	charOptions.Gender = RuleSet.Gender.Random;  	curChars = CreateRandomCharacter (charOptions' availDynasties' true);  	foreach (Character c in curChars)  		WriteCharacter (charWriter' c);  }  else {  	curChars = new List<Character> ();  	curChars.Add (presetChar);  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: if (presetChar == null) {  	Log (" --Creating Character");  	CharacterOption charOptions = new CharacterOption ();  	if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeCultureChance)  		charOptions.Culture = m_options.Data.GetCulture (title.Culture);  	else  		charOptions.Culture = m_options.Data.GetCulture (liegeChar.Culture);  	charOptions.SpecifiedCulture = true;  	if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeReligionChance)  		charOptions.Religion = m_options.Data.Religions [title.Religion];  	else  		charOptions.Religion = m_options.Data.Religions [liegeChar.Religion];  	charOptions.SpecifiedReligion = true;  	charOptions.IsSpouse = false;  	charOptions.Gender = RuleSet.Gender.Random;  	curChars = CreateRandomCharacter (charOptions' availDynasties' true);  	foreach (Character c in curChars)  		WriteCharacter (charWriter' c);  }  else {  	curChars = new List<Character> ();  	curChars.Add (presetChar);  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeCultureChance)  	charOptions.Culture = m_options.Data.GetCulture (title.Culture);  else  	charOptions.Culture = m_options.Data.GetCulture (liegeChar.Culture);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: if (liegeChar == null || m_options.Random.Next (0' 100) > m_options.RuleSet.LiegeReligionChance)  	charOptions.Religion = m_options.Data.Religions [title.Religion];  else  	charOptions.Religion = m_options.Data.Religions [liegeChar.Religion];  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: if (title.TitleID.StartsWith ("d_"))  	reserved = m_options.Random.Next (3' 5);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: if (title.TitleID.StartsWith ("d_"))  	reserved = m_options.Random.Next (3' 5);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: reserved = m_options.Random.Next (3' 5);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,MakeCharactersForTitles,The following statement contains a magic number: reserved = m_options.Random.Next (3' 5);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: if (!charOptions.IsSpouse)  	age = m_options.Random.Normal (17' 40);  else  	age = m_options.Random.Normal (charOptions.PartnerAge' 3.0).Clamp (17' 99);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: if (!charOptions.IsSpouse)  	age = m_options.Random.Normal (17' 40);  else  	age = m_options.Random.Normal (charOptions.PartnerAge' 3.0).Clamp (17' 99);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: if (!charOptions.IsSpouse)  	age = m_options.Random.Normal (17' 40);  else  	age = m_options.Random.Normal (charOptions.PartnerAge' 3.0).Clamp (17' 99);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: if (!charOptions.IsSpouse)  	age = m_options.Random.Normal (17' 40);  else  	age = m_options.Random.Normal (charOptions.PartnerAge' 3.0).Clamp (17' 99);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: if (!charOptions.IsSpouse)  	age = m_options.Random.Normal (17' 40);  else  	age = m_options.Random.Normal (charOptions.PartnerAge' 3.0).Clamp (17' 99);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: age = m_options.Random.Normal (17' 40);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: age = m_options.Random.Normal (17' 40);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: age = m_options.Random.Normal (charOptions.PartnerAge' 3.0).Clamp (17' 99);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: age = m_options.Random.Normal (charOptions.PartnerAge' 3.0).Clamp (17' 99);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: age = m_options.Random.Normal (charOptions.PartnerAge' 3.0).Clamp (17' 99);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: if (charOptions.Gender == RuleSet.Gender.Random)  	curChar.IsFemale = (m_options.Random.Next (101) <= m_options.RuleSet.FemaleRulerChance);  else  	curChar.IsFemale = charOptions.Gender == RuleSet.Gender.Female;  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: curChar.IsFemale = (m_options.Random.Next (101) <= m_options.RuleSet.FemaleRulerChance);  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: if (!charOptions.IsSpouse && age > 20 && m_options.Random.Next (0' 101) < m_options.RuleSet.RulerSpouseChance) {  	CharacterOption spouseOptions = charOptions;  	spouseOptions.Gender = curChar.IsFemale ? RuleSet.Gender.Male : RuleSet.Gender.Female;  	spouseOptions.IsSpouse = true;  	spouseOptions.PartnerAge = age;  	spouseOptions.SpecifiedDynasty = false;  	spouseOptions.ID = 0;  	List<Character> posSpouse = CreateRandomCharacter (spouseOptions' availDynasties' false);  	curChar.CurrentSpouse = posSpouse [0];  	posSpouse [0].CurrentSpouse = curChar;  	int youngestAge = (int)curChar.CurrentSpouse.CustomFlags ["age"];  	if (age < youngestAge)  		youngestAge = age;  	int marriageYear = m_options.Random.Next (1' youngestAge - 16);  	int month = m_options.Random.Next (1' 12);  	int day = m_options.Random.Next (1' 28);  	EventOption spouseEvent = new EventOption (new DateTime (m_options.StartDate - marriageYear' month' day));  	spouseEvent.SubOptions.Add (new IntegerOption ("add_spouse"' curChar.ID));  	curChar.CurrentSpouse.Events.Add (spouseEvent);  	EventOption curCharEvent = new EventOption (new DateTime (m_options.StartDate - marriageYear' month' day));  	curCharEvent.SubOptions.Add (new IntegerOption ("add_spouse"' posSpouse [0].ID));  	curChar.Events.Add (curCharEvent);  	retList.Add (posSpouse [0]);  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: if (!charOptions.IsSpouse && age > 20 && m_options.Random.Next (0' 101) < m_options.RuleSet.RulerSpouseChance) {  	CharacterOption spouseOptions = charOptions;  	spouseOptions.Gender = curChar.IsFemale ? RuleSet.Gender.Male : RuleSet.Gender.Female;  	spouseOptions.IsSpouse = true;  	spouseOptions.PartnerAge = age;  	spouseOptions.SpecifiedDynasty = false;  	spouseOptions.ID = 0;  	List<Character> posSpouse = CreateRandomCharacter (spouseOptions' availDynasties' false);  	curChar.CurrentSpouse = posSpouse [0];  	posSpouse [0].CurrentSpouse = curChar;  	int youngestAge = (int)curChar.CurrentSpouse.CustomFlags ["age"];  	if (age < youngestAge)  		youngestAge = age;  	int marriageYear = m_options.Random.Next (1' youngestAge - 16);  	int month = m_options.Random.Next (1' 12);  	int day = m_options.Random.Next (1' 28);  	EventOption spouseEvent = new EventOption (new DateTime (m_options.StartDate - marriageYear' month' day));  	spouseEvent.SubOptions.Add (new IntegerOption ("add_spouse"' curChar.ID));  	curChar.CurrentSpouse.Events.Add (spouseEvent);  	EventOption curCharEvent = new EventOption (new DateTime (m_options.StartDate - marriageYear' month' day));  	curCharEvent.SubOptions.Add (new IntegerOption ("add_spouse"' posSpouse [0].ID));  	curChar.Events.Add (curCharEvent);  	retList.Add (posSpouse [0]);  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: if (!charOptions.IsSpouse && age > 20 && m_options.Random.Next (0' 101) < m_options.RuleSet.RulerSpouseChance) {  	CharacterOption spouseOptions = charOptions;  	spouseOptions.Gender = curChar.IsFemale ? RuleSet.Gender.Male : RuleSet.Gender.Female;  	spouseOptions.IsSpouse = true;  	spouseOptions.PartnerAge = age;  	spouseOptions.SpecifiedDynasty = false;  	spouseOptions.ID = 0;  	List<Character> posSpouse = CreateRandomCharacter (spouseOptions' availDynasties' false);  	curChar.CurrentSpouse = posSpouse [0];  	posSpouse [0].CurrentSpouse = curChar;  	int youngestAge = (int)curChar.CurrentSpouse.CustomFlags ["age"];  	if (age < youngestAge)  		youngestAge = age;  	int marriageYear = m_options.Random.Next (1' youngestAge - 16);  	int month = m_options.Random.Next (1' 12);  	int day = m_options.Random.Next (1' 28);  	EventOption spouseEvent = new EventOption (new DateTime (m_options.StartDate - marriageYear' month' day));  	spouseEvent.SubOptions.Add (new IntegerOption ("add_spouse"' curChar.ID));  	curChar.CurrentSpouse.Events.Add (spouseEvent);  	EventOption curCharEvent = new EventOption (new DateTime (m_options.StartDate - marriageYear' month' day));  	curCharEvent.SubOptions.Add (new IntegerOption ("add_spouse"' posSpouse [0].ID));  	curChar.Events.Add (curCharEvent);  	retList.Add (posSpouse [0]);  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: if (!charOptions.IsSpouse && age > 20 && m_options.Random.Next (0' 101) < m_options.RuleSet.RulerSpouseChance) {  	CharacterOption spouseOptions = charOptions;  	spouseOptions.Gender = curChar.IsFemale ? RuleSet.Gender.Male : RuleSet.Gender.Female;  	spouseOptions.IsSpouse = true;  	spouseOptions.PartnerAge = age;  	spouseOptions.SpecifiedDynasty = false;  	spouseOptions.ID = 0;  	List<Character> posSpouse = CreateRandomCharacter (spouseOptions' availDynasties' false);  	curChar.CurrentSpouse = posSpouse [0];  	posSpouse [0].CurrentSpouse = curChar;  	int youngestAge = (int)curChar.CurrentSpouse.CustomFlags ["age"];  	if (age < youngestAge)  		youngestAge = age;  	int marriageYear = m_options.Random.Next (1' youngestAge - 16);  	int month = m_options.Random.Next (1' 12);  	int day = m_options.Random.Next (1' 28);  	EventOption spouseEvent = new EventOption (new DateTime (m_options.StartDate - marriageYear' month' day));  	spouseEvent.SubOptions.Add (new IntegerOption ("add_spouse"' curChar.ID));  	curChar.CurrentSpouse.Events.Add (spouseEvent);  	EventOption curCharEvent = new EventOption (new DateTime (m_options.StartDate - marriageYear' month' day));  	curCharEvent.SubOptions.Add (new IntegerOption ("add_spouse"' posSpouse [0].ID));  	curChar.Events.Add (curCharEvent);  	retList.Add (posSpouse [0]);  }  
Magic Number,TitleGenerator.Tasks.History,CreateHistoryShared,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CreateHistoryShared.cs,CreateRandomCharacter,The following statement contains a magic number: if (!charOptions.IsSpouse && age > 20 && m_options.Random.Next (0' 101) < m_options.RuleSet.RulerSpouseChance) {  	CharacterOption spouseOptions = charOptions;  	spouseOptions.Gender = curChar.IsFemale ? RuleSet.Gender.Male : RuleSet.Gender.Female;  	spouseOptions.IsSpouse = true;  	spouseOptions.PartnerAge = age;  	spouseOptions.SpecifiedDynasty = false;  	spouseOptions.ID = 0;  	List<Character> posSpouse = CreateRandomCharacter (spouseOptions' availDynasties' false);  	curChar.CurrentSpouse = posSpouse [0];  	posSpouse [0].CurrentSpouse = curChar;  	int youngestAge = (int)curChar.CurrentSpouse.CustomFlags ["age"];  	if (age < youngestAge)  		youngestAge = age;  	int marriageYear = m_options.Random.Next (1' youngestAge - 16);  	int month = m_options.Random.Next (1' 12);  	int day = m_options.Random.Next (1' 28);  	EventOption spouseEvent = new EventOption (new DateTime (m_options.StartDate - marriageYear' month' day));  	spouseEvent.SubOptions.Add (new IntegerOption ("add_spouse"' curChar.ID));  	curChar.CurrentSpouse.Events.Add (spouseEvent);  	EventOption curCharEvent = new EventOption (new DateTime (m_options.StartDate - marriageYear' month' day));  	curCharEvent.SubOptions.Add (new IntegerOption ("add_spouse"' posSpouse [0].ID));  	curChar.Events.Add (curCharEvent);  	retList.Add (posSpouse [0]);  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.MaleNames = m_options.Data.GenerateWords (genGroup' genID' 100' 5' 9);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.MaleNames = m_options.Data.GenerateWords (genGroup' genID' 100' 5' 9);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.MaleNames = m_options.Data.GenerateWords (genGroup' genID' 100' 5' 9);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.FemaleNames = m_options.Data.GenerateWords (genGroup' genID' 100' 5' 9);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.FemaleNames = m_options.Data.GenerateWords (genGroup' genID' 100' 5' 9);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.FemaleNames = m_options.Data.GenerateWords (genGroup' genID' 100' 5' 9);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.FromDynastyPrefix = m_options.Data.GenerateWord (genGroup' genID' 2' 4);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.FromDynastyPrefix = m_options.Data.GenerateWord (genGroup' genID' 2' 4);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenDynastyPrefix)  	thisCul.FromDynastyPrefix += " ";  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenBastardPrefix)  	thisCul.BastardDynastyPrefix = m_options.Data.GenerateWord (genGroup' genID' 2' 5);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenBastardPrefix)  	thisCul.BastardDynastyPrefix = m_options.Data.GenerateWord (genGroup' genID' 2' 5);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenBastardPrefix)  	thisCul.BastardDynastyPrefix = m_options.Data.GenerateWord (genGroup' genID' 2' 5);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.BastardDynastyPrefix = m_options.Data.GenerateWord (genGroup' genID' 2' 5);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.BastardDynastyPrefix = m_options.Data.GenerateWord (genGroup' genID' 2' 5);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.IsPrefix = m_options.Random.Next (100) < m_options.RuleSet.CulGenPatronymIsPrefix;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenMalePatronym) {  	thisCul.MalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  	if (m_options.Random.Next (3) % 3 == 0)  		thisCul.MalePatronym = thisCul.IsPrefix ? thisCul.MalePatronym + " " : " " + thisCul.MalePatronym;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenMalePatronym) {  	thisCul.MalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  	if (m_options.Random.Next (3) % 3 == 0)  		thisCul.MalePatronym = thisCul.IsPrefix ? thisCul.MalePatronym + " " : " " + thisCul.MalePatronym;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenMalePatronym) {  	thisCul.MalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  	if (m_options.Random.Next (3) % 3 == 0)  		thisCul.MalePatronym = thisCul.IsPrefix ? thisCul.MalePatronym + " " : " " + thisCul.MalePatronym;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenMalePatronym) {  	thisCul.MalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  	if (m_options.Random.Next (3) % 3 == 0)  		thisCul.MalePatronym = thisCul.IsPrefix ? thisCul.MalePatronym + " " : " " + thisCul.MalePatronym;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenMalePatronym) {  	thisCul.MalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  	if (m_options.Random.Next (3) % 3 == 0)  		thisCul.MalePatronym = thisCul.IsPrefix ? thisCul.MalePatronym + " " : " " + thisCul.MalePatronym;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.MalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.MalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (3) % 3 == 0)  	thisCul.MalePatronym = thisCul.IsPrefix ? thisCul.MalePatronym + " " : " " + thisCul.MalePatronym;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (3) % 3 == 0)  	thisCul.MalePatronym = thisCul.IsPrefix ? thisCul.MalePatronym + " " : " " + thisCul.MalePatronym;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenFemalePatronym) {  	thisCul.FemalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  	if (m_options.Random.Next (100) % 3 == 0)  		thisCul.FemalePatronym = thisCul.IsPrefix ? thisCul.FemalePatronym + " " : " " + thisCul.FemalePatronym;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenFemalePatronym) {  	thisCul.FemalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  	if (m_options.Random.Next (100) % 3 == 0)  		thisCul.FemalePatronym = thisCul.IsPrefix ? thisCul.FemalePatronym + " " : " " + thisCul.FemalePatronym;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenFemalePatronym) {  	thisCul.FemalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  	if (m_options.Random.Next (100) % 3 == 0)  		thisCul.FemalePatronym = thisCul.IsPrefix ? thisCul.FemalePatronym + " " : " " + thisCul.FemalePatronym;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenFemalePatronym) {  	thisCul.FemalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  	if (m_options.Random.Next (100) % 3 == 0)  		thisCul.FemalePatronym = thisCul.IsPrefix ? thisCul.FemalePatronym + " " : " " + thisCul.FemalePatronym;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenFemalePatronym) {  	thisCul.FemalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  	if (m_options.Random.Next (100) % 3 == 0)  		thisCul.FemalePatronym = thisCul.IsPrefix ? thisCul.FemalePatronym + " " : " " + thisCul.FemalePatronym;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.FemalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.FemalePatronym = m_options.Data.GenerateWord (genGroup' genID' 3' 5);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) % 3 == 0)  	thisCul.FemalePatronym = thisCul.IsPrefix ? thisCul.FemalePatronym + " " : " " + thisCul.FemalePatronym;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) % 3 == 0)  	thisCul.FemalePatronym = thisCul.IsPrefix ? thisCul.FemalePatronym + " " : " " + thisCul.FemalePatronym;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenAncestorName) {  	// Male chances  	int totalChance = m_options.Random.Next (100);  	int nextVal = m_options.Random.Next (totalChance);  	thisCul.PaternalGrandfatherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	nextVal = m_options.Random.Next (totalChance);  	thisCul.MaternalGrandfatherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	thisCul.FatherChance = totalChance;  	// Female chances  	totalChance = m_options.Random.Next (100);  	nextVal = m_options.Random.Next (totalChance);  	thisCul.PaternalGrandmotherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	nextVal = m_options.Random.Next (totalChance);  	thisCul.MaternalGrandmotherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	thisCul.MotherChance = totalChance;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenAncestorName) {  	// Male chances  	int totalChance = m_options.Random.Next (100);  	int nextVal = m_options.Random.Next (totalChance);  	thisCul.PaternalGrandfatherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	nextVal = m_options.Random.Next (totalChance);  	thisCul.MaternalGrandfatherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	thisCul.FatherChance = totalChance;  	// Female chances  	totalChance = m_options.Random.Next (100);  	nextVal = m_options.Random.Next (totalChance);  	thisCul.PaternalGrandmotherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	nextVal = m_options.Random.Next (totalChance);  	thisCul.MaternalGrandmotherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	thisCul.MotherChance = totalChance;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: if (m_options.Random.Next (100) < m_options.RuleSet.CulGenAncestorName) {  	// Male chances  	int totalChance = m_options.Random.Next (100);  	int nextVal = m_options.Random.Next (totalChance);  	thisCul.PaternalGrandfatherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	nextVal = m_options.Random.Next (totalChance);  	thisCul.MaternalGrandfatherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	thisCul.FatherChance = totalChance;  	// Female chances  	totalChance = m_options.Random.Next (100);  	nextVal = m_options.Random.Next (totalChance);  	thisCul.PaternalGrandmotherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	nextVal = m_options.Random.Next (totalChance);  	thisCul.MaternalGrandmotherChance = nextVal;  	totalChance -= nextVal;  	totalChance = totalChance < 0 ? 0 : totalChance;  	thisCul.MotherChance = totalChance;  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: totalChance = m_options.Random.Next (100);  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.DisinheritFromBlinding = m_options.Random.Next (100) < m_options.RuleSet.CulGenDisinheritFromBlinding;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.DukesCalledKings = m_options.Random.Next (100) < m_options.RuleSet.CulGenDukesCalledKings;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.FounderNamedDynasties = m_options.Random.Next (100) < m_options.RuleSet.CulGenFounderNamesDynasty;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GenerateNewCultureData,The following statement contains a magic number: thisCul.DynastyTitleNames = m_options.Random.Next (100) < m_options.RuleSet.CulGenDynastyTitleNames;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,CopyCulture,The following statement contains a magic number: cul.Name = title.TitleID.Substring (2) + "_cul";  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GetCultureColour,The following statement contains a magic number: hue = m_options.Random.Next (101) / 100f;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GetCultureColour,The following statement contains a magic number: sat = m_options.Random.Next (30' 61) / 100f;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GetCultureColour,The following statement contains a magic number: sat = m_options.Random.Next (30' 61) / 100f;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GetCultureColour,The following statement contains a magic number: val = m_options.Random.Next (60' 81) / 100f;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,GetCultureColour,The following statement contains a magic number: val = m_options.Random.Next (60' 81) / 100f;  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,CopyCultureGroup,The following statement contains a magic number: gc.Name = title.TitleID.Substring (2) + "_grp";  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,WriteCultureGroup,The following statement contains a magic number: if (m_options.Data.Localisations.ContainsKey (tit.TitleID + "_adj")) {  	string loc = m_options.Data.Localisations [tit.TitleID + "_adj"].Substring (2).Replace ("_adj"' "_grp");  	locs.WriteLine (loc);  }  
Magic Number,TitleGenerator.Tasks.History,CultureGenerationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\CultureGenerationTask.cs,WriteCulture,The following statement contains a magic number: if (m_options.Data.Localisations.ContainsKey (tit.TitleID + "_adj")) {  	string loc = m_options.Data.Localisations [tit.TitleID + "_adj"].Substring (2).Replace ("_adj"' "_cul");  	locs.WriteLine (loc);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeRepublicChars,The following statement contains a magic number: for (int i = 0; i < reps; i++) {  	if (provs.Count == 0)  		break;  	int id = m_options.Random.Next (provs.Count);  	prov = provs [id];  	provs.Remove (prov);  	m_unownedProvs.Remove (prov);  	#region Filtering  	//Province doesn't have associated title.  	if (prov.Title == null || !m_options.Data.Counties.ContainsKey (prov.Title)) {  		i--;  		m_log.Log (String.Format ("Province {0}-{1}: Title ID is null or doesn't exist."' prov.ID' prov.Title)' Logger.LogType.Error);  		continue;  	}  	if (prov.Culture == null || prov.Religion == null || !m_options.Data.ContainsCulture (prov.Culture) || !m_options.Data.Religions.ContainsKey (prov.Religion)) {  		i--;  		m_log.Log (String.Format ("Province {0}-{1}: Culture or religion is null or doesn't exist. {2}' {3}"' prov.ID' prov.Title' prov.Culture' prov.Religion)' Logger.LogType.Error);  		continue;  	}  	#endregion  	provRel = m_options.Data.Religions [prov.Religion];  	provCul = m_options.Data.GetCulture (prov.Culture);  	Log ("Title " + prov.Title);  	CharacterOption co = new CharacterOption ();  	co.Culture = provCul;  	co.SpecifiedCulture = true;  	co.Religion = provRel;  	co.SpecifiedReligion = true;  	co.IsSpouse = false;  	co.Gender = RuleSet.Gender.Male;  	chars = CreateRandomCharacter (co' m_availDynasties' true);  	chars [0].CustomFlags ["duchies"] = new List<Title> ();  	chars [0].CustomFlags ["kingdoms"] = new List<Title> ();  	chars [0].CustomFlags ["isRep"] = true;  	chars [0].CustomFlags ["neighbours"] = new List<int> ();  	chars [0].CustomFlags ["Liege"] = null;  	chars [0].CustomFlags ["Tier"] = TitleTier.Count;  	prov.CustomFlags ["charOwned"] = true;  	prov.CustomFlags ["charOwner"] = chars [0].ID;  	provsOwnedByChar = new List<Province> ();  	chars [0].CustomFlags ["provs"] = provsOwnedByChar;  	provsOwnedByChar.Add (prov);  	owners.Add (chars [0]);  	if (chars.Count == 2)  		m_spouses.Add (chars [1]);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeRepublicChars,The following statement contains a magic number: if (chars.Count == 2)  	m_spouses.Add (chars [1]);  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeRepublicRealms,The following statement contains a magic number: if (m_options.RuleSet.RepublicExpandMax >= 2 && m_options.RuleSet.RepublicExpandChance != 0) {  	bool finishedGrowing;  	do {  		finishedGrowing = true;  		foreach (Character owner in owners)  			GrowRepublicRealm (owner' ref finishedGrowing);  	}  	while (!finishedGrowing);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GrowRepublicRealm,The following statement contains a magic number: for (int i = 0; i < currCount; i++) {  	Province ownProv = provsOwnedByChar [i];  	if (ownProv.CustomFlags.ContainsKey ("charSurrounded"))  		continue;  	foreach (Province adj in ownProv.Adjacencies) {  		if (realmSize >= m_options.RuleSet.RepublicExpandMax) {  			owner.CustomFlags ["atMaxSize"] = true;  			return;  		}  		if (m_options.RuleSet.IgnoredTitles.Contains (adj.Title))  			continue;  		if (!adj.IsCoastal)  			continue;  		if (m_options.Random.Next (0' 100) > m_options.RuleSet.RepublicExpandChance) {  			owner.CustomFlags ["atMaxSize"] = true;  			return;  		}  		if (adj.CustomFlags.ContainsKey ("charOwned")) {  			neighbourID = (int)adj.CustomFlags ["charOwner"];  			if (!neighbours.Contains (neighbourID))  				neighbours.Add (neighbourID);  			continue;  		}  		adj.CustomFlags ["charOwned"] = true;  		adj.CustomFlags ["charOwner"] = owner.ID;  		provsOwnedByChar.Add (adj);  		m_unownedProvs.Remove (adj);  		finishedGrowing = false;  		realmSize++;  	}  	ownProv.CustomFlags ["charSurrounded"] = true;  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GrowRepublicRealm,The following statement contains a magic number: foreach (Province adj in ownProv.Adjacencies) {  	if (realmSize >= m_options.RuleSet.RepublicExpandMax) {  		owner.CustomFlags ["atMaxSize"] = true;  		return;  	}  	if (m_options.RuleSet.IgnoredTitles.Contains (adj.Title))  		continue;  	if (!adj.IsCoastal)  		continue;  	if (m_options.Random.Next (0' 100) > m_options.RuleSet.RepublicExpandChance) {  		owner.CustomFlags ["atMaxSize"] = true;  		return;  	}  	if (adj.CustomFlags.ContainsKey ("charOwned")) {  		neighbourID = (int)adj.CustomFlags ["charOwner"];  		if (!neighbours.Contains (neighbourID))  			neighbours.Add (neighbourID);  		continue;  	}  	adj.CustomFlags ["charOwned"] = true;  	adj.CustomFlags ["charOwner"] = owner.ID;  	provsOwnedByChar.Add (adj);  	m_unownedProvs.Remove (adj);  	finishedGrowing = false;  	realmSize++;  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GrowRepublicRealm,The following statement contains a magic number: if (m_options.Random.Next (0' 100) > m_options.RuleSet.RepublicExpandChance) {  	owner.CustomFlags ["atMaxSize"] = true;  	return;  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,WriteRepublics,The following statement contains a magic number: for (int i = 0; i < repChars.Count; i++) {  	c = repChars [i];  	liege = ((List<Title>)c.CustomFlags ["duchies"]) [0].TitleID;  	provsOwnedByChar = (List<Province>)c.CustomFlags ["provs"];  	id = (i * 6) + 1;  	//Output family holding.  	string name = GetFamilyHoldingName (id);  	Log (String.Format ("Character {0}' ID: {1}:"' c.Name' c.ID));  	Log (String.Format (" --Holding {0}"' name));  	//Title definition.  	titleWriter.WriteLine (name + " = {");  	titleWriter.WriteLine ("\tculture = " + c.Culture);  	titleWriter.WriteLine ("\treligion = " + c.Religion);  	titleWriter.WriteLine ("}");  	//Title history  	titlePath = Path.Combine (m_options.Data.MyDocsDir.FullName' m_options.Mod.Path);  	titlePath = Path.Combine (titlePath' "history/titles/" + name + ".txt").Replace ('\\'' '/');  	using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  		DateTime outDate = c.Events [0].Date.AddDays (1);  		sw.Write (outDate.Year + "." + outDate.Month);  		sw.WriteLine ("." + outDate.Day + "= {");  		sw.WriteLine ("\tholding_dynasty = " + c.Dynasty);  		sw.WriteLine ("\tliege = \"" + liege + "\"");  		sw.WriteLine ("\tholder = " + c.ID.ToString ());  		sw.WriteLine ("}");  	}  	//Update province history;  	foreach (Province p in provsOwnedByChar) {  		//Barony history  		titlePath = Path.Combine (m_options.Data.MyDocsDir.FullName' m_options.Mod.Path);  		titlePath = Path.Combine (titlePath' "history/titles/" + p.Settlements [0].Title + ".txt").Replace ('\\'' '/');  		using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  			DateTime outDate = c.Events [0].Date.AddDays (1);  			sw.Write (outDate.Year + "." + outDate.Month);  			sw.WriteLine ("." + outDate.Day + "= {");  			sw.WriteLine ("\tholder = " + c.ID);  			sw.WriteLine ("}");  		}  	}  	CreatePatritians (titleWriter' liege' id' c.Culture' c.Religion);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,WriteRepublics,The following statement contains a magic number: for (int i = 0; i < repChars.Count; i++) {  	c = repChars [i];  	liege = ((List<Title>)c.CustomFlags ["duchies"]) [0].TitleID;  	provsOwnedByChar = (List<Province>)c.CustomFlags ["provs"];  	id = (i * 6) + 1;  	//Output family holding.  	string name = GetFamilyHoldingName (id);  	Log (String.Format ("Character {0}' ID: {1}:"' c.Name' c.ID));  	Log (String.Format (" --Holding {0}"' name));  	//Title definition.  	titleWriter.WriteLine (name + " = {");  	titleWriter.WriteLine ("\tculture = " + c.Culture);  	titleWriter.WriteLine ("\treligion = " + c.Religion);  	titleWriter.WriteLine ("}");  	//Title history  	titlePath = Path.Combine (m_options.Data.MyDocsDir.FullName' m_options.Mod.Path);  	titlePath = Path.Combine (titlePath' "history/titles/" + name + ".txt").Replace ('\\'' '/');  	using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  		DateTime outDate = c.Events [0].Date.AddDays (1);  		sw.Write (outDate.Year + "." + outDate.Month);  		sw.WriteLine ("." + outDate.Day + "= {");  		sw.WriteLine ("\tholding_dynasty = " + c.Dynasty);  		sw.WriteLine ("\tliege = \"" + liege + "\"");  		sw.WriteLine ("\tholder = " + c.ID.ToString ());  		sw.WriteLine ("}");  	}  	//Update province history;  	foreach (Province p in provsOwnedByChar) {  		//Barony history  		titlePath = Path.Combine (m_options.Data.MyDocsDir.FullName' m_options.Mod.Path);  		titlePath = Path.Combine (titlePath' "history/titles/" + p.Settlements [0].Title + ".txt").Replace ('\\'' '/');  		using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  			DateTime outDate = c.Events [0].Date.AddDays (1);  			sw.Write (outDate.Year + "." + outDate.Month);  			sw.WriteLine ("." + outDate.Day + "= {");  			sw.WriteLine ("\tholder = " + c.ID);  			sw.WriteLine ("}");  		}  	}  	CreatePatritians (titleWriter' liege' id' c.Culture' c.Religion);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,WriteRepublics,The following statement contains a magic number: for (int i = 0; i < repChars.Count; i++) {  	c = repChars [i];  	liege = ((List<Title>)c.CustomFlags ["duchies"]) [0].TitleID;  	provsOwnedByChar = (List<Province>)c.CustomFlags ["provs"];  	id = (i * 6) + 1;  	//Output family holding.  	string name = GetFamilyHoldingName (id);  	Log (String.Format ("Character {0}' ID: {1}:"' c.Name' c.ID));  	Log (String.Format (" --Holding {0}"' name));  	//Title definition.  	titleWriter.WriteLine (name + " = {");  	titleWriter.WriteLine ("\tculture = " + c.Culture);  	titleWriter.WriteLine ("\treligion = " + c.Religion);  	titleWriter.WriteLine ("}");  	//Title history  	titlePath = Path.Combine (m_options.Data.MyDocsDir.FullName' m_options.Mod.Path);  	titlePath = Path.Combine (titlePath' "history/titles/" + name + ".txt").Replace ('\\'' '/');  	using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  		DateTime outDate = c.Events [0].Date.AddDays (1);  		sw.Write (outDate.Year + "." + outDate.Month);  		sw.WriteLine ("." + outDate.Day + "= {");  		sw.WriteLine ("\tholding_dynasty = " + c.Dynasty);  		sw.WriteLine ("\tliege = \"" + liege + "\"");  		sw.WriteLine ("\tholder = " + c.ID.ToString ());  		sw.WriteLine ("}");  	}  	//Update province history;  	foreach (Province p in provsOwnedByChar) {  		//Barony history  		titlePath = Path.Combine (m_options.Data.MyDocsDir.FullName' m_options.Mod.Path);  		titlePath = Path.Combine (titlePath' "history/titles/" + p.Settlements [0].Title + ".txt").Replace ('\\'' '/');  		using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  			DateTime outDate = c.Events [0].Date.AddDays (1);  			sw.Write (outDate.Year + "." + outDate.Month);  			sw.WriteLine ("." + outDate.Day + "= {");  			sw.WriteLine ("\tholder = " + c.ID);  			sw.WriteLine ("}");  		}  	}  	CreatePatritians (titleWriter' liege' id' c.Culture' c.Religion);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,WriteRepublics,The following statement contains a magic number: id = (i * 6) + 1;  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,WriteRepublics,The following statement contains a magic number: using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  	DateTime outDate = c.Events [0].Date.AddDays (1);  	sw.Write (outDate.Year + "." + outDate.Month);  	sw.WriteLine ("." + outDate.Day + "= {");  	sw.WriteLine ("\tholding_dynasty = " + c.Dynasty);  	sw.WriteLine ("\tliege = \"" + liege + "\"");  	sw.WriteLine ("\tholder = " + c.ID.ToString ());  	sw.WriteLine ("}");  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,WriteRepublics,The following statement contains a magic number: foreach (Province p in provsOwnedByChar) {  	//Barony history  	titlePath = Path.Combine (m_options.Data.MyDocsDir.FullName' m_options.Mod.Path);  	titlePath = Path.Combine (titlePath' "history/titles/" + p.Settlements [0].Title + ".txt").Replace ('\\'' '/');  	using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  		DateTime outDate = c.Events [0].Date.AddDays (1);  		sw.Write (outDate.Year + "." + outDate.Month);  		sw.WriteLine ("." + outDate.Day + "= {");  		sw.WriteLine ("\tholder = " + c.ID);  		sw.WriteLine ("}");  	}  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,WriteRepublics,The following statement contains a magic number: using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  	DateTime outDate = c.Events [0].Date.AddDays (1);  	sw.Write (outDate.Year + "." + outDate.Month);  	sw.WriteLine ("." + outDate.Day + "= {");  	sw.WriteLine ("\tholder = " + c.ID);  	sw.WriteLine ("}");  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreatePatritians,The following statement contains a magic number: for (int i = 1; i <= numPat; i++) {  	Log (string.Format ("   --Patrician {0}:"' i));  	string name = GetFamilyHoldingName (id + i);  	Log (String.Format ("     Holding: {0}"' name));  	CharacterOption co = new CharacterOption ();  	co.Culture = m_options.Data.GetCulture (culture);  	co.SpecifiedCulture = true;  	co.Religion = m_options.Data.Religions [religion];  	co.SpecifiedReligion = true;  	co.Gender = RuleSet.Gender.Male;  	co.IsSpouse = false;  	chars = CreateRandomCharacter (co' m_availDynasties' false);  	foreach (Character c in chars)  		WriteCharacter (m_charWriter' c);  	Log (String.Format ("     ID: {0}"' chars [0].ID));  	//Title definition.  	titleWriter.WriteLine (name + " = {");  	titleWriter.WriteLine ("\tculture = " + culture);  	titleWriter.WriteLine ("\treligion = " + religion);  	titleWriter.WriteLine ("}");  	//Title history  	string titlePath = Path.Combine (m_options.Data.MyDocsDir.FullName' m_options.Mod.Path);  	titlePath = Path.Combine (titlePath' "history/titles/" + name + ".txt").Replace ('\\'' '/');  	using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  		DateTime outDate = chars [0].Events [0].Date.AddDays (1);  		sw.Write (outDate.Year + "." + outDate.Month);  		sw.WriteLine ("." + outDate.Day + "= {");  		sw.WriteLine ("\tholding_dynasty = " + chars [0].Dynasty);  		sw.WriteLine ("\tliege = \"" + liege + "\"");  		sw.WriteLine ("\tholder = " + chars [0].ID.ToString ());  		sw.WriteLine ("}");  	}  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreatePatritians,The following statement contains a magic number: using (StreamWriter sw = new StreamWriter (titlePath' false' Encoding.GetEncoding (1252))) {  	DateTime outDate = chars [0].Events [0].Date.AddDays (1);  	sw.Write (outDate.Year + "." + outDate.Month);  	sw.WriteLine ("." + outDate.Day + "= {");  	sw.WriteLine ("\tholding_dynasty = " + chars [0].Dynasty);  	sw.WriteLine ("\tliege = \"" + liege + "\"");  	sw.WriteLine ("\tholder = " + chars [0].ID.ToString ());  	sw.WriteLine ("}");  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetFamilyHoldingName,The following statement contains a magic number: while (i > 0) {  	i = Math.DivRem (i' 4' out rem);  	switch (rem) {  	case 0:  		parts = "ze" + parts;  		break;  	case 1:  		parts = "on" + parts;  		break;  	case 2:  		parts = "tw" + parts;  		break;  	case 3:  		parts = "th" + parts;  		break;  	}  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetFamilyHoldingName,The following statement contains a magic number: while (i > 0) {  	i = Math.DivRem (i' 4' out rem);  	switch (rem) {  	case 0:  		parts = "ze" + parts;  		break;  	case 1:  		parts = "on" + parts;  		break;  	case 2:  		parts = "tw" + parts;  		break;  	case 3:  		parts = "th" + parts;  		break;  	}  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetFamilyHoldingName,The following statement contains a magic number: while (i > 0) {  	i = Math.DivRem (i' 4' out rem);  	switch (rem) {  	case 0:  		parts = "ze" + parts;  		break;  	case 1:  		parts = "on" + parts;  		break;  	case 2:  		parts = "tw" + parts;  		break;  	case 3:  		parts = "th" + parts;  		break;  	}  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetFamilyHoldingName,The following statement contains a magic number: i = Math.DivRem (i' 4' out rem);  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetFamilyHoldingName,The following statement contains a magic number: switch (rem) {  case 0:  	parts = "ze" + parts;  	break;  case 1:  	parts = "on" + parts;  	break;  case 2:  	parts = "tw" + parts;  	break;  case 3:  	parts = "th" + parts;  	break;  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetFamilyHoldingName,The following statement contains a magic number: switch (rem) {  case 0:  	parts = "ze" + parts;  	break;  case 1:  	parts = "on" + parts;  	break;  case 2:  	parts = "tw" + parts;  	break;  case 3:  	parts = "th" + parts;  	break;  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeKings,The following statement contains a magic number: if (isKing) {  	possibleKingdoms = GetPossibleKingdoms (duchiesOwnedByChar' owner);  	homeTitle = duchiesOwnedByChar [0];  	owner.CustomFlags ["kingdoms"] = possibleKingdoms;  	if (m_options.CreateKingdoms && m_options.Random.NextDouble () > 0.5) {  		owner.CustomFlags ["HasCustomKingdom"] = true;  		Title customKingdom = new Title ();  		customKingdom.TitleID = "k_" + homeTitle.TitleID.Substring (2);  		customKingdom.Culture = homeTitle.Culture;  		customKingdom.CustomFlags ["isCustom"] = true;  		if (!m_options.Data.Kingdoms.ContainsKey (customKingdom.TitleID)) {  			customKingdom.Parent = homeTitle.Parent;  			possibleKingdoms.Insert (0' customKingdom);  		}  	}  	kingdomsOwnerByChar.AddRange (possibleKingdoms);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeKings,The following statement contains a magic number: if (isKing) {  	possibleKingdoms = GetPossibleKingdoms (duchiesOwnedByChar' owner);  	homeTitle = duchiesOwnedByChar [0];  	owner.CustomFlags ["kingdoms"] = possibleKingdoms;  	if (m_options.CreateKingdoms && m_options.Random.NextDouble () > 0.5) {  		owner.CustomFlags ["HasCustomKingdom"] = true;  		Title customKingdom = new Title ();  		customKingdom.TitleID = "k_" + homeTitle.TitleID.Substring (2);  		customKingdom.Culture = homeTitle.Culture;  		customKingdom.CustomFlags ["isCustom"] = true;  		if (!m_options.Data.Kingdoms.ContainsKey (customKingdom.TitleID)) {  			customKingdom.Parent = homeTitle.Parent;  			possibleKingdoms.Insert (0' customKingdom);  		}  	}  	kingdomsOwnerByChar.AddRange (possibleKingdoms);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeKings,The following statement contains a magic number: if (m_options.CreateKingdoms && m_options.Random.NextDouble () > 0.5) {  	owner.CustomFlags ["HasCustomKingdom"] = true;  	Title customKingdom = new Title ();  	customKingdom.TitleID = "k_" + homeTitle.TitleID.Substring (2);  	customKingdom.Culture = homeTitle.Culture;  	customKingdom.CustomFlags ["isCustom"] = true;  	if (!m_options.Data.Kingdoms.ContainsKey (customKingdom.TitleID)) {  		customKingdom.Parent = homeTitle.Parent;  		possibleKingdoms.Insert (0' customKingdom);  	}  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeKings,The following statement contains a magic number: if (m_options.CreateKingdoms && m_options.Random.NextDouble () > 0.5) {  	owner.CustomFlags ["HasCustomKingdom"] = true;  	Title customKingdom = new Title ();  	customKingdom.TitleID = "k_" + homeTitle.TitleID.Substring (2);  	customKingdom.Culture = homeTitle.Culture;  	customKingdom.CustomFlags ["isCustom"] = true;  	if (!m_options.Data.Kingdoms.ContainsKey (customKingdom.TitleID)) {  		customKingdom.Parent = homeTitle.Parent;  		possibleKingdoms.Insert (0' customKingdom);  	}  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeKings,The following statement contains a magic number: customKingdom.TitleID = "k_" + homeTitle.TitleID.Substring (2);  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetPossibleKingdoms,The following statement contains a magic number: foreach (Title title in duchiesOwnedByChar) {  	ownedInKingdom = 0;  	kingdom = title.Parent;  	if (kingdom.CustomFlags.ContainsKey ("owned"))  		continue;  	if (m_options.RuleSet.IgnoredTitles.Contains (kingdom.TitleID))  		continue;  	foreach (var subTitle in kingdom.SubTitles) {  		if (!subTitle.Value.CustomFlags.ContainsKey ("owner"))  			continue;  		int ownerID = (int)subTitle.Value.CustomFlags ["owner"];  		if (ownerID == owner.ID)  			ownedInKingdom++;  	}  	double percentOwned = (double)ownedInKingdom / kingdom.SubTitles.Count;  	if (percentOwned < 0.55)  		continue;  	if (!pos.Contains (kingdom))  		pos.Add (kingdom);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetPossibleKingdoms,The following statement contains a magic number: if (percentOwned < 0.55)  	continue;  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeDukes,The following statement contains a magic number: if (createDuchy == null)  	createDuchy = (m_options.CreateDuchies && m_options.Random.NextDouble () > 0.5 && duchiesOwnedByChar.Count > 0);  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeDukes,The following statement contains a magic number: createDuchy = (m_options.CreateDuchies && m_options.Random.NextDouble () > 0.5 && duchiesOwnedByChar.Count > 0);  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeDukes,The following statement contains a magic number: if (createDuchy == true) {  	owner.CustomFlags ["HasCustomDuchy"] = true;  	Title homeTitle = duchiesOwnedByChar [0].SubTitles.Values.ToList () [0];  	Title customDuchy = new Title ();  	customDuchy.TitleID = "d_" + homeTitle.TitleID.Substring (2);  	customDuchy.Culture = homeTitle.Culture;  	customDuchy.CustomFlags ["isCustom"] = true;  	if (!m_options.Data.Duchies.ContainsKey (customDuchy.TitleID)) {  		// More hackery.  		if (owner.CustomFlags.ContainsKey ("isRep"))  			duchiesOwnedByChar.RemoveAt (0);  		m_customDuchies.Add (customDuchy);  		customDuchy.Parent = homeTitle.Parent.Parent;  		duchiesOwnedByChar.Insert (0' customDuchy);  	}  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeDukes,The following statement contains a magic number: customDuchy.TitleID = "d_" + homeTitle.TitleID.Substring (2);  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetFeudalDuchies,The following statement contains a magic number: foreach (Province p in provsOwnerByChar) {  	ownedInDuchy = 0;  	//A province may not have an associated county title.  	if (p.Title == null || !m_options.Data.Counties.ContainsKey (p.Title))  		continue;  	duchy = m_options.Data.Counties [p.Title].Parent;  	if (duchy.CustomFlags.ContainsKey ("owned") || m_options.RuleSet.IgnoredTitles.Contains (duchy.TitleID))  		continue;  	foreach (var pair in duchy.SubTitles) {  		if (!m_options.Data.Provinces.ContainsKey (pair.Value.CountyID))  			continue;  		prov = m_options.Data.Provinces [pair.Value.CountyID];  		if (!prov.CustomFlags.ContainsKey ("charOwned"))  			continue;  		int ownerID = (int)prov.CustomFlags ["charOwner"];  		if (ownerID == owner.ID)  			ownedInDuchy++;  	}  	double percentOwned = (double)ownedInDuchy / duchy.SubTitles.Count;  	if (percentOwned < 0.55)  		continue;  	duchy.CustomFlags ["owned"] = true;  	duchy.CustomFlags ["owner"] = owner.ID;  	if (!duchiesOwnedByChar.Contains (duchy))  		duchiesOwnedByChar.Add (duchy);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetFeudalDuchies,The following statement contains a magic number: if (percentOwned < 0.55)  	continue;  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeVassals,The following statement contains a magic number: switch (vassalTier) {  case TitleTier.Count:  	vassalSize = usable.Count / 3;  	break;  case TitleTier.Duke:  	vassalSize = usable.Count / m_options.RuleSet.DuchyMinSize;  	break;  case TitleTier.King:  	vassalSize = usable.Count / m_options.RuleSet.KingdomMinSize;  	break;  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeVassals,The following statement contains a magic number: vassalSize = usable.Count / 3;  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetUnReservedProvinces,The following statement contains a magic number: liege.CustomFlags ["provs"] = owned.Take (5).ToList ();  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreateNewFeudalCharacters,The following statement contains a magic number: for (int i = 0; i < numRealms; i++) {  	if (usableProvs.Count == 0)  		break;  	int id = m_options.Random.Next (usableProvs.Count);  	prov = usableProvs [id];  	usableProvs.Remove (prov);  	#region Filtering  	//Province doesn't have associated title.  	if (prov.Title == null || !m_options.Data.Counties.ContainsKey (prov.Title)) {  		i--;  		m_log.Log (String.Format ("Province {0}-{1}: Title ID is null or doesn't exist."' prov.ID' prov.Title)' Logger.LogType.Error);  		continue;  	}  	if (prov.Culture == null || prov.Religion == null || !m_options.Data.ContainsCulture (prov.Culture) || !m_options.Data.Religions.ContainsKey (prov.Religion)) {  		i--;  		m_log.Log (String.Format ("Province {0}-{1}: Culture or religion is null or doesn't exist. {2}' {3}"' prov.ID' prov.Title' prov.Culture' prov.Religion)' Logger.LogType.Error);  		continue;  	}  	#endregion  	Log ("Title " + prov.Title);  	// Need to handle chance of liege culture and religion.	  	if (liege != null && m_options.Random.Next (100) <= m_options.RuleSet.LiegeCultureChance)  		provCul = m_options.Data.GetCulture (liege.Culture);  	else  		provCul = m_options.Data.GetCulture (prov.Culture);  	if (liege != null && m_options.Random.Next (100) > m_options.RuleSet.LiegeReligionChance)  		provRel = m_options.Data.Religions [liege.Religion];  	else  		provRel = m_options.Data.Religions [prov.Religion];  	CharacterOption co = new CharacterOption ();  	co.Culture = provCul;  	co.SpecifiedCulture = true;  	co.Religion = provRel;  	co.SpecifiedReligion = true;  	co.IsSpouse = false;  	co.Gender = RuleSet.Gender.Random;  	chars = CreateRandomCharacter (co' m_availDynasties' true);  	prov.CustomFlags ["charOwned"] = true;  	prov.CustomFlags ["charOwner"] = chars [0].ID;  	provsOwnedByChar = new List<Province> ();  	provsOwnedByChar.Add (prov);  	chars [0].CustomFlags ["provs"] = provsOwnedByChar;  	chars [0].CustomFlags ["duchies"] = new List<Title> ();  	chars [0].CustomFlags ["kingdoms"] = new List<Title> ();  	chars [0].CustomFlags ["neighbours"] = new List<int> ();  	chars [0].CustomFlags ["realmDuchies"] = new List<Title> ();  	chars [0].CustomFlags ["VassalCount"] = 0;  	chars [0].CustomFlags ["Liege"] = liege;  	chars [0].CustomFlags ["Tier"] = TitleTier.Count;  	owners.Add (chars [0]);  	if (chars.Count == 2)  		m_spouses.Add (chars [1]);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreateNewFeudalCharacters,The following statement contains a magic number: for (int i = 0; i < numRealms; i++) {  	if (usableProvs.Count == 0)  		break;  	int id = m_options.Random.Next (usableProvs.Count);  	prov = usableProvs [id];  	usableProvs.Remove (prov);  	#region Filtering  	//Province doesn't have associated title.  	if (prov.Title == null || !m_options.Data.Counties.ContainsKey (prov.Title)) {  		i--;  		m_log.Log (String.Format ("Province {0}-{1}: Title ID is null or doesn't exist."' prov.ID' prov.Title)' Logger.LogType.Error);  		continue;  	}  	if (prov.Culture == null || prov.Religion == null || !m_options.Data.ContainsCulture (prov.Culture) || !m_options.Data.Religions.ContainsKey (prov.Religion)) {  		i--;  		m_log.Log (String.Format ("Province {0}-{1}: Culture or religion is null or doesn't exist. {2}' {3}"' prov.ID' prov.Title' prov.Culture' prov.Religion)' Logger.LogType.Error);  		continue;  	}  	#endregion  	Log ("Title " + prov.Title);  	// Need to handle chance of liege culture and religion.	  	if (liege != null && m_options.Random.Next (100) <= m_options.RuleSet.LiegeCultureChance)  		provCul = m_options.Data.GetCulture (liege.Culture);  	else  		provCul = m_options.Data.GetCulture (prov.Culture);  	if (liege != null && m_options.Random.Next (100) > m_options.RuleSet.LiegeReligionChance)  		provRel = m_options.Data.Religions [liege.Religion];  	else  		provRel = m_options.Data.Religions [prov.Religion];  	CharacterOption co = new CharacterOption ();  	co.Culture = provCul;  	co.SpecifiedCulture = true;  	co.Religion = provRel;  	co.SpecifiedReligion = true;  	co.IsSpouse = false;  	co.Gender = RuleSet.Gender.Random;  	chars = CreateRandomCharacter (co' m_availDynasties' true);  	prov.CustomFlags ["charOwned"] = true;  	prov.CustomFlags ["charOwner"] = chars [0].ID;  	provsOwnedByChar = new List<Province> ();  	provsOwnedByChar.Add (prov);  	chars [0].CustomFlags ["provs"] = provsOwnedByChar;  	chars [0].CustomFlags ["duchies"] = new List<Title> ();  	chars [0].CustomFlags ["kingdoms"] = new List<Title> ();  	chars [0].CustomFlags ["neighbours"] = new List<int> ();  	chars [0].CustomFlags ["realmDuchies"] = new List<Title> ();  	chars [0].CustomFlags ["VassalCount"] = 0;  	chars [0].CustomFlags ["Liege"] = liege;  	chars [0].CustomFlags ["Tier"] = TitleTier.Count;  	owners.Add (chars [0]);  	if (chars.Count == 2)  		m_spouses.Add (chars [1]);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreateNewFeudalCharacters,The following statement contains a magic number: for (int i = 0; i < numRealms; i++) {  	if (usableProvs.Count == 0)  		break;  	int id = m_options.Random.Next (usableProvs.Count);  	prov = usableProvs [id];  	usableProvs.Remove (prov);  	#region Filtering  	//Province doesn't have associated title.  	if (prov.Title == null || !m_options.Data.Counties.ContainsKey (prov.Title)) {  		i--;  		m_log.Log (String.Format ("Province {0}-{1}: Title ID is null or doesn't exist."' prov.ID' prov.Title)' Logger.LogType.Error);  		continue;  	}  	if (prov.Culture == null || prov.Religion == null || !m_options.Data.ContainsCulture (prov.Culture) || !m_options.Data.Religions.ContainsKey (prov.Religion)) {  		i--;  		m_log.Log (String.Format ("Province {0}-{1}: Culture or religion is null or doesn't exist. {2}' {3}"' prov.ID' prov.Title' prov.Culture' prov.Religion)' Logger.LogType.Error);  		continue;  	}  	#endregion  	Log ("Title " + prov.Title);  	// Need to handle chance of liege culture and religion.	  	if (liege != null && m_options.Random.Next (100) <= m_options.RuleSet.LiegeCultureChance)  		provCul = m_options.Data.GetCulture (liege.Culture);  	else  		provCul = m_options.Data.GetCulture (prov.Culture);  	if (liege != null && m_options.Random.Next (100) > m_options.RuleSet.LiegeReligionChance)  		provRel = m_options.Data.Religions [liege.Religion];  	else  		provRel = m_options.Data.Religions [prov.Religion];  	CharacterOption co = new CharacterOption ();  	co.Culture = provCul;  	co.SpecifiedCulture = true;  	co.Religion = provRel;  	co.SpecifiedReligion = true;  	co.IsSpouse = false;  	co.Gender = RuleSet.Gender.Random;  	chars = CreateRandomCharacter (co' m_availDynasties' true);  	prov.CustomFlags ["charOwned"] = true;  	prov.CustomFlags ["charOwner"] = chars [0].ID;  	provsOwnedByChar = new List<Province> ();  	provsOwnedByChar.Add (prov);  	chars [0].CustomFlags ["provs"] = provsOwnedByChar;  	chars [0].CustomFlags ["duchies"] = new List<Title> ();  	chars [0].CustomFlags ["kingdoms"] = new List<Title> ();  	chars [0].CustomFlags ["neighbours"] = new List<int> ();  	chars [0].CustomFlags ["realmDuchies"] = new List<Title> ();  	chars [0].CustomFlags ["VassalCount"] = 0;  	chars [0].CustomFlags ["Liege"] = liege;  	chars [0].CustomFlags ["Tier"] = TitleTier.Count;  	owners.Add (chars [0]);  	if (chars.Count == 2)  		m_spouses.Add (chars [1]);  }  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreateNewFeudalCharacters,The following statement contains a magic number: if (liege != null && m_options.Random.Next (100) <= m_options.RuleSet.LiegeCultureChance)  	provCul = m_options.Data.GetCulture (liege.Culture);  else  	provCul = m_options.Data.GetCulture (prov.Culture);  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreateNewFeudalCharacters,The following statement contains a magic number: if (liege != null && m_options.Random.Next (100) > m_options.RuleSet.LiegeReligionChance)  	provRel = m_options.Data.Religions [liege.Religion];  else  	provRel = m_options.Data.Religions [prov.Religion];  
Magic Number,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,CreateNewFeudalCharacters,The following statement contains a magic number: if (chars.Count == 2)  	m_spouses.Add (chars [1]);  
Magic Number,TitleGenerator.Tasks.TitleGeneration,NationTableTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\NationTableTask.cs,CreateTableEntry,The following statement contains a magic number: nations.WriteLine (prefix + convert.Substring (2));  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,CreateTitleString,The following statement contains a magic number: sb.AppendLine (prefix + t.TitleID.Substring (2) + " = {");  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,CreateTitleString,The following statement contains a magic number: if (hasValidCultureReligion && !String.IsNullOrEmpty (scriptTemp)) {  	scriptTemp = ParseScript (scriptTemp' prefix + t.TitleID.Substring (2)' t.Culture' m_options.Data.GetCulture (t.Culture).Group.Name' t.Religion' m_options.Data.Religions [t.Religion].Group.Name' capital' "c" + t.TitleID.Substring (1)' "d" + t.TitleID.Substring (1)' "k" + t.TitleID.Substring (1)' "e" + t.TitleID.Substring (1)' m_options.CountyLimit' m_options.DuchyLimit' m_options.KingdomLimit);  	sb.AppendLine ("\tgain_effect = {");  	sb.AppendLine (scriptTemp);  	sb.AppendLine ("\t}");  	//Close gain_effect   }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,CreateTitleString,The following statement contains a magic number: scriptTemp = ParseScript (scriptTemp' prefix + t.TitleID.Substring (2)' t.Culture' m_options.Data.GetCulture (t.Culture).Group.Name' t.Religion' m_options.Data.Religions [t.Religion].Group.Name' capital' "c" + t.TitleID.Substring (1)' "d" + t.TitleID.Substring (1)' "k" + t.TitleID.Substring (1)' "e" + t.TitleID.Substring (1)' m_options.CountyLimit' m_options.DuchyLimit' m_options.KingdomLimit);  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,CreateTitleString,The following statement contains a magic number: if (hasValidCultureReligion && !String.IsNullOrEmpty (scriptTemp)) {  	scriptTemp = ParseScript (scriptTemp' prefix + t.TitleID.Substring (2)' t.Culture' m_options.Data.GetCulture (t.Culture).Group.Name' t.Religion' m_options.Data.Religions [t.Religion].Group.Name' capital' "c" + t.TitleID.Substring (1)' "d" + t.TitleID.Substring (1)' "k" + t.TitleID.Substring (1)' "e" + t.TitleID.Substring (1)' m_options.CountyLimit' m_options.DuchyLimit' m_options.KingdomLimit);  	sb.AppendLine ("\tallow = {");  	sb.AppendLine (scriptTemp);  	sb.AppendLine ("\t}");  	//Close allow    }  else {  	sb.AppendLine ("\tallow = {");  	sb.AppendLine (prefix + t.TitleID.Substring (2) + "= { is_titular = no } ");  	sb.AppendLine ("\t}");  	//Close allow  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,CreateTitleString,The following statement contains a magic number: if (hasValidCultureReligion && !String.IsNullOrEmpty (scriptTemp)) {  	scriptTemp = ParseScript (scriptTemp' prefix + t.TitleID.Substring (2)' t.Culture' m_options.Data.GetCulture (t.Culture).Group.Name' t.Religion' m_options.Data.Religions [t.Religion].Group.Name' capital' "c" + t.TitleID.Substring (1)' "d" + t.TitleID.Substring (1)' "k" + t.TitleID.Substring (1)' "e" + t.TitleID.Substring (1)' m_options.CountyLimit' m_options.DuchyLimit' m_options.KingdomLimit);  	sb.AppendLine ("\tallow = {");  	sb.AppendLine (scriptTemp);  	sb.AppendLine ("\t}");  	//Close allow    }  else {  	sb.AppendLine ("\tallow = {");  	sb.AppendLine (prefix + t.TitleID.Substring (2) + "= { is_titular = no } ");  	sb.AppendLine ("\t}");  	//Close allow  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,CreateTitleString,The following statement contains a magic number: scriptTemp = ParseScript (scriptTemp' prefix + t.TitleID.Substring (2)' t.Culture' m_options.Data.GetCulture (t.Culture).Group.Name' t.Religion' m_options.Data.Religions [t.Religion].Group.Name' capital' "c" + t.TitleID.Substring (1)' "d" + t.TitleID.Substring (1)' "k" + t.TitleID.Substring (1)' "e" + t.TitleID.Substring (1)' m_options.CountyLimit' m_options.DuchyLimit' m_options.KingdomLimit);  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,CreateTitleString,The following statement contains a magic number: sb.AppendLine (prefix + t.TitleID.Substring (2) + "= { is_titular = no } ");  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,NewTitleColourFromPrevious,The following statement contains a magic number: if (title.TitleID [2] % 2 == 0)  	hue += m_options.Random.Next (7 * levDif) / 100f;  else  	hue -= m_options.Random.Next (7 * levDif) / 100f;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,NewTitleColourFromPrevious,The following statement contains a magic number: if (title.TitleID [2] % 2 == 0)  	hue += m_options.Random.Next (7 * levDif) / 100f;  else  	hue -= m_options.Random.Next (7 * levDif) / 100f;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,NewTitleColourFromPrevious,The following statement contains a magic number: if (title.TitleID [2] % 2 == 0)  	hue += m_options.Random.Next (7 * levDif) / 100f;  else  	hue -= m_options.Random.Next (7 * levDif) / 100f;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,NewTitleColourFromPrevious,The following statement contains a magic number: if (title.TitleID [2] % 2 == 0)  	hue += m_options.Random.Next (7 * levDif) / 100f;  else  	hue -= m_options.Random.Next (7 * levDif) / 100f;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,NewTitleColourFromPrevious,The following statement contains a magic number: hue += m_options.Random.Next (7 * levDif) / 100f;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,NewTitleColourFromPrevious,The following statement contains a magic number: hue -= m_options.Random.Next (7 * levDif) / 100f;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,GetTitleLevelDifference,The following statement contains a magic number: if (substring == "d_")  	baseTitle = 2;  else if (substring == "k_")  	baseTitle = 3;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,GetTitleLevelDifference,The following statement contains a magic number: if (substring == "d_")  	baseTitle = 2;  else if (substring == "k_")  	baseTitle = 3;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,GetTitleLevelDifference,The following statement contains a magic number: baseTitle = 2;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,GetTitleLevelDifference,The following statement contains a magic number: if (substring == "k_")  	baseTitle = 3;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,GetTitleLevelDifference,The following statement contains a magic number: baseTitle = 3;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,GetTitleLevelDifference,The following statement contains a magic number: if (prefix == "k_")  	newTitle = 3;  else if (prefix == "e_")  	newTitle = 4;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,GetTitleLevelDifference,The following statement contains a magic number: if (prefix == "k_")  	newTitle = 3;  else if (prefix == "e_")  	newTitle = 4;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,GetTitleLevelDifference,The following statement contains a magic number: newTitle = 3;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,GetTitleLevelDifference,The following statement contains a magic number: if (prefix == "e_")  	newTitle = 4;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,CreateTitleTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\CreateTitleTask.cs,GetTitleLevelDifference,The following statement contains a magic number: newTitle = 4;  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromKingdoms,The following statement contains a magic number: foreach (FileInfo f in flags) {  	if (TaskStatus.Abort)  		return;  	flagName = f.Name.Replace (f.Extension' "");  	SendMessage ("Creating Flags... " + flagName);  	Log (flagName);  	Log (" --Checking for Duchy");  	t = FetchTitle (flagName' m_options.Data.Kingdoms);  	if (t == null || IsFilteredTitle (t))  		continue;  	if (!m_options.CreateEmpires)  		continue;  	Log (" --Checking for Empire");  	flagName = "e_" + flagName.Substring (2);  	WriteFlag (writeDir' f' flagName' TitleLevel.Empire);  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromKingdoms,The following statement contains a magic number: flagName = "e_" + flagName.Substring (2);  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromDuchies,The following statement contains a magic number: foreach (FileInfo f in flags) {  	if (TaskStatus.Abort)  		return;  	flagName = f.Name.Replace (f.Extension' "");  	SendMessage ("Creating Flags... " + flagName);  	Log (flagName);  	Log (" --Checking for Duchy");  	t = FetchTitle (flagName' m_options.Data.Duchies);  	if (t == null || IsFilteredTitle (t))  		continue;  	Log (" --Checking for Kingdom");  	flagName = "k_" + flagName.Substring (2);  	if (!WriteFlag (writeDir' f' flagName' TitleLevel.Kingdom))  		continue;  	if (!m_options.CreateEmpires)  		continue;  	Log (" --Checking for Empire");  	flagName = "e_" + flagName.Substring (2);  	WriteFlag (writeDir' f' flagName' TitleLevel.Empire);  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromDuchies,The following statement contains a magic number: foreach (FileInfo f in flags) {  	if (TaskStatus.Abort)  		return;  	flagName = f.Name.Replace (f.Extension' "");  	SendMessage ("Creating Flags... " + flagName);  	Log (flagName);  	Log (" --Checking for Duchy");  	t = FetchTitle (flagName' m_options.Data.Duchies);  	if (t == null || IsFilteredTitle (t))  		continue;  	Log (" --Checking for Kingdom");  	flagName = "k_" + flagName.Substring (2);  	if (!WriteFlag (writeDir' f' flagName' TitleLevel.Kingdom))  		continue;  	if (!m_options.CreateEmpires)  		continue;  	Log (" --Checking for Empire");  	flagName = "e_" + flagName.Substring (2);  	WriteFlag (writeDir' f' flagName' TitleLevel.Empire);  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromDuchies,The following statement contains a magic number: flagName = "k_" + flagName.Substring (2);  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromDuchies,The following statement contains a magic number: flagName = "e_" + flagName.Substring (2);  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromCounties,The following statement contains a magic number: foreach (FileInfo f in flags) {  	if (TaskStatus.Abort)  		return;  	flagName = f.Name.Replace (f.Extension' "");  	SendMessage ("Creating Flags... " + flagName);  	Log (flagName);  	Log (" --Checking for County");  	t = FetchTitle (flagName' m_options.Data.Counties);  	if (t == null || IsFilteredTitle (t))  		continue;  	Log (" --Checking for Duchy");  	flagName = "d_" + flagName.Substring (2);  	if (!WriteFlag (writeDir' f' flagName' TitleLevel.Duchy))  		continue;  	if (!m_options.CreateKingdoms)  		continue;  	Log (" --Checking for Kingdom");  	flagName = "k_" + flagName.Substring (2);  	if (!WriteFlag (writeDir' f' flagName' TitleLevel.Kingdom))  		continue;  	if (!m_options.CreateEmpires)  		continue;  	Log (" --Checking for Empire");  	flagName = "e_" + flagName.Substring (2);  	WriteFlag (writeDir' f' flagName' TitleLevel.Empire);  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromCounties,The following statement contains a magic number: foreach (FileInfo f in flags) {  	if (TaskStatus.Abort)  		return;  	flagName = f.Name.Replace (f.Extension' "");  	SendMessage ("Creating Flags... " + flagName);  	Log (flagName);  	Log (" --Checking for County");  	t = FetchTitle (flagName' m_options.Data.Counties);  	if (t == null || IsFilteredTitle (t))  		continue;  	Log (" --Checking for Duchy");  	flagName = "d_" + flagName.Substring (2);  	if (!WriteFlag (writeDir' f' flagName' TitleLevel.Duchy))  		continue;  	if (!m_options.CreateKingdoms)  		continue;  	Log (" --Checking for Kingdom");  	flagName = "k_" + flagName.Substring (2);  	if (!WriteFlag (writeDir' f' flagName' TitleLevel.Kingdom))  		continue;  	if (!m_options.CreateEmpires)  		continue;  	Log (" --Checking for Empire");  	flagName = "e_" + flagName.Substring (2);  	WriteFlag (writeDir' f' flagName' TitleLevel.Empire);  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromCounties,The following statement contains a magic number: foreach (FileInfo f in flags) {  	if (TaskStatus.Abort)  		return;  	flagName = f.Name.Replace (f.Extension' "");  	SendMessage ("Creating Flags... " + flagName);  	Log (flagName);  	Log (" --Checking for County");  	t = FetchTitle (flagName' m_options.Data.Counties);  	if (t == null || IsFilteredTitle (t))  		continue;  	Log (" --Checking for Duchy");  	flagName = "d_" + flagName.Substring (2);  	if (!WriteFlag (writeDir' f' flagName' TitleLevel.Duchy))  		continue;  	if (!m_options.CreateKingdoms)  		continue;  	Log (" --Checking for Kingdom");  	flagName = "k_" + flagName.Substring (2);  	if (!WriteFlag (writeDir' f' flagName' TitleLevel.Kingdom))  		continue;  	if (!m_options.CreateEmpires)  		continue;  	Log (" --Checking for Empire");  	flagName = "e_" + flagName.Substring (2);  	WriteFlag (writeDir' f' flagName' TitleLevel.Empire);  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromCounties,The following statement contains a magic number: flagName = "d_" + flagName.Substring (2);  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromCounties,The following statement contains a magic number: flagName = "k_" + flagName.Substring (2);  
Magic Number,TitleGenerator.Tasks.TitleGeneration,FlagTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\FlagTask.cs,CreateFlagsFromCounties,The following statement contains a magic number: flagName = "e_" + flagName.Substring (2);  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,CreateStringFromCounties,The following statement contains a magic number: foreach (var pair in m_options.Data.Counties) {  	if (TaskStatus.Abort)  		return;  	#region Duchies  	Title c = pair.Value;  	if (c.Primary)  		continue;  	//Check for existing duchy.  	Title t = m_options.Data.Duchies.ToList ().Find (d => d.Value.TitleID == "d_" + c.TitleID.Substring (2)).Value;  	if (t != null)  		continue;  	string noun;  	if (m_options.Data.Localisations.ContainsKey ("PROV" + c.CountyID)) {  		noun = m_options.Data.Localisations ["PROV" + c.CountyID];  	}  	else {  		Log (" --Couldn't find localisation string for " + c.TitleID);  		continue;  	}  	Log (" --Writing names for " + "d_" + c.TitleID.Substring (2));  	names.WriteLine ("d_" + c.TitleID.Substring (2) + noun.Substring (noun.IndexOf (';')));  	if (m_options.Data.Localisations.ContainsKey (c.TitleID + "_adj"))  		names.WriteLine ("d_" + m_options.Data.Localisations [c.TitleID + "_adj"].Substring (2));  	#endregion  	if (!m_options.CreateKingdoms)  		continue;  	bool cont = MakeNameForTitle (names' "PROV" + c.CountyID' c.TitleID' m_options.KingdomShortNames' TitleLevel.Kingdom);  	if (!cont || !m_options.CreateEmpires)  		continue;  	MakeNameForTitle (names' "PROV" + c.CountyID' c.TitleID' m_options.EmpireShortNames' TitleLevel.Empire);  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,CreateStringFromCounties,The following statement contains a magic number: foreach (var pair in m_options.Data.Counties) {  	if (TaskStatus.Abort)  		return;  	#region Duchies  	Title c = pair.Value;  	if (c.Primary)  		continue;  	//Check for existing duchy.  	Title t = m_options.Data.Duchies.ToList ().Find (d => d.Value.TitleID == "d_" + c.TitleID.Substring (2)).Value;  	if (t != null)  		continue;  	string noun;  	if (m_options.Data.Localisations.ContainsKey ("PROV" + c.CountyID)) {  		noun = m_options.Data.Localisations ["PROV" + c.CountyID];  	}  	else {  		Log (" --Couldn't find localisation string for " + c.TitleID);  		continue;  	}  	Log (" --Writing names for " + "d_" + c.TitleID.Substring (2));  	names.WriteLine ("d_" + c.TitleID.Substring (2) + noun.Substring (noun.IndexOf (';')));  	if (m_options.Data.Localisations.ContainsKey (c.TitleID + "_adj"))  		names.WriteLine ("d_" + m_options.Data.Localisations [c.TitleID + "_adj"].Substring (2));  	#endregion  	if (!m_options.CreateKingdoms)  		continue;  	bool cont = MakeNameForTitle (names' "PROV" + c.CountyID' c.TitleID' m_options.KingdomShortNames' TitleLevel.Kingdom);  	if (!cont || !m_options.CreateEmpires)  		continue;  	MakeNameForTitle (names' "PROV" + c.CountyID' c.TitleID' m_options.EmpireShortNames' TitleLevel.Empire);  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,CreateStringFromCounties,The following statement contains a magic number: foreach (var pair in m_options.Data.Counties) {  	if (TaskStatus.Abort)  		return;  	#region Duchies  	Title c = pair.Value;  	if (c.Primary)  		continue;  	//Check for existing duchy.  	Title t = m_options.Data.Duchies.ToList ().Find (d => d.Value.TitleID == "d_" + c.TitleID.Substring (2)).Value;  	if (t != null)  		continue;  	string noun;  	if (m_options.Data.Localisations.ContainsKey ("PROV" + c.CountyID)) {  		noun = m_options.Data.Localisations ["PROV" + c.CountyID];  	}  	else {  		Log (" --Couldn't find localisation string for " + c.TitleID);  		continue;  	}  	Log (" --Writing names for " + "d_" + c.TitleID.Substring (2));  	names.WriteLine ("d_" + c.TitleID.Substring (2) + noun.Substring (noun.IndexOf (';')));  	if (m_options.Data.Localisations.ContainsKey (c.TitleID + "_adj"))  		names.WriteLine ("d_" + m_options.Data.Localisations [c.TitleID + "_adj"].Substring (2));  	#endregion  	if (!m_options.CreateKingdoms)  		continue;  	bool cont = MakeNameForTitle (names' "PROV" + c.CountyID' c.TitleID' m_options.KingdomShortNames' TitleLevel.Kingdom);  	if (!cont || !m_options.CreateEmpires)  		continue;  	MakeNameForTitle (names' "PROV" + c.CountyID' c.TitleID' m_options.EmpireShortNames' TitleLevel.Empire);  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,CreateStringFromCounties,The following statement contains a magic number: foreach (var pair in m_options.Data.Counties) {  	if (TaskStatus.Abort)  		return;  	#region Duchies  	Title c = pair.Value;  	if (c.Primary)  		continue;  	//Check for existing duchy.  	Title t = m_options.Data.Duchies.ToList ().Find (d => d.Value.TitleID == "d_" + c.TitleID.Substring (2)).Value;  	if (t != null)  		continue;  	string noun;  	if (m_options.Data.Localisations.ContainsKey ("PROV" + c.CountyID)) {  		noun = m_options.Data.Localisations ["PROV" + c.CountyID];  	}  	else {  		Log (" --Couldn't find localisation string for " + c.TitleID);  		continue;  	}  	Log (" --Writing names for " + "d_" + c.TitleID.Substring (2));  	names.WriteLine ("d_" + c.TitleID.Substring (2) + noun.Substring (noun.IndexOf (';')));  	if (m_options.Data.Localisations.ContainsKey (c.TitleID + "_adj"))  		names.WriteLine ("d_" + m_options.Data.Localisations [c.TitleID + "_adj"].Substring (2));  	#endregion  	if (!m_options.CreateKingdoms)  		continue;  	bool cont = MakeNameForTitle (names' "PROV" + c.CountyID' c.TitleID' m_options.KingdomShortNames' TitleLevel.Kingdom);  	if (!cont || !m_options.CreateEmpires)  		continue;  	MakeNameForTitle (names' "PROV" + c.CountyID' c.TitleID' m_options.EmpireShortNames' TitleLevel.Empire);  }  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,CreateStringFromCounties,The following statement contains a magic number: Log (" --Writing names for " + "d_" + c.TitleID.Substring (2));  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,CreateStringFromCounties,The following statement contains a magic number: names.WriteLine ("d_" + c.TitleID.Substring (2) + noun.Substring (noun.IndexOf (';')));  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,CreateStringFromCounties,The following statement contains a magic number: if (m_options.Data.Localisations.ContainsKey (c.TitleID + "_adj"))  	names.WriteLine ("d_" + m_options.Data.Localisations [c.TitleID + "_adj"].Substring (2));  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,CreateStringFromCounties,The following statement contains a magic number: names.WriteLine ("d_" + m_options.Data.Localisations [c.TitleID + "_adj"].Substring (2));  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,MakeNameForTitle,The following statement contains a magic number: Log (" --Writing names for " + prefix + id.Substring (2));  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,MakeNameForTitle,The following statement contains a magic number: names.WriteLine (prefix + id.Substring (2) + noun.Substring (noun.IndexOf (';')));  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,MakeNameForTitle,The following statement contains a magic number: if (m_options.Data.Localisations.ContainsKey (id + "_adj"))  	names.WriteLine (prefix + m_options.Data.Localisations [id + "_adj"].Substring (2));  
Magic Number,TitleGenerator.Tasks.TitleGeneration,LocalisationTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\TitleGeneration\LocalisationTask.cs,MakeNameForTitle,The following statement contains a magic number: names.WriteLine (prefix + m_options.Data.Localisations [id + "_adj"].Substring (2));  
Magic Number,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseRule,The following statement contains a magic number: switch (tag) {  case "ignored_titles":  	m_ruleset.IgnoredTitles.AddRange (parser.ReadStringList ());  	break;  case "muslim_laws":  	m_ruleset.MuslimLawFollowers.AddRange (parser.ReadStringList ());  	break;  case "male_culture":  	m_ruleset.MaleCultures.AddRange (parser.ReadStringList ());  	break;  case "female_culture":  	m_ruleset.FemaleCultures.AddRange (parser.ReadStringList ());  	break;  case "male_religion":  	m_ruleset.MaleReligions.AddRange (parser.ReadStringList ());  	break;  case "female_religion":  	m_ruleset.FemaleReligions.AddRange (parser.ReadStringList ());  	break;  case "required_rules":  	m_ruleset.RequiredRules.AddRange (parser.ReadStringList ());  	break;  case "levy_tax_weight":  	List<int> ltw = (List<int>)parser.ReadIntList ();  	if (ltw.Count >= 4) {  		int i = 0;  		m_ruleset.LawRules.LevyTax.Min = ltw [0];  		m_ruleset.LawRules.LevyTax.Normal = ltw [1];  		m_ruleset.LawRules.LevyTax.Large = ltw [2];  		m_ruleset.LawRules.LevyTax.Max = ltw [3];  	}  	break;  case "character":  	m_ruleset.CharRules.Add (ParseCharacter (parser));  	break;  case "succession_laws":  	ParseLaws (parser' m_ruleset.LawRules.SuccessionLaws);  	break;  case "gender_laws":  	ParseLaws (parser' m_ruleset.LawRules.GenderLaws);  	break;  case "misc":  	parser.Parse (ParseMiscRules);  	break;  case "cul_gen":  	parser.Parse (ParseCultureGenRules);  	break;  }  
Magic Number,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseRule,The following statement contains a magic number: switch (tag) {  case "ignored_titles":  	m_ruleset.IgnoredTitles.AddRange (parser.ReadStringList ());  	break;  case "muslim_laws":  	m_ruleset.MuslimLawFollowers.AddRange (parser.ReadStringList ());  	break;  case "male_culture":  	m_ruleset.MaleCultures.AddRange (parser.ReadStringList ());  	break;  case "female_culture":  	m_ruleset.FemaleCultures.AddRange (parser.ReadStringList ());  	break;  case "male_religion":  	m_ruleset.MaleReligions.AddRange (parser.ReadStringList ());  	break;  case "female_religion":  	m_ruleset.FemaleReligions.AddRange (parser.ReadStringList ());  	break;  case "required_rules":  	m_ruleset.RequiredRules.AddRange (parser.ReadStringList ());  	break;  case "levy_tax_weight":  	List<int> ltw = (List<int>)parser.ReadIntList ();  	if (ltw.Count >= 4) {  		int i = 0;  		m_ruleset.LawRules.LevyTax.Min = ltw [0];  		m_ruleset.LawRules.LevyTax.Normal = ltw [1];  		m_ruleset.LawRules.LevyTax.Large = ltw [2];  		m_ruleset.LawRules.LevyTax.Max = ltw [3];  	}  	break;  case "character":  	m_ruleset.CharRules.Add (ParseCharacter (parser));  	break;  case "succession_laws":  	ParseLaws (parser' m_ruleset.LawRules.SuccessionLaws);  	break;  case "gender_laws":  	ParseLaws (parser' m_ruleset.LawRules.GenderLaws);  	break;  case "misc":  	parser.Parse (ParseMiscRules);  	break;  case "cul_gen":  	parser.Parse (ParseCultureGenRules);  	break;  }  
Magic Number,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseRule,The following statement contains a magic number: switch (tag) {  case "ignored_titles":  	m_ruleset.IgnoredTitles.AddRange (parser.ReadStringList ());  	break;  case "muslim_laws":  	m_ruleset.MuslimLawFollowers.AddRange (parser.ReadStringList ());  	break;  case "male_culture":  	m_ruleset.MaleCultures.AddRange (parser.ReadStringList ());  	break;  case "female_culture":  	m_ruleset.FemaleCultures.AddRange (parser.ReadStringList ());  	break;  case "male_religion":  	m_ruleset.MaleReligions.AddRange (parser.ReadStringList ());  	break;  case "female_religion":  	m_ruleset.FemaleReligions.AddRange (parser.ReadStringList ());  	break;  case "required_rules":  	m_ruleset.RequiredRules.AddRange (parser.ReadStringList ());  	break;  case "levy_tax_weight":  	List<int> ltw = (List<int>)parser.ReadIntList ();  	if (ltw.Count >= 4) {  		int i = 0;  		m_ruleset.LawRules.LevyTax.Min = ltw [0];  		m_ruleset.LawRules.LevyTax.Normal = ltw [1];  		m_ruleset.LawRules.LevyTax.Large = ltw [2];  		m_ruleset.LawRules.LevyTax.Max = ltw [3];  	}  	break;  case "character":  	m_ruleset.CharRules.Add (ParseCharacter (parser));  	break;  case "succession_laws":  	ParseLaws (parser' m_ruleset.LawRules.SuccessionLaws);  	break;  case "gender_laws":  	ParseLaws (parser' m_ruleset.LawRules.GenderLaws);  	break;  case "misc":  	parser.Parse (ParseMiscRules);  	break;  case "cul_gen":  	parser.Parse (ParseCultureGenRules);  	break;  }  
Magic Number,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseRule,The following statement contains a magic number: if (ltw.Count >= 4) {  	int i = 0;  	m_ruleset.LawRules.LevyTax.Min = ltw [0];  	m_ruleset.LawRules.LevyTax.Normal = ltw [1];  	m_ruleset.LawRules.LevyTax.Large = ltw [2];  	m_ruleset.LawRules.LevyTax.Max = ltw [3];  }  
Magic Number,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseRule,The following statement contains a magic number: if (ltw.Count >= 4) {  	int i = 0;  	m_ruleset.LawRules.LevyTax.Min = ltw [0];  	m_ruleset.LawRules.LevyTax.Normal = ltw [1];  	m_ruleset.LawRules.LevyTax.Large = ltw [2];  	m_ruleset.LawRules.LevyTax.Max = ltw [3];  }  
Magic Number,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseRule,The following statement contains a magic number: if (ltw.Count >= 4) {  	int i = 0;  	m_ruleset.LawRules.LevyTax.Min = ltw [0];  	m_ruleset.LawRules.LevyTax.Normal = ltw [1];  	m_ruleset.LawRules.LevyTax.Large = ltw [2];  	m_ruleset.LawRules.LevyTax.Max = ltw [3];  }  
Magic Number,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseRule,The following statement contains a magic number: m_ruleset.LawRules.LevyTax.Large = ltw [2];  
Magic Number,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseRule,The following statement contains a magic number: m_ruleset.LawRules.LevyTax.Max = ltw [3];  
Magic Number,TitleGenerator.HistoryRules,LawRules,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,GetLawSet,The following statement contains a magic number: ls.CrownAuthority = "centralization_" + rand.Normal (0' 4).ToString ();  
Magic Number,TitleGenerator.HistoryRules,LawRules,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,WeightedLawNum,The following statement contains a magic number: if (randNum < LevyTax.Min)  	i = 0;  else if (randNum < (LevyTax.Min + LevyTax.Normal))  	i = 1;  else if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large))  	i = 2;  else if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large + LevyTax.Max))  	i = 3;  
Magic Number,TitleGenerator.HistoryRules,LawRules,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,WeightedLawNum,The following statement contains a magic number: if (randNum < LevyTax.Min)  	i = 0;  else if (randNum < (LevyTax.Min + LevyTax.Normal))  	i = 1;  else if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large))  	i = 2;  else if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large + LevyTax.Max))  	i = 3;  
Magic Number,TitleGenerator.HistoryRules,LawRules,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,WeightedLawNum,The following statement contains a magic number: if (randNum < (LevyTax.Min + LevyTax.Normal))  	i = 1;  else if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large))  	i = 2;  else if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large + LevyTax.Max))  	i = 3;  
Magic Number,TitleGenerator.HistoryRules,LawRules,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,WeightedLawNum,The following statement contains a magic number: if (randNum < (LevyTax.Min + LevyTax.Normal))  	i = 1;  else if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large))  	i = 2;  else if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large + LevyTax.Max))  	i = 3;  
Magic Number,TitleGenerator.HistoryRules,LawRules,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,WeightedLawNum,The following statement contains a magic number: if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large))  	i = 2;  else if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large + LevyTax.Max))  	i = 3;  
Magic Number,TitleGenerator.HistoryRules,LawRules,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,WeightedLawNum,The following statement contains a magic number: if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large))  	i = 2;  else if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large + LevyTax.Max))  	i = 3;  
Magic Number,TitleGenerator.HistoryRules,LawRules,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,WeightedLawNum,The following statement contains a magic number: i = 2;  
Magic Number,TitleGenerator.HistoryRules,LawRules,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,WeightedLawNum,The following statement contains a magic number: if (randNum < (LevyTax.Min + LevyTax.Normal + LevyTax.Large + LevyTax.Max))  	i = 3;  
Magic Number,TitleGenerator.HistoryRules,LawRules,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,WeightedLawNum,The following statement contains a magic number: i = 3;  
Missing Default,TitleGenerator,Logger,C:\repos\Measter_TitleGenerator\TitleGenerator\Logger.cs,Log,The following switch statement is missing a default case: switch (type) {  case LogType.Generate:  	log = m_generateLog;  	break;  case LogType.Data:  	log = m_dataLog;  	break;  case LogType.Setting:  	LogSetting (m_settingsLog' message);  	return;  case LogType.Error:  	LogSetting (m_errorLog' message);  	return;  }  
Missing Default,TitleGenerator,Options,C:\repos\Measter_TitleGenerator\TitleGenerator\MiscClasses.cs,ToString,The following switch statement is missing a default case: switch (History) {  case HistoryOption.None:  	sb.AppendLine ("None");  	break;  case HistoryOption.County:  	sb.AppendLine ("County");  	break;  case HistoryOption.Duchy:  	sb.AppendLine ("Duchy");  	break;  case HistoryOption.Kingdom:  	sb.AppendLine ("Kingdom");  	break;  case HistoryOption.Empire:  	sb.AppendLine ("Empire");  	break;  }  
Missing Default,TitleGenerator,Options,C:\repos\Measter_TitleGenerator\TitleGenerator\MiscClasses.cs,ToString,The following switch statement is missing a default case: switch (CreateHistoryType) {  case CreateHistoryOption.Counts:  	sb.AppendLine ("Counts");  	break;  case CreateHistoryOption.Dukes:  	sb.AppendLine ("Dukes");  	break;  case CreateHistoryOption.Kings:  	sb.AppendLine ("Kings");  	break;  case CreateHistoryOption.Empires:  	sb.AppendLine ("Emperors");  	break;  case CreateHistoryOption.Random:  	sb.AppendLine ("Full Random ");  	sb.AppendLine ("    --Max Characters: " + HistoryMaxChar);  	sb.AppendLine ("    --Min Characters: " + HistoryMinChar);  	sb.AppendLine ("    --Min Republics: " + HistoryMinReps);  	sb.AppendLine ("    --Max Republics: " + HistoryMaxReps);  	sb.AppendLine ("    --Min Theocracies: " + HistoryMinTheoc);  	sb.AppendLine ("    --Max Theocracies: " + HistoryMaxTheoc);  	break;  case CreateHistoryOption.None:  	sb.AppendLine ("None");  	break;  }  
Missing Default,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,GetFamilyHoldingName,The following switch statement is missing a default case: switch (rem) {  case 0:  	parts = "ze" + parts;  	break;  case 1:  	parts = "on" + parts;  	break;  case 2:  	parts = "tw" + parts;  	break;  case 3:  	parts = "th" + parts;  	break;  }  
Missing Default,TitleGenerator.Tasks.History,FullHistoryTask,C:\repos\Measter_TitleGenerator\TitleGenerator\Tasks\History\FullHistoryTask.cs,MakeVassals,The following switch statement is missing a default case: switch (vassalTier) {  case TitleTier.Count:  	vassalSize = usable.Count / 3;  	break;  case TitleTier.Duke:  	vassalSize = usable.Count / m_options.RuleSet.DuchyMinSize;  	break;  case TitleTier.King:  	vassalSize = usable.Count / m_options.RuleSet.KingdomMinSize;  	break;  }  
Missing Default,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseRule,The following switch statement is missing a default case: switch (tag) {  case "ignored_titles":  	m_ruleset.IgnoredTitles.AddRange (parser.ReadStringList ());  	break;  case "muslim_laws":  	m_ruleset.MuslimLawFollowers.AddRange (parser.ReadStringList ());  	break;  case "male_culture":  	m_ruleset.MaleCultures.AddRange (parser.ReadStringList ());  	break;  case "female_culture":  	m_ruleset.FemaleCultures.AddRange (parser.ReadStringList ());  	break;  case "male_religion":  	m_ruleset.MaleReligions.AddRange (parser.ReadStringList ());  	break;  case "female_religion":  	m_ruleset.FemaleReligions.AddRange (parser.ReadStringList ());  	break;  case "required_rules":  	m_ruleset.RequiredRules.AddRange (parser.ReadStringList ());  	break;  case "levy_tax_weight":  	List<int> ltw = (List<int>)parser.ReadIntList ();  	if (ltw.Count >= 4) {  		int i = 0;  		m_ruleset.LawRules.LevyTax.Min = ltw [0];  		m_ruleset.LawRules.LevyTax.Normal = ltw [1];  		m_ruleset.LawRules.LevyTax.Large = ltw [2];  		m_ruleset.LawRules.LevyTax.Max = ltw [3];  	}  	break;  case "character":  	m_ruleset.CharRules.Add (ParseCharacter (parser));  	break;  case "succession_laws":  	ParseLaws (parser' m_ruleset.LawRules.SuccessionLaws);  	break;  case "gender_laws":  	ParseLaws (parser' m_ruleset.LawRules.GenderLaws);  	break;  case "misc":  	parser.Parse (ParseMiscRules);  	break;  case "cul_gen":  	parser.Parse (ParseCultureGenRules);  	break;  }  
Missing Default,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseCultureGenRules,The following switch statement is missing a default case: switch (tag) {  case "dynasty_prefix":  	m_ruleset.CulGenDynastyPrefix = parser.ReadInt32 ();  	break;  case "bastard_prefix":  	m_ruleset.CulGenBastardPrefix = parser.ReadInt32 ();  	break;  case "patronym_is_prefix":  	m_ruleset.CulGenPatronymIsPrefix = parser.ReadInt32 ();  	break;  case "male_patronym":  	m_ruleset.CulGenMalePatronym = parser.ReadInt32 ();  	break;  case "female_patronym":  	m_ruleset.CulGenFemalePatronym = parser.ReadInt32 ();  	break;  case "ancestor_name":  	m_ruleset.CulGenAncestorName = parser.ReadInt32 ();  	break;  case "disinherit_from_blinding":  	m_ruleset.CulGenDisinheritFromBlinding = parser.ReadInt32 ();  	break;  case "dukes_called_kings":  	m_ruleset.CulGenDukesCalledKings = parser.ReadInt32 ();  	break;  case "founder_names_dynasty":  	m_ruleset.CulGenFounderNamesDynasty = parser.ReadInt32 ();  	break;  case "dynasty_title_names":  	m_ruleset.CulGenDynastyTitleNames = parser.ReadInt32 ();  	break;  }  
Missing Default,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseMiscRules,The following switch statement is missing a default case: switch (tag) {  case "liege_culture_chance":  	m_ruleset.LiegeCultureChance = parser.ReadInt32 ();  	break;  case "liege_religion_chance":  	m_ruleset.LiegeReligionChance = parser.ReadInt32 ();  	break;  case "female_ruler_chance":  	m_ruleset.FemaleRulerChance = parser.ReadInt32 ();  	break;  case "ruler_spouse_chance":  	m_ruleset.RulerSpouseChance = parser.ReadInt32 ();  	break;  case "reps_force_custom_duchies":  	m_ruleset.RepsForceCustomDuchies = parser.ReadBool ();  	break;  case "rep_expand_chance":  	m_ruleset.RepublicExpandChance = parser.ReadInt32 ();  	break;  case "rep_expand_max":  	m_ruleset.RepublicExpandMax = parser.ReadInt32 ();  	break;  case "empire_min_size":  	m_ruleset.EmpireMinSize = parser.ReadInt32 ();  	break;  case "kingdom_min_size":  	m_ruleset.KingdomMinSize = parser.ReadInt32 ();  	break;  case "duchy_min_size":  	m_ruleset.DuchyMinSize = parser.ReadInt32 ();  	break;  case "clear_characters":  	m_ruleset.ClearCharacters = parser.ReadBool ();  	break;  case "character_start_id":  	m_ruleset.CharacterStartID = parser.ReadInt32 ();  	break;  }  
Missing Default,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseLaws,The following switch statement is missing a default case: switch (s2) {  case "banned_religion_group":  case "banned_religion":  	l.BannedReligions.Add (p2.ReadString ());  	break;  case "allowed_religion_group":  case "allowed_religion":  	l.AllowedReligions.Add (p2.ReadString ());  	break;  case "banned_culture_group":  case "banned_culture":  	l.BannedCultures.Add (p2.ReadString ());  	break;  case "allowed_culture_group":  case "allowed_culture":  	l.AllowedCultures.Add (p2.ReadString ());  	break;  }  
Missing Default,TitleGenerator.HistoryRules,RuleSet,C:\repos\Measter_TitleGenerator\TitleGenerator\HistoryRules\RuleParser.cs,ParseCharacter,The following switch statement is missing a default case: switch (s) {  case "gender":  	cr.IsFemale = p.ReadString () == "female";  	break;  case "religion":  	cr.Religion = p.ReadString ();  	break;  case "culture":  	cr.Culture = p.ReadString ();  	break;  case "id":  	cr.ID = p.ReadInt32 ();  	break;  case "dynasty":  	cr.Dynasty = p.ReadInt32 ();  	break;  case "write_character":  	cr.WriteCharacter = p.ReadBool ();  	break;  case "title":  	cr.Titles.Add (p.ReadString ());  	break;  }  
