Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,Cyclomatic complexity of the method is 9
Complex Method,Thinktecture.IdentityModel.Hawk.Core,HawkSchemeHeader,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\HawkSchemeHeader.cs,AuthenticateAsync,Cyclomatic complexity of the method is 9
Long Parameter List,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Bewit,The method has 6 parameters.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,ArtifactsContainer,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\ArtifactsContainer.cs,ToHeaderParameter,The length of the statement  "		result.AppendIfNotEmpty (ID' this.Id' trailer).AppendIfNotEmpty (TS' (this.Timestamp > 0 ? this.Timestamp.ToString () : String.Empty)' trailer).AppendIfNotEmpty (NONCE' this.Nonce' trailer); " is 190.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,ArtifactsContainer,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\ArtifactsContainer.cs,ToHeaderParameter,The length of the statement  "	result.AppendIfNotEmpty (EXT' this.ApplicationSpecificData' trailer).AppendIfNotEmpty (MAC' this.Mac == null ? null : this.Mac.ToBase64String ()' trailer).AppendIfNotEmpty (HASH' this.PayloadHash == null ? null : this.PayloadHash.ToBase64String ()' trailer); " is 258.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,ToBewitString,The length of the statement  "	string bewit = String.Format (@"{0}\{1}\{2}\{3}"' credential.Id' artifacts.Timestamp' artifacts.Mac.ToBase64String ()' artifacts.ApplicationSpecificData); " is 154.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,RemoveBewitFromUri,The length of the statement  "	query = query.Replace (HawkConstants.Bewit + "=" + bewit' String.Empty).Replace ("&&"' "&").Replace ("?&"' "?").Trim ('&').Trim ('?'); " is 134.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,Cryptographer,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Cryptographer.cs,IsMacValid,The length of the statement  "		HawkEventSource.Log.Debug (String.Format ("Invalid Mac {0} for data {1}"' artifacts.Mac.ToBase64String ()' Encoding.UTF8.GetString (data))); " is 140.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,Cryptographer,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Cryptographer.cs,IsHashValid,The length of the statement  "		HawkEventSource.Log.Debug (String.Format ("Invalid payload hash {0} for data {1}"' artifacts.PayloadHash.ToBase64String ()' Encoding.UTF8.GetString (data))); " is 157.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,HawkSchemeHeader,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\HawkSchemeHeader.cs,AuthenticateAsync,The length of the statement  "						HawkEventSource.Log.Debug (String.Format ("Algorithm={0} Key={1} ID={2}"' credential.Algorithm.ToString ()' Convert.ToBase64String (credential.Key)' credential.Id)); " is 165.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,HawkServer,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\HawkServer.cs,AuthenticateAsync,The length of the statement  "	HawkEventSource.Log.Debug (String.Format ("Begin HawkServer.AuthenticateAsync for {0} {1}"' request.Method.ToString ()' request.Uri.ToString ())); " is 146.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,HawkServer,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\HawkServer.cs,AuthenticateAsync,The length of the statement  "	this.result = isBewit ? Bewit.Authenticate (bewit' now' request' options) : await HawkSchemeHeader.AuthenticateAsync (now' request' options); " is 141.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,HawkServer,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\HawkServer.cs,AuthenticateAsync,The length of the statement  "		bool isAppSpecificDataVerified = options.VerificationCallback == null || options.VerificationCallback (request' result.ApplicationSpecificData); " is 144.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,HawkServer,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\HawkServer.cs,CreateServerAuthorizationAsync,The length of the statement  "		bool createHeader = this.result != null && this.result.IsAuthentic && (!this.IsBewitRequest) && options.EnableServerAuthorization; " is 130.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,HawkServer,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\HawkServer.cs,CreateServerAuthorizationAsync,The length of the statement  "				return new Tuple<string' string> (HawkConstants.ServerAuthorizationHeaderName' String.Format ("{0} {1}"' HawkConstants.Scheme' authorization)); " is 143.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,NormalizedPayload,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\NormalizedPayload.cs,ToBytes,The length of the statement  "		builder.AppendNewLine (PREAMBLE).AppendNewLine (contentType == null ? String.Empty : contentType.ToLower ()).AppendNewLine (this.body); " is 135.
Long Statement,Thinktecture.IdentityModel.Hawk.Core,NormalizedRequest,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\NormalizedRequest.cs,ToString,The length of the statement  "	result.AppendNewLine (this.GetPreamble ()).AppendNewLine (artifacts.Timestamp.ToString ()).AppendNewLine (artifacts.Nonce).AppendNewLine (this.method).AppendNewLine (this.path).AppendNewLine (this.hostName).AppendNewLine (this.port).AppendNewLine (artifacts.PayloadHash == null ? null : artifacts.PayloadHash.ToBase64String ()).AppendNewLine (artifacts.ApplicationSpecificData); " is 378.
Long Statement,Thinktecture.IdentityModel.Hawk.Client,HawkClient,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Client\HawkClient.cs,AuthenticateAsync,The length of the statement  "	if (response.StatusCode != HttpStatusCode.Unauthorized && this.options.EnableResponseValidation && await this.IsResponseTamperedAsync (artifacts' crypto' response)) " is 164.
Long Statement,Thinktecture.IdentityModel.Hawk.Client,HawkClient,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Client\HawkClient.cs,CreateClientAuthorizationAsync,The length of the statement  "	HawkEventSource.Log.Debug (String.Format ("HawkClient.CreateClientAuthorizationAsync for {0} {1}"' request.Method.ToString ()' request.Uri.ToString ())); " is 153.
Long Statement,Thinktecture.IdentityModel.Hawk.Client,HawkClient,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Client\HawkClient.cs,CreateBewit,The length of the statement  "	HawkEventSource.Log.Debug (String.Format ("HawkClient.CreateBewit for {0} {1}"' request.Method.ToString ()' request.Uri.ToString ())); " is 134.
Long Statement,Thinktecture.IdentityModel.Hawk.Client,HawkClient,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Client\HawkClient.cs,CreateBewitInternal,The length of the statement  "	var bewit = new Bewit (request' options.CredentialsCallback ()' utcNow' lifeSeconds' appData' options.LocalTimeOffsetMillis); " is 125.
Long Statement,Thinktecture.IdentityModel.Hawk.Client,HawkClient,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Client\HawkClient.cs,CreateClientAuthorizationInternalAsync,The length of the statement  "	bool includePayloadHash = options.RequestPayloadHashabilityCallback != null && options.RequestPayloadHashabilityCallback (request); " is 131.
Long Statement,Thinktecture.IdentityModel.Hawk.Client,HawkClient,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Client\HawkClient.cs,CreateClientAuthorizationInternalAsync,The length of the statement  "	request.Authorization = new AuthenticationHeaderValue (HawkConstants.Scheme' this.artifacts.ToAuthorizationHeaderParameter ()); " is 127.
Long Statement,Thinktecture.IdentityModel.Hawk.Client,HawkClient,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Client\HawkClient.cs,IsResponseTamperedAsync,The length of the statement  "		if (!String.IsNullOrWhiteSpace (header) && header.Substring (0' HawkConstants.Scheme.Length).ToLower () == HawkConstants.Scheme) { " is 130.
Long Statement,Thinktecture.IdentityModel.Hawk.Client,HawkClient,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Client\HawkClient.cs,IsResponseTamperedAsync,The length of the statement  "			if (ArtifactsContainer.TryParse (header.Substring (HawkConstants.Scheme.Length + " ".Length)' out serverAuthorizationArtifacts)) { " is 130.
Long Statement,Thinktecture.IdentityModel.Hawk.Client,HawkClient,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Client\HawkClient.cs,IsTimestampResponseTampered,The length of the statement  "			var ts = new NormalizedTimestamp (timestampArtifacts.Timestamp' options.CredentialsCallback ()' options.LocalTimeOffsetMillis); " is 127.
Long Statement,Thinktecture.IdentityModel.Hawk.Client,HawkValidationHandler,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Client\HawkValidatingHandler.cs,SendAsync,The length of the statement  "		HawkEventSource.Log.ServerResponse ((int)responseMessage.StatusCode' await responseMessage.ReadBodyAsStringAsync ()' header ?? String.Empty); " is 141.
Long Statement,Thinktecture.IdentityModel.Hawk.Core.Extensions,IRequestMessageExtension,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Extensions\IRequestMessageExtension.cs,HasValidHawkScheme,The length of the statement  "	return (header != null && header.Scheme.ToLower () == HawkConstants.Scheme && !String.IsNullOrWhiteSpace (header.Parameter)); " is 125.
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace (bewit)) {  	if (request.Method == HttpMethod.Get) {  		if (options != null && options.CredentialsCallback != null) {  			var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  			if (parts.Length == 4) {  				ulong timestamp = 0;  				if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  					string id = parts [0];  					string mac = parts [2];  					string ext = parts [3];  					if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  						RemoveBewitFromUri (request);  						Credential credential = options.CredentialsCallback (id);  						if (credential != null && credential.IsValid) {  							var artifacts = new ArtifactsContainer () {  								Id = id'  								Nonce = String.Empty'  								Timestamp = timestamp'  								Mac = mac.ToBytesFromBase64 ()'  								ApplicationSpecificData = ext ?? String.Empty  							};  							var normalizedRequest = new NormalizedRequest (request' artifacts) {  								IsBewit = true  							};  							var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  							if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  							 {  								return new AuthenticationResult () {  									IsAuthentic = true'  									Credential = credential'  									Artifacts = artifacts'  									ApplicationSpecificData = ext  								};  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace (bewit)) {  	if (request.Method == HttpMethod.Get) {  		if (options != null && options.CredentialsCallback != null) {  			var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  			if (parts.Length == 4) {  				ulong timestamp = 0;  				if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  					string id = parts [0];  					string mac = parts [2];  					string ext = parts [3];  					if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  						RemoveBewitFromUri (request);  						Credential credential = options.CredentialsCallback (id);  						if (credential != null && credential.IsValid) {  							var artifacts = new ArtifactsContainer () {  								Id = id'  								Nonce = String.Empty'  								Timestamp = timestamp'  								Mac = mac.ToBytesFromBase64 ()'  								ApplicationSpecificData = ext ?? String.Empty  							};  							var normalizedRequest = new NormalizedRequest (request' artifacts) {  								IsBewit = true  							};  							var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  							if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  							 {  								return new AuthenticationResult () {  									IsAuthentic = true'  									Credential = credential'  									Artifacts = artifacts'  									ApplicationSpecificData = ext  								};  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace (bewit)) {  	if (request.Method == HttpMethod.Get) {  		if (options != null && options.CredentialsCallback != null) {  			var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  			if (parts.Length == 4) {  				ulong timestamp = 0;  				if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  					string id = parts [0];  					string mac = parts [2];  					string ext = parts [3];  					if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  						RemoveBewitFromUri (request);  						Credential credential = options.CredentialsCallback (id);  						if (credential != null && credential.IsValid) {  							var artifacts = new ArtifactsContainer () {  								Id = id'  								Nonce = String.Empty'  								Timestamp = timestamp'  								Mac = mac.ToBytesFromBase64 ()'  								ApplicationSpecificData = ext ?? String.Empty  							};  							var normalizedRequest = new NormalizedRequest (request' artifacts) {  								IsBewit = true  							};  							var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  							if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  							 {  								return new AuthenticationResult () {  									IsAuthentic = true'  									Credential = credential'  									Artifacts = artifacts'  									ApplicationSpecificData = ext  								};  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace (bewit)) {  	if (request.Method == HttpMethod.Get) {  		if (options != null && options.CredentialsCallback != null) {  			var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  			if (parts.Length == 4) {  				ulong timestamp = 0;  				if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  					string id = parts [0];  					string mac = parts [2];  					string ext = parts [3];  					if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  						RemoveBewitFromUri (request);  						Credential credential = options.CredentialsCallback (id);  						if (credential != null && credential.IsValid) {  							var artifacts = new ArtifactsContainer () {  								Id = id'  								Nonce = String.Empty'  								Timestamp = timestamp'  								Mac = mac.ToBytesFromBase64 ()'  								ApplicationSpecificData = ext ?? String.Empty  							};  							var normalizedRequest = new NormalizedRequest (request' artifacts) {  								IsBewit = true  							};  							var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  							if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  							 {  								return new AuthenticationResult () {  									IsAuthentic = true'  									Credential = credential'  									Artifacts = artifacts'  									ApplicationSpecificData = ext  								};  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (request.Method == HttpMethod.Get) {  	if (options != null && options.CredentialsCallback != null) {  		var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  		if (parts.Length == 4) {  			ulong timestamp = 0;  			if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  				string id = parts [0];  				string mac = parts [2];  				string ext = parts [3];  				if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  					RemoveBewitFromUri (request);  					Credential credential = options.CredentialsCallback (id);  					if (credential != null && credential.IsValid) {  						var artifacts = new ArtifactsContainer () {  							Id = id'  							Nonce = String.Empty'  							Timestamp = timestamp'  							Mac = mac.ToBytesFromBase64 ()'  							ApplicationSpecificData = ext ?? String.Empty  						};  						var normalizedRequest = new NormalizedRequest (request' artifacts) {  							IsBewit = true  						};  						var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  						if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  						 {  							return new AuthenticationResult () {  								IsAuthentic = true'  								Credential = credential'  								Artifacts = artifacts'  								ApplicationSpecificData = ext  							};  						}  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (request.Method == HttpMethod.Get) {  	if (options != null && options.CredentialsCallback != null) {  		var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  		if (parts.Length == 4) {  			ulong timestamp = 0;  			if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  				string id = parts [0];  				string mac = parts [2];  				string ext = parts [3];  				if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  					RemoveBewitFromUri (request);  					Credential credential = options.CredentialsCallback (id);  					if (credential != null && credential.IsValid) {  						var artifacts = new ArtifactsContainer () {  							Id = id'  							Nonce = String.Empty'  							Timestamp = timestamp'  							Mac = mac.ToBytesFromBase64 ()'  							ApplicationSpecificData = ext ?? String.Empty  						};  						var normalizedRequest = new NormalizedRequest (request' artifacts) {  							IsBewit = true  						};  						var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  						if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  						 {  							return new AuthenticationResult () {  								IsAuthentic = true'  								Credential = credential'  								Artifacts = artifacts'  								ApplicationSpecificData = ext  							};  						}  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (request.Method == HttpMethod.Get) {  	if (options != null && options.CredentialsCallback != null) {  		var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  		if (parts.Length == 4) {  			ulong timestamp = 0;  			if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  				string id = parts [0];  				string mac = parts [2];  				string ext = parts [3];  				if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  					RemoveBewitFromUri (request);  					Credential credential = options.CredentialsCallback (id);  					if (credential != null && credential.IsValid) {  						var artifacts = new ArtifactsContainer () {  							Id = id'  							Nonce = String.Empty'  							Timestamp = timestamp'  							Mac = mac.ToBytesFromBase64 ()'  							ApplicationSpecificData = ext ?? String.Empty  						};  						var normalizedRequest = new NormalizedRequest (request' artifacts) {  							IsBewit = true  						};  						var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  						if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  						 {  							return new AuthenticationResult () {  								IsAuthentic = true'  								Credential = credential'  								Artifacts = artifacts'  								ApplicationSpecificData = ext  							};  						}  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (request.Method == HttpMethod.Get) {  	if (options != null && options.CredentialsCallback != null) {  		var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  		if (parts.Length == 4) {  			ulong timestamp = 0;  			if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  				string id = parts [0];  				string mac = parts [2];  				string ext = parts [3];  				if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  					RemoveBewitFromUri (request);  					Credential credential = options.CredentialsCallback (id);  					if (credential != null && credential.IsValid) {  						var artifacts = new ArtifactsContainer () {  							Id = id'  							Nonce = String.Empty'  							Timestamp = timestamp'  							Mac = mac.ToBytesFromBase64 ()'  							ApplicationSpecificData = ext ?? String.Empty  						};  						var normalizedRequest = new NormalizedRequest (request' artifacts) {  							IsBewit = true  						};  						var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  						if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  						 {  							return new AuthenticationResult () {  								IsAuthentic = true'  								Credential = credential'  								Artifacts = artifacts'  								ApplicationSpecificData = ext  							};  						}  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (options != null && options.CredentialsCallback != null) {  	var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  	if (parts.Length == 4) {  		ulong timestamp = 0;  		if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  			string id = parts [0];  			string mac = parts [2];  			string ext = parts [3];  			if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  				RemoveBewitFromUri (request);  				Credential credential = options.CredentialsCallback (id);  				if (credential != null && credential.IsValid) {  					var artifacts = new ArtifactsContainer () {  						Id = id'  						Nonce = String.Empty'  						Timestamp = timestamp'  						Mac = mac.ToBytesFromBase64 ()'  						ApplicationSpecificData = ext ?? String.Empty  					};  					var normalizedRequest = new NormalizedRequest (request' artifacts) {  						IsBewit = true  					};  					var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  					if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  					 {  						return new AuthenticationResult () {  							IsAuthentic = true'  							Credential = credential'  							Artifacts = artifacts'  							ApplicationSpecificData = ext  						};  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (options != null && options.CredentialsCallback != null) {  	var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  	if (parts.Length == 4) {  		ulong timestamp = 0;  		if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  			string id = parts [0];  			string mac = parts [2];  			string ext = parts [3];  			if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  				RemoveBewitFromUri (request);  				Credential credential = options.CredentialsCallback (id);  				if (credential != null && credential.IsValid) {  					var artifacts = new ArtifactsContainer () {  						Id = id'  						Nonce = String.Empty'  						Timestamp = timestamp'  						Mac = mac.ToBytesFromBase64 ()'  						ApplicationSpecificData = ext ?? String.Empty  					};  					var normalizedRequest = new NormalizedRequest (request' artifacts) {  						IsBewit = true  					};  					var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  					if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  					 {  						return new AuthenticationResult () {  							IsAuthentic = true'  							Credential = credential'  							Artifacts = artifacts'  							ApplicationSpecificData = ext  						};  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (options != null && options.CredentialsCallback != null) {  	var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  	if (parts.Length == 4) {  		ulong timestamp = 0;  		if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  			string id = parts [0];  			string mac = parts [2];  			string ext = parts [3];  			if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  				RemoveBewitFromUri (request);  				Credential credential = options.CredentialsCallback (id);  				if (credential != null && credential.IsValid) {  					var artifacts = new ArtifactsContainer () {  						Id = id'  						Nonce = String.Empty'  						Timestamp = timestamp'  						Mac = mac.ToBytesFromBase64 ()'  						ApplicationSpecificData = ext ?? String.Empty  					};  					var normalizedRequest = new NormalizedRequest (request' artifacts) {  						IsBewit = true  					};  					var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  					if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  					 {  						return new AuthenticationResult () {  							IsAuthentic = true'  							Credential = credential'  							Artifacts = artifacts'  							ApplicationSpecificData = ext  						};  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (options != null && options.CredentialsCallback != null) {  	var parts = bewit.ToUtf8StringFromBase64Url ().Split ('\\');  	if (parts.Length == 4) {  		ulong timestamp = 0;  		if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  			string id = parts [0];  			string mac = parts [2];  			string ext = parts [3];  			if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  				RemoveBewitFromUri (request);  				Credential credential = options.CredentialsCallback (id);  				if (credential != null && credential.IsValid) {  					var artifacts = new ArtifactsContainer () {  						Id = id'  						Nonce = String.Empty'  						Timestamp = timestamp'  						Mac = mac.ToBytesFromBase64 ()'  						ApplicationSpecificData = ext ?? String.Empty  					};  					var normalizedRequest = new NormalizedRequest (request' artifacts) {  						IsBewit = true  					};  					var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  					if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  					 {  						return new AuthenticationResult () {  							IsAuthentic = true'  							Credential = credential'  							Artifacts = artifacts'  							ApplicationSpecificData = ext  						};  					}  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (parts.Length == 4) {  	ulong timestamp = 0;  	if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  		string id = parts [0];  		string mac = parts [2];  		string ext = parts [3];  		if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  			RemoveBewitFromUri (request);  			Credential credential = options.CredentialsCallback (id);  			if (credential != null && credential.IsValid) {  				var artifacts = new ArtifactsContainer () {  					Id = id'  					Nonce = String.Empty'  					Timestamp = timestamp'  					Mac = mac.ToBytesFromBase64 ()'  					ApplicationSpecificData = ext ?? String.Empty  				};  				var normalizedRequest = new NormalizedRequest (request' artifacts) {  					IsBewit = true  				};  				var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  				if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  				 {  					return new AuthenticationResult () {  						IsAuthentic = true'  						Credential = credential'  						Artifacts = artifacts'  						ApplicationSpecificData = ext  					};  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (parts.Length == 4) {  	ulong timestamp = 0;  	if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  		string id = parts [0];  		string mac = parts [2];  		string ext = parts [3];  		if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  			RemoveBewitFromUri (request);  			Credential credential = options.CredentialsCallback (id);  			if (credential != null && credential.IsValid) {  				var artifacts = new ArtifactsContainer () {  					Id = id'  					Nonce = String.Empty'  					Timestamp = timestamp'  					Mac = mac.ToBytesFromBase64 ()'  					ApplicationSpecificData = ext ?? String.Empty  				};  				var normalizedRequest = new NormalizedRequest (request' artifacts) {  					IsBewit = true  				};  				var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  				if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  				 {  					return new AuthenticationResult () {  						IsAuthentic = true'  						Credential = credential'  						Artifacts = artifacts'  						ApplicationSpecificData = ext  					};  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (parts.Length == 4) {  	ulong timestamp = 0;  	if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  		string id = parts [0];  		string mac = parts [2];  		string ext = parts [3];  		if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  			RemoveBewitFromUri (request);  			Credential credential = options.CredentialsCallback (id);  			if (credential != null && credential.IsValid) {  				var artifacts = new ArtifactsContainer () {  					Id = id'  					Nonce = String.Empty'  					Timestamp = timestamp'  					Mac = mac.ToBytesFromBase64 ()'  					ApplicationSpecificData = ext ?? String.Empty  				};  				var normalizedRequest = new NormalizedRequest (request' artifacts) {  					IsBewit = true  				};  				var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  				if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  				 {  					return new AuthenticationResult () {  						IsAuthentic = true'  						Credential = credential'  						Artifacts = artifacts'  						ApplicationSpecificData = ext  					};  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (parts.Length == 4) {  	ulong timestamp = 0;  	if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  		string id = parts [0];  		string mac = parts [2];  		string ext = parts [3];  		if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  			RemoveBewitFromUri (request);  			Credential credential = options.CredentialsCallback (id);  			if (credential != null && credential.IsValid) {  				var artifacts = new ArtifactsContainer () {  					Id = id'  					Nonce = String.Empty'  					Timestamp = timestamp'  					Mac = mac.ToBytesFromBase64 ()'  					ApplicationSpecificData = ext ?? String.Empty  				};  				var normalizedRequest = new NormalizedRequest (request' artifacts) {  					IsBewit = true  				};  				var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  				if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  				 {  					return new AuthenticationResult () {  						IsAuthentic = true'  						Credential = credential'  						Artifacts = artifacts'  						ApplicationSpecificData = ext  					};  				}  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  	string id = parts [0];  	string mac = parts [2];  	string ext = parts [3];  	if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  		RemoveBewitFromUri (request);  		Credential credential = options.CredentialsCallback (id);  		if (credential != null && credential.IsValid) {  			var artifacts = new ArtifactsContainer () {  				Id = id'  				Nonce = String.Empty'  				Timestamp = timestamp'  				Mac = mac.ToBytesFromBase64 ()'  				ApplicationSpecificData = ext ?? String.Empty  			};  			var normalizedRequest = new NormalizedRequest (request' artifacts) {  				IsBewit = true  			};  			var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  			if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  			 {  				return new AuthenticationResult () {  					IsAuthentic = true'  					Credential = credential'  					Artifacts = artifacts'  					ApplicationSpecificData = ext  				};  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  	string id = parts [0];  	string mac = parts [2];  	string ext = parts [3];  	if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  		RemoveBewitFromUri (request);  		Credential credential = options.CredentialsCallback (id);  		if (credential != null && credential.IsValid) {  			var artifacts = new ArtifactsContainer () {  				Id = id'  				Nonce = String.Empty'  				Timestamp = timestamp'  				Mac = mac.ToBytesFromBase64 ()'  				ApplicationSpecificData = ext ?? String.Empty  			};  			var normalizedRequest = new NormalizedRequest (request' artifacts) {  				IsBewit = true  			};  			var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  			if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  			 {  				return new AuthenticationResult () {  					IsAuthentic = true'  					Credential = credential'  					Artifacts = artifacts'  					ApplicationSpecificData = ext  				};  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Bewit,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Bewit.cs,Authenticate,The following statement contains a magic number: if (UInt64.TryParse (parts [1]' out timestamp) && timestamp * 1000 > now) {  	string id = parts [0];  	string mac = parts [2];  	string ext = parts [3];  	if (!String.IsNullOrWhiteSpace (id) && !String.IsNullOrWhiteSpace (mac)) {  		RemoveBewitFromUri (request);  		Credential credential = options.CredentialsCallback (id);  		if (credential != null && credential.IsValid) {  			var artifacts = new ArtifactsContainer () {  				Id = id'  				Nonce = String.Empty'  				Timestamp = timestamp'  				Mac = mac.ToBytesFromBase64 ()'  				ApplicationSpecificData = ext ?? String.Empty  			};  			var normalizedRequest = new NormalizedRequest (request' artifacts) {  				IsBewit = true  			};  			var crypto = new Cryptographer (normalizedRequest' artifacts' credential);  			if (crypto.IsSignatureValid ())// Bewit is for GET and GET must have no request body  			 {  				return new AuthenticationResult () {  					IsAuthentic = true'  					Credential = credential'  					Artifacts = artifacts'  					ApplicationSpecificData = ext  				};  			}  		}  	}  }  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,NormalizedTimestamp,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\NormalizedTimestamp.cs,NormalizedTimestamp,The following statement contains a magic number: this.unixTimeMillis = unixTime * 1000;  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,NormalizedTimestamp,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\NormalizedTimestamp.cs,NormalizedTimestamp,The following statement contains a magic number: fresh = Math.Floor ((this.unixTimeMillis + Convert.ToUInt64 (localOffset)) / 1000.0);  
Magic Number,Thinktecture.IdentityModel.Hawk.Core,Options,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Options.cs,Options,The following statement contains a magic number: this.ClockSkewSeconds = 60;  
Magic Number,Thinktecture.IdentityModel.Hawk.Core.Extensions,DateTimeExtension,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Extensions\DateTimeExtension.cs,ToUnixTimeMillis,The following statement contains a magic number: return Convert.ToUInt64 (ts.TotalSeconds * 1000);  
Magic Number,Thinktecture.IdentityModel.Hawk.Core.Extensions,DateTimeExtension,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Extensions\DateTimeExtension.cs,ToUnixTime,The following statement contains a magic number: return dateTime.ToUnixTimeMillis () / 1000;  
Magic Number,Thinktecture.IdentityModel.Hawk.Core.Extensions,StringExtension,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Extensions\StringExtension.cs,ToUtf8StringFromBase64Url,The following statement contains a magic number: pad = pad > 2 ? 0 : pad;  
Magic Number,Thinktecture.IdentityModel.Hawk.Core.Helpers,NonceGenerator,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Helpers\NonceGenerator.cs,Generate,The following statement contains a magic number: do {  	byte[] bytes = new byte[length * 8];  	_rngProvider.GetBytes (bytes);  	var characters = bytes.Where (b => (b >= 48 && b <= 57) || // 0 - 9  	(b >= 97 && b <= 122) || // a - z  	(b >= 65 && b <= 90))// A - Z  	.Take (length - random.Count).Select (b => Convert.ToChar (b));  	random.AddRange (characters);  } while (random.Count < length);  
Magic Number,Thinktecture.IdentityModel.Hawk.Core.Helpers,NonceGenerator,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Helpers\NonceGenerator.cs,Generate,The following statement contains a magic number: do {  	byte[] bytes = new byte[length * 8];  	_rngProvider.GetBytes (bytes);  	var characters = bytes.Where (b => (b >= 48 && b <= 57) || // 0 - 9  	(b >= 97 && b <= 122) || // a - z  	(b >= 65 && b <= 90))// A - Z  	.Take (length - random.Count).Select (b => Convert.ToChar (b));  	random.AddRange (characters);  } while (random.Count < length);  
Magic Number,Thinktecture.IdentityModel.Hawk.Core.Helpers,NonceGenerator,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Helpers\NonceGenerator.cs,Generate,The following statement contains a magic number: do {  	byte[] bytes = new byte[length * 8];  	_rngProvider.GetBytes (bytes);  	var characters = bytes.Where (b => (b >= 48 && b <= 57) || // 0 - 9  	(b >= 97 && b <= 122) || // a - z  	(b >= 65 && b <= 90))// A - Z  	.Take (length - random.Count).Select (b => Convert.ToChar (b));  	random.AddRange (characters);  } while (random.Count < length);  
Magic Number,Thinktecture.IdentityModel.Hawk.Core.Helpers,NonceGenerator,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Helpers\NonceGenerator.cs,Generate,The following statement contains a magic number: do {  	byte[] bytes = new byte[length * 8];  	_rngProvider.GetBytes (bytes);  	var characters = bytes.Where (b => (b >= 48 && b <= 57) || // 0 - 9  	(b >= 97 && b <= 122) || // a - z  	(b >= 65 && b <= 90))// A - Z  	.Take (length - random.Count).Select (b => Convert.ToChar (b));  	random.AddRange (characters);  } while (random.Count < length);  
Magic Number,Thinktecture.IdentityModel.Hawk.Core.Helpers,NonceGenerator,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Helpers\NonceGenerator.cs,Generate,The following statement contains a magic number: do {  	byte[] bytes = new byte[length * 8];  	_rngProvider.GetBytes (bytes);  	var characters = bytes.Where (b => (b >= 48 && b <= 57) || // 0 - 9  	(b >= 97 && b <= 122) || // a - z  	(b >= 65 && b <= 90))// A - Z  	.Take (length - random.Count).Select (b => Convert.ToChar (b));  	random.AddRange (characters);  } while (random.Count < length);  
Magic Number,Thinktecture.IdentityModel.Hawk.Core.Helpers,NonceGenerator,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Helpers\NonceGenerator.cs,Generate,The following statement contains a magic number: do {  	byte[] bytes = new byte[length * 8];  	_rngProvider.GetBytes (bytes);  	var characters = bytes.Where (b => (b >= 48 && b <= 57) || // 0 - 9  	(b >= 97 && b <= 122) || // a - z  	(b >= 65 && b <= 90))// A - Z  	.Take (length - random.Count).Select (b => Convert.ToChar (b));  	random.AddRange (characters);  } while (random.Count < length);  
Magic Number,Thinktecture.IdentityModel.Hawk.Core.Helpers,NonceGenerator,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\Helpers\NonceGenerator.cs,Generate,The following statement contains a magic number: do {  	byte[] bytes = new byte[length * 8];  	_rngProvider.GetBytes (bytes);  	var characters = bytes.Where (b => (b >= 48 && b <= 57) || // 0 - 9  	(b >= 97 && b <= 122) || // a - z  	(b >= 65 && b <= 90))// A - Z  	.Take (length - random.Count).Select (b => Convert.ToChar (b));  	random.AddRange (characters);  } while (random.Count < length);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,NormalizedTimestamp,The following statement contains a magic number: if (this.IsEnabled ())  	this.WriteEvent (2' NormalizedFormat);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,NormalizedTimestamp,The following statement contains a magic number: this.WriteEvent (2' NormalizedFormat);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,UnparsedArtifact,The following statement contains a magic number: if (this.IsEnabled ())  	this.WriteEvent (3' Unparsed);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,UnparsedArtifact,The following statement contains a magic number: this.WriteEvent (3' Unparsed);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,NormalizedBody,The following statement contains a magic number: if (this.IsEnabled ())  	this.WriteEvent (4' NormalizedFormat);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,NormalizedBody,The following statement contains a magic number: this.WriteEvent (4' NormalizedFormat);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,StaleTimestamp,The following statement contains a magic number: if (this.IsEnabled ())  	this.WriteEvent (5' Age' ShelfLife);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,StaleTimestamp,The following statement contains a magic number: this.WriteEvent (5' Age' ShelfLife);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,NormalizedRequest,The following statement contains a magic number: if (this.IsEnabled ())  	this.WriteEvent (6' NormalizedFormat);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,NormalizedRequest,The following statement contains a magic number: this.WriteEvent (6' NormalizedFormat);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,Exception,The following statement contains a magic number: if (this.IsEnabled ())  	this.WriteEvent (7' Message);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,Exception,The following statement contains a magic number: this.WriteEvent (7' Message);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,TimestampMismatch,The following statement contains a magic number: if (this.IsEnabled ())  	this.WriteEvent (8' CompensatorySeconds);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,TimestampMismatch,The following statement contains a magic number: this.WriteEvent (8' CompensatorySeconds);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,ServerResponse,The following statement contains a magic number: if (this.IsEnabled ())  	this.WriteEvent (9' StatusCode' Body' AuthorizationHeader);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,ServerResponse,The following statement contains a magic number: this.WriteEvent (9' StatusCode' Body' AuthorizationHeader);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,NonceReplay,The following statement contains a magic number: if (this.IsEnabled ())  	this.WriteEvent (10' Nonce' LastUsedBy);  
Magic Number,Thinktecture.IdentityModel.Hawk.Etw,HawkEventSource,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Etw\HawkEventSource.cs,NonceReplay,The following statement contains a magic number: this.WriteEvent (10' Nonce' LastUsedBy);  
Magic Number,Thinktecture.IdentityModel.Hawk.Owin,HawkAuthenticationHandler,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Owin\HawkAuthenticationHandler.cs,ApplyResponseChallengeAsync,The following statement contains a magic number: if (Response.StatusCode == 401) {  	var challenge = Helper.LookupChallenge (Options.AuthenticationType' Options.AuthenticationMode);  	if (challenge == null) {  		return;  	}  }  
Missing Default,Thinktecture.IdentityModel.Hawk.Core,ArtifactsContainer,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Hawk\Core\ArtifactsContainer.cs,TryParse,The following switch statement is missing a default case: switch (key) {  case ID:  	result.Id = value;  	break;  case TS: {  	ulong timestamp;  	if (UInt64.TryParse (value' out timestamp)) {  		result.Timestamp = timestamp;  		break;  	} else  		return value;  }  case NONCE:  	result.Nonce = value;  	break;  case EXT:  	result.ApplicationSpecificData = value;  	break;  case MAC:  	result.Mac = value.ToBytesFromBase64 ();  	break;  case HASH:  	result.PayloadHash = value.ToBytesFromBase64 ();  	break;  case TSM:  	result.TimestampMac = value.ToBytesFromBase64 ();  	break;  }  
