Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Thinktecture.IdentityModel.Tokens,SimpleWebTokenHandler,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebTokenHandler.cs,ReadToken,Cyclomatic complexity of the method is 9
Complex Method,Thinktecture.IdentityModel.Tokens,SimpleWebTokenHandler,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebTokenHandler.cs,ValidateToken,Cyclomatic complexity of the method is 8
Long Parameter List,Thinktecture.IdentityModel.Tokens,SimpleWebToken,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebToken.cs,SimpleWebToken,The method has 6 parameters. Parameters: audienceUri' issuer' expiresOn' claims' signature' unsignedString
Long Parameter List,Thinktecture.IdentityModel.Tokens,SimpleWebToken,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebToken.cs,SimpleWebToken,The method has 5 parameters. Parameters: audienceUri' issuer' expiresOn' claims' signingKey
Long Statement,Thinktecture.IdentityModel.Tokens,SimpleWebTokenHandler,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebTokenHandler.cs,ReadToken,The length of the statement  "                throw new SecurityTokenValidationException("The Simple Web Token must have a signature at the end. The incoming token did not have a signature at the end of the token."); " is 170.
Long Statement,Thinktecture.IdentityModel.Tokens,SimpleWebTokenHandler,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebTokenHandler.cs,ReadToken,The length of the statement  "                throw new SecurityTokenValidationException("The Simple Web Token must have a signature at the end. The incoming token did not have a signature at the end of the token."); " is 170.
Long Statement,Thinktecture.IdentityModel.Tokens,SimpleWebTokenHandler,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebTokenHandler.cs,WriteToken,The length of the statement  "            writer.WriteAttributeString(WSSecurity10Constants.Attributes.ValueType' "http://schemas.xmlsoap.org/ws/2009/11/swt-token-profile-1.0"); " is 135.
Long Statement,Thinktecture.IdentityModel.Tokens,SimpleWebTokenHandler,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebTokenHandler.cs,ValidateToken,The length of the statement  "                throw new SecurityTokenExpiredException("The incoming token has expired. Get a new access token from the Authorization Server."); " is 129.
Long Statement,Thinktecture.IdentityModel.Tokens,SimpleWebTokenHandler,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebTokenHandler.cs,ValidateToken,The length of the statement  "                value.Split(''').ToList().ForEach(v => id.AddClaim(new Claim(claim.Type' WebUtility.UrlDecode(v)' ClaimValueTypes.String' issuerName))); " is 136.
Long Statement,Thinktecture.IdentityModel.Tokens,SimpleWebTokenHandler,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebTokenHandler.cs,ParseToken,The length of the statement  "                string key = WebUtility.UrlDecode(keyValueArray[0].Trim());               // Names must be decoded for the claim type case " is 122.
Magic Number,Thinktecture.IdentityModel.Tokens,SimpleWebTokenHandler,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebTokenHandler.cs,ParseToken,The following statement contains a magic number: foreach (string nameValue in encodedToken.Split('&'))              {                  string[] keyValueArray = nameValue.Split('=');                    if ((keyValueArray.Length != 2)                     && !String.IsNullOrEmpty(keyValueArray[0]))                  {                      // the signature may have multiple '=' in the end                      throw new SecurityTokenException("The received token is not correctly formed");                  }                    if (String.IsNullOrEmpty(keyValueArray[1]))                  {                      // ignore parameter with empty values                      continue;                  }                    string key = WebUtility.UrlDecode(keyValueArray[0].Trim());               // Names must be decoded for the claim type case                  string value = WebUtility.UrlDecode(keyValueArray[1].Trim().Trim('"')); // remove any unwanted "                  claimCollection.Add(key' value);              }
Magic Number,Thinktecture.IdentityModel.Tokens,SimpleWebTokenHandler,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Swt\SimpleWebTokenHandler.cs,DecodeExpiry,The following statement contains a magic number: return new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).AddSeconds(totalSeconds);
