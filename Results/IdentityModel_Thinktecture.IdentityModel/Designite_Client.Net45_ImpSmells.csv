Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Thinktecture.IdentityModel.Client,Base64Url,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\Base64Url.cs,Decode,Cyclomatic complexity of the method is 10
Complex Method,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,CreateAuthorizeUrl,Cyclomatic complexity of the method is 8
Long Parameter List,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,OAuth2Client,The method has 5 parameters.
Long Parameter List,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,CreateCodeFlowUrl,The method has 8 parameters.
Long Parameter List,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,CreateImplicitFlowUrl,The method has 8 parameters.
Long Parameter List,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,CreateAuthorizeUrl,The method has 10 parameters.
Long Parameter List,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,RequestResourceOwnerPasswordAsync,The method has 5 parameters.
Long Parameter List,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,RequestAssertionAsync,The method has 5 parameters.
Long Statement,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,CreateCodeFlowUrl,The length of the statement  "	return CreateAuthorizeUrl (clientId: clientId' responseType: OAuth2Constants.ResponseTypes.Code' scope: scope' redirectUri: redirectUri' state: state' nonce: nonce' loginHint: loginHint' acrValues: acrValues' additionalValues: additionalValues); " is 245.
Long Statement,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,CreateImplicitFlowUrl,The length of the statement  "	return CreateAuthorizeUrl (clientId: clientId' responseType: OAuth2Constants.ResponseTypes.Token' scope: scope' redirectUri: redirectUri' state: state' nonce: nonce' loginHint: loginHint' acrValues: acrValues' additionalValues: additionalValues); " is 246.
Long Statement,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,CreateAuthorizeUrl,The length of the statement  "	var qs = string.Join ("&"' values.Select (kvp => String.Format ("{0}={1}"' WebUtility.UrlEncode (kvp.Key)' WebUtility.UrlEncode (kvp.Value))).ToArray ()); " is 154.
Long Statement,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,RequestAsync,The length of the statement  "	var response = await _client.PostAsync (string.Empty' new FormUrlEncodedContent (form)' cancellationToken).ConfigureAwait (false); " is 130.
Long Statement,Thinktecture.IdentityModel.Client,OAuth2Client,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\OAuth2Client.cs,Merge,The length of the statement  "		merged = explicitValues.Concat (additionalValues.Where (add => !explicitValues.ContainsKey (add.Key))).ToDictionary (final => final.Key' final => final.Value); " is 159.
Magic Number,Thinktecture.IdentityModel.Client,AuthorizeResponse,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\AuthorizeResponse.cs,ParseRaw,The following statement contains a magic number: foreach (var param in qparams) {  	var parts = param.Split ('=');  	if (parts.Length == 2) {  		Values.Add (parts [0]' parts [1]);  	} else {  		throw new InvalidOperationException ("Malformed callback URL.");  	}  }  
Magic Number,Thinktecture.IdentityModel.Client,AuthorizeResponse,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\AuthorizeResponse.cs,ParseRaw,The following statement contains a magic number: if (parts.Length == 2) {  	Values.Add (parts [0]' parts [1]);  } else {  	throw new InvalidOperationException ("Malformed callback URL.");  }  
Magic Number,Thinktecture.IdentityModel.Client,Base64Url,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\Base64Url.cs,Decode,The following statement contains a magic number: switch (s.Length % 4) // Pad with trailing '='s  {  case 0:  	break;  // No pad chars in this case  case 2:  	s += "==";  	break;  // Two pad chars  case 3:  	s += "=";  	break;  // One pad char  default:  	throw new Exception ("Illegal base64url string!");  }  
Magic Number,Thinktecture.IdentityModel.Client,Base64Url,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\Base64Url.cs,Decode,The following statement contains a magic number: switch (s.Length % 4) // Pad with trailing '='s  {  case 0:  	break;  // No pad chars in this case  case 2:  	s += "==";  	break;  // Two pad chars  case 3:  	s += "=";  	break;  // One pad char  default:  	throw new Exception ("Illegal base64url string!");  }  
Magic Number,Thinktecture.IdentityModel.Client,Base64Url,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\Base64Url.cs,Decode,The following statement contains a magic number: switch (s.Length % 4) // Pad with trailing '='s  {  case 0:  	break;  // No pad chars in this case  case 2:  	s += "==";  	break;  // Two pad chars  case 3:  	s += "=";  	break;  // One pad char  default:  	throw new Exception ("Illegal base64url string!");  }  
Magic Number,Thinktecture.IdentityModel.Client,EpochTimeExtensions,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\EpochTimeExtensions.cs,ToDateTimeFromEpoch,The following statement contains a magic number: return new DateTime (1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).AddTicks (timeInTicks);  
Magic Number,Thinktecture.IdentityModel.Client,EpochTimeExtensions,F:\newReposMay17\IdentityModel_Thinktecture.IdentityModel\source\Client.Shared\EpochTimeExtensions.cs,ToDateTimeOffsetFromEpoch,The following statement contains a magic number: return new DateTimeOffset (1970' 1' 1' 0' 0' 0' TimeSpan.Zero).AddTicks (timeInTicks);  
