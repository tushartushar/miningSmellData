Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Thinktecture.IdentityModel,Identity,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Identity.cs,CreateFromCertificate,Cyclomatic complexity of the method is 12
Long Identifier,Thinktecture.IdentityModel.Constants,SamlNameIdentifierFormats,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Constants\SamlNameIdentifierFormats.cs,,The length of the parameter WindowsDomainQualifiedNameString is 32.
Long Identifier,Thinktecture.IdentityModel.Constants,Actions,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Constants\WSTrust13Constants.cs,,The length of the parameter RequestSecurityContextTokenCancel is 33.
Long Identifier,Thinktecture.IdentityModel.Constants,Actions,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Constants\WSTrust13Constants.cs,,The length of the parameter RequestSecurityContextTokenResponse is 35.
Long Identifier,Thinktecture.IdentityModel.Constants,Actions,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Constants\WSTrust13Constants.cs,,The length of the parameter RequestSecurityContextTokenResponseCancel is 41.
Long Identifier,Thinktecture.IdentityModel.Constants,ElementNames,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Constants\WSTrust13Constants.cs,,The length of the parameter RequestSecurityTokenResponseCollection is 38.
Long Statement,Thinktecture.IdentityModel,Tracing,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Tracing.cs,ErrorVerbose,The length of the statement  "            TraceEventFormat(TraceEventType.Error' "{0}\n\nMethod: {1}\nFilename: {2}\nLine number: {3}"' message' memberName' filePath' lineNumber); " is 137.
Virtual Method Call from Constructor,Thinktecture.IdentityModel.Metadata,MetadataBasedIssuerNameRegistry,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Metadata\MetadataBasedIssuerNameRegistry.cs,MetadataBasedIssuerNameRegistry,The constructor "MetadataBasedIssuerNameRegistry" calls a virtual method "LoadMetadata".
Magic Number,Thinktecture.IdentityModel,Base64Url,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Base64Url.cs,Decode,The following statement contains a magic number: switch (s.Length % 4) // Pad with trailing '='s              {                  case 0: break; // No pad chars in this case                  case 2: s += "=="; break; // Two pad chars                  case 3: s += "="; break; // One pad char                  default: throw new Exception("Illegal base64url string!");              }
Magic Number,Thinktecture.IdentityModel,Base64Url,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Base64Url.cs,Decode,The following statement contains a magic number: switch (s.Length % 4) // Pad with trailing '='s              {                  case 0: break; // No pad chars in this case                  case 2: s += "=="; break; // Two pad chars                  case 3: s += "="; break; // One pad char                  default: throw new Exception("Illegal base64url string!");              }
Magic Number,Thinktecture.IdentityModel,Base64Url,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Base64Url.cs,Decode,The following statement contains a magic number: switch (s.Length % 4) // Pad with trailing '='s              {                  case 0: break; // No pad chars in this case                  case 2: s += "=="; break; // Two pad chars                  case 3: s += "="; break; // One pad char                  default: throw new Exception("Illegal base64url string!");              }
Magic Number,Thinktecture.IdentityModel,CryptoRandom,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\CryptoRandom.cs,ByteArrayToString,The following statement contains a magic number: StringBuilder hex = new StringBuilder(ba.Length * 2);
Magic Number,Thinktecture.IdentityModel,KeyGenerator,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\KeyGenerator.cs,ComputeCombinedKey,The following statement contains a magic number: using (KeyedHashAlgorithm algorithm = new HMACSHA1())              {                  algorithm.Key = requestorEntropy;                  byte[] buffer = issuerEntropy;                  byte[] buffer3 = new byte[(algorithm.HashSize / 8) + buffer.Length];                  byte[] buffer4 = null;                  try                  {                      try                      {                          int num2 = 0;                          while (num2 < num)                          {                              algorithm.Initialize();                              buffer = algorithm.ComputeHash(buffer);                              buffer.CopyTo(buffer3' 0);                              issuerEntropy.CopyTo(buffer3' buffer.Length);                              algorithm.Initialize();                              buffer4 = algorithm.ComputeHash(buffer3);                              for (int i = 0; i < buffer4.Length; i++)                              {                                  if (num2 >= num)                                  {                                      continue;                                  }                                  array[num2++] = buffer4[i];                              }                          }                      }                      catch                      {                          Array.Clear(array' 0' array.Length);                          throw;                      }                      return array;                  }                  finally                  {                      if (buffer4 != null)                      {                          Array.Clear(buffer4' 0' buffer4.Length);                      }                      Array.Clear(buffer3' 0' buffer3.Length);                      algorithm.Clear();                  }              }
Magic Number,Thinktecture.IdentityModel,KeyGenerator,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\KeyGenerator.cs,ValidateKeySizeInBytes,The following statement contains a magic number: int num = keySizeInBits / 8;
Magic Number,Thinktecture.IdentityModel,KeyGenerator,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\KeyGenerator.cs,ValidateKeySizeInBytes,The following statement contains a magic number: if ((num * 8) != keySizeInBits)              {                  throw new ArgumentOutOfRangeException("keySizeInBits");              }
Magic Number,Thinktecture.IdentityModel,ObfuscatingComparer,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\ObfuscatingComparer.cs,IsEqual,The following statement contains a magic number: for (int i = 0; i < s1.Length; i++)              {                  if (s1chars[i].Equals(s2chars[i]))                  {                      hits += 2;                  }                  else                  {                      hits += 1;                  }              }
Magic Number,Thinktecture.IdentityModel,ObfuscatingComparer,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\ObfuscatingComparer.cs,IsEqual,The following statement contains a magic number: bool same = (hits == s1.Length * 2);
Magic Number,Thinktecture.IdentityModel.Extensions,DateTimeExtensions,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Extensions\DateTimeExtensions.cs,ToEpochTime,The following statement contains a magic number: var ticks = date.Ticks - new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks;
Magic Number,Thinktecture.IdentityModel.Extensions,DateTimeExtensions,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Extensions\DateTimeExtensions.cs,ToEpochTime,The following statement contains a magic number: var ticks = date.Ticks - new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero).Ticks;
Magic Number,Thinktecture.IdentityModel.Extensions,DateTimeExtensions,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Extensions\DateTimeExtensions.cs,ToDateTimeFromEpoch,The following statement contains a magic number: return new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).AddTicks(timeInTicks);
Magic Number,Thinktecture.IdentityModel.Extensions,DateTimeExtensions,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Extensions\DateTimeExtensions.cs,ToDateTimeOffsetFromEpoch,The following statement contains a magic number: return new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero).AddTicks(timeInTicks);
Magic Number,Thinktecture.IdentityModel.Extensions,SecurityTokensExtensions,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Extensions\SecurityTokens.cs,ToTokenXmlString,The following statement contains a magic number: if (handler.CanWriteToken(token))              {                  var sb = new StringBuilder(128);                  handler.WriteToken(new XmlTextWriter(new StringWriter(sb))' token);                  return sb.ToString();              }              else              {                  throw new InvalidOperationException("Token type not suppoted");              }
Magic Number,Thinktecture.IdentityModel.Extensions,XmlConverter,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Extensions\XmlExtensions\XmlConverter.cs,XmlConverter,The following statement contains a magic number: _writer = new XmlTextWriter(new StringWriter(_xmlTextBuilder))              {                  Formatting = Formatting.Indented'                  Indentation = 2              };
Magic Number,Thinktecture.IdentityModel.Tokens,HeaderEncoding,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Tokens\HeaderEncoding.cs,IsBase64Encoded,The following statement contains a magic number: return (token.Length % 4 == 0) &&                     (Regex.IsMatch(token' @"^[a-zA-Z0-9+/]*={0'3}$"' RegexOptions.None));
Magic Number,Thinktecture.IdentityModel.Tokens,HmacSigningCredentials,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Tokens\HmacSigningCredentials.cs,CreateSignatureAlgorithm,The following statement contains a magic number: switch (key.Length)              {                  case 32:                      return Algorithms.HmacSha256Signature;                  case 48:                      return Algorithms.HmacSha384Signature;                  case 64:                      return Algorithms.HmacSha512Signature;                  default:                      throw new InvalidOperationException("Unsupported key length");              }
Magic Number,Thinktecture.IdentityModel.Tokens,HmacSigningCredentials,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Tokens\HmacSigningCredentials.cs,CreateSignatureAlgorithm,The following statement contains a magic number: switch (key.Length)              {                  case 32:                      return Algorithms.HmacSha256Signature;                  case 48:                      return Algorithms.HmacSha384Signature;                  case 64:                      return Algorithms.HmacSha512Signature;                  default:                      throw new InvalidOperationException("Unsupported key length");              }
Magic Number,Thinktecture.IdentityModel.Tokens,HmacSigningCredentials,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Tokens\HmacSigningCredentials.cs,CreateSignatureAlgorithm,The following statement contains a magic number: switch (key.Length)              {                  case 32:                      return Algorithms.HmacSha256Signature;                  case 48:                      return Algorithms.HmacSha384Signature;                  case 64:                      return Algorithms.HmacSha512Signature;                  default:                      throw new InvalidOperationException("Unsupported key length");              }
Magic Number,Thinktecture.IdentityModel.Tokens,HmacSigningCredentials,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Tokens\HmacSigningCredentials.cs,CreateDigestAlgorithm,The following statement contains a magic number: switch (key.Length)              {                  case 32:                      return Algorithms.Sha256Digest;                  case 48:                      return Algorithms.Sha384Digest;                  case 64:                      return Algorithms.Sha512Digest;                  default:                      throw new InvalidOperationException("Unsupported key length");              }
Magic Number,Thinktecture.IdentityModel.Tokens,HmacSigningCredentials,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Tokens\HmacSigningCredentials.cs,CreateDigestAlgorithm,The following statement contains a magic number: switch (key.Length)              {                  case 32:                      return Algorithms.Sha256Digest;                  case 48:                      return Algorithms.Sha384Digest;                  case 64:                      return Algorithms.Sha512Digest;                  default:                      throw new InvalidOperationException("Unsupported key length");              }
Magic Number,Thinktecture.IdentityModel.Tokens,HmacSigningCredentials,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Core\Tokens\HmacSigningCredentials.cs,CreateDigestAlgorithm,The following statement contains a magic number: switch (key.Length)              {                  case 32:                      return Algorithms.Sha256Digest;                  case 48:                      return Algorithms.Sha384Digest;                  case 64:                      return Algorithms.Sha512Digest;                  default:                      throw new InvalidOperationException("Unsupported key length");              }
