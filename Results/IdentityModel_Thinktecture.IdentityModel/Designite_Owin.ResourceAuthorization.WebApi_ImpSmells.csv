Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Thinktecture.IdentityModel.WebApi,ResourceAuthorizeAttribute,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Owin.ResourceAuthorization.WebApi\ResourceAuthorizeAttribute.cs,HandleUnauthorizedRequest,The length of the statement  "                actionContext.Response = actionContext.ControllerContext.Request.CreateErrorResponse(HttpStatusCode.Forbidden' "Forbidden"); " is 124.
Long Statement,Thinktecture.IdentityModel.WebApi,ResourceAuthorizeAttribute,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Owin.ResourceAuthorization.WebApi\ResourceAuthorizeAttribute.cs,HandleUnauthorizedRequest,The length of the statement  "                actionContext.Response = actionContext.ControllerContext.Request.CreateErrorResponse(HttpStatusCode.Unauthorized' "Unauthorized"); " is 130.
Long Statement,Thinktecture.IdentityModel.WebApi,HttpActionContextExtensions,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Owin.ResourceAuthorization.WebApi\HttpActionContextExtensions.cs,ResourcesFromRouteParameters,The length of the statement  "            return actionContext.ControllerContext.RouteData.Values.Select(arg => new Claim(arg.Key' (arg.Value ?? "").ToString())); " is 120.
Long Statement,Thinktecture.IdentityModel.WebApi,HttpActionContextExtensions,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Owin.ResourceAuthorization.WebApi\HttpActionContextExtensions.cs,ResourceFromController,The length of the statement  "            return new List<Claim> { new Claim("controller"' actionContext.ControllerContext.ControllerDescriptor.ControllerName) }; " is 120.
Magic Number,Thinktecture.IdentityModel.WebApi,ResourceAuthorizeAttribute,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Owin.ResourceAuthorization.WebApi\ResourceAuthorizeAttribute.cs,CheckAccessAsync,The following statement contains a magic number: if (await Task.WhenAny(task' Task.Delay(5000)).ConfigureAwait(false) == task)              {                  // Task completed within timeout.                    // The task may have faulted or been cancelled.                  // We re-await the task so that any exceptions/cancellation is rethrown.                  var result = await task.ConfigureAwait(false);                    return result;              }              else              {                  // timeout logic                  throw new TimeoutException();              }
