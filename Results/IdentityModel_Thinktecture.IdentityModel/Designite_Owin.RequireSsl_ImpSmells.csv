Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Thinktecture.IdentityModel.Owin,RequireSslMiddleware,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Owin.RequireSsl\RequireSslMiddleware.cs,Invoke,The following statement contains a magic number: if (context.Request.Uri.Scheme != Uri.UriSchemeHttps)              {                  context.Response.StatusCode = 403;                  context.Response.ReasonPhrase = "SSL is required.";                    return;              }
Magic Number,Thinktecture.IdentityModel.Owin,RequireSslMiddleware,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Owin.RequireSsl\RequireSslMiddleware.cs,Invoke,The following statement contains a magic number: if (_options.RequireClientCertificate)              {                  var cert = context.Get<X509Certificate2>("ssl.ClientCertificate");                  if (cert == null)                  {                      context.Response.StatusCode = 403;                      context.Response.ReasonPhrase = "SSL client certificate is required.";                        return;                  }                  else                  {                      if (_options.ClientCertificateValidator != null)                      {                          try                          {                              _options.ClientCertificateValidator.Validate(cert);                          }                          catch (Exception ex)                          {                              context.Response.StatusCode = 403;                              context.Response.ReasonPhrase = ex.Message;                                return;                          }                      }                  }              }
Magic Number,Thinktecture.IdentityModel.Owin,RequireSslMiddleware,C:\repos\IdentityModel_Thinktecture.IdentityModel\source\Owin.RequireSsl\RequireSslMiddleware.cs,Invoke,The following statement contains a magic number: if (_options.RequireClientCertificate)              {                  var cert = context.Get<X509Certificate2>("ssl.ClientCertificate");                  if (cert == null)                  {                      context.Response.StatusCode = 403;                      context.Response.ReasonPhrase = "SSL client certificate is required.";                        return;                  }                  else                  {                      if (_options.ClientCertificateValidator != null)                      {                          try                          {                              _options.ClientCertificateValidator.Validate(cert);                          }                          catch (Exception ex)                          {                              context.Response.StatusCode = 403;                              context.Response.ReasonPhrase = ex.Message;                                return;                          }                      }                  }              }
