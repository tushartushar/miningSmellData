Implementation smell,Namespace,Class,File,Method,Description
Long Method,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The method has 115 lines of code.
Long Method,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The method has 129 lines of code.
Long Method,OxyPlot.Wpf,ConverterExtensions,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Utilities\ConverterExtensions.cs,Convert,The method has 163 lines of code.
Complex Method,OxyPlot.Wpf,PlotBase,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PlotBase.cs,UpdateVisuals,Cyclomatic complexity of the method is 8
Complex Method,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,UpdatePositionAndBorder,Cyclomatic complexity of the method is 17
Complex Method,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,Cyclomatic complexity of the method is 11
Complex Method,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawPolygons,Cyclomatic complexity of the method is 12
Complex Method,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawText,Cyclomatic complexity of the method is 14
Long Parameter List,OxyPlot.Wpf,XamlExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\XamlExporter.cs,Export,The method has 5 parameters. Parameters: model' fileName' width' height' background
Long Parameter List,OxyPlot.Wpf,XamlExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\XamlExporter.cs,Export,The method has 5 parameters. Parameters: model' writer' width' height' background
Long Parameter List,OxyPlot.Wpf,PngExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PngExporter.cs,Export,The method has 6 parameters. Parameters: model' fileName' width' height' background' resolution
Long Parameter List,OxyPlot.Wpf,PngExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PngExporter.cs,Export,The method has 6 parameters. Parameters: model' stream' width' height' background' resolution
Long Parameter List,OxyPlot.Wpf,PngExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PngExporter.cs,ExportToBitmap,The method has 5 parameters. Parameters: model' width' height' background' resolution
Long Parameter List,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreateBorderGeometry,The method has 5 parameters. Parameters: ha' va' width' height' margin
Long Parameter List,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The method has 5 parameters. Parameters: ha' va' width' height' margin
Long Parameter List,OxyPlot.Wpf,XpsExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\XpsExporter.cs,Export,The method has 5 parameters. Parameters: model' fileName' width' height' background
Long Parameter List,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawLine,The method has 6 parameters. Parameters: points' stroke' thickness' dashArray' lineJoin' aliased
Long Parameter List,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawLineSegments,The method has 6 parameters. Parameters: points' stroke' thickness' dashArray' lineJoin' aliased
Long Parameter List,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawPolygon,The method has 7 parameters. Parameters: points' fill' stroke' thickness' dashArray' lineJoin' aliased
Long Parameter List,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawPolygons,The method has 7 parameters. Parameters: polygons' fill' stroke' thickness' dashArray' lineJoin' aliased
Long Parameter List,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawText,The method has 10 parameters. Parameters: p' text' fill' fontFamily' fontSize' fontWeight' rotate' halign' valign' maxSize
Long Parameter List,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawImage,The method has 11 parameters. Parameters: source' srcX' srcY' srcWidth' srcHeight' destX' destY' destWidth' destHeight' opacity' interpolate
Long Parameter List,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawLineSegmentsByStreamGeometry,The method has 6 parameters. Parameters: points' stroke' thickness' dashArray' lineJoin' aliased
Long Parameter List,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,SetStroke,The method has 7 parameters. Parameters: shape' stroke' thickness' lineJoin' dashArray' dashOffset' aliased
Long Parameter List,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawLineBalanced,The method has 6 parameters. Parameters: points' stroke' thickness' dashArray' lineJoin' aliased
Long Identifier,OxyPlot.Wpf,PolylineAnnotation,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Annotations\PolylineAnnotation.cs,,The length of the parameter InterpolationAlgorithmProperty is 30.
Long Identifier,OxyPlot.Wpf,TextualAnnotation,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Annotations\TextualAnnotation.cs,,The length of the parameter TextHorizontalAlignmentProperty is 31.
Long Identifier,OxyPlot.Wpf,Axis,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Axes\Axis.cs,,The length of the parameter AxisTickToLabelDistanceProperty is 31.
Long Identifier,OxyPlot.Wpf,Axis,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Axes\Axis.cs,,The length of the parameter ExtraGridlineThicknessProperty is 30.
Long Identifier,OxyPlot.Wpf,Axis,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Axes\Axis.cs,,The length of the parameter MajorGridlineThicknessProperty is 30.
Long Identifier,OxyPlot.Wpf,Axis,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Axes\Axis.cs,,The length of the parameter MinorGridlineThicknessProperty is 30.
Long Identifier,OxyPlot.Wpf,Axis,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Axes\Axis.cs,,The length of the parameter PositionAtZeroCrossingProperty is 30.
Long Identifier,OxyPlot.Wpf,Axis,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Axes\Axis.cs,,The length of the parameter UseSuperExponentialFormatProperty is 33.
Long Identifier,OxyPlot.Wpf,PlotBase,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PlotBase.cs,,The length of the parameter DefaultTrackerTemplateProperty is 30.
Long Identifier,OxyPlot.Wpf,Plot,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Plot.Properties.cs,,The length of the parameter PlotAreaBorderThicknessProperty is 31.
Long Identifier,OxyPlot.Wpf,RectangleSeries,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Series\RectangleSeries.cs,,The length of the parameter CanTrackerInterpolatePointsProperty is 35.
Long Identifier,OxyPlot.Wpf,StairStepSeries,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Series\StairStepSeries.cs,,The length of the parameter VerticalStrokeThicknessProperty is 31.
Long Identifier,OxyPlot.Wpf,ScatterErrorSeries,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Series\ScatterErrorSeries.cs,,The length of the parameter ErrorBarStrokeThicknessProperty is 31.
Long Identifier,OxyPlot.Wpf,Series,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Series\Series.cs,OnCollectionChanged,The length of the parameter notifyCollectionChangedEventArgs is 32.
Long Identifier,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,OnPositionChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,,The length of the parameter HorizontalLineVisibilityProperty is 32.
Long Identifier,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,,The length of the parameter VerticalLineVisibilityProperty is 30.
Long Identifier,OxyPlot.Wpf,LineSeries,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Series\LineSeries.cs,,The length of the parameter InterpolationAlgorithmProperty is 30.
Long Identifier,OxyPlot.Wpf,DataPointSeries,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Series\DataPointSeries.cs,,The length of the parameter CanTrackerInterpolatePointsProperty is 35.
Long Statement,OxyPlot.Wpf,PlotBase,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PlotBase.cs,IsUserVisible,The length of the statement  "            var bounds = element.TransformToAncestor(container).TransformBounds(new Rect(0.0' 0.0' element.ActualWidth' element.ActualHeight)); " is 131.
Long Statement,OxyPlot.Wpf,PngExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PngExporter.cs,ExportToBitmap,The length of the statement  "            var canvas = new Canvas { Width = this.Width * scale' Height = this.Height * scale' Background = this.Background.ToBrush() }; " is 125.
Long Statement,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawImage,The length of the statement  "            RenderOptions.SetBitmapScalingMode(image' interpolate ? BitmapScalingMode.HighQuality : BitmapScalingMode.NearestNeighbor); " is 123.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawImage,The conditional expression  "destWidth <= 0 || destHeight <= 0 || srcWidth <= 0 || srcHeight <= 0"  is complex.
Complex Conditional,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawImage,The conditional expression  "srcX == 0 && srcY == 0 && srcWidth == bitmapChain.PixelWidth && srcHeight == bitmapChain.PixelHeight"  is complex.
Magic Number,OxyPlot.Wpf,LinearColorAxis,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Axes\LinearColorAxis.cs,SynchronizeProperties,The following statement contains a magic number: if (this.GradientStops != null)              {                  axis.Palette = this.GradientStops.Count > 2                                     ? Interpolate(this.GradientStops.ToList()' this.PaletteSize)                                     : new OxyPalette();              }
Magic Number,OxyPlot.Wpf,LinearColorAxis,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Axes\LinearColorAxis.cs,Interpolate,The following statement contains a magic number: Debug.Assert(stops.Count >= 2' "Can't interpolate less than 2 gradient stops.");
Magic Number,OxyPlot.Wpf,PlotBase,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PlotBase.cs,OnMouseUp,The following statement contains a magic number: if (this.ContextMenu != null)              {                  if (Math.Abs(d) < 1e-8 && e.ChangedButton == MouseButton.Right)                  {                      // TODO: why is the data context not passed to the context menu??                      this.ContextMenu.DataContext = this.DataContext;                      this.ContextMenu.PlacementTarget = this;                      this.ContextMenu.Visibility = System.Windows.Visibility.Visible;                      this.ContextMenu.IsOpen = true;                  }                  else                  {                      this.ContextMenu.Visibility = System.Windows.Visibility.Collapsed;                      this.ContextMenu.IsOpen = false;                  }              }
Magic Number,OxyPlot.Wpf,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PlotView.cs,PlotView,The following statement contains a magic number: PaddingProperty.OverrideMetadata(typeof(PlotView)' new FrameworkPropertyMetadata(new Thickness(8)' AppearanceChanged));
Magic Number,OxyPlot.Wpf,Plot,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Plot.Properties.cs,Plot,The following statement contains a magic number: PaddingProperty.OverrideMetadata(typeof(Plot)' new FrameworkPropertyMetadata(new Thickness(8)' AppearanceChanged));
Magic Number,OxyPlot.Wpf,PngExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PngExporter.cs,PngExporter,The following statement contains a magic number: this.Width = 700;
Magic Number,OxyPlot.Wpf,PngExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PngExporter.cs,PngExporter,The following statement contains a magic number: this.Height = 400;
Magic Number,OxyPlot.Wpf,PngExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\PngExporter.cs,PngExporter,The following statement contains a magic number: this.Resolution = 96;
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: const double MarginLimit = 10;
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterHorizontally)              {                  if (this.Position.X - (contentWidth / 2) < MarginLimit)                  {                      ha = HorizontalAlignment.Left;                  }                    if (this.Position.X + (contentWidth / 2) > canvasWidth - MarginLimit)                  {                      ha = HorizontalAlignment.Right;                  }              }              else              {                  ha = this.Position.X < canvasWidth / 2 ? HorizontalAlignment.Left : HorizontalAlignment.Right;              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterHorizontally)              {                  if (this.Position.X - (contentWidth / 2) < MarginLimit)                  {                      ha = HorizontalAlignment.Left;                  }                    if (this.Position.X + (contentWidth / 2) > canvasWidth - MarginLimit)                  {                      ha = HorizontalAlignment.Right;                  }              }              else              {                  ha = this.Position.X < canvasWidth / 2 ? HorizontalAlignment.Left : HorizontalAlignment.Right;              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterHorizontally)              {                  if (this.Position.X - (contentWidth / 2) < MarginLimit)                  {                      ha = HorizontalAlignment.Left;                  }                    if (this.Position.X + (contentWidth / 2) > canvasWidth - MarginLimit)                  {                      ha = HorizontalAlignment.Right;                  }              }              else              {                  ha = this.Position.X < canvasWidth / 2 ? HorizontalAlignment.Left : HorizontalAlignment.Right;              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterVertically)              {                  if (this.Position.Y - (contentHeight / 2) < MarginLimit)                  {                      va = VerticalAlignment.Top;                  }                    if (ha == HorizontalAlignment.Center)                  {                      va = VerticalAlignment.Bottom;                      if (this.Position.Y - contentHeight < MarginLimit)                      {                          va = VerticalAlignment.Top;                      }                  }                    if (va == VerticalAlignment.Center && this.Position.Y + (contentHeight / 2) > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }                    if (va == VerticalAlignment.Top && this.Position.Y + contentHeight > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }              }              else              {                  va = this.Position.Y < canvasHeight / 2 ? VerticalAlignment.Top : VerticalAlignment.Bottom;              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterVertically)              {                  if (this.Position.Y - (contentHeight / 2) < MarginLimit)                  {                      va = VerticalAlignment.Top;                  }                    if (ha == HorizontalAlignment.Center)                  {                      va = VerticalAlignment.Bottom;                      if (this.Position.Y - contentHeight < MarginLimit)                      {                          va = VerticalAlignment.Top;                      }                  }                    if (va == VerticalAlignment.Center && this.Position.Y + (contentHeight / 2) > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }                    if (va == VerticalAlignment.Top && this.Position.Y + contentHeight > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }              }              else              {                  va = this.Position.Y < canvasHeight / 2 ? VerticalAlignment.Top : VerticalAlignment.Bottom;              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterVertically)              {                  if (this.Position.Y - (contentHeight / 2) < MarginLimit)                  {                      va = VerticalAlignment.Top;                  }                    if (ha == HorizontalAlignment.Center)                  {                      va = VerticalAlignment.Bottom;                      if (this.Position.Y - contentHeight < MarginLimit)                      {                          va = VerticalAlignment.Top;                      }                  }                    if (va == VerticalAlignment.Center && this.Position.Y + (contentHeight / 2) > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }                    if (va == VerticalAlignment.Top && this.Position.Y + contentHeight > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }              }              else              {                  va = this.Position.Y < canvasHeight / 2 ? VerticalAlignment.Top : VerticalAlignment.Bottom;              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: double dx = ha == HorizontalAlignment.Center ? -0.5 : ha == HorizontalAlignment.Left ? 0 : -1;
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: double dy = va == VerticalAlignment.Center ? -0.5 : va == VerticalAlignment.Top ? 0 : -1;
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Bottom)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = 0;                  double y1 = height;                  margin = new Thickness(0' 0' 0' m);                  points = new[]                      {                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x2 + (m / 2)' y1)'                          new Point(x2' y1 + m)' new Point(x2 - (m / 2)' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Bottom)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = 0;                  double y1 = height;                  margin = new Thickness(0' 0' 0' m);                  points = new[]                      {                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x2 + (m / 2)' y1)'                          new Point(x2' y1 + m)' new Point(x2 - (m / 2)' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Bottom)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = 0;                  double y1 = height;                  margin = new Thickness(0' 0' 0' m);                  points = new[]                      {                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x2 + (m / 2)' y1)'                          new Point(x2' y1 + m)' new Point(x2 - (m / 2)' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Top)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness(0' m' 0' 0);                  points = new[]                      {                          new Point(x0' y0)' new Point(x2 - (m / 2)' y0)' new Point(x2' 0)' new Point(x2 + (m / 2)' y0)'                          new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Top)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness(0' m' 0' 0);                  points = new[]                      {                          new Point(x0' y0)' new Point(x2 - (m / 2)' y0)' new Point(x2' 0)' new Point(x2 + (m / 2)' y0)'                          new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Top)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness(0' m' 0' 0);                  points = new[]                      {                          new Point(x0' y0)' new Point(x2 - (m / 2)' y0)' new Point(x2' 0)' new Point(x2 + (m / 2)' y0)'                          new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Center)              {                  double x0 = m;                  double x1 = m + width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness(m' 0' 0' 0);                  points = new[]                      {                          new Point(0' y2)' new Point(x0' y2 - (m / 2))' new Point(x0' y0)' new Point(x1' y0)'                          new Point(x1' y1)' new Point(x0' y1)' new Point(x0' y2 + (m / 2))                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Center)              {                  double x0 = m;                  double x1 = m + width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness(m' 0' 0' 0);                  points = new[]                      {                          new Point(0' y2)' new Point(x0' y2 - (m / 2))' new Point(x0' y0)' new Point(x1' y0)'                          new Point(x1' y1)' new Point(x0' y1)' new Point(x0' y2 + (m / 2))                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Center)              {                  double x0 = m;                  double x1 = m + width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness(m' 0' 0' 0);                  points = new[]                      {                          new Point(0' y2)' new Point(x0' y2 - (m / 2))' new Point(x0' y0)' new Point(x1' y0)'                          new Point(x1' y1)' new Point(x0' y1)' new Point(x0' y2 + (m / 2))                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Right && va == VerticalAlignment.Center)              {                  double x0 = 0;                  double x1 = width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness(0' 0' m' 0);                  points = new[]                      {                          new Point(x1 + m' y2)' new Point(x1' y2 + (m / 2))' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y2 - (m / 2))                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Right && va == VerticalAlignment.Center)              {                  double x0 = 0;                  double x1 = width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness(0' 0' m' 0);                  points = new[]                      {                          new Point(x1 + m' y2)' new Point(x1' y2 + (m / 2))' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y2 - (m / 2))                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Right && va == VerticalAlignment.Center)              {                  double x0 = 0;                  double x1 = width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness(0' 0' m' 0);                  points = new[]                      {                          new Point(x1 + m' y2)' new Point(x1' y2 + (m / 2))' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y2 - (m / 2))                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Top)              {                  m *= 0.67;                  double x0 = m;                  double x1 = m + width;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness(m' m' 0' 0);                  points = new[]                      {                          new Point(0' 0)' new Point(m * 2' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' m * 2)                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Top)              {                  m *= 0.67;                  double x0 = m;                  double x1 = m + width;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness(m' m' 0' 0);                  points = new[]                      {                          new Point(0' 0)' new Point(m * 2' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' m * 2)                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Top)              {                  m *= 0.67;                  double x0 = m;                  double x1 = m + width;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness(m' m' 0' 0);                  points = new[]                      {                          new Point(0' 0)' new Point(m * 2' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' m * 2)                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Right && va == VerticalAlignment.Top)              {                  m *= 0.67;                  double x0 = 0;                  double x1 = width;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness(0' m' m' 0);                  points = new[]                      {                          new Point(x1 + m' 0)' new Point(x1' y0 + m)' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' y0)' new Point(x1 - m' y0)                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Bottom)              {                  m *= 0.67;                  double x0 = m;                  double x1 = m + width;                  double y0 = 0;                  double y1 = height;                  margin = new Thickness(m' 0' 0' m);                  points = new[]                      {                          new Point(0' y1 + m)' new Point(x0' y1 - m)' new Point(x0' y0)' new Point(x1' y0)'                          new Point(x1' y1)' new Point(x0 + m' y1)                      };              }
Magic Number,OxyPlot.Wpf,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Right && va == VerticalAlignment.Bottom)              {                  m *= 0.67;                  double x0 = 0;                  double x1 = width;                  double y0 = 0;                  double y1 = height;                  margin = new Thickness(0' 0' m' m);                  points = new[]                      {                          new Point(x1 + m' y1 + m)' new Point(x1 - m' y1)' new Point(x0' y1)' new Point(x0' y0)'                          new Point(x1' y0)' new Point(x1' y1 - m)                      };              }
Magic Number,OxyPlot.Wpf,XpsExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\XpsExporter.cs,XpsExporter,The following statement contains a magic number: this.Width = 600;
Magic Number,OxyPlot.Wpf,XpsExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\XpsExporter.cs,XpsExporter,The following statement contains a magic number: this.Height = 400;
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,CanvasRenderContext,The following statement contains a magic number: this.BalancedLineDrawingThicknessLimit = 3.5;
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawLineSegments,The following statement contains a magic number: for (int i = 0; i + 1 < points.Count; i += 2)              {                  if (path == null)                  {                      path = this.CreateAndAdd<Path>();                      this.SetStroke(path' stroke' thickness' lineJoin' dashArray' 0' aliased);                      pathGeometry = new PathGeometry();                  }                    var figure = new PathFigure { StartPoint = this.ToPoint(points[i]' aliased)' IsClosed = false };                  figure.Segments.Add(new LineSegment(this.ToPoint(points[i + 1]' aliased)' true) { IsSmoothJoin = false });                  pathGeometry.Figures.Add(figure);                    count++;                    // Must limit the number of figures' otherwise drawing errors...                  if (count > MaxFiguresPerGeometry || dashArray != null)                  {                      path.Data = pathGeometry;                      path = null;                      count = 0;                  }              }
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawText,The following statement contains a magic number: if (maxSize != null || halign != HorizontalAlignment.Left || valign != VerticalAlignment.Top)              {                  tb.Measure(new Size(1000' 1000));                  var size = tb.DesiredSize;                  if (maxSize != null)                  {                      if (size.Width > maxSize.Value.Width + 1e-3)                      {                          size.Width = Math.Max(maxSize.Value.Width' 0);                      }                        if (size.Height > maxSize.Value.Height + 1e-3)                      {                          size.Height = Math.Max(maxSize.Value.Height' 0);                      }                        tb.Width = size.Width;                      tb.Height = size.Height;                  }                    if (halign == HorizontalAlignment.Center)                  {                      dx = -size.Width / 2;                  }                    if (halign == HorizontalAlignment.Right)                  {                      dx = -size.Width;                  }                    if (valign == VerticalAlignment.Middle)                  {                      dy = -size.Height / 2;                  }                    if (valign == VerticalAlignment.Bottom)                  {                      dy = -size.Height;                  }              }
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawText,The following statement contains a magic number: if (maxSize != null || halign != HorizontalAlignment.Left || valign != VerticalAlignment.Top)              {                  tb.Measure(new Size(1000' 1000));                  var size = tb.DesiredSize;                  if (maxSize != null)                  {                      if (size.Width > maxSize.Value.Width + 1e-3)                      {                          size.Width = Math.Max(maxSize.Value.Width' 0);                      }                        if (size.Height > maxSize.Value.Height + 1e-3)                      {                          size.Height = Math.Max(maxSize.Value.Height' 0);                      }                        tb.Width = size.Width;                      tb.Height = size.Height;                  }                    if (halign == HorizontalAlignment.Center)                  {                      dx = -size.Width / 2;                  }                    if (halign == HorizontalAlignment.Right)                  {                      dx = -size.Width;                  }                    if (valign == VerticalAlignment.Middle)                  {                      dy = -size.Height / 2;                  }                    if (valign == VerticalAlignment.Bottom)                  {                      dy = -size.Height;                  }              }
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawText,The following statement contains a magic number: if (maxSize != null || halign != HorizontalAlignment.Left || valign != VerticalAlignment.Top)              {                  tb.Measure(new Size(1000' 1000));                  var size = tb.DesiredSize;                  if (maxSize != null)                  {                      if (size.Width > maxSize.Value.Width + 1e-3)                      {                          size.Width = Math.Max(maxSize.Value.Width' 0);                      }                        if (size.Height > maxSize.Value.Height + 1e-3)                      {                          size.Height = Math.Max(maxSize.Value.Height' 0);                      }                        tb.Width = size.Width;                      tb.Height = size.Height;                  }                    if (halign == HorizontalAlignment.Center)                  {                      dx = -size.Width / 2;                  }                    if (halign == HorizontalAlignment.Right)                  {                      dx = -size.Width;                  }                    if (valign == VerticalAlignment.Middle)                  {                      dy = -size.Height / 2;                  }                    if (valign == VerticalAlignment.Bottom)                  {                      dy = -size.Height;                  }              }
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawText,The following statement contains a magic number: if (maxSize != null || halign != HorizontalAlignment.Left || valign != VerticalAlignment.Top)              {                  tb.Measure(new Size(1000' 1000));                  var size = tb.DesiredSize;                  if (maxSize != null)                  {                      if (size.Width > maxSize.Value.Width + 1e-3)                      {                          size.Width = Math.Max(maxSize.Value.Width' 0);                      }                        if (size.Height > maxSize.Value.Height + 1e-3)                      {                          size.Height = Math.Max(maxSize.Value.Height' 0);                      }                        tb.Width = size.Width;                      tb.Height = size.Height;                  }                    if (halign == HorizontalAlignment.Center)                  {                      dx = -size.Width / 2;                  }                    if (halign == HorizontalAlignment.Right)                  {                      dx = -size.Width;                  }                    if (valign == VerticalAlignment.Middle)                  {                      dy = -size.Height / 2;                  }                    if (valign == VerticalAlignment.Bottom)                  {                      dy = -size.Height;                  }              }
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawText,The following statement contains a magic number: if (maxSize != null || halign != HorizontalAlignment.Left || valign != VerticalAlignment.Top)              {                  tb.Measure(new Size(1000' 1000));                  var size = tb.DesiredSize;                  if (maxSize != null)                  {                      if (size.Width > maxSize.Value.Width + 1e-3)                      {                          size.Width = Math.Max(maxSize.Value.Width' 0);                      }                        if (size.Height > maxSize.Value.Height + 1e-3)                      {                          size.Height = Math.Max(maxSize.Value.Height' 0);                      }                        tb.Width = size.Width;                      tb.Height = size.Height;                  }                    if (halign == HorizontalAlignment.Center)                  {                      dx = -size.Width / 2;                  }                    if (halign == HorizontalAlignment.Right)                  {                      dx = -size.Width;                  }                    if (valign == VerticalAlignment.Middle)                  {                      dy = -size.Height / 2;                  }                    if (valign == VerticalAlignment.Bottom)                  {                      dy = -size.Height;                  }              }
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawText,The following statement contains a magic number: if (maxSize != null || halign != HorizontalAlignment.Left || valign != VerticalAlignment.Top)              {                  tb.Measure(new Size(1000' 1000));                  var size = tb.DesiredSize;                  if (maxSize != null)                  {                      if (size.Width > maxSize.Value.Width + 1e-3)                      {                          size.Width = Math.Max(maxSize.Value.Width' 0);                      }                        if (size.Height > maxSize.Value.Height + 1e-3)                      {                          size.Height = Math.Max(maxSize.Value.Height' 0);                      }                        tb.Width = size.Width;                      tb.Height = size.Height;                  }                    if (halign == HorizontalAlignment.Center)                  {                      dx = -size.Width / 2;                  }                    if (halign == HorizontalAlignment.Right)                  {                      dx = -size.Width;                  }                    if (valign == VerticalAlignment.Middle)                  {                      dy = -size.Height / 2;                  }                    if (valign == VerticalAlignment.Bottom)                  {                      dy = -size.Height;                  }              }
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,MeasureText,The following statement contains a magic number: tb.Measure(new Size(1000' 1000));
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,MeasureText,The following statement contains a magic number: tb.Measure(new Size(1000' 1000));
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,MeasureTextSize,The following statement contains a magic number: return new OxySize(Math.Round(width * sizeInEm' 2)' Math.Round(lines * glyphTypeface.Height * sizeInEm' 2));
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,MeasureTextSize,The following statement contains a magic number: return new OxySize(Math.Round(width * sizeInEm' 2)' Math.Round(lines * glyphTypeface.Height * sizeInEm' 2));
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,DrawLineSegmentsByStreamGeometry,The following statement contains a magic number: for (int i = 0; i + 1 < points.Count; i += 2)              {                  if (streamGeometry == null)                  {                      streamGeometry = new StreamGeometry();                      streamGeometryContext = streamGeometry.Open();                  }                    streamGeometryContext.BeginFigure(this.ToPoint(points[i]' aliased)' false' false);                  streamGeometryContext.LineTo(this.ToPoint(points[i + 1]' aliased)' true' false);                    count++;                    // Must limit the number of figures' otherwise drawing errors...                  if (count > MaxFiguresPerGeometry || dashArray != null)                  {                      streamGeometryContext.Close();                      var path = this.CreateAndAdd<Path>();                      this.SetStroke(path' stroke' thickness' lineJoin' dashArray' 0' aliased);                      path.Data = streamGeometry;                      streamGeometry = null;                      count = 0;                  }              }
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,ToPixelAlignedPoint,The following statement contains a magic number: return new Point(0.5 + (int)pt.X' 0.5 + (int)pt.Y);
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,ToPixelAlignedPoint,The following statement contains a magic number: return new Point(0.5 + (int)pt.X' 0.5 + (int)pt.Y);
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,ToPixelAlignedRect,The following statement contains a magic number: double x = 0.5 + (int)r.Left;
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,ToPixelAlignedRect,The following statement contains a magic number: double y = 0.5 + (int)r.Top;
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,ToPixelAlignedRect,The following statement contains a magic number: double ri = 0.5 + (int)r.Right;
Magic Number,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,ToPixelAlignedRect,The following statement contains a magic number: double bo = 0.5 + (int)r.Bottom;
Missing Default,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,MeasureTextSize,The following switch statement is missing a default case: switch (ch)                  {                      case '\n':                          lines++;                          if (lineWidth > width)                          {                              width = lineWidth;                          }                            lineWidth = 0;                          continue;                      case '\t':                          continue;                  }
Missing Default,OxyPlot.Wpf,CanvasRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Wpf\CanvasRenderContext.cs,SetStroke,The following switch statement is missing a default case: switch (lineJoin)                  {                      case LineJoin.Round:                          shape.StrokeLineJoin = PenLineJoin.Round;                          break;                      case LineJoin.Bevel:                          shape.StrokeLineJoin = PenLineJoin.Bevel;                          break;                        // The default StrokeLineJoin is Miter                  }
