Implementation smell,Namespace,Class,File,Method,Description
Long Method,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The method has 120 lines of code.
Long Method,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The method has 129 lines of code.
Long Method,OxyPlot.Windows,ConverterExtensions,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Utilities\ConverterExtensions.cs,Convert,The method has 163 lines of code.
Complex Method,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawText,Cyclomatic complexity of the method is 12
Complex Method,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,UpdatePositionAndBorder,Cyclomatic complexity of the method is 17
Complex Method,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,Cyclomatic complexity of the method is 11
Long Parameter List,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawLine,The method has 6 parameters. Parameters: points' stroke' thickness' dashArray' lineJoin' aliased
Long Parameter List,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawLineSegments,The method has 6 parameters. Parameters: points' stroke' thickness' dashArray' lineJoin' aliased
Long Parameter List,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawPolygon,The method has 7 parameters. Parameters: points' fill' stroke' thickness' dashArray' lineJoin' aliased
Long Parameter List,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawPolygons,The method has 7 parameters. Parameters: polygons' fill' stroke' thickness' dashArray' lineJoin' aliased
Long Parameter List,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawText,The method has 10 parameters. Parameters: p' text' fill' fontFamily' fontSize' fontWeight' rotate' halign' valign' maxSize
Long Parameter List,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawImage,The method has 11 parameters. Parameters: source' srcX' srcY' srcWidth' srcHeight' destX' destY' destWidth' destHeight' opacity' interpolate
Long Parameter List,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,SetStroke,The method has 6 parameters. Parameters: shape' stroke' thickness' lineJoin' dashArray' aliased
Long Parameter List,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreateBorderGeometry,The method has 5 parameters. Parameters: ha' va' width' height' margin
Long Parameter List,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The method has 5 parameters. Parameters: ha' va' width' height' margin
Long Identifier,OxyPlot.Windows,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\PlotView.cs,,The length of the parameter DefaultTrackerTemplateProperty is 30.
Long Identifier,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,,The length of the parameter HorizontalLineVisibilityProperty is 32.
Long Identifier,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,,The length of the parameter VerticalLineVisibilityProperty is 30.
Long Statement,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawImage,The length of the statement  "            // RenderOptions.SetBitmapScalingMode(image' interpolate ? BitmapScalingMode.HighQuality : BitmapScalingMode.NearestNeighbor); " is 126.
Long Statement,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,ApplyClip,The length of the statement  "            image.Clip = new RectangleGeometry { Rect = new Rect(this.clipRect.X - x' this.clipRect.Y - y' this.clipRect.Width' this.clipRect.Height) }; " is 140.
Long Statement,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,ConvertToRandomAccessStream,The length of the statement  "            //https://stackoverflow.com/questions/16397509/how-to-convert-byte-array-to-inmemoryrandomaccessstream-or-irandomaccessstream-i " is 127.
Long Statement,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,OnApplyTemplate,The length of the statement  "                throw new InvalidOperationException(string.Format("The TrackerControl template must contain a content container with name +'{0}'"' PartContentcontainer)); " is 154.
Long Statement,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,OnApplyTemplate,The length of the statement  "                throw new InvalidOperationException(string.Format("The TrackerControl template must contain a Path with name +'{0}'"' PartPath)); " is 129.
Long Statement,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,OnApplyTemplate,The length of the statement  "                throw new InvalidOperationException(string.Format("The TrackerControl template must contain a ContentPresenter with name +'{0}'"' PartContent)); " is 144.
Complex Conditional,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawImage,The conditional expression  "destWidth <= 0 || destHeight <= 0 || srcWidth <= 0 || srcHeight <= 0"  is complex.
Complex Conditional,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawImage,The conditional expression  "srcX.Equals(0) && srcY.Equals(0) && srcWidth.Equals(bmp.PixelWidth) && srcHeight.Equals(bmp.PixelHeight)"  is complex.
Magic Number,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawEllipses,The following statement contains a magic number: foreach (var rect in rectangles)              {                  gg.Children.Add(                      new EllipseGeometry                      {                          Center = new Point(rect.Left + (rect.Width / 2)' rect.Top + (rect.Height / 2))'                          RadiusX = rect.Width / 2'                          RadiusY = rect.Height / 2                      });              }
Magic Number,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawEllipses,The following statement contains a magic number: foreach (var rect in rectangles)              {                  gg.Children.Add(                      new EllipseGeometry                      {                          Center = new Point(rect.Left + (rect.Width / 2)' rect.Top + (rect.Height / 2))'                          RadiusX = rect.Width / 2'                          RadiusY = rect.Height / 2                      });              }
Magic Number,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawEllipses,The following statement contains a magic number: foreach (var rect in rectangles)              {                  gg.Children.Add(                      new EllipseGeometry                      {                          Center = new Point(rect.Left + (rect.Width / 2)' rect.Top + (rect.Height / 2))'                          RadiusX = rect.Width / 2'                          RadiusY = rect.Height / 2                      });              }
Magic Number,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawEllipses,The following statement contains a magic number: foreach (var rect in rectangles)              {                  gg.Children.Add(                      new EllipseGeometry                      {                          Center = new Point(rect.Left + (rect.Width / 2)' rect.Top + (rect.Height / 2))'                          RadiusX = rect.Width / 2'                          RadiusY = rect.Height / 2                      });              }
Magic Number,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawLineSegments,The following statement contains a magic number: for (int i = 0; i + 1 < points.Count; i += 2)              {                  // if (points[i].Y==points[i+1].Y)                  // {                  // var line = new Line();                    // line.X1 = 0.5+(int)points[i].X;                  // line.X2 = 0.5+(int)points[i+1].X;                  // line.Y1 = 0.5+(int)points[i].Y;                  // line.Y2 = 0.5+(int)points[i+1].Y;                  // SetStroke(line' OxyColors.DarkRed' thickness' lineJoin' dashArray' aliased);                  // Add(line);                  // continue;                  // }                  var figure = new PathFigure { StartPoint = points[i].ToPoint(aliased)' IsClosed = false };                  figure.Segments.Add(new LineSegment { Point = points[i + 1].ToPoint(aliased) });                  pg.Figures.Add(figure);              }
Magic Number,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawText,The following statement contains a magic number: tb.Measure(new Size(1000' 1000));
Magic Number,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawText,The following statement contains a magic number: tb.Measure(new Size(1000' 1000));
Magic Number,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawText,The following statement contains a magic number: if (halign == OxyPlot.HorizontalAlignment.Center)              {                  dx = -size.Width / 2;              }
Magic Number,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,DrawText,The following statement contains a magic number: if (valign == OxyPlot.VerticalAlignment.Middle)              {                  dy = -size.Height / 2;              }
Magic Number,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,MeasureText,The following statement contains a magic number: tb.Measure(new Size(1000' 1000));
Magic Number,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,MeasureText,The following statement contains a magic number: tb.Measure(new Size(1000' 1000));
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: const double MarginLimit = 10;
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterHorizontally)              {                  if (this.Position.X - (contentWidth / 2) < MarginLimit)                  {                      ha = HorizontalAlignment.Left;                  }                    if (this.Position.X + (contentWidth / 2) > canvasWidth - MarginLimit)                  {                      ha = HorizontalAlignment.Right;                  }              }              else              {                  ha = this.Position.X < canvasWidth / 2 ? HorizontalAlignment.Left : HorizontalAlignment.Right;              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterHorizontally)              {                  if (this.Position.X - (contentWidth / 2) < MarginLimit)                  {                      ha = HorizontalAlignment.Left;                  }                    if (this.Position.X + (contentWidth / 2) > canvasWidth - MarginLimit)                  {                      ha = HorizontalAlignment.Right;                  }              }              else              {                  ha = this.Position.X < canvasWidth / 2 ? HorizontalAlignment.Left : HorizontalAlignment.Right;              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterHorizontally)              {                  if (this.Position.X - (contentWidth / 2) < MarginLimit)                  {                      ha = HorizontalAlignment.Left;                  }                    if (this.Position.X + (contentWidth / 2) > canvasWidth - MarginLimit)                  {                      ha = HorizontalAlignment.Right;                  }              }              else              {                  ha = this.Position.X < canvasWidth / 2 ? HorizontalAlignment.Left : HorizontalAlignment.Right;              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterVertically)              {                  if (this.Position.Y - (contentHeight / 2) < MarginLimit)                  {                      va = VerticalAlignment.Top;                  }                    if (ha == HorizontalAlignment.Center)                  {                      va = VerticalAlignment.Bottom;                      if (this.Position.Y - contentHeight < MarginLimit)                      {                          va = VerticalAlignment.Top;                      }                  }                    if (va == VerticalAlignment.Center && this.Position.Y + (contentHeight / 2) > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }                    if (va == VerticalAlignment.Top && this.Position.Y + contentHeight > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }              }              else              {                  va = this.Position.Y < canvasHeight / 2 ? VerticalAlignment.Top : VerticalAlignment.Bottom;              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterVertically)              {                  if (this.Position.Y - (contentHeight / 2) < MarginLimit)                  {                      va = VerticalAlignment.Top;                  }                    if (ha == HorizontalAlignment.Center)                  {                      va = VerticalAlignment.Bottom;                      if (this.Position.Y - contentHeight < MarginLimit)                      {                          va = VerticalAlignment.Top;                      }                  }                    if (va == VerticalAlignment.Center && this.Position.Y + (contentHeight / 2) > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }                    if (va == VerticalAlignment.Top && this.Position.Y + contentHeight > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }              }              else              {                  va = this.Position.Y < canvasHeight / 2 ? VerticalAlignment.Top : VerticalAlignment.Bottom;              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: if (this.CanCenterVertically)              {                  if (this.Position.Y - (contentHeight / 2) < MarginLimit)                  {                      va = VerticalAlignment.Top;                  }                    if (ha == HorizontalAlignment.Center)                  {                      va = VerticalAlignment.Bottom;                      if (this.Position.Y - contentHeight < MarginLimit)                      {                          va = VerticalAlignment.Top;                      }                  }                    if (va == VerticalAlignment.Center && this.Position.Y + (contentHeight / 2) > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }                    if (va == VerticalAlignment.Top && this.Position.Y + contentHeight > canvasHeight - MarginLimit)                  {                      va = VerticalAlignment.Bottom;                  }              }              else              {                  va = this.Position.Y < canvasHeight / 2 ? VerticalAlignment.Top : VerticalAlignment.Bottom;              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: double dx = ha == HorizontalAlignment.Center ? -0.5 : ha == HorizontalAlignment.Left ? 0 : -1;
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,UpdatePositionAndBorder,The following statement contains a magic number: double dy = va == VerticalAlignment.Center ? -0.5 : va == VerticalAlignment.Top ? 0 : -1;
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Bottom)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = 0;                  double y1 = height;                  margin = new Thickness { Bottom = m };                  points = new[]                      {                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x2 + (m / 2)' y1)'                          new Point(x2' y1 + m)' new Point(x2 - (m / 2)' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Bottom)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = 0;                  double y1 = height;                  margin = new Thickness { Bottom = m };                  points = new[]                      {                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x2 + (m / 2)' y1)'                          new Point(x2' y1 + m)' new Point(x2 - (m / 2)' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Bottom)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = 0;                  double y1 = height;                  margin = new Thickness { Bottom = m };                  points = new[]                      {                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x2 + (m / 2)' y1)'                          new Point(x2' y1 + m)' new Point(x2 - (m / 2)' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Top)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness { Top = m };                  points = new[]                      {                          new Point(x0' y0)' new Point(x2 - (m / 2)' y0)' new Point(x2' 0)' new Point(x2 + (m / 2)' y0)'                          new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Top)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness { Top = m };                  points = new[]                      {                          new Point(x0' y0)' new Point(x2 - (m / 2)' y0)' new Point(x2' 0)' new Point(x2 + (m / 2)' y0)'                          new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Center && va == VerticalAlignment.Top)              {                  double x0 = 0;                  double x1 = width;                  double x2 = (x0 + x1) / 2;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness { Top = m };                  points = new[]                      {                          new Point(x0' y0)' new Point(x2 - (m / 2)' y0)' new Point(x2' 0)' new Point(x2 + (m / 2)' y0)'                          new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Center)              {                  double x0 = m;                  double x1 = m + width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness { Left = m };                  points = new[]                      {                          new Point(0' y2)' new Point(x0' y2 - (m / 2))' new Point(x0' y0)' new Point(x1' y0)'                          new Point(x1' y1)' new Point(x0' y1)' new Point(x0' y2 + (m / 2))                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Center)              {                  double x0 = m;                  double x1 = m + width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness { Left = m };                  points = new[]                      {                          new Point(0' y2)' new Point(x0' y2 - (m / 2))' new Point(x0' y0)' new Point(x1' y0)'                          new Point(x1' y1)' new Point(x0' y1)' new Point(x0' y2 + (m / 2))                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Center)              {                  double x0 = m;                  double x1 = m + width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness { Left = m };                  points = new[]                      {                          new Point(0' y2)' new Point(x0' y2 - (m / 2))' new Point(x0' y0)' new Point(x1' y0)'                          new Point(x1' y1)' new Point(x0' y1)' new Point(x0' y2 + (m / 2))                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Right && va == VerticalAlignment.Center)              {                  double x0 = 0;                  double x1 = width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness { Right = m };                  points = new[]                      {                          new Point(x1 + m' y2)' new Point(x1' y2 + (m / 2))' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y2 - (m / 2))                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Right && va == VerticalAlignment.Center)              {                  double x0 = 0;                  double x1 = width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness { Right = m };                  points = new[]                      {                          new Point(x1 + m' y2)' new Point(x1' y2 + (m / 2))' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y2 - (m / 2))                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Right && va == VerticalAlignment.Center)              {                  double x0 = 0;                  double x1 = width;                  double y0 = 0;                  double y1 = height;                  double y2 = (y0 + y1) / 2;                  margin = new Thickness { Right = m };                  points = new[]                      {                          new Point(x1 + m' y2)' new Point(x1' y2 + (m / 2))' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' y0)' new Point(x1' y0)' new Point(x1' y2 - (m / 2))                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Top)              {                  m *= 0.67;                  double x0 = m;                  double x1 = m + width;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness { Left = m' Top = m };                  points = new[]                      {                          new Point(0' 0)' new Point(m * 2' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' m * 2)                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Top)              {                  m *= 0.67;                  double x0 = m;                  double x1 = m + width;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness { Left = m' Top = m };                  points = new[]                      {                          new Point(0' 0)' new Point(m * 2' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' m * 2)                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Top)              {                  m *= 0.67;                  double x0 = m;                  double x1 = m + width;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness { Left = m' Top = m };                  points = new[]                      {                          new Point(0' 0)' new Point(m * 2' y0)' new Point(x1' y0)' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' m * 2)                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Right && va == VerticalAlignment.Top)              {                  m *= 0.67;                  double x0 = 0;                  double x1 = width;                  double y0 = m;                  double y1 = m + height;                  margin = new Thickness { Top = m' Right = m };                  points = new[]                      {                          new Point(x1 + m' 0)' new Point(x1' y0 + m)' new Point(x1' y1)' new Point(x0' y1)'                          new Point(x0' y0)' new Point(x1 - m' y0)                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Left && va == VerticalAlignment.Bottom)              {                  m *= 0.67;                  double x0 = m;                  double x1 = m + width;                  double y0 = 0;                  double y1 = height;                  margin = new Thickness { Left = m' Bottom = m };                  points = new[]                      {                          new Point(0' y1 + m)' new Point(x0' y1 - m)' new Point(x0' y0)' new Point(x1' y0)'                          new Point(x1' y1)' new Point(x0 + m' y1)                      };              }
Magic Number,OxyPlot.Windows,TrackerControl,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Tracker\TrackerControl.cs,CreatePointerBorderGeometry,The following statement contains a magic number: if (ha == HorizontalAlignment.Right && va == VerticalAlignment.Bottom)              {                  m *= 0.67;                  double x0 = 0;                  double x1 = width;                  double y0 = 0;                  double y1 = height;                  margin = new Thickness { Right = m' Bottom = m };                  points = new[]                      {                          new Point(x1 + m' y1 + m)' new Point(x1 - m' y1)' new Point(x0' y1)' new Point(x0' y0)'                          new Point(x1' y0)' new Point(x1' y1 - m)                      };              }
Magic Number,OxyPlot.Windows,ConverterExtensions,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Utilities\ConverterExtensions.cs,ToPoint,The following statement contains a magic number: if (aliased)              {                  return new Point(0.5 + (int)pt.X' 0.5 + (int)pt.Y);              }
Magic Number,OxyPlot.Windows,ConverterExtensions,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Utilities\ConverterExtensions.cs,ToPoint,The following statement contains a magic number: if (aliased)              {                  return new Point(0.5 + (int)pt.X' 0.5 + (int)pt.Y);              }
Magic Number,OxyPlot.Windows,ConverterExtensions,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Utilities\ConverterExtensions.cs,ToRect,The following statement contains a magic number: if (aliased)              {                  double x = 0.5 + (int)r.Left;                  double y = 0.5 + (int)r.Top;                  double ri = 0.5 + (int)r.Right;                  double bo = 0.5 + (int)r.Bottom;                  return new Rect(x' y' ri - x' bo - y);              }
Magic Number,OxyPlot.Windows,ConverterExtensions,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Utilities\ConverterExtensions.cs,ToRect,The following statement contains a magic number: if (aliased)              {                  double x = 0.5 + (int)r.Left;                  double y = 0.5 + (int)r.Top;                  double ri = 0.5 + (int)r.Right;                  double bo = 0.5 + (int)r.Bottom;                  return new Rect(x' y' ri - x' bo - y);              }
Magic Number,OxyPlot.Windows,ConverterExtensions,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Utilities\ConverterExtensions.cs,ToRect,The following statement contains a magic number: if (aliased)              {                  double x = 0.5 + (int)r.Left;                  double y = 0.5 + (int)r.Top;                  double ri = 0.5 + (int)r.Right;                  double bo = 0.5 + (int)r.Bottom;                  return new Rect(x' y' ri - x' bo - y);              }
Magic Number,OxyPlot.Windows,ConverterExtensions,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Utilities\ConverterExtensions.cs,ToRect,The following statement contains a magic number: if (aliased)              {                  double x = 0.5 + (int)r.Left;                  double y = 0.5 + (int)r.Top;                  double ri = 0.5 + (int)r.Right;                  double bo = 0.5 + (int)r.Bottom;                  return new Rect(x' y' ri - x' bo - y);              }
Magic Number,OxyPlot.Windows,ConverterExtensions,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\Utilities\ConverterExtensions.cs,ToMouseDownEventArgs,The following statement contains a magic number: if (MouseButtonHelper.IsDoubleClick(relativeTo' point.Position))              {                  clickCount = 2;              }
Missing Default,OxyPlot.Windows,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\PlotView.cs,SetCursorType,The following switch statement is missing a default case: switch (cursor)              {                  case CursorType.Default:                      type = CoreCursorType.Arrow;                      break;                  case CursorType.Pan:                      type = CoreCursorType.Hand;                      break;                  case CursorType.ZoomHorizontal:                      type = CoreCursorType.SizeWestEast;                      break;                  case CursorType.ZoomVertical:                      type = CoreCursorType.SizeNorthSouth;                      break;                  case CursorType.ZoomRectangle:                      type = CoreCursorType.SizeNorthwestSoutheast;                      break;              }
Missing Default,OxyPlot.Windows,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\PlotView.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case VirtualKey.Control:                      this.isControlPressed = true;                      break;                  case VirtualKey.Shift:                      this.isShiftPressed = true;                      break;                  case VirtualKey.Menu:                      this.isAltPressed = true;                      break;                  case VirtualKey.LeftWindows:                  case VirtualKey.RightWindows:                      this.isWindowsPressed = true;                      break;              }
Missing Default,OxyPlot.Windows,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\PlotView.cs,OnKeyUp,The following switch statement is missing a default case: switch (e.Key)              {                  case VirtualKey.Control:                      this.isControlPressed = false;                      break;                  case VirtualKey.Shift:                      this.isShiftPressed = false;                      break;                  case VirtualKey.Menu:                      this.isAltPressed = false;                      break;                  case VirtualKey.LeftWindows:                  case VirtualKey.RightWindows:                      this.isWindowsPressed = false;                      break;              }
Missing Default,OxyPlot.Windows,RenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.Windows\RenderContext.cs,SetStroke,The following switch statement is missing a default case: switch (lineJoin)                  {                      case LineJoin.Round:                          shape.StrokeLineJoin = PenLineJoin.Round;                          break;                      case LineJoin.Bevel:                          shape.StrokeLineJoin = PenLineJoin.Bevel;                          break;                        // The default StrokeLineJoin is Miter                  }
