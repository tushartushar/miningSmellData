Implementation smell,Namespace,Class,File,Method,Description
Long Method,OxyPlot.WindowsForms,ConverterExtensions,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\ConverterExtensions.cs,Convert,The method has 163 lines of code.
Long Parameter List,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawLine,The method has 6 parameters. Parameters: points' stroke' thickness' dashArray' lineJoin' aliased
Long Parameter List,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawPolygon,The method has 7 parameters. Parameters: points' fill' stroke' thickness' dashArray' lineJoin' aliased
Long Parameter List,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawText,The method has 10 parameters. Parameters: p' text' fill' fontFamily' fontSize' fontWeight' rotate' halign' valign' maxSize
Long Parameter List,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawImage,The method has 11 parameters. Parameters: source' srcX' srcY' srcWidth' srcHeight' x' y' w' h' opacity' interpolate
Long Parameter List,OxyPlot.WindowsForms,PngExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\PngExporter.cs,Export,The method has 5 parameters. Parameters: model' fileName' width' height' background
Long Statement,OxyPlot.WindowsForms,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\PlotView.cs,ShowTracker,The length of the statement  "                this.trackerLabel = new Label { Parent = this' BackColor = Color.LightSkyBlue' AutoSize = true' Padding = new Padding(5) }; " is 123.
Long Statement,OxyPlot.WindowsForms,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\PlotView.cs,ShowZoomRectangle,The length of the statement  "            this.zoomRectangle = new Rectangle((int)rectangle.Left' (int)rectangle.Top' (int)rectangle.Width' (int)rectangle.Height); " is 121.
Long Statement,OxyPlot.WindowsForms,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\PlotView.cs,OnPaint,The length of the statement  "                        "OxyPlot paint exception: " + paintException.Message' font' Brushes.Red' this.Width * 0.5f' this.Height * 0.5f' new StringFormat { Alignment = StringAlignment.Center' LineAlignment = StringAlignment.Center }); " is 209.
Long Statement,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawEllipse,The length of the statement  "                this.g.FillEllipse(this.GetCachedBrush(fill)' (float)rect.Left' (float)rect.Top' (float)rect.Width' (float)rect.Height); " is 120.
Long Statement,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawImage,The length of the statement  "                this.g.DrawImage(image' destRect' (float)srcX - 0.5f' (float)srcY - 0.5f' (float)srcWidth' (float)srcHeight' GraphicsUnit.Pixel' ia); " is 133.
Magic Number,OxyPlot.WindowsForms,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\PlotView.cs,ShowTracker,The following statement contains a magic number: if (this.trackerLabel == null)              {                  this.trackerLabel = new Label { Parent = this' BackColor = Color.LightSkyBlue' AutoSize = true' Padding = new Padding(5) };              }
Magic Number,OxyPlot.WindowsForms,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\PlotView.cs,ShowTracker,The following statement contains a magic number: this.trackerLabel.Left = (int)data.Position.X - this.trackerLabel.Width / 2;
Magic Number,OxyPlot.WindowsForms,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\PlotView.cs,OnPaint,The following statement contains a magic number: try              {                  lock (this.invalidateLock)                  {                      if (this.isModelInvalidated)                      {                          if (this.model != null)                          {                              ((IPlotModel)this.model).Update(this.updateDataFlag);                              this.updateDataFlag = false;                          }                            this.isModelInvalidated = false;                      }                  }                    lock (this.renderingLock)                  {                      this.renderContext.SetGraphicsTarget(e.Graphics);                        if (this.model != null)                      {                          if (!this.model.Background.IsUndefined())                          {                              using (var brush = new SolidBrush(this.model.Background.ToColor()))                              {                                  e.Graphics.FillRectangle(brush' e.ClipRectangle);                              }                          }                            ((IPlotModel)this.model).Render(this.renderContext' this.Width' this.Height);                      }                        if (this.zoomRectangle != Rectangle.Empty)                      {                          using (var zoomBrush = new SolidBrush(Color.FromArgb(0x40' 0xFF' 0xFF' 0x00)))                          using (var zoomPen = new Pen(Color.Black))                          {                              zoomPen.DashPattern = new float[] { 3' 1 };                              e.Graphics.FillRectangle(zoomBrush' this.zoomRectangle);                              e.Graphics.DrawRectangle(zoomPen' this.zoomRectangle);                          }                      }                  }              }              catch (Exception paintException)              {                  var trace = new StackTrace(paintException);                  Debug.WriteLine(paintException);                  Debug.WriteLine(trace);                  using (var font = new Font("Arial"' 10))                  {                      e.Graphics.ResetTransform();                      e.Graphics.DrawString(                          "OxyPlot paint exception: " + paintException.Message' font' Brushes.Red' this.Width * 0.5f' this.Height * 0.5f' new StringFormat { Alignment = StringAlignment.Center' LineAlignment = StringAlignment.Center });                  }              }
Magic Number,OxyPlot.WindowsForms,PlotView,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\PlotView.cs,OnPaint,The following statement contains a magic number: try              {                  lock (this.invalidateLock)                  {                      if (this.isModelInvalidated)                      {                          if (this.model != null)                          {                              ((IPlotModel)this.model).Update(this.updateDataFlag);                              this.updateDataFlag = false;                          }                            this.isModelInvalidated = false;                      }                  }                    lock (this.renderingLock)                  {                      this.renderContext.SetGraphicsTarget(e.Graphics);                        if (this.model != null)                      {                          if (!this.model.Background.IsUndefined())                          {                              using (var brush = new SolidBrush(this.model.Background.ToColor()))                              {                                  e.Graphics.FillRectangle(brush' e.ClipRectangle);                              }                          }                            ((IPlotModel)this.model).Render(this.renderContext' this.Width' this.Height);                      }                        if (this.zoomRectangle != Rectangle.Empty)                      {                          using (var zoomBrush = new SolidBrush(Color.FromArgb(0x40' 0xFF' 0xFF' 0x00)))                          using (var zoomPen = new Pen(Color.Black))                          {                              zoomPen.DashPattern = new float[] { 3' 1 };                              e.Graphics.FillRectangle(zoomBrush' this.zoomRectangle);                              e.Graphics.DrawRectangle(zoomPen' this.zoomRectangle);                          }                      }                  }              }              catch (Exception paintException)              {                  var trace = new StackTrace(paintException);                  Debug.WriteLine(paintException);                  Debug.WriteLine(trace);                  using (var font = new Font("Arial"' 10))                  {                      e.Graphics.ResetTransform();                      e.Graphics.DrawString(                          "OxyPlot paint exception: " + paintException.Message' font' Brushes.Red' this.Width * 0.5f' this.Height * 0.5f' new StringFormat { Alignment = StringAlignment.Center' LineAlignment = StringAlignment.Center });                  }              }
Magic Number,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawLine,The following statement contains a magic number: if (stroke.IsInvisible() || thickness <= 0 || points.Count < 2)              {                  return;              }
Magic Number,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawPolygon,The following statement contains a magic number: if (points.Count < 2)              {                  return;              }
Magic Number,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawText,The following statement contains a magic number: var fontStyle = fontWeight < 700 ? FontStyle.Regular : FontStyle.Bold;
Magic Number,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawText,The following statement contains a magic number: using (var font = CreateFont(fontFamily' fontSize' fontStyle))              {                  this.stringFormat.Alignment = StringAlignment.Near;                  this.stringFormat.LineAlignment = StringAlignment.Near;                  var size = this.g.MeasureString(text' font' int.MaxValue' this.stringFormat);                  if (maxSize != null)                  {                      if (size.Width > maxSize.Value.Width)                      {                          size.Width = (float)maxSize.Value.Width;                      }                        if (size.Height > maxSize.Value.Height)                      {                          size.Height = (float)maxSize.Value.Height;                      }                  }                    float dx = 0;                  if (halign == HorizontalAlignment.Center)                  {                      dx = -size.Width / 2;                  }                    if (halign == HorizontalAlignment.Right)                  {                      dx = -size.Width;                  }                    float dy = 0;                  this.stringFormat.LineAlignment = StringAlignment.Near;                  if (valign == VerticalAlignment.Middle)                  {                      dy = -size.Height / 2;                  }                    if (valign == VerticalAlignment.Bottom)                  {                      dy = -size.Height;                  }                    var graphicsState = this.g.Save();                    this.g.TranslateTransform((float)p.X' (float)p.Y);                                    var layoutRectangle = new RectangleF(0' 0' size.Width' size.Height);                  if (Math.Abs(rotate) > double.Epsilon)                  {                      this.g.RotateTransform((float)rotate);                                            layoutRectangle.Height += (float)(fontSize / 18.0);                  }                    this.g.TranslateTransform(dx' dy);                    this.g.DrawString(text' font' fill.ToBrush()' layoutRectangle' this.stringFormat);                    this.g.Restore(graphicsState);              }
Magic Number,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawText,The following statement contains a magic number: using (var font = CreateFont(fontFamily' fontSize' fontStyle))              {                  this.stringFormat.Alignment = StringAlignment.Near;                  this.stringFormat.LineAlignment = StringAlignment.Near;                  var size = this.g.MeasureString(text' font' int.MaxValue' this.stringFormat);                  if (maxSize != null)                  {                      if (size.Width > maxSize.Value.Width)                      {                          size.Width = (float)maxSize.Value.Width;                      }                        if (size.Height > maxSize.Value.Height)                      {                          size.Height = (float)maxSize.Value.Height;                      }                  }                    float dx = 0;                  if (halign == HorizontalAlignment.Center)                  {                      dx = -size.Width / 2;                  }                    if (halign == HorizontalAlignment.Right)                  {                      dx = -size.Width;                  }                    float dy = 0;                  this.stringFormat.LineAlignment = StringAlignment.Near;                  if (valign == VerticalAlignment.Middle)                  {                      dy = -size.Height / 2;                  }                    if (valign == VerticalAlignment.Bottom)                  {                      dy = -size.Height;                  }                    var graphicsState = this.g.Save();                    this.g.TranslateTransform((float)p.X' (float)p.Y);                                    var layoutRectangle = new RectangleF(0' 0' size.Width' size.Height);                  if (Math.Abs(rotate) > double.Epsilon)                  {                      this.g.RotateTransform((float)rotate);                                            layoutRectangle.Height += (float)(fontSize / 18.0);                  }                    this.g.TranslateTransform(dx' dy);                    this.g.DrawString(text' font' fill.ToBrush()' layoutRectangle' this.stringFormat);                    this.g.Restore(graphicsState);              }
Magic Number,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawText,The following statement contains a magic number: using (var font = CreateFont(fontFamily' fontSize' fontStyle))              {                  this.stringFormat.Alignment = StringAlignment.Near;                  this.stringFormat.LineAlignment = StringAlignment.Near;                  var size = this.g.MeasureString(text' font' int.MaxValue' this.stringFormat);                  if (maxSize != null)                  {                      if (size.Width > maxSize.Value.Width)                      {                          size.Width = (float)maxSize.Value.Width;                      }                        if (size.Height > maxSize.Value.Height)                      {                          size.Height = (float)maxSize.Value.Height;                      }                  }                    float dx = 0;                  if (halign == HorizontalAlignment.Center)                  {                      dx = -size.Width / 2;                  }                    if (halign == HorizontalAlignment.Right)                  {                      dx = -size.Width;                  }                    float dy = 0;                  this.stringFormat.LineAlignment = StringAlignment.Near;                  if (valign == VerticalAlignment.Middle)                  {                      dy = -size.Height / 2;                  }                    if (valign == VerticalAlignment.Bottom)                  {                      dy = -size.Height;                  }                    var graphicsState = this.g.Save();                    this.g.TranslateTransform((float)p.X' (float)p.Y);                                    var layoutRectangle = new RectangleF(0' 0' size.Width' size.Height);                  if (Math.Abs(rotate) > double.Epsilon)                  {                      this.g.RotateTransform((float)rotate);                                            layoutRectangle.Height += (float)(fontSize / 18.0);                  }                    this.g.TranslateTransform(dx' dy);                    this.g.DrawString(text' font' fill.ToBrush()' layoutRectangle' this.stringFormat);                    this.g.Restore(graphicsState);              }
Magic Number,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,MeasureText,The following statement contains a magic number: var fontStyle = fontWeight < 700 ? FontStyle.Regular : FontStyle.Bold;
Magic Number,OxyPlot.WindowsForms,PngExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\PngExporter.cs,PngExporter,The following statement contains a magic number: this.Width = 700;
Magic Number,OxyPlot.WindowsForms,PngExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\PngExporter.cs,PngExporter,The following statement contains a magic number: this.Height = 400;
Magic Number,OxyPlot.WindowsForms,PngExporter,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\PngExporter.cs,PngExporter,The following statement contains a magic number: this.Resolution = 96;
Missing Default,OxyPlot.WindowsForms,ConverterExtensions,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\ConverterExtensions.cs,Convert,The following switch statement is missing a default case: switch (button)              {                  case MouseButtons.Left:                      return OxyMouseButton.Left;                  case MouseButtons.Middle:                      return OxyMouseButton.Middle;                  case MouseButtons.Right:                      return OxyMouseButton.Right;                  case MouseButtons.XButton1:                      return OxyMouseButton.XButton1;                  case MouseButtons.XButton2:                      return OxyMouseButton.XButton2;              }
Missing Default,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,DrawPolygon,The following switch statement is missing a default case: switch (lineJoin)                  {                      case OxyPlot.LineJoin.Round:                          pen.LineJoin = System.Drawing.Drawing2D.LineJoin.Round;                          break;                      case OxyPlot.LineJoin.Bevel:                          pen.LineJoin = System.Drawing.Drawing2D.LineJoin.Bevel;                          break;                        // The default LineJoin is Miter                  }
Missing Default,OxyPlot.WindowsForms,GraphicsRenderContext,C:\repos\oxyplot_oxyplot\Source\OxyPlot.WindowsForms\GraphicsRenderContext.cs,CreatePen,The following switch statement is missing a default case: switch (lineJoin)              {                  case OxyPlot.LineJoin.Round:                      pen.LineJoin = System.Drawing.Drawing2D.LineJoin.Round;                      break;                  case OxyPlot.LineJoin.Bevel:                      pen.LineJoin = System.Drawing.Drawing2D.LineJoin.Bevel;                      break;                  //// The default LineJoin is Miter              }
