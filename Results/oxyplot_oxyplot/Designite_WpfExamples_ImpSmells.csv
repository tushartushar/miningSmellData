Implementation smell,Namespace,Class,File,Method,Description
Long Method,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The method has 130 lines of code.
Long Method,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The method has 129 lines of code.
Complex Method,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,Cyclomatic complexity of the method is 16
Complex Method,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,Cyclomatic complexity of the method is 14
Complex Method,WorldStatisticsDemo,Country,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\Model\Country.cs,SortStatistics,Cyclomatic complexity of the method is 12
Long Parameter List,WpfExamples,NativeMethods,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\ScreenCapture.cs,BitBlt,The method has 9 parameters. Parameters: hdcDest' xDest' yDest' wDest' hDest' hdcSource' xSrc' ySrc' rop
Long Parameter List,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLineSeries,The method has 5 parameters. Parameters: f' x0' x1' dx' title
Long Parameter List,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionSeries,The method has 5 parameters. Parameters: x0' x1' mean' variance' n
Long Parameter List,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateParametricPlot,The method has 8 parameters. Parameters: fx' fy' t0' t1' dt' title' subtitle' seriesTitle
Long Parameter List,WorldStatisticsDemo,Country,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\Model\Country.cs,Lerp,The method has 5 parameters. Parameters: xj' x0' x1' v0' v1
Long Parameter List,ContourDemo,Example,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,Example,The method has 12 parameters. Parameters: title' minx' maxx' dx' miny' maxy' dy' minz' maxz' dz' f' formatString
Long Parameter List,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The method has 6 parameters. Parameters: date' latitude' longitude' sunrise' tzi' zenith
Long Statement,WpfExamples,ScreenCapture,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\ScreenCapture.cs,Capture,The length of the statement  "            NativeMethods.BitBlt(hDest' 0' 0' width' height' hSrce' left' top' CopyPixelOperation.SourceCopy | CopyPixelOperation.CaptureBlt); " is 130.
Long Statement,WpfExamples,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\MainWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.ListBox)(target)).MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ListBoxMouseDoubleClick); " is 143.
Long Statement,AlignedAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AlignedAxesDemo\MainWindow.xaml.cs,CreatePlotModel,The length of the statement  "            model.Series.Add(new FunctionSeries(x => Math.Sin(x * Math.PI * 4) * Math.Sin(x * Math.PI * 4) * Math.Sqrt(x) * max' 0' 1' 1000)); " is 130.
Long Statement,AnimationsDemo,AnimationSettingsControl,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Controls\AnimationSettingsControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WpfExamples;component/examples/animationsdemo/controls/animationsettingscontrol." + " is 129.
Long Statement,AnimationsDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WpfExamples;component/examples/animationsdemo/mainwindow.xaml"' System.UriKind.Relative); " is 135.
Long Statement,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The length of the statement  "            main.AddParagraph("The plot is rendered to a .png file and included in the report as an image. Zoom in to see the difference."); " is 128.
Long Statement,MathBlockDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MathBlockDemo\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WpfExamples;component/examples/mathblockdemo/mainwindow.xaml"' System.UriKind.Relative); " is 134.
Long Statement,OxyPlot.Wpf,MathBlock,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MathBlockDemo\MathBlock.cs,MeasureOverride,The length of the statement  "            return new Size(size.Width + this.Padding.Left + this.Padding.Right' size.Height + this.Padding.Top + this.Padding.Bottom); " is 123.
Long Statement,MemoryTest,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MemoryTest\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WpfExamples;component/examples/memorytest/mainwindow.xaml"' System.UriKind.Relative); " is 131.
Long Statement,WorldStatisticsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\MainViewModel.cs,UpdatePlot,The length of the statement  "            var pm = new PlotModel { Title = this.year.ToString()' Subtitle = "data from gapminder.org"' LegendPosition = LegendPosition.RightBottom }; " is 139.
Long Statement,WorldStatisticsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\MainViewModel.cs,UpdatePlot,The length of the statement  "            pm.Axes.Add(new LinearAxis { Position = AxisPosition.Left' Minimum = 19' Maximum = 87' Title = "Life expectancy (years)" }); " is 124.
Long Statement,WorldStatisticsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\MainViewModel.cs,UpdatePlot,The length of the statement  "            pm.Axes.Add(new LogarithmicAxis { Position = AxisPosition.Bottom' Title = "Income per person (GDP/capita' PPP$ inflation-adjusted)"' Minimum = 200' Maximum = 90000 }); " is 167.
Long Statement,OverlayDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\OverlayDemo\MainWindow.xaml.cs,HandleTransformChanged,The length of the statement  "            var plotArea = new Rect(this.model.PlotArea.Left' this.model.PlotArea.Top' this.model.PlotArea.Width' this.model.PlotArea.Height); " is 130.
Long Statement,RefreshDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WpfExamples;component/examples/refreshdemo/mainwindow.xaml"' System.UriKind.Relative); " is 132.
Long Statement,UserControlDemo,MainWindow2,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\UserControlDemo\MainWindow2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WpfExamples;component/examples/usercontroldemo/mainwindow2.xaml"' System.UriKind.Relative); " is 137.
Long Statement,UserControlDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\UserControlDemo\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WpfExamples;component/examples/usercontroldemo/mainwindow.xaml"' System.UriKind.Relative); " is 136.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Magic Number,WpfExamples,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\MainWindow.xaml.cs,ListBoxMouseDoubleClick,The following statement contains a magic number: if (example != null)              {                  var window = example.Create();                  window.Icon = this.Icon;                  window.Show();                    window.KeyDown += (s' args) =>                  {                      if (args.Key == Key.F12)                      {                          CreateThumbnail(window' 120' Path.Combine(@"..\..\Images\"' example.ThumbnailFileName));                          MessageBox.Show(window' "Demo image updated.");                          e.Handled = true;                      }                  };              }
Magic Number,AlignedAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AlignedAxesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Model0 = CreatePlotModel(0' 10);
Magic Number,AlignedAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AlignedAxesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Model1 = CreatePlotModel(0' 1e8);
Magic Number,AlignedAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AlignedAxesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Model0.PlotMargins = this.Model1.PlotMargins = new OxyThickness(70' 40' 20' 20);
Magic Number,AlignedAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AlignedAxesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Model0.PlotMargins = this.Model1.PlotMargins = new OxyThickness(70' 40' 20' 20);
Magic Number,AlignedAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AlignedAxesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Model0.PlotMargins = this.Model1.PlotMargins = new OxyThickness(70' 40' 20' 20);
Magic Number,AlignedAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AlignedAxesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Model0.PlotMargins = this.Model1.PlotMargins = new OxyThickness(70' 40' 20' 20);
Magic Number,AlignedAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AlignedAxesDemo\MainWindow.xaml.cs,CreatePlotModel,The following statement contains a magic number: model.Series.Add(new FunctionSeries(x => Math.Sin(x * Math.PI * 4) * Math.Sin(x * Math.PI * 4) * Math.Sqrt(x) * max' 0' 1' 1000));
Magic Number,AlignedAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AlignedAxesDemo\MainWindow.xaml.cs,CreatePlotModel,The following statement contains a magic number: model.Series.Add(new FunctionSeries(x => Math.Sin(x * Math.PI * 4) * Math.Sin(x * Math.PI * 4) * Math.Sqrt(x) * max' 0' 1' 1000));
Magic Number,AlignedAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AlignedAxesDemo\MainWindow.xaml.cs,CreatePlotModel,The following statement contains a magic number: model.Series.Add(new FunctionSeries(x => Math.Sin(x * Math.PI * 4) * Math.Sin(x * Math.PI * 4) * Math.Sqrt(x) * max' 0' 1' 1000));
Magic Number,AnimationsDemo,SineEase,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\EasingFunctions\SineEase.cs,Ease,The following statement contains a magic number: return 1.0 - Math.Sin(Math.PI / 2.0 * (1.0 - value));
Magic Number,AnimationsDemo,BounceEase,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\EasingFunctions\BounceEase.cs,BounceEase,The following statement contains a magic number: this.Bounces = 3;
Magic Number,AnimationsDemo,BounceEase,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\EasingFunctions\BounceEase.cs,Ease,The following statement contains a magic number: if (num1 < 1.0 || num1 == 1d)                  num1 = 1001.0 / 1000.0;
Magic Number,AnimationsDemo,BounceEase,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\EasingFunctions\BounceEase.cs,Ease,The following statement contains a magic number: if (num1 < 1.0 || num1 == 1d)                  num1 = 1001.0 / 1000.0;
Magic Number,AnimationsDemo,BounceEase,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\EasingFunctions\BounceEase.cs,Ease,The following statement contains a magic number: double num4 = (1.0 - num2) / num3 + num2 * 0.5;
Magic Number,AnimationsDemo,BounceEase,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\EasingFunctions\BounceEase.cs,Ease,The following statement contains a magic number: double num7 = (num5 + num6) * 0.5;
Magic Number,AnimationsDemo,BackEase,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\EasingFunctions\BackEase.cs,Ease,The following statement contains a magic number: return Math.Pow(value' 3.0) - value * num * Math.Sin(Math.PI * value);
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimationExtensions,The following statement contains a magic number: DefaultAnimationDuration = 750;
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimationExtensions,The following statement contains a magic number: DefaultAnimationFrameDuration = 10;
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,InsertDelayAnimationFrame,The following statement contains a magic number: if (animationFrames.Count < 2)              {                  return;              }
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The following statement contains a magic number: var horizontalDuration = duration.TotalMilliseconds / 100 * settings.HorizontalPercentage;
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The following statement contains a magic number: var verticalDuration = duration.TotalMilliseconds / 100 * settings.VerticalPercentage;
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The following statement contains a magic number: for (var i = 0; i < animationFrameCount; i++)              {                  var animationFrame = new AnimationFrame                  {                      Duration = animationFrameDuration                  };                    var currentTime = animationFrameDurationInMs * i;                  var percentage = i * 100d / animationFrameCount;                    var horizontalPercentage = currentTime * 100d / horizontalDuration;                  if (horizontalPercentage > 100d)                  {                      horizontalPercentage = 100d;                  }                    var currentDeltaX = deltaX / 100d * horizontalPercentage;                  var currentX = minX + currentDeltaX;                    // Get the last visible point. It should not be based on the index (can be really different)' but on the X position                  // since we want to draw a smooth animation                  var lastVisibleHorizontalPoint = 0;                  for (int j = 0; j < points.Count; j++)                  {                      if (points[j].FinalX > currentX)                      {                          break;                      }                        lastVisibleHorizontalPoint = j;                  }                    for (var j = 0; j < points.Count; j++)                  {                      var point = points[j];                        var isVisible = true;                      var y = point.FinalY;                      var x = point.FinalX;                        var nextPointIndex = lastVisibleHorizontalPoint + 1;                        if (j > nextPointIndex)                      {                          isVisible = false;                      }                        if (j >= nextPointIndex)                      {                          // Calculate the position the y line is in currently (based on x1 and x2)                          var previousPoint = points[lastVisibleHorizontalPoint];                          var nextPoint = points[nextPointIndex];                            var previousX = previousPoint.FinalX;                          var nextX = nextPoint.FinalX;                            var totalDeltaX = nextX - previousX;                          var subDeltaX = currentX - previousX;                            var subPercentage = (subDeltaX * 100) / totalDeltaX;                            var previousY = previousPoint.FinalY;                          var nextY = nextPoint.FinalY;                          var totalDeltaY = nextY - previousY;                            var subDeltaY = totalDeltaY / 100 * subPercentage;                            y = previousY + subDeltaY;                          x = currentX;                      }                        // Calculate possible ease functions                      if (j < nextPointIndex)                      {                          // We know how long an y animation takes. We only have to calculate if this start time of this x animation                          // is longer than verticalDuration ago                          var localDeltaX = point.FinalX - minX;                          var localPercentageX = localDeltaX * 100d / deltaX;                          var startTime = horizontalDuration / 100 * localPercentageX;                          var endTime = startTime + verticalDuration;                          if (endTime > currentTime)                          {                              var timeDeltaTotal = endTime - startTime;                              var timeDeltaCurrent = currentTime - startTime;                              var easePercentage = timeDeltaCurrent * 100d / timeDeltaTotal;                                // This bar is part of the current animation' calculate the Y relative to 30 % of the time based on the current index                              // Calculate the % that offset is based on totalTimeDelta                                // Calculate point to animate from                              var maxY = point.FinalY;                              var minY = minimumValue.Value;                              var deltaY = maxY - minY;                                // We need to ease against percentage (between 0 and 1)                              var ease = easingFunction.Ease(easePercentage / 100);                              var currentDeltaY = deltaY * ease;                                y = minY + currentDeltaY;                          }                      }                        animationFrame.AnimationPoints.Add(new AnimationPoint                      {                          X = x'                          Y = y'                          IsVisible = isVisible                      });                  }                    animationFrames.Add(animationFrame);              }
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The following statement contains a magic number: for (var i = 0; i < animationFrameCount; i++)              {                  var animationFrame = new AnimationFrame                  {                      Duration = animationFrameDuration                  };                    var currentTime = animationFrameDurationInMs * i;                  var percentage = i * 100d / animationFrameCount;                    var horizontalPercentage = currentTime * 100d / horizontalDuration;                  if (horizontalPercentage > 100d)                  {                      horizontalPercentage = 100d;                  }                    var currentDeltaX = deltaX / 100d * horizontalPercentage;                  var currentX = minX + currentDeltaX;                    // Get the last visible point. It should not be based on the index (can be really different)' but on the X position                  // since we want to draw a smooth animation                  var lastVisibleHorizontalPoint = 0;                  for (int j = 0; j < points.Count; j++)                  {                      if (points[j].FinalX > currentX)                      {                          break;                      }                        lastVisibleHorizontalPoint = j;                  }                    for (var j = 0; j < points.Count; j++)                  {                      var point = points[j];                        var isVisible = true;                      var y = point.FinalY;                      var x = point.FinalX;                        var nextPointIndex = lastVisibleHorizontalPoint + 1;                        if (j > nextPointIndex)                      {                          isVisible = false;                      }                        if (j >= nextPointIndex)                      {                          // Calculate the position the y line is in currently (based on x1 and x2)                          var previousPoint = points[lastVisibleHorizontalPoint];                          var nextPoint = points[nextPointIndex];                            var previousX = previousPoint.FinalX;                          var nextX = nextPoint.FinalX;                            var totalDeltaX = nextX - previousX;                          var subDeltaX = currentX - previousX;                            var subPercentage = (subDeltaX * 100) / totalDeltaX;                            var previousY = previousPoint.FinalY;                          var nextY = nextPoint.FinalY;                          var totalDeltaY = nextY - previousY;                            var subDeltaY = totalDeltaY / 100 * subPercentage;                            y = previousY + subDeltaY;                          x = currentX;                      }                        // Calculate possible ease functions                      if (j < nextPointIndex)                      {                          // We know how long an y animation takes. We only have to calculate if this start time of this x animation                          // is longer than verticalDuration ago                          var localDeltaX = point.FinalX - minX;                          var localPercentageX = localDeltaX * 100d / deltaX;                          var startTime = horizontalDuration / 100 * localPercentageX;                          var endTime = startTime + verticalDuration;                          if (endTime > currentTime)                          {                              var timeDeltaTotal = endTime - startTime;                              var timeDeltaCurrent = currentTime - startTime;                              var easePercentage = timeDeltaCurrent * 100d / timeDeltaTotal;                                // This bar is part of the current animation' calculate the Y relative to 30 % of the time based on the current index                              // Calculate the % that offset is based on totalTimeDelta                                // Calculate point to animate from                              var maxY = point.FinalY;                              var minY = minimumValue.Value;                              var deltaY = maxY - minY;                                // We need to ease against percentage (between 0 and 1)                              var ease = easingFunction.Ease(easePercentage / 100);                              var currentDeltaY = deltaY * ease;                                y = minY + currentDeltaY;                          }                      }                        animationFrame.AnimationPoints.Add(new AnimationPoint                      {                          X = x'                          Y = y'                          IsVisible = isVisible                      });                  }                    animationFrames.Add(animationFrame);              }
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The following statement contains a magic number: for (var i = 0; i < animationFrameCount; i++)              {                  var animationFrame = new AnimationFrame                  {                      Duration = animationFrameDuration                  };                    var currentTime = animationFrameDurationInMs * i;                  var percentage = i * 100d / animationFrameCount;                    var horizontalPercentage = currentTime * 100d / horizontalDuration;                  if (horizontalPercentage > 100d)                  {                      horizontalPercentage = 100d;                  }                    var currentDeltaX = deltaX / 100d * horizontalPercentage;                  var currentX = minX + currentDeltaX;                    // Get the last visible point. It should not be based on the index (can be really different)' but on the X position                  // since we want to draw a smooth animation                  var lastVisibleHorizontalPoint = 0;                  for (int j = 0; j < points.Count; j++)                  {                      if (points[j].FinalX > currentX)                      {                          break;                      }                        lastVisibleHorizontalPoint = j;                  }                    for (var j = 0; j < points.Count; j++)                  {                      var point = points[j];                        var isVisible = true;                      var y = point.FinalY;                      var x = point.FinalX;                        var nextPointIndex = lastVisibleHorizontalPoint + 1;                        if (j > nextPointIndex)                      {                          isVisible = false;                      }                        if (j >= nextPointIndex)                      {                          // Calculate the position the y line is in currently (based on x1 and x2)                          var previousPoint = points[lastVisibleHorizontalPoint];                          var nextPoint = points[nextPointIndex];                            var previousX = previousPoint.FinalX;                          var nextX = nextPoint.FinalX;                            var totalDeltaX = nextX - previousX;                          var subDeltaX = currentX - previousX;                            var subPercentage = (subDeltaX * 100) / totalDeltaX;                            var previousY = previousPoint.FinalY;                          var nextY = nextPoint.FinalY;                          var totalDeltaY = nextY - previousY;                            var subDeltaY = totalDeltaY / 100 * subPercentage;                            y = previousY + subDeltaY;                          x = currentX;                      }                        // Calculate possible ease functions                      if (j < nextPointIndex)                      {                          // We know how long an y animation takes. We only have to calculate if this start time of this x animation                          // is longer than verticalDuration ago                          var localDeltaX = point.FinalX - minX;                          var localPercentageX = localDeltaX * 100d / deltaX;                          var startTime = horizontalDuration / 100 * localPercentageX;                          var endTime = startTime + verticalDuration;                          if (endTime > currentTime)                          {                              var timeDeltaTotal = endTime - startTime;                              var timeDeltaCurrent = currentTime - startTime;                              var easePercentage = timeDeltaCurrent * 100d / timeDeltaTotal;                                // This bar is part of the current animation' calculate the Y relative to 30 % of the time based on the current index                              // Calculate the % that offset is based on totalTimeDelta                                // Calculate point to animate from                              var maxY = point.FinalY;                              var minY = minimumValue.Value;                              var deltaY = maxY - minY;                                // We need to ease against percentage (between 0 and 1)                              var ease = easingFunction.Ease(easePercentage / 100);                              var currentDeltaY = deltaY * ease;                                y = minY + currentDeltaY;                          }                      }                        animationFrame.AnimationPoints.Add(new AnimationPoint                      {                          X = x'                          Y = y'                          IsVisible = isVisible                      });                  }                    animationFrames.Add(animationFrame);              }
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The following statement contains a magic number: for (var i = 0; i < animationFrameCount; i++)              {                  var animationFrame = new AnimationFrame                  {                      Duration = animationFrameDuration                  };                    var currentTime = animationFrameDurationInMs * i;                  var percentage = i * 100d / animationFrameCount;                    var horizontalPercentage = currentTime * 100d / horizontalDuration;                  if (horizontalPercentage > 100d)                  {                      horizontalPercentage = 100d;                  }                    var currentDeltaX = deltaX / 100d * horizontalPercentage;                  var currentX = minX + currentDeltaX;                    // Get the last visible point. It should not be based on the index (can be really different)' but on the X position                  // since we want to draw a smooth animation                  var lastVisibleHorizontalPoint = 0;                  for (int j = 0; j < points.Count; j++)                  {                      if (points[j].FinalX > currentX)                      {                          break;                      }                        lastVisibleHorizontalPoint = j;                  }                    for (var j = 0; j < points.Count; j++)                  {                      var point = points[j];                        var isVisible = true;                      var y = point.FinalY;                      var x = point.FinalX;                        var nextPointIndex = lastVisibleHorizontalPoint + 1;                        if (j > nextPointIndex)                      {                          isVisible = false;                      }                        if (j >= nextPointIndex)                      {                          // Calculate the position the y line is in currently (based on x1 and x2)                          var previousPoint = points[lastVisibleHorizontalPoint];                          var nextPoint = points[nextPointIndex];                            var previousX = previousPoint.FinalX;                          var nextX = nextPoint.FinalX;                            var totalDeltaX = nextX - previousX;                          var subDeltaX = currentX - previousX;                            var subPercentage = (subDeltaX * 100) / totalDeltaX;                            var previousY = previousPoint.FinalY;                          var nextY = nextPoint.FinalY;                          var totalDeltaY = nextY - previousY;                            var subDeltaY = totalDeltaY / 100 * subPercentage;                            y = previousY + subDeltaY;                          x = currentX;                      }                        // Calculate possible ease functions                      if (j < nextPointIndex)                      {                          // We know how long an y animation takes. We only have to calculate if this start time of this x animation                          // is longer than verticalDuration ago                          var localDeltaX = point.FinalX - minX;                          var localPercentageX = localDeltaX * 100d / deltaX;                          var startTime = horizontalDuration / 100 * localPercentageX;                          var endTime = startTime + verticalDuration;                          if (endTime > currentTime)                          {                              var timeDeltaTotal = endTime - startTime;                              var timeDeltaCurrent = currentTime - startTime;                              var easePercentage = timeDeltaCurrent * 100d / timeDeltaTotal;                                // This bar is part of the current animation' calculate the Y relative to 30 % of the time based on the current index                              // Calculate the % that offset is based on totalTimeDelta                                // Calculate point to animate from                              var maxY = point.FinalY;                              var minY = minimumValue.Value;                              var deltaY = maxY - minY;                                // We need to ease against percentage (between 0 and 1)                              var ease = easingFunction.Ease(easePercentage / 100);                              var currentDeltaY = deltaY * ease;                                y = minY + currentDeltaY;                          }                      }                        animationFrame.AnimationPoints.Add(new AnimationPoint                      {                          X = x'                          Y = y'                          IsVisible = isVisible                      });                  }                    animationFrames.Add(animationFrame);              }
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The following statement contains a magic number: var horizontalDuration = duration.TotalMilliseconds / 100 * settings.HorizontalPercentage;
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The following statement contains a magic number: var verticalDuration = duration.TotalMilliseconds / 100 * settings.VerticalPercentage;
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The following statement contains a magic number: for (var i = 0; i < animationFrameCount; i++)              {                  var animationFrame = new AnimationFrame                  {                      Duration = animationFrameDuration                  };                    var currentTime = animationFrameDurationInMs * i;                  var percentage = i * 100d / animationFrameCount;                    var horizontalPercentage = currentTime * 100d / horizontalDuration;                  if (horizontalPercentage > 100d)                  {                      horizontalPercentage = 100d;                  }                    var currentDeltaX = deltaX / 100d * horizontalPercentage;                  var currentX = minX + currentDeltaX;                    // Get the last visible point. It should not be based on the index (can be really different)' but on the X position                  // since we want to draw a smooth animation                  var lastVisibleHorizontalPoint = 0;                  for (int j = 0; j < points.Count; j++)                  {                      var x = points[j].FinalX;                      if (x > currentX)                      {                          break;                      }                        lastVisibleHorizontalPoint = j;                  }                    for (var j = 0; j < points.Count; j++)                  {                      var point = points[j];                        var isVisible = false;                      var x = point.FinalX;                      var y = 0d;                        if (j <= lastVisibleHorizontalPoint)                      {                          isVisible = true;                          y = point.FinalY;                            // We know how long an y animation takes. We only have to calculate if this start time of this x animation                          // is longer than verticalDuration ago                          var localDeltaX = point.FinalX - minX;                          var localPercentageX = localDeltaX * 100d / deltaX;                          var startTime = horizontalDuration / 100 * localPercentageX;                          var endTime = startTime + verticalDuration;                            if (endTime > currentTime)                          {                              var timeDeltaTotal = endTime - startTime;                              var timeDeltaCurrent = currentTime - startTime;                              var subPercentage = timeDeltaCurrent * 100d / timeDeltaTotal;                                // This bar is part of the current animation' calculate the Y relative to 30 % of the time based on the current index                              // Calculate the % that offset is based on totalTimeDelta                                // Calculate point to animate from                              var maxY = point.FinalY;                              var minY = minimumValue.Value;                              var deltaY = maxY - minY;                                // We need to ease against percentage (between 0 and 1)                              var ease = easingFunction.Ease(subPercentage / 100);                              var currentDeltaY = deltaY * ease;                                y = minY + currentDeltaY;                          }                      }                        animationFrame.AnimationPoints.Add(new AnimationPoint                      {                          IsVisible = isVisible'                          X = x'                          Y = y                      });                  }                    animationFrames.Add(animationFrame);              }
Magic Number,AnimationsDemo,AnimationExtensions,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Extensions\AnimationExtensions.cs,AnimateSeriesAsync,The following statement contains a magic number: for (var i = 0; i < animationFrameCount; i++)              {                  var animationFrame = new AnimationFrame                  {                      Duration = animationFrameDuration                  };                    var currentTime = animationFrameDurationInMs * i;                  var percentage = i * 100d / animationFrameCount;                    var horizontalPercentage = currentTime * 100d / horizontalDuration;                  if (horizontalPercentage > 100d)                  {                      horizontalPercentage = 100d;                  }                    var currentDeltaX = deltaX / 100d * horizontalPercentage;                  var currentX = minX + currentDeltaX;                    // Get the last visible point. It should not be based on the index (can be really different)' but on the X position                  // since we want to draw a smooth animation                  var lastVisibleHorizontalPoint = 0;                  for (int j = 0; j < points.Count; j++)                  {                      var x = points[j].FinalX;                      if (x > currentX)                      {                          break;                      }                        lastVisibleHorizontalPoint = j;                  }                    for (var j = 0; j < points.Count; j++)                  {                      var point = points[j];                        var isVisible = false;                      var x = point.FinalX;                      var y = 0d;                        if (j <= lastVisibleHorizontalPoint)                      {                          isVisible = true;                          y = point.FinalY;                            // We know how long an y animation takes. We only have to calculate if this start time of this x animation                          // is longer than verticalDuration ago                          var localDeltaX = point.FinalX - minX;                          var localPercentageX = localDeltaX * 100d / deltaX;                          var startTime = horizontalDuration / 100 * localPercentageX;                          var endTime = startTime + verticalDuration;                            if (endTime > currentTime)                          {                              var timeDeltaTotal = endTime - startTime;                              var timeDeltaCurrent = currentTime - startTime;                              var subPercentage = timeDeltaCurrent * 100d / timeDeltaTotal;                                // This bar is part of the current animation' calculate the Y relative to 30 % of the time based on the current index                              // Calculate the % that offset is based on totalTimeDelta                                // Calculate point to animate from                              var maxY = point.FinalY;                              var minY = minimumValue.Value;                              var deltaY = maxY - minY;                                // We need to ease against percentage (between 0 and 1)                              var ease = easingFunction.Ease(subPercentage / 100);                              var currentDeltaY = deltaY * ease;                                y = minY + currentDeltaY;                          }                      }                        animationFrame.AnimationPoints.Add(new AnimationPoint                      {                          IsVisible = isVisible'                          X = x'                          Y = y                      });                  }                    animationFrames.Add(animationFrame);              }
Magic Number,AnimationsDemo,AnimationSettings,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Models\AnimationSettings.cs,AnimationSettings,The following statement contains a magic number: this.HorizontalPercentage = 70;
Magic Number,AnimationsDemo,AnimationSettings,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Models\AnimationSettings.cs,AnimationSettings,The following statement contains a magic number: this.VerticalPercentage = 30;
Magic Number,AnimationsDemo,AnimationViewModelBase,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AnimationViewModelBase.cs,AnimationViewModelBase,The following statement contains a magic number: this.AnimationDuration = 1000;
Magic Number,AnimationsDemo,AnimationViewModelBase,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AnimationViewModelBase.cs,AnimationViewModelBase,The following statement contains a magic number: this.HorizontalPercentage = 70;
Magic Number,AnimationsDemo,AnimationViewModelBase,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AnimationViewModelBase.cs,AnimationViewModelBase,The following statement contains a magic number: this.VerticalPercentage = 30;
Magic Number,AnimationsDemo,AreaSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AreaSeriesViewModel.cs,AreaSeriesViewModel,The following statement contains a magic number: var random = new Random(31);
Magic Number,AnimationsDemo,AreaSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AreaSeriesViewModel.cs,AreaSeriesViewModel,The following statement contains a magic number: var dateTime = DateTime.Today.Add(TimeSpan.FromHours(9));
Magic Number,AnimationsDemo,AreaSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AreaSeriesViewModel.cs,AreaSeriesViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,AnimationsDemo,AreaSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AreaSeriesViewModel.cs,AreaSeriesViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,AnimationsDemo,AreaSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AreaSeriesViewModel.cs,AreaSeriesViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,AnimationsDemo,AreaSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AreaSeriesViewModel.cs,AreaSeriesViewModel,The following statement contains a magic number: var series = new AreaSeries              {                  Title = "P & L"'                  ItemsSource = pnls'                  DataFieldX = "Time"'                  DataFieldY = "Value"'                  Color = OxyColor.Parse("#4CAF50")'                  Fill = OxyColor.Parse("#454CAF50")'                  MarkerSize = 3'                  MarkerFill = OxyColor.Parse("#FFFFFFFF")'                  MarkerStroke = OxyColor.Parse("#4CAF50")'                  MarkerStrokeThickness = 1.5'                  MarkerType = MarkerType.Circle'                  StrokeThickness = 1'              };
Magic Number,AnimationsDemo,AreaSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AreaSeriesViewModel.cs,AreaSeriesViewModel,The following statement contains a magic number: var series = new AreaSeries              {                  Title = "P & L"'                  ItemsSource = pnls'                  DataFieldX = "Time"'                  DataFieldY = "Value"'                  Color = OxyColor.Parse("#4CAF50")'                  Fill = OxyColor.Parse("#454CAF50")'                  MarkerSize = 3'                  MarkerFill = OxyColor.Parse("#FFFFFFFF")'                  MarkerStroke = OxyColor.Parse("#4CAF50")'                  MarkerStrokeThickness = 1.5'                  MarkerType = MarkerType.Circle'                  StrokeThickness = 1'              };
Magic Number,AnimationsDemo,AreaSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AreaSeriesViewModel.cs,AreaSeriesViewModel,The following statement contains a magic number: var dateTimeAxis = new DateTimeAxis              {                  Position = AxisPosition.Bottom'                  IntervalType = DateTimeIntervalType.Hours'                  IntervalLength = 50              };
Magic Number,AnimationsDemo,AreaSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\AreaSeriesViewModel.cs,AreaSeriesViewModel,The following statement contains a magic number: var margin = (maximum - minimum) * 0.05;
Magic Number,AnimationsDemo,LineSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LineSeriesViewModel.cs,LineSeriesViewModel,The following statement contains a magic number: var random = new Random(31);
Magic Number,AnimationsDemo,LineSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LineSeriesViewModel.cs,LineSeriesViewModel,The following statement contains a magic number: var dateTime = DateTime.Today.Add(TimeSpan.FromHours(9));
Magic Number,AnimationsDemo,LineSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LineSeriesViewModel.cs,LineSeriesViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,AnimationsDemo,LineSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LineSeriesViewModel.cs,LineSeriesViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,AnimationsDemo,LineSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LineSeriesViewModel.cs,LineSeriesViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,AnimationsDemo,LineSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LineSeriesViewModel.cs,LineSeriesViewModel,The following statement contains a magic number: var series = new LineSeries              {                  Title = "P & L"'                  ItemsSource = pnls'                  DataFieldX = "Time"'                  DataFieldY = "Value"'                  Color = OxyColor.Parse("#4CAF50")'                  MarkerSize = 3'                  MarkerFill = OxyColor.Parse("#FFFFFFFF")'                  MarkerStroke = OxyColor.Parse("#4CAF50")'                  MarkerStrokeThickness = 1.5'                  MarkerType = MarkerType.Circle'                  StrokeThickness = 1'              };
Magic Number,AnimationsDemo,LineSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LineSeriesViewModel.cs,LineSeriesViewModel,The following statement contains a magic number: var series = new LineSeries              {                  Title = "P & L"'                  ItemsSource = pnls'                  DataFieldX = "Time"'                  DataFieldY = "Value"'                  Color = OxyColor.Parse("#4CAF50")'                  MarkerSize = 3'                  MarkerFill = OxyColor.Parse("#FFFFFFFF")'                  MarkerStroke = OxyColor.Parse("#4CAF50")'                  MarkerStrokeThickness = 1.5'                  MarkerType = MarkerType.Circle'                  StrokeThickness = 1'              };
Magic Number,AnimationsDemo,LineSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LineSeriesViewModel.cs,LineSeriesViewModel,The following statement contains a magic number: var dateTimeAxis = new DateTimeAxis              {                  Position = AxisPosition.Bottom'                  IntervalType = DateTimeIntervalType.Hours'                  IntervalLength = 50              };
Magic Number,AnimationsDemo,LineSeriesViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LineSeriesViewModel.cs,LineSeriesViewModel,The following statement contains a magic number: var margin = (maximum - minimum) * 0.05;
Magic Number,AnimationsDemo,LinearBarViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LinearBarViewModel.cs,LinearBarViewModel,The following statement contains a magic number: var random = new Random(31);
Magic Number,AnimationsDemo,LinearBarViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LinearBarViewModel.cs,LinearBarViewModel,The following statement contains a magic number: var dateTime = DateTime.Today.Add(TimeSpan.FromHours(9));
Magic Number,AnimationsDemo,LinearBarViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LinearBarViewModel.cs,LinearBarViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,AnimationsDemo,LinearBarViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LinearBarViewModel.cs,LinearBarViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,AnimationsDemo,LinearBarViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LinearBarViewModel.cs,LinearBarViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,AnimationsDemo,LinearBarViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LinearBarViewModel.cs,LinearBarViewModel,The following statement contains a magic number: var series = new LinearBarSeries              {                  Title = "P & L"'                  ItemsSource = pnls'                  DataFieldX = "Time"'                  DataFieldY = "Value"'                  FillColor = OxyColor.Parse("#454CAF50")'                  StrokeColor = OxyColor.Parse("#4CAF50")'                  StrokeThickness = 1'                  BarWidth = 5              };
Magic Number,AnimationsDemo,LinearBarViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LinearBarViewModel.cs,LinearBarViewModel,The following statement contains a magic number: var dateTimeAxis = new DateTimeAxis              {                  Position = AxisPosition.Bottom'                  IntervalType = DateTimeIntervalType.Hours'                  IntervalLength = 50              };
Magic Number,AnimationsDemo,LinearBarViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\ViewModels\LinearBarViewModel.cs,LinearBarViewModel,The following statement contains a magic number: var margin = (maximum - minimum) * 0.05;
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series1.Points.Add(new DataPoint(10' 18));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series1.Points.Add(new DataPoint(10' 18));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series1.Points.Add(new DataPoint(20' 12));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series1.Points.Add(new DataPoint(20' 12));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series1.Points.Add(new DataPoint(30' 8));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series1.Points.Add(new DataPoint(30' 8));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series1.Points.Add(new DataPoint(40' 15));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series1.Points.Add(new DataPoint(40' 15));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series2.Points.Add(new DataPoint(0' 4));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series2.Points.Add(new DataPoint(10' 12));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series2.Points.Add(new DataPoint(10' 12));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series2.Points.Add(new DataPoint(20' 16));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series2.Points.Add(new DataPoint(20' 16));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series2.Points.Add(new DataPoint(30' 25));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series2.Points.Add(new DataPoint(30' 25));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series2.Points.Add(new DataPoint(40' 5));
Magic Number,ControllerDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ControllerDemo\MainViewModel.cs,CreatePlotModel,The following statement contains a magic number: series2.Points.Add(new DataPoint(40' 5));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following statement contains a magic number: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateKochCurve,The following statement contains a magic number: model.Axes.Add(new LinearAxis { Position = AxisPosition.Left' MinimumPadding = 0.1' MaximumPadding = 0.1 });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateKochCurve,The following statement contains a magic number: model.Axes.Add(new LinearAxis { Position = AxisPosition.Left' MinimumPadding = 0.1' MaximumPadding = 0.1 });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateKochCurve,The following statement contains a magic number: model.Axes.Add(new LinearAxis { Position = AxisPosition.Bottom' MinimumPadding = 0.1' MaximumPadding = 0.1 });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateKochCurve,The following statement contains a magic number: model.Axes.Add(new LinearAxis { Position = AxisPosition.Bottom' MinimumPadding = 0.1' MaximumPadding = 0.1 });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateKochSnowflake,The following statement contains a magic number: var data = new[]                             {                                 new DataPoint(-1' 0)'                                 new DataPoint(1' 0)'                                 new DataPoint(0' Math.Sqrt(3))' new DataPoint(-1' 0) };
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateZigZagCurve,The following statement contains a magic number: model.Axes.Add(new LinearAxis { Position = AxisPosition.Left' MinimumPadding = 0.1' MaximumPadding = 0.1 });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateZigZagCurve,The following statement contains a magic number: model.Axes.Add(new LinearAxis { Position = AxisPosition.Left' MinimumPadding = 0.1' MaximumPadding = 0.1 });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateZigZagCurve,The following statement contains a magic number: model.Axes.Add(new LinearAxis { Position = AxisPosition.Bottom' MinimumPadding = 0.1' MaximumPadding = 0.1 });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateZigZagCurve,The following statement contains a magic number: model.Axes.Add(new LinearAxis { Position = AxisPosition.Bottom' MinimumPadding = 0.1' MaximumPadding = 0.1 });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateZigZagCurve,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  double x = 1.0 * i / (n - 1);                  double y = i % 2 == 0 ? 0 : 1;                  ls.Points.Add(new DataPoint(x' y));              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateSineModel,The following statement contains a magic number: var ls = CreateLineSeries(Math.Sin' 0' 10' stepSize' "sin(x)");
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateSineModel,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Title = "Y"'                  Position = AxisPosition.Left'                  MaximumPadding = 0.3'                  MinimumPadding = 0.3'                  MajorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateSineModel,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Title = "Y"'                  Position = AxisPosition.Left'                  MaximumPadding = 0.3'                  MinimumPadding = 0.3'                  MajorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Left'                  Minimum = -0.05'                  Maximum = 1.05'                  MajorStep = 0.2'                  MinorStep = 0.05'                  TickStyle = TickStyle.Inside              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Left'                  Minimum = -0.05'                  Maximum = 1.05'                  MajorStep = 0.2'                  MinorStep = 0.05'                  TickStyle = TickStyle.Inside              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Left'                  Minimum = -0.05'                  Maximum = 1.05'                  MajorStep = 0.2'                  MinorStep = 0.05'                  TickStyle = TickStyle.Inside              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Left'                  Minimum = -0.05'                  Maximum = 1.05'                  MajorStep = 0.2'                  MinorStep = 0.05'                  TickStyle = TickStyle.Inside              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Bottom'                  Minimum = -5.25'                  Maximum = 5.25'                  MajorStep = 1'                  MinorStep = 0.25'                  TickStyle = TickStyle.Inside              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Bottom'                  Minimum = -5.25'                  Maximum = 5.25'                  MajorStep = 1'                  MinorStep = 0.25'                  TickStyle = TickStyle.Inside              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Bottom'                  Minimum = -5.25'                  Maximum = 5.25'                  MajorStep = 1'                  MinorStep = 0.25'                  TickStyle = TickStyle.Inside              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' 0' 0.2));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' 0' 0.2));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' 0' 0.2));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' 0' 1));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' 0' 1));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' 0' 5));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' 0' 5));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' 0' 5));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' -2' 0.5));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' -2' 0.5));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' -2' 0.5));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionModel,The following statement contains a magic number: plot.Series.Add(CreateNormalDistributionSeries(-5' 5' -2' 0.5));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionSeries,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  double x = x0 + (x1 - x0) * i / (n - 1);                  double f = 1.0 / Math.Sqrt(2 * Math.PI * variance) * Math.Exp(-(x - mean) * (x - mean) / 2 / variance);                  ls.Points.Add(new DataPoint(x' f));              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateNormalDistributionSeries,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  double x = x0 + (x1 - x0) * i / (n - 1);                  double f = 1.0 / Math.Sqrt(2 * Math.PI * variance) * Math.Exp(-(x - mean) * (x - mean) / 2 / variance);                  ls.Points.Add(new DataPoint(x' f));              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateSquareWave,The following statement contains a magic number: var ls = new LineSeries              {                  Title = "sin(x)+sin(3x)/3+sin(5x)/5+...+sin(" + (2 * n - 1) + ")/" + (2 * n - 1)              };
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateSquareWave,The following statement contains a magic number: var ls = new LineSeries              {                  Title = "sin(x)+sin(3x)/3+sin(5x)/5+...+sin(" + (2 * n - 1) + ")/" + (2 * n - 1)              };
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateSquareWave,The following statement contains a magic number: for (double x = -10; x < 10; x += 0.0001)              {                  double y = 0;                  for (int i = 0; i < n; i++)                  {                      int j = i * 2 + 1;                      y += Math.Sin(j * x) / j;                  }                  ls.Points.Add(new DataPoint(x' y));              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateSquareWave,The following statement contains a magic number: for (double x = -10; x < 10; x += 0.0001)              {                  double y = 0;                  for (int i = 0; i < n; i++)                  {                      int j = i * 2 + 1;                      y += Math.Sin(j * x) / j;                  }                  ls.Points.Add(new DataPoint(x' y));              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateSquareWave,The following statement contains a magic number: for (double x = -10; x < 10; x += 0.0001)              {                  double y = 0;                  for (int i = 0; i < n; i++)                  {                      int j = i * 2 + 1;                      y += Math.Sin(j * x) / j;                  }                  ls.Points.Add(new DataPoint(x' y));              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateSquareWave,The following statement contains a magic number: for (double x = -10; x < 10; x += 0.0001)              {                  double y = 0;                  for (int i = 0; i < n; i++)                  {                      int j = i * 2 + 1;                      y += Math.Sin(j * x) / j;                  }                  ls.Points.Add(new DataPoint(x' y));              }
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateSquareWave,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Left'                  Minimum = -4'                  Maximum = 4              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateSquareWave,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Left'                  Minimum = -4'                  Maximum = 4              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "y=x"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "y=x"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "y=x"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "y=x²"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "y=x²"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "y=x²"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "y=x³"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "y=x³"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "y=x³"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Left'                  Minimum = 0.1'                  Maximum = 100'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Left'                  Minimum = 0.1'                  Maximum = 100'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Bottom'                  Minimum = 0.1'                  Maximum = 100'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLinPlot,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Bottom'                  Minimum = 0.1'                  Maximum = 100'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "y=x"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "y=x"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "y=x"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "y=x²"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "y=x²"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "y=x²"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "y=x³"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "y=x³"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "y=x³"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Bottom'                  Minimum = 0.1'                  Maximum = 100'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Bottom'                  Minimum = 0.1'                  Maximum = 100'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Left'                  Minimum = 0.1'                  Maximum = 100'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLinLogPlot,The following statement contains a magic number: plot.Axes.Add(new LinearAxis              {                  Position = AxisPosition.Left'                  Minimum = 0.1'                  Maximum = 100'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "y=x"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "y=x"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "y=x"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "y=x²"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "y=x²"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "y=x²"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "y=x³"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "y=x³"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "y=x³"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Left'                  Minimum = 0.1'                  Maximum = 100'                  // UseSuperExponentialFormat = true'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Left'                  Minimum = 0.1'                  Maximum = 100'                  // UseSuperExponentialFormat = true'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Bottom'                  Minimum = 0.1'                  Maximum = 100'                  // UseSuperExponentialFormat = true'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateLogLogPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Bottom'                  Minimum = 0.1'                  Maximum = 100'                  // UseSuperExponentialFormat = true'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: var plot = new PlotModel              {                  Title = "E_{r}^{2} - (pc)^{2} = (m_{0}c^{2})^{2}"'                  TitleFontSize = 24'                  LegendFontSize = 14'                  LegendPosition = LegendPosition.RightTop'                  LegendPlacement = LegendPlacement.Outside'                  PlotMargins = new OxyThickness(30' 4' 0' 30)              };
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: var plot = new PlotModel              {                  Title = "E_{r}^{2} - (pc)^{2} = (m_{0}c^{2})^{2}"'                  TitleFontSize = 24'                  LegendFontSize = 14'                  LegendPosition = LegendPosition.RightTop'                  LegendPlacement = LegendPlacement.Outside'                  PlotMargins = new OxyThickness(30' 4' 0' 30)              };
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: var plot = new PlotModel              {                  Title = "E_{r}^{2} - (pc)^{2} = (m_{0}c^{2})^{2}"'                  TitleFontSize = 24'                  LegendFontSize = 14'                  LegendPosition = LegendPosition.RightTop'                  LegendPlacement = LegendPlacement.Outside'                  PlotMargins = new OxyThickness(30' 4' 0' 30)              };
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: var plot = new PlotModel              {                  Title = "E_{r}^{2} - (pc)^{2} = (m_{0}c^{2})^{2}"'                  TitleFontSize = 24'                  LegendFontSize = 14'                  LegendPosition = LegendPosition.RightTop'                  LegendPlacement = LegendPlacement.Outside'                  PlotMargins = new OxyThickness(30' 4' 0' 30)              };
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: var plot = new PlotModel              {                  Title = "E_{r}^{2} - (pc)^{2} = (m_{0}c^{2})^{2}"'                  TitleFontSize = 24'                  LegendFontSize = 14'                  LegendPosition = LegendPosition.RightTop'                  LegendPlacement = LegendPlacement.Outside'                  PlotMargins = new OxyThickness(30' 4' 0' 30)              };
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "H_{2}O"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "H_{2}O"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x' 0.1' 100' 0.1' "H_{2}O"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "C_{6}H_{12}O_{6}"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "C_{6}H_{12}O_{6}"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x' 0.1' 100' 0.1' "C_{6}H_{12}O_{6}"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "A^{2}_{i'j}"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "A^{2}_{i'j}"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Series.Add(CreateLineSeries(x => x * x * x' 0.1' 100' 0.1' "A^{2}_{i'j}"));
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Left'                  Minimum = 0.1'                  Maximum = 100'                  UseSuperExponentialFormat = true'                  FontSize = 14'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Left'                  Minimum = 0.1'                  Maximum = 100'                  UseSuperExponentialFormat = true'                  FontSize = 14'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Left'                  Minimum = 0.1'                  Maximum = 100'                  UseSuperExponentialFormat = true'                  FontSize = 14'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Bottom'                  Minimum = 0.1'                  Maximum = 100'                  FontSize = 14'                  UseSuperExponentialFormat = true'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Bottom'                  Minimum = 0.1'                  Maximum = 100'                  FontSize = 14'                  UseSuperExponentialFormat = true'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,CreateMathNotationPlot,The following statement contains a magic number: plot.Axes.Add(new LogarithmicAxis              {                  Position = AxisPosition.Bottom'                  Minimum = 0.1'                  Maximum = 100'                  FontSize = 14'                  UseSuperExponentialFormat = true'                  MajorGridlineStyle = LineStyle.Solid'                  MinorGridlineStyle = LineStyle.Solid              });
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: main.AddHeader(2' "Introduction");
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: main.AddHeader(2' "Plot");
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: main.AddPlot(this.Model' "Plot"' 800' 500);
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: main.AddPlot(this.Model' "Plot"' 800' 500);
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: main.AddHeader(2' "Drawing");
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: main.AddHeader(2' "Image");
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: PngExporter.Export(this.Model' pngPlotFileName' 800' 500' OxyColors.Automatic);
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: PngExporter.Export(this.Model' pngPlotFileName' 800' 500' OxyColors.Automatic);
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: main.AddHeader(2' "Data");
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: foreach (OxyPlot.Series.DataPointSeries s in this.Model.Series)              {                  main.AddHeader(3' "Data series " + (i++));                  var pt = main.AddPropertyTable("Properties of the " + s.GetType().Name' new[] { s });                  pt.Fields[0].Width = 50;                  pt.Fields[1].Width = 100;                    var fields = new List<ItemsTableField>                      {                          new ItemsTableField("X"' "X") { Width = 60' StringFormat = "0.00" }'                          new ItemsTableField("Y"' "Y") { Width = 60' StringFormat = "0.00" }                      };                  main.Add(new ItemsTable { Caption = "Data"' Fields = fields' Items = s.Points });              }
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: foreach (OxyPlot.Series.DataPointSeries s in this.Model.Series)              {                  main.AddHeader(3' "Data series " + (i++));                  var pt = main.AddPropertyTable("Properties of the " + s.GetType().Name' new[] { s });                  pt.Fields[0].Width = 50;                  pt.Fields[1].Width = 100;                    var fields = new List<ItemsTableField>                      {                          new ItemsTableField("X"' "X") { Width = 60' StringFormat = "0.00" }'                          new ItemsTableField("Y"' "Y") { Width = 60' StringFormat = "0.00" }                      };                  main.Add(new ItemsTable { Caption = "Data"' Fields = fields' Items = s.Points });              }
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: foreach (OxyPlot.Series.DataPointSeries s in this.Model.Series)              {                  main.AddHeader(3' "Data series " + (i++));                  var pt = main.AddPropertyTable("Properties of the " + s.GetType().Name' new[] { s });                  pt.Fields[0].Width = 50;                  pt.Fields[1].Width = 100;                    var fields = new List<ItemsTableField>                      {                          new ItemsTableField("X"' "X") { Width = 60' StringFormat = "0.00" }'                          new ItemsTableField("Y"' "Y") { Width = 60' StringFormat = "0.00" }                      };                  main.Add(new ItemsTable { Caption = "Data"' Fields = fields' Items = s.Points });              }
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: foreach (OxyPlot.Series.DataPointSeries s in this.Model.Series)              {                  main.AddHeader(3' "Data series " + (i++));                  var pt = main.AddPropertyTable("Properties of the " + s.GetType().Name' new[] { s });                  pt.Fields[0].Width = 50;                  pt.Fields[1].Width = 100;                    var fields = new List<ItemsTableField>                      {                          new ItemsTableField("X"' "X") { Width = 60' StringFormat = "0.00" }'                          new ItemsTableField("Y"' "Y") { Width = 60' StringFormat = "0.00" }                      };                  main.Add(new ItemsTable { Caption = "Data"' Fields = fields' Items = s.Points });              }
Magic Number,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,CreateReport,The following statement contains a magic number: foreach (OxyPlot.Series.DataPointSeries s in this.Model.Series)              {                  main.AddHeader(3' "Data series " + (i++));                  var pt = main.AddPropertyTable("Properties of the " + s.GetType().Name' new[] { s });                  pt.Fields[0].Width = 50;                  pt.Fields[1].Width = 100;                    var fields = new List<ItemsTableField>                      {                          new ItemsTableField("X"' "X") { Width = 60' StringFormat = "0.00" }'                          new ItemsTableField("Y"' "Y") { Width = 60' StringFormat = "0.00" }                      };                  main.Add(new ItemsTable { Caption = "Data"' Fields = fields' Items = s.Points });              }
Magic Number,RectangleSeriesDemo,RectangleWithValue,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RectangleSeriesDemo\MainWindow.xaml.cs,RectangleWithValue,The following statement contains a magic number: this.X2 = 2 * seed;
Magic Number,RectangleSeriesDemo,RectangleWithValue,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RectangleSeriesDemo\MainWindow.xaml.cs,RectangleWithValue,The following statement contains a magic number: this.Y2 = 2 * seed;
Magic Number,RectangleSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RectangleSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.PlotModel.Axes.Add(new LinearColorAxis              {                  Position = AxisPosition.Right'                  Palette = OxyPalettes.Jet(100)              });
Magic Number,InterpolationDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\InterpolationDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: List<DataPoint> points = this.GeneratePoints(50);
Magic Number,InterpolationDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\InterpolationDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.PlotModels = new List<PlotModel>              {                  this.GenerateRandomPlotModel(points' "None"' null)'                  this.GenerateRandomPlotModel(points' "Canonical aka Cardinal"'                      new Entry("0.5 (default)"' InterpolationAlgorithms.CanonicalSpline)'                      new Entry("0.1"' new CanonicalSpline(0.1))'                      new Entry("1.0"' new CanonicalSpline(1.0)))'                  this.GenerateRandomPlotModel(points' "Catmull–Rom"'                      new Entry("Standard"' InterpolationAlgorithms.CatmullRomSpline)'                      new Entry("Uniform"' InterpolationAlgorithms.UniformCatmullRomSpline)'                      new Entry("Chordal"' InterpolationAlgorithms.ChordalCatmullRomSpline))              };
Magic Number,InterpolationDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\InterpolationDemo\MainWindow.xaml.cs,GeneratePoints,The following statement contains a magic number: for (int i = 0; i < numberOfPoints; i++)              {                  if (i < 5)                  {                      result.Add(new DataPoint(i' 0.0));                  }                  else if (i < 10)                  {                      result.Add(new DataPoint(i' 1.0));                  }                  else if (i < 12)                  {                      result.Add(new DataPoint(i' 0.0));                  }                  else                  {                      result.Add(new DataPoint(i' this.r.NextDouble()));                  }              }
Magic Number,InterpolationDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\InterpolationDemo\MainWindow.xaml.cs,GeneratePoints,The following statement contains a magic number: for (int i = 0; i < numberOfPoints; i++)              {                  if (i < 5)                  {                      result.Add(new DataPoint(i' 0.0));                  }                  else if (i < 10)                  {                      result.Add(new DataPoint(i' 1.0));                  }                  else if (i < 12)                  {                      result.Add(new DataPoint(i' 0.0));                  }                  else                  {                      result.Add(new DataPoint(i' this.r.NextDouble()));                  }              }
Magic Number,InterpolationDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\InterpolationDemo\MainWindow.xaml.cs,GeneratePoints,The following statement contains a magic number: for (int i = 0; i < numberOfPoints; i++)              {                  if (i < 5)                  {                      result.Add(new DataPoint(i' 0.0));                  }                  else if (i < 10)                  {                      result.Add(new DataPoint(i' 1.0));                  }                  else if (i < 12)                  {                      result.Add(new DataPoint(i' 0.0));                  }                  else                  {                      result.Add(new DataPoint(i' this.r.NextDouble()));                  }              }
Magic Number,LinearBarSeriesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\LinearBarSeriesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: var random = new Random(31);
Magic Number,LinearBarSeriesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\LinearBarSeriesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: var dateTime = DateTime.Today.Add(TimeSpan.FromHours(9));
Magic Number,LinearBarSeriesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\LinearBarSeriesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  this.Pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,LinearBarSeriesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\LinearBarSeriesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  this.Pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,LinearBarSeriesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\LinearBarSeriesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (var pointIndex = 0; pointIndex < 50; pointIndex++)              {                  this.Pnls.Add(new Pnl                  {                      Time = dateTime'                      Value = -200 + random.Next(1000)'                  });                  dateTime = dateTime.AddMinutes(1);              }
Magic Number,BindingObservableCollectionDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingObservableCollectionDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: const int N = 10;
Magic Number,BindingObservableCollectionDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingObservableCollectionDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Subtitle = "N = " + 10;
Magic Number,BindingObservableCollectionDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingObservableCollectionDemo\MainViewModel.cs,LoadNextPoint,The following statement contains a magic number: for (int j = 0; j < N; j++)              {                  this.dy += (this.random.NextDouble() * 2) - 1;                  this.y += this.dy;                  this.Measurements.Add(                      new Measurement                      {                          Time = 2.5 * this.i / (N - 1)'                          Value = this.y / (N - 1)'                          Maximum = (this.y / (N - 1)) + 5'                          Minimum = (this.y / (N - 1)) - 5                      });                  i++;              }
Magic Number,BindingObservableCollectionDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingObservableCollectionDemo\MainViewModel.cs,LoadNextPoint,The following statement contains a magic number: for (int j = 0; j < N; j++)              {                  this.dy += (this.random.NextDouble() * 2) - 1;                  this.y += this.dy;                  this.Measurements.Add(                      new Measurement                      {                          Time = 2.5 * this.i / (N - 1)'                          Value = this.y / (N - 1)'                          Maximum = (this.y / (N - 1)) + 5'                          Minimum = (this.y / (N - 1)) - 5                      });                  i++;              }
Magic Number,BindingObservableCollectionDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingObservableCollectionDemo\MainViewModel.cs,LoadNextPoint,The following statement contains a magic number: for (int j = 0; j < N; j++)              {                  this.dy += (this.random.NextDouble() * 2) - 1;                  this.y += this.dy;                  this.Measurements.Add(                      new Measurement                      {                          Time = 2.5 * this.i / (N - 1)'                          Value = this.y / (N - 1)'                          Maximum = (this.y / (N - 1)) + 5'                          Minimum = (this.y / (N - 1)) - 5                      });                  i++;              }
Magic Number,BindingObservableCollectionDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingObservableCollectionDemo\MainViewModel.cs,LoadNextPoint,The following statement contains a magic number: for (int j = 0; j < N; j++)              {                  this.dy += (this.random.NextDouble() * 2) - 1;                  this.y += this.dy;                  this.Measurements.Add(                      new Measurement                      {                          Time = 2.5 * this.i / (N - 1)'                          Value = this.y / (N - 1)'                          Maximum = (this.y / (N - 1)) + 5'                          Minimum = (this.y / (N - 1)) - 5                      });                  i++;              }
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<BoxPlotItem>                              {                                  new BoxPlotItem(1' 13.0' 15.5' 17.0' 18.5' 19.5) { Mean = 18.0 }'                                  new BoxPlotItem(2' 13.0' 15.5' 17.0' 18.5' 19.5)'                                  new BoxPlotItem(3' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5 }'                                  new BoxPlotItem(4' 12.0' 13.5' 15.5' 18.0' 20.0) { Mean = 14.5' Outliers = new List<double> { 11.0' 21.0' 21.5 } }'                                  new BoxPlotItem(5' 13.5' 14.0' 14.5' 15.5' 16.5) { Outliers = new List<double> { 17.5' 18.0' 19.0 } }                              };
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: tmp.Axes.Add(new LinearAxis { Position = AxisPosition.Bottom' MinimumPadding = 0.3' MaximumPadding = 0.3' AbsoluteMinimum = 0 });
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: tmp.Axes.Add(new LinearAxis { Position = AxisPosition.Bottom' MinimumPadding = 0.3' MaximumPadding = 0.3' AbsoluteMinimum = 0 });
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: tmp.Axes.Add(new LinearAxis { Position = AxisPosition.Left' MinimumPadding = 0.3' MaximumPadding = 0.3' AbsoluteMinimum = 0 });
Magic Number,BoxPlotSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BoxPlotSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: tmp.Axes.Add(new LinearAxis { Position = AxisPosition.Left' MinimumPadding = 0.3' MaximumPadding = 0.3' AbsoluteMinimum = 0 });
Magic Number,LiveDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\LiveDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds(200);
Magic Number,LiveDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\LiveDemo\MainWindow.xaml.cs,Timer_Tick,The following statement contains a magic number: Data.Add(new DataPoint(time++' rnd.NextDouble() * 10));
Magic Number,OxyPlot.Wpf,MathBlock,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MathBlockDemo\MathBlock.cs,UpdateContent,The following statement contains a magic number: switch (horizontalAlignment)              {                  case OxyPlot.HorizontalAlignment.Right:                      x = this.ActualWidth - this.Padding.Right;                      break;                  case OxyPlot.HorizontalAlignment.Center:                      x = this.Padding.Left + ((this.ActualWidth - this.Padding.Left - this.Padding.Right) * 0.5);                      break;              }
Magic Number,OxyPlot.Wpf,MathBlock,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MathBlockDemo\MathBlock.cs,UpdateContent,The following statement contains a magic number: switch (verticalAlignment)              {                  case OxyPlot.VerticalAlignment.Bottom:                      y = this.ActualHeight - this.Padding.Bottom;                      break;                  case OxyPlot.VerticalAlignment.Middle:                      y = this.Padding.Top + ((this.ActualWidth - this.Padding.Bottom - this.Padding.Top) * 0.5);                      break;              }
Magic Number,MemoryTest,Window1,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MemoryTest\Window1.xaml.cs,Window1,The following statement contains a magic number: Model.Series.Add(new FunctionSeries(Math.Cos' 0' 10' 0.01));
Magic Number,MemoryTest,Window1,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MemoryTest\Window1.xaml.cs,Window1,The following statement contains a magic number: Model.Series.Add(new FunctionSeries(Math.Cos' 0' 10' 0.01));
Magic Number,MemoryTest,Window2,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MemoryTest\Window2.xaml.cs,Window2,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  var p = new PlotModel { Title = "Plot " + i };                  p.Series.Add(new FunctionSeries(x => Math.Cos(x * i)' 0' 10' 0.01));                  Plots.Add(p);              }
Magic Number,MemoryTest,Window2,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MemoryTest\Window2.xaml.cs,Window2,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  var p = new PlotModel { Title = "Plot " + i };                  p.Series.Add(new FunctionSeries(x => Math.Cos(x * i)' 0' 10' 0.01));                  Plots.Add(p);              }
Magic Number,MemoryTest,Window2,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MemoryTest\Window2.xaml.cs,Window2,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  var p = new PlotModel { Title = "Plot " + i };                  p.Series.Add(new FunctionSeries(x => Math.Cos(x * i)' 0' 10' 0.01));                  Plots.Add(p);              }
Magic Number,ToolTipDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ToolTipDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: var r = new Random(31);
Magic Number,ToolTipDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ToolTipDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: double p2 = 5;
Magic Number,ToolTipDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ToolTipDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,ToolTipDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ToolTipDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,ToolTipDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ToolTipDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,ToolTipDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ToolTipDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,ToolTipDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ToolTipDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,ToolTipDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ToolTipDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,PerformanceDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PerformanceDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: for (int i = 0; i < 250; i++)              {                  PlotModels.Add(GenerateRandomPlotModel(string.Format("Random plot '{0}'"' i + 1)));              }
Magic Number,ScatterErrorSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterErrorSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Points = CreateExamplePoints(20).ToList();
Magic Number,ScatterErrorSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterErrorSeriesDemo\MainWindow.xaml.cs,CreateExamplePoints,The following statement contains a magic number: var random = new Random(27);
Magic Number,ScatterErrorSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterErrorSeriesDemo\MainWindow.xaml.cs,CreateExamplePoints,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  x += 2 + random.NextDouble();                  y += 1 + random.NextDouble();                    yield return new ExamplePoint { V1 = x' V2 = y' E1 = random.NextDouble()' E2 = random.NextDouble() };              }
Magic Number,ResizeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ResizeDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: model.Series.Add(new FunctionSeries(Math.Sin' 0' 10' 1000));
Magic Number,ResizeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ResizeDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: model.Series.Add(new FunctionSeries(Math.Sin' 0' 10' 1000));
Magic Number,ResizeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ResizeDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: model.Series.Add(new FunctionSeries(x => Math.Sin(x) / x' 0' 10' 1000));
Magic Number,ResizeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ResizeDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: model.Series.Add(new FunctionSeries(x => Math.Sin(x) / x' 0' 10' 1000));
Magic Number,DataTemplateDemo,PlotViewDataTemplateWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DataTemplateDemo\PlotViewDataTemplateWindow.xaml.cs,CreateModels,The following statement contains a magic number: for (var i = 0; i < 3; i++)              {                  var pm = new PlotModel { Title = string.Format("Plot {0}"' i + 1) };                    var series = new LineSeries();                  for (var j = 0; j < 10; j++)                  {                      series.Points.Add(new DataPoint(j' r.NextDouble()));                  }                    pm.Series.Add(series);                    var pc = new PlotController();                  pc.UnbindAll();                  pc.BindKeyDown(OxyKey.Left' PlotCommands.PanRight);                  pc.BindKeyDown(OxyKey.Right' PlotCommands.PanLeft);                    yield return new Model { PlotModel = pm' PlotController = pc };              }
Magic Number,DataTemplateDemo,PlotViewDataTemplateWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DataTemplateDemo\PlotViewDataTemplateWindow.xaml.cs,CreateModels,The following statement contains a magic number: for (var i = 0; i < 3; i++)              {                  var pm = new PlotModel { Title = string.Format("Plot {0}"' i + 1) };                    var series = new LineSeries();                  for (var j = 0; j < 10; j++)                  {                      series.Points.Add(new DataPoint(j' r.NextDouble()));                  }                    pm.Series.Add(series);                    var pc = new PlotController();                  pc.UnbindAll();                  pc.BindKeyDown(OxyKey.Left' PlotCommands.PanRight);                  pc.BindKeyDown(OxyKey.Right' PlotCommands.PanLeft);                    yield return new Model { PlotModel = pm' PlotController = pc };              }
Magic Number,WorldStatisticsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\MainViewModel.cs,UpdatePlot,The following statement contains a magic number: if (SelectedCountry != null)              {                  var ls = new LineSeries { Title = SelectedCountry.Name' LineJoin = LineJoin.Bevel };                    foreach (var p in SelectedCountry.Statistics)                  {                      if (double.IsNaN(p.GdpPerCapitaPpp) || double.IsNaN(p.LifeExpectancyAtBirth)) continue;                      ls.Points.Add(new DataPoint(p.GdpPerCapitaPpp' p.LifeExpectancyAtBirth));                  }                    pm.Series.Add(ls);                  var ss2 = new ScatterSeries();                  double x = SelectedCountry.FindValue(year' piX);                  double y = SelectedCountry.FindValue(year' piY);                  ss2.Points.Add(new ScatterPoint(x' y' 10));                  ss2.MarkerFill = OxyColor.FromAColor(120' OxyColors.Red);                  ss2.MarkerType = MarkerType.Circle;                  pm.Series.Add(ss2);              }
Magic Number,WorldStatisticsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\MainViewModel.cs,UpdatePlot,The following statement contains a magic number: if (SelectedCountry != null)              {                  var ls = new LineSeries { Title = SelectedCountry.Name' LineJoin = LineJoin.Bevel };                    foreach (var p in SelectedCountry.Statistics)                  {                      if (double.IsNaN(p.GdpPerCapitaPpp) || double.IsNaN(p.LifeExpectancyAtBirth)) continue;                      ls.Points.Add(new DataPoint(p.GdpPerCapitaPpp' p.LifeExpectancyAtBirth));                  }                    pm.Series.Add(ls);                  var ss2 = new ScatterSeries();                  double x = SelectedCountry.FindValue(year' piX);                  double y = SelectedCountry.FindValue(year' piY);                  ss2.Points.Add(new ScatterPoint(x' y' 10));                  ss2.MarkerFill = OxyColor.FromAColor(120' OxyColors.Red);                  ss2.MarkerType = MarkerType.Circle;                  pm.Series.Add(ss2);              }
Magic Number,WorldStatisticsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\MainViewModel.cs,UpdatePlot,The following statement contains a magic number: pm.Axes.Add(new LinearAxis { Position = AxisPosition.Left' Minimum = 19' Maximum = 87' Title = "Life expectancy (years)" });
Magic Number,WorldStatisticsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\MainViewModel.cs,UpdatePlot,The following statement contains a magic number: pm.Axes.Add(new LinearAxis { Position = AxisPosition.Left' Minimum = 19' Maximum = 87' Title = "Life expectancy (years)" });
Magic Number,WorldStatisticsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\MainViewModel.cs,UpdatePlot,The following statement contains a magic number: pm.Axes.Add(new LogarithmicAxis { Position = AxisPosition.Bottom' Title = "Income per person (GDP/capita' PPP$ inflation-adjusted)"' Minimum = 200' Maximum = 90000 });
Magic Number,WorldStatisticsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\MainViewModel.cs,UpdatePlot,The following statement contains a magic number: pm.Axes.Add(new LogarithmicAxis { Position = AxisPosition.Bottom' Title = "Income per person (GDP/capita' PPP$ inflation-adjusted)"' Minimum = 200' Maximum = 90000 });
Magic Number,WorldStatisticsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\WorldStatisticsDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Year = 2009;
Magic Number,PlotModelAlreadyInUse,ViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Workitems\PlotModelAlreadyInUse\ViewModel.cs,ViewModel,The following statement contains a magic number: for (var i = 0; i < 10; i++)                  Items.Add(new Item("MyName " + i));
Magic Number,AnnotationDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnnotationDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Points = new List<DataPoint>                  {                     new DataPoint(10' 10)' new DataPoint(80' 30)' new DataPoint(60' 70)                  };
Magic Number,AnnotationDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnnotationDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Points = new List<DataPoint>                  {                     new DataPoint(10' 10)' new DataPoint(80' 30)' new DataPoint(60' 70)                  };
Magic Number,AnnotationDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnnotationDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Points = new List<DataPoint>                  {                     new DataPoint(10' 10)' new DataPoint(80' 30)' new DataPoint(60' 70)                  };
Magic Number,AnnotationDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnnotationDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Points = new List<DataPoint>                  {                     new DataPoint(10' 10)' new DataPoint(80' 30)' new DataPoint(60' 70)                  };
Magic Number,AnnotationDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnnotationDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Points = new List<DataPoint>                  {                     new DataPoint(10' 10)' new DataPoint(80' 30)' new DataPoint(60' 70)                  };
Magic Number,AnnotationDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnnotationDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Points = new List<DataPoint>                  {                     new DataPoint(10' 10)' new DataPoint(80' 30)' new DataPoint(60' 70)                  };
Magic Number,AreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: var r = new Random(31);
Magic Number,AreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: double p2 = 5;
Magic Number,AreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,AreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,AreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,AreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,AreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,AreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,AxesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AxesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Data1 = new List<DataPoint> { new DataPoint(10' 4)' new DataPoint(12' 7)' new DataPoint(16' 3)' new DataPoint(20' 9) };
Magic Number,AxesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AxesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Data1 = new List<DataPoint> { new DataPoint(10' 4)' new DataPoint(12' 7)' new DataPoint(16' 3)' new DataPoint(20' 9) };
Magic Number,AxesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AxesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Data1 = new List<DataPoint> { new DataPoint(10' 4)' new DataPoint(12' 7)' new DataPoint(16' 3)' new DataPoint(20' 9) };
Magic Number,AxesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AxesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Data1 = new List<DataPoint> { new DataPoint(10' 4)' new DataPoint(12' 7)' new DataPoint(16' 3)' new DataPoint(20' 9) };
Magic Number,AxesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AxesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Data1 = new List<DataPoint> { new DataPoint(10' 4)' new DataPoint(12' 7)' new DataPoint(16' 3)' new DataPoint(20' 9) };
Magic Number,AxesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AxesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Data1 = new List<DataPoint> { new DataPoint(10' 4)' new DataPoint(12' 7)' new DataPoint(16' 3)' new DataPoint(20' 9) };
Magic Number,AxesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AxesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Data1 = new List<DataPoint> { new DataPoint(10' 4)' new DataPoint(12' 7)' new DataPoint(16' 3)' new DataPoint(20' 9) };
Magic Number,AxesDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AxesDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Data1 = new List<DataPoint> { new DataPoint(10' 4)' new DataPoint(12' 7)' new DataPoint(16' 3)' new DataPoint(20' 9) };
Magic Number,BarSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BarSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,BarSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BarSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,BarSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BarSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,BarSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BarSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,BarSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BarSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,BarSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BarSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,BarSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BarSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,BarSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BarSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,BarSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BarSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,BindingDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: const int N = 50000;
Magic Number,BindingDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: var r = new Random(385);
Magic Number,BindingDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < N; i++)              {                  dy += (r.NextDouble() * 2) - 1;                  y += dy;                  this.Measurements.Add(new Measurement                                       {                                           Time = 2.5 * i / (N - 1)'                                           Value = y / (N - 1)'                                           Maximum = (y / (N - 1)) + 5'                                           Minimum = (y / (N - 1)) - 5                                       });              }
Magic Number,BindingDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < N; i++)              {                  dy += (r.NextDouble() * 2) - 1;                  y += dy;                  this.Measurements.Add(new Measurement                                       {                                           Time = 2.5 * i / (N - 1)'                                           Value = y / (N - 1)'                                           Maximum = (y / (N - 1)) + 5'                                           Minimum = (y / (N - 1)) - 5                                       });              }
Magic Number,BindingDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < N; i++)              {                  dy += (r.NextDouble() * 2) - 1;                  y += dy;                  this.Measurements.Add(new Measurement                                       {                                           Time = 2.5 * i / (N - 1)'                                           Value = y / (N - 1)'                                           Maximum = (y / (N - 1)) + 5'                                           Minimum = (y / (N - 1)) - 5                                       });              }
Magic Number,BindingDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\BindingDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < N; i++)              {                  dy += (r.NextDouble() * 2) - 1;                  y += dy;                  this.Measurements.Add(new Measurement                                       {                                           Time = 2.5 * i / (N - 1)'                                           Value = y / (N - 1)'                                           Maximum = (y / (N - 1)) + 5'                                           Minimum = (y / (N - 1)) - 5                                       });              }
Magic Number,ContextMenuDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContextMenuDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: model.Series.Add(new FunctionSeries(Math.Sin' 0' 10' 200));
Magic Number,ContextMenuDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContextMenuDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: model.Series.Add(new FunctionSeries(Math.Sin' 0' 10' 200));
Magic Number,TwoColorAreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TwoColorAreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: var r = new Random(31);
Magic Number,TwoColorAreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TwoColorAreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: double p2 = 5;
Magic Number,TwoColorAreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TwoColorAreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 200; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,TwoColorAreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TwoColorAreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 200; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,TwoColorAreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TwoColorAreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 200; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,TwoColorAreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TwoColorAreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 200; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,TwoColorAreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TwoColorAreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 200; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,TwoColorAreaDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TwoColorAreaDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: for (int i = 0; i < 200; i++)              {                  v1 += (r.NextDouble() - 0.5) * 0.7;                  v2 += (r.NextDouble() - 0.5) * 0.1;                  double y1 = p1 + v1;                  double y2 = p2 + v2;                  p1 = y1;                  p2 = y2;                  this.Measurements.Add(new Measurement                                       {                                           Time = i * 2.5'                                           Value = y1'                                           Maximum = y1 + y2'                                           Minimum = y1 - y2                                       });              }
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: Func<double' double' double> peaks =                  (x' y) =>                  3 * (1 - x) * (1 - x) * Math.Exp(-(x * x) - (y + 1) * (y + 1))                  - 10 * (x / 5 - x * x * x - y * y * y * y * y) * Math.Exp(-x * x - y * y)                  - 1.0 / 3 * Math.Exp(-(x + 1) * (x + 1) - y * y);
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: Func<double' double' double> peaks =                  (x' y) =>                  3 * (1 - x) * (1 - x) * Math.Exp(-(x * x) - (y + 1) * (y + 1))                  - 10 * (x / 5 - x * x * x - y * y * y * y * y) * Math.Exp(-x * x - y * y)                  - 1.0 / 3 * Math.Exp(-(x + 1) * (x + 1) - y * y);
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: Func<double' double' double> peaks =                  (x' y) =>                  3 * (1 - x) * (1 - x) * Math.Exp(-(x * x) - (y + 1) * (y + 1))                  - 10 * (x / 5 - x * x * x - y * y * y * y * y) * Math.Exp(-x * x - y * y)                  - 1.0 / 3 * Math.Exp(-(x + 1) * (x + 1) - y * y);
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: Func<double' double' double> peaks =                  (x' y) =>                  3 * (1 - x) * (1 - x) * Math.Exp(-(x * x) - (y + 1) * (y + 1))                  - 10 * (x / 5 - x * x * x - y * y * y * y * y) * Math.Exp(-x * x - y * y)                  - 1.0 / 3 * Math.Exp(-(x + 1) * (x + 1) - y * y);
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("peaks"' -3' 3' 0.05' -3' 3' 0.05' -6' 10' 1' peaks));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("peaks"' -3' 3' 0.05' -3' 3' 0.05' -6' 10' 1' peaks));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("peaks"' -3' 3' 0.05' -3' 3' 0.05' -6' 10' 1' peaks));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("peaks"' -3' 3' 0.05' -3' 3' 0.05' -6' 10' 1' peaks));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("peaks"' -3' 3' 0.05' -3' 3' 0.05' -6' 10' 1' peaks));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("peaks"' -3' 3' 0.05' -3' 3' 0.05' -6' 10' 1' peaks));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("peaks"' -3' 3' 0.05' -3' 3' 0.05' -6' 10' 1' peaks));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("peaks"' -3' 3' 0.05' -3' 3' 0.05' -6' 10' 1' peaks));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 1"'                      -1.5'                      1.5'                      0.1'                      -1.5'                      1.5'                      0.1'                      0'                      2.25'                      0.25'                      (x' y) =>                      1.0                      / (square(x * x + (y - 0.842) * (y + 0.842)) + square(x * (y - 0.842) + x * (y - 0.842)))));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 2"'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -1'                      1'                      0.02'                      (x' y) =>                      Math.Sin(Math.Sqrt(x * x + y * y)) + y != 0 ? 1.0 / Math.Sqrt((x - c) * (x - c) + y * y) : 0));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 2"'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -1'                      1'                      0.02'                      (x' y) =>                      Math.Sin(Math.Sqrt(x * x + y * y)) + y != 0 ? 1.0 / Math.Sqrt((x - c) * (x - c) + y * y) : 0));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 2"'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -1'                      1'                      0.02'                      (x' y) =>                      Math.Sin(Math.Sqrt(x * x + y * y)) + y != 0 ? 1.0 / Math.Sqrt((x - c) * (x - c) + y * y) : 0));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 2"'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -1'                      1'                      0.02'                      (x' y) =>                      Math.Sin(Math.Sqrt(x * x + y * y)) + y != 0 ? 1.0 / Math.Sqrt((x - c) * (x - c) + y * y) : 0));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 2"'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -1'                      1'                      0.02'                      (x' y) =>                      Math.Sin(Math.Sqrt(x * x + y * y)) + y != 0 ? 1.0 / Math.Sqrt((x - c) * (x - c) + y * y) : 0));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 2"'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -1'                      1'                      0.02'                      (x' y) =>                      Math.Sin(Math.Sqrt(x * x + y * y)) + y != 0 ? 1.0 / Math.Sqrt((x - c) * (x - c) + y * y) : 0));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "Conrec example 2"'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -2 * Math.PI'                      2 * Math.PI'                      0.25'                      -1'                      1'                      0.02'                      (x' y) =>                      Math.Sin(Math.Sqrt(x * x + y * y)) + y != 0 ? 1.0 / Math.Sqrt((x - c) * (x - c) + y * y) : 0));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sin(x)*cos(y)"'                      -Math.PI'                      Math.PI'                      0.1'                      -Math.PI'                      Math.PI'                      0.1'                      -1'                      1'                      0.1'                      (x' y) => Math.Sin(x) * Math.Cos(y)));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sin(x)*cos(y)"'                      -Math.PI'                      Math.PI'                      0.1'                      -Math.PI'                      Math.PI'                      0.1'                      -1'                      1'                      0.1'                      (x' y) => Math.Sin(x) * Math.Cos(y)));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sin(x)*cos(y)"'                      -Math.PI'                      Math.PI'                      0.1'                      -Math.PI'                      Math.PI'                      0.1'                      -1'                      1'                      0.1'                      (x' y) => Math.Sin(x) * Math.Cos(y)));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("x*y"' -1' 1' 0.1' -1' 1' 0.1' -1' 1' 0.1' (x' y) => x * y));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("x*y"' -1' 1' 0.1' -1' 1' 0.1' -1' 1' 0.1' (x' y) => x * y));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("x*y"' -1' 1' 0.1' -1' 1' 0.1' -1' 1' 0.1' (x' y) => x * y));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("x^{2}+y^{2}"' -1' 1' 0.1' -1' 1' 0.1' -1' 1' 0.1' (x' y) => x * x + y * y));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("x^{2}+y^{2}"' -1' 1' 0.1' -1' 1' 0.1' -1' 1' 0.1' (x' y) => x * x + y * y));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("x^{2}+y^{2}"' -1' 1' 0.1' -1' 1' 0.1' -1' 1' 0.1' (x' y) => x * x + y * y));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "atan2(y'x)"'                      -1'                      1'                      0.1'                      -1'                      1'                      0.1'                      -180'                      180'                      10'                      (x' y) => Math.Atan2(y' x) * 180 / Math.PI'                      "0°"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "atan2(y'x)"'                      -1'                      1'                      0.1'                      -1'                      1'                      0.1'                      -180'                      180'                      10'                      (x' y) => Math.Atan2(y' x) * 180 / Math.PI'                      "0°"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "atan2(y'x)"'                      -1'                      1'                      0.1'                      -1'                      1'                      0.1'                      -180'                      180'                      10'                      (x' y) => Math.Atan2(y' x) * 180 / Math.PI'                      "0°"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "atan2(y'x)"'                      -1'                      1'                      0.1'                      -1'                      1'                      0.1'                      -180'                      180'                      10'                      (x' y) => Math.Atan2(y' x) * 180 / Math.PI'                      "0°"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "atan2(y'x)"'                      -1'                      1'                      0.1'                      -1'                      1'                      0.1'                      -180'                      180'                      10'                      (x' y) => Math.Atan2(y' x) * 180 / Math.PI'                      "0°"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "atan2(y'x)"'                      -1'                      1'                      0.1'                      -1'                      1'                      0.1'                      -180'                      180'                      10'                      (x' y) => Math.Atan2(y' x) * 180 / Math.PI'                      "0°"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("y/x"' -1' 1' 0.1' -1' 1' 0.1' -1' 1' 0.1' (x' y) => y / x' "0%"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("y/x"' -1' 1' 0.1' -1' 1' 0.1' -1' 1' 0.1' (x' y) => y / x' "0%"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(new Example("y/x"' -1' 1' 0.1' -1' 1' 0.1' -1' 1' 0.1' (x' y) => y / x' "0%"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sinc(r+0.1)"'                      -8'                      8'                      0.2'                      -8'                      8'                      0.2'                      -0.2'                      1'                      0.1'                      (x' y) =>                      {                          double r = Math.Sqrt(x * x + y * y);                          return Math.Sin(r + 0.1) / (r + 0.1);                      }'                      "0.0"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sinc(r+0.1)"'                      -8'                      8'                      0.2'                      -8'                      8'                      0.2'                      -0.2'                      1'                      0.1'                      (x' y) =>                      {                          double r = Math.Sqrt(x * x + y * y);                          return Math.Sin(r + 0.1) / (r + 0.1);                      }'                      "0.0"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sinc(r+0.1)"'                      -8'                      8'                      0.2'                      -8'                      8'                      0.2'                      -0.2'                      1'                      0.1'                      (x' y) =>                      {                          double r = Math.Sqrt(x * x + y * y);                          return Math.Sin(r + 0.1) / (r + 0.1);                      }'                      "0.0"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sinc(r+0.1)"'                      -8'                      8'                      0.2'                      -8'                      8'                      0.2'                      -0.2'                      1'                      0.1'                      (x' y) =>                      {                          double r = Math.Sqrt(x * x + y * y);                          return Math.Sin(r + 0.1) / (r + 0.1);                      }'                      "0.0"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sinc(r+0.1)"'                      -8'                      8'                      0.2'                      -8'                      8'                      0.2'                      -0.2'                      1'                      0.1'                      (x' y) =>                      {                          double r = Math.Sqrt(x * x + y * y);                          return Math.Sin(r + 0.1) / (r + 0.1);                      }'                      "0.0"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sinc(r+0.1)"'                      -8'                      8'                      0.2'                      -8'                      8'                      0.2'                      -0.2'                      1'                      0.1'                      (x' y) =>                      {                          double r = Math.Sqrt(x * x + y * y);                          return Math.Sin(r + 0.1) / (r + 0.1);                      }'                      "0.0"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sinc(r+0.1)"'                      -8'                      8'                      0.2'                      -8'                      8'                      0.2'                      -0.2'                      1'                      0.1'                      (x' y) =>                      {                          double r = Math.Sqrt(x * x + y * y);                          return Math.Sin(r + 0.1) / (r + 0.1);                      }'                      "0.0"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sinc(r+0.1)"'                      -8'                      8'                      0.2'                      -8'                      8'                      0.2'                      -0.2'                      1'                      0.1'                      (x' y) =>                      {                          double r = Math.Sqrt(x * x + y * y);                          return Math.Sin(r + 0.1) / (r + 0.1);                      }'                      "0.0"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sinc(r+0.1)"'                      -8'                      8'                      0.2'                      -8'                      8'                      0.2'                      -0.2'                      1'                      0.1'                      (x' y) =>                      {                          double r = Math.Sqrt(x * x + y * y);                          return Math.Sin(r + 0.1) / (r + 0.1);                      }'                      "0.0"));
Magic Number,ContourDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ContourDemo\MainViewModel.cs,AddExamples,The following statement contains a magic number: this.Examples.Add(                  new Example(                      "sinc(r+0.1)"'                      -8'                      8'                      0.2'                      -8'                      8'                      0.2'                      -0.2'                      1'                      0.1'                      (x' y) =>                      {                          double r = Math.Sqrt(x * x + y * y);                          return Math.Sin(r + 0.1) / (r + 0.1);                      }'                      "0.0"));
Magic Number,ColumnSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ColumnSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,ColumnSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ColumnSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,ColumnSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ColumnSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,ColumnSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ColumnSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,ColumnSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ColumnSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,ColumnSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ColumnSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,ColumnSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ColumnSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,ColumnSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ColumnSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,ColumnSeriesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ColumnSeriesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Items = new Collection<Item>                              {                                  new Item {Label = "Apples"' Value1 = 37' Value2 = 12' Value3 = 19}'                                  new Item {Label = "Pears"' Value1 = 7' Value2 = 21' Value3 = 9}'                                  new Item {Label = "Bananas"' Value1 = 23' Value2 = 2' Value3 = 29}                              };
Magic Number,HeatMapDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HeatMapDemo\MainWindow.xaml.cs,GenerateHeatMap,The following statement contains a magic number: const int Rows = 100;
Magic Number,HeatMapDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HeatMapDemo\MainWindow.xaml.cs,GenerateHeatMap,The following statement contains a magic number: const int Cols = 100;
Magic Number,HeatMapDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HeatMapDemo\MainWindow.xaml.cs,GenerateHeatMap,The following statement contains a magic number: for (var i = 0; i < Rows; i++)              {                  for (var j = 0; j < Cols; j++)                  {                      result[i' j] = Math.Sin(2 * Math.PI * i / Rows) * Math.Sin(2 * Math.PI * j / Cols);                  }              }
Magic Number,HeatMapDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HeatMapDemo\MainWindow.xaml.cs,GenerateHeatMap,The following statement contains a magic number: for (var i = 0; i < Rows; i++)              {                  for (var j = 0; j < Cols; j++)                  {                      result[i' j] = Math.Sin(2 * Math.PI * i / Rows) * Math.Sin(2 * Math.PI * j / Cols);                  }              }
Magic Number,HeatMapDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HeatMapDemo\MainWindow.xaml.cs,GenerateHeatMapNaNValues,The following statement contains a magic number: const int Rows = 100;
Magic Number,HeatMapDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HeatMapDemo\MainWindow.xaml.cs,GenerateHeatMapNaNValues,The following statement contains a magic number: const int Cols = 100;
Magic Number,HeatMapDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HeatMapDemo\MainWindow.xaml.cs,GenerateHeatMapNaNValues,The following statement contains a magic number: for (var i = 0; i < Rows; i++)              {                  for (var j = 0; j < Cols; j++)                  {                      result[i' j] = (i==j)?double.NaN :Math.Sin(2 * Math.PI * i / Rows) * Math.Sin(2 * Math.PI * j / Cols);                  }              }
Magic Number,HeatMapDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HeatMapDemo\MainWindow.xaml.cs,GenerateHeatMapNaNValues,The following statement contains a magic number: for (var i = 0; i < Rows; i++)              {                  for (var j = 0; j < Cols; j++)                  {                      result[i' j] = (i==j)?double.NaN :Math.Sin(2 * Math.PI * i / Rows) * Math.Sin(2 * Math.PI * j / Cols);                  }              }
Magic Number,OverlayDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\OverlayDemo\MainWindow.xaml.cs,HandleTransformChanged,The following statement contains a magic number: var p2 = this.horizontalAxis.Transform(100' 100' this.verticalAxis);
Magic Number,OverlayDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\OverlayDemo\MainWindow.xaml.cs,HandleTransformChanged,The following statement contains a magic number: var p2 = this.horizontalAxis.Transform(100' 100' this.verticalAxis);
Magic Number,RefreshDemo,Window6ViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window6ViewModel.cs,Window6ViewModel,The following statement contains a magic number: this.task = Task.Factory.StartNew(                  () =>                  {                      double x = 0;                      while (!complete)                      {                          this.Title = "Plot updated: " + DateTime.Now;                          this.Points.Add(new DataPoint(x' Math.Sin(x)));                            // Change the refresh flag' this will trig InvalidatePlot() on the Plot control                          this.Refresh++;                            x += 0.1;                          Thread.Sleep(100);                      }                  });
Magic Number,RefreshDemo,Window6ViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window6ViewModel.cs,Window6ViewModel,The following statement contains a magic number: this.task = Task.Factory.StartNew(                  () =>                  {                      double x = 0;                      while (!complete)                      {                          this.Title = "Plot updated: " + DateTime.Now;                          this.Points.Add(new DataPoint(x' Math.Sin(x)));                            // Change the refresh flag' this will trig InvalidatePlot() on the Plot control                          this.Refresh++;                            x += 0.1;                          Thread.Sleep(100);                      }                  });
Magic Number,RefreshDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod1_Click);                            #line default              #line hidden              return;              case 2:                            #line 7 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod2_Click);                            #line default              #line hidden              return;              case 3:                            #line 8 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod3_Click);                            #line default              #line hidden              return;              case 4:                            #line 9 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod4_Click);                            #line default              #line hidden              return;              case 5:                            #line 10 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod6_Click);                            #line default              #line hidden              return;              }
Magic Number,RefreshDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod1_Click);                            #line default              #line hidden              return;              case 2:                            #line 7 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod2_Click);                            #line default              #line hidden              return;              case 3:                            #line 8 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod3_Click);                            #line default              #line hidden              return;              case 4:                            #line 9 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod4_Click);                            #line default              #line hidden              return;              case 5:                            #line 10 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod6_Click);                            #line default              #line hidden              return;              }
Magic Number,RefreshDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod1_Click);                            #line default              #line hidden              return;              case 2:                            #line 7 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod2_Click);                            #line default              #line hidden              return;              case 3:                            #line 8 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod3_Click);                            #line default              #line hidden              return;              case 4:                            #line 9 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod4_Click);                            #line default              #line hidden              return;              case 5:                            #line 10 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod6_Click);                            #line default              #line hidden              return;              }
Magic Number,RefreshDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod1_Click);                            #line default              #line hidden              return;              case 2:                            #line 7 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod2_Click);                            #line default              #line hidden              return;              case 3:                            #line 8 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod3_Click);                            #line default              #line hidden              return;              case 4:                            #line 9 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod4_Click);                            #line default              #line hidden              return;              case 5:                            #line 10 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod6_Click);                            #line default              #line hidden              return;              }
Magic Number,RefreshDemo,Window1,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window1.xaml.cs,CompositionTarget_Rendering,The following statement contains a magic number: if (seconds > this.lastUpdateTime + 0.2)              {                  this.PlotModel = this.CreatePlot();                  this.lastUpdateTime = seconds;              }
Magic Number,RefreshDemo,Window1,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window1.xaml.cs,CreatePlot,The following statement contains a magic number: pm.Series.Add(new FunctionSeries(Math.Sin' x' x + 4' 0.01));
Magic Number,RefreshDemo,Window1,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window1.xaml.cs,CreatePlot,The following statement contains a magic number: pm.Series.Add(new FunctionSeries(Math.Sin' x' x + 4' 0.01));
Magic Number,RefreshDemo,Window1,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window1.xaml.cs,CreatePlot,The following statement contains a magic number: x += 0.1;
Magic Number,RefreshDemo,Window2,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window2.xaml.cs,CompositionTarget_Rendering,The following statement contains a magic number: if (seconds > this.lastUpdateTime + 0.2)              {                  this.UpdatePlot();                  this.lastUpdateTime = seconds;              }
Magic Number,RefreshDemo,Window2,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window2.xaml.cs,UpdatePlot,The following statement contains a magic number: this.PlotModel.Series[0] = new FunctionSeries(Math.Sin' x' x + 4' 0.01);
Magic Number,RefreshDemo,Window2,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window2.xaml.cs,UpdatePlot,The following statement contains a magic number: this.PlotModel.Series[0] = new FunctionSeries(Math.Sin' x' x + 4' 0.01);
Magic Number,RefreshDemo,Window2,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window2.xaml.cs,UpdatePlot,The following statement contains a magic number: x += 0.1;
Magic Number,RefreshDemo,Window3,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window3.xaml.cs,CompositionTarget_Rendering,The following statement contains a magic number: if (seconds > this.lastUpdateTime + 0.2)              {                  this.UpdatePlot();                  this.lastUpdateTime = seconds;              }
Magic Number,RefreshDemo,Window3,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window3.xaml.cs,UpdatePlot,The following statement contains a magic number: this.PlotModel.Series[0] = new FunctionSeries(Math.Sin' x' x + 4' 0.01);
Magic Number,RefreshDemo,Window3,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window3.xaml.cs,UpdatePlot,The following statement contains a magic number: this.PlotModel.Series[0] = new FunctionSeries(Math.Sin' x' x + 4' 0.01);
Magic Number,RefreshDemo,Window3,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window3.xaml.cs,UpdatePlot,The following statement contains a magic number: x += 0.1;
Magic Number,RefreshDemo,Window4,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window4.xaml.cs,Window4,The following statement contains a magic number: worker.DoWork += (s' e) =>              {                  while (!worker.CancellationPending)                  {                      lock (this.PlotModel.SyncRoot)                      {                          this.PlotModel.Title = "Plot updated: " + DateTime.Now;                          this.PlotModel.Series[0] = new FunctionSeries(Math.Sin' x' x + 4' 0.01);                      }                      x += 0.1;                      PlotModel.InvalidatePlot(true);                      Thread.Sleep(100);                  }              };
Magic Number,RefreshDemo,Window4,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window4.xaml.cs,Window4,The following statement contains a magic number: worker.DoWork += (s' e) =>              {                  while (!worker.CancellationPending)                  {                      lock (this.PlotModel.SyncRoot)                      {                          this.PlotModel.Title = "Plot updated: " + DateTime.Now;                          this.PlotModel.Series[0] = new FunctionSeries(Math.Sin' x' x + 4' 0.01);                      }                      x += 0.1;                      PlotModel.InvalidatePlot(true);                      Thread.Sleep(100);                  }              };
Magic Number,RefreshDemo,Window4,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window4.xaml.cs,Window4,The following statement contains a magic number: worker.DoWork += (s' e) =>              {                  while (!worker.CancellationPending)                  {                      lock (this.PlotModel.SyncRoot)                      {                          this.PlotModel.Title = "Plot updated: " + DateTime.Now;                          this.PlotModel.Series[0] = new FunctionSeries(Math.Sin' x' x + 4' 0.01);                      }                      x += 0.1;                      PlotModel.InvalidatePlot(true);                      Thread.Sleep(100);                  }              };
Magic Number,RefreshDemo,Window4,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\Window4.xaml.cs,Window4,The following statement contains a magic number: worker.DoWork += (s' e) =>              {                  while (!worker.CancellationPending)                  {                      lock (this.PlotModel.SyncRoot)                      {                          this.PlotModel.Title = "Plot updated: " + DateTime.Now;                          this.PlotModel.Series[0] = new FunctionSeries(Math.Sin' x' x + 4' 0.01);                      }                      x += 0.1;                      PlotModel.InvalidatePlot(true);                      Thread.Sleep(100);                  }              };
Magic Number,TaskDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TaskDemo\MainViewModel.cs,Update,The following statement contains a magic number: while (!token.IsCancellationRequested)              {                  context.Post(_ => this.UpdatePlot()' null);                  Thread.Sleep(250);              }
Magic Number,TaskDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TaskDemo\MainViewModel.cs,CalculateNextPoint,The following statement contains a magic number: for (int j = 0; j < 20000; j++)              {                  x += (this.randomizer.NextDouble() - 0.5) * 1e-3;                  y += (this.randomizer.NextDouble() - 0.5) * 1e-3;              }
Magic Number,TaskDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TaskDemo\MainViewModel.cs,CalculateNextPoint,The following statement contains a magic number: for (int j = 0; j < 20000; j++)              {                  x += (this.randomizer.NextDouble() - 0.5) * 1e-3;                  y += (this.randomizer.NextDouble() - 0.5) * 1e-3;              }
Magic Number,TaskDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TaskDemo\MainViewModel.cs,CalculateNextPoint,The following statement contains a magic number: for (int j = 0; j < 20000; j++)              {                  x += (this.randomizer.NextDouble() - 0.5) * 1e-3;                  y += (this.randomizer.NextDouble() - 0.5) * 1e-3;              }
Magic Number,TaskDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TaskDemo\MainViewModel.cs,CalculateNextPoint,The following statement contains a magic number: for (int j = 0; j < 20000; j++)              {                  x += (this.randomizer.NextDouble() - 0.5) * 1e-3;                  y += (this.randomizer.NextDouble() - 0.5) * 1e-3;              }
Magic Number,TaskDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\TaskDemo\MainViewModel.cs,CalculateNextPoint,The following statement contains a magic number: for (int j = 0; j < 20000; j++)              {                  x += (this.randomizer.NextDouble() - 0.5) * 1e-3;                  y += (this.randomizer.NextDouble() - 0.5) * 1e-3;              }
Magic Number,CoupledAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\CoupledAxesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Model1.Series.Add(new FunctionSeries(Math.Sin' 0' 10' 1000));
Magic Number,CoupledAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\CoupledAxesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Model1.Series.Add(new FunctionSeries(Math.Sin' 0' 10' 1000));
Magic Number,CoupledAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\CoupledAxesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Model2.Series.Add(new FunctionSeries(x => Math.Sin(x) / x' 0' 10' 1000));
Magic Number,CoupledAxesDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\CoupledAxesDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Model2.Series.Add(new FunctionSeries(x => Math.Sin(x) / x' 0' 10' 1000));
Magic Number,CsvDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\CsvDemo\MainViewModel.cs,Open,The following statement contains a magic number: var tmp = new PlotModel              {                  Title = Path.GetFileNameWithoutExtension(file)'                  LegendPosition = LegendPosition.RightTop'                  LegendPlacement = LegendPlacement.Outside'                  PlotMargins = new OxyThickness(50' 0' 0' 40)              };
Magic Number,CsvDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\CsvDemo\MainViewModel.cs,Open,The following statement contains a magic number: var tmp = new PlotModel              {                  Title = Path.GetFileNameWithoutExtension(file)'                  LegendPosition = LegendPosition.RightTop'                  LegendPlacement = LegendPlacement.Outside'                  PlotMargins = new OxyThickness(50' 0' 0' 40)              };
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.ExampleModel = this.CreateModel(new DateTime(2010' 01' 01)' new DateTime(2015' 01' 01)' 3600 * 24 * 14);
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.ExampleModel = this.CreateModel(new DateTime(2010' 01' 01)' new DateTime(2015' 01' 01)' 3600 * 24 * 14);
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.ExampleModel = this.CreateModel(new DateTime(2010' 01' 01)' new DateTime(2015' 01' 01)' 3600 * 24 * 14);
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.ExampleModel = this.CreateModel(new DateTime(2010' 01' 01)' new DateTime(2015' 01' 01)' 3600 * 24 * 14);
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.ExampleModel = this.CreateModel(new DateTime(2010' 01' 01)' new DateTime(2015' 01' 01)' 3600 * 24 * 14);
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.ExampleModel2 = this.CreateModel2(new TimeSpan(0' 0' 0' 0)' new TimeSpan(0' 24' 0' 0)' 3600);
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.ExampleModel2 = this.CreateModel2(new TimeSpan(0' 0' 0' 0)' new TimeSpan(0' 24' 0' 0)' 3600);
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.SunData = this.CreateSunData(year' 59.91' 10.75' TimeZoneInfo.FindSystemTimeZoneById("W. Europe Standard Time"));
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.SunData = this.CreateSunData(year' 59.91' 10.75' TimeZoneInfo.FindSystemTimeZoneById("W. Europe Standard Time"));
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: var r = new Random(13);
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: var s1 = new LineSeries                           {                               StrokeThickness = 1'                               MarkerSize = 3'                               ItemsSource = this.Data'                               DataFieldX = "Date"'                               DataFieldY = "Value"'                               MarkerStroke = OxyColors.ForestGreen'                               MarkerType = MarkerType.Plus                           };
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,CreateModel2,The following statement contains a magic number: var r = new Random(13);
Magic Number,DateTimeDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\MainWindow.xaml.cs,CreateModel2,The following statement contains a magic number: var s1 = new LineSeries              {                  StrokeThickness = 1'                  MarkerSize = 3'                  ItemsSource = this.Data2'                  DataFieldX = "Time"'                  DataFieldY = "Value"'                  MarkerStroke = OxyColors.ForestGreen'                  MarkerType = MarkerType.Plus              };
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Deg2Rad,The following statement contains a magic number: return Math.PI * angle / 180.0;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Rad2Deg,The following statement contains a magic number: return 180.0 * angle / Math.PI;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double lngHour = longitude / 15.0;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: if (sunrise)                  t = N + ((6.0 - lngHour) / 24.0);              else                  t = N + ((18.0 - lngHour) / 24.0);
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: if (sunrise)                  t = N + ((6.0 - lngHour) / 24.0);              else                  t = N + ((18.0 - lngHour) / 24.0);
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: if (sunrise)                  t = N + ((6.0 - lngHour) / 24.0);              else                  t = N + ((18.0 - lngHour) / 24.0);
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: if (sunrise)                  t = N + ((6.0 - lngHour) / 24.0);              else                  t = N + ((18.0 - lngHour) / 24.0);
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double M = (0.9856 * t) - 3.289;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double M = (0.9856 * t) - 3.289;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double L = M + (1.916 * Math.Sin(Deg2Rad(M))) + (0.020 * Math.Sin(Deg2Rad(2 * M))) + 282.634;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double L = M + (1.916 * Math.Sin(Deg2Rad(M))) + (0.020 * Math.Sin(Deg2Rad(2 * M))) + 282.634;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double L = M + (1.916 * Math.Sin(Deg2Rad(M))) + (0.020 * Math.Sin(Deg2Rad(2 * M))) + 282.634;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double L = M + (1.916 * Math.Sin(Deg2Rad(M))) + (0.020 * Math.Sin(Deg2Rad(2 * M))) + 282.634;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: L = FixValue(L' 0' 360);
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double RA = Rad2Deg(Math.Atan(0.91764 * Math.Tan(Deg2Rad(L))));
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: RA = FixValue(RA' 0' 360);
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double Lquadrant = (Math.Floor(L / 90.0)) * 90.0;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double Lquadrant = (Math.Floor(L / 90.0)) * 90.0;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double RAquadrant = (Math.Floor(RA / 90.0)) * 90.0;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double RAquadrant = (Math.Floor(RA / 90.0)) * 90.0;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: RA = RA / 15.0;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double sinDec = 0.39782 * Math.Sin(Deg2Rad(L));
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: if (sunrise)                  H = 360.0 - Rad2Deg(Math.Acos(cosH));              else                  H = Rad2Deg(Math.Acos(cosH));
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: H = H / 15.0;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double T = H + RA - (0.06571 * t) - 6.622;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: double T = H + RA - (0.06571 * t) - 6.622;
Magic Number,DateTimeDemo,Sun,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\DateTimeDemo\Sun.cs,Calculate,The following statement contains a magic number: UT = FixValue(UT' 0' 24);
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: pm.Axes.Add(new LinearAxis { Position = AxisPosition.Left' Minimum = 0' Maximum = 1' MajorStep = 0.2' MinorStep = 0.05' Title = "Frequency" });
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: pm.Axes.Add(new LinearAxis { Position = AxisPosition.Left' Minimum = 0' Maximum = 1' MajorStep = 0.2' MinorStep = 0.05' Title = "Frequency" });
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: pm.Axes.Add(new LinearAxis { Position = AxisPosition.Bottom' Minimum = 0' Maximum = 100' Title = "Lightness" });
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,LoadPixelData,The following statement contains a magic number: int stride = ((bitmapImage.PixelWidth * bitmapImage.Format.BitsPerPixel) + 7) / 8;
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,LoadPixelData,The following statement contains a magic number: int stride = ((bitmapImage.PixelWidth * bitmapImage.Format.BitsPerPixel) + 7) / 8;
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,LoadPixelData,The following statement contains a magic number: this.pixelData = new int[pixelByteArray.Length / 4];
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,ThrottledEvent_ThrottledMouseMove,The following statement contains a magic number: int b = 16;
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,ThrottledEvent_ThrottledMouseMove,The following statement contains a magic number: var histoR = new int[256 / b];
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,ThrottledEvent_ThrottledMouseMove,The following statement contains a magic number: var histoG = new int[256 / b];
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,ThrottledEvent_ThrottledMouseMove,The following statement contains a magic number: var histoB = new int[256 / b];
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,ThrottledEvent_ThrottledMouseMove,The following statement contains a magic number: for (double pt = 0; pt < distance; pt++)              {                  double xPos = line.X1 + (line.X2 - line.X1) * pt / distance;                  double yPos = line.Y1 + (line.Y2 - line.Y1) * pt / distance;                    var xIndex = (int)xPos;                  var yIndex = (int)yPos;                    int pixel = this.pixelData[xIndex + (yIndex * 300)];                    // the RGB values are 'packed' into an int' here we unpack them                  var blue = (byte)(pixel & 0xFF);                  pixel >>= 8;                  var green = (byte)(pixel & 0xFF);                  pixel >>= 8;                  var red = (byte)(pixel & 0xFF);                    histoR[red / b]++;                  histoG[green / b]++;                  histoB[blue / b]++;                  n++;              }
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,ThrottledEvent_ThrottledMouseMove,The following statement contains a magic number: for (double pt = 0; pt < distance; pt++)              {                  double xPos = line.X1 + (line.X2 - line.X1) * pt / distance;                  double yPos = line.Y1 + (line.Y2 - line.Y1) * pt / distance;                    var xIndex = (int)xPos;                  var yIndex = (int)yPos;                    int pixel = this.pixelData[xIndex + (yIndex * 300)];                    // the RGB values are 'packed' into an int' here we unpack them                  var blue = (byte)(pixel & 0xFF);                  pixel >>= 8;                  var green = (byte)(pixel & 0xFF);                  pixel >>= 8;                  var red = (byte)(pixel & 0xFF);                    histoR[red / b]++;                  histoG[green / b]++;                  histoB[blue / b]++;                  n++;              }
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,ThrottledEvent_ThrottledMouseMove,The following statement contains a magic number: for (double pt = 0; pt < distance; pt++)              {                  double xPos = line.X1 + (line.X2 - line.X1) * pt / distance;                  double yPos = line.Y1 + (line.Y2 - line.Y1) * pt / distance;                    var xIndex = (int)xPos;                  var yIndex = (int)yPos;                    int pixel = this.pixelData[xIndex + (yIndex * 300)];                    // the RGB values are 'packed' into an int' here we unpack them                  var blue = (byte)(pixel & 0xFF);                  pixel >>= 8;                  var green = (byte)(pixel & 0xFF);                  pixel >>= 8;                  var red = (byte)(pixel & 0xFF);                    histoR[red / b]++;                  histoG[green / b]++;                  histoB[blue / b]++;                  n++;              }
Magic Number,HistogramDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\HistogramDemo\MainWindow.xaml.cs,ThrottledEvent_ThrottledMouseMove,The following statement contains a magic number: double xScale = 100.0 / histoR.Length;
Magic Number,LegendsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\LegendsDemo\MainViewModel.cs,CreateModel,The following statement contains a magic number: var newModel = new PlotModel              {                  Title = "LineSeries"'                  LegendBorder = OxyColors.Black'                  LegendBackground = OxyColor.FromAColor(200' OxyColors.White)'                  LegendPosition = this.LegendPosition'                  LegendPlacement = this.LegendPlacement'                  LegendOrientation = this.LegendOrientation'                  LegendItemOrder = this.LegendItemOrder'                  LegendItemAlignment = this.LegendItemAlignment'                  LegendSymbolPlacement = this.LegendSymbolPlacement'                  LegendMaxWidth = this.LegendMaxWidth'                  LegendMaxHeight = this.LegendMaxHeight              };
Magic Number,LegendsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\LegendsDemo\MainViewModel.cs,CreateModel,The following statement contains a magic number: for (int i = 1; i <= n; i++)              {                  var s = new LineSeries { Title = "Series " + i };                  newModel.Series.Add(s);                  for (double x = 0; x < 2 * Math.PI; x += 0.1)                      s.Points.Add(new DataPoint(x' Math.Sin(x * i) / i + i));              }
Magic Number,LegendsDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\LegendsDemo\MainViewModel.cs,CreateModel,The following statement contains a magic number: for (int i = 1; i <= n; i++)              {                  var s = new LineSeries { Title = "Series " + i };                  newModel.Series.Add(s);                  for (double x = 0; x < 2 * Math.PI; x += 0.1)                      s.Points.Add(new DataPoint(x' Math.Sin(x * i) / i + i));              }
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: pieSeries.Slices.Add(new PieSlice("Africa"' 1030) { IsExploded = true });
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: pieSeries.Slices.Add(new PieSlice("Americas"' 929) { IsExploded = true });
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: pieSeries.Slices.Add(new PieSlice("Asia"' 4157));
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: pieSeries.Slices.Add(new PieSlice("Europe"' 739) { IsExploded = true });
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: pieSeries.Slices.Add(new PieSlice("Oceania"' 35) { IsExploded = true });
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: pieSeries.InnerDiameter = 0.2;
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: pieSeries.AngleSpan = 360;
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Continents.Add(new ContinentItem { Name = "Africa"' PopulationInMillions = 1030' IsExploded = true });
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Continents.Add(new ContinentItem { Name = "Americas"' PopulationInMillions = 929' IsExploded = true });
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Continents.Add(new ContinentItem { Name = "Asia"' PopulationInMillions = 4157 });
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Continents.Add(new ContinentItem { Name = "Europe"' PopulationInMillions = 739' IsExploded = true });
Magic Number,PieDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PieDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Continents.Add(new ContinentItem { Name = "Oceania"' PopulationInMillions = 35' IsExploded = true });
Magic Number,PolarDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PolarDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.MaxAngle = Math.PI * 2;
Magic Number,PolarDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PolarDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.MajorStep = Math.PI / 4;
Magic Number,PolarDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PolarDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.MinorStep = Math.PI / 16;
Magic Number,PolarDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PolarDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: var model = new PlotModel              {                  Title = "Polar plot"'                  Subtitle = "Archimedean spiral with equation r(θ) = θ for 0 < θ < 6π"'                  PlotType = PlotType.Polar'                  PlotMargins = new OxyThickness(20' 20' 4' 40)'                  PlotAreaBorderThickness = new OxyThickness(0)              };
Magic Number,PolarDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PolarDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: var model = new PlotModel              {                  Title = "Polar plot"'                  Subtitle = "Archimedean spiral with equation r(θ) = θ for 0 < θ < 6π"'                  PlotType = PlotType.Polar'                  PlotMargins = new OxyThickness(20' 20' 4' 40)'                  PlotAreaBorderThickness = new OxyThickness(0)              };
Magic Number,PolarDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PolarDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: var model = new PlotModel              {                  Title = "Polar plot"'                  Subtitle = "Archimedean spiral with equation r(θ) = θ for 0 < θ < 6π"'                  PlotType = PlotType.Polar'                  PlotMargins = new OxyThickness(20' 20' 4' 40)'                  PlotAreaBorderThickness = new OxyThickness(0)              };
Magic Number,PolarDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PolarDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: var model = new PlotModel              {                  Title = "Polar plot"'                  Subtitle = "Archimedean spiral with equation r(θ) = θ for 0 < θ < 6π"'                  PlotType = PlotType.Polar'                  PlotMargins = new OxyThickness(20' 20' 4' 40)'                  PlotAreaBorderThickness = new OxyThickness(0)              };
Magic Number,PolarDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PolarDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: model.Series.Add(new FunctionSeries(t => t' t => t' 0' Math.PI * 6' 0.01));
Magic Number,PolarDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\PolarDemo\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: model.Series.Add(new FunctionSeries(t => t' t => t' 0' Math.PI * 6' 0.01));
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,SetupModel,The following statement contains a magic number: PlotModel.Axes.Add(new LinearAxis { Position = AxisPosition.Left' Minimum = -2' Maximum = 2 });
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,SetupModel,The following statement contains a magic number: PlotModel.Axes.Add(new LinearAxis { Position = AxisPosition.Left' Minimum = -2' Maximum = 2 });
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,SetupModel,The following statement contains a magic number: this.numberOfSeries = this.SimulationType == SimulationType.TimeSimulation ? 1 : 20;
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,SetupModel,The following statement contains a magic number: this.timer.Change(1000' UpdateInterval);
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,Update,The following statement contains a magic number: double t = this.watch.ElapsedMilliseconds * 0.001;
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,Update,The following statement contains a magic number: for (int i = 0; i < PlotModel.Series.Count; i++)              {                  var s = (LineSeries)PlotModel.Series[i];                    switch (SimulationType)                  {                      case SimulationType.TimeSimulation:                          {                              double x = s.Points.Count > 0 ? s.Points[s.Points.Count - 1].X + 1 : 0;                              if (s.Points.Count >= 200)                                  s.Points.RemoveAt(0);                              double y = 0;                              int m = 80;                              for (int j = 0; j < m; j++)                                  y += Math.Cos(0.001 * x * j * j);                              y /= m;                              s.Points.Add(new DataPoint(x' y));                              break;                          }                        case SimulationType.Waves:                          s.Points.Clear();                          double a = 0.5 + i * 0.05;                          for (double x = -5; x <= 5; x += 0.01)                          {                              s.Points.Add(new DataPoint(x' Function(t' x' a)));                          }                            break;                  }                    n += s.Points.Count;              }
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,Update,The following statement contains a magic number: for (int i = 0; i < PlotModel.Series.Count; i++)              {                  var s = (LineSeries)PlotModel.Series[i];                    switch (SimulationType)                  {                      case SimulationType.TimeSimulation:                          {                              double x = s.Points.Count > 0 ? s.Points[s.Points.Count - 1].X + 1 : 0;                              if (s.Points.Count >= 200)                                  s.Points.RemoveAt(0);                              double y = 0;                              int m = 80;                              for (int j = 0; j < m; j++)                                  y += Math.Cos(0.001 * x * j * j);                              y /= m;                              s.Points.Add(new DataPoint(x' y));                              break;                          }                        case SimulationType.Waves:                          s.Points.Clear();                          double a = 0.5 + i * 0.05;                          for (double x = -5; x <= 5; x += 0.01)                          {                              s.Points.Add(new DataPoint(x' Function(t' x' a)));                          }                            break;                  }                    n += s.Points.Count;              }
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,Update,The following statement contains a magic number: for (int i = 0; i < PlotModel.Series.Count; i++)              {                  var s = (LineSeries)PlotModel.Series[i];                    switch (SimulationType)                  {                      case SimulationType.TimeSimulation:                          {                              double x = s.Points.Count > 0 ? s.Points[s.Points.Count - 1].X + 1 : 0;                              if (s.Points.Count >= 200)                                  s.Points.RemoveAt(0);                              double y = 0;                              int m = 80;                              for (int j = 0; j < m; j++)                                  y += Math.Cos(0.001 * x * j * j);                              y /= m;                              s.Points.Add(new DataPoint(x' y));                              break;                          }                        case SimulationType.Waves:                          s.Points.Clear();                          double a = 0.5 + i * 0.05;                          for (double x = -5; x <= 5; x += 0.01)                          {                              s.Points.Add(new DataPoint(x' Function(t' x' a)));                          }                            break;                  }                    n += s.Points.Count;              }
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,Update,The following statement contains a magic number: for (int i = 0; i < PlotModel.Series.Count; i++)              {                  var s = (LineSeries)PlotModel.Series[i];                    switch (SimulationType)                  {                      case SimulationType.TimeSimulation:                          {                              double x = s.Points.Count > 0 ? s.Points[s.Points.Count - 1].X + 1 : 0;                              if (s.Points.Count >= 200)                                  s.Points.RemoveAt(0);                              double y = 0;                              int m = 80;                              for (int j = 0; j < m; j++)                                  y += Math.Cos(0.001 * x * j * j);                              y /= m;                              s.Points.Add(new DataPoint(x' y));                              break;                          }                        case SimulationType.Waves:                          s.Points.Clear();                          double a = 0.5 + i * 0.05;                          for (double x = -5; x <= 5; x += 0.01)                          {                              s.Points.Add(new DataPoint(x' Function(t' x' a)));                          }                            break;                  }                    n += s.Points.Count;              }
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,Update,The following statement contains a magic number: for (int i = 0; i < PlotModel.Series.Count; i++)              {                  var s = (LineSeries)PlotModel.Series[i];                    switch (SimulationType)                  {                      case SimulationType.TimeSimulation:                          {                              double x = s.Points.Count > 0 ? s.Points[s.Points.Count - 1].X + 1 : 0;                              if (s.Points.Count >= 200)                                  s.Points.RemoveAt(0);                              double y = 0;                              int m = 80;                              for (int j = 0; j < m; j++)                                  y += Math.Cos(0.001 * x * j * j);                              y /= m;                              s.Points.Add(new DataPoint(x' y));                              break;                          }                        case SimulationType.Waves:                          s.Points.Clear();                          double a = 0.5 + i * 0.05;                          for (double x = -5; x <= 5; x += 0.01)                          {                              s.Points.Add(new DataPoint(x' Function(t' x' a)));                          }                            break;                  }                    n += s.Points.Count;              }
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,Update,The following statement contains a magic number: for (int i = 0; i < PlotModel.Series.Count; i++)              {                  var s = (LineSeries)PlotModel.Series[i];                    switch (SimulationType)                  {                      case SimulationType.TimeSimulation:                          {                              double x = s.Points.Count > 0 ? s.Points[s.Points.Count - 1].X + 1 : 0;                              if (s.Points.Count >= 200)                                  s.Points.RemoveAt(0);                              double y = 0;                              int m = 80;                              for (int j = 0; j < m; j++)                                  y += Math.Cos(0.001 * x * j * j);                              y /= m;                              s.Points.Add(new DataPoint(x' y));                              break;                          }                        case SimulationType.Waves:                          s.Points.Clear();                          double a = 0.5 + i * 0.05;                          for (double x = -5; x <= 5; x += 0.01)                          {                              s.Points.Add(new DataPoint(x' Function(t' x' a)));                          }                            break;                  }                    n += s.Points.Count;              }
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,Update,The following statement contains a magic number: for (int i = 0; i < PlotModel.Series.Count; i++)              {                  var s = (LineSeries)PlotModel.Series[i];                    switch (SimulationType)                  {                      case SimulationType.TimeSimulation:                          {                              double x = s.Points.Count > 0 ? s.Points[s.Points.Count - 1].X + 1 : 0;                              if (s.Points.Count >= 200)                                  s.Points.RemoveAt(0);                              double y = 0;                              int m = 80;                              for (int j = 0; j < m; j++)                                  y += Math.Cos(0.001 * x * j * j);                              y /= m;                              s.Points.Add(new DataPoint(x' y));                              break;                          }                        case SimulationType.Waves:                          s.Points.Clear();                          double a = 0.5 + i * 0.05;                          for (double x = -5; x <= 5; x += 0.01)                          {                              s.Points.Add(new DataPoint(x' Function(t' x' a)));                          }                            break;                  }                    n += s.Points.Count;              }
Magic Number,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,Update,The following statement contains a magic number: for (int i = 0; i < PlotModel.Series.Count; i++)              {                  var s = (LineSeries)PlotModel.Series[i];                    switch (SimulationType)                  {                      case SimulationType.TimeSimulation:                          {                              double x = s.Points.Count > 0 ? s.Points[s.Points.Count - 1].X + 1 : 0;                              if (s.Points.Count >= 200)                                  s.Points.RemoveAt(0);                              double y = 0;                              int m = 80;                              for (int j = 0; j < m; j++)                                  y += Math.Cos(0.001 * x * j * j);                              y /= m;                              s.Points.Add(new DataPoint(x' y));                              break;                          }                        case SimulationType.Waves:                          s.Points.Clear();                          double a = 0.5 + i * 0.05;                          for (double x = -5; x <= 5; x += 0.01)                          {                              s.Points.Add(new DataPoint(x' Function(t' x' a)));                          }                            break;                  }                    n += s.Points.Count;              }
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: double[] p = {0.85' .92' .99' 1.00};
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: double[] p = {0.85' .92' .99' 1.00};
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: double[] p = {0.85' .92' .99' 1.00};
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a1 = new MatrixTransform(new Matrix(0.85' -0.04' 0.04' 0.85' 0' 1.6));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a1 = new MatrixTransform(new Matrix(0.85' -0.04' 0.04' 0.85' 0' 1.6));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a1 = new MatrixTransform(new Matrix(0.85' -0.04' 0.04' 0.85' 0' 1.6));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a1 = new MatrixTransform(new Matrix(0.85' -0.04' 0.04' 0.85' 0' 1.6));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a1 = new MatrixTransform(new Matrix(0.85' -0.04' 0.04' 0.85' 0' 1.6));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a2 = new MatrixTransform(new Matrix(0.20' 0.23' -0.26' 0.22' 0' 1.6));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a2 = new MatrixTransform(new Matrix(0.20' 0.23' -0.26' 0.22' 0' 1.6));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a2 = new MatrixTransform(new Matrix(0.20' 0.23' -0.26' 0.22' 0' 1.6));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a2 = new MatrixTransform(new Matrix(0.20' 0.23' -0.26' 0.22' 0' 1.6));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a2 = new MatrixTransform(new Matrix(0.20' 0.23' -0.26' 0.22' 0' 1.6));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a3 = new MatrixTransform(new Matrix(-0.15' 0.26' 0.28' 0.24' 0' 0.44));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a3 = new MatrixTransform(new Matrix(-0.15' 0.26' 0.28' 0.24' 0' 0.44));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a3 = new MatrixTransform(new Matrix(-0.15' 0.26' 0.28' 0.24' 0' 0.44));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a3 = new MatrixTransform(new Matrix(-0.15' 0.26' 0.28' 0.24' 0' 0.44));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a3 = new MatrixTransform(new Matrix(-0.15' 0.26' 0.28' 0.24' 0' 0.44));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var a4 = new MatrixTransform(new Matrix(0' 0' 0' 0.16' 0' 0));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var random = new Random(17);
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var point = new Point(0.5' 0.5);
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var point = new Point(0.5' 0.5);
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var T = new MatrixTransform(new Matrix(width/6.0' 0' 0' -height/10.1' width/2.0' height));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var T = new MatrixTransform(new Matrix(width/6.0' 0' 0' -height/10.1' width/2.0' height));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: var T = new MatrixTransform(new Matrix(width/6.0' 0' 0' -height/10.1' width/2.0' height));
Magic Number,ScatterDemo,Fern,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\Fern.cs,Generate,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  var r = random.NextDouble();                    if (r < p[0])                      point = a1.Transform(point);                  else if (r < p[1])                      point = a2.Transform(point);                  else if (r < p[2])                      point = a3.Transform(point);                  else                      point = a4.Transform(point);                    points.Add(T.Transform(point));              }
Magic Number,ScatterDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var s1 = new LineSeries                           {                               StrokeThickness = 0'                               MarkerSize = 3'                               MarkerStroke = OxyColors.ForestGreen'                               MarkerType = MarkerType.Plus                           };
Magic Number,ScatterDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ScatterDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: foreach (var pt in Fern.Generate(2000))              {                  s1.Points.Add(new DataPoint(pt.X' -pt.Y));              }
Magic Number,UserControlDemo,ViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\UserControlDemo\ViewModel.cs,ViewModel,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  this.Points.Add(new DataPoint(i' r.NextDouble()));              }
Missing Default,WpfExamples,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ListBoxMouseDoubleClick);                            #line default              #line hidden              return;              }
Missing Default,AnimationsDemo,AnimationSettingsControl,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\Controls\AnimationSettingsControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\..\..\..\Examples\AnimationsDemo\Controls\AnimationSettingsControl.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnAnimateClick);                            #line default              #line hidden              return;              }
Missing Default,AnimationsDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\AnimationsDemo\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              }
Missing Default,ExportDemo,PlotModelFactory,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\PlotModelFactory.cs,Create,The following switch statement is missing a default case: switch (type)              {                  case ModelType.SineWave:                      model = CreateSineModel(0.002);                      break;                  case ModelType.SmoothInterpolation:                      model = CreateSineModel(1);                      model.Title = "Smooth interpolation";                      // Add markers to this plot                      var ls = model.Series[0] as LineSeries;                      if (ls == null) return null;                      ls.MarkerType = MarkerType.Circle;                      ls.Color = OxyColor.FromArgb(0xFF' 154' 6' 78);                      ls.MarkerStroke = ls.Color;                      ls.MarkerFill = OxyColor.FromAColor(0x70' ls.Color);                      ls.MarkerStrokeThickness = 2;                      ls.MarkerSize = 4;                        var ls2 = CreateLineSeries(Math.Sin'                                                 0' 10' 1' "interpolated curve");                      ls2.InterpolationAlgorithm = InterpolationAlgorithms.CanonicalSpline;                      model.Series.Add(ls2);                      break;                  case ModelType.NormalDistribution:                      model = CreateNormalDistributionModel();                      break;                  case ModelType.SquareWave:                      model = CreateSquareWave();                      break;                  case ModelType.LogLog:                      model = CreateLogLogPlot();                      break;                  case ModelType.LogLin:                      model = CreateLogLinPlot();                      break;                  case ModelType.LinLog:                      model = CreateLinLogPlot();                      break;                  case ModelType.Clover:                      // http://people.reed.edu/~jerry/Clover/cloverexcerpt.pdf                      // http://www-math.bgsu.edu/z/calc3/vectorvalued1.html                      model = CreateParametricPlot(                          t => 2 * Math.Cos(2 * t) * Math.Cos(t)'                          t => 2 * Math.Cos(2 * t) * Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Cos(t)-2*Math.Cos(2*t)*Math.Sin(t)'                          // t=>-4*Math.Sin(2*t)*Math.Sin(t)+2*Math.Cos(2*t)*Math.Cos(t)'))))                          0' Math.PI * 2' 0.01'                          "Parametric function"'                          "Using the CartesianAxes property"'                          "2cos(2t)cos(t) ' 2cos(2t)sin(t)");                      break;                  case ModelType.KochSnowflake:                      model = CreateKochSnowflake(8);                      break;                  case ModelType.KochSnowflake2:                      model = CreateKochSnowflake(8' true);                      break;                  case ModelType.KochCurve:                      model = CreateKochCurve(4);                      break;                  case ModelType.ZigZag:                      model = CreateZigZagCurve(2000);                      break;                  case ModelType.MathNotation:                      model = CreateMathNotationPlot();                      break;                  case ModelType.StraightLine:                      model = CreateParametricPlot(                          t => t'                          t => 1 + t * 1e-8' 0' 10' 0.1'                          "Straight line"' null' null);                      model.PlotType = PlotType.XY;                      break;              }
Missing Default,ExportDemo,ShellViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\ExportDemo\ShellViewModel.cs,SaveReport,The following switch statement is missing a default case: switch (ext)              {                  case ".txt":                      using (var s = File.Create(fileName))                      {                          using (var w = new TextReportWriter(s))                          {                              r.Write(w);                          }                      }                        break;                    case ".html":                      using (var s = File.Create(fileName))                      {                          using (var w = new HtmlReportWriter(s))                          {                              w.WriteReport(r' reportStyle);                          }                      }                        break;                    case ".pdf":                      using (var w = new PdfReportWriter(fileName))                      {                          w.WriteReport(r' reportStyle);                      }                        break;                    case ".rtf":                      using (var w = new RtfReportWriter(fileName))                      {                          w.WriteReport(r' reportStyle);                      }                        break;                    case ".tex":                      using (var s = File.Create(fileName))                      {                          using (var w = new LatexReportWriter(s' "Example report"' "oxyplot"))                          {                              w.WriteReport(r' reportStyle);                          }                      }                        break;                    case ".xps":                      using (var w = new FlowDocumentReportWriter())                      {                          w.WriteReport(r' reportStyle);                          w.Save(fileName);                      }                        break;                  case ".docx":                      using (var w = new WordDocumentReportWriter(fileName))                      {                          w.WriteReport(r' reportStyle);                          w.Save();                      }                        break;              }
Missing Default,OxyPlot.Wpf,MathBlock,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MathBlockDemo\MathBlock.cs,UpdateContent,The following switch statement is missing a default case: switch (horizontalAlignment)              {                  case OxyPlot.HorizontalAlignment.Right:                      x = this.ActualWidth - this.Padding.Right;                      break;                  case OxyPlot.HorizontalAlignment.Center:                      x = this.Padding.Left + ((this.ActualWidth - this.Padding.Left - this.Padding.Right) * 0.5);                      break;              }
Missing Default,OxyPlot.Wpf,MathBlock,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MathBlockDemo\MathBlock.cs,UpdateContent,The following switch statement is missing a default case: switch (verticalAlignment)              {                  case OxyPlot.VerticalAlignment.Bottom:                      y = this.ActualHeight - this.Padding.Bottom;                      break;                  case OxyPlot.VerticalAlignment.Middle:                      y = this.Padding.Top + ((this.ActualWidth - this.Padding.Bottom - this.Padding.Top) * 0.5);                      break;              }
Missing Default,MemoryTest,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\MemoryTest\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.Controls.Primitives.ButtonBase.ClickEvent;                            #line 8 "..\..\..\..\..\Examples\MemoryTest\MainWindow.xaml"              eventSetter.Handler = new System.Windows.RoutedEventHandler(this.OpenWindow_Click);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Missing Default,RefreshDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RefreshDemo\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod1_Click);                            #line default              #line hidden              return;              case 2:                            #line 7 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod2_Click);                            #line default              #line hidden              return;              case 3:                            #line 8 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod3_Click);                            #line default              #line hidden              return;              case 4:                            #line 9 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod4_Click);                            #line default              #line hidden              return;              case 5:                            #line 10 "..\..\..\..\..\Examples\RefreshDemo\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshMethod6_Click);                            #line default              #line hidden              return;              }
Missing Default,CsvDemo,MainWindow,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\CsvDemo\MainWindow.xaml.cs,SavePlot_Click,The following switch statement is missing a default case: switch (ext)                  {                      case ".png":                          plot1.SaveBitmap(dlg.FileName' 0' 0' OxyColors.Automatic);                          break;                      case ".svg":                          var rc = new CanvasRenderContext(new Canvas());                          var svg = OxyPlot.SvgExporter.ExportToString(this.vm.Model' plot1.ActualWidth' plot1.ActualHeight' false' rc);                          File.WriteAllText(dlg.FileName' svg);                          break;                      case ".pdf":                          using (var s = File.Create(dlg.FileName))                          {                              PdfExporter.Export(vm.Model' s' plot1.ActualWidth' plot1.ActualHeight);                          }                            break;                      case ".xaml":                          plot1.SaveXaml(dlg.FileName);                          break;                  }
Missing Default,RealtimeDemo,MainViewModel,C:\repos\oxyplot_oxyplot\Source\Examples\WPF\WpfExamples\Examples\RealtimeDemo\MainViewModel.cs,Update,The following switch statement is missing a default case: switch (SimulationType)                  {                      case SimulationType.TimeSimulation:                          {                              double x = s.Points.Count > 0 ? s.Points[s.Points.Count - 1].X + 1 : 0;                              if (s.Points.Count >= 200)                                  s.Points.RemoveAt(0);                              double y = 0;                              int m = 80;                              for (int j = 0; j < m; j++)                                  y += Math.Cos(0.001 * x * j * j);                              y /= m;                              s.Points.Add(new DataPoint(x' y));                              break;                          }                        case SimulationType.Waves:                          s.Points.Clear();                          double a = 0.5 + i * 0.05;                          for (double x = -5; x <= 5; x += 0.01)                          {                              s.Points.Add(new DataPoint(x' Function(t' x' a)));                          }                            break;                  }
