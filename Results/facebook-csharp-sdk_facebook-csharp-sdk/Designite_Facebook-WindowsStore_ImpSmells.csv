Implementation smell,Namespace,Class,File,Method,Description
Long Method,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The method has 265 lines of code.
Long Method,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiAsync,The method has 211 lines of code.
Long Method,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareBatchRequest,The method has 126 lines of code.
Long Method,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,InitEntities,The method has 257 lines of code.
Long Method,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The method has 181 lines of code.
Long Method,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,InitEntities,The method has 257 lines of code.
Long Method,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The method has 181 lines of code.
Long Method,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The method has 125 lines of code.
Long Method,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The method has 125 lines of code.
Long Method,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The method has 125 lines of code.
Complex Method,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,Cyclomatic complexity of the method is 23
Complex Method,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,GetException,Cyclomatic complexity of the method is 16
Complex Method,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ToDictionary,Cyclomatic complexity of the method is 8
Complex Method,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,BuildHttpQuery,Cyclomatic complexity of the method is 9
Complex Method,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ParseUrlQueryString,Cyclomatic complexity of the method is 12
Complex Method,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareBatchRequest,Cyclomatic complexity of the method is 25
Complex Method,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,GetDialogUrl,Cyclomatic complexity of the method is 8
Complex Method,Facebook,FacebookOAuthResult,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookOAuthResult.cs,FacebookOAuthResult,Cyclomatic complexity of the method is 9
Complex Method,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,Cyclomatic complexity of the method is 9
Complex Method,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,Cyclomatic complexity of the method is 12
Complex Method,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,Cyclomatic complexity of the method is 9
Complex Method,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,Cyclomatic complexity of the method is 12
Complex Method,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Complex Method,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Complex Method,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Long Parameter List,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The method has 7 parameters. Parameters: httpMethod' path' parameters' resultType' input' containsEtag' batchEtags
Long Parameter List,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ProcessResponse,The method has 5 parameters. Parameters: httpHelper' responseString' resultType' containsEtag' batchEtags
Long Parameter List,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ParseUrlQueryString,The method has 6 parameters. Parameters: path' parameters' forceParseAllUrls' uri' isLegacyRestApi' isAbsolutePath
Long Parameter List,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiAsync,The method has 5 parameters. Parameters: httpMethod' path' parameters' resultType' userState
Long Parameter List,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiTaskAsync,The method has 7 parameters. Parameters: httpMethod' path' parameters' resultType' userState' cancellationToken' uploadProgress
Long Parameter List,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiTaskAsync,The method has 6 parameters. Parameters: httpMethod' path' parameters' resultType' userState' cancellationToken
Long Parameter List,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PostTaskAsync,The method has 5 parameters. Parameters: path' parameters' userState' cancellationToken' uploadProgress
Long Parameter List,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,BatchTaskAsync,The method has 5 parameters. Parameters: batchParameters' userState' parameters' cancellationToken' uploadProgress
Long Parameter List,Facebook,FacebookUploadProgressChangedEventArgs,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookUploadProgressChangedEventArgs.cs,FacebookUploadProgressChangedEventArgs,The method has 6 parameters. Parameters: bytesReceived' totalBytesToReceive' bytesSent' totalBytesToSend' progressPercentage' userToken
Long Identifier,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,,The length of the parameter AttachmentMustHavePropertiesSetError is 36.
Long Identifier,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,,The length of the parameter AtLeastOneBatchParameterRequried is 32.
Long Identifier,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,,The length of the parameter OnlyOneAttachmentAllowedPerBatchRequest is 39.
Long Identifier,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,,The length of the parameter _dataContractJsonSerializerStrategy is 35.
Long Identifier,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,,The length of the parameter _dataContractJsonSerializerStrategy is 35.
Long Identifier,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Identifier,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Identifier,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,,The length of the parameter _dataContractJsonSerializerStrategy is 35.
Long Identifier,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Statement,Facebook,DateTimeConvertor,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\DateTimeConvertor.cs,FromIso8601FormattedDateTime,The length of the statement  "            return DateTime.ParseExact(iso8601DateTime' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 156.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "            IDictionary<string' object> parametersWithoutMediaObjects = ToDictionary(parameters' out mediaObjects' out mediaStreams) ?? new Dictionary<string' object>(); " is 157.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "            path = ParseUrlQueryString(path' parametersWithoutMediaObjects' false' out uri' out isLegacyRestApi' out isAbsolutePath); " is 121.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "                    throw new ArgumentException("Parameter cannot contain method=delete. Use Delete or DeleteAsync or DeleteTaskAsync methods instead."' "parameters"); " is 147.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "                    throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "{0} is only supported for http get method."' ETagKey)' "httpMethod"); " is 142.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "                    throw new InvalidOperationException("Attachments (FacebookMediaObject/FacebookMediaStream) are valid only in POST requests."); " is 126.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "                    queryString.AppendFormat("{0}={1}&"' HttpHelper.UrlEncode(kvp.Key)' HttpHelper.UrlEncode(BuildHttpQuery(kvp.Value' HttpHelper.UrlEncode))); " is 139.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "                        sb.AppendFormat("{0}={1}&"' HttpHelper.UrlEncode(kvp.Key)' HttpHelper.UrlEncode(BuildHttpQuery(kvp.Value' HttpHelper.UrlEncode))); " is 130.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "                        sbMediaObject.Append("Content-Disposition: form-data; name=\"").Append(facebookMediaObject.Key).Append("\"; filename=\"").Append(mediaObject.FileName).Append("\"").Append(MultiPartNewLine); " is 189.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "                        sbMediaObject.Append("Content-Type: ").Append(mediaObject.ContentType).Append(MultiPartNewLine).Append(MultiPartNewLine); " is 121.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "                        sbMediaStream.Append("Content-Disposition: form-data; name=\"").Append(facebookMediaStream.Key).Append("\"; filename=\"").Append(mediaStream.FileName).Append("\"").Append(MultiPartNewLine); " is 189.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "                        sbMediaStream.Append("Content-Type: ").Append(mediaStream.ContentType).Append(MultiPartNewLine).Append(MultiPartNewLine); " is 121.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareRequest,The length of the statement  "                    streams.Add(new MemoryStream(Encoding.UTF8.GetBytes(string.Concat(MultiPartNewLine' MultiPartFormPrefix' boundary' MultiPartFormPrefix' MultiPartNewLine)))); " is 157.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,BuildHttpQuery,The length of the statement  "                    throw new InvalidOperationException("Parameter can contain attachements (FacebookMediaObject/FacebookMediaStream) only in the top most level."); " is 144.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiAsync,The length of the statement  "                                var contentEncoding = httpHelper.HttpWebResponse.Headers.AllKeys.Contains("Content-Encoding") ? httpHelper.HttpWebResponse.Headers["Content-Encoding"] : null; " is 158.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiAsync,The length of the statement  "                                        using (var uncompressedStream = new System.IO.Compression.GZipStream(stream' System.IO.Compression.CompressionMode.Decompress)) " is 127.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiAsync,The length of the statement  "                                        using (var uncompressedStream = new System.IO.Compression.DeflateStream(stream' System.IO.Compression.CompressionMode.Decompress)) " is 130.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiAsync,The length of the statement  "                            args = httpHelper.HttpWebRequest.IsCancelled ? new FacebookApiEventArgs(ex' true' userState' null) : new FacebookApiEventArgs(ex' false' userState' null); " is 154.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiAsync,The length of the statement  "                                            OnUploadProgressChanged(new FacebookUploadProgressChangedEventArgs(0' 0' bytesSent' totalBytesToSend' ((int)(bytesSent * 100 / totalBytesToSend))' userState)); " is 159.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiTaskAsync,The length of the statement  "                                                uploadProgress.Report(new FacebookUploadProgressChangedEventArgs(e.BytesReceived' e.TotalBytesToReceive' e.BytesSent' e.TotalBytesToSend' e.ProgressPercentage' userState)); " is 172.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareBatchRequest,The length of the statement  "                    throw new ArgumentException("Attachments (FacebookMediaObject/FacebookMediaStream) are only allowed in FacebookBatchParameter.Parameters"); " is 139.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareBatchRequest,The length of the statement  "                var pars = ToDictionary(batchParameter.Parameters' out mediaObjects' out mediaStreams) ?? new Dictionary<string' object>(); " is 123.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareBatchRequest,The length of the statement  "                        throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Attachment (FacebookMediaObject/FacebookMediaStream) with key '{0}' already exists"' attachment.Key)); " is 175.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareBatchRequest,The length of the statement  "                        throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Attachment (FacebookMediaObject/FacebookMediaStream) with key '{0}' already exists"' attachment.Key)); " is 175.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareBatchRequest,The length of the statement  "                            relativeUrl.AppendFormat("{0}={1}&"' HttpHelper.UrlEncode(kvp.Key)' HttpHelper.UrlEncode(BuildHttpQuery(kvp.Value' HttpHelper.UrlEncode))); " is 139.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,PrepareBatchRequest,The length of the statement  "                            sb.AppendFormat("{0}={1}&"' HttpHelper.UrlEncode(kvp.Key)' HttpHelper.UrlEncode(BuildHttpQuery(kvp.Value' HttpHelper.UrlEncode))); " is 130.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,GetDialogUrl,The length of the statement  "            if (dialog.Equals("oauth"' StringComparison.OrdinalIgnoreCase) && !dictionary.ContainsKey("client_id") && !string.IsNullOrEmpty(this.AppId)) " is 140.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,GetDialogUrl,The length of the statement  "            if (!dialog.Equals("oauth"' StringComparison.OrdinalIgnoreCase) && !dictionary.ContainsKey("app_id") && !string.IsNullOrEmpty(this.AppId)) " is 138.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,GetDialogUrl,The length of the statement  "                sb.AppendFormat("{0}={1}&"' HttpHelper.UrlEncode(kvp.Key)' HttpHelper.UrlEncode(BuildHttpQuery(kvp.Value' HttpHelper.UrlEncode))); " is 130.
Long Statement,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,GetLogoutUrl,The length of the statement  "                    sb.AppendFormat("{0}={1}&"' HttpHelper.UrlEncode(kvp.Key)' HttpHelper.UrlEncode(BuildHttpQuery(kvp.Value' HttpHelper.UrlEncode))); " is 130.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenReadAsync,The length of the statement  "                        OnOpenReadCompleted(new OpenReadCompletedEventArgs(null' webExceptionWrapper' webExceptionWrapper.Status == WebExceptionStatus.RequestCanceled' userToken)); " is 156.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenWriteAsync,The length of the statement  "                        OnOpenWriteCompleted(new OpenWriteCompletedEventArgs(stream' exception' exception != null && exception.Status == WebExceptionStatus.RequestCanceled' userToken)); " is 161.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenWriteAsync,The length of the statement  "                webExceptionWrapper = new WebExceptionWrapper(new WebException("An error occurred performing a http web request."' ex)); " is 120.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenWriteAsync,The length of the statement  "                    OnOpenWriteCompleted(new OpenWriteCompletedEventArgs(null' webExceptionWrapper' webExceptionWrapper.Status == WebExceptionStatus.RequestCanceled' userToken)); " is 158.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,ResponseCallback,The length of the statement  "            OnOpenReadCompleted(new OpenReadCompletedEventArgs(stream' webExceptionWrapper' webExceptionWrapper != null && webExceptionWrapper.Status == WebExceptionStatus.RequestCanceled' userToken)); " is 189.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenReadTaskAsync,The length of the statement  "            handler = (sender' e) => TransferCompletionToTask(tcs' e' () => e.Result' () => { ctr.Dispose(); OpenReadCompleted -= handler; }); " is 130.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenWriteTaskAsync,The length of the statement  "            handler = (sender' e) => TransferCompletionToTask(tcs' e' () => e.Result' () => { ctr.Dispose(); OpenWriteCompleted -= handler; }); " is 131.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenReadAsync,The length of the statement  "                        OnOpenReadCompleted(new OpenReadCompletedEventArgs(null' webExceptionWrapper' webExceptionWrapper.Status == WebExceptionStatus.RequestCanceled' userToken)); " is 156.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenWriteAsync,The length of the statement  "                        OnOpenWriteCompleted(new OpenWriteCompletedEventArgs(stream' exception' exception != null && exception.Status == WebExceptionStatus.RequestCanceled' userToken)); " is 161.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenWriteAsync,The length of the statement  "                webExceptionWrapper = new WebExceptionWrapper(new WebException("An error occurred performing a http web request."' ex)); " is 120.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenWriteAsync,The length of the statement  "                    OnOpenWriteCompleted(new OpenWriteCompletedEventArgs(null' webExceptionWrapper' webExceptionWrapper.Status == WebExceptionStatus.RequestCanceled' userToken)); " is 158.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,ResponseCallback,The length of the statement  "            OnOpenReadCompleted(new OpenReadCompletedEventArgs(stream' webExceptionWrapper' webExceptionWrapper != null && webExceptionWrapper.Status == WebExceptionStatus.RequestCanceled' userToken)); " is 189.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenReadTaskAsync,The length of the statement  "            handler = (sender' e) => TransferCompletionToTask(tcs' e' () => e.Result' () => { ctr.Dispose(); OpenReadCompleted -= handler; }); " is 130.
Long Statement,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,OpenWriteTaskAsync,The length of the statement  "            handler = (sender' e) => TransferCompletionToTask(tcs' e' () => e.Result' () => { ctr.Dispose(); OpenWriteCompleted -= handler; }); " is 131.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                        else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                            list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                        else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                            list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,Facebook,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Facebook,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                        result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 141.
Long Statement,Facebook,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 132.
Long Statement,Facebook,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,CanAdd,The length of the statement  "            DataMemberAttribute dataMemberAttribute = (DataMemberAttribute)ReflectionUtils.GetAttribute(info' typeof(DataMemberAttribute)); " is 127.
Long Statement,Facebook,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Facebook,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                        result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 141.
Long Statement,Facebook,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 132.
Long Statement,Facebook,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,CanAdd,The length of the statement  "            DataMemberAttribute dataMemberAttribute = (DataMemberAttribute)ReflectionUtils.GetAttribute(info' typeof(DataMemberAttribute)); " is 127.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,Facebook,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Long Statement,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                        else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The length of the statement  "                            list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,Reflection,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Reflection,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                        result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 141.
Long Statement,Reflection,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[jsonKey] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 132.
Long Statement,Reflection,DataContractJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,CanAdd,The length of the statement  "            DataMemberAttribute dataMemberAttribute = (DataMemberAttribute)ReflectionUtils.GetAttribute(info' typeof(DataMemberAttribute)); " is 127.
Long Statement,Reflection,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,Reflection,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Reflection,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,Reflection,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Reflection,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,Reflection,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,Reflection,ReflectionUtils,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Complex Conditional,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,GetException,The conditional expression  "responseUri.Host == "api.facebook.com" ||                      responseUri.Host == "api-read.facebook.com" ||                      responseUri.Host == "api-video.facebook.com" ||                      responseUri.Host == "api.beta.facebook.com" ||                      responseUri.Host == "api-read.beta.facebook.com" ||                      responseUri.Host == "api-video.facebook.com""  is complex.
Complex Conditional,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,GetException,The conditional expression  "errorCode == "4" || errorCode == "API_EC_TOO_MANY_CALLS" ||                                   (errorMsg != null && errorMsg.Contains("request limit reached"))"  is complex.
Complex Conditional,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,BuildHttpQuery,The conditional expression  "parameter is int || parameter is long ||                  parameter is float || parameter is double || parameter is decimal ||                  parameter is byte || parameter is sbyte ||                  parameter is short || parameter is ushort ||                  parameter is uint || parameter is ulong"  is complex.
Complex Conditional,Facebook,JsonObject,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,TryConvert,The conditional expression  "(targetType == typeof(IEnumerable)) ||                  (targetType == typeof(IEnumerable<KeyValuePair<string' object>>)) ||                  (targetType == typeof(IDictionary<string' object>)) ||                  (targetType == typeof(IDictionary))"  is complex.
Complex Conditional,Facebook,JsonObject,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,TryConvert,The conditional expression  "(targetType == typeof(IEnumerable)) ||                  (targetType == typeof(IEnumerable<KeyValuePair<string' object>>)) ||                  (targetType == typeof(IDictionary<string' object>)) ||                  (targetType == typeof(IDictionary))"  is complex.
Complex Conditional,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Complex Conditional,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,Facebook,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Complex Conditional,Reflection,JsonObject,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,TryConvert,The conditional expression  "(targetType == typeof(IEnumerable)) ||                  (targetType == typeof(IEnumerable<KeyValuePair<string' object>>)) ||                  (targetType == typeof(IDictionary<string' object>)) ||                  (targetType == typeof(IDictionary))"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Empty Catch Block,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiTaskAsync,The method has an empty catch block.
Magic Number,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ProcessResponse,The following statement contains a magic number: try              {                  object result = null;                    Exception exception = null;                  if (httpHelper == null)                  {                      // batch row                      result = DeserializeJson(responseString' resultType);                  }                  else                  {                      var response = httpHelper.HttpWebResponse;                        if (response == null)                          throw new InvalidOperationException(UnknownResponse);                        if (response.ContentType.Contains("text/javascript") ||                          response.ContentType.Contains("application/json"))                      {                          result = DeserializeJson(responseString' null);                          exception = GetException(httpHelper' result);                          if (exception == null)                          {                              if (resultType != null)                                  result = DeserializeJson(responseString' resultType);                          }                      }                      else if (response.StatusCode == HttpStatusCode.OK && response.ContentType.Contains("text/plain"))                      {                          if (response.ResponseUri.AbsolutePath.EndsWith("/oauth/access_token"))                          {                              var body = new JsonObject();                              foreach (var kvp in responseString.Split('&'))                              {                                  var split = kvp.Split('=');                                  if (split.Length == 2)                                      body[split[0]] = split[1];                              }                                if (body.ContainsKey("expires"))                                  body["expires"] = Convert.ToInt64(body["expires"]' CultureInfo.InvariantCulture);                                result = DeserializeJson(body.ToString()' resultType);                                return result;                          }                          else                          {                              throw new InvalidOperationException(UnknownResponse);                          }                      }                      else                      {                          throw new InvalidOperationException(UnknownResponse);                      }                  }                    if (exception == null)                  {                      if (containsEtag && httpHelper != null)                      {                          var json = new JsonObject();                          var response = httpHelper.HttpWebResponse;                            var headers = new JsonObject();                          foreach (var headerName in response.Headers.AllKeys)                              headers[headerName] = response.Headers[headerName];                            json["headers"] = headers;                          json["body"] = result;                            return json;                      }                        return batchEtags == null ? result : ProcessBatchResponse(result' batchEtags);                  }                    throw exception;              }              catch (FacebookApiException)              {                  throw;              }              catch (Exception)              {                  if (httpHelper != null && httpHelper.InnerException != null)                      throw httpHelper.InnerException;                    throw;              }
Magic Number,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,GetException,The following statement contains a magic number: if (responseDict.ContainsKey("error"))              {                  var error = responseDict["error"] as IDictionary<string' object>;                  if (error != null)                  {                      var errorType = error["type"] as string;                      var errorMessage = error["message"] as string;                      int errorCode = 0;                        if (error.ContainsKey("code"))                          int.TryParse(error["code"].ToString()' out errorCode);                        var errorSubcode = 0;                      if (error.ContainsKey("error_subcode"))                          int.TryParse(error["error_subcode"].ToString()' out errorSubcode);                        string errorUserTitle = null;                      if (error.ContainsKey("error_user_title"))                          errorUserTitle = (string)error["error_user_title"];                        string errorUserMsg = null;                      if (error.ContainsKey("error_user_msg"))                          errorUserMsg = (string)error["error_user_msg"];                        // Check to make sure the correct data is in the response                      if (!string.IsNullOrEmpty(errorType) && !string.IsNullOrEmpty(errorMessage))                      {                          // We don't include the inner exception because it is not needed and is always a WebException.                          // It is easier to understand the error if we use Facebook's error message.                          if (errorType == "OAuthException")                              resultException = new FacebookOAuthException(errorMessage' errorType' errorCode' errorSubcode);                          else if (errorType == "API_EC_TOO_MANY_CALLS" || (errorMessage.Contains("request limit reached")))                              resultException = new FacebookApiLimitException(errorMessage' errorType);                          else                              resultException = new FacebookApiException(errorMessage' errorType' errorCode' errorSubcode);                      }                        resultException.ErrorUserTitle = errorUserTitle;                      resultException.ErrorUserMsg = errorUserMsg;                  }                  else                  {                      long? errorNumber = null;                      if (responseDict["error"] is long)                          errorNumber = (long)responseDict["error"];                      if (errorNumber == null && responseDict["error"] is int)                          errorNumber = (int)responseDict["error"];                      string errorDescription = null;                      if (responseDict.ContainsKey("error_description"))                          errorDescription = responseDict["error_description"] as string;                      if (errorNumber != null && !string.IsNullOrEmpty(errorDescription))                      {                          if (errorNumber == 190)                              resultException = new FacebookOAuthException(errorDescription' "API_EC_PARAM_ACCESS_TOKEN");                          else                              resultException = new FacebookApiException(errorDescription' errorNumber.Value.ToString(CultureInfo.InvariantCulture));                      }                  }              }
Magic Number,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ParseUrlQueryString,The following statement contains a magic number: if (parts.Length == 2 && parts[1] != null)              {                  // Add the query string values to the parameters dictionary                  var qs = parts[1];                  var qsItems = qs.Split('&');                    foreach (var kvp in qsItems)                  {                      if (!string.IsNullOrEmpty(kvp))                      {                          var qsPart = kvp.Split('=');                          if (qsPart.Length < 2)                          {                              // Issue #287. In some cases' facebook returns a URL with a query parameter that                              // has no value. In such cases' better to ignore and continue than throw an exception                              continue;                          }                            if (qsPart.Length == 2 && !string.IsNullOrEmpty(qsPart[0]))                          {                              var key = HttpHelper.UrlDecode(qsPart[0]);                              if (!parameters.ContainsKey(key))                                  parameters[key] = HttpHelper.UrlDecode(qsPart[1]);                          }                          else                              throw new ArgumentException("Invalid path"' "path");                      }                  }              }              else if (parts.Length > 2)              {                  throw new ArgumentException("Invalid path"' "path");              }
Magic Number,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ParseUrlQueryString,The following statement contains a magic number: if (parts.Length == 2 && parts[1] != null)              {                  // Add the query string values to the parameters dictionary                  var qs = parts[1];                  var qsItems = qs.Split('&');                    foreach (var kvp in qsItems)                  {                      if (!string.IsNullOrEmpty(kvp))                      {                          var qsPart = kvp.Split('=');                          if (qsPart.Length < 2)                          {                              // Issue #287. In some cases' facebook returns a URL with a query parameter that                              // has no value. In such cases' better to ignore and continue than throw an exception                              continue;                          }                            if (qsPart.Length == 2 && !string.IsNullOrEmpty(qsPart[0]))                          {                              var key = HttpHelper.UrlDecode(qsPart[0]);                              if (!parameters.ContainsKey(key))                                  parameters[key] = HttpHelper.UrlDecode(qsPart[1]);                          }                          else                              throw new ArgumentException("Invalid path"' "path");                      }                  }              }              else if (parts.Length > 2)              {                  throw new ArgumentException("Invalid path"' "path");              }
Magic Number,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ParseUrlQueryString,The following statement contains a magic number: if (parts.Length == 2 && parts[1] != null)              {                  // Add the query string values to the parameters dictionary                  var qs = parts[1];                  var qsItems = qs.Split('&');                    foreach (var kvp in qsItems)                  {                      if (!string.IsNullOrEmpty(kvp))                      {                          var qsPart = kvp.Split('=');                          if (qsPart.Length < 2)                          {                              // Issue #287. In some cases' facebook returns a URL with a query parameter that                              // has no value. In such cases' better to ignore and continue than throw an exception                              continue;                          }                            if (qsPart.Length == 2 && !string.IsNullOrEmpty(qsPart[0]))                          {                              var key = HttpHelper.UrlDecode(qsPart[0]);                              if (!parameters.ContainsKey(key))                                  parameters[key] = HttpHelper.UrlDecode(qsPart[1]);                          }                          else                              throw new ArgumentException("Invalid path"' "path");                      }                  }              }              else if (parts.Length > 2)              {                  throw new ArgumentException("Invalid path"' "path");              }
Magic Number,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ParseUrlQueryString,The following statement contains a magic number: if (parts.Length == 2 && parts[1] != null)              {                  // Add the query string values to the parameters dictionary                  var qs = parts[1];                  var qsItems = qs.Split('&');                    foreach (var kvp in qsItems)                  {                      if (!string.IsNullOrEmpty(kvp))                      {                          var qsPart = kvp.Split('=');                          if (qsPart.Length < 2)                          {                              // Issue #287. In some cases' facebook returns a URL with a query parameter that                              // has no value. In such cases' better to ignore and continue than throw an exception                              continue;                          }                            if (qsPart.Length == 2 && !string.IsNullOrEmpty(qsPart[0]))                          {                              var key = HttpHelper.UrlDecode(qsPart[0]);                              if (!parameters.ContainsKey(key))                                  parameters[key] = HttpHelper.UrlDecode(qsPart[1]);                          }                          else                              throw new ArgumentException("Invalid path"' "path");                      }                  }              }              else if (parts.Length > 2)              {                  throw new ArgumentException("Invalid path"' "path");              }
Magic Number,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ApiAsync,The following statement contains a magic number: if (input == null)              {                  httpHelper.OpenReadAsync();              }              else              {                  // we have a request body so write                  httpHelper.OpenWriteCompleted +=                      (o' e) =>                      {                          FacebookApiEventArgs args;                          if (e.Cancelled)                          {                              input.Dispose();                              args = new FacebookApiEventArgs(e.Error' true' userState' null);                          }                          else if (e.Error == null)                          {                              try                              {                                  using (var stream = e.Result)                                  {                                      // write input to requestStream                                      var buffer = new byte[BufferSize];                                      int nread;                                        if (notifyUploadProgressChanged)                                      {                                          long totalBytesToSend = input.Length;                                          long bytesSent = 0;                                            while ((nread = input.Read(buffer' 0' buffer.Length)) != 0)                                          {                                              stream.Write(buffer' 0' nread);                                              stream.Flush();                                                // notify upload progress changed                                              bytesSent += nread;                                              OnUploadProgressChanged(new FacebookUploadProgressChangedEventArgs(0' 0' bytesSent' totalBytesToSend' ((int)(bytesSent * 100 / totalBytesToSend))' userState));                                          }                                      }                                      else                                      {                                          while ((nread = input.Read(buffer' 0' buffer.Length)) != 0)                                          {                                              stream.Write(buffer' 0' nread);                                              stream.Flush();                                          }                                      }                                  }                                    httpHelper.OpenReadAsync();                                  return;                              }                              catch (Exception ex)                              {                                  args = new FacebookApiEventArgs(ex' httpHelper.HttpWebRequest.IsCancelled' userState' null);                              }                              finally                              {                                  input.Dispose();                              }                          }                          else                          {                              input.Dispose();                              var webExceptionWrapper = e.Error as WebExceptionWrapper;                              if (webExceptionWrapper != null)                              {                                  var ex = webExceptionWrapper;                                  if (ex.GetResponse() != null)                                  {                                      httpHelper.OpenReadAsync();                                      return;                                  }                              }                                args = new FacebookApiEventArgs(e.Error' false' userState' null);                          }                            OnCompleted(httpMethod' args);                      };                    httpHelper.OpenWriteAsync();              }
Magic Number,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,ProcessBatchResponse,The following statement contains a magic number: foreach (var row in resultList)              {                  if (row == null)                  {                      // row is null when omit_response_on_success = true                      list.Add(null);                  }                  else                  {                      var batchResult = (IDictionary<string' object>)row;                      var code = Convert.ToInt64(batchResult["code"]' CultureInfo.InvariantCulture);                        object bodyAsJsonObject = null;                        try                      {                          if (batchEtags != null && batchEtags.Contains(i))                          {                              var jsonObject = new JsonObject();                              var originalHeaders = (IList<object>)batchResult["headers"];                              var headers = new JsonObject();                              foreach (var originalHeader in originalHeaders)                              {                                  var dict = (IDictionary<string' object>)originalHeader;                                  headers[(string)dict["name"]] = dict["value"];                              }                              jsonObject["headers"] = headers;                                if (code != 304)                              {                                  var body = (string)batchResult["body"];                                  jsonObject["body"] = bodyAsJsonObject = ProcessResponse(null' body' null' true' null);                              }                                bodyAsJsonObject = jsonObject;                          }                          else                          {                              var body = (string)batchResult["body"];                              bodyAsJsonObject = ProcessResponse(null' body' null' false' null);                          }                            list.Add(bodyAsJsonObject);                      }                      catch (Exception ex)                      {                          list.Add(ex);                      }                  }                    i++;              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlEncode,The following statement contains a magic number: const int MAX_LIMIT = 1000;
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255)              {                  foreach (byte b in e.GetBytes(new char[] { ch }))                      buf.Add(b);              }              else                  buf.Add((byte)ch);
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')                  return c - 'a' + 10;
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')                  return c - 'A' + 10;
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,FromHex,The following statement contains a magic number: if ('a' <= digit && digit <= 'f')                  return (int)(digit - 'a' + 10);
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,FromHex,The following statement contains a magic number: if ('A' <= digit && digit <= 'F')                  return (int)(digit - 'A' + 10);
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlEncode,The following statement contains a magic number: const int MAX_LIMIT = 1000;
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255)              {                  foreach (byte b in e.GetBytes(new char[] { ch }))                      buf.Add(b);              }              else                  buf.Add((byte)ch);
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')                  return c - 'a' + 10;
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')                  return c - 'A' + 10;
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }  #if NETFX_CORE                      else if (is_hex_value && IsHexDigit(c))  #else  					else if (is_hex_value && Uri.IsHexDigit(c))  #endif                      {  #if NETFX_CORE                          number = number * 16 + FromHex(c);  #else  						number = number * 16 + Uri.FromHex(c);  #endif                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,FromHex,The following statement contains a magic number: if ('a' <= digit && digit <= 'f')                  return (int)(digit - 'a' + 10);
Magic Number,Facebook,HttpHelper,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\HttpHelper.cs,FromHex,The following statement contains a magic number: if ('A' <= digit && digit <= 'F')                  return (int)(digit - 'A' + 10);
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Missing Default,Facebook,FacebookClient,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\FacebookClient.cs,RemoveTaskAsyncHandlers,The following switch statement is missing a default case: switch (httpMethod)              {                  case HttpMethod.Get:                      GetCompleted -= handler;                      break;                  case HttpMethod.Post:                      PostCompleted -= handler;                      break;                  case HttpMethod.Delete:                      DeleteCompleted -= handler;                      break;              }
Missing Default,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
Missing Default,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,Facebook,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
Missing Default,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,Reflection,SimpleJson,C:\repos\facebook-csharp-sdk_facebook-csharp-sdk\Source\Facebook\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
