Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,HasExistingLicense,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,TryLoadingLicenseValuesFromValidatedXml,Cyclomatic complexity of the method is 8
Complex Method,Rhino.Licensing.Discovery,DiscoveryHost,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\Discovery\DiscoveryHost.cs,Completed,Cyclomatic complexity of the method is 9
Long Parameter List,Rhino.Licensing,LicenseGenerator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicenseGenerator.cs,Generate,The method has 5 parameters.
Long Parameter List,Rhino.Licensing,LicenseGenerator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicenseGenerator.cs,CreateDocument,The method has 5 parameters.
Long Identifier,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,RaiseMultipleLicenseDiscovered,The length of the parameter onMultipleLicensesWereDiscovered is 32.
Long Statement,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,RaiseLicenseInvalidated,The length of the statement  "		throw new InvalidOperationException ("License was invalidated' but there is no one subscribe to the LicenseInvalidated event"); " is 127.
Long Statement,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,RaiseLicenseInvalidated,The length of the statement  "	licenseInvalidated (LicenseType == LicenseType.Floating ? InvalidationType.CannotGetNewLicense : InvalidationType.TimeExpired); " is 127.
Long Statement,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,TryGettingNewLeaseSubscription,The length of the statement  "	var service = ChannelFactory<ISubscriptionLicensingService>.CreateChannel (new BasicHttpBinding ()' new EndpointAddress (SubscriptionEndpoint)); " is 144.
Long Statement,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,TryLoadingLicenseValuesFromValidatedXml,The length of the statement  "				throw new InvalidOperationException ("Invalid license file format' floating license without license server public key"); " is 120.
Long Statement,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,ValidateFloatingLicense,The length of the statement  "	var licensingService = ChannelFactory<ILicensingService>.CreateChannel (new WSHttpBinding ()' new EndpointAddress (licenseServerUrl)); " is 134.
Long Statement,Rhino.Licensing,LicensingService,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicensingService.cs,ReadInitialState,The length of the statement  "		throw new AccessViolationException ("Could not open file '" + state + "' for read/write' please grant read/write access to the file."' e); " is 138.
Long Statement,Rhino.Licensing,LicensingService,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicensingService.cs,GenerateLicenseAndRenewLease,The length of the statement  "	leasedLicenses [identifier] = new KeyValuePair<DateTime' LicenseValidator> (DateTime.UtcNow.AddMinutes (30)' licenseValidator); " is 127.
Long Statement,Rhino.Licensing.Discovery,DiscoveryClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\Discovery\DiscoveryClient.cs,PublishMyPresence,The length of the statement  "	Task.Factory.FromAsync<byte[]' int' IPEndPoint' int> (udpClient.BeginSend' udpClient.EndSend' buffer' buffer.Length' allHostsGroup' null).ContinueWith (task => { " is 161.
Long Statement,Rhino.Licensing.Discovery,DiscoveryHost,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\Discovery\DiscoveryHost.cs,BindUpAdaptersToMulticast,The length of the statement  "	NetworkInterface.GetAllNetworkInterfaces ().Where (card => card.OperationalStatus == OperationalStatus.Up).ToList ().ForEach (SetSocketOptionsForNic); " is 150.
Long Statement,Rhino.Licensing.Discovery,DiscoveryHost,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\Discovery\DiscoveryHost.cs,SetSocketOptionsForNic,The length of the statement  "	nic.GetIPProperties ().UnicastAddresses.Where (unicast => unicast.Address.AddressFamily == AddressFamily.InterNetwork).ToList ().ForEach (address => socket.SetSocketOption (SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption (IPAddress.Parse (AllHostsMulticastIP)' address.Address))); " is 306.
Empty Catch Block,Rhino.Licensing,LicensingService,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicensingService.cs,ReadState,The method has an empty catch block.
Empty Catch Block,Rhino.Licensing.Discovery,DiscoveryHost,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\Discovery\DiscoveryHost.cs,Completed,The method has an empty catch block.
Magic Number,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,AbstractLicenseValidator,The following statement contains a magic number: LeaseTimeout = TimeSpan.FromMinutes (5);  
Magic Number,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,ValidateSubscription,The following statement contains a magic number: if ((ExpirationDate - DateTime.UtcNow).TotalDays > 4)  	return true;  
Magic Number,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,TryGettingNewLeaseSubscription,The following statement contains a magic number: try {  	var newLicense = service.LeaseLicense (License);  	TryOverwritingWithNewLicense (newLicense);  } finally {  	var communicationObject = service as ICommunicationObject;  	if (communicationObject != null) {  		try {  			communicationObject.Close (TimeSpan.FromMilliseconds (200));  		} catch {  			communicationObject.Abort ();  		}  	}  }  
Magic Number,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,TryGettingNewLeaseSubscription,The following statement contains a magic number: if (communicationObject != null) {  	try {  		communicationObject.Close (TimeSpan.FromMilliseconds (200));  	} catch {  		communicationObject.Abort ();  	}  }  
Magic Number,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,TryGettingNewLeaseSubscription,The following statement contains a magic number: try {  	communicationObject.Close (TimeSpan.FromMilliseconds (200));  } catch {  	communicationObject.Abort ();  }  
Magic Number,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,TryGettingNewLeaseSubscription,The following statement contains a magic number: communicationObject.Close (TimeSpan.FromMilliseconds (200));  
Magic Number,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,ValidateFloatingLicense,The following statement contains a magic number: try {  	var leasedLicense = licensingService.LeaseLicense (Environment.MachineName' Environment.UserName' clientId);  	((ICommunicationObject)licensingService).Close ();  	success = true;  	if (leasedLicense == null) {  		Log.WarnFormat ("Null response from license server: {0}"' licenseServerUrl);  		throw new FloatingLicenseNotAvailableException ();  	}  	var doc = new XmlDocument ();  	doc.LoadXml (leasedLicense);  	if (TryGetValidDocument (publicKeyOfFloatingLicense' doc) == false) {  		Log.WarnFormat ("Could not get valid license from floating license server {0}"' licenseServerUrl);  		throw new FloatingLicenseNotAvailableException ();  	}  	var validLicense = ValidateXmlDocumentLicense (doc);  	if (validLicense) {  		//setup next lease  		var time = (ExpirationDate.AddMinutes (-5) - DateTime.UtcNow);  		Log.DebugFormat ("Will lease license again at {0}"' time);  		if (disableFutureChecks == false)  			nextLeaseTimer.Change (time' time);  	}  	return validLicense;  } finally {  	if (success == false)  		((ICommunicationObject)licensingService).Abort ();  }  
Magic Number,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,ValidateFloatingLicense,The following statement contains a magic number: if (validLicense) {  	//setup next lease  	var time = (ExpirationDate.AddMinutes (-5) - DateTime.UtcNow);  	Log.DebugFormat ("Will lease license again at {0}"' time);  	if (disableFutureChecks == false)  		nextLeaseTimer.Change (time' time);  }  
Magic Number,Rhino.Licensing,LicensingService,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicensingService.cs,ReadState,The following statement contains a magic number: try {  	using (var binaryReader = new BinaryReader (stream)) {  		while (true) {  			var identifier = binaryReader.ReadString ();  			var time = DateTime.FromBinary (binaryReader.ReadInt64 ());  			var userId = new Guid (binaryReader.ReadBytes (16));  			var licenseValidator = availableLicenses.FirstOrDefault (x => x.UserId == userId);  			if (licenseValidator == null)  				continue;  			leasedLicenses [identifier] = new KeyValuePair<DateTime' LicenseValidator> (time' licenseValidator);  			availableLicenses.Remove (licenseValidator);  		}  	}  } catch (EndOfStreamException) {  }  
Magic Number,Rhino.Licensing,LicensingService,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicensingService.cs,ReadState,The following statement contains a magic number: using (var binaryReader = new BinaryReader (stream)) {  	while (true) {  		var identifier = binaryReader.ReadString ();  		var time = DateTime.FromBinary (binaryReader.ReadInt64 ());  		var userId = new Guid (binaryReader.ReadBytes (16));  		var licenseValidator = availableLicenses.FirstOrDefault (x => x.UserId == userId);  		if (licenseValidator == null)  			continue;  		leasedLicenses [identifier] = new KeyValuePair<DateTime' LicenseValidator> (time' licenseValidator);  		availableLicenses.Remove (licenseValidator);  	}  }  
Magic Number,Rhino.Licensing,LicensingService,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicensingService.cs,ReadState,The following statement contains a magic number: while (true) {  	var identifier = binaryReader.ReadString ();  	var time = DateTime.FromBinary (binaryReader.ReadInt64 ());  	var userId = new Guid (binaryReader.ReadBytes (16));  	var licenseValidator = availableLicenses.FirstOrDefault (x => x.UserId == userId);  	if (licenseValidator == null)  		continue;  	leasedLicenses [identifier] = new KeyValuePair<DateTime' LicenseValidator> (time' licenseValidator);  	availableLicenses.Remove (licenseValidator);  }  
Magic Number,Rhino.Licensing,LicensingService,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicensingService.cs,LeaseLicense,The following statement contains a magic number: foreach (var kvp in leasedLicenses) {  	if ((DateTime.UtcNow - kvp.Value.Key).TotalMinutes < 45)  		continue;  	leasedLicenses.Remove (kvp.Key);  	Debug.WriteLine ("Found expired leased license' leasing it");  	return GenerateLicenseAndRenewLease (identifier' id' kvp.Value.Value' kvp.Value.Value.LicenseAttributes);  }  
Magic Number,Rhino.Licensing,LicensingService,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicensingService.cs,LeaseLicense,The following statement contains a magic number: if ((DateTime.UtcNow - kvp.Value.Key).TotalMinutes < 45)  	continue;  
Magic Number,Rhino.Licensing,LicensingService,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicensingService.cs,GenerateLicenseAndRenewLease,The following statement contains a magic number: leasedLicenses [identifier] = new KeyValuePair<DateTime' LicenseValidator> (DateTime.UtcNow.AddMinutes (30)' licenseValidator);  
Magic Number,Rhino.Licensing,LicensingService,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\LicensingService.cs,GenerateLicense,The following statement contains a magic number: return generator.Generate (validator.Name' id' DateTime.UtcNow.AddMinutes (45)' attributes' LicenseType.Floating);  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,GetIsServerMode,The following statement contains a magic number: return (sntpData [0] & 0x7) == 4/* server mode */;  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,ComputeDate,The following statement contains a magic number: return new DateTime (1900' 1' 1).Add (TimeSpan.FromMilliseconds (milliseconds));  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,GetMilliSeconds,The following statement contains a magic number: for (var i = 0; i <= 3; i++) {  	intpart = 256 * intpart + sntpData [offset + i];  }  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,GetMilliSeconds,The following statement contains a magic number: for (var i = 0; i <= 3; i++) {  	intpart = 256 * intpart + sntpData [offset + i];  }  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,GetMilliSeconds,The following statement contains a magic number: intpart = 256 * intpart + sntpData [offset + i];  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,GetMilliSeconds,The following statement contains a magic number: for (var i = 4; i <= 7; i++) {  	fractpart = 256 * fractpart + sntpData [offset + i];  }  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,GetMilliSeconds,The following statement contains a magic number: for (var i = 4; i <= 7; i++) {  	fractpart = 256 * fractpart + sntpData [offset + i];  }  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,GetMilliSeconds,The following statement contains a magic number: for (var i = 4; i <= 7; i++) {  	fractpart = 256 * fractpart + sntpData [offset + i];  }  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,GetMilliSeconds,The following statement contains a magic number: fractpart = 256 * fractpart + sntpData [offset + i];  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,EndGetHostAddress,The following statement contains a magic number: try {  	var addresses = Dns.EndGetHostAddresses (asyncResult);  	var endPoint = new IPEndPoint (addresses [0]' 123);  	var socket = new UdpClient ();  	socket.Connect (endPoint);  	socket.Client.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.ReceiveTimeout' 500);  	socket.Client.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.SendTimeout' 500);  	var sntpData = new byte[SntpDataLength];  	sntpData [0] = 0x1B;  	// version = 4 & mode = 3 (client)  	var newState = new State (socket' endPoint' state.GetTime' state.Failure);  	var result = socket.BeginSend (sntpData' sntpData.Length' EndSend' newState);  	RegisterWaitForTimeout (newState' result);  } catch (Exception) {  	// retry' recursion stops at the end of the hosts  	BeginGetDate (state.GetTime' state.Failure);  }  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,EndGetHostAddress,The following statement contains a magic number: try {  	var addresses = Dns.EndGetHostAddresses (asyncResult);  	var endPoint = new IPEndPoint (addresses [0]' 123);  	var socket = new UdpClient ();  	socket.Connect (endPoint);  	socket.Client.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.ReceiveTimeout' 500);  	socket.Client.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.SendTimeout' 500);  	var sntpData = new byte[SntpDataLength];  	sntpData [0] = 0x1B;  	// version = 4 & mode = 3 (client)  	var newState = new State (socket' endPoint' state.GetTime' state.Failure);  	var result = socket.BeginSend (sntpData' sntpData.Length' EndSend' newState);  	RegisterWaitForTimeout (newState' result);  } catch (Exception) {  	// retry' recursion stops at the end of the hosts  	BeginGetDate (state.GetTime' state.Failure);  }  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,EndGetHostAddress,The following statement contains a magic number: try {  	var addresses = Dns.EndGetHostAddresses (asyncResult);  	var endPoint = new IPEndPoint (addresses [0]' 123);  	var socket = new UdpClient ();  	socket.Connect (endPoint);  	socket.Client.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.ReceiveTimeout' 500);  	socket.Client.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.SendTimeout' 500);  	var sntpData = new byte[SntpDataLength];  	sntpData [0] = 0x1B;  	// version = 4 & mode = 3 (client)  	var newState = new State (socket' endPoint' state.GetTime' state.Failure);  	var result = socket.BeginSend (sntpData' sntpData.Length' EndSend' newState);  	RegisterWaitForTimeout (newState' result);  } catch (Exception) {  	// retry' recursion stops at the end of the hosts  	BeginGetDate (state.GetTime' state.Failure);  }  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,EndGetHostAddress,The following statement contains a magic number: socket.Client.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.ReceiveTimeout' 500);  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,EndGetHostAddress,The following statement contains a magic number: socket.Client.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.SendTimeout' 500);  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,RegisterWaitForTimeout,The following statement contains a magic number: if (result != null)  	ThreadPool.RegisterWaitForSingleObject (result.AsyncWaitHandle' MaybeOperationTimeout' newState' 500' true);  
Magic Number,Rhino.Licensing,SntpClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\SntpClient.cs,RegisterWaitForTimeout,The following statement contains a magic number: ThreadPool.RegisterWaitForSingleObject (result.AsyncWaitHandle' MaybeOperationTimeout' newState' 500' true);  
Magic Number,Rhino.Licensing.Discovery,DiscoveryClient,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\Discovery\DiscoveryClient.cs,DiscoveryClient,The following statement contains a magic number: allHostsGroup = new IPEndPoint (IPAddress.Parse ("224.0.0.1")' 12391);  
Missing Default,Rhino.Licensing,AbstractLicenseValidator,F:\newReposMay17\ayende_rhino-licensing\Rhino.Licensing\AbstractLicenseValidator.cs,DiscoveryHostOnClientDiscovered,The following switch statement is missing a default case: switch (MultipleLicenseUsageBehavior) {  case MultipleLicenseUsage.AllowForSameUser:  	if (Environment.UserName == clientDiscoveredEventArgs.UserName)  		return;  	break;  }  
