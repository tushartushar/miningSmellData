Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,DeleteNode,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,UpdateIsVisible,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,OnChildrenChanged,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,SetIsChecked,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,RaiseIsLastChangedIfNeeded,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.TreeView,SharpTreeNodeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeNodeView.cs,Node_PropertyChanged,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,OnKeyDown,Cyclomatic complexity of the method is 30
Complex Method,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,BuildDropTargets,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,ShowPreview,Cyclomatic complexity of the method is 8
Long Statement,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,CheckInvariants,The length of the statement  "	Debug.Assert (totalListLength == -1 || totalListLength == (left != null ? left.totalListLength : 0) + (isVisible ? 1 : 0) + (right != null ? right.totalListLength : 0)); " is 169.
Long Statement,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,DumpTree,The length of the statement  "	Debug.WriteLine ("{0}' totalListLength={1}' height={2}' Balance={3}' isVisible={4}"' ToString ()' totalListLength' height' Balance' isVisible); " is 143.
Long Statement,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,OnKeyDown,The length of the statement  "		if (container != null && Keyboard.Modifiers == ModifierKeys.None && this.SelectedItems.Count == 1 && this.SelectedItem == container.Node) { " is 139.
Long Statement,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,FocusNode,The length of the statement  "	// WPF's ScrollIntoView() uses the same if/dispatcher construct' so we call OnFocusItem() after the item was brought into view. " is 127.
Long Statement,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,RegisterCommands,The length of the statement  "	CommandManager.RegisterClassCommandBinding (typeof(SharpTreeView)' new CommandBinding (ApplicationCommands.Cut' HandleExecuted_Cut' HandleCanExecute_Cut)); " is 155.
Long Statement,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,RegisterCommands,The length of the statement  "	CommandManager.RegisterClassCommandBinding (typeof(SharpTreeView)' new CommandBinding (ApplicationCommands.Copy' HandleExecuted_Copy' HandleCanExecute_Copy)); " is 158.
Long Statement,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,RegisterCommands,The length of the statement  "	CommandManager.RegisterClassCommandBinding (typeof(SharpTreeView)' new CommandBinding (ApplicationCommands.Paste' HandleExecuted_Paste' HandleCanExecute_Paste)); " is 161.
Long Statement,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,RegisterCommands,The length of the statement  "	CommandManager.RegisterClassCommandBinding (typeof(SharpTreeView)' new CommandBinding (ApplicationCommands.Delete' HandleExecuted_Delete' HandleCanExecute_Delete)); " is 164.
Long Statement,ICSharpCode.TreeView,SharpTreeViewItem,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeViewItem.cs,OnMouseMove,The length of the statement  "		if (Math.Abs (currentPoint.X - startPoint.X) >= SystemParameters.MinimumHorizontalDragDistance || Math.Abs (currentPoint.Y - startPoint.Y) >= SystemParameters.MinimumVerticalDragDistance) { " is 189.
Long Statement,ICSharpCode.TreeView,SharpTreeViewItemAutomationPeer,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeViewItemAutomationPeer.cs,OnPropertyChanged,The length of the statement  "	RaisePropertyChangedEvent (ExpandCollapsePatternIdentifiers.ExpandCollapseStateProperty' oldValue ? ExpandCollapseState.Expanded : ExpandCollapseState.Collapsed' newValue ? ExpandCollapseState.Expanded : ExpandCollapseState.Collapsed); " is 235.
Complex Conditional,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,OnKeyDown,The conditional expression  "container != null && Keyboard.Modifiers == ModifierKeys.None && this.SelectedItems.Count == 1 && this.SelectedItem == container.Node"  is complex.
Magic Number,ICSharpCode.TreeView,LinesRenderer,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\LinesRenderer.cs,OnRender,The following statement contains a magic number: if (!NodeView.Node.IsRoot || NodeView.ParentTreeView.ShowRootExpander) {  	dc.DrawLine (pen' new Point (p.X' ActualHeight / 2)' new Point (p.X + 10' ActualHeight / 2));  }  
Magic Number,ICSharpCode.TreeView,LinesRenderer,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\LinesRenderer.cs,OnRender,The following statement contains a magic number: if (!NodeView.Node.IsRoot || NodeView.ParentTreeView.ShowRootExpander) {  	dc.DrawLine (pen' new Point (p.X' ActualHeight / 2)' new Point (p.X + 10' ActualHeight / 2));  }  
Magic Number,ICSharpCode.TreeView,LinesRenderer,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\LinesRenderer.cs,OnRender,The following statement contains a magic number: if (!NodeView.Node.IsRoot || NodeView.ParentTreeView.ShowRootExpander) {  	dc.DrawLine (pen' new Point (p.X' ActualHeight / 2)' new Point (p.X + 10' ActualHeight / 2));  }  
Magic Number,ICSharpCode.TreeView,LinesRenderer,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\LinesRenderer.cs,OnRender,The following statement contains a magic number: dc.DrawLine (pen' new Point (p.X' ActualHeight / 2)' new Point (p.X + 10' ActualHeight / 2));  
Magic Number,ICSharpCode.TreeView,LinesRenderer,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\LinesRenderer.cs,OnRender,The following statement contains a magic number: dc.DrawLine (pen' new Point (p.X' ActualHeight / 2)' new Point (p.X + 10' ActualHeight / 2));  
Magic Number,ICSharpCode.TreeView,LinesRenderer,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\LinesRenderer.cs,OnRender,The following statement contains a magic number: dc.DrawLine (pen' new Point (p.X' ActualHeight / 2)' new Point (p.X + 10' ActualHeight / 2));  
Magic Number,ICSharpCode.TreeView,LinesRenderer,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\LinesRenderer.cs,OnRender,The following statement contains a magic number: if (NodeView.Node.IsLast) {  	dc.DrawLine (pen' p' new Point (p.X' ActualHeight / 2));  } else {  	dc.DrawLine (pen' p' new Point (p.X' ActualHeight));  }  
Magic Number,ICSharpCode.TreeView,LinesRenderer,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\LinesRenderer.cs,OnRender,The following statement contains a magic number: dc.DrawLine (pen' p' new Point (p.X' ActualHeight / 2));  
Magic Number,ICSharpCode.TreeView,LinesRenderer,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\LinesRenderer.cs,OnRender,The following statement contains a magic number: while (true) {  	p.X -= 19;  	current = current.Parent;  	if (p.X < 0)  		break;  	if (!current.IsLast) {  		dc.DrawLine (pen' p' new Point (p.X' ActualHeight));  	}  }  
Magic Number,ICSharpCode.TreeView,LinesRenderer,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\LinesRenderer.cs,OnRender,The following statement contains a magic number: p.X -= 19;  
Magic Number,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,RaiseIsLastChangedIfNeeded,The following statement contains a magic number: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	if (e.NewStartingIndex == Children.Count - 1) {  		if (Children.Count > 1) {  			Children [Children.Count - 2].RaisePropertyChanged ("IsLast");  		}  		Children [Children.Count - 1].RaisePropertyChanged ("IsLast");  	}  	break;  case NotifyCollectionChangedAction.Remove:  	if (e.OldStartingIndex == Children.Count) {  		if (Children.Count > 0) {  			Children [Children.Count - 1].RaisePropertyChanged ("IsLast");  		}  	}  	break;  }  
Magic Number,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,RaiseIsLastChangedIfNeeded,The following statement contains a magic number: if (e.NewStartingIndex == Children.Count - 1) {  	if (Children.Count > 1) {  		Children [Children.Count - 2].RaisePropertyChanged ("IsLast");  	}  	Children [Children.Count - 1].RaisePropertyChanged ("IsLast");  }  
Magic Number,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,RaiseIsLastChangedIfNeeded,The following statement contains a magic number: if (Children.Count > 1) {  	Children [Children.Count - 2].RaisePropertyChanged ("IsLast");  }  
Magic Number,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,RaiseIsLastChangedIfNeeded,The following statement contains a magic number: Children [Children.Count - 2].RaisePropertyChanged ("IsLast");  
Magic Number,ICSharpCode.TreeView,SharpTreeNodeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeNodeView.cs,CalculateIndent,The following statement contains a magic number: if (ParentTreeView.ShowRoot) {  	if (!ParentTreeView.ShowRootExpander) {  		if (ParentTreeView.Root != Node) {  			result -= 15;  		}  	}  } else {  	result -= 19;  }  
Magic Number,ICSharpCode.TreeView,SharpTreeNodeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeNodeView.cs,CalculateIndent,The following statement contains a magic number: if (ParentTreeView.ShowRoot) {  	if (!ParentTreeView.ShowRootExpander) {  		if (ParentTreeView.Root != Node) {  			result -= 15;  		}  	}  } else {  	result -= 19;  }  
Magic Number,ICSharpCode.TreeView,SharpTreeNodeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeNodeView.cs,CalculateIndent,The following statement contains a magic number: if (!ParentTreeView.ShowRootExpander) {  	if (ParentTreeView.Root != Node) {  		result -= 15;  	}  }  
Magic Number,ICSharpCode.TreeView,SharpTreeNodeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeNodeView.cs,CalculateIndent,The following statement contains a magic number: if (ParentTreeView.Root != Node) {  	result -= 15;  }  
Magic Number,ICSharpCode.TreeView,SharpTreeNodeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeNodeView.cs,CalculateIndent,The following statement contains a magic number: result -= 15;  
Magic Number,ICSharpCode.TreeView,SharpTreeNodeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeNodeView.cs,CalculateIndent,The following statement contains a magic number: result -= 19;  
Magic Number,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,SharpTreeView,The following statement contains a magic number: AlternationCountProperty.OverrideMetadata (typeof(SharpTreeView)' new FrameworkPropertyMetadata (2));  
Magic Number,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,BuildDropTargets,The following statement contains a magic number: if (result.Count == 2) {  	if (result [0].Place == DropPlace.Inside && result [1].Place != DropPlace.Inside) {  		result [0].Y = y3;  	} else if (result [0].Place != DropPlace.Inside && result [1].Place == DropPlace.Inside) {  		result [0].Y = y1;  	} else {  		result [0].Y = y2;  	}  } else if (result.Count == 3) {  	result [0].Y = y1;  	result [1].Y = y3;  }  
Magic Number,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,BuildDropTargets,The following statement contains a magic number: if (result.Count == 2) {  	if (result [0].Place == DropPlace.Inside && result [1].Place != DropPlace.Inside) {  		result [0].Y = y3;  	} else if (result [0].Place != DropPlace.Inside && result [1].Place == DropPlace.Inside) {  		result [0].Y = y1;  	} else {  		result [0].Y = y2;  	}  } else if (result.Count == 3) {  	result [0].Y = y1;  	result [1].Y = y3;  }  
Magic Number,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,BuildDropTargets,The following statement contains a magic number: if (result.Count == 3) {  	result [0].Y = y1;  	result [1].Y = y3;  }  
Magic Number,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,ShowPreview,The following statement contains a magic number: if (place == DropPlace.Inside) {  	previewNodeView.TextBackground = SystemColors.HighlightBrush;  	previewNodeView.Foreground = SystemColors.HighlightTextBrush;  } else {  	if (insertMarker == null) {  		var adornerLayer = AdornerLayer.GetAdornerLayer (this);  		var adorner = new GeneralAdorner (this);  		insertMarker = new InsertMarker ();  		adorner.Child = insertMarker;  		adornerLayer.Add (adorner);  	}  	insertMarker.Visibility = Visibility.Visible;  	var p1 = previewNodeView.TransformToVisual (this).Transform (new Point ());  	var p = new Point (p1.X + previewNodeView.CalculateIndent () + 4.5' p1.Y - 3);  	if (place == DropPlace.After) {  		p.Y += previewNodeView.ActualHeight;  	}  	insertMarker.Margin = new Thickness (p.X' p.Y' 0' 0);  	SharpTreeNodeView secondNodeView = null;  	var index = flattener.IndexOf (item.Node);  	if (place == DropPlace.Before) {  		if (index > 0) {  			secondNodeView = (ItemContainerGenerator.ContainerFromIndex (index - 1) as SharpTreeViewItem).NodeView;  		}  	} else if (index + 1 < flattener.Count) {  		secondNodeView = (ItemContainerGenerator.ContainerFromIndex (index + 1) as SharpTreeViewItem).NodeView;  	}  	var w = p1.X + previewNodeView.ActualWidth - p.X;  	if (secondNodeView != null) {  		var p2 = secondNodeView.TransformToVisual (this).Transform (new Point ());  		w = Math.Max (w' p2.X + secondNodeView.ActualWidth - p.X);  	}  	insertMarker.Width = w + 10;  }  
Magic Number,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,ShowPreview,The following statement contains a magic number: if (place == DropPlace.Inside) {  	previewNodeView.TextBackground = SystemColors.HighlightBrush;  	previewNodeView.Foreground = SystemColors.HighlightTextBrush;  } else {  	if (insertMarker == null) {  		var adornerLayer = AdornerLayer.GetAdornerLayer (this);  		var adorner = new GeneralAdorner (this);  		insertMarker = new InsertMarker ();  		adorner.Child = insertMarker;  		adornerLayer.Add (adorner);  	}  	insertMarker.Visibility = Visibility.Visible;  	var p1 = previewNodeView.TransformToVisual (this).Transform (new Point ());  	var p = new Point (p1.X + previewNodeView.CalculateIndent () + 4.5' p1.Y - 3);  	if (place == DropPlace.After) {  		p.Y += previewNodeView.ActualHeight;  	}  	insertMarker.Margin = new Thickness (p.X' p.Y' 0' 0);  	SharpTreeNodeView secondNodeView = null;  	var index = flattener.IndexOf (item.Node);  	if (place == DropPlace.Before) {  		if (index > 0) {  			secondNodeView = (ItemContainerGenerator.ContainerFromIndex (index - 1) as SharpTreeViewItem).NodeView;  		}  	} else if (index + 1 < flattener.Count) {  		secondNodeView = (ItemContainerGenerator.ContainerFromIndex (index + 1) as SharpTreeViewItem).NodeView;  	}  	var w = p1.X + previewNodeView.ActualWidth - p.X;  	if (secondNodeView != null) {  		var p2 = secondNodeView.TransformToVisual (this).Transform (new Point ());  		w = Math.Max (w' p2.X + secondNodeView.ActualWidth - p.X);  	}  	insertMarker.Width = w + 10;  }  
Magic Number,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,ShowPreview,The following statement contains a magic number: if (place == DropPlace.Inside) {  	previewNodeView.TextBackground = SystemColors.HighlightBrush;  	previewNodeView.Foreground = SystemColors.HighlightTextBrush;  } else {  	if (insertMarker == null) {  		var adornerLayer = AdornerLayer.GetAdornerLayer (this);  		var adorner = new GeneralAdorner (this);  		insertMarker = new InsertMarker ();  		adorner.Child = insertMarker;  		adornerLayer.Add (adorner);  	}  	insertMarker.Visibility = Visibility.Visible;  	var p1 = previewNodeView.TransformToVisual (this).Transform (new Point ());  	var p = new Point (p1.X + previewNodeView.CalculateIndent () + 4.5' p1.Y - 3);  	if (place == DropPlace.After) {  		p.Y += previewNodeView.ActualHeight;  	}  	insertMarker.Margin = new Thickness (p.X' p.Y' 0' 0);  	SharpTreeNodeView secondNodeView = null;  	var index = flattener.IndexOf (item.Node);  	if (place == DropPlace.Before) {  		if (index > 0) {  			secondNodeView = (ItemContainerGenerator.ContainerFromIndex (index - 1) as SharpTreeViewItem).NodeView;  		}  	} else if (index + 1 < flattener.Count) {  		secondNodeView = (ItemContainerGenerator.ContainerFromIndex (index + 1) as SharpTreeViewItem).NodeView;  	}  	var w = p1.X + previewNodeView.ActualWidth - p.X;  	if (secondNodeView != null) {  		var p2 = secondNodeView.TransformToVisual (this).Transform (new Point ());  		w = Math.Max (w' p2.X + secondNodeView.ActualWidth - p.X);  	}  	insertMarker.Width = w + 10;  }  
Magic Number,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,ShowPreview,The following statement contains a magic number: insertMarker.Width = w + 10;  
Magic Number,ICSharpCode.TreeView,SharpTreeViewItem,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeViewItem.cs,OnMouseLeftButtonDown,The following statement contains a magic number: if (Mouse.LeftButton == MouseButtonState.Pressed) {  	startPoint = e.GetPosition (null);  	CaptureMouse ();  	if (e.ClickCount == 2) {  		wasDoubleClick = true;  	}  }  
Magic Number,ICSharpCode.TreeView,SharpTreeViewItem,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeViewItem.cs,OnMouseLeftButtonDown,The following statement contains a magic number: if (e.ClickCount == 2) {  	wasDoubleClick = true;  }  
Missing Default,ICSharpCode.TreeView,SharpTreeNode,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\FlatListTreeNode.cs,RaiseIsLastChangedIfNeeded,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	if (e.NewStartingIndex == Children.Count - 1) {  		if (Children.Count > 1) {  			Children [Children.Count - 2].RaisePropertyChanged ("IsLast");  		}  		Children [Children.Count - 1].RaisePropertyChanged ("IsLast");  	}  	break;  case NotifyCollectionChangedAction.Remove:  	if (e.OldStartingIndex == Children.Count) {  		if (Children.Count > 0) {  			Children [Children.Count - 1].RaisePropertyChanged ("IsLast");  		}  	}  	break;  }  
Missing Default,ICSharpCode.TreeView,SharpTreeView,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeView.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key) {  case Key.Left:  	if (container != null && ItemsControl.ItemsControlFromItemContainer (container) == this) {  		if (container.Node.IsExpanded) {  			container.Node.IsExpanded = false;  		} else if (container.Node.Parent != null) {  			this.FocusNode (container.Node.Parent);  		}  		e.Handled = true;  	}  	break;  case Key.Right:  	if (container != null && ItemsControl.ItemsControlFromItemContainer (container) == this) {  		if (!container.Node.IsExpanded && container.Node.ShowExpander) {  			container.Node.IsExpanded = true;  		} else if (container.Node.Children.Count > 0) {  			// jump to first child:  			container.MoveFocus (new TraversalRequest (FocusNavigationDirection.Down));  		}  		e.Handled = true;  	}  	break;  case Key.Return:  case Key.Space:  	if (container != null && Keyboard.Modifiers == ModifierKeys.None && this.SelectedItems.Count == 1 && this.SelectedItem == container.Node) {  		container.Node.ActivateItem (e);  	}  	break;  case Key.Add:  	if (container != null && ItemsControl.ItemsControlFromItemContainer (container) == this) {  		container.Node.IsExpanded = true;  		e.Handled = true;  	}  	break;  case Key.Subtract:  	if (container != null && ItemsControl.ItemsControlFromItemContainer (container) == this) {  		container.Node.IsExpanded = false;  		e.Handled = true;  	}  	break;  case Key.Multiply:  	if (container != null && ItemsControl.ItemsControlFromItemContainer (container) == this) {  		container.Node.IsExpanded = true;  		ExpandRecursively (container.Node);  		e.Handled = true;  	}  	break;  }  
Missing Default,ICSharpCode.TreeView,SharpTreeViewItem,F:\newReposMay17\icsharpcode_ILSpy\SharpTreeView\SharpTreeViewItem.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key) {  case Key.F2:  	//					if (SharpTreeNode.ActiveNodes.Count == 1 && Node.IsEditable) {  	//						Node.IsEditing = true;  	//						e.Handled = true;  	//					}  	break;  case Key.Escape:  	Node.IsEditing = false;  	break;  }  
