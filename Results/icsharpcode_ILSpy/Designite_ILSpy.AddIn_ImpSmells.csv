Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ICSharpCode.ILSpy.AddIn.Commands,OpenCodeItemCommand,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Commands\OpenCodeItemCommand.cs,OnExecute,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.ILSpy.AddIn.Commands,OpenReferenceCommand,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Commands\OpenReferenceCommand.cs,OnExecute,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,GetBraces,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,GetModifiers,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,WithModifiers,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.ILSpy.AddIn,AssemblyFileFinder,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\AssemblyFileFinder.cs,DetectTargetFrameworkId,Cyclomatic complexity of the method is 11
Long Parameter List,ICSharpCode.ILSpy.AddIn,ILSpyAddInPackage,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\ILSpyAddInPackage.cs,ShowMessage,The method has 5 parameters. Parameters: buttons' defaultButton' icon' format' items
Long Parameter List,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,IsKind,The method has 5 parameters. Parameters: node' kind1' kind2' kind3' kind4
Long Parameter List,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,IsKind,The method has 6 parameters. Parameters: node' kind1' kind2' kind3' kind4' kind5
Long Identifier,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,GetBraces,The length of the parameter anonymousObjectCreationExpression is 33.
Long Identifier,ICSharpCode.ILSpy.AddIn,AssemblyFileFinder,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\AssemblyFileFinder.cs,,The length of the parameter DetectTargetFrameworkIdRefPathPattern is 37.
Long Statement,ICSharpCode.ILSpy.AddIn.Commands,ProjectReferenceForILSpy,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Commands\ProjectReferenceForILSpy.cs,GetILSpyParameters,The length of the statement  "				return new ILSpyParameters(new string[] { GacInterop.FindAssemblyInNetGac(Decompiler.Metadata.AssemblyNameReference.Parse(fusionName)) }); " is 138.
Long Statement,ICSharpCode.ILSpy.AddIn.Commands,OpenCodeItemCommand,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Commands\OpenCodeItemCommand.cs,OnExecute,The length of the statement  "						"The project output for '{1}' could not be found for analysis.{0}{0}Expected path:{0}{0}{2}{0}{0}Would you like to build the solution?"' " is 136.
Long Statement,ICSharpCode.ILSpy.AddIn.Commands,ILSpyCommand,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Commands\OpenILSpyCommand.cs,OpenAssembliesInILSpy,The length of the statement  "					owner.ShowMessage("Could not find assembly '{0}'' please ensure the project and all references were built correctly!"' assemblyFileName); " is 137.
Long Statement,ICSharpCode.ILSpy.AddIn.Commands,OpenReferenceCommand,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Commands\OpenReferenceCommand.cs,OnExecute,The length of the statement  "					owner.ShowMessage("Could not find reference '{0}'' please ensure the project and all references were built correctly!"' reference.Name); " is 136.
Long Statement,ICSharpCode.ILSpy.AddIn,ILSpyAddInPackage,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\ILSpyAddInPackage.cs,ShowMessage,The length of the statement  "			ShowMessage(OLEMSGBUTTON.OLEMSGBUTTON_OK' OLEMSGDEFBUTTON.OLEMSGDEFBUTTON_FIRST' OLEMSGICON.OLEMSGICON_INFO' format' items); " is 124.
Long Statement,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,GetBraces,The length of the statement  "                return ValueTuple.Create(anonymousObjectCreationExpression.OpenBraceToken' anonymousObjectCreationExpression.CloseBraceToken); " is 126.
Long Statement,ICSharpCode.ILSpy.AddIn,AssemblyFileFinder,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\AssemblyFileFinder.cs,IsReferenceAssembly,The length of the statement  "			if (assemblyDef.CustomAttributes.Any(ca => ca.AttributeType.FullName == "System.Runtime.CompilerServices.ReferenceAssemblyAttribute")) " is 134.
Long Statement,ICSharpCode.ILSpy.AddIn,AssemblyFileFinder,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\AssemblyFileFinder.cs,DetectTargetFrameworkId,The length of the statement  "				 * - .NETCore      -> C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.netcore.app\2.1.0\ref\netcoreapp2.1\System.Console.dll " is 133.
Long Statement,ICSharpCode.ILSpy.AddIn,AssemblyFileFinder,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\AssemblyFileFinder.cs,DetectTargetFrameworkId,The length of the statement  "				 *                 -> C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\3.0.0\ref\netcoreapp3.0\System.Runtime.Extensions.dll " is 130.
Long Statement,ICSharpCode.ILSpy.AddIn,AssemblyFileFinder,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\AssemblyFileFinder.cs,DetectTargetFrameworkId,The length of the statement  "				 * - .NETStandard  -> C:\Program Files\dotnet\sdk\NuGetFallbackFolder\netstandard.library\2.0.3\build\netstandard2.0\ref\netstandard.dll " is 135.
Long Statement,ICSharpCode.ILSpy.AddIn,Utils,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Utils.cs,GetProjectOutputAssembly,The length of the statement  "			string projectOutputPath = project.ConfigurationManager.ActiveConfiguration.Properties.Item("OutputPath").Value.ToString(); " is 123.
Magic Number,ICSharpCode.ILSpy.AddIn.Commands,NuGetReferenceForILSpy,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Commands\NuGetReferenceForILSpy.cs,GetILSpyParameters,The following statement contains a magic number: return new ILSpyParameters(new[] { $"{properties[2]}\\{properties[0]}.{properties[1]}.nupkg" });
Magic Number,ICSharpCode.ILSpy.AddIn.Commands,NuGetReferenceForILSpy,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Commands\NuGetReferenceForILSpy.cs,GetILSpyParameters,The following statement contains a magic number: properties[0] != null && properties[1] != null && properties[2] != null
Magic Number,ICSharpCode.ILSpy.AddIn,ILSpyInstance,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\ILSpyInstance.cs,SendMessage,The following statement contains a magic number: Task.Run(async () => {  				bool success = false;  				int remainingAttempts = 20;  				do {  					NativeMethods.EnumWindows(  						(hWnd' lParam) => {  							string windowTitle = NativeMethods.GetWindowText(hWnd' 100);  							if (windowTitle.StartsWith("ILSpy"' StringComparison.Ordinal)) {  								Debug.WriteLine("Found {0:x4}: {1}"' hWnd' windowTitle);  								IntPtr result = Send(hWnd' message);  								Debug.WriteLine("WM_COPYDATA result: {0:x8}"' result);  								if (result == (IntPtr)1) {  									if (activate)  										NativeMethods.SetForegroundWindow(hWnd);  									success = true;  									return false; // stop enumeration  								}  							}  							return true; // continue enumeration  						}' IntPtr.Zero);    					// Wait some time before next attempt  					await Task.Delay(500);  					remainingAttempts--;  				} while (!success && (remainingAttempts > 0));  			});
Magic Number,ICSharpCode.ILSpy.AddIn,ILSpyInstance,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\ILSpyInstance.cs,SendMessage,The following statement contains a magic number: Task.Run(async () => {  				bool success = false;  				int remainingAttempts = 20;  				do {  					NativeMethods.EnumWindows(  						(hWnd' lParam) => {  							string windowTitle = NativeMethods.GetWindowText(hWnd' 100);  							if (windowTitle.StartsWith("ILSpy"' StringComparison.Ordinal)) {  								Debug.WriteLine("Found {0:x4}: {1}"' hWnd' windowTitle);  								IntPtr result = Send(hWnd' message);  								Debug.WriteLine("WM_COPYDATA result: {0:x8}"' result);  								if (result == (IntPtr)1) {  									if (activate)  										NativeMethods.SetForegroundWindow(hWnd);  									success = true;  									return false; // stop enumeration  								}  							}  							return true; // continue enumeration  						}' IntPtr.Zero);    					// Wait some time before next attempt  					await Task.Delay(500);  					remainingAttempts--;  				} while (!success && (remainingAttempts > 0));  			});
Magic Number,ICSharpCode.ILSpy.AddIn,ILSpyInstance,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\ILSpyInstance.cs,SendMessage,The following statement contains a magic number: Task.Run(async () => {  				bool success = false;  				int remainingAttempts = 20;  				do {  					NativeMethods.EnumWindows(  						(hWnd' lParam) => {  							string windowTitle = NativeMethods.GetWindowText(hWnd' 100);  							if (windowTitle.StartsWith("ILSpy"' StringComparison.Ordinal)) {  								Debug.WriteLine("Found {0:x4}: {1}"' hWnd' windowTitle);  								IntPtr result = Send(hWnd' message);  								Debug.WriteLine("WM_COPYDATA result: {0:x8}"' result);  								if (result == (IntPtr)1) {  									if (activate)  										NativeMethods.SetForegroundWindow(hWnd);  									success = true;  									return false; // stop enumeration  								}  							}  							return true; // continue enumeration  						}' IntPtr.Zero);    					// Wait some time before next attempt  					await Task.Delay(500);  					remainingAttempts--;  				} while (!success && (remainingAttempts > 0));  			});
Magic Number,ICSharpCode.ILSpy.AddIn,ILSpyInstance,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\ILSpyInstance.cs,Send,The following statement contains a magic number: lParam.Size = message.Length * 2;
Magic Number,ICSharpCode.ILSpy.AddIn,ILSpyInstance,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\ILSpyInstance.cs,Send,The following statement contains a magic number: NativeMethods.SendMessageTimeout(  					hWnd' NativeMethods.WM_COPYDATA' IntPtr.Zero' ref lParam'  					SMTO_NORMAL' 3000' out result) != IntPtr.Zero
Magic Number,ICSharpCode.ILSpy.AddIn,AssemblyFileFinder,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\AssemblyFileFinder.cs,DetectTargetFrameworkId,The following statement contains a magic number: var version = pathMatch.Groups[2].Value;
Magic Number,ICSharpCode.ILSpy.AddIn,Utils,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Utils.cs,HexStringToBytes,The following statement contains a magic number: var result = new byte[hex.Length / 2];
Magic Number,ICSharpCode.ILSpy.AddIn,Utils,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Utils.cs,HexStringToBytes,The following statement contains a magic number: result[i] = Convert.ToByte(hex.Substring(i * 2' 2)' 16);
Magic Number,ICSharpCode.ILSpy.AddIn,Utils,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Utils.cs,HexStringToBytes,The following statement contains a magic number: result[i] = Convert.ToByte(hex.Substring(i * 2' 2)' 16);
Magic Number,ICSharpCode.ILSpy.AddIn,Utils,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Utils.cs,HexStringToBytes,The following statement contains a magic number: result[i] = Convert.ToByte(hex.Substring(i * 2' 2)' 16);
Magic Number,ICSharpCode.ILSpy.AddIn,Utils,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\Utils.cs,HexStringToBytes,The following statement contains a magic number: i < hex.Length / 2
Missing Default,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,IsInStaticContext,The following switch statement is missing a default case: switch (memberDeclaration.Kind())              {                  case SyntaxKind.MethodDeclaration:                  case SyntaxKind.ConstructorDeclaration:                  case SyntaxKind.PropertyDeclaration:                  case SyntaxKind.EventDeclaration:                  case SyntaxKind.IndexerDeclaration:                      return memberDeclaration.GetModifiers().Any(SyntaxKind.StaticKeyword);                    case SyntaxKind.FieldDeclaration:                      // Inside a field one can only access static members of a type.                      return true;                    case SyntaxKind.DestructorDeclaration:                      return false;              }
Missing Default,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,IsBreakableConstruct,The following switch statement is missing a default case: switch (node.Kind())              {                  case SyntaxKind.DoStatement:                  case SyntaxKind.WhileStatement:                  case SyntaxKind.SwitchStatement:                  case SyntaxKind.ForStatement:                  case SyntaxKind.ForEachStatement:                      return true;              }
Missing Default,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,IsContinuableConstruct,The following switch statement is missing a default case: switch (node.Kind())              {                  case SyntaxKind.DoStatement:                  case SyntaxKind.WhileStatement:                  case SyntaxKind.ForStatement:                  case SyntaxKind.ForEachStatement:                      return true;              }
Missing Default,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,IsReturnableConstruct,The following switch statement is missing a default case: switch (node.Kind())              {                  case SyntaxKind.AnonymousMethodExpression:                  case SyntaxKind.SimpleLambdaExpression:                  case SyntaxKind.ParenthesizedLambdaExpression:                  case SyntaxKind.MethodDeclaration:                  case SyntaxKind.ConstructorDeclaration:                  case SyntaxKind.DestructorDeclaration:                  case SyntaxKind.GetAccessorDeclaration:                  case SyntaxKind.SetAccessorDeclaration:                  case SyntaxKind.OperatorDeclaration:                  case SyntaxKind.AddAccessorDeclaration:                  case SyntaxKind.RemoveAccessorDeclaration:                      return true;              }
Missing Default,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,IsCompoundAssignExpression,The following switch statement is missing a default case: switch (node.Kind())              {                  case SyntaxKind.AddAssignmentExpression:                  case SyntaxKind.SubtractAssignmentExpression:                  case SyntaxKind.MultiplyAssignmentExpression:                  case SyntaxKind.DivideAssignmentExpression:                  case SyntaxKind.ModuloAssignmentExpression:                  case SyntaxKind.AndAssignmentExpression:                  case SyntaxKind.ExclusiveOrAssignmentExpression:                  case SyntaxKind.OrAssignmentExpression:                  case SyntaxKind.LeftShiftAssignmentExpression:                  case SyntaxKind.RightShiftAssignmentExpression:                      return true;              }
Missing Default,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,GetModifiers,The following switch statement is missing a default case: switch (member.Kind())                  {                      case SyntaxKind.EnumDeclaration:                          return ((EnumDeclarationSyntax)member).Modifiers;                      case SyntaxKind.ClassDeclaration:                      case SyntaxKind.InterfaceDeclaration:                      case SyntaxKind.StructDeclaration:                          return ((TypeDeclarationSyntax)member).Modifiers;                      case SyntaxKind.DelegateDeclaration:                          return ((DelegateDeclarationSyntax)member).Modifiers;                      case SyntaxKind.FieldDeclaration:                          return ((FieldDeclarationSyntax)member).Modifiers;                      case SyntaxKind.EventFieldDeclaration:                          return ((EventFieldDeclarationSyntax)member).Modifiers;                      case SyntaxKind.ConstructorDeclaration:                          return ((ConstructorDeclarationSyntax)member).Modifiers;                      case SyntaxKind.DestructorDeclaration:                          return ((DestructorDeclarationSyntax)member).Modifiers;                      case SyntaxKind.PropertyDeclaration:                          return ((PropertyDeclarationSyntax)member).Modifiers;                      case SyntaxKind.EventDeclaration:                          return ((EventDeclarationSyntax)member).Modifiers;                      case SyntaxKind.IndexerDeclaration:                          return ((IndexerDeclarationSyntax)member).Modifiers;                      case SyntaxKind.OperatorDeclaration:                          return ((OperatorDeclarationSyntax)member).Modifiers;                      case SyntaxKind.ConversionOperatorDeclaration:                          return ((ConversionOperatorDeclarationSyntax)member).Modifiers;                      case SyntaxKind.MethodDeclaration:                          return ((MethodDeclarationSyntax)member).Modifiers;                      case SyntaxKind.GetAccessorDeclaration:                      case SyntaxKind.SetAccessorDeclaration:                      case SyntaxKind.AddAccessorDeclaration:                      case SyntaxKind.RemoveAccessorDeclaration:                          return ((AccessorDeclarationSyntax)member).Modifiers;                  }
Missing Default,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,WithModifiers,The following switch statement is missing a default case: switch (member.Kind())                  {                      case SyntaxKind.EnumDeclaration:                          return ((EnumDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.ClassDeclaration:                      case SyntaxKind.InterfaceDeclaration:                      case SyntaxKind.StructDeclaration:                          return ((TypeDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.DelegateDeclaration:                          return ((DelegateDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.FieldDeclaration:                          return ((FieldDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.EventFieldDeclaration:                          return ((EventFieldDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.ConstructorDeclaration:                          return ((ConstructorDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.DestructorDeclaration:                          return ((DestructorDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.PropertyDeclaration:                          return ((PropertyDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.EventDeclaration:                          return ((EventDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.IndexerDeclaration:                          return ((IndexerDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.OperatorDeclaration:                          return ((OperatorDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.ConversionOperatorDeclaration:                          return ((ConversionOperatorDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.MethodDeclaration:                          return ((MethodDeclarationSyntax)member).WithModifiers(modifiers);                      case SyntaxKind.GetAccessorDeclaration:                      case SyntaxKind.SetAccessorDeclaration:                      case SyntaxKind.AddAccessorDeclaration:                      case SyntaxKind.RemoveAccessorDeclaration:                          return ((AccessorDeclarationSyntax)member).WithModifiers(modifiers);                  }
Missing Default,ICSharpCode.ILSpy.AddIn,SyntaxNodeExtensions,D:\research\architectureSmells\repos\icsharpcode_ILSpy\ILSpy.AddIn\SyntaxNodeExtensions.cs,WithModifiers,The following switch statement is missing a default case: switch (node.Kind())              {                  case SyntaxKind.ClassDeclaration:                      return ((ClassDeclarationSyntax)node).WithModifiers(modifiers);                  case SyntaxKind.InterfaceDeclaration:                      return ((InterfaceDeclarationSyntax)node).WithModifiers(modifiers);                  case SyntaxKind.StructDeclaration:                      return ((StructDeclarationSyntax)node).WithModifiers(modifiers);              }
