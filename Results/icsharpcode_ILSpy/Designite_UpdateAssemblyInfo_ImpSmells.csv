Implementation smell,Namespace,Class,File,Method,Description
Complex Method,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,Cyclomatic complexity of the method is 12
Complex Method,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,UpdateFiles,Cyclomatic complexity of the method is 10
Complex Method,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,GetMajorVersion,Cyclomatic complexity of the method is 8
Long Statement,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The length of the statement  "				var doc = new XDocument (new XElement ("versionInfo"' new XElement ("version"' fullVersionNumber)' new XElement ("revision"' revisionNumber)' new XElement ("commitHash"' gitCommitHash)' new XElement ("branchName"' gitBranchName)' new XElement ("versionName"' versionName))); " is 274.
Long Statement,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,UpdateFiles,The length of the statement  "		bool isDefaultBranch = string.IsNullOrEmpty (gitBranchName) || gitBranchName == "master" || char.IsDigit (gitBranchName' 0); " is 124.
Long Statement,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,GetMajorVersion,The length of the statement  "				fullVersionNumber = majorVersionNumber + "." + line.Substring (pos + search.Length' e - pos - search.Length) + "." + revisionNumber; " is 132.
Empty Catch Block,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The method has an empty catch block.
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The following statement contains a magic number: try {  	string exeDir = Path.GetDirectoryName (typeof(MainClass).Assembly.Location);  	bool createdNew;  	using (Mutex mutex = new Mutex (true' "SharpDevelopUpdateAssemblyInfo" + exeDir.GetHashCode ()' out createdNew)) {  		if (!createdNew) {  			// multiple calls in parallel?  			// it's sufficient to let one call run' so just wait for the other call to finish  			try {  				mutex.WaitOne (10000);  			} catch (AbandonedMutexException) {  			}  			return 0;  		}  		if (!File.Exists ("ILSpy.sln")) {  			string mainDir = Path.GetFullPath (Path.Combine (exeDir' "../../../.."));  			if (File.Exists (Path.Combine (mainDir' "ILSpy.sln"))) {  				Directory.SetCurrentDirectory (mainDir);  			}  		}  		if (!File.Exists ("ILSpy.sln")) {  			Console.WriteLine ("Working directory must be the ILSpy repo root!");  			return 2;  		}  		RetrieveRevisionNumber ();  		for (int i = 0; i < args.Length; i++) {  			if (args [i] == "--branchname" && i + 1 < args.Length && !string.IsNullOrEmpty (args [i + 1]))  				gitBranchName = args [i + 1];  		}  		UpdateFiles ();  		if (args.Contains ("--REVISION")) {  			var doc = new XDocument (new XElement ("versionInfo"' new XElement ("version"' fullVersionNumber)' new XElement ("revision"' revisionNumber)' new XElement ("commitHash"' gitCommitHash)' new XElement ("branchName"' gitBranchName)' new XElement ("versionName"' versionName)));  			doc.Save ("REVISION");  		}  		return 0;  	}  } catch (Exception ex) {  	Console.WriteLine (ex);  	return 3;  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The following statement contains a magic number: try {  	string exeDir = Path.GetDirectoryName (typeof(MainClass).Assembly.Location);  	bool createdNew;  	using (Mutex mutex = new Mutex (true' "SharpDevelopUpdateAssemblyInfo" + exeDir.GetHashCode ()' out createdNew)) {  		if (!createdNew) {  			// multiple calls in parallel?  			// it's sufficient to let one call run' so just wait for the other call to finish  			try {  				mutex.WaitOne (10000);  			} catch (AbandonedMutexException) {  			}  			return 0;  		}  		if (!File.Exists ("ILSpy.sln")) {  			string mainDir = Path.GetFullPath (Path.Combine (exeDir' "../../../.."));  			if (File.Exists (Path.Combine (mainDir' "ILSpy.sln"))) {  				Directory.SetCurrentDirectory (mainDir);  			}  		}  		if (!File.Exists ("ILSpy.sln")) {  			Console.WriteLine ("Working directory must be the ILSpy repo root!");  			return 2;  		}  		RetrieveRevisionNumber ();  		for (int i = 0; i < args.Length; i++) {  			if (args [i] == "--branchname" && i + 1 < args.Length && !string.IsNullOrEmpty (args [i + 1]))  				gitBranchName = args [i + 1];  		}  		UpdateFiles ();  		if (args.Contains ("--REVISION")) {  			var doc = new XDocument (new XElement ("versionInfo"' new XElement ("version"' fullVersionNumber)' new XElement ("revision"' revisionNumber)' new XElement ("commitHash"' gitCommitHash)' new XElement ("branchName"' gitBranchName)' new XElement ("versionName"' versionName)));  			doc.Save ("REVISION");  		}  		return 0;  	}  } catch (Exception ex) {  	Console.WriteLine (ex);  	return 3;  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The following statement contains a magic number: try {  	string exeDir = Path.GetDirectoryName (typeof(MainClass).Assembly.Location);  	bool createdNew;  	using (Mutex mutex = new Mutex (true' "SharpDevelopUpdateAssemblyInfo" + exeDir.GetHashCode ()' out createdNew)) {  		if (!createdNew) {  			// multiple calls in parallel?  			// it's sufficient to let one call run' so just wait for the other call to finish  			try {  				mutex.WaitOne (10000);  			} catch (AbandonedMutexException) {  			}  			return 0;  		}  		if (!File.Exists ("ILSpy.sln")) {  			string mainDir = Path.GetFullPath (Path.Combine (exeDir' "../../../.."));  			if (File.Exists (Path.Combine (mainDir' "ILSpy.sln"))) {  				Directory.SetCurrentDirectory (mainDir);  			}  		}  		if (!File.Exists ("ILSpy.sln")) {  			Console.WriteLine ("Working directory must be the ILSpy repo root!");  			return 2;  		}  		RetrieveRevisionNumber ();  		for (int i = 0; i < args.Length; i++) {  			if (args [i] == "--branchname" && i + 1 < args.Length && !string.IsNullOrEmpty (args [i + 1]))  				gitBranchName = args [i + 1];  		}  		UpdateFiles ();  		if (args.Contains ("--REVISION")) {  			var doc = new XDocument (new XElement ("versionInfo"' new XElement ("version"' fullVersionNumber)' new XElement ("revision"' revisionNumber)' new XElement ("commitHash"' gitCommitHash)' new XElement ("branchName"' gitBranchName)' new XElement ("versionName"' versionName)));  			doc.Save ("REVISION");  		}  		return 0;  	}  } catch (Exception ex) {  	Console.WriteLine (ex);  	return 3;  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The following statement contains a magic number: using (Mutex mutex = new Mutex (true' "SharpDevelopUpdateAssemblyInfo" + exeDir.GetHashCode ()' out createdNew)) {  	if (!createdNew) {  		// multiple calls in parallel?  		// it's sufficient to let one call run' so just wait for the other call to finish  		try {  			mutex.WaitOne (10000);  		} catch (AbandonedMutexException) {  		}  		return 0;  	}  	if (!File.Exists ("ILSpy.sln")) {  		string mainDir = Path.GetFullPath (Path.Combine (exeDir' "../../../.."));  		if (File.Exists (Path.Combine (mainDir' "ILSpy.sln"))) {  			Directory.SetCurrentDirectory (mainDir);  		}  	}  	if (!File.Exists ("ILSpy.sln")) {  		Console.WriteLine ("Working directory must be the ILSpy repo root!");  		return 2;  	}  	RetrieveRevisionNumber ();  	for (int i = 0; i < args.Length; i++) {  		if (args [i] == "--branchname" && i + 1 < args.Length && !string.IsNullOrEmpty (args [i + 1]))  			gitBranchName = args [i + 1];  	}  	UpdateFiles ();  	if (args.Contains ("--REVISION")) {  		var doc = new XDocument (new XElement ("versionInfo"' new XElement ("version"' fullVersionNumber)' new XElement ("revision"' revisionNumber)' new XElement ("commitHash"' gitCommitHash)' new XElement ("branchName"' gitBranchName)' new XElement ("versionName"' versionName)));  		doc.Save ("REVISION");  	}  	return 0;  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The following statement contains a magic number: using (Mutex mutex = new Mutex (true' "SharpDevelopUpdateAssemblyInfo" + exeDir.GetHashCode ()' out createdNew)) {  	if (!createdNew) {  		// multiple calls in parallel?  		// it's sufficient to let one call run' so just wait for the other call to finish  		try {  			mutex.WaitOne (10000);  		} catch (AbandonedMutexException) {  		}  		return 0;  	}  	if (!File.Exists ("ILSpy.sln")) {  		string mainDir = Path.GetFullPath (Path.Combine (exeDir' "../../../.."));  		if (File.Exists (Path.Combine (mainDir' "ILSpy.sln"))) {  			Directory.SetCurrentDirectory (mainDir);  		}  	}  	if (!File.Exists ("ILSpy.sln")) {  		Console.WriteLine ("Working directory must be the ILSpy repo root!");  		return 2;  	}  	RetrieveRevisionNumber ();  	for (int i = 0; i < args.Length; i++) {  		if (args [i] == "--branchname" && i + 1 < args.Length && !string.IsNullOrEmpty (args [i + 1]))  			gitBranchName = args [i + 1];  	}  	UpdateFiles ();  	if (args.Contains ("--REVISION")) {  		var doc = new XDocument (new XElement ("versionInfo"' new XElement ("version"' fullVersionNumber)' new XElement ("revision"' revisionNumber)' new XElement ("commitHash"' gitCommitHash)' new XElement ("branchName"' gitBranchName)' new XElement ("versionName"' versionName)));  		doc.Save ("REVISION");  	}  	return 0;  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The following statement contains a magic number: if (!createdNew) {  	// multiple calls in parallel?  	// it's sufficient to let one call run' so just wait for the other call to finish  	try {  		mutex.WaitOne (10000);  	} catch (AbandonedMutexException) {  	}  	return 0;  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The following statement contains a magic number: try {  	mutex.WaitOne (10000);  } catch (AbandonedMutexException) {  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The following statement contains a magic number: mutex.WaitOne (10000);  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The following statement contains a magic number: if (!File.Exists ("ILSpy.sln")) {  	Console.WriteLine ("Working directory must be the ILSpy repo root!");  	return 2;  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The following statement contains a magic number: return 2;  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,Main,The following statement contains a magic number: return 3;  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,UpdateFiles,The following statement contains a magic number: foreach (var file in templateFiles) {  	string content;  	using (StreamReader r = new StreamReader (file.Input)) {  		content = r.ReadToEnd ();  	}  	content = content.Replace ("$INSERTVERSION$"' fullVersionNumber);  	content = content.Replace ("$INSERTMAJORVERSION$"' majorVersionNumber);  	content = content.Replace ("$INSERTREVISION$"' revisionNumber);  	content = content.Replace ("$INSERTCOMMITHASH$"' gitCommitHash);  	content = content.Replace ("$INSERTSHORTCOMMITHASH$"' gitCommitHash.Substring (0' 8));  	content = content.Replace ("$INSERTDATE$"' DateTime.Now.ToString ("MM/dd/yyyy"' CultureInfo.InvariantCulture));  	content = content.Replace ("$INSERTYEAR$"' DateTime.Now.Year.ToString ());  	content = content.Replace ("$INSERTBRANCHNAME$"' gitBranchName);  	bool isDefaultBranch = string.IsNullOrEmpty (gitBranchName) || gitBranchName == "master" || char.IsDigit (gitBranchName' 0);  	content = content.Replace ("$INSERTBRANCHPOSTFIX$"' isDefaultBranch ? "" : ("-" + gitBranchName));  	content = content.Replace ("$INSERTVERSIONNAME$"' versionName ?? "");  	content = content.Replace ("$INSERTVERSIONNAMEPOSTFIX$"' string.IsNullOrEmpty (versionName) ? "" : "-" + versionName);  	if (File.Exists (file.Output)) {  		using (StreamReader r = new StreamReader (file.Output)) {  			if (r.ReadToEnd () == content) {  				// nothing changed' do not overwrite file to prevent recompilation  				// every time.  				continue;  			}  		}  	}  	using (StreamWriter w = new StreamWriter (file.Output' false' Encoding.UTF8)) {  		w.Write (content);  	}  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,UpdateFiles,The following statement contains a magic number: content = content.Replace ("$INSERTSHORTCOMMITHASH$"' gitCommitHash.Substring (0' 8));  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,ReadBranchNameFromGit,The following statement contains a magic number: using (Process p = Process.Start (info)) {  	string line;  	gitBranchName = "(no branch)";  	while ((line = p.StandardOutput.ReadLine ()) != null) {  		if (line.StartsWith ("* "' StringComparison.Ordinal)) {  			gitBranchName = line.Substring (2);  		}  	}  	p.WaitForExit ();  	if (p.ExitCode != 0)  		throw new Exception ("git-branch exit code was " + p.ExitCode);  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,ReadBranchNameFromGit,The following statement contains a magic number: while ((line = p.StandardOutput.ReadLine ()) != null) {  	if (line.StartsWith ("* "' StringComparison.Ordinal)) {  		gitBranchName = line.Substring (2);  	}  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,ReadBranchNameFromGit,The following statement contains a magic number: if (line.StartsWith ("* "' StringComparison.Ordinal)) {  	gitBranchName = line.Substring (2);  }  
Magic Number,UpdateAssemblyInfo,MainClass,F:\newReposMay17\icsharpcode_ILSpy\BuildTools\UpdateAssemblyInfo\Main.cs,ReadBranchNameFromGit,The following statement contains a magic number: gitBranchName = line.Substring (2);  
