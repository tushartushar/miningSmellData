Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.ILSpy,Lexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,ReadDigit,The method has 196 lines of code.
Long Method,ICSharpCode.ILSpy,CSharpHighlightingTokenWriter,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpHighlightingTokenWriter.cs,WriteKeyword,The method has 156 lines of code.
Long Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedAttributeAppliedToTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedAttributeAppliedToTreeNode.cs,FindReferencesWithinInType,The method has 119 lines of code.
Complex Method,ICSharpCode.ILSpy,SelectCtorTransform,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy,Lexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,ReadIdent,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,GetSearchStrategy,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,HandleCommandLineArgumentsAfterShowList,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy.AvalonEdit,TextMarkerService,C:\repos\icsharpcode_ILSpy\ILSpy\AvalonEdit\TextMarkerService.cs,Draw,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.ILSpy.TextView,DecompilerTextView,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,ShowOutput,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedAttributeAppliedToTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedAttributeAppliedToTreeNode.cs,GetAttributeUsage,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedAttributeAppliedToTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedAttributeAppliedToTreeNode.cs,FindReferencesInAssembly,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedAttributeAppliedToTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedAttributeAppliedToTreeNode.cs,FindReferencesWithinInType,Cyclomatic complexity of the method is 40
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedAttributeAppliedToTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedAttributeAppliedToTreeNode.cs,GetAssemblyAndAnyFriends,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedEventFiredByTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedEventFiredByTreeNode.cs,FindReferencesInType,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedTypeExposedByTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedTypeExposedByTreeNode.cs,FindReferencesInType,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedTypeExposedByTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedTypeExposedByTreeNode.cs,TypeIsExposedBy,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedTypeInstantiationsTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedTypeInstantiationsTreeNode.cs,FindReferencesInType,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedVirtualMethodUsedByTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedVirtualMethodUsedByTreeNode.cs,FindReferencesInType,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,Helpers,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\Helpers.cs,IsReferencedBy,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,ScopedWhereUsedAnalyzer<T>,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\ScopedWhereUsedAnalyzer.cs,GetAssemblyAndAnyFriends,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedFieldAccessTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedFieldAccessTreeNode.cs,FindReferencesInType,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy.TreeNodes,SearchMsdnContextMenuEntry,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\SearchMsdnContextMenuEntry.cs,IsEnabled,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.ILSpy.TreeNodes,AssemblyListTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\AssemblyListTreeNode.cs,FindMethodNode,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.ILSpy.TreeNodes,AssemblyTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\AssemblyTreeNode.cs,LoadChildren,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy.TreeNodes,PropertyTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\PropertyTreeNode.cs,GetAttributesOfMostAccessibleMethod,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.ILSpy.TreeNodes,TypeTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\TypeTreeNode.cs,LoadChildren,Cyclomatic complexity of the method is 9
Long Parameter List,ICSharpCode.ILSpy,MixedMethodBodyDisassembler,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpILMixedLanguage.cs,WriteHighlightedCommentLine,The method has 5 parameters. Parameters: output' text' startColumn' endColumn' isSingleLine
Long Parameter List,ICSharpCode.ILSpy,ExtensionMethods,C:\repos\icsharpcode_ILSpy\ILSpy\ExtensionMethods.cs,BinarySearch,The method has 5 parameters. Parameters: list' item' start' count' comparer
Long Parameter List,ICSharpCode.ILSpy,IAssemblyName,C:\repos\icsharpcode_ILSpy\ILSpy\Fusion.cs,BindToObject,The method has 8 parameters. Parameters: refIID' pAsmBindSink' pApplicationContext' szCodeBase' llFlags' pvReserved' cbReserved' ppv
Long Parameter List,ICSharpCode.ILSpy,Fusion,C:\repos\icsharpcode_ILSpy\ILSpy\Fusion.cs,CreateAssemblyEnum,The method has 5 parameters. Parameters: ppEnum' pAppCtx' pName' dwFlags' pvReserved
Long Parameter List,ICSharpCode.ILSpy,NativeMethods,C:\repos\icsharpcode_ILSpy\ILSpy\NativeMethods.cs,SendMessageTimeout,The method has 7 parameters. Parameters: hWnd' msg' wParam' lParam' flags' timeout' result
Long Parameter List,ICSharpCode.ILSpy,AbstractSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,Add,The method has 6 parameters. Parameters: items' type' language' addResult' matcher' image
Long Parameter List,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,WndProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,CustomDialog,The method has 5 parameters. Parameters: caption' message' acceptButton' cancelButton' buttonLabels
Long Identifier,ICSharpCode.ILSpy,NavigationHistory<T>,C:\repos\icsharpcode_ILSpy\ILSpy\NavigationHistory.cs,,The length of the parameter NavigationSecondsBeforeNewEntry is 31.
Long Identifier,ICSharpCode.ILSpy.TextView,DecompilerTextView,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,RunWithCancellation,The length of the parameter previousCancellationTokenSource is 31.
Long Identifier,ICSharpCode.ILSpy.TextView,DecompilerTextView,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,,The length of the parameter currentCancellationTokenSource is 30.
Long Identifier,ICSharpCode.ILSpy.TreeNodes,PropertyTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\PropertyTreeNode.cs,GetIcon,The length of the parameter attributesOfMostAccessibleMethod is 32.
Long Statement,ICSharpCode.ILSpy,AboutPage,C:\repos\icsharpcode_ILSpy\ILSpy\AboutPage.cs,Display,The length of the statement  "			output.AddVisualLineElementGenerator(new MyLinkElementGenerator("SharpDevelop"' "http://www.icsharpcode.net/opensource/sd/")); " is 126.
Long Statement,ICSharpCode.ILSpy,DecompileAllCommand,C:\repos\icsharpcode_ILSpy\ILSpy\Commands\DecompileAllCommand.cs,Execute,The length of the statement  "				Parallel.ForEach(MainWindow.Instance.CurrentAssemblyList.GetAssemblies()' new ParallelOptions { MaxDegreeOfParallelism = Environment.ProcessorCount' CancellationToken = ct }' delegate(LoadedAssembly asm) { " is 205.
Long Statement,ICSharpCode.ILSpy,DecompileAllCommand,C:\repos\icsharpcode_ILSpy\ILSpy\Commands\DecompileAllCommand.cs,Execute,The length of the statement  "								new CSharpLanguage().DecompileAssembly(asm' new Decompiler.PlainTextOutput(writer)' new DecompilationOptions { FullDecompilation = true' CancellationToken = ct }); " is 163.
Long Statement,ICSharpCode.ILSpy,DebugSteps,C:\repos\icsharpcode_ILSpy\ILSpy\DebugSteps.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ShowStateBefore_Click); " is 120.
Long Statement,ICSharpCode.ILSpy,ILSpyTraceListener,C:\repos\icsharpcode_ILSpy\ILSpy\ILSpyTraceListener.cs,ShowAssertionDialog,The length of the statement  "			inputBox.ShowInTaskbar = true; // make this window more visible' because it effectively interrupts the decompilation process. " is 125.
Long Statement,ICSharpCode.ILSpy,MixedMethodBodyDisassembler,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpILMixedLanguage.cs,Disassemble,The length of the statement  "					this.sequencePoints = mapping.Value ?? (IList<Decompiler.IL.SequencePoint>)EmptyList<Decompiler.IL.SequencePoint>.Instance; " is 123.
Long Statement,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,GetDebugLanguages,The length of the statement  "			var decompiler = new CSharpDecompiler(ModuleDefinition.CreateModule("Dummy"' ModuleKind.Dll)' new DecompilerSettings()); " is 120.
Long Statement,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,AddReferenceWarningMessage,The length of the statement  "			var loadedAssembly = MainWindow.Instance.CurrentAssemblyList.GetAssemblies().FirstOrDefault(la => la.GetAssemblyDefinitionOrNull() == assembly); " is 144.
Long Statement,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,AddReferenceWarningMessage,The length of the statement  "			const string line1 = "Warning: Some assembly references could not be loaded. This might lead to incorrect decompilation of some parts'"; " is 136.
Long Statement,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,AddReferenceWarningMessage,The length of the statement  "			const string line2 = "for ex. property getter/setter access. To get optimal decompilation results' please manually add the references to the list of loaded assemblies."; " is 169.
Long Statement,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,AddReferenceWarningMessage,The length of the statement  "					MainWindow.Instance.SelectNode(MainWindow.Instance.FindTreeNode(assembly).Children.OfType<ReferenceFolderTreeNode>().First()); " is 126.
Long Statement,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,DecompileAssembly,The length of the statement  "				decompiler.DecompileProject(module' options.SaveAsProjectDirectory' new TextOutputWriter(output)' options.CancellationToken); " is 125.
Long Statement,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,DecompileAssembly,The length of the statement  "					output.WriteReference(mainModule.EntryPoint.DeclaringType.FullName + "." + mainModule.EntryPoint.Name' mainModule.EntryPoint); " is 126.
Long Statement,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,FormatTypeName,The length of the statement  "			return TypeToString(ConvertTypeOptions.DoNotUsePrimitiveTypeNames | ConvertTypeOptions.IncludeTypeParameterDefinitions' type); " is 126.
Long Statement,ICSharpCode.ILSpy,ILSpyWholeProjectDecompiler,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,WriteResourceToFile,The length of the statement  "						return new[] { Tuple.Create(handler.EntryType' handler.WriteResourceToFile(assembly' fileName' entryStream' options)) }; " is 120.
Long Statement,ICSharpCode.ILSpy,AbstractLexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,NextToken,The length of the statement  "				//Console.WriteLine(ICSharpCode.NRefactory.Parser.CSharp.Tokens.GetTokenString(curToken.kind) + " -- " + curToken.val + "(" + curToken.kind + ")"); " is 147.
Long Statement,ICSharpCode.ILSpy,AbstractLexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,NextToken,The length of the statement  "			//Console.WriteLine(ICSharpCode.NRefactory.Parser.CSharp.Tokens.GetTokenString(curToken.kind) + " -- " + curToken.val + "(" + curToken.kind + ")"); " is 147.
Long Statement,ICSharpCode.ILSpy,Lexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,ReadIdent,The length of the statement  "							Error(Line' Col' "Unicode escape sequences in identifiers cannot be used to represent characters that are invalid in identifiers"); " is 131.
Long Statement,ICSharpCode.ILSpy,Lexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,ReadIdent,The length of the statement  "							Error(Line' Col' "Unicode escape sequences in identifiers cannot be used to represent characters that are invalid in identifiers"); " is 131.
Long Statement,ICSharpCode.ILSpy,Lexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,ReadDigit,The length of the statement  "						if (ulong.TryParse(digit' ishex ? NumberStyles.HexNumber : NumberStyles.Number' CultureInfo.InvariantCulture' out num)) { " is 121.
Long Statement,ICSharpCode.ILSpy,Lexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,ReadDigit,The length of the statement  "						if (long.TryParse(digit' ishex ? NumberStyles.HexNumber : NumberStyles.Number' CultureInfo.InvariantCulture' out num)) { " is 120.
Long Statement,ICSharpCode.ILSpy,Lexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,ReadDigit,The length of the statement  "						if (uint.TryParse(digit' ishex ? NumberStyles.HexNumber : NumberStyles.Number' CultureInfo.InvariantCulture' out num)) { " is 120.
Long Statement,ICSharpCode.ILSpy,CSharpHighlightingTokenWriter,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpHighlightingTokenWriter.cs,WriteIdentifier,The length of the statement  "			if (identifier.Name == "value" && nodeStack.PeekOrDefault() is Accessor accessor && accessor.Role != PropertyDeclaration.GetterRole) " is 132.
Long Statement,ICSharpCode.ILSpy,CSharpHighlightingTokenWriter,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpHighlightingTokenWriter.cs,GetCurrentMemberReference,The length of the statement  "			if (node is IdentifierExpression && node.Role == Roles.TargetExpression && node.Parent is InvocationExpression && symbol is IMember member) { " is 141.
Long Statement,ICSharpCode.ILSpy,ILAstLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\ILAstLanguage.cs,GetDebugLanguages,The length of the statement  "			CSharpDecompiler decompiler = new CSharpDecompiler(ModuleDefinition.CreateModule("Dummy"' ModuleKind.Dll)' new DecompilerSettings()); " is 133.
Long Statement,ICSharpCode.ILSpy,BlockIL,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\ILAstLanguage.cs,DecompileMethod,The length of the statement  "				var specializingTypeSystem = typeSystem.GetSpecializingTypeSystem(new SimpleTypeResolveContext(typeSystem.Resolve(method))); " is 124.
Long Statement,ICSharpCode.ILSpy,ILSpySettings,C:\repos\icsharpcode_ILSpy\ILSpy\ILSpySettings.cs,Update,The length of the statement  "				doc.Root.SetAttributeValue("version"' RevisionClass.Major + "." + RevisionClass.Minor + "." + RevisionClass.Build + "." + RevisionClass.Revision); " is 146.
Long Statement,ICSharpCode.ILSpy,LoadedAssembly,C:\repos\icsharpcode_ILSpy\ILSpy\LoadedAssembly.cs,LookupReferencedAssemblyInternal,The length of the statement  "					if (asmDef != null && data.fullName.Equals(data.isWinRT ? asmDef.Name.Name : asmDef.FullName' StringComparison.OrdinalIgnoreCase)) { " is 132.
Long Statement,ICSharpCode.ILSpy,LoadedAssembly,C:\repos\icsharpcode_ILSpy\ILSpy\LoadedAssembly.cs,LookupReferencedAssemblyInternal,The length of the statement  "					LoadedAssemblyReferencesInfo.AddMessage(data.fullName' MessageKind.Error' "Could not find reference: " + data.fullName); " is 120.
Long Statement,ICSharpCode.ILSpy,LoadedAssembly,C:\repos\icsharpcode_ILSpy\ILSpy\LoadedAssembly.cs,ContinueWhenLoaded,The length of the statement  "			return this.assemblyTask.ContinueWith(onAssemblyLoaded' default(CancellationToken)' TaskContinuationOptions.RunContinuationsAsynchronously' taskScheduler); " is 155.
Long Statement,ICSharpCode.ILSpy,NugetPackageBrowserDialog,C:\repos\icsharpcode_ILSpy\ILSpy\NugetPackageBrowserDialog.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ILSpy;component/nugetpackagebrowserdialog.xaml"' System.UriKind.Relative); " is 120.
Long Statement,ICSharpCode.ILSpy,OpenFromGacDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenFromGacDialog.xaml.cs,Connect,The length of the statement  "            this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged); " is 123.
Long Statement,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,CreateDefaultAssemblyLists,The length of the statement  "				AddToList(dotnet35' "System.Data.DataSetExtensions' Version=3.5.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089"); " is 120.
Long Statement,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,CreateDefaultAssemblyLists,The length of the statement  "				AddToList(mvc' "System.ComponentModel.DataAnnotations' Version=4.0.0.0' Culture=neutral' PublicKeyToken=31bf3856ad364e35"); " is 123.
Long Statement,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,DeleteButton_Click,The length of the statement  ""ILSpy"' MessageBoxButton.YesNo' MessageBoxImage.Warning' MessageBoxResult.No' MessageBoxOptions.None) != MessageBoxResult.Yes) " is 127.
Long Statement,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,ResetButton_Click,The length of the statement  "			if (MessageBox.Show(this' "Are you sure that you want to remove all assembly lists and recreate the default assembly lists?"' " is 125.
Long Statement,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,ResetButton_Click,The length of the statement  "				"ILSpy"' MessageBoxButton.YesNo' MessageBoxImage.Warning' MessageBoxResult.No' MessageBoxOptions.None) != MessageBoxResult.Yes) " is 127.
Long Statement,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,Connect,The length of the statement  "            this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged); " is 123.
Long Statement,ICSharpCode.ILSpy,SearchPane,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,StartSearch,The length of the statement  "				currentSearch = new RunningSearch(mainWindow.CurrentAssemblyList.GetAssemblies()' searchTerm' (SearchMode)searchModeComboBox.SelectedIndex' mainWindow.CurrentLanguage); " is 168.
Long Statement,ICSharpCode.ILSpy,SearchPane,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,Connect,The length of the statement  "            this.searchModeComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SearchModeComboBox_SelectionChanged); " is 143.
Long Statement,ICSharpCode.ILSpy,AbstractSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,IsMatch,The length of the statement  "							if (term.Length > 1 && String.Compare(term' 1' text' 0' Math.Max(term.Length' equalCompareLength)' StringComparison.OrdinalIgnoreCase) != 0) " is 140.
Long Statement,ICSharpCode.ILSpy,AbstractSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,GetLanguageSpecificName,The length of the statement  "					return fullName ? language.TypeToString(f.DeclaringType' fullName) + "." + language.FormatFieldName(f) : language.FormatFieldName(f); " is 133.
Long Statement,ICSharpCode.ILSpy,AbstractSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,GetLanguageSpecificName,The length of the statement  "					return fullName ? language.TypeToString(p.DeclaringType' fullName) + "." + language.FormatPropertyName(p) : language.FormatPropertyName(p); " is 139.
Long Statement,ICSharpCode.ILSpy,AbstractSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,GetLanguageSpecificName,The length of the statement  "					return fullName ? language.TypeToString(m.DeclaringType' fullName) + "." + language.FormatMethodName(m) : language.FormatMethodName(m); " is 135.
Long Statement,ICSharpCode.ILSpy,AbstractSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,GetLanguageSpecificName,The length of the statement  "					return fullName ? language.TypeToString(e.DeclaringType' fullName) + "." + language.FormatEventName(e) : language.FormatEventName(e); " is 133.
Long Statement,ICSharpCode.ILSpy,LiteralSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,IsMatch,The length of the statement  "			return MethodIsLiteralMatch(ev.AddMethod) || MethodIsLiteralMatch(ev.RemoveMethod) || MethodIsLiteralMatch(ev.InvokeMethod); " is 124.
Long Statement,ICSharpCode.ILSpy,MemberSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,IsMatch,The length of the statement  "			return (searchKind == MemberSearchKind.All || searchKind == MemberSearchKind.Property) && MatchName(property' language); " is 120.
Long Statement,ICSharpCode.ILSpy,TypeSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,Search,The length of the statement  "					Location = type.DeclaringType != null ? language.TypeToString(type.DeclaringType' includeNamespace: true) : type.Namespace " is 122.
Long Statement,ICSharpCode.ILSpy,TypeAndMemberSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,Search,The length of the statement  "					Location = type.DeclaringType != null ? language.TypeToString(type.DeclaringType' includeNamespace: true) : type.Namespace " is 122.
Long Statement,ICSharpCode.ILSpy,TaskHelper,C:\repos\icsharpcode_ILSpy\ILSpy\TaskHelper.cs,Then,The length of the statement  "			return task.ContinueWith(t => action(t.Result)' CancellationToken.None' TaskContinuationOptions.NotOnCanceled' TaskScheduler.FromCurrentSynchronizationContext()); " is 162.
Long Statement,ICSharpCode.ILSpy,TaskHelper,C:\repos\icsharpcode_ILSpy\ILSpy\TaskHelper.cs,Then,The length of the statement  "			return task.ContinueWith(t => func(t.Result)' CancellationToken.None' TaskContinuationOptions.NotOnCanceled' TaskScheduler.FromCurrentSynchronizationContext()); " is 160.
Long Statement,ICSharpCode.ILSpy,TaskHelper,C:\repos\icsharpcode_ILSpy\ILSpy\TaskHelper.cs,Then,The length of the statement  "			return task.ContinueWith(t => asyncFunc(t.Result)' CancellationToken.None' TaskContinuationOptions.NotOnCanceled' TaskScheduler.FromCurrentSynchronizationContext()).Unwrap(); " is 174.
Long Statement,ICSharpCode.ILSpy,TaskHelper,C:\repos\icsharpcode_ILSpy\ILSpy\TaskHelper.cs,Then,The length of the statement  "			return task.ContinueWith(t => asyncFunc(t.Result)' CancellationToken.None' TaskContinuationOptions.NotOnCanceled' TaskScheduler.FromCurrentSynchronizationContext()).Unwrap(); " is 174.
Long Statement,ICSharpCode.ILSpy,TaskHelper,C:\repos\icsharpcode_ILSpy\ILSpy\TaskHelper.cs,Then,The length of the statement  "			}' CancellationToken.None' TaskContinuationOptions.NotOnCanceled' TaskScheduler.FromCurrentSynchronizationContext()).Unwrap(); " is 126.
Long Statement,ICSharpCode.ILSpy,TaskHelper,C:\repos\icsharpcode_ILSpy\ILSpy\TaskHelper.cs,Then,The length of the statement  "			}' CancellationToken.None' TaskContinuationOptions.NotOnCanceled' TaskScheduler.FromCurrentSynchronizationContext()).Unwrap(); " is 126.
Long Statement,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,InitToolbar,The length of the statement  "			foreach (var commandGroup in toolbarCommands.OrderBy(c => c.Metadata.ToolbarOrder).GroupBy(c => c.Metadata.ToolbarCategory)) { " is 126.
Long Statement,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,OnSourceInitialized,The length of the statement  "			var boundsRect = new System.Drawing.Rectangle((int)bounds.Left' (int)bounds.Top' (int)bounds.Width' (int)bounds.Height); " is 120.
Long Statement,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,ShowMessageIfUpdatesAvailableAsync,The length of the statement  "			result.ContinueWith(task => AdjustUpdateUIAfterCheck(task' forceCheck)' TaskScheduler.FromCurrentSynchronizationContext()); " is 123.
Long Statement,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,RefreshTreeViewFilter,The length of the statement  "			// Thus' the main window will use one mutable instance (for data-binding)' and assign a new clone to the ILSpyTreeNodes whenever the main " is 137.
Long Statement,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,JumpToReferenceAsync,The length of the statement  "				string link = "http://msdn.microsoft.com/library/system.reflection.emit.opcodes." + ((Mono.Cecil.Cil.OpCode)reference).Code.ToString().ToLowerInvariant() + ".aspx"; " is 164.
Long Statement,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,DecompileSelectedNodes,The length of the statement  "			decompilationTask = decompilerTextView.DecompileAsync(this.CurrentLanguage' this.SelectedNodes' new DecompilationOptions { TextViewState = state }); " is 148.
Long Statement,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,OnClosing,The length of the statement  "				sessionSettings.TopPaneSplitterPosition = topPaneRow.Height.Value / (topPaneRow.Height.Value + textViewRow.Height.Value); " is 121.
Long Statement,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,OnClosing,The length of the statement  "				sessionSettings.BottomPaneSplitterPosition = bottomPaneRow.Height.Value / (bottomPaneRow.Height.Value + textViewRow.Height.Value); " is 130.
Long Statement,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,TopPane_CloseButtonClicked,The length of the statement  "			sessionSettings.TopPaneSplitterPosition = topPaneRow.Height.Value / (topPaneRow.Height.Value + textViewRow.Height.Value); " is 121.
Long Statement,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,BottomPane_CloseButtonClicked,The length of the statement  "			sessionSettings.BottomPaneSplitterPosition = bottomPaneRow.Height.Value / (bottomPaneRow.Height.Value + textViewRow.Height.Value); " is 130.
Long Statement,ICSharpCode.ILSpy.AvalonEdit,TextMarkerService,C:\repos\icsharpcode_ILSpy\ILSpy\AvalonEdit\TextMarkerService.cs,Create,The length of the statement  "				throw new ArgumentOutOfRangeException(nameof(length)' length' "length must not be negative and startOffset+length must not be after the end of the document"); " is 158.
Long Statement,ICSharpCode.ILSpy.AvalonEdit,TextMarkerService,C:\repos\icsharpcode_ILSpy\ILSpy\AvalonEdit\TextMarkerService.cs,Draw,The length of the statement  "				var underlineMarkerTypes = TextMarkerTypes.SquigglyUnderline | TextMarkerTypes.NormalUnderline | TextMarkerTypes.DottedUnderline; " is 129.
Long Statement,ICSharpCode.ILSpy.Controls,ResourceObjectTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceObjectTable.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ILSpy;component/controls/resourceobjecttable.xaml"' System.UriKind.Relative); " is 123.
Long Statement,ICSharpCode.ILSpy.Controls,ResourceObjectTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceObjectTable.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopy); " is 130.
Long Statement,ICSharpCode.ILSpy.Controls,ResourceObjectTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceObjectTable.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCopy); " is 137.
Long Statement,ICSharpCode.ILSpy.Controls,SortableGridViewColumn,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\SortableGridViewColumn.cs,Sort,The length of the statement  "			if (column != null && GetSortMode(grid) == ListViewSortMode.Automatic && currentDirection != ColumnSortDirection.None) { " is 120.
Long Statement,ICSharpCode.ILSpy.Controls,ResourceStringTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceStringTable.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ILSpy;component/controls/resourcestringtable.xaml"' System.UriKind.Relative); " is 123.
Long Statement,ICSharpCode.ILSpy.Controls,ResourceStringTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceStringTable.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopy); " is 130.
Long Statement,ICSharpCode.ILSpy.Controls,ResourceStringTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceStringTable.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCopy); " is 137.
Long Statement,ICSharpCode.ILSpy.Options,DecompilerSettingsPanel,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DecompilerSettingsPanel.xaml.cs,LoadDecompilerSettings,The length of the statement  "			s.FullyQualifyAmbiguousTypeNames = (bool?)e.Attribute("fullyQualifyAmbiguousTypeNames") ?? s.FullyQualifyAmbiguousTypeNames; " is 124.
Long Statement,ICSharpCode.ILSpy.Options,DecompilerSettingsPanel,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DecompilerSettingsPanel.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ILSpy;component/options/decompilersettingspanel.xaml"' System.UriKind.Relative); " is 126.
Long Statement,ICSharpCode.ILSpy.Options,DisplaySettingsPanel,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ILSpy;component/options/displaysettingspanel.xaml"' System.UriKind.Relative); " is 123.
Long Statement,ICSharpCode.ILSpy.Options,MiscSettingsPanel,C:\repos\icsharpcode_ILSpy\ILSpy\Options\MiscSettingsPanel.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ILSpy;component/options/miscsettingspanel.xaml"' System.UriKind.Relative); " is 120.
Long Statement,ICSharpCode.ILSpy.TextView,DecompilerTextView,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,ShowLineMargin,The length of the statement  "					margin.Visibility = DisplaySettingsPanel.CurrentDisplaySettings.ShowLineNumbers ? Visibility.Visible : Visibility.Collapsed; " is 124.
Long Statement,ICSharpCode.ILSpy.TextView,DecompilerTextView,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,TextViewMouseHover,The length of the statement  "			TextViewPosition? position = textEditor.TextArea.TextView.GetPosition(e.GetPosition(textEditor.TextArea.TextView) + textEditor.TextArea.TextView.ScrollOffset); " is 159.
Long Statement,ICSharpCode.ILSpy.TextView,DecompilerTextView,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,GenerateTooltip,The length of the statement  "				string opCodeHex = code.Size > 1 ? string.Format("0x{0:x2}{1:x2}"' code.Op1' code.Op2) : string.Format("0x{0:x2}"' code.Op2); " is 125.
Long Statement,ICSharpCode.ILSpy.TextView,DecompilerTextView,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,RunWithCancellation,The length of the statement  "			RunWithCancellation(taskCreation).ContinueWith(taskCompleted' CancellationToken.None' TaskContinuationOptions.NotOnCanceled' TaskScheduler.FromCurrentSynchronizationContext()); " is 176.
Long Statement,ICSharpCode.ILSpy.TextView,DecompilerTextView,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,RunWithCancellation,The length of the statement  "				waitAdorner.BeginAnimation(OpacityProperty' new DoubleAnimation(0' 1' new Duration(TimeSpan.FromSeconds(0.5))' FillBehavior.Stop)); " is 131.
Long Statement,ICSharpCode.ILSpy.TextView,DecompilerTextView,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,GetPositionFromMousePosition,The length of the statement  "			return textEditor.TextArea.TextView.GetPosition(Mouse.GetPosition(textEditor.TextArea.TextView) + textEditor.TextArea.TextView.ScrollOffset); " is 141.
Long Statement,ICSharpCode.ILSpy.TextView,AvalonEditTextOutput,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\AvalonEditTextOutput.cs,WriteDefinition,The length of the statement  "			references.Add(new ReferenceSegment { StartOffset = start' EndOffset = end' Reference = definition' IsLocal = isLocal' IsLocalTarget = true }); " is 143.
Long Statement,ICSharpCode.ILSpy.TextView,AvalonEditTextOutput,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\AvalonEditTextOutput.cs,WriteReference,The length of the statement  "			references.Add(new ReferenceSegment { StartOffset = start' EndOffset = end' Reference = reference' IsLocal = isLocal }); " is 120.
Long Statement,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzeContextMenuEntry,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzeContextMenuEntry.cs,IsVisible,The length of the statement  "			if (context.TreeView is AnalyzerTreeView && context.SelectedTreeNodes != null && context.SelectedTreeNodes.All(n => n.Parent.IsRoot)) " is 133.
Long Statement,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedAttributeAppliedToTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedAttributeAppliedToTreeNode.cs,FetchChildren,The length of the statement  "			var assemblies = analyzedType.IsPublic ? GetReferencingAssemblies(currentAssembly' ct) : GetAssemblyAndAnyFriends(currentAssembly' ct); " is 135.
Long Statement,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedAttributeAppliedToTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedAttributeAppliedToTreeNode.cs,FetchChildren,The length of the statement  "			var results = assemblies.AsParallel().WithCancellation(ct).SelectMany(a => FindReferencesInAssembly(a.Item1.MainModule' a.Item2' ct)); " is 134.
Long Statement,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedAttributeAppliedToTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedAttributeAppliedToTreeNode.cs,GetReferencingAssemblies,The length of the statement  "			IEnumerable<LoadedAssembly> assemblies = MainWindow.Instance.CurrentAssemblyList.GetAssemblies().Where(assy => assy.GetAssemblyDefinitionOrNull() != null); " is 155.
Long Statement,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedInterfacePropertyImplementedByTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedInterfacePropertyImplementedByTreeNode.cs,FindReferencesInType,The length of the statement  "			TypeReference implementedInterfaceRef = type.Interfaces.FirstOrDefault(i => i.InterfaceType.Resolve() == analyzedMethod.DeclaringType)?.InterfaceType; " is 150.
Long Statement,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedInterfaceMethodImplementedByTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedInterfaceMethodImplementedByTreeNode.cs,FindReferencesInType,The length of the statement  "			TypeReference implementedInterfaceRef = type.Interfaces.FirstOrDefault(i => i.InterfaceType.Resolve() == analyzedMethod.DeclaringType)?.InterfaceType; " is 150.
Long Statement,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedInterfaceEventImplementedByTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedInterfaceEventImplementedByTreeNode.cs,FindReferencesInType,The length of the statement  "			TypeReference implementedInterfaceRef = type.Interfaces.FirstOrDefault(i => i.InterfaceType.Resolve() == analyzedMethod.DeclaringType)?.InterfaceType; " is 150.
Long Statement,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedTypeExposedByTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedTypeExposedByTreeNode.cs,TypeIsExposedBy,The length of the statement  "			// HACK: this is a potentially fragile implementation' as the MethodSemantics may be extended to other uses at a later date. " is 124.
Long Statement,ICSharpCode.ILSpy.TreeNodes.Analyzer,RemoveAnalyzeContextMenuEntry,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\RemoveAnalyzeContextMenuEntry.cs,IsVisible,The length of the statement  "			if (context.TreeView is AnalyzerTreeView && context.SelectedTreeNodes != null && context.SelectedTreeNodes.All(n => n.Parent.IsRoot)) " is 133.
Long Statement,ICSharpCode.ILSpy.TreeNodes.Analyzer,ScopedWhereUsedAnalyzer<T>,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\ScopedWhereUsedAnalyzer.cs,GetReferencingAssemblies,The length of the statement  "			IEnumerable<LoadedAssembly> assemblies = MainWindow.Instance.CurrentAssemblyList.GetAssemblies().Where(assy => assy.GetAssemblyDefinitionOrNull() != null); " is 155.
Long Statement,ICSharpCode.ILSpy.TreeNodes,IconResourceEntryNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\ResourceNodes\IconResourceEntryNode.cs,View,The length of the statement  "				IconBitmapDecoder decoder = new IconBitmapDecoder(Data' BitmapCreateOptions.PreservePixelFormat' BitmapCacheOption.None); " is 121.
Long Statement,ICSharpCode.ILSpy.TreeNodes,IconResourceEntryNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\ResourceNodes\IconResourceEntryNode.cs,View,The length of the statement  "					output.Write(String.Format("{0}x{1}' {2} bit: "' frame.PixelHeight' frame.PixelWidth' frame.Thumbnail.Format.BitsPerPixel)); " is 124.
Long Statement,ICSharpCode.ILSpy.TreeNodes,ResourcesFileTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\ResourceNodes\ResourcesFileTreeNode.cs,ProcessResourceEntry,The length of the statement  "				otherEntries.Add(new SerializedObjectRepresentation(keyString' entryType' ((System.Globalization.CultureInfo)entry.Value).DisplayName)); " is 136.
Long Statement,ICSharpCode.ILSpy.TreeNodes,AssemblyListTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\AssemblyListTreeNode.cs,FindResourceNode,The length of the statement  "						var foundedResEntry = item.Children.OfType<ResourceEntryNode>().Where(x => resource.Name.Equals(x.Text)).FirstOrDefault(); " is 122.
Long Statement,ICSharpCode.ILSpy.TreeNodes,AssemblyListTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\AssemblyListTreeNode.cs,FindMethodNode,The length of the statement  "			MethodTreeNode methodNode = typeNode.Children.OfType<MethodTreeNode>().FirstOrDefault(m => m.MethodDefinition == def && !m.IsHidden); " is 133.
Long Statement,ICSharpCode.ILSpy.TreeNodes,AssemblyReferenceTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\AssemblyReferenceTreeNode.cs,Decompile,The length of the statement  "					language.WriteCommentLine(output' "There were some problems during assembly reference load' see below for more information!"); " is 126.
Long Statement,ICSharpCode.ILSpy.TreeNodes,AssemblyTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\AssemblyTreeNode.cs,Save,The length of the statement  "			dlg.Filter = language.Name + " project|*" + language.ProjectFileExtension + "|" + language.Name + " single file|*" + language.FileExtension + "|All files|*.*"; " is 159.
Long Statement,ICSharpCode.ILSpy.TreeNodes,AddToMainList,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\AssemblyTreeNode.cs,IsEnabled,The length of the statement  "			return context.SelectedTreeNodes.Where(n => n is AssemblyTreeNode).Any(n => !((AssemblyTreeNode)n).LoadedAssembly.FileName.StartsWith("nupkg://")); " is 147.
Long Statement,ICSharpCode.ILSpy.TreeNodes,DerivedTypesTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\DerivedTypesTreeNode.cs,FetchChildren,The length of the statement  "			var assemblies = list.GetAssemblies().Select(node => node.GetModuleDefinitionAsync().Result).Where(asm => asm != null).ToArray(); " is 129.
Long Statement,ICSharpCode.ILSpy.TreeNodes,ReferenceFolderTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\ReferenceFolderTreeNode.cs,Decompile,The length of the statement  "			language.WriteCommentLine(output' $"Detected Target-Framework-Id: {parentAssembly.LoadedAssembly.GetTargetFrameworkIdAsync().Result}"); " is 135.
Long Statement,ICSharpCode.ILSpy.TreeNodes,ResourceTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\ResourceNodes\ResourceTreeNode.cs,Filter,The length of the statement  "			if (!settings.ShowInternalApi && (r.Attributes & ManifestResourceAttributes.VisibilityMask) == ManifestResourceAttributes.Private) " is 130.
Long Statement,ICSharpCode.ILSpy.TreeNodes,TypeTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\TypeTreeNode.cs,LoadChildren,The length of the statement  "			foreach (TypeDefinition nestedType in TypeDefinition.NestedTypes.OrderBy(m => m.Name' NaturalStringComparer.Instance)) { " is 120.
Long Statement,ICSharpCode.ILSpy.TreeNodes,TypeTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\TypeTreeNode.cs,LoadChildren,The length of the statement  "			foreach (PropertyDefinition property in TypeDefinition.Properties.OrderBy(m => m.Name' NaturalStringComparer.Instance)) { " is 121.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\icsharpcode_ILSpy\ILSpy\obj\Debug\net46\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,ICSharpCode.ILSpy,CSharpHighlightingTokenWriter,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpHighlightingTokenWriter.cs,WriteKeyword,The conditional expression  "role == PropertyDeclaration.GetKeywordRole ||  						role == PropertyDeclaration.SetKeywordRole ||  						role == CustomEventDeclaration.AddKeywordRole ||  						role == CustomEventDeclaration.RemoveKeywordRole"  is complex.
Complex Conditional,ICSharpCode.ILSpy,CSharpHighlightingTokenWriter,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpHighlightingTokenWriter.cs,GetCurrentMemberReference,The conditional expression  "node is IdentifierExpression && node.Role == Roles.TargetExpression && node.Parent is InvocationExpression && symbol is IMember member"  is complex.
Complex Conditional,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzeContextMenuEntry,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzeContextMenuEntry.cs,IsEnabled,The conditional expression  "!(node.Member is TypeDefinition  				      || node.Member is FieldDefinition  				      || node.Member is MethodDefinition  				      || AnalyzedPropertyTreeNode.CanShow(node.Member)  				      || AnalyzedEventTreeNode.CanShow(node.Member))"  is complex.
Complex Conditional,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedTypeInstantiationsTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedTypeInstantiationsTreeNode.cs,FindReferencesInType,The conditional expression  "method.Name == ".ctor" &&  					(isSystemObject || analyzedType == type || TypesHierarchyHelpers.IsBaseType(analyzedType' type' false))"  is complex.
Complex Conditional,ICSharpCode.ILSpy.TreeNodes.Analyzer,Helpers,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\Helpers.cs,FindMethodUsageInType,The conditional expression  "mr != null && mr.Name == name &&  						IsReferencedBy(analyzedMethod.DeclaringType' mr.DeclaringType) &&  						mr.Resolve() == analyzedMethod"  is complex.
Complex Conditional,ICSharpCode.ILSpy.TreeNodes.Analyzer,ScopedWhereUsedAnalyzer<T>,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\ScopedWhereUsedAnalyzer.cs,PerformAnalysis,The conditional expression  "memberAccessibility == Accessibility.Internal ||  				memberAccessibility == Accessibility.FamilyAndInternal ||  				typeAccessibility == Accessibility.Internal ||  				typeAccessibility == Accessibility.FamilyAndInternal"  is complex.
Complex Conditional,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedFieldAccessTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedFieldAccessTreeNode.cs,FindReferencesInType,The conditional expression  "fr != null && fr.Name == name &&  							Helpers.IsReferencedBy(analyzedField.DeclaringType' fr.DeclaringType) &&  							fr.Resolve() == analyzedField"  is complex.
Complex Conditional,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedMethodUsedByTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedMethodUsedByTreeNode.cs,FindReferencesInType,The conditional expression  "mr != null && mr.Name == name &&  						Helpers.IsReferencedBy(analyzedMethod.DeclaringType' mr.DeclaringType) &&  						mr.Resolve() == analyzedMethod"  is complex.
Virtual Method Call from Constructor,ICSharpCode.ILSpy,LiteralSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,LiteralSearchStrategy,The constructor "LiteralSearchStrategy" calls a virtual method "NextToken".
Empty Catch Block,ICSharpCode.ILSpy,UpdateSettings,C:\repos\icsharpcode_ILSpy\ILSpy\AboutPage.cs,UpdateSettings,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy,ILSpyTraceListener,C:\repos\icsharpcode_ILSpy\ILSpy\ILSpyTraceListener.cs,Fail,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy,GacInterop,C:\repos\icsharpcode_ILSpy\ILSpy\GacInterop.cs,GetGacAssemblyFullNames,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy,GacInterop,C:\repos\icsharpcode_ILSpy\ILSpy\GacInterop.cs,GetGacAssemblyFullNames,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy,GacInterop,C:\repos\icsharpcode_ILSpy\ILSpy\GacInterop.cs,GetGacAssemblyFullNames,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy,BlockIL,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\ILAstLanguage.cs,DecompileMethod,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy,MutexProtector,C:\repos\icsharpcode_ILSpy\ILSpy\ILSpySettings.cs,MutexProtector,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy,LoadedAssembly,C:\repos\icsharpcode_ILSpy\ILSpy\LoadedAssembly.cs,LoadAssembly,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy,LoadedAssembly,C:\repos\icsharpcode_ILSpy\ILSpy\LoadedAssembly.cs,LoadAssembly,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy,LoadedAssembly,C:\repos\icsharpcode_ILSpy\ILSpy\LoadedAssembly.cs,LoadAssembly,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,Run,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,OpenLink,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy.TextView,XmlDocRenderer,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\XmlDocRenderer.cs,AddXmlDocumentation,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy.TextView,DecompilerTextView,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,GenerateTooltip,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedMethodOverridesTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedMethodOverridesTreeNode.cs,FindReferencesInType,The method has an empty catch block.
Empty Catch Block,ICSharpCode.ILSpy.TreeNodes,AssemblyTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\AssemblyTreeNode.cs,OnAssemblyLoaded,The method has an empty catch block.
Magic Number,ICSharpCode.ILSpy,AboutPage,C:\repos\icsharpcode_ILSpy\ILSpy\AboutPage.cs,Display,The following statement contains a magic number: output.AddUIElement(  				delegate {  					StackPanel stackPanel = new StackPanel();  					stackPanel.HorizontalAlignment = HorizontalAlignment.Center;  					stackPanel.Orientation = Orientation.Horizontal;  					if (latestAvailableVersion == null) {  						AddUpdateCheckButton(stackPanel' textView);  					} else {  						// we already retrieved the latest version sometime earlier  						ShowAvailableVersion(latestAvailableVersion' stackPanel);  					}  					CheckBox checkBox = new CheckBox();  					checkBox.Margin = new Thickness(4);  					checkBox.Content = "Automatically check for updates every week";  					UpdateSettings settings = new UpdateSettings(ILSpySettings.Load());  					checkBox.SetBinding(CheckBox.IsCheckedProperty' new Binding("AutomaticUpdateCheckEnabled") { Source = settings });  					return new StackPanel {  						Margin = new Thickness(0' 4' 0' 0)'  						Cursor = Cursors.Arrow'  						Children = { stackPanel' checkBox }  					};  				});
Magic Number,ICSharpCode.ILSpy,AboutPage,C:\repos\icsharpcode_ILSpy\ILSpy\AboutPage.cs,Display,The following statement contains a magic number: output.AddUIElement(  				delegate {  					StackPanel stackPanel = new StackPanel();  					stackPanel.HorizontalAlignment = HorizontalAlignment.Center;  					stackPanel.Orientation = Orientation.Horizontal;  					if (latestAvailableVersion == null) {  						AddUpdateCheckButton(stackPanel' textView);  					} else {  						// we already retrieved the latest version sometime earlier  						ShowAvailableVersion(latestAvailableVersion' stackPanel);  					}  					CheckBox checkBox = new CheckBox();  					checkBox.Margin = new Thickness(4);  					checkBox.Content = "Automatically check for updates every week";  					UpdateSettings settings = new UpdateSettings(ILSpySettings.Load());  					checkBox.SetBinding(CheckBox.IsCheckedProperty' new Binding("AutomaticUpdateCheckEnabled") { Source = settings });  					return new StackPanel {  						Margin = new Thickness(0' 4' 0' 0)'  						Cursor = Cursors.Arrow'  						Children = { stackPanel' checkBox }  					};  				});
Magic Number,ICSharpCode.ILSpy,AboutPage,C:\repos\icsharpcode_ILSpy\ILSpy\AboutPage.cs,ShowAvailableVersion,The following statement contains a magic number: if (currentVersion == availableVersion.Version) {  				stackPanel.Children.Add(  					new Image {  						Width = 16' Height = 16'  						Source = Images.OK'  						Margin = new Thickness(4'0'4'0)  					});  				stackPanel.Children.Add(  					new TextBlock {  						Text = "You are using the latest release."'  						VerticalAlignment = VerticalAlignment.Bottom  					});  			} else if (currentVersion < availableVersion.Version) {  				stackPanel.Children.Add(  					new TextBlock {  						Text = "Version " + availableVersion.Version + " is available."'  						Margin = new Thickness(0'0'8'0)'  						VerticalAlignment = VerticalAlignment.Bottom  					});  				if (availableVersion.DownloadUrl != null) {  					Button button = new Button();  					button.Content = "Download";  					button.Cursor = Cursors.Arrow;  					button.Click += delegate {  						MainWindow.OpenLink(availableVersion.DownloadUrl);  					};  					stackPanel.Children.Add(button);  				}  			} else {  				stackPanel.Children.Add(new TextBlock { Text = "You are using a nightly build newer than the latest release." });  			}
Magic Number,ICSharpCode.ILSpy,AboutPage,C:\repos\icsharpcode_ILSpy\ILSpy\AboutPage.cs,ShowAvailableVersion,The following statement contains a magic number: if (currentVersion == availableVersion.Version) {  				stackPanel.Children.Add(  					new Image {  						Width = 16' Height = 16'  						Source = Images.OK'  						Margin = new Thickness(4'0'4'0)  					});  				stackPanel.Children.Add(  					new TextBlock {  						Text = "You are using the latest release."'  						VerticalAlignment = VerticalAlignment.Bottom  					});  			} else if (currentVersion < availableVersion.Version) {  				stackPanel.Children.Add(  					new TextBlock {  						Text = "Version " + availableVersion.Version + " is available."'  						Margin = new Thickness(0'0'8'0)'  						VerticalAlignment = VerticalAlignment.Bottom  					});  				if (availableVersion.DownloadUrl != null) {  					Button button = new Button();  					button.Content = "Download";  					button.Cursor = Cursors.Arrow;  					button.Click += delegate {  						MainWindow.OpenLink(availableVersion.DownloadUrl);  					};  					stackPanel.Children.Add(button);  				}  			} else {  				stackPanel.Children.Add(new TextBlock { Text = "You are using a nightly build newer than the latest release." });  			}
Magic Number,ICSharpCode.ILSpy,AboutPage,C:\repos\icsharpcode_ILSpy\ILSpy\AboutPage.cs,ShowAvailableVersion,The following statement contains a magic number: if (currentVersion == availableVersion.Version) {  				stackPanel.Children.Add(  					new Image {  						Width = 16' Height = 16'  						Source = Images.OK'  						Margin = new Thickness(4'0'4'0)  					});  				stackPanel.Children.Add(  					new TextBlock {  						Text = "You are using the latest release."'  						VerticalAlignment = VerticalAlignment.Bottom  					});  			} else if (currentVersion < availableVersion.Version) {  				stackPanel.Children.Add(  					new TextBlock {  						Text = "Version " + availableVersion.Version + " is available."'  						Margin = new Thickness(0'0'8'0)'  						VerticalAlignment = VerticalAlignment.Bottom  					});  				if (availableVersion.DownloadUrl != null) {  					Button button = new Button();  					button.Content = "Download";  					button.Cursor = Cursors.Arrow;  					button.Click += delegate {  						MainWindow.OpenLink(availableVersion.DownloadUrl);  					};  					stackPanel.Children.Add(button);  				}  			} else {  				stackPanel.Children.Add(new TextBlock { Text = "You are using a nightly build newer than the latest release." });  			}
Magic Number,ICSharpCode.ILSpy,AboutPage,C:\repos\icsharpcode_ILSpy\ILSpy\AboutPage.cs,ShowAvailableVersion,The following statement contains a magic number: if (currentVersion == availableVersion.Version) {  				stackPanel.Children.Add(  					new Image {  						Width = 16' Height = 16'  						Source = Images.OK'  						Margin = new Thickness(4'0'4'0)  					});  				stackPanel.Children.Add(  					new TextBlock {  						Text = "You are using the latest release."'  						VerticalAlignment = VerticalAlignment.Bottom  					});  			} else if (currentVersion < availableVersion.Version) {  				stackPanel.Children.Add(  					new TextBlock {  						Text = "Version " + availableVersion.Version + " is available."'  						Margin = new Thickness(0'0'8'0)'  						VerticalAlignment = VerticalAlignment.Bottom  					});  				if (availableVersion.DownloadUrl != null) {  					Button button = new Button();  					button.Content = "Download";  					button.Cursor = Cursors.Arrow;  					button.Click += delegate {  						MainWindow.OpenLink(availableVersion.DownloadUrl);  					};  					stackPanel.Children.Add(button);  				}  			} else {  				stackPanel.Children.Add(new TextBlock { Text = "You are using a nightly build newer than the latest release." });  			}
Magic Number,ICSharpCode.ILSpy,AboutPage,C:\repos\icsharpcode_ILSpy\ILSpy\AboutPage.cs,ShowAvailableVersion,The following statement contains a magic number: if (currentVersion == availableVersion.Version) {  				stackPanel.Children.Add(  					new Image {  						Width = 16' Height = 16'  						Source = Images.OK'  						Margin = new Thickness(4'0'4'0)  					});  				stackPanel.Children.Add(  					new TextBlock {  						Text = "You are using the latest release."'  						VerticalAlignment = VerticalAlignment.Bottom  					});  			} else if (currentVersion < availableVersion.Version) {  				stackPanel.Children.Add(  					new TextBlock {  						Text = "Version " + availableVersion.Version + " is available."'  						Margin = new Thickness(0'0'8'0)'  						VerticalAlignment = VerticalAlignment.Bottom  					});  				if (availableVersion.DownloadUrl != null) {  					Button button = new Button();  					button.Content = "Download";  					button.Cursor = Cursors.Arrow;  					button.Click += delegate {  						MainWindow.OpenLink(availableVersion.DownloadUrl);  					};  					stackPanel.Children.Add(button);  				}  			} else {  				stackPanel.Children.Add(new TextBlock { Text = "You are using a nightly build newer than the latest release." });  			}
Magic Number,ICSharpCode.ILSpy,AboutPage,C:\repos\icsharpcode_ILSpy\ILSpy\AboutPage.cs,CheckForUpdatesIfEnabledAsync,The following statement contains a magic number: if (s.AutomaticUpdateCheckEnabled) {  				// perform update check if we never did one before;  				// or if the last check wasn't in the past 7 days  				if (s.LastSuccessfulUpdateCheck == null  				    || s.LastSuccessfulUpdateCheck < DateTime.UtcNow.AddDays(-7)  				    || s.LastSuccessfulUpdateCheck > DateTime.UtcNow)  				{  					CheckForUpdateInternal(tcs' s);  				} else {  					tcs.SetResult(null);  				}  			} else {  				tcs.SetResult(null);  			}
Magic Number,ICSharpCode.ILSpy,App,C:\repos\icsharpcode_ILSpy\ILSpy\App.xaml.cs,SendToPreviousInstance,The following statement contains a magic number: NativeMethods.EnumWindows(  				(hWnd' lParam) => {  					string windowTitle = NativeMethods.GetWindowText(hWnd' 100);  					if (windowTitle.StartsWith("ILSpy"' StringComparison.Ordinal)) {  						Debug.WriteLine("Found {0:x4}: {1}"' hWnd' windowTitle);  						IntPtr result = Send(hWnd' message);  						Debug.WriteLine("WM_COPYDATA result: {0:x8}"' result);  						if (result == (IntPtr)1) {  							if (activate)  								NativeMethods.SetForegroundWindow(hWnd);  							success = true;  							return false; // stop enumeration  						}  					}  					return true; // continue enumeration  				}' IntPtr.Zero);
Magic Number,ICSharpCode.ILSpy,App,C:\repos\icsharpcode_ILSpy\ILSpy\App.xaml.cs,Send,The following statement contains a magic number: lParam.Size = message.Length * 2;
Magic Number,ICSharpCode.ILSpy,App,C:\repos\icsharpcode_ILSpy\ILSpy\App.xaml.cs,Send,The following statement contains a magic number: fixed (char *buffer = message) {  				lParam.Buffer = (IntPtr)buffer;  				IntPtr result;  				// SendMessage with 3s timeout (e.g. when the target process is stopped in the debugger)  				if (NativeMethods.SendMessageTimeout(  					hWnd' NativeMethods.WM_COPYDATA' IntPtr.Zero' ref lParam'  					SMTO_NORMAL' 3000' out result) != IntPtr.Zero)  				{  					return result;  				} else {  					return IntPtr.Zero;  				}  			}
Magic Number,ICSharpCode.ILSpy,CreateListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\CreateListDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.ListName = ((System.Windows.Controls.TextBox)(target));                            #line 17 "..\..\..\CreateListDialog.xaml"              this.ListName.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.TextBox_TextChanged);                            #line default              #line hidden              return;              case 2:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\CreateListDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,DebugSteps,C:\repos\icsharpcode_ILSpy\ILSpy\DebugSteps.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.tree = ((System.Windows.Controls.TreeView)(target));                            #line 15 "..\..\..\DebugSteps.xaml"              this.tree.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ShowStateAfter_Click);                            #line default              #line hidden                            #line 15 "..\..\..\DebugSteps.xaml"              this.tree.KeyDown += new System.Windows.Input.KeyEventHandler(this.tree_KeyDown);                            #line default              #line hidden              return;              case 2:                            #line 23 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ShowStateBefore_Click);                            #line default              #line hidden              return;              case 3:                            #line 24 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ShowStateAfter_Click);                            #line default              #line hidden              return;              case 4:                            #line 25 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.DebugStep_Click);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,DebugSteps,C:\repos\icsharpcode_ILSpy\ILSpy\DebugSteps.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.tree = ((System.Windows.Controls.TreeView)(target));                            #line 15 "..\..\..\DebugSteps.xaml"              this.tree.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ShowStateAfter_Click);                            #line default              #line hidden                            #line 15 "..\..\..\DebugSteps.xaml"              this.tree.KeyDown += new System.Windows.Input.KeyEventHandler(this.tree_KeyDown);                            #line default              #line hidden              return;              case 2:                            #line 23 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ShowStateBefore_Click);                            #line default              #line hidden              return;              case 3:                            #line 24 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ShowStateAfter_Click);                            #line default              #line hidden              return;              case 4:                            #line 25 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.DebugStep_Click);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,DebugSteps,C:\repos\icsharpcode_ILSpy\ILSpy\DebugSteps.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.tree = ((System.Windows.Controls.TreeView)(target));                            #line 15 "..\..\..\DebugSteps.xaml"              this.tree.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ShowStateAfter_Click);                            #line default              #line hidden                            #line 15 "..\..\..\DebugSteps.xaml"              this.tree.KeyDown += new System.Windows.Input.KeyEventHandler(this.tree_KeyDown);                            #line default              #line hidden              return;              case 2:                            #line 23 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ShowStateBefore_Click);                            #line default              #line hidden              return;              case 3:                            #line 24 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ShowStateAfter_Click);                            #line default              #line hidden              return;              case 4:                            #line 25 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.DebugStep_Click);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,ILSpyTraceListener,C:\repos\icsharpcode_ILSpy\ILSpy\ILSpyTraceListener.cs,Fail,The following statement contains a magic number: if (result == 0) { // throw  				throw new AssertionFailedException(message);  			} else if (result == 1) { // debug  				Debugger.Break();  			} else if (result == 2) { // ignore  			} else if (result == 3) {  				lock (ignoredStacks) {  					ignoredStacks.Add(topFrame);  				}  			}
Magic Number,ICSharpCode.ILSpy,ILSpyTraceListener,C:\repos\icsharpcode_ILSpy\ILSpy\ILSpyTraceListener.cs,Fail,The following statement contains a magic number: if (result == 0) { // throw  				throw new AssertionFailedException(message);  			} else if (result == 1) { // debug  				Debugger.Break();  			} else if (result == 2) { // ignore  			} else if (result == 3) {  				lock (ignoredStacks) {  					ignoredStacks.Add(topFrame);  				}  			}
Magic Number,ICSharpCode.ILSpy,ILSpyTraceListener,C:\repos\icsharpcode_ILSpy\ILSpy\ILSpyTraceListener.cs,ShowAssertionDialog,The following statement contains a magic number: CustomDialog inputBox = new CustomDialog("Assertion Failed"' message.TakeStartEllipsis(750)' -1' 2' buttonTexts);
Magic Number,ICSharpCode.ILSpy,ILSpyTraceListener,C:\repos\icsharpcode_ILSpy\ILSpy\ILSpyTraceListener.cs,ShowAssertionDialog,The following statement contains a magic number: CustomDialog inputBox = new CustomDialog("Assertion Failed"' message.TakeStartEllipsis(750)' -1' 2' buttonTexts);
Magic Number,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,AddReferenceWarningMessage,The following statement contains a magic number: if (output is ISmartTextOutput fancyOutput) {  				fancyOutput.AddUIElement(() => new StackPanel {  					Margin = new Thickness(5)'  					Orientation = Orientation.Horizontal'  					Children = {  						new Image {  							Width = 32'  							Height = 32'  							Source = Images.LoadImage(this' "Images/Warning.png")  						}'  						new TextBlock {  							Margin = new Thickness(5' 0' 0' 0)'  							Text = line1 + Environment.NewLine + line2  						}  					}  				});  				fancyOutput.WriteLine();  				fancyOutput.AddButton(Images.ViewCode' "Show assembly load log"' delegate {  					MainWindow.Instance.SelectNode(MainWindow.Instance.FindTreeNode(assembly).Children.OfType<ReferenceFolderTreeNode>().First());  				});  				fancyOutput.WriteLine();  			} else {  				WriteCommentLine(output' line1);  				WriteCommentLine(output' line2);  			}
Magic Number,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,AddReferenceWarningMessage,The following statement contains a magic number: if (output is ISmartTextOutput fancyOutput) {  				fancyOutput.AddUIElement(() => new StackPanel {  					Margin = new Thickness(5)'  					Orientation = Orientation.Horizontal'  					Children = {  						new Image {  							Width = 32'  							Height = 32'  							Source = Images.LoadImage(this' "Images/Warning.png")  						}'  						new TextBlock {  							Margin = new Thickness(5' 0' 0' 0)'  							Text = line1 + Environment.NewLine + line2  						}  					}  				});  				fancyOutput.WriteLine();  				fancyOutput.AddButton(Images.ViewCode' "Show assembly load log"' delegate {  					MainWindow.Instance.SelectNode(MainWindow.Instance.FindTreeNode(assembly).Children.OfType<ReferenceFolderTreeNode>().First());  				});  				fancyOutput.WriteLine();  			} else {  				WriteCommentLine(output' line1);  				WriteCommentLine(output' line2);  			}
Magic Number,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,AddReferenceWarningMessage,The following statement contains a magic number: if (output is ISmartTextOutput fancyOutput) {  				fancyOutput.AddUIElement(() => new StackPanel {  					Margin = new Thickness(5)'  					Orientation = Orientation.Horizontal'  					Children = {  						new Image {  							Width = 32'  							Height = 32'  							Source = Images.LoadImage(this' "Images/Warning.png")  						}'  						new TextBlock {  							Margin = new Thickness(5' 0' 0' 0)'  							Text = line1 + Environment.NewLine + line2  						}  					}  				});  				fancyOutput.WriteLine();  				fancyOutput.AddButton(Images.ViewCode' "Show assembly load log"' delegate {  					MainWindow.Instance.SelectNode(MainWindow.Instance.FindTreeNode(assembly).Children.OfType<ReferenceFolderTreeNode>().First());  				});  				fancyOutput.WriteLine();  			} else {  				WriteCommentLine(output' line1);  				WriteCommentLine(output' line2);  			}
Magic Number,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,AddReferenceWarningMessage,The following statement contains a magic number: if (output is ISmartTextOutput fancyOutput) {  				fancyOutput.AddUIElement(() => new StackPanel {  					Margin = new Thickness(5)'  					Orientation = Orientation.Horizontal'  					Children = {  						new Image {  							Width = 32'  							Height = 32'  							Source = Images.LoadImage(this' "Images/Warning.png")  						}'  						new TextBlock {  							Margin = new Thickness(5' 0' 0' 0)'  							Text = line1 + Environment.NewLine + line2  						}  					}  				});  				fancyOutput.WriteLine();  				fancyOutput.AddButton(Images.ViewCode' "Show assembly load log"' delegate {  					MainWindow.Instance.SelectNode(MainWindow.Instance.FindTreeNode(assembly).Children.OfType<ReferenceFolderTreeNode>().First());  				});  				fancyOutput.WriteLine();  			} else {  				WriteCommentLine(output' line1);  				WriteCommentLine(output' line2);  			}
Magic Number,ICSharpCode.ILSpy,ExtensionMethods,C:\repos\icsharpcode_ILSpy\ILSpy\ExtensionMethods.cs,BinarySearch,The following statement contains a magic number: while (start <= end) {  				int pivot = (start + end) / 2;  				int result = comparer.Compare(item' list[pivot]);  				if (result == 0)  					return pivot;  				if (result < 0)  					end = pivot - 1;  				else  					start = pivot + 1;  			}
Magic Number,ICSharpCode.ILSpy,ExtensionMethods,C:\repos\icsharpcode_ILSpy\ILSpy\ExtensionMethods.cs,BinarySearch,The following statement contains a magic number: while (start <= end) {  				int m = (start + end) / 2;  				TKey key = keySelector(instance[m]);  				int result = key.CompareTo(itemKey);  				if (result == 0)  					return m;  				if (result < 0)  					start = m + 1;  				else  					end = m - 1;  			}
Magic Number,ICSharpCode.ILSpy,Fusion,C:\repos\icsharpcode_ILSpy\ILSpy\Fusion.cs,GetGacPath,The following statement contains a magic number: const int size = 260;
Magic Number,ICSharpCode.ILSpy,GacInterop,C:\repos\icsharpcode_ILSpy\ILSpy\GacInterop.cs,GetGacAssemblyFullNames,The following statement contains a magic number: Fusion.CreateAssemblyEnum(out assemblyEnum' null' null' 2' 0);
Magic Number,ICSharpCode.ILSpy,GacInterop,C:\repos\icsharpcode_ILSpy\ILSpy\GacInterop.cs,FindAssemblyInNetGac,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  				for (int j = 0; j < gacs.Length; j++) {  					var gac = Path.Combine (gac_paths [i]' gacs [j]);  					var file = GetAssemblyFile (reference' prefixes [i]' gac);  					if (File.Exists (file))  						return file;  				}  			}
Magic Number,ICSharpCode.ILSpy,GuessFileType,C:\repos\icsharpcode_ILSpy\ILSpy\GuessFileType.cs,DetectFileType,The following statement contains a magic number: if (stream.Length >= 2) {  				int firstByte = stream.ReadByte();  				int secondByte = stream.ReadByte();  				switch ((firstByte << 8) | secondByte) {  					case 0xfffe: // UTF-16 LE BOM / UTF-32 LE BOM  					case 0xfeff: // UTF-16 BE BOM  						stream.Position -= 2;  						reader = new StreamReader(stream' detectEncodingFromByteOrderMarks: true);  						break;  					case 0xefbb: // start of UTF-8 BOM  						if (stream.ReadByte() == 0xbf) {  							reader = new StreamReader(stream' Encoding.UTF8);  							break;  						} else {  							return FileType.Binary;  						}  					default:  						if (IsUTF8(stream' (byte)firstByte' (byte)secondByte)) {  							stream.Position = 0;  							reader = new StreamReader(stream' Encoding.UTF8);  							break;  						} else {  							return FileType.Binary;  						}  				}  			} else {  				return FileType.Binary;  			}
Magic Number,ICSharpCode.ILSpy,GuessFileType,C:\repos\icsharpcode_ILSpy\ILSpy\GuessFileType.cs,DetectFileType,The following statement contains a magic number: if (stream.Length >= 2) {  				int firstByte = stream.ReadByte();  				int secondByte = stream.ReadByte();  				switch ((firstByte << 8) | secondByte) {  					case 0xfffe: // UTF-16 LE BOM / UTF-32 LE BOM  					case 0xfeff: // UTF-16 BE BOM  						stream.Position -= 2;  						reader = new StreamReader(stream' detectEncodingFromByteOrderMarks: true);  						break;  					case 0xefbb: // start of UTF-8 BOM  						if (stream.ReadByte() == 0xbf) {  							reader = new StreamReader(stream' Encoding.UTF8);  							break;  						} else {  							return FileType.Binary;  						}  					default:  						if (IsUTF8(stream' (byte)firstByte' (byte)secondByte)) {  							stream.Position = 0;  							reader = new StreamReader(stream' Encoding.UTF8);  							break;  						} else {  							return FileType.Binary;  						}  				}  			} else {  				return FileType.Binary;  			}
Magic Number,ICSharpCode.ILSpy,GuessFileType,C:\repos\icsharpcode_ILSpy\ILSpy\GuessFileType.cs,DetectFileType,The following statement contains a magic number: if (stream.Length >= 2) {  				int firstByte = stream.ReadByte();  				int secondByte = stream.ReadByte();  				switch ((firstByte << 8) | secondByte) {  					case 0xfffe: // UTF-16 LE BOM / UTF-32 LE BOM  					case 0xfeff: // UTF-16 BE BOM  						stream.Position -= 2;  						reader = new StreamReader(stream' detectEncodingFromByteOrderMarks: true);  						break;  					case 0xefbb: // start of UTF-8 BOM  						if (stream.ReadByte() == 0xbf) {  							reader = new StreamReader(stream' Encoding.UTF8);  							break;  						} else {  							return FileType.Binary;  						}  					default:  						if (IsUTF8(stream' (byte)firstByte' (byte)secondByte)) {  							stream.Position = 0;  							reader = new StreamReader(stream' Encoding.UTF8);  							break;  						} else {  							return FileType.Binary;  						}  				}  			} else {  				return FileType.Binary;  			}
Magic Number,ICSharpCode.ILSpy,GuessFileType,C:\repos\icsharpcode_ILSpy\ILSpy\GuessFileType.cs,IsUTF8,The following statement contains a magic number: int max = (int)Math.Min(fs.Length' 500000);
Magic Number,ICSharpCode.ILSpy,GuessFileType,C:\repos\icsharpcode_ILSpy\ILSpy\GuessFileType.cs,IsUTF8,The following statement contains a magic number: const int UTF8  = 2;
Magic Number,ICSharpCode.ILSpy,GuessFileType,C:\repos\icsharpcode_ILSpy\ILSpy\GuessFileType.cs,IsUTF8,The following statement contains a magic number: const int UTF8Sequence = 3;
Magic Number,ICSharpCode.ILSpy,GuessFileType,C:\repos\icsharpcode_ILSpy\ILSpy\GuessFileType.cs,IsUTF8,The following statement contains a magic number: for (int i = 0; i < max; i++) {  				if (i == 0) {  					b = firstByte;  				} else if (i == 1) {  					b = secondByte;  				} else {  					b = (byte)fs.ReadByte();  				}  				if (b < 0x80) {  					// normal ASCII character  					if (state == UTF8Sequence) {  						state = Error;  						break;  					}  				} else if (b < 0xc0) {  					// 10xxxxxx : continues UTF8 byte sequence  					if (state == UTF8Sequence) {  						--sequenceLength;  						if (sequenceLength < 0) {  							state = Error;  							break;  						} else if (sequenceLength == 0) {  							state = UTF8;  						}  					} else {  						state = Error;  						break;  					}  				} else if (b >= 0xc2 && b < 0xf5) {  					// beginning of byte sequence  					if (state == UTF8 || state == ASCII) {  						state = UTF8Sequence;  						if (b < 0xe0) {  							sequenceLength = 1; // one more byte following  						} else if (b < 0xf0) {  							sequenceLength = 2; // two more bytes following  						} else {  							sequenceLength = 3; // three more bytes following  						}  					} else {  						state = Error;  						break;  					}  				} else {  					// 0xc0' 0xc1' 0xf5 to 0xff are invalid in UTF-8 (see RFC 3629)  					state = Error;  					break;  				}  			}
Magic Number,ICSharpCode.ILSpy,GuessFileType,C:\repos\icsharpcode_ILSpy\ILSpy\GuessFileType.cs,IsUTF8,The following statement contains a magic number: for (int i = 0; i < max; i++) {  				if (i == 0) {  					b = firstByte;  				} else if (i == 1) {  					b = secondByte;  				} else {  					b = (byte)fs.ReadByte();  				}  				if (b < 0x80) {  					// normal ASCII character  					if (state == UTF8Sequence) {  						state = Error;  						break;  					}  				} else if (b < 0xc0) {  					// 10xxxxxx : continues UTF8 byte sequence  					if (state == UTF8Sequence) {  						--sequenceLength;  						if (sequenceLength < 0) {  							state = Error;  							break;  						} else if (sequenceLength == 0) {  							state = UTF8;  						}  					} else {  						state = Error;  						break;  					}  				} else if (b >= 0xc2 && b < 0xf5) {  					// beginning of byte sequence  					if (state == UTF8 || state == ASCII) {  						state = UTF8Sequence;  						if (b < 0xe0) {  							sequenceLength = 1; // one more byte following  						} else if (b < 0xf0) {  							sequenceLength = 2; // two more bytes following  						} else {  							sequenceLength = 3; // three more bytes following  						}  					} else {  						state = Error;  						break;  					}  				} else {  					// 0xc0' 0xc1' 0xf5 to 0xff are invalid in UTF-8 (see RFC 3629)  					state = Error;  					break;  				}  			}
Magic Number,ICSharpCode.ILSpy,ContextMenuProvider,C:\repos\icsharpcode_ILSpy\ILSpy\ContextMenuEntry.cs,ShowContextMenu,The following statement contains a magic number: foreach (var category in entries.OrderBy(c => c.Metadata.Order).GroupBy(c => c.Metadata.Category)) {  				bool needSeparatorForCategory = menu.Items.Count > 0;  				foreach (var entryPair in category) {  					IContextMenuEntry entry = entryPair.Value;  					if (entry.IsVisible(context)) {  						if (needSeparatorForCategory) {  							menu.Items.Add(new Separator());  							needSeparatorForCategory = false;  						}  						MenuItem menuItem = new MenuItem();  						menuItem.Header = entryPair.Metadata.Header;  						if (!string.IsNullOrEmpty(entryPair.Metadata.Icon)) {  							menuItem.Icon = new Image {  								Width = 16'  								Height = 16'  								Source = Images.LoadImage(entry' entryPair.Metadata.Icon)  							};  						}  						if (entryPair.Value.IsEnabled(context)) {  							menuItem.Click += delegate { entry.Execute(context); };  						} else  							menuItem.IsEnabled = false;  						menu.Items.Add(menuItem);  					}  				}  			}
Magic Number,ICSharpCode.ILSpy,ContextMenuProvider,C:\repos\icsharpcode_ILSpy\ILSpy\ContextMenuEntry.cs,ShowContextMenu,The following statement contains a magic number: foreach (var category in entries.OrderBy(c => c.Metadata.Order).GroupBy(c => c.Metadata.Category)) {  				bool needSeparatorForCategory = menu.Items.Count > 0;  				foreach (var entryPair in category) {  					IContextMenuEntry entry = entryPair.Value;  					if (entry.IsVisible(context)) {  						if (needSeparatorForCategory) {  							menu.Items.Add(new Separator());  							needSeparatorForCategory = false;  						}  						MenuItem menuItem = new MenuItem();  						menuItem.Header = entryPair.Metadata.Header;  						if (!string.IsNullOrEmpty(entryPair.Metadata.Icon)) {  							menuItem.Icon = new Image {  								Width = 16'  								Height = 16'  								Source = Images.LoadImage(entry' entryPair.Metadata.Icon)  							};  						}  						if (entryPair.Value.IsEnabled(context)) {  							menuItem.Click += delegate { entry.Execute(context); };  						} else  							menuItem.IsEnabled = false;  						menu.Items.Add(menuItem);  					}  				}  			}
Magic Number,ICSharpCode.ILSpy,AbstractLexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,IsIdentifierPart,The following statement contains a magic number: if (ch == 95) return true;
Magic Number,ICSharpCode.ILSpy,Lexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,ReadEscapeSequence,The following statement contains a magic number: switch (c) {  				case '\'':  					ch = '\'';  					break;  				case '\"':  					ch = '\"';  					break;  				case '\\':  					ch = '\\';  					break;  				case '0':  					ch = '\0';  					break;  				case 'a':  					ch = '\a';  					break;  				case 'b':  					ch = '\b';  					break;  				case 'f':  					ch = '\f';  					break;  				case 'n':  					ch = '\n';  					break;  				case 'r':  					ch = '\r';  					break;  				case 't':  					ch = '\t';  					break;  				case 'v':  					ch = '\v';  					break;  				case 'u':  				case 'x':  					// 16 bit unicode character  					c = (char)ReaderRead();  					number = GetHexNumber(c);  					escapeSequenceBuffer[curPos++] = c;    					if (number < 0) {  						Error(Line' Col - 1' String.Format("Invalid char in literal : {0}"' c));  					}  					for (int i = 0; i < 3; ++i) {  						if (IsHex((char)ReaderPeek())) {  							c = (char)ReaderRead();  							int idx = GetHexNumber(c);  							escapeSequenceBuffer[curPos++] = c;  							number = 16 * number + idx;  						} else {  							break;  						}  					}  					ch = (char)number;  					break;  				case 'U':  					// 32 bit unicode character  					number = 0;  					for (int i = 0; i < 8; ++i) {  						if (IsHex((char)ReaderPeek())) {  							c = (char)ReaderRead();  							int idx = GetHexNumber(c);  							escapeSequenceBuffer[curPos++] = c;  							number = 16 * number + idx;  						} else {  							Error(Line' Col - 1' String.Format("Invalid char in literal : {0}"' (char)ReaderPeek()));  							break;  						}  					}  					if (number > 0xffff) {  						ch = '\0';  						surrogatePair = char.ConvertFromUtf32(number);  					} else {  						ch = (char)number;  					}  					break;  				default:  					Error(Line' Col' String.Format("Unexpected escape sequence : {0}"' c));  					ch = '\0';  					break;  			}
Magic Number,ICSharpCode.ILSpy,Lexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,ReadEscapeSequence,The following statement contains a magic number: switch (c) {  				case '\'':  					ch = '\'';  					break;  				case '\"':  					ch = '\"';  					break;  				case '\\':  					ch = '\\';  					break;  				case '0':  					ch = '\0';  					break;  				case 'a':  					ch = '\a';  					break;  				case 'b':  					ch = '\b';  					break;  				case 'f':  					ch = '\f';  					break;  				case 'n':  					ch = '\n';  					break;  				case 'r':  					ch = '\r';  					break;  				case 't':  					ch = '\t';  					break;  				case 'v':  					ch = '\v';  					break;  				case 'u':  				case 'x':  					// 16 bit unicode character  					c = (char)ReaderRead();  					number = GetHexNumber(c);  					escapeSequenceBuffer[curPos++] = c;    					if (number < 0) {  						Error(Line' Col - 1' String.Format("Invalid char in literal : {0}"' c));  					}  					for (int i = 0; i < 3; ++i) {  						if (IsHex((char)ReaderPeek())) {  							c = (char)ReaderRead();  							int idx = GetHexNumber(c);  							escapeSequenceBuffer[curPos++] = c;  							number = 16 * number + idx;  						} else {  							break;  						}  					}  					ch = (char)number;  					break;  				case 'U':  					// 32 bit unicode character  					number = 0;  					for (int i = 0; i < 8; ++i) {  						if (IsHex((char)ReaderPeek())) {  							c = (char)ReaderRead();  							int idx = GetHexNumber(c);  							escapeSequenceBuffer[curPos++] = c;  							number = 16 * number + idx;  						} else {  							Error(Line' Col - 1' String.Format("Invalid char in literal : {0}"' (char)ReaderPeek()));  							break;  						}  					}  					if (number > 0xffff) {  						ch = '\0';  						surrogatePair = char.ConvertFromUtf32(number);  					} else {  						ch = (char)number;  					}  					break;  				default:  					Error(Line' Col' String.Format("Unexpected escape sequence : {0}"' c));  					ch = '\0';  					break;  			}
Magic Number,ICSharpCode.ILSpy,Lexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,ReadEscapeSequence,The following statement contains a magic number: switch (c) {  				case '\'':  					ch = '\'';  					break;  				case '\"':  					ch = '\"';  					break;  				case '\\':  					ch = '\\';  					break;  				case '0':  					ch = '\0';  					break;  				case 'a':  					ch = '\a';  					break;  				case 'b':  					ch = '\b';  					break;  				case 'f':  					ch = '\f';  					break;  				case 'n':  					ch = '\n';  					break;  				case 'r':  					ch = '\r';  					break;  				case 't':  					ch = '\t';  					break;  				case 'v':  					ch = '\v';  					break;  				case 'u':  				case 'x':  					// 16 bit unicode character  					c = (char)ReaderRead();  					number = GetHexNumber(c);  					escapeSequenceBuffer[curPos++] = c;    					if (number < 0) {  						Error(Line' Col - 1' String.Format("Invalid char in literal : {0}"' c));  					}  					for (int i = 0; i < 3; ++i) {  						if (IsHex((char)ReaderPeek())) {  							c = (char)ReaderRead();  							int idx = GetHexNumber(c);  							escapeSequenceBuffer[curPos++] = c;  							number = 16 * number + idx;  						} else {  							break;  						}  					}  					ch = (char)number;  					break;  				case 'U':  					// 32 bit unicode character  					number = 0;  					for (int i = 0; i < 8; ++i) {  						if (IsHex((char)ReaderPeek())) {  							c = (char)ReaderRead();  							int idx = GetHexNumber(c);  							escapeSequenceBuffer[curPos++] = c;  							number = 16 * number + idx;  						} else {  							Error(Line' Col - 1' String.Format("Invalid char in literal : {0}"' (char)ReaderPeek()));  							break;  						}  					}  					if (number > 0xffff) {  						ch = '\0';  						surrogatePair = char.ConvertFromUtf32(number);  					} else {  						ch = (char)number;  					}  					break;  				default:  					Error(Line' Col' String.Format("Unexpected escape sequence : {0}"' c));  					ch = '\0';  					break;  			}
Magic Number,ICSharpCode.ILSpy,Lexer,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLexer.cs,ReadEscapeSequence,The following statement contains a magic number: switch (c) {  				case '\'':  					ch = '\'';  					break;  				case '\"':  					ch = '\"';  					break;  				case '\\':  					ch = '\\';  					break;  				case '0':  					ch = '\0';  					break;  				case 'a':  					ch = '\a';  					break;  				case 'b':  					ch = '\b';  					break;  				case 'f':  					ch = '\f';  					break;  				case 'n':  					ch = '\n';  					break;  				case 'r':  					ch = '\r';  					break;  				case 't':  					ch = '\t';  					break;  				case 'v':  					ch = '\v';  					break;  				case 'u':  				case 'x':  					// 16 bit unicode character  					c = (char)ReaderRead();  					number = GetHexNumber(c);  					escapeSequenceBuffer[curPos++] = c;    					if (number < 0) {  						Error(Line' Col - 1' String.Format("Invalid char in literal : {0}"' c));  					}  					for (int i = 0; i < 3; ++i) {  						if (IsHex((char)ReaderPeek())) {  							c = (char)ReaderRead();  							int idx = GetHexNumber(c);  							escapeSequenceBuffer[curPos++] = c;  							number = 16 * number + idx;  						} else {  							break;  						}  					}  					ch = (char)number;  					break;  				case 'U':  					// 32 bit unicode character  					number = 0;  					for (int i = 0; i < 8; ++i) {  						if (IsHex((char)ReaderPeek())) {  							c = (char)ReaderRead();  							int idx = GetHexNumber(c);  							escapeSequenceBuffer[curPos++] = c;  							number = 16 * number + idx;  						} else {  							Error(Line' Col - 1' String.Format("Invalid char in literal : {0}"' (char)ReaderPeek()));  							break;  						}  					}  					if (number > 0xffff) {  						ch = '\0';  						surrogatePair = char.ConvertFromUtf32(number);  					} else {  						ch = (char)number;  					}  					break;  				default:  					Error(Line' Col' String.Format("Unexpected escape sequence : {0}"' c));  					ch = '\0';  					break;  			}
Magic Number,ICSharpCode.ILSpy,SmartTextOutputExtensions,C:\repos\icsharpcode_ILSpy\ILSpy\ISmartTextOutput.cs,AddButton,The following statement contains a magic number: output.AddUIElement(  				delegate {  					Button button = new Button();  					button.Cursor = Cursors.Arrow;  					button.Margin = new Thickness(2);  					button.Padding = new Thickness(9' 1' 9' 1);  					button.MinWidth = 73;  					if (icon != null) {  						button.Content = new StackPanel {  							Orientation = Orientation.Horizontal'  							Children = {  								new Image { Width = 16' Height = 16' Source = icon' Margin = new Thickness(0' 0' 4' 0) }'  								new TextBlock { Text = text }  							}  						};  					} else {  						button.Content = text;  					}  					button.Click += click;  					return button;  				});
Magic Number,ICSharpCode.ILSpy,SmartTextOutputExtensions,C:\repos\icsharpcode_ILSpy\ILSpy\ISmartTextOutput.cs,AddButton,The following statement contains a magic number: output.AddUIElement(  				delegate {  					Button button = new Button();  					button.Cursor = Cursors.Arrow;  					button.Margin = new Thickness(2);  					button.Padding = new Thickness(9' 1' 9' 1);  					button.MinWidth = 73;  					if (icon != null) {  						button.Content = new StackPanel {  							Orientation = Orientation.Horizontal'  							Children = {  								new Image { Width = 16' Height = 16' Source = icon' Margin = new Thickness(0' 0' 4' 0) }'  								new TextBlock { Text = text }  							}  						};  					} else {  						button.Content = text;  					}  					button.Click += click;  					return button;  				});
Magic Number,ICSharpCode.ILSpy,SmartTextOutputExtensions,C:\repos\icsharpcode_ILSpy\ILSpy\ISmartTextOutput.cs,AddButton,The following statement contains a magic number: output.AddUIElement(  				delegate {  					Button button = new Button();  					button.Cursor = Cursors.Arrow;  					button.Margin = new Thickness(2);  					button.Padding = new Thickness(9' 1' 9' 1);  					button.MinWidth = 73;  					if (icon != null) {  						button.Content = new StackPanel {  							Orientation = Orientation.Horizontal'  							Children = {  								new Image { Width = 16' Height = 16' Source = icon' Margin = new Thickness(0' 0' 4' 0) }'  								new TextBlock { Text = text }  							}  						};  					} else {  						button.Content = text;  					}  					button.Click += click;  					return button;  				});
Magic Number,ICSharpCode.ILSpy,SmartTextOutputExtensions,C:\repos\icsharpcode_ILSpy\ILSpy\ISmartTextOutput.cs,AddButton,The following statement contains a magic number: output.AddUIElement(  				delegate {  					Button button = new Button();  					button.Cursor = Cursors.Arrow;  					button.Margin = new Thickness(2);  					button.Padding = new Thickness(9' 1' 9' 1);  					button.MinWidth = 73;  					if (icon != null) {  						button.Content = new StackPanel {  							Orientation = Orientation.Horizontal'  							Children = {  								new Image { Width = 16' Height = 16' Source = icon' Margin = new Thickness(0' 0' 4' 0) }'  								new TextBlock { Text = text }  							}  						};  					} else {  						button.Content = text;  					}  					button.Click += click;  					return button;  				});
Magic Number,ICSharpCode.ILSpy,SmartTextOutputExtensions,C:\repos\icsharpcode_ILSpy\ILSpy\ISmartTextOutput.cs,AddButton,The following statement contains a magic number: output.AddUIElement(  				delegate {  					Button button = new Button();  					button.Cursor = Cursors.Arrow;  					button.Margin = new Thickness(2);  					button.Padding = new Thickness(9' 1' 9' 1);  					button.MinWidth = 73;  					if (icon != null) {  						button.Content = new StackPanel {  							Orientation = Orientation.Horizontal'  							Children = {  								new Image { Width = 16' Height = 16' Source = icon' Margin = new Thickness(0' 0' 4' 0) }'  								new TextBlock { Text = text }  							}  						};  					} else {  						button.Content = text;  					}  					button.Click += click;  					return button;  				});
Magic Number,ICSharpCode.ILSpy,SmartTextOutputExtensions,C:\repos\icsharpcode_ILSpy\ILSpy\ISmartTextOutput.cs,AddButton,The following statement contains a magic number: output.AddUIElement(  				delegate {  					Button button = new Button();  					button.Cursor = Cursors.Arrow;  					button.Margin = new Thickness(2);  					button.Padding = new Thickness(9' 1' 9' 1);  					button.MinWidth = 73;  					if (icon != null) {  						button.Content = new StackPanel {  							Orientation = Orientation.Horizontal'  							Children = {  								new Image { Width = 16' Height = 16' Source = icon' Margin = new Thickness(0' 0' 4' 0) }'  								new TextBlock { Text = text }  							}  						};  					} else {  						button.Content = text;  					}  					button.Click += click;  					return button;  				});
Magic Number,ICSharpCode.ILSpy,SmartTextOutputExtensions,C:\repos\icsharpcode_ILSpy\ILSpy\ISmartTextOutput.cs,AddButton,The following statement contains a magic number: output.AddUIElement(  				delegate {  					Button button = new Button();  					button.Cursor = Cursors.Arrow;  					button.Margin = new Thickness(2);  					button.Padding = new Thickness(9' 1' 9' 1);  					button.MinWidth = 73;  					if (icon != null) {  						button.Content = new StackPanel {  							Orientation = Orientation.Horizontal'  							Children = {  								new Image { Width = 16' Height = 16' Source = icon' Margin = new Thickness(0' 0' 4' 0) }'  								new TextBlock { Text = text }  							}  						};  					} else {  						button.Content = text;  					}  					button.Click += click;  					return button;  				});
Magic Number,ICSharpCode.ILSpy,OpenFromGacDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenFromGacDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterTextBox = ((System.Windows.Controls.TextBox)(target));                            #line 25 "..\..\..\OpenFromGacDialog.xaml"              this.filterTextBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.FilterTextBox_TextChanged);                            #line default              #line hidden              return;              case 2:              this.listView = ((System.Windows.Controls.ListView)(target));                            #line 27 "..\..\..\OpenFromGacDialog.xaml"              this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.nameColumn = ((ICSharpCode.ILSpy.Controls.SortableGridViewColumn)(target));              return;              case 4:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 39 "..\..\..\OpenFromGacDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 5:              this.gacReadingProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              }
Magic Number,ICSharpCode.ILSpy,OpenFromGacDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenFromGacDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterTextBox = ((System.Windows.Controls.TextBox)(target));                            #line 25 "..\..\..\OpenFromGacDialog.xaml"              this.filterTextBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.FilterTextBox_TextChanged);                            #line default              #line hidden              return;              case 2:              this.listView = ((System.Windows.Controls.ListView)(target));                            #line 27 "..\..\..\OpenFromGacDialog.xaml"              this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.nameColumn = ((ICSharpCode.ILSpy.Controls.SortableGridViewColumn)(target));              return;              case 4:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 39 "..\..\..\OpenFromGacDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 5:              this.gacReadingProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              }
Magic Number,ICSharpCode.ILSpy,OpenFromGacDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenFromGacDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterTextBox = ((System.Windows.Controls.TextBox)(target));                            #line 25 "..\..\..\OpenFromGacDialog.xaml"              this.filterTextBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.FilterTextBox_TextChanged);                            #line default              #line hidden              return;              case 2:              this.listView = ((System.Windows.Controls.ListView)(target));                            #line 27 "..\..\..\OpenFromGacDialog.xaml"              this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.nameColumn = ((ICSharpCode.ILSpy.Controls.SortableGridViewColumn)(target));              return;              case 4:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 39 "..\..\..\OpenFromGacDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 5:              this.gacReadingProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              }
Magic Number,ICSharpCode.ILSpy,OpenFromGacDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenFromGacDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.filterTextBox = ((System.Windows.Controls.TextBox)(target));                            #line 25 "..\..\..\OpenFromGacDialog.xaml"              this.filterTextBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.FilterTextBox_TextChanged);                            #line default              #line hidden              return;              case 2:              this.listView = ((System.Windows.Controls.ListView)(target));                            #line 27 "..\..\..\OpenFromGacDialog.xaml"              this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.nameColumn = ((ICSharpCode.ILSpy.Controls.SortableGridViewColumn)(target));              return;              case 4:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 39 "..\..\..\OpenFromGacDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 5:              this.gacReadingProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              }
Magic Number,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listView = ((System.Windows.Controls.ListView)(target));                            #line 21 "..\..\..\OpenListDialog.xaml"              this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.Loaded += new System.Windows.RoutedEventHandler(this.listView_Loaded);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.listView_MouseDoubleClick);                            #line default              #line hidden              return;              case 2:              this.nameColumn = ((ICSharpCode.ILSpy.Controls.SortableGridViewColumn)(target));              return;              case 3:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 31 "..\..\..\OpenListDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 36 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CreateButton_Click);                            #line default              #line hidden              return;              case 5:              this.deleteButton = ((System.Windows.Controls.Button)(target));                            #line 37 "..\..\..\OpenListDialog.xaml"              this.deleteButton.Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);                            #line default              #line hidden              return;              case 6:                            #line 38 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ResetButton_Click);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listView = ((System.Windows.Controls.ListView)(target));                            #line 21 "..\..\..\OpenListDialog.xaml"              this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.Loaded += new System.Windows.RoutedEventHandler(this.listView_Loaded);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.listView_MouseDoubleClick);                            #line default              #line hidden              return;              case 2:              this.nameColumn = ((ICSharpCode.ILSpy.Controls.SortableGridViewColumn)(target));              return;              case 3:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 31 "..\..\..\OpenListDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 36 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CreateButton_Click);                            #line default              #line hidden              return;              case 5:              this.deleteButton = ((System.Windows.Controls.Button)(target));                            #line 37 "..\..\..\OpenListDialog.xaml"              this.deleteButton.Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);                            #line default              #line hidden              return;              case 6:                            #line 38 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ResetButton_Click);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listView = ((System.Windows.Controls.ListView)(target));                            #line 21 "..\..\..\OpenListDialog.xaml"              this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.Loaded += new System.Windows.RoutedEventHandler(this.listView_Loaded);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.listView_MouseDoubleClick);                            #line default              #line hidden              return;              case 2:              this.nameColumn = ((ICSharpCode.ILSpy.Controls.SortableGridViewColumn)(target));              return;              case 3:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 31 "..\..\..\OpenListDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 36 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CreateButton_Click);                            #line default              #line hidden              return;              case 5:              this.deleteButton = ((System.Windows.Controls.Button)(target));                            #line 37 "..\..\..\OpenListDialog.xaml"              this.deleteButton.Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);                            #line default              #line hidden              return;              case 6:                            #line 38 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ResetButton_Click);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listView = ((System.Windows.Controls.ListView)(target));                            #line 21 "..\..\..\OpenListDialog.xaml"              this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.Loaded += new System.Windows.RoutedEventHandler(this.listView_Loaded);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.listView_MouseDoubleClick);                            #line default              #line hidden              return;              case 2:              this.nameColumn = ((ICSharpCode.ILSpy.Controls.SortableGridViewColumn)(target));              return;              case 3:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 31 "..\..\..\OpenListDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 36 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CreateButton_Click);                            #line default              #line hidden              return;              case 5:              this.deleteButton = ((System.Windows.Controls.Button)(target));                            #line 37 "..\..\..\OpenListDialog.xaml"              this.deleteButton.Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);                            #line default              #line hidden              return;              case 6:                            #line 38 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ResetButton_Click);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listView = ((System.Windows.Controls.ListView)(target));                            #line 21 "..\..\..\OpenListDialog.xaml"              this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.Loaded += new System.Windows.RoutedEventHandler(this.listView_Loaded);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.listView_MouseDoubleClick);                            #line default              #line hidden              return;              case 2:              this.nameColumn = ((ICSharpCode.ILSpy.Controls.SortableGridViewColumn)(target));              return;              case 3:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 31 "..\..\..\OpenListDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 36 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CreateButton_Click);                            #line default              #line hidden              return;              case 5:              this.deleteButton = ((System.Windows.Controls.Button)(target));                            #line 37 "..\..\..\OpenListDialog.xaml"              this.deleteButton.Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);                            #line default              #line hidden              return;              case 6:                            #line 38 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ResetButton_Click);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,SearchPane,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.self = ((ICSharpCode.ILSpy.SearchPane)(target));              return;              case 2:              this.searchBox = ((ICSharpCode.ILSpy.Controls.SearchBox)(target));              return;              case 3:              this.searchModeComboBox = ((System.Windows.Controls.ComboBox)(target));                            #line 25 "..\..\..\SearchPane.xaml"              this.searchModeComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SearchModeComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.listBox = ((System.Windows.Controls.ListBox)(target));                            #line 38 "..\..\..\SearchPane.xaml"              this.listBox.KeyDown += new System.Windows.Input.KeyEventHandler(this.ListBox_KeyDown);                            #line default              #line hidden                            #line 39 "..\..\..\SearchPane.xaml"              this.listBox.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ListBox_MouseDoubleClick);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,SearchPane,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.self = ((ICSharpCode.ILSpy.SearchPane)(target));              return;              case 2:              this.searchBox = ((ICSharpCode.ILSpy.Controls.SearchBox)(target));              return;              case 3:              this.searchModeComboBox = ((System.Windows.Controls.ComboBox)(target));                            #line 25 "..\..\..\SearchPane.xaml"              this.searchModeComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SearchModeComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.listBox = ((System.Windows.Controls.ListBox)(target));                            #line 38 "..\..\..\SearchPane.xaml"              this.listBox.KeyDown += new System.Windows.Input.KeyEventHandler(this.ListBox_KeyDown);                            #line default              #line hidden                            #line 39 "..\..\..\SearchPane.xaml"              this.listBox.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ListBox_MouseDoubleClick);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,SearchPane,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.self = ((ICSharpCode.ILSpy.SearchPane)(target));              return;              case 2:              this.searchBox = ((ICSharpCode.ILSpy.Controls.SearchBox)(target));              return;              case 3:              this.searchModeComboBox = ((System.Windows.Controls.ComboBox)(target));                            #line 25 "..\..\..\SearchPane.xaml"              this.searchModeComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SearchModeComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.listBox = ((System.Windows.Controls.ListBox)(target));                            #line 38 "..\..\..\SearchPane.xaml"              this.listBox.KeyDown += new System.Windows.Input.KeyEventHandler(this.ListBox_KeyDown);                            #line default              #line hidden                            #line 39 "..\..\..\SearchPane.xaml"              this.listBox.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ListBox_MouseDoubleClick);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,AddResult,The following statement contains a magic number: if (++resultCount == 1000) {  					result = new SearchResult { Name = "Search aborted' more than 1000 results found." };  					cts.Cancel();  				}
Magic Number,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,GetSearchStrategy,The following statement contains a magic number: if (terms.Length == 1) {  					if (terms[0].StartsWith("tm:"' StringComparison.Ordinal))  						return new TypeAndMemberSearchStrategy(terms[0].Substring(3));    					if (terms[0].StartsWith("t:"' StringComparison.Ordinal))  						return new TypeSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("m:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("md:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(3)' MemberSearchKind.Method);    					if (terms[0].StartsWith("f:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Field);    					if (terms[0].StartsWith("p:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Property);    					if (terms[0].StartsWith("e:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Event);    					if (terms[0].StartsWith("c:"' StringComparison.Ordinal))  						return new LiteralSearchStrategy(terms[0].Substring(2));  				}
Magic Number,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,GetSearchStrategy,The following statement contains a magic number: if (terms.Length == 1) {  					if (terms[0].StartsWith("tm:"' StringComparison.Ordinal))  						return new TypeAndMemberSearchStrategy(terms[0].Substring(3));    					if (terms[0].StartsWith("t:"' StringComparison.Ordinal))  						return new TypeSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("m:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("md:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(3)' MemberSearchKind.Method);    					if (terms[0].StartsWith("f:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Field);    					if (terms[0].StartsWith("p:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Property);    					if (terms[0].StartsWith("e:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Event);    					if (terms[0].StartsWith("c:"' StringComparison.Ordinal))  						return new LiteralSearchStrategy(terms[0].Substring(2));  				}
Magic Number,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,GetSearchStrategy,The following statement contains a magic number: if (terms.Length == 1) {  					if (terms[0].StartsWith("tm:"' StringComparison.Ordinal))  						return new TypeAndMemberSearchStrategy(terms[0].Substring(3));    					if (terms[0].StartsWith("t:"' StringComparison.Ordinal))  						return new TypeSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("m:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("md:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(3)' MemberSearchKind.Method);    					if (terms[0].StartsWith("f:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Field);    					if (terms[0].StartsWith("p:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Property);    					if (terms[0].StartsWith("e:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Event);    					if (terms[0].StartsWith("c:"' StringComparison.Ordinal))  						return new LiteralSearchStrategy(terms[0].Substring(2));  				}
Magic Number,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,GetSearchStrategy,The following statement contains a magic number: if (terms.Length == 1) {  					if (terms[0].StartsWith("tm:"' StringComparison.Ordinal))  						return new TypeAndMemberSearchStrategy(terms[0].Substring(3));    					if (terms[0].StartsWith("t:"' StringComparison.Ordinal))  						return new TypeSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("m:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("md:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(3)' MemberSearchKind.Method);    					if (terms[0].StartsWith("f:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Field);    					if (terms[0].StartsWith("p:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Property);    					if (terms[0].StartsWith("e:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Event);    					if (terms[0].StartsWith("c:"' StringComparison.Ordinal))  						return new LiteralSearchStrategy(terms[0].Substring(2));  				}
Magic Number,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,GetSearchStrategy,The following statement contains a magic number: if (terms.Length == 1) {  					if (terms[0].StartsWith("tm:"' StringComparison.Ordinal))  						return new TypeAndMemberSearchStrategy(terms[0].Substring(3));    					if (terms[0].StartsWith("t:"' StringComparison.Ordinal))  						return new TypeSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("m:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("md:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(3)' MemberSearchKind.Method);    					if (terms[0].StartsWith("f:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Field);    					if (terms[0].StartsWith("p:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Property);    					if (terms[0].StartsWith("e:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Event);    					if (terms[0].StartsWith("c:"' StringComparison.Ordinal))  						return new LiteralSearchStrategy(terms[0].Substring(2));  				}
Magic Number,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,GetSearchStrategy,The following statement contains a magic number: if (terms.Length == 1) {  					if (terms[0].StartsWith("tm:"' StringComparison.Ordinal))  						return new TypeAndMemberSearchStrategy(terms[0].Substring(3));    					if (terms[0].StartsWith("t:"' StringComparison.Ordinal))  						return new TypeSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("m:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("md:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(3)' MemberSearchKind.Method);    					if (terms[0].StartsWith("f:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Field);    					if (terms[0].StartsWith("p:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Property);    					if (terms[0].StartsWith("e:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Event);    					if (terms[0].StartsWith("c:"' StringComparison.Ordinal))  						return new LiteralSearchStrategy(terms[0].Substring(2));  				}
Magic Number,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,GetSearchStrategy,The following statement contains a magic number: if (terms.Length == 1) {  					if (terms[0].StartsWith("tm:"' StringComparison.Ordinal))  						return new TypeAndMemberSearchStrategy(terms[0].Substring(3));    					if (terms[0].StartsWith("t:"' StringComparison.Ordinal))  						return new TypeSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("m:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("md:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(3)' MemberSearchKind.Method);    					if (terms[0].StartsWith("f:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Field);    					if (terms[0].StartsWith("p:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Property);    					if (terms[0].StartsWith("e:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Event);    					if (terms[0].StartsWith("c:"' StringComparison.Ordinal))  						return new LiteralSearchStrategy(terms[0].Substring(2));  				}
Magic Number,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,GetSearchStrategy,The following statement contains a magic number: if (terms.Length == 1) {  					if (terms[0].StartsWith("tm:"' StringComparison.Ordinal))  						return new TypeAndMemberSearchStrategy(terms[0].Substring(3));    					if (terms[0].StartsWith("t:"' StringComparison.Ordinal))  						return new TypeSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("m:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2));    					if (terms[0].StartsWith("md:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(3)' MemberSearchKind.Method);    					if (terms[0].StartsWith("f:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Field);    					if (terms[0].StartsWith("p:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Property);    					if (terms[0].StartsWith("e:"' StringComparison.Ordinal))  						return new MemberSearchStrategy(terms[0].Substring(2)' MemberSearchKind.Event);    					if (terms[0].StartsWith("c:"' StringComparison.Ordinal))  						return new LiteralSearchStrategy(terms[0].Substring(2));  				}
Magic Number,ICSharpCode.ILSpy,AbstractSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,AbstractSearchStrategy,The following statement contains a magic number: if (terms.Length == 1 && terms[0].Length > 2) {  				var search = terms[0];  				if (search.StartsWith("/"' StringComparison.Ordinal) && search.Length > 4) {  					var regexString = search.Substring(1' search.Length - 1);  					fullNameSearch = search.Contains("\\.");  					if (regexString.EndsWith("/"' StringComparison.Ordinal))  						regexString = regexString.Substring(0' regexString.Length - 1);  					regex = SafeNewRegex(regexString);  				} else {  					fullNameSearch = search.Contains(".");  				}    				terms[0] = search;  			}
Magic Number,ICSharpCode.ILSpy,AbstractSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,AbstractSearchStrategy,The following statement contains a magic number: if (terms.Length == 1 && terms[0].Length > 2) {  				var search = terms[0];  				if (search.StartsWith("/"' StringComparison.Ordinal) && search.Length > 4) {  					var regexString = search.Substring(1' search.Length - 1);  					fullNameSearch = search.Contains("\\.");  					if (regexString.EndsWith("/"' StringComparison.Ordinal))  						regexString = regexString.Substring(0' regexString.Length - 1);  					regex = SafeNewRegex(regexString);  				} else {  					fullNameSearch = search.Contains(".");  				}    				terms[0] = search;  			}
Magic Number,ICSharpCode.ILSpy,LiteralSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,MethodIsLiteralMatch,The following statement contains a magic number: if (searchTermLiteralType == TypeCode.Int64) {  				long val = (long)searchTermLiteralValue;  				foreach (var inst in body.Instructions) {  					switch (inst.OpCode.Code) {  					case Code.Ldc_I8:  						if (val == (long)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4:  						if (val == (int)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_S:  						if (val == (sbyte)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_M1:  						if (val == -1)  							return true;  						break;  					case Code.Ldc_I4_0:  						if (val == 0)  							return true;  						break;  					case Code.Ldc_I4_1:  						if (val == 1)  							return true;  						break;  					case Code.Ldc_I4_2:  						if (val == 2)  							return true;  						break;  					case Code.Ldc_I4_3:  						if (val == 3)  							return true;  						break;  					case Code.Ldc_I4_4:  						if (val == 4)  							return true;  						break;  					case Code.Ldc_I4_5:  						if (val == 5)  							return true;  						break;  					case Code.Ldc_I4_6:  						if (val == 6)  							return true;  						break;  					case Code.Ldc_I4_7:  						if (val == 7)  							return true;  						break;  					case Code.Ldc_I4_8:  						if (val == 8)  							return true;  						break;  					}  				}  			} else if (searchTermLiteralType != TypeCode.Empty) {  				Code expectedCode;  				switch (searchTermLiteralType) {  				case TypeCode.Single:  					expectedCode = Code.Ldc_R4;  					break;  				case TypeCode.Double:  					expectedCode = Code.Ldc_R8;  					break;  				case TypeCode.String:  					expectedCode = Code.Ldstr;  					break;  				default:  					throw new InvalidOperationException();  				}  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == expectedCode && searchTermLiteralValue.Equals(inst.Operand))  						return true;  				}  			} else {  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == Code.Ldstr && IsMatch(t => (string)inst.Operand))  						return true;  				}  			}
Magic Number,ICSharpCode.ILSpy,LiteralSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,MethodIsLiteralMatch,The following statement contains a magic number: if (searchTermLiteralType == TypeCode.Int64) {  				long val = (long)searchTermLiteralValue;  				foreach (var inst in body.Instructions) {  					switch (inst.OpCode.Code) {  					case Code.Ldc_I8:  						if (val == (long)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4:  						if (val == (int)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_S:  						if (val == (sbyte)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_M1:  						if (val == -1)  							return true;  						break;  					case Code.Ldc_I4_0:  						if (val == 0)  							return true;  						break;  					case Code.Ldc_I4_1:  						if (val == 1)  							return true;  						break;  					case Code.Ldc_I4_2:  						if (val == 2)  							return true;  						break;  					case Code.Ldc_I4_3:  						if (val == 3)  							return true;  						break;  					case Code.Ldc_I4_4:  						if (val == 4)  							return true;  						break;  					case Code.Ldc_I4_5:  						if (val == 5)  							return true;  						break;  					case Code.Ldc_I4_6:  						if (val == 6)  							return true;  						break;  					case Code.Ldc_I4_7:  						if (val == 7)  							return true;  						break;  					case Code.Ldc_I4_8:  						if (val == 8)  							return true;  						break;  					}  				}  			} else if (searchTermLiteralType != TypeCode.Empty) {  				Code expectedCode;  				switch (searchTermLiteralType) {  				case TypeCode.Single:  					expectedCode = Code.Ldc_R4;  					break;  				case TypeCode.Double:  					expectedCode = Code.Ldc_R8;  					break;  				case TypeCode.String:  					expectedCode = Code.Ldstr;  					break;  				default:  					throw new InvalidOperationException();  				}  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == expectedCode && searchTermLiteralValue.Equals(inst.Operand))  						return true;  				}  			} else {  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == Code.Ldstr && IsMatch(t => (string)inst.Operand))  						return true;  				}  			}
Magic Number,ICSharpCode.ILSpy,LiteralSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,MethodIsLiteralMatch,The following statement contains a magic number: if (searchTermLiteralType == TypeCode.Int64) {  				long val = (long)searchTermLiteralValue;  				foreach (var inst in body.Instructions) {  					switch (inst.OpCode.Code) {  					case Code.Ldc_I8:  						if (val == (long)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4:  						if (val == (int)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_S:  						if (val == (sbyte)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_M1:  						if (val == -1)  							return true;  						break;  					case Code.Ldc_I4_0:  						if (val == 0)  							return true;  						break;  					case Code.Ldc_I4_1:  						if (val == 1)  							return true;  						break;  					case Code.Ldc_I4_2:  						if (val == 2)  							return true;  						break;  					case Code.Ldc_I4_3:  						if (val == 3)  							return true;  						break;  					case Code.Ldc_I4_4:  						if (val == 4)  							return true;  						break;  					case Code.Ldc_I4_5:  						if (val == 5)  							return true;  						break;  					case Code.Ldc_I4_6:  						if (val == 6)  							return true;  						break;  					case Code.Ldc_I4_7:  						if (val == 7)  							return true;  						break;  					case Code.Ldc_I4_8:  						if (val == 8)  							return true;  						break;  					}  				}  			} else if (searchTermLiteralType != TypeCode.Empty) {  				Code expectedCode;  				switch (searchTermLiteralType) {  				case TypeCode.Single:  					expectedCode = Code.Ldc_R4;  					break;  				case TypeCode.Double:  					expectedCode = Code.Ldc_R8;  					break;  				case TypeCode.String:  					expectedCode = Code.Ldstr;  					break;  				default:  					throw new InvalidOperationException();  				}  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == expectedCode && searchTermLiteralValue.Equals(inst.Operand))  						return true;  				}  			} else {  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == Code.Ldstr && IsMatch(t => (string)inst.Operand))  						return true;  				}  			}
Magic Number,ICSharpCode.ILSpy,LiteralSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,MethodIsLiteralMatch,The following statement contains a magic number: if (searchTermLiteralType == TypeCode.Int64) {  				long val = (long)searchTermLiteralValue;  				foreach (var inst in body.Instructions) {  					switch (inst.OpCode.Code) {  					case Code.Ldc_I8:  						if (val == (long)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4:  						if (val == (int)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_S:  						if (val == (sbyte)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_M1:  						if (val == -1)  							return true;  						break;  					case Code.Ldc_I4_0:  						if (val == 0)  							return true;  						break;  					case Code.Ldc_I4_1:  						if (val == 1)  							return true;  						break;  					case Code.Ldc_I4_2:  						if (val == 2)  							return true;  						break;  					case Code.Ldc_I4_3:  						if (val == 3)  							return true;  						break;  					case Code.Ldc_I4_4:  						if (val == 4)  							return true;  						break;  					case Code.Ldc_I4_5:  						if (val == 5)  							return true;  						break;  					case Code.Ldc_I4_6:  						if (val == 6)  							return true;  						break;  					case Code.Ldc_I4_7:  						if (val == 7)  							return true;  						break;  					case Code.Ldc_I4_8:  						if (val == 8)  							return true;  						break;  					}  				}  			} else if (searchTermLiteralType != TypeCode.Empty) {  				Code expectedCode;  				switch (searchTermLiteralType) {  				case TypeCode.Single:  					expectedCode = Code.Ldc_R4;  					break;  				case TypeCode.Double:  					expectedCode = Code.Ldc_R8;  					break;  				case TypeCode.String:  					expectedCode = Code.Ldstr;  					break;  				default:  					throw new InvalidOperationException();  				}  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == expectedCode && searchTermLiteralValue.Equals(inst.Operand))  						return true;  				}  			} else {  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == Code.Ldstr && IsMatch(t => (string)inst.Operand))  						return true;  				}  			}
Magic Number,ICSharpCode.ILSpy,LiteralSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,MethodIsLiteralMatch,The following statement contains a magic number: if (searchTermLiteralType == TypeCode.Int64) {  				long val = (long)searchTermLiteralValue;  				foreach (var inst in body.Instructions) {  					switch (inst.OpCode.Code) {  					case Code.Ldc_I8:  						if (val == (long)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4:  						if (val == (int)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_S:  						if (val == (sbyte)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_M1:  						if (val == -1)  							return true;  						break;  					case Code.Ldc_I4_0:  						if (val == 0)  							return true;  						break;  					case Code.Ldc_I4_1:  						if (val == 1)  							return true;  						break;  					case Code.Ldc_I4_2:  						if (val == 2)  							return true;  						break;  					case Code.Ldc_I4_3:  						if (val == 3)  							return true;  						break;  					case Code.Ldc_I4_4:  						if (val == 4)  							return true;  						break;  					case Code.Ldc_I4_5:  						if (val == 5)  							return true;  						break;  					case Code.Ldc_I4_6:  						if (val == 6)  							return true;  						break;  					case Code.Ldc_I4_7:  						if (val == 7)  							return true;  						break;  					case Code.Ldc_I4_8:  						if (val == 8)  							return true;  						break;  					}  				}  			} else if (searchTermLiteralType != TypeCode.Empty) {  				Code expectedCode;  				switch (searchTermLiteralType) {  				case TypeCode.Single:  					expectedCode = Code.Ldc_R4;  					break;  				case TypeCode.Double:  					expectedCode = Code.Ldc_R8;  					break;  				case TypeCode.String:  					expectedCode = Code.Ldstr;  					break;  				default:  					throw new InvalidOperationException();  				}  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == expectedCode && searchTermLiteralValue.Equals(inst.Operand))  						return true;  				}  			} else {  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == Code.Ldstr && IsMatch(t => (string)inst.Operand))  						return true;  				}  			}
Magic Number,ICSharpCode.ILSpy,LiteralSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,MethodIsLiteralMatch,The following statement contains a magic number: if (searchTermLiteralType == TypeCode.Int64) {  				long val = (long)searchTermLiteralValue;  				foreach (var inst in body.Instructions) {  					switch (inst.OpCode.Code) {  					case Code.Ldc_I8:  						if (val == (long)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4:  						if (val == (int)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_S:  						if (val == (sbyte)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_M1:  						if (val == -1)  							return true;  						break;  					case Code.Ldc_I4_0:  						if (val == 0)  							return true;  						break;  					case Code.Ldc_I4_1:  						if (val == 1)  							return true;  						break;  					case Code.Ldc_I4_2:  						if (val == 2)  							return true;  						break;  					case Code.Ldc_I4_3:  						if (val == 3)  							return true;  						break;  					case Code.Ldc_I4_4:  						if (val == 4)  							return true;  						break;  					case Code.Ldc_I4_5:  						if (val == 5)  							return true;  						break;  					case Code.Ldc_I4_6:  						if (val == 6)  							return true;  						break;  					case Code.Ldc_I4_7:  						if (val == 7)  							return true;  						break;  					case Code.Ldc_I4_8:  						if (val == 8)  							return true;  						break;  					}  				}  			} else if (searchTermLiteralType != TypeCode.Empty) {  				Code expectedCode;  				switch (searchTermLiteralType) {  				case TypeCode.Single:  					expectedCode = Code.Ldc_R4;  					break;  				case TypeCode.Double:  					expectedCode = Code.Ldc_R8;  					break;  				case TypeCode.String:  					expectedCode = Code.Ldstr;  					break;  				default:  					throw new InvalidOperationException();  				}  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == expectedCode && searchTermLiteralValue.Equals(inst.Operand))  						return true;  				}  			} else {  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == Code.Ldstr && IsMatch(t => (string)inst.Operand))  						return true;  				}  			}
Magic Number,ICSharpCode.ILSpy,LiteralSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,MethodIsLiteralMatch,The following statement contains a magic number: if (searchTermLiteralType == TypeCode.Int64) {  				long val = (long)searchTermLiteralValue;  				foreach (var inst in body.Instructions) {  					switch (inst.OpCode.Code) {  					case Code.Ldc_I8:  						if (val == (long)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4:  						if (val == (int)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_S:  						if (val == (sbyte)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_M1:  						if (val == -1)  							return true;  						break;  					case Code.Ldc_I4_0:  						if (val == 0)  							return true;  						break;  					case Code.Ldc_I4_1:  						if (val == 1)  							return true;  						break;  					case Code.Ldc_I4_2:  						if (val == 2)  							return true;  						break;  					case Code.Ldc_I4_3:  						if (val == 3)  							return true;  						break;  					case Code.Ldc_I4_4:  						if (val == 4)  							return true;  						break;  					case Code.Ldc_I4_5:  						if (val == 5)  							return true;  						break;  					case Code.Ldc_I4_6:  						if (val == 6)  							return true;  						break;  					case Code.Ldc_I4_7:  						if (val == 7)  							return true;  						break;  					case Code.Ldc_I4_8:  						if (val == 8)  							return true;  						break;  					}  				}  			} else if (searchTermLiteralType != TypeCode.Empty) {  				Code expectedCode;  				switch (searchTermLiteralType) {  				case TypeCode.Single:  					expectedCode = Code.Ldc_R4;  					break;  				case TypeCode.Double:  					expectedCode = Code.Ldc_R8;  					break;  				case TypeCode.String:  					expectedCode = Code.Ldstr;  					break;  				default:  					throw new InvalidOperationException();  				}  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == expectedCode && searchTermLiteralValue.Equals(inst.Operand))  						return true;  				}  			} else {  				foreach (var inst in body.Instructions) {  					if (inst.OpCode.Code == Code.Ldstr && IsMatch(t => (string)inst.Operand))  						return true;  				}  			}
Magic Number,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,MakeToolbarItem,The following statement contains a magic number: return new Button {  				Command = CommandWrapper.Unwrap(command.Value)'  				ToolTip = command.Metadata.ToolTip'  				Tag = command.Metadata.Tag'  				Content = new Image {  					Width = 16'  					Height = 16'  					Source = Images.LoadImage(command.Value' command.Metadata.ToolbarIcon)  				}  			};
Magic Number,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,MakeToolbarItem,The following statement contains a magic number: return new Button {  				Command = CommandWrapper.Unwrap(command.Value)'  				ToolTip = command.Metadata.ToolTip'  				Tag = command.Metadata.Tag'  				Content = new Image {  					Width = 16'  					Height = 16'  					Source = Images.LoadImage(command.Value' command.Metadata.ToolbarIcon)  				}  			};
Magic Number,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,InitMainMenu,The following statement contains a magic number: foreach (var topLevelMenu in mainMenuCommands.OrderBy(c => c.Metadata.MenuOrder).GroupBy(c => c.Metadata.Menu)) {  				var topLevelMenuItem = mainMenu.Items.OfType<MenuItem>().FirstOrDefault(m => (m.Header as string) == topLevelMenu.Key);  				foreach (var category in topLevelMenu.GroupBy(c => c.Metadata.MenuCategory)) {  					if (topLevelMenuItem == null) {  						topLevelMenuItem = new MenuItem();  						topLevelMenuItem.Header = topLevelMenu.Key;  						mainMenu.Items.Add(topLevelMenuItem);  					} else if (topLevelMenuItem.Items.Count > 0) {  						topLevelMenuItem.Items.Add(new Separator());  					}  					foreach (var entry in category) {  						MenuItem menuItem = new MenuItem();  						menuItem.Command = CommandWrapper.Unwrap(entry.Value);  						if (!string.IsNullOrEmpty(entry.Metadata.Header))  							menuItem.Header = entry.Metadata.Header;  						if (!string.IsNullOrEmpty(entry.Metadata.MenuIcon)) {  							menuItem.Icon = new Image {  								Width = 16'  								Height = 16'  								Source = Images.LoadImage(entry.Value' entry.Metadata.MenuIcon)  							};  						}  						  						menuItem.IsEnabled = entry.Metadata.IsEnabled;  						menuItem.InputGestureText = entry.Metadata.InputGestureText;  						topLevelMenuItem.Items.Add(menuItem);  					}  				}  			}
Magic Number,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,InitMainMenu,The following statement contains a magic number: foreach (var topLevelMenu in mainMenuCommands.OrderBy(c => c.Metadata.MenuOrder).GroupBy(c => c.Metadata.Menu)) {  				var topLevelMenuItem = mainMenu.Items.OfType<MenuItem>().FirstOrDefault(m => (m.Header as string) == topLevelMenu.Key);  				foreach (var category in topLevelMenu.GroupBy(c => c.Metadata.MenuCategory)) {  					if (topLevelMenuItem == null) {  						topLevelMenuItem = new MenuItem();  						topLevelMenuItem.Header = topLevelMenu.Key;  						mainMenu.Items.Add(topLevelMenuItem);  					} else if (topLevelMenuItem.Items.Count > 0) {  						topLevelMenuItem.Items.Add(new Separator());  					}  					foreach (var entry in category) {  						MenuItem menuItem = new MenuItem();  						menuItem.Command = CommandWrapper.Unwrap(entry.Value);  						if (!string.IsNullOrEmpty(entry.Metadata.Header))  							menuItem.Header = entry.Metadata.Header;  						if (!string.IsNullOrEmpty(entry.Metadata.MenuIcon)) {  							menuItem.Icon = new Image {  								Width = 16'  								Height = 16'  								Source = Images.LoadImage(entry.Value' entry.Metadata.MenuIcon)  							};  						}  						  						menuItem.IsEnabled = entry.Metadata.IsEnabled;  						menuItem.InputGestureText = entry.Metadata.InputGestureText;  						topLevelMenuItem.Items.Add(menuItem);  					}  				}  			}
Magic Number,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,OnSourceInitialized,The following statement contains a magic number: foreach (var screen in System.Windows.Forms.Screen.AllScreens) {  				var intersection = System.Drawing.Rectangle.Intersect(boundsRect' screen.WorkingArea);  				if (intersection.Width > 10 && intersection.Height > 10)  					boundsOK = true;  			}
Magic Number,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,OnSourceInitialized,The following statement contains a magic number: foreach (var screen in System.Windows.Forms.Screen.AllScreens) {  				var intersection = System.Drawing.Rectangle.Intersect(boundsRect' screen.WorkingArea);  				if (intersection.Width > 10 && intersection.Height > 10)  					boundsOK = true;  			}
Magic Number,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,WndProc,The following statement contains a magic number: if (msg == NativeMethods.WM_COPYDATA) {  				CopyDataStruct* copyData = (CopyDataStruct*)lParam;  				string data = new string((char*)copyData->Buffer' 0' copyData->Size / sizeof(char));  				if (data.StartsWith("ILSpy:\r\n"' StringComparison.Ordinal)) {  					data = data.Substring(8);  					List<string> lines = new List<string>();  					using (StringReader r = new StringReader(data)) {  						string line;  						while ((line = r.ReadLine()) != null)  							lines.Add(line);  					}  					var args = new CommandLineArguments(lines);  					if (HandleCommandLineArguments(args)) {  						if (!args.NoActivate && WindowState == WindowState.Minimized)  							WindowState = WindowState.Normal;  						HandleCommandLineArgumentsAfterShowList(args);  						handled = true;  						return (IntPtr)1;  					}  				}  			}
Magic Number,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,HandleCommandLineArgumentsAfterShowList,The following statement contains a magic number: if (args.NavigateTo != null) {  				bool found = false;  				if (args.NavigateTo.StartsWith("N:"' StringComparison.Ordinal)) {  					string namespaceName = args.NavigateTo.Substring(2);  					foreach (LoadedAssembly asm in commandLineLoadedAssemblies) {  						AssemblyTreeNode asmNode = assemblyListTreeNode.FindAssemblyNode(asm);  						if (asmNode != null) {  							NamespaceTreeNode nsNode = asmNode.FindNamespaceNode(namespaceName);  							if (nsNode != null) {  								found = true;  								SelectNode(nsNode);  								break;  							}  						}  					}  				} else {  					foreach (LoadedAssembly asm in commandLineLoadedAssemblies) {  						ModuleDefinition def = asm.GetModuleDefinitionAsync().Result;  						if (def != null) {  							MemberReference mr = XmlDocKeyProvider.FindMemberByKey(def' args.NavigateTo);  							if (mr != null) {  								found = true;  								JumpToReference(mr);  								break;  							}  						}  					}  				}  				if (!found) {  					AvalonEditTextOutput output = new AvalonEditTextOutput();  					output.Write(string.Format("Cannot find '{0}' in command line specified assemblies."' args.NavigateTo));  					decompilerTextView.ShowText(output);  				}  			} else if (commandLineLoadedAssemblies.Count == 1) {  				// NavigateTo == null and an assembly was given on the command-line:  				// Select the newly loaded assembly  				JumpToReference(commandLineLoadedAssemblies[0].GetModuleDefinitionAsync().Result);  			}
Magic Number,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,ShowInTopPane,The following statement contains a magic number: topPaneRow.MinHeight = 100;
Magic Number,ICSharpCode.ILSpy,MainWindow,C:\repos\icsharpcode_ILSpy\ILSpy\MainWindow.xaml.cs,ShowInBottomPane,The following statement contains a magic number: bottomPaneRow.MinHeight = 100;
Magic Number,ICSharpCode.ILSpy,SessionSettings,C:\repos\icsharpcode_ILSpy\ILSpy\SessionSettings.cs,SessionSettings,The following statement contains a magic number: this.SplitterPosition = FromString((string)doc.Element("SplitterPosition")' 0.4);
Magic Number,ICSharpCode.ILSpy,SessionSettings,C:\repos\icsharpcode_ILSpy\ILSpy\SessionSettings.cs,SessionSettings,The following statement contains a magic number: this.TopPaneSplitterPosition = FromString((string)doc.Element("TopPaneSplitterPosition")' 0.3);
Magic Number,ICSharpCode.ILSpy,SessionSettings,C:\repos\icsharpcode_ILSpy\ILSpy\SessionSettings.cs,SessionSettings,The following statement contains a magic number: this.BottomPaneSplitterPosition = FromString((string)doc.Element("BottomPaneSplitterPosition")' 0.3);
Magic Number,ICSharpCode.ILSpy.AvalonEdit,TextMarkerService,C:\repos\icsharpcode_ILSpy\ILSpy\AvalonEdit\TextMarkerService.cs,Draw,The following statement contains a magic number: foreach (TextMarker marker in markers.FindOverlappingSegments(viewStart' viewEnd - viewStart)) {  				if (marker.BackgroundColor != null) {  					BackgroundGeometryBuilder geoBuilder = new BackgroundGeometryBuilder();  					geoBuilder.AlignToWholePixels = true;  					geoBuilder.CornerRadius = 3;  					geoBuilder.AddSegment(textView' marker);  					Geometry geometry = geoBuilder.CreateGeometry();  					if (geometry != null) {  						Color color = marker.BackgroundColor.Value;  						SolidColorBrush brush = new SolidColorBrush(color);  						brush.Freeze();  						drawingContext.DrawGeometry(brush' null' geometry);  					}  				}  				var underlineMarkerTypes = TextMarkerTypes.SquigglyUnderline | TextMarkerTypes.NormalUnderline | TextMarkerTypes.DottedUnderline;  				if ((marker.MarkerTypes & underlineMarkerTypes) != 0) {  					foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment(textView' marker)) {  						Point startPoint = r.BottomLeft;  						Point endPoint = r.BottomRight;  						  						Brush usedBrush = new SolidColorBrush(marker.MarkerColor);  						usedBrush.Freeze();  						if ((marker.MarkerTypes & TextMarkerTypes.SquigglyUnderline) != 0) {  							double offset = 2.5;  							  							int count = Math.Max((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  							  							StreamGeometry geometry = new StreamGeometry();  							  							using (StreamGeometryContext ctx = geometry.Open()) {  								ctx.BeginFigure(startPoint' false' false);  								ctx.PolyLineTo(CreatePoints(startPoint' endPoint' offset' count).ToArray()' true' false);  							}  							  							geometry.Freeze();  							  							Pen usedPen = new Pen(usedBrush' 1);  							usedPen.Freeze();  							drawingContext.DrawGeometry(Brushes.Transparent' usedPen' geometry);  						}  						if ((marker.MarkerTypes & TextMarkerTypes.NormalUnderline) != 0) {  							Pen usedPen = new Pen(usedBrush' 1);  							usedPen.Freeze();  							drawingContext.DrawLine(usedPen' startPoint' endPoint);  						}  						if ((marker.MarkerTypes & TextMarkerTypes.DottedUnderline) != 0) {  							Pen usedPen = new Pen(usedBrush' 1);  							usedPen.DashStyle = DashStyles.Dot;  							usedPen.Freeze();  							drawingContext.DrawLine(usedPen' startPoint' endPoint);  						}  					}  				}  			}
Magic Number,ICSharpCode.ILSpy.AvalonEdit,TextMarkerService,C:\repos\icsharpcode_ILSpy\ILSpy\AvalonEdit\TextMarkerService.cs,Draw,The following statement contains a magic number: foreach (TextMarker marker in markers.FindOverlappingSegments(viewStart' viewEnd - viewStart)) {  				if (marker.BackgroundColor != null) {  					BackgroundGeometryBuilder geoBuilder = new BackgroundGeometryBuilder();  					geoBuilder.AlignToWholePixels = true;  					geoBuilder.CornerRadius = 3;  					geoBuilder.AddSegment(textView' marker);  					Geometry geometry = geoBuilder.CreateGeometry();  					if (geometry != null) {  						Color color = marker.BackgroundColor.Value;  						SolidColorBrush brush = new SolidColorBrush(color);  						brush.Freeze();  						drawingContext.DrawGeometry(brush' null' geometry);  					}  				}  				var underlineMarkerTypes = TextMarkerTypes.SquigglyUnderline | TextMarkerTypes.NormalUnderline | TextMarkerTypes.DottedUnderline;  				if ((marker.MarkerTypes & underlineMarkerTypes) != 0) {  					foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment(textView' marker)) {  						Point startPoint = r.BottomLeft;  						Point endPoint = r.BottomRight;  						  						Brush usedBrush = new SolidColorBrush(marker.MarkerColor);  						usedBrush.Freeze();  						if ((marker.MarkerTypes & TextMarkerTypes.SquigglyUnderline) != 0) {  							double offset = 2.5;  							  							int count = Math.Max((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  							  							StreamGeometry geometry = new StreamGeometry();  							  							using (StreamGeometryContext ctx = geometry.Open()) {  								ctx.BeginFigure(startPoint' false' false);  								ctx.PolyLineTo(CreatePoints(startPoint' endPoint' offset' count).ToArray()' true' false);  							}  							  							geometry.Freeze();  							  							Pen usedPen = new Pen(usedBrush' 1);  							usedPen.Freeze();  							drawingContext.DrawGeometry(Brushes.Transparent' usedPen' geometry);  						}  						if ((marker.MarkerTypes & TextMarkerTypes.NormalUnderline) != 0) {  							Pen usedPen = new Pen(usedBrush' 1);  							usedPen.Freeze();  							drawingContext.DrawLine(usedPen' startPoint' endPoint);  						}  						if ((marker.MarkerTypes & TextMarkerTypes.DottedUnderline) != 0) {  							Pen usedPen = new Pen(usedBrush' 1);  							usedPen.DashStyle = DashStyles.Dot;  							usedPen.Freeze();  							drawingContext.DrawLine(usedPen' startPoint' endPoint);  						}  					}  				}  			}
Magic Number,ICSharpCode.ILSpy.AvalonEdit,TextMarkerService,C:\repos\icsharpcode_ILSpy\ILSpy\AvalonEdit\TextMarkerService.cs,Draw,The following statement contains a magic number: foreach (TextMarker marker in markers.FindOverlappingSegments(viewStart' viewEnd - viewStart)) {  				if (marker.BackgroundColor != null) {  					BackgroundGeometryBuilder geoBuilder = new BackgroundGeometryBuilder();  					geoBuilder.AlignToWholePixels = true;  					geoBuilder.CornerRadius = 3;  					geoBuilder.AddSegment(textView' marker);  					Geometry geometry = geoBuilder.CreateGeometry();  					if (geometry != null) {  						Color color = marker.BackgroundColor.Value;  						SolidColorBrush brush = new SolidColorBrush(color);  						brush.Freeze();  						drawingContext.DrawGeometry(brush' null' geometry);  					}  				}  				var underlineMarkerTypes = TextMarkerTypes.SquigglyUnderline | TextMarkerTypes.NormalUnderline | TextMarkerTypes.DottedUnderline;  				if ((marker.MarkerTypes & underlineMarkerTypes) != 0) {  					foreach (Rect r in BackgroundGeometryBuilder.GetRectsForSegment(textView' marker)) {  						Point startPoint = r.BottomLeft;  						Point endPoint = r.BottomRight;  						  						Brush usedBrush = new SolidColorBrush(marker.MarkerColor);  						usedBrush.Freeze();  						if ((marker.MarkerTypes & TextMarkerTypes.SquigglyUnderline) != 0) {  							double offset = 2.5;  							  							int count = Math.Max((int)((endPoint.X - startPoint.X) / offset) + 1' 4);  							  							StreamGeometry geometry = new StreamGeometry();  							  							using (StreamGeometryContext ctx = geometry.Open()) {  								ctx.BeginFigure(startPoint' false' false);  								ctx.PolyLineTo(CreatePoints(startPoint' endPoint' offset' count).ToArray()' true' false);  							}  							  							geometry.Freeze();  							  							Pen usedPen = new Pen(usedBrush' 1);  							usedPen.Freeze();  							drawingContext.DrawGeometry(Brushes.Transparent' usedPen' geometry);  						}  						if ((marker.MarkerTypes & TextMarkerTypes.NormalUnderline) != 0) {  							Pen usedPen = new Pen(usedBrush' 1);  							usedPen.Freeze();  							drawingContext.DrawLine(usedPen' startPoint' endPoint);  						}  						if ((marker.MarkerTypes & TextMarkerTypes.DottedUnderline) != 0) {  							Pen usedPen = new Pen(usedBrush' 1);  							usedPen.DashStyle = DashStyles.Dot;  							usedPen.Freeze();  							drawingContext.DrawLine(usedPen' startPoint' endPoint);  						}  					}  				}  			}
Magic Number,ICSharpCode.ILSpy.AvalonEdit,TextMarkerService,C:\repos\icsharpcode_ILSpy\ILSpy\AvalonEdit\TextMarkerService.cs,CreatePoints,The following statement contains a magic number: for (int i = 0; i < count; i++)  				yield return new Point(start.X + i * offset' start.Y - ((i + 1) % 2 == 0 ? offset : 0));
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,CustomDialog,The following statement contains a magic number: using (Graphics g = this.CreateGraphics()) {  				Rectangle screen = Screen.PrimaryScreen.WorkingArea;  				SizeF size = g.MeasureString(message' label.Font' screen.Width - 20);  				Size clientSize = size.ToSize();  				Button[] buttons = new Button[buttonLabels.Length];  				int[] positions = new int[buttonLabels.Length];  				int pos = 0;  				for (int i = 0; i < buttons.Length; i++) {  					Button newButton = new Button();  					newButton.FlatStyle = FlatStyle.System;  					newButton.Tag = i;  					string buttonLabel = buttonLabels[i];  					newButton.Text = buttonLabel;  					newButton.Click += new EventHandler(ButtonClick);  					SizeF buttonSize = g.MeasureString(buttonLabel' newButton.Font);  					newButton.Width = Math.Max(newButton.Width' ((int)Math.Ceiling(buttonSize.Width / 8.0) + 1) * 8);  					positions[i] = pos;  					buttons[i] = newButton;  					pos += newButton.Width + 4;  				}  				if (acceptButton >= 0) {  					AcceptButton = buttons[acceptButton];  				}  				if (cancelButton >= 0) {  					CancelButton = buttons[cancelButton];  				}    				pos += 4; // add space before first button  						  // (we don't start with pos=4 because this space doesn't belong to the button panel)    				if (pos > clientSize.Width) {  					clientSize.Width = pos;  				}  				clientSize.Height += panel.Height + 6;  				this.ClientSize = clientSize;  				int start = (clientSize.Width - pos) / 2;  				for (int i = 0; i < buttons.Length; i++) {  					buttons[i].Location = new Point(start + positions[i]' 4);  				}  				panel.Controls.AddRange(buttons);  			}
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,CustomDialog,The following statement contains a magic number: using (Graphics g = this.CreateGraphics()) {  				Rectangle screen = Screen.PrimaryScreen.WorkingArea;  				SizeF size = g.MeasureString(message' label.Font' screen.Width - 20);  				Size clientSize = size.ToSize();  				Button[] buttons = new Button[buttonLabels.Length];  				int[] positions = new int[buttonLabels.Length];  				int pos = 0;  				for (int i = 0; i < buttons.Length; i++) {  					Button newButton = new Button();  					newButton.FlatStyle = FlatStyle.System;  					newButton.Tag = i;  					string buttonLabel = buttonLabels[i];  					newButton.Text = buttonLabel;  					newButton.Click += new EventHandler(ButtonClick);  					SizeF buttonSize = g.MeasureString(buttonLabel' newButton.Font);  					newButton.Width = Math.Max(newButton.Width' ((int)Math.Ceiling(buttonSize.Width / 8.0) + 1) * 8);  					positions[i] = pos;  					buttons[i] = newButton;  					pos += newButton.Width + 4;  				}  				if (acceptButton >= 0) {  					AcceptButton = buttons[acceptButton];  				}  				if (cancelButton >= 0) {  					CancelButton = buttons[cancelButton];  				}    				pos += 4; // add space before first button  						  // (we don't start with pos=4 because this space doesn't belong to the button panel)    				if (pos > clientSize.Width) {  					clientSize.Width = pos;  				}  				clientSize.Height += panel.Height + 6;  				this.ClientSize = clientSize;  				int start = (clientSize.Width - pos) / 2;  				for (int i = 0; i < buttons.Length; i++) {  					buttons[i].Location = new Point(start + positions[i]' 4);  				}  				panel.Controls.AddRange(buttons);  			}
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,CustomDialog,The following statement contains a magic number: using (Graphics g = this.CreateGraphics()) {  				Rectangle screen = Screen.PrimaryScreen.WorkingArea;  				SizeF size = g.MeasureString(message' label.Font' screen.Width - 20);  				Size clientSize = size.ToSize();  				Button[] buttons = new Button[buttonLabels.Length];  				int[] positions = new int[buttonLabels.Length];  				int pos = 0;  				for (int i = 0; i < buttons.Length; i++) {  					Button newButton = new Button();  					newButton.FlatStyle = FlatStyle.System;  					newButton.Tag = i;  					string buttonLabel = buttonLabels[i];  					newButton.Text = buttonLabel;  					newButton.Click += new EventHandler(ButtonClick);  					SizeF buttonSize = g.MeasureString(buttonLabel' newButton.Font);  					newButton.Width = Math.Max(newButton.Width' ((int)Math.Ceiling(buttonSize.Width / 8.0) + 1) * 8);  					positions[i] = pos;  					buttons[i] = newButton;  					pos += newButton.Width + 4;  				}  				if (acceptButton >= 0) {  					AcceptButton = buttons[acceptButton];  				}  				if (cancelButton >= 0) {  					CancelButton = buttons[cancelButton];  				}    				pos += 4; // add space before first button  						  // (we don't start with pos=4 because this space doesn't belong to the button panel)    				if (pos > clientSize.Width) {  					clientSize.Width = pos;  				}  				clientSize.Height += panel.Height + 6;  				this.ClientSize = clientSize;  				int start = (clientSize.Width - pos) / 2;  				for (int i = 0; i < buttons.Length; i++) {  					buttons[i].Location = new Point(start + positions[i]' 4);  				}  				panel.Controls.AddRange(buttons);  			}
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,CustomDialog,The following statement contains a magic number: using (Graphics g = this.CreateGraphics()) {  				Rectangle screen = Screen.PrimaryScreen.WorkingArea;  				SizeF size = g.MeasureString(message' label.Font' screen.Width - 20);  				Size clientSize = size.ToSize();  				Button[] buttons = new Button[buttonLabels.Length];  				int[] positions = new int[buttonLabels.Length];  				int pos = 0;  				for (int i = 0; i < buttons.Length; i++) {  					Button newButton = new Button();  					newButton.FlatStyle = FlatStyle.System;  					newButton.Tag = i;  					string buttonLabel = buttonLabels[i];  					newButton.Text = buttonLabel;  					newButton.Click += new EventHandler(ButtonClick);  					SizeF buttonSize = g.MeasureString(buttonLabel' newButton.Font);  					newButton.Width = Math.Max(newButton.Width' ((int)Math.Ceiling(buttonSize.Width / 8.0) + 1) * 8);  					positions[i] = pos;  					buttons[i] = newButton;  					pos += newButton.Width + 4;  				}  				if (acceptButton >= 0) {  					AcceptButton = buttons[acceptButton];  				}  				if (cancelButton >= 0) {  					CancelButton = buttons[cancelButton];  				}    				pos += 4; // add space before first button  						  // (we don't start with pos=4 because this space doesn't belong to the button panel)    				if (pos > clientSize.Width) {  					clientSize.Width = pos;  				}  				clientSize.Height += panel.Height + 6;  				this.ClientSize = clientSize;  				int start = (clientSize.Width - pos) / 2;  				for (int i = 0; i < buttons.Length; i++) {  					buttons[i].Location = new Point(start + positions[i]' 4);  				}  				panel.Controls.AddRange(buttons);  			}
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,CustomDialog,The following statement contains a magic number: using (Graphics g = this.CreateGraphics()) {  				Rectangle screen = Screen.PrimaryScreen.WorkingArea;  				SizeF size = g.MeasureString(message' label.Font' screen.Width - 20);  				Size clientSize = size.ToSize();  				Button[] buttons = new Button[buttonLabels.Length];  				int[] positions = new int[buttonLabels.Length];  				int pos = 0;  				for (int i = 0; i < buttons.Length; i++) {  					Button newButton = new Button();  					newButton.FlatStyle = FlatStyle.System;  					newButton.Tag = i;  					string buttonLabel = buttonLabels[i];  					newButton.Text = buttonLabel;  					newButton.Click += new EventHandler(ButtonClick);  					SizeF buttonSize = g.MeasureString(buttonLabel' newButton.Font);  					newButton.Width = Math.Max(newButton.Width' ((int)Math.Ceiling(buttonSize.Width / 8.0) + 1) * 8);  					positions[i] = pos;  					buttons[i] = newButton;  					pos += newButton.Width + 4;  				}  				if (acceptButton >= 0) {  					AcceptButton = buttons[acceptButton];  				}  				if (cancelButton >= 0) {  					CancelButton = buttons[cancelButton];  				}    				pos += 4; // add space before first button  						  // (we don't start with pos=4 because this space doesn't belong to the button panel)    				if (pos > clientSize.Width) {  					clientSize.Width = pos;  				}  				clientSize.Height += panel.Height + 6;  				this.ClientSize = clientSize;  				int start = (clientSize.Width - pos) / 2;  				for (int i = 0; i < buttons.Length; i++) {  					buttons[i].Location = new Point(start + positions[i]' 4);  				}  				panel.Controls.AddRange(buttons);  			}
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,CustomDialog,The following statement contains a magic number: using (Graphics g = this.CreateGraphics()) {  				Rectangle screen = Screen.PrimaryScreen.WorkingArea;  				SizeF size = g.MeasureString(message' label.Font' screen.Width - 20);  				Size clientSize = size.ToSize();  				Button[] buttons = new Button[buttonLabels.Length];  				int[] positions = new int[buttonLabels.Length];  				int pos = 0;  				for (int i = 0; i < buttons.Length; i++) {  					Button newButton = new Button();  					newButton.FlatStyle = FlatStyle.System;  					newButton.Tag = i;  					string buttonLabel = buttonLabels[i];  					newButton.Text = buttonLabel;  					newButton.Click += new EventHandler(ButtonClick);  					SizeF buttonSize = g.MeasureString(buttonLabel' newButton.Font);  					newButton.Width = Math.Max(newButton.Width' ((int)Math.Ceiling(buttonSize.Width / 8.0) + 1) * 8);  					positions[i] = pos;  					buttons[i] = newButton;  					pos += newButton.Width + 4;  				}  				if (acceptButton >= 0) {  					AcceptButton = buttons[acceptButton];  				}  				if (cancelButton >= 0) {  					CancelButton = buttons[cancelButton];  				}    				pos += 4; // add space before first button  						  // (we don't start with pos=4 because this space doesn't belong to the button panel)    				if (pos > clientSize.Width) {  					clientSize.Width = pos;  				}  				clientSize.Height += panel.Height + 6;  				this.ClientSize = clientSize;  				int start = (clientSize.Width - pos) / 2;  				for (int i = 0; i < buttons.Length; i++) {  					buttons[i].Location = new Point(start + positions[i]' 4);  				}  				panel.Controls.AddRange(buttons);  			}
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,CustomDialog,The following statement contains a magic number: using (Graphics g = this.CreateGraphics()) {  				Rectangle screen = Screen.PrimaryScreen.WorkingArea;  				SizeF size = g.MeasureString(message' label.Font' screen.Width - 20);  				Size clientSize = size.ToSize();  				Button[] buttons = new Button[buttonLabels.Length];  				int[] positions = new int[buttonLabels.Length];  				int pos = 0;  				for (int i = 0; i < buttons.Length; i++) {  					Button newButton = new Button();  					newButton.FlatStyle = FlatStyle.System;  					newButton.Tag = i;  					string buttonLabel = buttonLabels[i];  					newButton.Text = buttonLabel;  					newButton.Click += new EventHandler(ButtonClick);  					SizeF buttonSize = g.MeasureString(buttonLabel' newButton.Font);  					newButton.Width = Math.Max(newButton.Width' ((int)Math.Ceiling(buttonSize.Width / 8.0) + 1) * 8);  					positions[i] = pos;  					buttons[i] = newButton;  					pos += newButton.Width + 4;  				}  				if (acceptButton >= 0) {  					AcceptButton = buttons[acceptButton];  				}  				if (cancelButton >= 0) {  					CancelButton = buttons[cancelButton];  				}    				pos += 4; // add space before first button  						  // (we don't start with pos=4 because this space doesn't belong to the button panel)    				if (pos > clientSize.Width) {  					clientSize.Width = pos;  				}  				clientSize.Height += panel.Height + 6;  				this.ClientSize = clientSize;  				int start = (clientSize.Width - pos) / 2;  				for (int i = 0; i < buttons.Length; i++) {  					buttons[i].Location = new Point(start + positions[i]' 4);  				}  				panel.Controls.AddRange(buttons);  			}
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,CustomDialog,The following statement contains a magic number: using (Graphics g = this.CreateGraphics()) {  				Rectangle screen = Screen.PrimaryScreen.WorkingArea;  				SizeF size = g.MeasureString(message' label.Font' screen.Width - 20);  				Size clientSize = size.ToSize();  				Button[] buttons = new Button[buttonLabels.Length];  				int[] positions = new int[buttonLabels.Length];  				int pos = 0;  				for (int i = 0; i < buttons.Length; i++) {  					Button newButton = new Button();  					newButton.FlatStyle = FlatStyle.System;  					newButton.Tag = i;  					string buttonLabel = buttonLabels[i];  					newButton.Text = buttonLabel;  					newButton.Click += new EventHandler(ButtonClick);  					SizeF buttonSize = g.MeasureString(buttonLabel' newButton.Font);  					newButton.Width = Math.Max(newButton.Width' ((int)Math.Ceiling(buttonSize.Width / 8.0) + 1) * 8);  					positions[i] = pos;  					buttons[i] = newButton;  					pos += newButton.Width + 4;  				}  				if (acceptButton >= 0) {  					AcceptButton = buttons[acceptButton];  				}  				if (cancelButton >= 0) {  					CancelButton = buttons[cancelButton];  				}    				pos += 4; // add space before first button  						  // (we don't start with pos=4 because this space doesn't belong to the button panel)    				if (pos > clientSize.Width) {  					clientSize.Width = pos;  				}  				clientSize.Height += panel.Height + 6;  				this.ClientSize = clientSize;  				int start = (clientSize.Width - pos) / 2;  				for (int i = 0; i < buttons.Length; i++) {  					buttons[i].Location = new Point(start + positions[i]' 4);  				}  				panel.Controls.AddRange(buttons);  			}
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.panel.Location = new System.Drawing.Point(4' 80);
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.panel.Location = new System.Drawing.Point(4' 80);
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.panel.Size = new System.Drawing.Size(266' 32);
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.panel.Size = new System.Drawing.Size(266' 32);
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.label.Location = new System.Drawing.Point(4' 4);
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.label.Location = new System.Drawing.Point(4' 4);
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.label.Size = new System.Drawing.Size(266' 76);
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.label.Size = new System.Drawing.Size(266' 76);
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(274' 112);
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(274' 112);
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.DockPadding.Left = 4;
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.DockPadding.Right = 4;
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.DockPadding.Top = 4;
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new SizeF(96' 96);
Magic Number,ICSharpCode.ILSpy.Controls,CustomDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\CustomDialog.cs,MyInitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new SizeF(96' 96);
Magic Number,ICSharpCode.ILSpy.Controls,ControlColor,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\MarkupExtensions.cs,ControlColor,The following statement contains a magic number: if (!(val >= 105 && val <= 255))  				throw new ArgumentOutOfRangeException(nameof(val));
Magic Number,ICSharpCode.ILSpy.Controls,ControlColor,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\MarkupExtensions.cs,ControlColor,The following statement contains a magic number: if (!(val >= 105 && val <= 255))  				throw new ArgumentOutOfRangeException(nameof(val));
Magic Number,ICSharpCode.ILSpy.Controls,ControlColor,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\MarkupExtensions.cs,ProvideValue,The following statement contains a magic number: if (val > 227) {  				return Interpolate(227' SystemColors.ControlLightColor' 255' SystemColors.ControlLightLightColor);  			} else if (val > 160) {  				return Interpolate(160' SystemColors.ControlDarkColor' 227' SystemColors.ControlLightColor);  			} else {  				return Interpolate(105' SystemColors.ControlDarkDarkColor' 160' SystemColors.ControlDarkColor);  			}
Magic Number,ICSharpCode.ILSpy.Controls,ControlColor,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\MarkupExtensions.cs,ProvideValue,The following statement contains a magic number: if (val > 227) {  				return Interpolate(227' SystemColors.ControlLightColor' 255' SystemColors.ControlLightLightColor);  			} else if (val > 160) {  				return Interpolate(160' SystemColors.ControlDarkColor' 227' SystemColors.ControlLightColor);  			} else {  				return Interpolate(105' SystemColors.ControlDarkDarkColor' 160' SystemColors.ControlDarkColor);  			}
Magic Number,ICSharpCode.ILSpy.Controls,ControlColor,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\MarkupExtensions.cs,ProvideValue,The following statement contains a magic number: if (val > 227) {  				return Interpolate(227' SystemColors.ControlLightColor' 255' SystemColors.ControlLightLightColor);  			} else if (val > 160) {  				return Interpolate(160' SystemColors.ControlDarkColor' 227' SystemColors.ControlLightColor);  			} else {  				return Interpolate(105' SystemColors.ControlDarkDarkColor' 160' SystemColors.ControlDarkColor);  			}
Magic Number,ICSharpCode.ILSpy.Controls,ControlColor,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\MarkupExtensions.cs,ProvideValue,The following statement contains a magic number: if (val > 227) {  				return Interpolate(227' SystemColors.ControlLightColor' 255' SystemColors.ControlLightLightColor);  			} else if (val > 160) {  				return Interpolate(160' SystemColors.ControlDarkColor' 227' SystemColors.ControlLightColor);  			} else {  				return Interpolate(105' SystemColors.ControlDarkDarkColor' 160' SystemColors.ControlDarkColor);  			}
Magic Number,ICSharpCode.ILSpy.Controls,ControlColor,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\MarkupExtensions.cs,ProvideValue,The following statement contains a magic number: if (val > 227) {  				return Interpolate(227' SystemColors.ControlLightColor' 255' SystemColors.ControlLightLightColor);  			} else if (val > 160) {  				return Interpolate(160' SystemColors.ControlDarkColor' 227' SystemColors.ControlLightColor);  			} else {  				return Interpolate(105' SystemColors.ControlDarkDarkColor' 160' SystemColors.ControlDarkColor);  			}
Magic Number,ICSharpCode.ILSpy.Controls,ControlColor,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\MarkupExtensions.cs,ProvideValue,The following statement contains a magic number: if (val > 227) {  				return Interpolate(227' SystemColors.ControlLightColor' 255' SystemColors.ControlLightLightColor);  			} else if (val > 160) {  				return Interpolate(160' SystemColors.ControlDarkColor' 227' SystemColors.ControlLightColor);  			} else {  				return Interpolate(105' SystemColors.ControlDarkDarkColor' 160' SystemColors.ControlDarkColor);  			}
Magic Number,ICSharpCode.ILSpy.Controls,ControlColor,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\MarkupExtensions.cs,ProvideValue,The following statement contains a magic number: if (val > 227) {  				return Interpolate(227' SystemColors.ControlLightColor' 255' SystemColors.ControlLightLightColor);  			} else if (val > 160) {  				return Interpolate(160' SystemColors.ControlDarkColor' 227' SystemColors.ControlLightColor);  			} else {  				return Interpolate(105' SystemColors.ControlDarkDarkColor' 160' SystemColors.ControlDarkColor);  			}
Magic Number,ICSharpCode.ILSpy.Controls,ControlColor,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\MarkupExtensions.cs,ProvideValue,The following statement contains a magic number: if (val > 227) {  				return Interpolate(227' SystemColors.ControlLightColor' 255' SystemColors.ControlLightLightColor);  			} else if (val > 160) {  				return Interpolate(160' SystemColors.ControlDarkColor' 227' SystemColors.ControlLightColor);  			} else {  				return Interpolate(105' SystemColors.ControlDarkDarkColor' 160' SystemColors.ControlDarkColor);  			}
Magic Number,ICSharpCode.ILSpy.Controls,ResourceObjectTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceObjectTable.xaml.cs,ResourceObjectTable,The following statement contains a magic number: Width = contentPresenter.ActualWidth - 45;
Magic Number,ICSharpCode.ILSpy.Controls,ResourceObjectTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceObjectTable.xaml.cs,OnParentSizeChanged,The following statement contains a magic number: if (e.WidthChanged)  				Width = e.NewSize.Width - 45;
Magic Number,ICSharpCode.ILSpy.Controls,ResourceObjectTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceObjectTable.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\..\Controls\ResourceObjectTable.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopy);                            #line default              #line hidden                            #line 8 "..\..\..\..\Controls\ResourceObjectTable.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCopy);                            #line default              #line hidden              return;              case 2:              this.resourceListView = ((System.Windows.Controls.ListView)(target));              return;              }
Magic Number,ICSharpCode.ILSpy.Controls,ResourceStringTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceStringTable.xaml.cs,ResourceStringTable,The following statement contains a magic number: Width = contentPresenter.ActualWidth - 45;
Magic Number,ICSharpCode.ILSpy.Controls,ResourceStringTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceStringTable.xaml.cs,OnParentSizeChanged,The following statement contains a magic number: if (e.WidthChanged)  				Width = e.NewSize.Width - 45;
Magic Number,ICSharpCode.ILSpy.Controls,ResourceStringTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceStringTable.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\..\Controls\ResourceStringTable.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopy);                            #line default              #line hidden                            #line 9 "..\..\..\..\Controls\ResourceStringTable.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCopy);                            #line default              #line hidden              return;              case 2:              this.resourceListView = ((System.Windows.Controls.ListView)(target));              return;              }
Magic Number,ICSharpCode.ILSpy.Options,DisplaySettingsPanel,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,LoadDisplaySettings,The following statement contains a magic number: s.SelectedFontSize = (double?)e.Attribute("FontSize") ?? 10.0 * 4 / 3;
Magic Number,ICSharpCode.ILSpy.Options,DisplaySettingsPanel,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,LoadDisplaySettings,The following statement contains a magic number: s.SelectedFontSize = (double?)e.Attribute("FontSize") ?? 10.0 * 4 / 3;
Magic Number,ICSharpCode.ILSpy.Options,DisplaySettingsPanel,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,LoadDisplaySettings,The following statement contains a magic number: s.SelectedFontSize = (double?)e.Attribute("FontSize") ?? 10.0 * 4 / 3;
Magic Number,ICSharpCode.ILSpy.Options,FontSizeConverter,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,Convert,The following statement contains a magic number: if (value is double) {  				return Math.Round((double)value / 4 * 3);  			}
Magic Number,ICSharpCode.ILSpy.Options,FontSizeConverter,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,Convert,The following statement contains a magic number: if (value is double) {  				return Math.Round((double)value / 4 * 3);  			}
Magic Number,ICSharpCode.ILSpy.Options,FontSizeConverter,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,ConvertBack,The following statement contains a magic number: if (value is string) {  				double d;  				if (double.TryParse((string)value' out d))  					return d * 4 / 3;  				return 11 * 4 / 3;  			}
Magic Number,ICSharpCode.ILSpy.Options,FontSizeConverter,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,ConvertBack,The following statement contains a magic number: if (value is string) {  				double d;  				if (double.TryParse((string)value' out d))  					return d * 4 / 3;  				return 11 * 4 / 3;  			}
Magic Number,ICSharpCode.ILSpy.Options,FontSizeConverter,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,ConvertBack,The following statement contains a magic number: if (value is string) {  				double d;  				if (double.TryParse((string)value' out d))  					return d * 4 / 3;  				return 11 * 4 / 3;  			}
Magic Number,ICSharpCode.ILSpy.Options,FontSizeConverter,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,ConvertBack,The following statement contains a magic number: if (value is string) {  				double d;  				if (double.TryParse((string)value' out d))  					return d * 4 / 3;  				return 11 * 4 / 3;  			}
Magic Number,ICSharpCode.ILSpy.Options,FontSizeConverter,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,ConvertBack,The following statement contains a magic number: if (value is string) {  				double d;  				if (double.TryParse((string)value' out d))  					return d * 4 / 3;  				return 11 * 4 / 3;  			}
Magic Number,ICSharpCode.ILSpy.Options,OptionsDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Options\OptionsDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 2:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Options\OptionsDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              }
Magic Number,ICSharpCode.ILSpy.TextView,XmlDocRenderer,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\XmlDocRenderer.cs,GetCref,The following statement contains a magic number: if (cref.Length < 2) {  				return cref;  			}
Magic Number,ICSharpCode.ILSpy.TextView,XmlDocRenderer,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\XmlDocRenderer.cs,GetCref,The following statement contains a magic number: if (cref.Substring(1' 1) == ":") {  				return cref.Substring(2' cref.Length - 2);  			}
Magic Number,ICSharpCode.ILSpy.TextView,XmlDocRenderer,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\XmlDocRenderer.cs,GetCref,The following statement contains a magic number: if (cref.Substring(1' 1) == ":") {  				return cref.Substring(2' cref.Length - 2);  			}
Magic Number,ICSharpCode.ILSpy.TextView,CaretHighlightAdorner,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\CaretHighlightAdorner.cs,CaretHighlightAdorner,The following statement contains a magic number: double size = Math.Max(min.Width' min.Height) * 0.25;
Magic Number,ICSharpCode.ILSpy.TextView,CaretHighlightAdorner,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\CaretHighlightAdorner.cs,CaretHighlightAdorner,The following statement contains a magic number: geometry = new RectangleGeometry(min' 2' 2);
Magic Number,ICSharpCode.ILSpy.TextView,CaretHighlightAdorner,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\CaretHighlightAdorner.cs,CaretHighlightAdorner,The following statement contains a magic number: geometry = new RectangleGeometry(min' 2' 2);
Magic Number,ICSharpCode.ILSpy.TextView,CaretHighlightAdorner,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\CaretHighlightAdorner.cs,CaretHighlightAdorner,The following statement contains a magic number: geometry.BeginAnimation(RectangleGeometry.RectProperty' new RectAnimation(min' max' new Duration(TimeSpan.FromMilliseconds(300))) { AutoReverse = true });
Magic Number,ICSharpCode.ILSpy.TextView,CaretHighlightAdorner,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\CaretHighlightAdorner.cs,CaretHighlightAdorner,The following statement contains a magic number: pen.Brush.BeginAnimation(Brush.OpacityProperty' new DoubleAnimation(1' 0' new Duration(TimeSpan.FromMilliseconds(200))) { BeginTime = TimeSpan.FromMilliseconds(450) });
Magic Number,ICSharpCode.ILSpy.TextView,CaretHighlightAdorner,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\CaretHighlightAdorner.cs,CaretHighlightAdorner,The following statement contains a magic number: pen.Brush.BeginAnimation(Brush.OpacityProperty' new DoubleAnimation(1' 0' new Duration(TimeSpan.FromMilliseconds(200))) { BeginTime = TimeSpan.FromMilliseconds(450) });
Magic Number,ICSharpCode.ILSpy.TextView,DecompilerTextView,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,RunWithCancellation,The following statement contains a magic number: if (waitAdorner.Visibility != Visibility.Visible) {  				waitAdorner.Visibility = Visibility.Visible;  				// Work around a WPF bug by setting IsIndeterminate only while the progress bar is visible.  				// https://github.com/icsharpcode/ILSpy/issues/593  				progressBar.IsIndeterminate = true;  				waitAdorner.BeginAnimation(OpacityProperty' new DoubleAnimation(0' 1' new Duration(TimeSpan.FromSeconds(0.5))' FillBehavior.Stop));  				var taskBar = MainWindow.Instance.TaskbarItemInfo;  				if (taskBar != null) {  					taskBar.ProgressState = System.Windows.Shell.TaskbarItemProgressState.Indeterminate;  				}  			}
Magic Number,ICSharpCode.ILSpy.TextView,DecompilerTextViewState,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,SaveFoldingsState,The following statement contains a magic number: FoldingsChecksum = unchecked(foldings.Select(f => f.StartOffset * 3 - f.EndOffset).Aggregate((a' b) => a + b));
Magic Number,ICSharpCode.ILSpy.TextView,DecompilerTextViewState,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\DecompilerTextView.cs,RestoreFoldings,The following statement contains a magic number: var checksum = unchecked(list.Select(f => f.StartOffset * 3 - f.EndOffset).Aggregate((a' b) => a + b));
Magic Number,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedAttributeAppliedToTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedAttributeAppliedToTreeNode.cs,GetAttributeUsage,The following statement contains a magic number: if (analyzedType.HasCustomAttributes) {  				foreach (CustomAttribute ca in analyzedType.CustomAttributes) {  					TypeReference t = ca.AttributeType;  					if (t.Name == "AttributeUsageAttribute" && t.Namespace == "System") {  						this.usage = (AttributeTargets)ca.ConstructorArguments[0].Value;  						if (ca.ConstructorArguments.Count > 1) {  							this.allowMutiple = (bool)ca.ConstructorArguments[1].Value;  							this.inherited = (bool)ca.ConstructorArguments[2].Value;  						}  						if (ca.HasProperties) {  							foreach (var namedArgument in ca.Properties) {  								switch (namedArgument.Name) {  									case "AllowMultiple":  										this.allowMutiple = (bool)namedArgument.Argument.Value;  										break;  									case "Inherited":  										this.inherited = (bool)namedArgument.Argument.Value;  										break;  								}  							}  						}  					}  				}  			}
Magic Number,ICSharpCode.ILSpy.TreeNodes,CursorResourceEntryNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\ResourceNodes\CursorResourceEntryNode.cs,View,The following statement contains a magic number: try {  				AvalonEditTextOutput output = new AvalonEditTextOutput();  				Data.Position = 0;  				BitmapImage image = new BitmapImage();    				//HACK: windows imaging does not understand that .cur files have the same layout as .ico  				// so load to data' and modify the ResourceType in the header to make look like an icon...  				MemoryStream s = Data as MemoryStream;  				if (null == s)  				{  					// data was stored in another stream type (e.g. PinnedBufferedMemoryStream)  					s = new MemoryStream();  					Data.CopyTo(s);  				}  				byte[] curData = s.ToArray();  				curData[2] = 1;  				using (Stream stream = new MemoryStream(curData)) {  					image.BeginInit();  					image.StreamSource = stream;  					image.EndInit();  				}    				output.AddUIElement(() => new Image { Source = image });  				output.WriteLine();  				output.AddButton(Images.Save' "Save"' delegate {  					Save(null);  				});  				textView.ShowNode(output' this);  				return true;  			}  			catch (Exception) {  				return false;  			}
Magic Number,ICSharpCode.ILSpy.TreeNodes,ResourcesFileTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\ResourceNodes\ResourcesFileTreeNode.cs,Save,The following statement contains a magic number: if (er != null) {  				SaveFileDialog dlg = new SaveFileDialog();  				dlg.FileName = DecompilerTextView.CleanUpName(er.Name);  				dlg.Filter = "Resources file (*.resources)|*.resources|Resource XML file|*.resx";  				if (dlg.ShowDialog() == true) {  					Stream s = er.GetResourceStream();  					s.Position = 0;  					switch (dlg.FilterIndex) {  						case 1:  							using (var fs = dlg.OpenFile()) {  								s.CopyTo(fs);  							}  							break;  						case 2:  							var reader = new ResourceReader(s);  							using (var writer = new ResXResourceWriter(dlg.OpenFile())) {  								foreach (DictionaryEntry entry in reader) {  									writer.AddResource(entry.Key.ToString()' entry.Value);  								}  							}  							break;  					}  				}  				return true;  			}
Magic Number,ICSharpCode.ILSpy.TreeNodes,AssemblyListTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\AssemblyListTreeNode.cs,Decompile,The following statement contains a magic number: foreach (AssemblyTreeNode asm in this.Children) {  				language.WriteCommentLine(output' new string('-'' 60));  				output.WriteLine();  				asm.Decompile(language' output' options);  			}
Magic Number,ICSharpCode.ILSpy.TreeNodes,ThreadingSupport,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\ThreadingSupport.cs,LoadChildren,The following statement contains a magic number: thisTask.Wait(TimeSpan.FromMilliseconds(200));
Missing Default,ICSharpCode.ILSpy,CreateListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\CreateListDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.ListName = ((System.Windows.Controls.TextBox)(target));                            #line 17 "..\..\..\CreateListDialog.xaml"              this.ListName.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.TextBox_TextChanged);                            #line default              #line hidden              return;              case 2:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 20 "..\..\..\CreateListDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              }
Missing Default,ICSharpCode.ILSpy,DebugSteps,C:\repos\icsharpcode_ILSpy\ILSpy\DebugSteps.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.tree = ((System.Windows.Controls.TreeView)(target));                            #line 15 "..\..\..\DebugSteps.xaml"              this.tree.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ShowStateAfter_Click);                            #line default              #line hidden                            #line 15 "..\..\..\DebugSteps.xaml"              this.tree.KeyDown += new System.Windows.Input.KeyEventHandler(this.tree_KeyDown);                            #line default              #line hidden              return;              case 2:                            #line 23 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ShowStateBefore_Click);                            #line default              #line hidden              return;              case 3:                            #line 24 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ShowStateAfter_Click);                            #line default              #line hidden              return;              case 4:                            #line 25 "..\..\..\DebugSteps.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.DebugStep_Click);                            #line default              #line hidden              return;              }
Missing Default,ICSharpCode.ILSpy,CSharpLanguage,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,GetRuntimeDisplayName,The following switch statement is missing a default case: switch (module.Runtime) {  				case TargetRuntime.Net_1_0:  					return ".NET 1.0";  				case TargetRuntime.Net_1_1:  					return ".NET 1.1";  				case TargetRuntime.Net_2_0:  					return ".NET 2.0";  				case TargetRuntime.Net_4_0:  					return ".NET 4.0";  			}
Missing Default,ICSharpCode.ILSpy,SelectCtorTransform,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,Run,The following switch statement is missing a default case: switch (node) {  						case ConstructorDeclaration ctor:  							if (ctor.GetSymbol() == this.ctor) {  								ctorDecl = ctor;  							} else {  								// remove other ctors  								ctor.Remove();  								removedSymbols.Add(ctor.GetSymbol());  							}  							break;  						case FieldDeclaration fd:  							// Remove any fields without initializers  							if (fd.Variables.All(v => v.Initializer.IsNull)) {  								fd.Remove();  								removedSymbols.Add(fd.GetSymbol());  							}  							break;  					}
Missing Default,ICSharpCode.ILSpy,SelectCtorTransform,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,Run,The following switch statement is missing a default case: switch (node) {  							case FieldDeclaration fd:  								fd.Remove();  								removedSymbols.Add(fd.GetSymbol());  								break;  						}
Missing Default,ICSharpCode.ILSpy,SelectFieldTransform,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpLanguage.cs,Run,The following switch statement is missing a default case: switch (node) {  						case EntityDeclaration ed:  							if (node.GetSymbol() != field)  								node.Remove();  							break;  						case Comment c:  							if (c.GetSymbol() != field)  								node.Remove();  							break;  					}
Missing Default,ICSharpCode.ILSpy,CSharpHighlightingTokenWriter,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpHighlightingTokenWriter.cs,WriteKeyword,The following switch statement is missing a default case: switch (keyword) {  				case "namespace":  				case "using":  					if (role == UsingStatement.UsingKeywordRole)  						color = structureKeywordsColor;  					else  						color = namespaceKeywordsColor;  					break;  				case "this":  				case "base":  					color = thisKeywordColor;  					break;  				case "true":  				case "false":  					color = trueKeywordColor;  					break;  				case "public":  				case "internal":  				case "protected":  				case "private":  					color = visibilityKeywordsColor;  					break;  				case "if":  				case "else":  				case "switch":  				case "case":  				case "default":  				case "while":  				case "do":  				case "for":  				case "foreach":  				case "lock":  				case "global":  				case "dynamic":  				case "await":  					color = structureKeywordsColor;  					break;  				case "where":  					if (nodeStack.PeekOrDefault() is QueryClause)  						color = queryKeywordsColor;  					else  						color = structureKeywordsColor;  					break;  				case "in":  					if (nodeStack.PeekOrDefault() is ForeachStatement)  						color = structureKeywordsColor;  					else if (nodeStack.PeekOrDefault() is QueryClause)  						color = queryKeywordsColor;  					else  						color = parameterModifierColor;  					break;  				case "as":  				case "is":  				case "new":  				case "sizeof":  				case "typeof":  				case "nameof":  				case "stackalloc":  					color = typeKeywordsColor;  					break;  				case "try":  				case "throw":  				case "catch":  				case "finally":  					color = exceptionKeywordsColor;  					break;  				case "when":  					if (role == CatchClause.WhenKeywordRole)  						color = exceptionKeywordsColor;  					break;  				case "get":  				case "set":  				case "add":  				case "remove":  					if (role == PropertyDeclaration.GetKeywordRole ||  						role == PropertyDeclaration.SetKeywordRole ||  						role == CustomEventDeclaration.AddKeywordRole ||  						role == CustomEventDeclaration.RemoveKeywordRole)  						color = accessorKeywordsColor;  					break;  				case "abstract":  				case "const":  				case "event":  				case "extern":  				case "override":  				case "readonly":  				case "sealed":  				case "static":  				case "virtual":  				case "volatile":  				case "async":  				case "partial":  					color = modifiersColor;  					break;  				case "checked":  				case "unchecked":  					color = checkedKeywordColor;  					break;  				case "fixed":  				case "unsafe":  					color = unsafeKeywordsColor;  					break;  				case "enum":  				case "struct":  					color = valueTypeKeywordsColor;  					break;  				case "class":  				case "interface":  				case "delegate":  					color = referenceTypeKeywordsColor;  					break;  				case "select":  				case "group":  				case "by":  				case "into":  				case "from":  				case "ascending":  				case "descending":  				case "orderby":  				case "let":  				case "join":  				case "on":  				case "equals":  					if (nodeStack.PeekOrDefault() is QueryClause)  						color = queryKeywordsColor;  					break;  				case "explicit":  				case "implicit":  				case "operator":  					color = operatorKeywordsColor;  					break;  				case "params":  				case "ref":  				case "out":  					color = parameterModifierColor;  					break;  				case "break":  				case "continue":  				case "goto":  				case "yield":  				case "return":  					color = gotoKeywordsColor;  					break;  			}
Missing Default,ICSharpCode.ILSpy,CSharpHighlightingTokenWriter,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpHighlightingTokenWriter.cs,WritePrimitiveType,The following switch statement is missing a default case: switch (type) {  				case "new":  					color = typeKeywordsColor;  					break;  				case "bool":  				case "byte":  				case "char":  				case "decimal":  				case "double":  				case "enum":  				case "float":  				case "int":  				case "long":  				case "sbyte":  				case "short":  				case "struct":  				case "uint":  				case "ushort":  				case "ulong":  					color = valueTypeKeywordsColor;  					break;  				case "object":  				case "string":  				case "void":  					color = referenceTypeKeywordsColor;  					break;  			}
Missing Default,ICSharpCode.ILSpy,CSharpHighlightingTokenWriter,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpHighlightingTokenWriter.cs,WriteIdentifier,The following switch statement is missing a default case: switch (GetCurrentDefinition()) {  				case ITypeDefinition t:  					switch (t.Kind) {  						case TypeKind.Delegate:  							color = delegateTypeColor;  							break;  						case TypeKind.Class:  							color = referenceTypeColor;  							break;  						case TypeKind.Interface:  							color = interfaceTypeColor;  							break;  						case TypeKind.Enum:  							color = enumerationTypeColor;  							break;  						case TypeKind.Struct:  							color = valueTypeColor;  							break;  					}  					break;  				case IMethod m:  					color = methodDeclarationColor;  					break;  				case IField f:  					color = fieldDeclarationColor;  					break;  			}
Missing Default,ICSharpCode.ILSpy,CSharpHighlightingTokenWriter,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpHighlightingTokenWriter.cs,WriteIdentifier,The following switch statement is missing a default case: switch (t.Kind) {  						case TypeKind.Delegate:  							color = delegateTypeColor;  							break;  						case TypeKind.Class:  							color = referenceTypeColor;  							break;  						case TypeKind.Interface:  							color = interfaceTypeColor;  							break;  						case TypeKind.Enum:  							color = enumerationTypeColor;  							break;  						case TypeKind.Struct:  							color = valueTypeColor;  							break;  					}
Missing Default,ICSharpCode.ILSpy,CSharpHighlightingTokenWriter,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpHighlightingTokenWriter.cs,WriteIdentifier,The following switch statement is missing a default case: switch (GetCurrentMemberReference()) {  				case IType t:  					switch (t.Kind) {  						case TypeKind.Delegate:  							color = delegateTypeColor;  							break;  						case TypeKind.Class:  							color = referenceTypeColor;  							break;  						case TypeKind.Interface:  							color = interfaceTypeColor;  							break;  						case TypeKind.Enum:  							color = enumerationTypeColor;  							break;  						case TypeKind.Struct:  							color = valueTypeColor;  							break;  					}  					break;  				case IMethod m:  					color = methodCallColor;  					break;  				case IField f:  					color = fieldAccessColor;  					break;  			}
Missing Default,ICSharpCode.ILSpy,CSharpHighlightingTokenWriter,C:\repos\icsharpcode_ILSpy\ILSpy\Languages\CSharpHighlightingTokenWriter.cs,WriteIdentifier,The following switch statement is missing a default case: switch (t.Kind) {  						case TypeKind.Delegate:  							color = delegateTypeColor;  							break;  						case TypeKind.Class:  							color = referenceTypeColor;  							break;  						case TypeKind.Interface:  							color = interfaceTypeColor;  							break;  						case TypeKind.Enum:  							color = enumerationTypeColor;  							break;  						case TypeKind.Struct:  							color = valueTypeColor;  							break;  					}
Missing Default,ICSharpCode.ILSpy,LoadedNugetPackage,C:\repos\icsharpcode_ILSpy\ILSpy\LoadedNugetPackage.cs,LoadedNugetPackage,The following switch statement is missing a default case: switch (Path.GetExtension(entry.FullName)) {  						case ".dll":  						case ".exe":  							var memory = new MemoryStream();  							entry.Open().CopyTo(memory);  							memory.Position = 0;  							var e = new Entry(Uri.UnescapeDataString(entry.FullName)' memory);  							e.PropertyChanged += EntryPropertyChanged;  							Entries.Add(e);  							break;  					}
Missing Default,ICSharpCode.ILSpy,NugetPackageBrowserDialog,C:\repos\icsharpcode_ILSpy\ILSpy\NugetPackageBrowserDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\NugetPackageBrowserDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              }
Missing Default,ICSharpCode.ILSpy,OpenFromGacDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenFromGacDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.filterTextBox = ((System.Windows.Controls.TextBox)(target));                            #line 25 "..\..\..\OpenFromGacDialog.xaml"              this.filterTextBox.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.FilterTextBox_TextChanged);                            #line default              #line hidden              return;              case 2:              this.listView = ((System.Windows.Controls.ListView)(target));                            #line 27 "..\..\..\OpenFromGacDialog.xaml"              this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged);                            #line default              #line hidden              return;              case 3:              this.nameColumn = ((ICSharpCode.ILSpy.Controls.SortableGridViewColumn)(target));              return;              case 4:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 39 "..\..\..\OpenFromGacDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 5:              this.gacReadingProgressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              }
Missing Default,ICSharpCode.ILSpy,OpenListDialog,C:\repos\icsharpcode_ILSpy\ILSpy\OpenListDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.listView = ((System.Windows.Controls.ListView)(target));                            #line 21 "..\..\..\OpenListDialog.xaml"              this.listView.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ListView_SelectionChanged);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.Loaded += new System.Windows.RoutedEventHandler(this.listView_Loaded);                            #line default              #line hidden                            #line 22 "..\..\..\OpenListDialog.xaml"              this.listView.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.listView_MouseDoubleClick);                            #line default              #line hidden              return;              case 2:              this.nameColumn = ((ICSharpCode.ILSpy.Controls.SortableGridViewColumn)(target));              return;              case 3:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 31 "..\..\..\OpenListDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 36 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CreateButton_Click);                            #line default              #line hidden              return;              case 5:              this.deleteButton = ((System.Windows.Controls.Button)(target));                            #line 37 "..\..\..\OpenListDialog.xaml"              this.deleteButton.Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);                            #line default              #line hidden              return;              case 6:                            #line 38 "..\..\..\OpenListDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ResetButton_Click);                            #line default              #line hidden              return;              }
Missing Default,ICSharpCode.ILSpy,SearchPane,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.self = ((ICSharpCode.ILSpy.SearchPane)(target));              return;              case 2:              this.searchBox = ((ICSharpCode.ILSpy.Controls.SearchBox)(target));              return;              case 3:              this.searchModeComboBox = ((System.Windows.Controls.ComboBox)(target));                            #line 25 "..\..\..\SearchPane.xaml"              this.searchModeComboBox.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SearchModeComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this.listBox = ((System.Windows.Controls.ListBox)(target));                            #line 38 "..\..\..\SearchPane.xaml"              this.listBox.KeyDown += new System.Windows.Input.KeyEventHandler(this.ListBox_KeyDown);                            #line default              #line hidden                            #line 39 "..\..\..\SearchPane.xaml"              this.listBox.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ListBox_MouseDoubleClick);                            #line default              #line hidden              return;              }
Missing Default,ICSharpCode.ILSpy,RunningSearch,C:\repos\icsharpcode_ILSpy\ILSpy\SearchPane.cs,GetSearchStrategy,The following switch statement is missing a default case: switch (mode)  				{  					case SearchMode.TypeAndMember:  						return new TypeAndMemberSearchStrategy(terms);  					case SearchMode.Type:  						return new TypeSearchStrategy(terms);  					case SearchMode.Member:  						return new MemberSearchStrategy(terms);  					case SearchMode.Literal:  						return new LiteralSearchStrategy(terms);  					case SearchMode.Method:  						return new MemberSearchStrategy(terms' MemberSearchKind.Method);  					case SearchMode.Field:  						return new MemberSearchStrategy(terms' MemberSearchKind.Field);  					case SearchMode.Property:  						return new MemberSearchStrategy(terms' MemberSearchKind.Property);  					case SearchMode.Event:  						return new MemberSearchStrategy(terms' MemberSearchKind.Event);  				}
Missing Default,ICSharpCode.ILSpy,LiteralSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,LiteralSearchStrategy,The following switch statement is missing a default case: switch (valueType) {  					case TypeCode.Byte:  					case TypeCode.SByte:  					case TypeCode.Int16:  					case TypeCode.UInt16:  					case TypeCode.Int32:  					case TypeCode.UInt32:  					case TypeCode.Int64:  					case TypeCode.UInt64:  						searchTermLiteralType = TypeCode.Int64;  						searchTermLiteralValue = CSharpPrimitiveCast.Cast(TypeCode.Int64' value.LiteralValue' false);  						break;  					case TypeCode.Single:  					case TypeCode.Double:  					case TypeCode.String:  						searchTermLiteralType = valueType;  						searchTermLiteralValue = value.LiteralValue;  						break;  					}
Missing Default,ICSharpCode.ILSpy,LiteralSearchStrategy,C:\repos\icsharpcode_ILSpy\ILSpy\SearchStrategies.cs,MethodIsLiteralMatch,The following switch statement is missing a default case: switch (inst.OpCode.Code) {  					case Code.Ldc_I8:  						if (val == (long)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4:  						if (val == (int)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_S:  						if (val == (sbyte)inst.Operand)  							return true;  						break;  					case Code.Ldc_I4_M1:  						if (val == -1)  							return true;  						break;  					case Code.Ldc_I4_0:  						if (val == 0)  							return true;  						break;  					case Code.Ldc_I4_1:  						if (val == 1)  							return true;  						break;  					case Code.Ldc_I4_2:  						if (val == 2)  							return true;  						break;  					case Code.Ldc_I4_3:  						if (val == 3)  							return true;  						break;  					case Code.Ldc_I4_4:  						if (val == 4)  							return true;  						break;  					case Code.Ldc_I4_5:  						if (val == 5)  							return true;  						break;  					case Code.Ldc_I4_6:  						if (val == 6)  							return true;  						break;  					case Code.Ldc_I4_7:  						if (val == 7)  							return true;  						break;  					case Code.Ldc_I4_8:  						if (val == 8)  							return true;  						break;  					}
Missing Default,ICSharpCode.ILSpy.Controls,ResourceObjectTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceObjectTable.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\..\Controls\ResourceObjectTable.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopy);                            #line default              #line hidden                            #line 8 "..\..\..\..\Controls\ResourceObjectTable.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCopy);                            #line default              #line hidden              return;              case 2:              this.resourceListView = ((System.Windows.Controls.ListView)(target));              return;              }
Missing Default,ICSharpCode.ILSpy.Controls,ResourceStringTable,C:\repos\icsharpcode_ILSpy\ILSpy\Controls\ResourceStringTable.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\..\Controls\ResourceStringTable.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopy);                            #line default              #line hidden                            #line 9 "..\..\..\..\Controls\ResourceStringTable.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCopy);                            #line default              #line hidden              return;              case 2:              this.resourceListView = ((System.Windows.Controls.ListView)(target));              return;              }
Missing Default,ICSharpCode.ILSpy.Options,DisplaySettingsPanel,C:\repos\icsharpcode_ILSpy\ILSpy\Options\DisplaySettingsPanel.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.fontSelector = ((System.Windows.Controls.ComboBox)(target));              return;              }
Missing Default,ICSharpCode.ILSpy.Options,OptionsDialog,C:\repos\icsharpcode_ILSpy\ILSpy\Options\OptionsDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.tabControl = ((System.Windows.Controls.TabControl)(target));              return;              case 2:              this.okButton = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Options\OptionsDialog.xaml"              this.okButton.Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              }
Missing Default,ICSharpCode.ILSpy.TextView,XmlDocRenderer,C:\repos\icsharpcode_ILSpy\ILSpy\TextView\XmlDocRenderer.cs,AddXmlDocumentation,The following switch statement is missing a default case: switch (elname) {  						case "filterpriority":  						case "remarks":  							xml.Skip();  							break;  						case "example":  							ret.Append(Environment.NewLine);  							ret.Append("Example:");  							ret.Append(Environment.NewLine);  							break;  						case "exception":  							ret.Append(Environment.NewLine);  							ret.Append(GetCref(xml["cref"]));  							ret.Append(": ");  							break;  						case "returns":  							ret.Append(Environment.NewLine);  							ret.Append("Returns: ");  							break;  						case "see":  							ret.Append(GetCref(xml["cref"]));  							ret.Append(xml["langword"]);  							break;  						case "seealso":  							ret.Append(Environment.NewLine);  							ret.Append("See also: ");  							ret.Append(GetCref(xml["cref"]));  							break;  						case "paramref":  							ret.Append(xml["name"]);  							break;  						case "param":  							ret.Append(Environment.NewLine);  							ret.Append(whitespace.Replace(xml["name"].Trim()'" "));  							ret.Append(": ");  							break;  						case "typeparam":  							ret.Append(Environment.NewLine);  							ret.Append(whitespace.Replace(xml["name"].Trim()'" "));  							ret.Append(": ");  							break;  						case "value":  							ret.Append(Environment.NewLine);  							ret.Append("Value: ");  							ret.Append(Environment.NewLine);  							break;  						case "br":  						case "para":  							ret.Append(Environment.NewLine);  							break;  					}
Missing Default,ICSharpCode.ILSpy.TreeNodes.Analyzer,AnalyzedAttributeAppliedToTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\Analyzer\AnalyzedAttributeAppliedToTreeNode.cs,GetAttributeUsage,The following switch statement is missing a default case: switch (namedArgument.Name) {  									case "AllowMultiple":  										this.allowMutiple = (bool)namedArgument.Argument.Value;  										break;  									case "Inherited":  										this.inherited = (bool)namedArgument.Argument.Value;  										break;  								}
Missing Default,ICSharpCode.ILSpy.TreeNodes,ResourcesFileTreeNode,C:\repos\icsharpcode_ILSpy\ILSpy\TreeNodes\ResourceNodes\ResourcesFileTreeNode.cs,Save,The following switch statement is missing a default case: switch (dlg.FilterIndex) {  						case 1:  							using (var fs = dlg.OpenFile()) {  								s.CopyTo(fs);  							}  							break;  						case 2:  							var reader = new ResourceReader(s);  							using (var writer = new ResXResourceWriter(dlg.OpenFile())) {  								foreach (DictionaryEntry entry in reader) {  									writer.AddResource(entry.Key.ToString()' entry.Value);  								}  							}  							break;  					}
