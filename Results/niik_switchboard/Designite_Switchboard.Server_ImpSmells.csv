Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Switchboard.Server,SwitchboardRequestParser,C:\repos\niik_switchboard\Switchboard.Server\Request\SwitchboardRequestParser.cs,ParseAsync,Cyclomatic complexity of the method is 8
Complex Method,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,Execute,Cyclomatic complexity of the method is 12
Long Parameter List,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Switchboard.Server.Utils,MaxReadStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\MaxReadStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Switchboard.Server.Utils,RedirectingStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\RedirectingStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Switchboard.Server.Utils,RedirectingStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\RedirectingStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Switchboard.Server.Utils,StartAvailableStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\StartAvailableStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Statement,Switchboard.Server,SwitchboardContext,C:\repos\niik_switchboard\Switchboard.Server\Context\SwitchboardContext.cs,OpenOutboundConnectionAsync,The length of the statement  "                    Debug.WriteLine("{0}: Current outbound connection is for {1}' can't reuse for {2}"' InboundConnection.RemoteEndPoint' this.OutboundConnection.RemoteEndPoint' endPoint); " is 168.
Long Statement,Switchboard.Server,SwitchboardContext,C:\repos\niik_switchboard\Switchboard.Server\Context\SwitchboardContext.cs,OpenOutboundConnectionAsync,The length of the statement  "                    Debug.WriteLine("{0}: Current outbound connection {0} secure' can't reuse"' InboundConnection.RemoteEndPoint' this.OutboundConnection.IsSecure ? "is" : "is not"); " is 162.
Long Statement,Switchboard.Server,SwitchboardContext,C:\repos\niik_switchboard\Switchboard.Server\Context\SwitchboardContext.cs,OpenOutboundConnectionAsync,The length of the statement  "                        Debug.WriteLine("{0}: Reusing outbound connection to {1}"' InboundConnection.RemoteEndPoint' this.OutboundConnection.RemoteEndPoint); " is 133.
Long Statement,Switchboard.Server,SwitchboardContext,C:\repos\niik_switchboard\Switchboard.Server\Context\SwitchboardContext.cs,OpenOutboundConnectionAsync,The length of the statement  "                        Debug.WriteLine("{0}: Detected stale outbound connection' recreating"' InboundConnection.RemoteEndPoint' this.OutboundConnection.RemoteEndPoint); " is 145.
Long Statement,Switchboard.Server,SwitchboardServer,C:\repos\niik_switchboard\Switchboard.Server\Server\SwitchboardServer.cs,HandleSession,The length of the statement  "                    Debug.WriteLine(string.Format("{0}: Got {1} request for {2}"' context.InboundConnection.RemoteEndPoint' request.Method' request.RequestUri)); " is 141.
Long Statement,Switchboard.Server,SwitchboardServer,C:\repos\niik_switchboard\Switchboard.Server\Server\SwitchboardServer.cs,HandleSession,The length of the statement  "                    Debug.WriteLine(string.Format("{0}: Got response from handler ({1})"' context.InboundConnection.RemoteEndPoint' response.StatusCode)); " is 134.
Complex Conditional,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,Execute,The conditional expression  "this.chunkTrailingCrLfPosition == 0 && b != 13 || this.chunkTrailingCrLfPosition == 1 && b != 10"  is complex.
Magic Number,Switchboard.Server.Connection,InboundConnection,C:\repos\niik_switchboard\Switchboard.Server\Connection\InboundConnection.cs,WriteResponseAsync,The following statement contains a magic number: if (response.ResponseBody != null && response.ResponseBody.CanRead)              {                  byte[] buffer = new byte[8192];                  int read;                  long written = 0;                    while ((read = await response.ResponseBody.ReadAsync(buffer' 0' buffer.Length).ConfigureAwait(false)) > 0)                  {                      written += read;                      Debug.WriteLine("{0}: Read {1:N0} bytes from response body"' this.RemoteEndPoint' read);                      await writeStream.WriteAsync(buffer' 0' read).ConfigureAwait(false);                      Debug.WriteLine("{0}: Wrote {1:N0} bytes to client"' this.RemoteEndPoint' read);                  }                    Debug.WriteLine("{0}: Wrote response body ({1:N0} bytes) to client"' this.RemoteEndPoint' written);                }
Magic Number,Switchboard.Server,SwitchboardRequestParser,C:\repos\niik_switchboard\Switchboard.Server\Request\SwitchboardRequestParser.cs,ParseAsync,The following statement contains a magic number: byte[] buffer = new byte[8192];
Magic Number,Switchboard.Server,SwitchboardResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Response\SwitchboardResponseParser.cs,ParseAsync,The following statement contains a magic number: byte[] buffer = new byte[8192];
Magic Number,Switchboard.Server,SwitchboardRequest,C:\repos\niik_switchboard\Switchboard.Server\Request\SwitchboardRequest.cs,CloseAsync,The following statement contains a magic number: if (this.ContentLength > 0 && this.RequestBody != null && this.RequestBody.CanRead)              {                  var buf = new byte[8192];                    int c;                    while ((c = await this.RequestBody.ReadAsync(buf' 0' buf.Length).ConfigureAwait(false)) > 0)                      continue;              }
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,OptimizeCount,The following statement contains a magic number: if (!inChunkHeader)              {                  if (count > chunkLeft + 2)                      count = chunkLeft + 2;              }              else              {                  if (chunkHeaderPosition == 0)                      count = 3;                  else                  {                      if (inChunkHeaderLength)                          count = 2;                      else                          count = chunkLength + 3;                  }              }
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,OptimizeCount,The following statement contains a magic number: if (!inChunkHeader)              {                  if (count > chunkLeft + 2)                      count = chunkLeft + 2;              }              else              {                  if (chunkHeaderPosition == 0)                      count = 3;                  else                  {                      if (inChunkHeaderLength)                          count = 2;                      else                          count = chunkLength + 3;                  }              }
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,OptimizeCount,The following statement contains a magic number: if (!inChunkHeader)              {                  if (count > chunkLeft + 2)                      count = chunkLeft + 2;              }              else              {                  if (chunkHeaderPosition == 0)                      count = 3;                  else                  {                      if (inChunkHeaderLength)                          count = 2;                      else                          count = chunkLength + 3;                  }              }
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,OptimizeCount,The following statement contains a magic number: if (!inChunkHeader)              {                  if (count > chunkLeft + 2)                      count = chunkLeft + 2;              }              else              {                  if (chunkHeaderPosition == 0)                      count = 3;                  else                  {                      if (inChunkHeaderLength)                          count = 2;                      else                          count = chunkLength + 3;                  }              }
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,OptimizeCount,The following statement contains a magic number: if (!inChunkHeader)              {                  if (count > chunkLeft + 2)                      count = chunkLeft + 2;              }              else              {                  if (chunkHeaderPosition == 0)                      count = 3;                  else                  {                      if (inChunkHeaderLength)                          count = 2;                      else                          count = chunkLength + 3;                  }              }
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,Execute,The following statement contains a magic number: for (int i = offset; i < offset + count; i++)              {                  if (this.done)                      break;                    byte b = buffer[i];                    if (this.inChunkHeader)                  {                      for (; i < offset + count; i++)                      {                          b = buffer[i];                            if (this.inChunkHeaderLength)                          {                              if (b == 13)                                  this.inChunkHeaderLength = false;                              else                                  this.chunkLength = (this.chunkLength << 4) + FromHex(b);                                                            this.chunkHeaderPosition++;                          }                          else                          {                              if (b != 10)                                  throw new FormatException("Malformed chunk header");                                this.inChunkHeader = false;                              this.inChunk = true;                              this.chunkHeaderPosition = 0;                                break;                          }                      }                  }                  else if (this.inChunkTrailingCrLf)                  {                      if (this.chunkTrailingCrLfPosition == 0 && b != 13 || this.chunkTrailingCrLfPosition == 1 && b != 10)                          throw new FormatException("Malformed chunk header");                        if (this.chunkTrailingCrLfPosition == 1)                      {                          this.inChunkTrailingCrLf = false;                          this.chunkTrailingCrLfPosition = 0;                            this.inChunkHeader = true;                          this.inChunkHeaderLength = true;                            if (chunkLength == 0)                              this.done = true;                            this.chunkLength = 0;                      }                      else                      {                          this.chunkTrailingCrLfPosition++;                      }                    }                  else if (this.inChunk)                  {                      for (; i < offset + count; i++)                      {                          this.chunkRead++;                            if (chunkRead == this.chunkLength)                          {                              this.inChunk = false;                              this.inChunkTrailingCrLf = true;                              this.chunkRead = 0;                              break;                          }                      }                  }              }
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,Execute,The following statement contains a magic number: for (int i = offset; i < offset + count; i++)              {                  if (this.done)                      break;                    byte b = buffer[i];                    if (this.inChunkHeader)                  {                      for (; i < offset + count; i++)                      {                          b = buffer[i];                            if (this.inChunkHeaderLength)                          {                              if (b == 13)                                  this.inChunkHeaderLength = false;                              else                                  this.chunkLength = (this.chunkLength << 4) + FromHex(b);                                                            this.chunkHeaderPosition++;                          }                          else                          {                              if (b != 10)                                  throw new FormatException("Malformed chunk header");                                this.inChunkHeader = false;                              this.inChunk = true;                              this.chunkHeaderPosition = 0;                                break;                          }                      }                  }                  else if (this.inChunkTrailingCrLf)                  {                      if (this.chunkTrailingCrLfPosition == 0 && b != 13 || this.chunkTrailingCrLfPosition == 1 && b != 10)                          throw new FormatException("Malformed chunk header");                        if (this.chunkTrailingCrLfPosition == 1)                      {                          this.inChunkTrailingCrLf = false;                          this.chunkTrailingCrLfPosition = 0;                            this.inChunkHeader = true;                          this.inChunkHeaderLength = true;                            if (chunkLength == 0)                              this.done = true;                            this.chunkLength = 0;                      }                      else                      {                          this.chunkTrailingCrLfPosition++;                      }                    }                  else if (this.inChunk)                  {                      for (; i < offset + count; i++)                      {                          this.chunkRead++;                            if (chunkRead == this.chunkLength)                          {                              this.inChunk = false;                              this.inChunkTrailingCrLf = true;                              this.chunkRead = 0;                              break;                          }                      }                  }              }
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,Execute,The following statement contains a magic number: for (int i = offset; i < offset + count; i++)              {                  if (this.done)                      break;                    byte b = buffer[i];                    if (this.inChunkHeader)                  {                      for (; i < offset + count; i++)                      {                          b = buffer[i];                            if (this.inChunkHeaderLength)                          {                              if (b == 13)                                  this.inChunkHeaderLength = false;                              else                                  this.chunkLength = (this.chunkLength << 4) + FromHex(b);                                                            this.chunkHeaderPosition++;                          }                          else                          {                              if (b != 10)                                  throw new FormatException("Malformed chunk header");                                this.inChunkHeader = false;                              this.inChunk = true;                              this.chunkHeaderPosition = 0;                                break;                          }                      }                  }                  else if (this.inChunkTrailingCrLf)                  {                      if (this.chunkTrailingCrLfPosition == 0 && b != 13 || this.chunkTrailingCrLfPosition == 1 && b != 10)                          throw new FormatException("Malformed chunk header");                        if (this.chunkTrailingCrLfPosition == 1)                      {                          this.inChunkTrailingCrLf = false;                          this.chunkTrailingCrLfPosition = 0;                            this.inChunkHeader = true;                          this.inChunkHeaderLength = true;                            if (chunkLength == 0)                              this.done = true;                            this.chunkLength = 0;                      }                      else                      {                          this.chunkTrailingCrLfPosition++;                      }                    }                  else if (this.inChunk)                  {                      for (; i < offset + count; i++)                      {                          this.chunkRead++;                            if (chunkRead == this.chunkLength)                          {                              this.inChunk = false;                              this.inChunkTrailingCrLf = true;                              this.chunkRead = 0;                              break;                          }                      }                  }              }
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,Execute,The following statement contains a magic number: for (int i = offset; i < offset + count; i++)              {                  if (this.done)                      break;                    byte b = buffer[i];                    if (this.inChunkHeader)                  {                      for (; i < offset + count; i++)                      {                          b = buffer[i];                            if (this.inChunkHeaderLength)                          {                              if (b == 13)                                  this.inChunkHeaderLength = false;                              else                                  this.chunkLength = (this.chunkLength << 4) + FromHex(b);                                                            this.chunkHeaderPosition++;                          }                          else                          {                              if (b != 10)                                  throw new FormatException("Malformed chunk header");                                this.inChunkHeader = false;                              this.inChunk = true;                              this.chunkHeaderPosition = 0;                                break;                          }                      }                  }                  else if (this.inChunkTrailingCrLf)                  {                      if (this.chunkTrailingCrLfPosition == 0 && b != 13 || this.chunkTrailingCrLfPosition == 1 && b != 10)                          throw new FormatException("Malformed chunk header");                        if (this.chunkTrailingCrLfPosition == 1)                      {                          this.inChunkTrailingCrLf = false;                          this.chunkTrailingCrLfPosition = 0;                            this.inChunkHeader = true;                          this.inChunkHeaderLength = true;                            if (chunkLength == 0)                              this.done = true;                            this.chunkLength = 0;                      }                      else                      {                          this.chunkTrailingCrLfPosition++;                      }                    }                  else if (this.inChunk)                  {                      for (; i < offset + count; i++)                      {                          this.chunkRead++;                            if (chunkRead == this.chunkLength)                          {                              this.inChunk = false;                              this.inChunkTrailingCrLf = true;                              this.chunkRead = 0;                              break;                          }                      }                  }              }
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,Execute,The following statement contains a magic number: for (int i = offset; i < offset + count; i++)              {                  if (this.done)                      break;                    byte b = buffer[i];                    if (this.inChunkHeader)                  {                      for (; i < offset + count; i++)                      {                          b = buffer[i];                            if (this.inChunkHeaderLength)                          {                              if (b == 13)                                  this.inChunkHeaderLength = false;                              else                                  this.chunkLength = (this.chunkLength << 4) + FromHex(b);                                                            this.chunkHeaderPosition++;                          }                          else                          {                              if (b != 10)                                  throw new FormatException("Malformed chunk header");                                this.inChunkHeader = false;                              this.inChunk = true;                              this.chunkHeaderPosition = 0;                                break;                          }                      }                  }                  else if (this.inChunkTrailingCrLf)                  {                      if (this.chunkTrailingCrLfPosition == 0 && b != 13 || this.chunkTrailingCrLfPosition == 1 && b != 10)                          throw new FormatException("Malformed chunk header");                        if (this.chunkTrailingCrLfPosition == 1)                      {                          this.inChunkTrailingCrLf = false;                          this.chunkTrailingCrLfPosition = 0;                            this.inChunkHeader = true;                          this.inChunkHeaderLength = true;                            if (chunkLength == 0)                              this.done = true;                            this.chunkLength = 0;                      }                      else                      {                          this.chunkTrailingCrLfPosition++;                      }                    }                  else if (this.inChunk)                  {                      for (; i < offset + count; i++)                      {                          this.chunkRead++;                            if (chunkRead == this.chunkLength)                          {                              this.inChunk = false;                              this.inChunkTrailingCrLf = true;                              this.chunkRead = 0;                              break;                          }                      }                  }              }
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,FromHex,The following statement contains a magic number: if (b >= 48 && b <= 57)                  return b - 48;
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,FromHex,The following statement contains a magic number: if (b >= 48 && b <= 57)                  return b - 48;
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,FromHex,The following statement contains a magic number: if (b >= 48 && b <= 57)                  return b - 48;
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,FromHex,The following statement contains a magic number: if (b >= 65 && b <= 70)                  return 10 + (b - 65);
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,FromHex,The following statement contains a magic number: if (b >= 65 && b <= 70)                  return 10 + (b - 65);
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,FromHex,The following statement contains a magic number: if (b >= 65 && b <= 70)                  return 10 + (b - 65);
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,FromHex,The following statement contains a magic number: if (b >= 65 && b <= 70)                  return 10 + (b - 65);
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,FromHex,The following statement contains a magic number: if (b >= 97 && b <= 102)                  return 10 + (b - 97);
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,FromHex,The following statement contains a magic number: if (b >= 97 && b <= 102)                  return 10 + (b - 97);
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,FromHex,The following statement contains a magic number: if (b >= 97 && b <= 102)                  return 10 + (b - 97);
Magic Number,Switchboard.Server.Utils,ChunkedStream,C:\repos\niik_switchboard\Switchboard.Server\Utils\ChunkedStream.cs,FromHex,The following statement contains a magic number: if (b >= 97 && b <= 102)                  return 10 + (b - 97);
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,HttpResponseParser,The following statement contains a magic number: this.parseBuffer = new byte[64 * 1024];
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,HttpResponseParser,The following statement contains a magic number: this.parseBuffer = new byte[64 * 1024];
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,Execute,The following statement contains a magic number: int endOfHeaders = IndexOf(parseBuffer' 0' parseBufferWritten' 13' 10' 13' 10);
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,Execute,The following statement contains a magic number: int endOfHeaders = IndexOf(parseBuffer' 0' parseBufferWritten' 13' 10' 13' 10);
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,Execute,The following statement contains a magic number: int endOfHeaders = IndexOf(parseBuffer' 0' parseBufferWritten' 13' 10' 13' 10);
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,Execute,The following statement contains a magic number: int endOfHeaders = IndexOf(parseBuffer' 0' parseBufferWritten' 13' 10' 13' 10);
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,Execute,The following statement contains a magic number: if (endOfHeaders >= 0)              {                  ParseHeaders(parseBuffer' 0' endOfHeaders + 4);                    this.inHeaders = false;                    if (endOfHeaders + 4 < parseBufferWritten)                      this.Execute(parseBuffer' endOfHeaders + 4' parseBufferWritten - (endOfHeaders + 4));                  else                  {                      if (!hasEntityData)                      {                          this.isCompleted = true;                          this.handler.OnResponseEnd();                          return;                      }                  }              }
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,Execute,The following statement contains a magic number: if (endOfHeaders >= 0)              {                  ParseHeaders(parseBuffer' 0' endOfHeaders + 4);                    this.inHeaders = false;                    if (endOfHeaders + 4 < parseBufferWritten)                      this.Execute(parseBuffer' endOfHeaders + 4' parseBufferWritten - (endOfHeaders + 4));                  else                  {                      if (!hasEntityData)                      {                          this.isCompleted = true;                          this.handler.OnResponseEnd();                          return;                      }                  }              }
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,Execute,The following statement contains a magic number: if (endOfHeaders >= 0)              {                  ParseHeaders(parseBuffer' 0' endOfHeaders + 4);                    this.inHeaders = false;                    if (endOfHeaders + 4 < parseBufferWritten)                      this.Execute(parseBuffer' endOfHeaders + 4' parseBufferWritten - (endOfHeaders + 4));                  else                  {                      if (!hasEntityData)                      {                          this.isCompleted = true;                          this.handler.OnResponseEnd();                          return;                      }                  }              }
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,Execute,The following statement contains a magic number: if (endOfHeaders >= 0)              {                  ParseHeaders(parseBuffer' 0' endOfHeaders + 4);                    this.inHeaders = false;                    if (endOfHeaders + 4 < parseBufferWritten)                      this.Execute(parseBuffer' endOfHeaders + 4' parseBufferWritten - (endOfHeaders + 4));                  else                  {                      if (!hasEntityData)                      {                          this.isCompleted = true;                          this.handler.OnResponseEnd();                          return;                      }                  }              }
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,ParseHeaderLine,The following statement contains a magic number: var parts = line.Split(new[] { ':' }' 2);
Magic Number,Switchboard.Server.Utils.HttpParser,HttpResponseParser,C:\repos\niik_switchboard\Switchboard.Server\Utils\HttpParser\HttpResponseParser.cs,ParseHeaderLine,The following statement contains a magic number: if (parts.Length != 2)                  throw new FormatException("Malformed header line");
Missing Default,Switchboard.Server.Extensions,TaskExtensions,C:\repos\niik_switchboard\Switchboard.Server\Extensions\TaskExtensions.cs,MarshalTaskResults,The following switch statement is missing a default case: switch (source.Status)              {                  case TaskStatus.Faulted:                      proxy.TrySetException(source.Exception);                      break;                  case TaskStatus.Canceled:                      proxy.TrySetCanceled();                      break;                  case TaskStatus.RanToCompletion:                      Task<TResult> castedSource = source as Task<TResult>;                      proxy.TrySetResult(                          castedSource == null ? default(TResult) : // source is a Task                              castedSource.Result); // source is a Task<TResult>                      break;              }
