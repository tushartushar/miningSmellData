Implementation smell,Namespace,Class,File,Method,Description
Long Method,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The method has 183 lines of code.
Long Method,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The method has 156 lines of code.
Long Method,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The method has 266 lines of code.
Long Method,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The method has 143 lines of code.
Long Method,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The method has 1245 lines of code.
Long Method,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The method has 117 lines of code.
Complex Method,ThePool,CalendarEditingControl,C:\repos\solunar66_ThePool\ThePool\CalendarColumn.cs,EditingControlWantsInputKey,Cyclomatic complexity of the method is 9
Complex Method,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,Cyclomatic complexity of the method is 79
Complex Method,ThePool,Form_Debt,C:\repos\solunar66_ThePool\ThePool\Form_Debt.cs,button_save_Click,Cyclomatic complexity of the method is 8
Complex Method,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,Cyclomatic complexity of the method is 15
Complex Method,ThePool,Form_Project,C:\repos\solunar66_ThePool\ThePool\Form_Project.cs,button_save_Click,Cyclomatic complexity of the method is 8
Complex Method,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,Cyclomatic complexity of the method is 60
Complex Method,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,Cyclomatic complexity of the method is 114
Complex Method,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,Cyclomatic complexity of the method is 52
Complex Method,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_updatedebt_Click,Cyclomatic complexity of the method is 9
Complex Method,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,Cyclomatic complexity of the method is 12
Complex Method,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,Cyclomatic complexity of the method is 12
Complex Method,ThePool,Xml,C:\repos\solunar66_ThePool\ThePool\XmlAccess.cs,UpdateCalendar,Cyclomatic complexity of the method is 12
Long Statement,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The length of the statement  "			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0]; " is 129.
Long Statement,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The length of the statement  "			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type"; " is 121.
Long Statement,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The length of the statement  "			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value"; " is 120.
Long Statement,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The length of the statement  "			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type); " is 145.
Long Statement,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The length of the statement  "				(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0]; " is 129.
Long Statement,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The length of the statement  "				(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type"; " is 121.
Long Statement,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The length of the statement  "				(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value"; " is 120.
Long Statement,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The length of the statement  "				(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type; " is 121.
Long Statement,ThePool,Form_Debt,C:\repos\solunar66_ThePool\ThePool\Form_Debt.cs,button_delete_Click,The length of the statement  "	if (DialogResult.Yes == MessageBox.Show ("请确认删除负债信息: \"" + textBox_name.Text + "\"\n\n(删除负债将影响以往的负债记录' 建议保留负债信息' 并更新该负债周期截止时间)"' "删除负债"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 189.
Long Statement,ThePool,Form_Debt,C:\repos\solunar66_ThePool\ThePool\Form_Debt.cs,button_save_Click,The length of the statement  "			if (DialogResult.Yes == MessageBox.Show ("请确认更新负债信息: \"" + debt.name + "\""' "更新负债"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 137.
Long Statement,ThePool,Form_Debt,C:\repos\solunar66_ThePool\ThePool\Form_Debt.cs,button_save_Click,The length of the statement  "	if (DialogResult.Yes == MessageBox.Show ("请确认添加负债: \"" + debt.name + "\""' "新建负债"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 135.
Long Statement,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_delete_Click,The length of the statement  "	if (DialogResult.Yes == MessageBox.Show ("请确认删除股东信息: \"" + textBox_name.Text + "\"\n\n(删除股东将影响其以往的投资记录' 建议保留股东信息' 并更新该股东投资周期截止时间)"' "删除股东"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 192.
Long Statement,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The length of the statement  "			if (DialogResult.Yes == MessageBox.Show ("请确认更新股东信息: \"" + par.name + "\""' "更新股东信息"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 138.
Long Statement,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The length of the statement  "	if (DialogResult.Yes == MessageBox.Show ("请确认添加股东: \"" + partner.name + "\""' "新添加股东"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 139.
Long Statement,ThePool,Form_Project,C:\repos\solunar66_ThePool\ThePool\Form_Project.cs,button_delete_Click,The length of the statement  "	if (DialogResult.Yes == MessageBox.Show ("请确认删除项目信息: \"" + textBox_name.Text + "\"\n\n(删除项目将影响以往的投资记录' 建议保留项目信息' 并更新该项目周期截止时间)"' "删除项目"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 189.
Long Statement,ThePool,Form_Project,C:\repos\solunar66_ThePool\ThePool\Form_Project.cs,button_save_Click,The length of the statement  "			if (DialogResult.Yes == MessageBox.Show ("请确认更新项目信息: \"" + project.name + "\""' "更新项目"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 140.
Long Statement,ThePool,Form_Project,C:\repos\solunar66_ThePool\ThePool\Form_Project.cs,button_save_Click,The length of the statement  "	if (DialogResult.Yes == MessageBox.Show ("请确认添加项目: \"" + proj.name + "\""' "新建项目"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 135.
Long Statement,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The length of the statement  "						parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month); " is 125.
Long Statement,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The length of the statement  "							parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel); " is 144.
Long Statement,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The length of the statement  "					projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month); " is 144.
Long Statement,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The length of the statement  "					projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel); " is 158.
Long Statement,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,zedGraph_MouseClick,The length of the statement  "			Form_Calendar calendar = new Form_Calendar (new DateTime (dateTimePicker_year.Value.Year' (int)tmpCurve [tmpNearest].X' 1)); " is 124.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The length of the statement  "						parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month); " is 125.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The length of the statement  "							parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel); " is 144.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The length of the statement  "					projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month); " is 144.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The length of the statement  "					projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel); " is 158.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The length of the statement  "					if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) { " is 176.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The length of the statement  "	label1.Font = new System.Drawing.Font ("SimSun"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(134))); " is 134.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The length of the statement  "	label18.Font = new System.Drawing.Font ("SimSun"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(134))); " is 135.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The length of the statement  "	label23.Font = new System.Drawing.Font ("SimSun"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(134))); " is 135.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The length of the statement  "	label25.Font = new System.Drawing.Font ("SimSun"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(134))); " is 135.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The length of the statement  "	label26.Font = new System.Drawing.Font ("SimSun"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(134))); " is 135.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The length of the statement  "			((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ()); " is 121.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The length of the statement  "			((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ()); " is 125.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The length of the statement  "			((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ()); " is 121.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The length of the statement  "							incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)"); " is 165.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_save_Click,The length of the statement  "	DateTime curMonth = DateTime.Parse (((((sender as Button).Parent as TabPage).Parent as TabControl).Parent as GroupBox).Text); " is 125.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_save_Click,The length of the statement  "	if (DialogResult.Yes == MessageBox.Show ("请确认添加项目: \"" + project.name + "\""' "新建项目"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 138.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_stopinvest_Click,The length of the statement  "			if (DialogResult.Yes == MessageBox.Show ("确认终止投资项目\"" + project.name + "\"?"' "终止项目"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 138.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_stopinvest_Click,The length of the statement  "	MessageBox.Show ("未找到投资项\"" + (gb.Controls ["textBox_nameinvest"] as TextBox).Text + "\"!请从左侧列表中选取!"' "停止项目"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 154.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_updateinvest_Click,The length of the statement  "			if (DialogResult.Yes == MessageBox.Show ("请确认更新项目: \"" + p.name + "\"\n\n注：更新的项目信息会影响此前的资金量计算，请谨慎操作\n\n建议: 若调整投资额、收益率、付息周期、付息日，请中止当前项目并新建项目"' "更新项目"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 202.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_stopdebt_Click,The length of the statement  "			if (DialogResult.Yes == MessageBox.Show ("确认终止生活支出\"" + debt.name + "\"?"' "终止生活支出"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 137.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_stopdebt_Click,The length of the statement  "	MessageBox.Show ("未找到生活支出\"" + (gb.Controls ["textBox_namedebt"] as TextBox).Text + "\"!请从左侧列表中选取!"' "停止项目"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 153.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_updatedebt_Click,The length of the statement  "			if (DialogResult.Yes == MessageBox.Show ("请确认更新生活支出: \"" + d.name + "\"\n\n注：更新的生活支出信息会影响此前的资金量计算，请谨慎操作\n\n建议: 若调整生活支出金额、周期、生效日，请中止当前生活支出并新建生活支出"' "更新生活支出"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 209.
Long Statement,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_updatedebt_Click,The length of the statement  "	if (DialogResult.Yes == MessageBox.Show ("请确认保存新生活支出: \"" + name + "\""' "新建生活支出"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) { " is 135.
Long Statement,ThePool,Xml,C:\repos\solunar66_ThePool\ThePool\XmlAccess.cs,LoadCalendar,The length of the statement  "				calendar.date = new DateTime (int.Parse (year.Attributes ["value"].Value)' int.Parse (month.Attributes ["value"].Value)' int.Parse (day.Attributes ["value"].Value)); " is 165.
Complex Conditional,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,button_save_Click,The conditional expression  "!row.ReadOnly && !row.IsNewRow && row.Cells [0].Value != null && row.Cells [1].Value != null"  is complex.
Complex Conditional,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_save_Click,The conditional expression  "name == "" || volume == 0 || rate == 0 || cycle == -1 || day == -1"  is complex.
Complex Conditional,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_updateinvest_Click,The conditional expression  "name == "" || volume == 0 || rate == 0 || cycle == -1 || day == -1"  is complex.
Complex Conditional,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_updatedebt_Click,The conditional expression  "name == "" || volume <= 0 || cycle == -1 || day == -1"  is complex.
Empty Catch Block,ThePool,CalendarCell,C:\repos\solunar66_ThePool\ThePool\CalendarColumn.cs,InitializeEditingControl,The method has an empty catch block.
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar,The following statement contains a magic number: dateControl.FontChinaDay = new Font ("宋体"' 7);  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar,The following statement contains a magic number: currentDate = new DateTime (1000' 1' 1);  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (currentDate.Year != 1000) {  	curDate = currentDate;  	currentDate = new DateTime (1000' 1' 1);  }  else  	curDate = dateControl.CurrentDateTime;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (currentDate.Year != 1000) {  	curDate = currentDate;  	currentDate = new DateTime (1000' 1' 1);  }  else  	curDate = dateControl.CurrentDateTime;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: currentDate = new DateTime (1000' 1' 1);  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in monthInfo) {  	if (calendar.date == curDate) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in monthInfo) {  	if (calendar.date == curDate) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in monthInfo) {  	if (calendar.date == curDate) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in monthInfo) {  	if (calendar.date == curDate) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in monthInfo) {  	if (calendar.date == curDate) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in monthInfo) {  	if (calendar.date == curDate) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in monthInfo) {  	if (calendar.date == curDate) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in monthInfo) {  	if (calendar.date == curDate) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: (dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: (dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: (dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: (dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)(((Flow)calendar.flows [0]).type);  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = ((Flow)calendar.flows [0]).volume;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = ((Flow)calendar.flows [0]).comment;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].ReadOnly = true;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in Form_Main.ar_Calendars) {  	if (calendar.date == curDate) {  		foreach (Flow flow in calendar.flows) {  			dataGridView_info.Rows.Add ();  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  		}  		break;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in Form_Main.ar_Calendars) {  	if (calendar.date == curDate) {  		foreach (Flow flow in calendar.flows) {  			dataGridView_info.Rows.Add ();  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  		}  		break;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in Form_Main.ar_Calendars) {  	if (calendar.date == curDate) {  		foreach (Flow flow in calendar.flows) {  			dataGridView_info.Rows.Add ();  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  		}  		break;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in Form_Main.ar_Calendars) {  	if (calendar.date == curDate) {  		foreach (Flow flow in calendar.flows) {  			dataGridView_info.Rows.Add ();  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  		}  		break;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in Form_Main.ar_Calendars) {  	if (calendar.date == curDate) {  		foreach (Flow flow in calendar.flows) {  			dataGridView_info.Rows.Add ();  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  		}  		break;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in Form_Main.ar_Calendars) {  	if (calendar.date == curDate) {  		foreach (Flow flow in calendar.flows) {  			dataGridView_info.Rows.Add ();  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  		}  		break;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Calendar calendar in Form_Main.ar_Calendars) {  	if (calendar.date == curDate) {  		foreach (Flow flow in calendar.flows) {  			dataGridView_info.Rows.Add ();  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  			dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  		}  		break;  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	foreach (Flow flow in calendar.flows) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  	}  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	foreach (Flow flow in calendar.flows) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  	}  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	foreach (Flow flow in calendar.flows) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  	}  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	foreach (Flow flow in calendar.flows) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  	}  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	foreach (Flow flow in calendar.flows) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  	}  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	foreach (Flow flow in calendar.flows) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  	}  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: if (calendar.date == curDate) {  	foreach (Flow flow in calendar.flows) {  		dataGridView_info.Rows.Add ();  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  		dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  	}  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Flow flow in calendar.flows) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Flow flow in calendar.flows) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Flow flow in calendar.flows) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Flow flow in calendar.flows) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Flow flow in calendar.flows) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Flow flow in calendar.flows) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: foreach (Flow flow in calendar.flows) {  	dataGridView_info.Rows.Add ();  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  	dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: (dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DataSource = dsType.Tables [0];  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: (dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).DisplayMember = "type";  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: (dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).ValueMember = "value";  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: (dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [0] as DataGridViewComboBoxCell).Value = (int)flow.type;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [1].Value = flow.volume;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,dateControl_MouseDown,The following statement contains a magic number: dataGridView_info.Rows [dataGridView_info.Rows.Count - 2].Cells [2].Value = flow.comment;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Partner partner in Form_Main.ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < start && fund.end >= start) {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			case Cycle.undefined:  			default:  				intervel = 0;  				break;  			}  			if (intervel == 0)  				continue;  			else {  				if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  					Calendar c = new Calendar ();  					c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  					c.flows = new ArrayList ();  					Flow flow = new Flow ();  					flow.type = FlowType.payout;  					flow.volume = fund.volume * fund.rate * intervel / 12f;  					flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  					c.flows.Add (flow);  					monthInfo.Add (c);  				}  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Partner partner in Form_Main.ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < start && fund.end >= start) {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			case Cycle.undefined:  			default:  				intervel = 0;  				break;  			}  			if (intervel == 0)  				continue;  			else {  				if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  					Calendar c = new Calendar ();  					c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  					c.flows = new ArrayList ();  					Flow flow = new Flow ();  					flow.type = FlowType.payout;  					flow.volume = fund.volume * fund.rate * intervel / 12f;  					flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  					c.flows.Add (flow);  					monthInfo.Add (c);  				}  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Partner partner in Form_Main.ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < start && fund.end >= start) {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			case Cycle.undefined:  			default:  				intervel = 0;  				break;  			}  			if (intervel == 0)  				continue;  			else {  				if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  					Calendar c = new Calendar ();  					c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  					c.flows = new ArrayList ();  					Flow flow = new Flow ();  					flow.type = FlowType.payout;  					flow.volume = fund.volume * fund.rate * intervel / 12f;  					flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  					c.flows.Add (flow);  					monthInfo.Add (c);  				}  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Partner partner in Form_Main.ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < start && fund.end >= start) {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			case Cycle.undefined:  			default:  				intervel = 0;  				break;  			}  			if (intervel == 0)  				continue;  			else {  				if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  					Calendar c = new Calendar ();  					c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  					c.flows = new ArrayList ();  					Flow flow = new Flow ();  					flow.type = FlowType.payout;  					flow.volume = fund.volume * fund.rate * intervel / 12f;  					flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  					c.flows.Add (flow);  					monthInfo.Add (c);  				}  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < start && fund.end >= start) {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = fund.volume * fund.rate * intervel / 12f;  				flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < start && fund.end >= start) {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = fund.volume * fund.rate * intervel / 12f;  				flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < start && fund.end >= start) {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = fund.volume * fund.rate * intervel / 12f;  				flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < start && fund.end >= start) {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = fund.volume * fund.rate * intervel / 12f;  				flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (fund.start < start && fund.end >= start) {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = fund.volume * fund.rate * intervel / 12f;  			flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (fund.start < start && fund.end >= start) {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = fund.volume * fund.rate * intervel / 12f;  			flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (fund.start < start && fund.end >= start) {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = fund.volume * fund.rate * intervel / 12f;  			flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (fund.start < start && fund.end >= start) {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = fund.volume * fund.rate * intervel / 12f;  			flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: switch (fund.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  case Cycle.undefined:  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: switch (fund.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  case Cycle.undefined:  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: switch (fund.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  case Cycle.undefined:  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (intervel == 0)  	continue;  else {  	if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  		Calendar c = new Calendar ();  		c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  		c.flows = new ArrayList ();  		Flow flow = new Flow ();  		flow.type = FlowType.payout;  		flow.volume = fund.volume * fund.rate * intervel / 12f;  		flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  		c.flows.Add (flow);  		monthInfo.Add (c);  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (((toMonth.Year - fund.start.Year) * 12 + toMonth.Month - fund.start.Month) % intervel == 0) {  	Calendar c = new Calendar ();  	c.date = new DateTime (toMonth.Year' toMonth.Month' fund.start.Day);  	c.flows = new ArrayList ();  	Flow flow = new Flow ();  	flow.type = FlowType.payout;  	flow.volume = fund.volume * fund.rate * intervel / 12f;  	flow.comment = "股东\"" + partner.name + "\"资金(" + fund.volume + "万)结息";  	c.flows.Add (flow);  	monthInfo.Add (c);  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Project project in Form_Main.ar_Projects) {  	if (project.start < start && project.end >= start) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - project.start.Year) * 12 + toMonth.Month - project.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' project.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.income;  				flow.volume = project.volume * project.rate * intervel / 12f;  				flow.comment = "投资\"" + project.name + "\"资金(" + project.volume + "万)结息";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Project project in Form_Main.ar_Projects) {  	if (project.start < start && project.end >= start) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - project.start.Year) * 12 + toMonth.Month - project.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' project.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.income;  				flow.volume = project.volume * project.rate * intervel / 12f;  				flow.comment = "投资\"" + project.name + "\"资金(" + project.volume + "万)结息";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Project project in Form_Main.ar_Projects) {  	if (project.start < start && project.end >= start) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - project.start.Year) * 12 + toMonth.Month - project.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' project.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.income;  				flow.volume = project.volume * project.rate * intervel / 12f;  				flow.comment = "投资\"" + project.name + "\"资金(" + project.volume + "万)结息";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Project project in Form_Main.ar_Projects) {  	if (project.start < start && project.end >= start) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - project.start.Year) * 12 + toMonth.Month - project.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' project.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.income;  				flow.volume = project.volume * project.rate * intervel / 12f;  				flow.comment = "投资\"" + project.name + "\"资金(" + project.volume + "万)结息";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (project.start < start && project.end >= start) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - project.start.Year) * 12 + toMonth.Month - project.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' project.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.income;  			flow.volume = project.volume * project.rate * intervel / 12f;  			flow.comment = "投资\"" + project.name + "\"资金(" + project.volume + "万)结息";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (project.start < start && project.end >= start) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - project.start.Year) * 12 + toMonth.Month - project.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' project.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.income;  			flow.volume = project.volume * project.rate * intervel / 12f;  			flow.comment = "投资\"" + project.name + "\"资金(" + project.volume + "万)结息";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (project.start < start && project.end >= start) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - project.start.Year) * 12 + toMonth.Month - project.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' project.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.income;  			flow.volume = project.volume * project.rate * intervel / 12f;  			flow.comment = "投资\"" + project.name + "\"资金(" + project.volume + "万)结息";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (project.start < start && project.end >= start) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - project.start.Year) * 12 + toMonth.Month - project.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' project.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.income;  			flow.volume = project.volume * project.rate * intervel / 12f;  			flow.comment = "投资\"" + project.name + "\"资金(" + project.volume + "万)结息";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  case Cycle.undefined:  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  case Cycle.undefined:  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  case Cycle.undefined:  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (intervel == 0)  	continue;  else {  	if (((toMonth.Year - project.start.Year) * 12 + toMonth.Month - project.start.Month) % intervel == 0) {  		Calendar c = new Calendar ();  		c.date = new DateTime (toMonth.Year' toMonth.Month' project.start.Day);  		c.flows = new ArrayList ();  		Flow flow = new Flow ();  		flow.type = FlowType.income;  		flow.volume = project.volume * project.rate * intervel / 12f;  		flow.comment = "投资\"" + project.name + "\"资金(" + project.volume + "万)结息";  		c.flows.Add (flow);  		monthInfo.Add (c);  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (((toMonth.Year - project.start.Year) * 12 + toMonth.Month - project.start.Month) % intervel == 0) {  	Calendar c = new Calendar ();  	c.date = new DateTime (toMonth.Year' toMonth.Month' project.start.Day);  	c.flows = new ArrayList ();  	Flow flow = new Flow ();  	flow.type = FlowType.income;  	flow.volume = project.volume * project.rate * intervel / 12f;  	flow.comment = "投资\"" + project.name + "\"资金(" + project.volume + "万)结息";  	c.flows.Add (flow);  	monthInfo.Add (c);  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Debt debt in Form_Main.ar_Debts) {  	if (debt.start < start && debt.end >= start) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - debt.start.Year) * 12 + toMonth.Month - debt.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' debt.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = debt.volume;  				flow.comment = "生活支出\"" + debt.name + "\"资金(" + debt.volume + "万)支出";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Debt debt in Form_Main.ar_Debts) {  	if (debt.start < start && debt.end >= start) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - debt.start.Year) * 12 + toMonth.Month - debt.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' debt.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = debt.volume;  				flow.comment = "生活支出\"" + debt.name + "\"资金(" + debt.volume + "万)支出";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Debt debt in Form_Main.ar_Debts) {  	if (debt.start < start && debt.end >= start) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - debt.start.Year) * 12 + toMonth.Month - debt.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' debt.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = debt.volume;  				flow.comment = "生活支出\"" + debt.name + "\"资金(" + debt.volume + "万)支出";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: foreach (Debt debt in Form_Main.ar_Debts) {  	if (debt.start < start && debt.end >= start) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		case Cycle.undefined:  		default:  			intervel = 0;  			break;  		}  		if (intervel == 0)  			continue;  		else {  			if (((toMonth.Year - debt.start.Year) * 12 + toMonth.Month - debt.start.Month) % intervel == 0) {  				Calendar c = new Calendar ();  				c.date = new DateTime (toMonth.Year' toMonth.Month' debt.start.Day);  				c.flows = new ArrayList ();  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = debt.volume;  				flow.comment = "生活支出\"" + debt.name + "\"资金(" + debt.volume + "万)支出";  				c.flows.Add (flow);  				monthInfo.Add (c);  			}  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (debt.start < start && debt.end >= start) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - debt.start.Year) * 12 + toMonth.Month - debt.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' debt.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = debt.volume;  			flow.comment = "生活支出\"" + debt.name + "\"资金(" + debt.volume + "万)支出";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (debt.start < start && debt.end >= start) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - debt.start.Year) * 12 + toMonth.Month - debt.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' debt.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = debt.volume;  			flow.comment = "生活支出\"" + debt.name + "\"资金(" + debt.volume + "万)支出";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (debt.start < start && debt.end >= start) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - debt.start.Year) * 12 + toMonth.Month - debt.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' debt.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = debt.volume;  			flow.comment = "生活支出\"" + debt.name + "\"资金(" + debt.volume + "万)支出";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (debt.start < start && debt.end >= start) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	case Cycle.undefined:  	default:  		intervel = 0;  		break;  	}  	if (intervel == 0)  		continue;  	else {  		if (((toMonth.Year - debt.start.Year) * 12 + toMonth.Month - debt.start.Month) % intervel == 0) {  			Calendar c = new Calendar ();  			c.date = new DateTime (toMonth.Year' toMonth.Month' debt.start.Day);  			c.flows = new ArrayList ();  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = debt.volume;  			flow.comment = "生活支出\"" + debt.name + "\"资金(" + debt.volume + "万)支出";  			c.flows.Add (flow);  			monthInfo.Add (c);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  case Cycle.undefined:  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  case Cycle.undefined:  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  case Cycle.undefined:  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (intervel == 0)  	continue;  else {  	if (((toMonth.Year - debt.start.Year) * 12 + toMonth.Month - debt.start.Month) % intervel == 0) {  		Calendar c = new Calendar ();  		c.date = new DateTime (toMonth.Year' toMonth.Month' debt.start.Day);  		c.flows = new ArrayList ();  		Flow flow = new Flow ();  		flow.type = FlowType.payout;  		flow.volume = debt.volume;  		flow.comment = "生活支出\"" + debt.name + "\"资金(" + debt.volume + "万)支出";  		c.flows.Add (flow);  		monthInfo.Add (c);  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The following statement contains a magic number: if (((toMonth.Year - debt.start.Year) * 12 + toMonth.Month - debt.start.Month) % intervel == 0) {  	Calendar c = new Calendar ();  	c.date = new DateTime (toMonth.Year' toMonth.Month' debt.start.Day);  	c.flows = new ArrayList ();  	Flow flow = new Flow ();  	flow.type = FlowType.payout;  	flow.volume = debt.volume;  	flow.comment = "生活支出\"" + debt.name + "\"资金(" + debt.volume + "万)支出";  	c.flows.Add (flow);  	monthInfo.Add (c);  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_info.Rows) {  	if (!row.ReadOnly && !row.IsNewRow && row.Cells [0].Value != null && row.Cells [1].Value != null) {  		double volume;  		if (!double.TryParse (row.Cells [1].Value.ToString ()' out volume)) {  			MessageBox.Show ("输入数据异常!"' ""' MessageBoxButtons.OK' MessageBoxIcon.Error);  			return;  		}  		else {  			Flow flow = new Flow ();  			flow.type = ((DataGridViewComboBoxCell)row.Cells [0]).Value.ToString () == "0" ? FlowType.income : FlowType.payout;  			flow.volume = volume;  			flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  			calendar.flows.Add (flow);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_info.Rows) {  	if (!row.ReadOnly && !row.IsNewRow && row.Cells [0].Value != null && row.Cells [1].Value != null) {  		double volume;  		if (!double.TryParse (row.Cells [1].Value.ToString ()' out volume)) {  			MessageBox.Show ("输入数据异常!"' ""' MessageBoxButtons.OK' MessageBoxIcon.Error);  			return;  		}  		else {  			Flow flow = new Flow ();  			flow.type = ((DataGridViewComboBoxCell)row.Cells [0]).Value.ToString () == "0" ? FlowType.income : FlowType.payout;  			flow.volume = volume;  			flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  			calendar.flows.Add (flow);  		}  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,button_save_Click,The following statement contains a magic number: if (!row.ReadOnly && !row.IsNewRow && row.Cells [0].Value != null && row.Cells [1].Value != null) {  	double volume;  	if (!double.TryParse (row.Cells [1].Value.ToString ()' out volume)) {  		MessageBox.Show ("输入数据异常!"' ""' MessageBoxButtons.OK' MessageBoxIcon.Error);  		return;  	}  	else {  		Flow flow = new Flow ();  		flow.type = ((DataGridViewComboBoxCell)row.Cells [0]).Value.ToString () == "0" ? FlowType.income : FlowType.payout;  		flow.volume = volume;  		flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  		calendar.flows.Add (flow);  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,button_save_Click,The following statement contains a magic number: if (!row.ReadOnly && !row.IsNewRow && row.Cells [0].Value != null && row.Cells [1].Value != null) {  	double volume;  	if (!double.TryParse (row.Cells [1].Value.ToString ()' out volume)) {  		MessageBox.Show ("输入数据异常!"' ""' MessageBoxButtons.OK' MessageBoxIcon.Error);  		return;  	}  	else {  		Flow flow = new Flow ();  		flow.type = ((DataGridViewComboBoxCell)row.Cells [0]).Value.ToString () == "0" ? FlowType.income : FlowType.payout;  		flow.volume = volume;  		flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  		calendar.flows.Add (flow);  	}  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,button_save_Click,The following statement contains a magic number: if (!double.TryParse (row.Cells [1].Value.ToString ()' out volume)) {  	MessageBox.Show ("输入数据异常!"' ""' MessageBoxButtons.OK' MessageBoxIcon.Error);  	return;  }  else {  	Flow flow = new Flow ();  	flow.type = ((DataGridViewComboBoxCell)row.Cells [0]).Value.ToString () == "0" ? FlowType.income : FlowType.payout;  	flow.volume = volume;  	flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  	calendar.flows.Add (flow);  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,button_save_Click,The following statement contains a magic number: if (!double.TryParse (row.Cells [1].Value.ToString ()' out volume)) {  	MessageBox.Show ("输入数据异常!"' ""' MessageBoxButtons.OK' MessageBoxIcon.Error);  	return;  }  else {  	Flow flow = new Flow ();  	flow.type = ((DataGridViewComboBoxCell)row.Cells [0]).Value.ToString () == "0" ? FlowType.income : FlowType.payout;  	flow.volume = volume;  	flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  	calendar.flows.Add (flow);  }  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,button_save_Click,The following statement contains a magic number: flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  
Magic Number,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,button_save_Click,The following statement contains a magic number: flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,Form_Partner,The following statement contains a magic number: dsCycle.Tables [0].Rows.Add ("每季度"' 2);  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,Form_Partner,The following statement contains a magic number: dsCycle.Tables [0].Rows.Add ("每半年"' 3);  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,Form_Partner,The following statement contains a magic number: dsCycle.Tables [0].Rows.Add ("每年"' 4);  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,Form_Partner,The following statement contains a magic number: start.Width = 85;  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,Form_Partner,The following statement contains a magic number: end.Width = 85;  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,Form_Partner,The following statement contains a magic number: dataGridView_volume.Columns.Insert (3' start);  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,Form_Partner,The following statement contains a magic number: dataGridView_volume.Columns.Insert (4' end);  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Partner partner in Form_Main.ar_Partners) {  	if (partner.name == listBox_name.SelectedItem.ToString ()) {  		textBox_name.Text = partner.name;  		textBox_phone.Text = partner.telephone;  		textBox_comment.Text = partner.comment;  		dataGridView_volume.Rows.Clear ();  		foreach (Fund fund in partner.funds) {  			dataGridView_volume.Rows.Add ();  			int index = dataGridView_volume.Rows.Count - 2;  			dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  			dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  			dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  			dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  		}  		return;  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Partner partner in Form_Main.ar_Partners) {  	if (partner.name == listBox_name.SelectedItem.ToString ()) {  		textBox_name.Text = partner.name;  		textBox_phone.Text = partner.telephone;  		textBox_comment.Text = partner.comment;  		dataGridView_volume.Rows.Clear ();  		foreach (Fund fund in partner.funds) {  			dataGridView_volume.Rows.Add ();  			int index = dataGridView_volume.Rows.Count - 2;  			dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  			dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  			dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  			dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  		}  		return;  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Partner partner in Form_Main.ar_Partners) {  	if (partner.name == listBox_name.SelectedItem.ToString ()) {  		textBox_name.Text = partner.name;  		textBox_phone.Text = partner.telephone;  		textBox_comment.Text = partner.comment;  		dataGridView_volume.Rows.Clear ();  		foreach (Fund fund in partner.funds) {  			dataGridView_volume.Rows.Add ();  			int index = dataGridView_volume.Rows.Count - 2;  			dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  			dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  			dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  			dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  		}  		return;  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Partner partner in Form_Main.ar_Partners) {  	if (partner.name == listBox_name.SelectedItem.ToString ()) {  		textBox_name.Text = partner.name;  		textBox_phone.Text = partner.telephone;  		textBox_comment.Text = partner.comment;  		dataGridView_volume.Rows.Clear ();  		foreach (Fund fund in partner.funds) {  			dataGridView_volume.Rows.Add ();  			int index = dataGridView_volume.Rows.Count - 2;  			dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  			dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  			dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  			dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  		}  		return;  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Partner partner in Form_Main.ar_Partners) {  	if (partner.name == listBox_name.SelectedItem.ToString ()) {  		textBox_name.Text = partner.name;  		textBox_phone.Text = partner.telephone;  		textBox_comment.Text = partner.comment;  		dataGridView_volume.Rows.Clear ();  		foreach (Fund fund in partner.funds) {  			dataGridView_volume.Rows.Add ();  			int index = dataGridView_volume.Rows.Count - 2;  			dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  			dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  			dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  			dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  		}  		return;  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Partner partner in Form_Main.ar_Partners) {  	if (partner.name == listBox_name.SelectedItem.ToString ()) {  		textBox_name.Text = partner.name;  		textBox_phone.Text = partner.telephone;  		textBox_comment.Text = partner.comment;  		dataGridView_volume.Rows.Clear ();  		foreach (Fund fund in partner.funds) {  			dataGridView_volume.Rows.Add ();  			int index = dataGridView_volume.Rows.Count - 2;  			dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  			dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  			dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  			dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  		}  		return;  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Partner partner in Form_Main.ar_Partners) {  	if (partner.name == listBox_name.SelectedItem.ToString ()) {  		textBox_name.Text = partner.name;  		textBox_phone.Text = partner.telephone;  		textBox_comment.Text = partner.comment;  		dataGridView_volume.Rows.Clear ();  		foreach (Fund fund in partner.funds) {  			dataGridView_volume.Rows.Add ();  			int index = dataGridView_volume.Rows.Count - 2;  			dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  			dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  			(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  			dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  			dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  		}  		return;  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: if (partner.name == listBox_name.SelectedItem.ToString ()) {  	textBox_name.Text = partner.name;  	textBox_phone.Text = partner.telephone;  	textBox_comment.Text = partner.comment;  	dataGridView_volume.Rows.Clear ();  	foreach (Fund fund in partner.funds) {  		dataGridView_volume.Rows.Add ();  		int index = dataGridView_volume.Rows.Count - 2;  		dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  		dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  		dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  		dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  	}  	return;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: if (partner.name == listBox_name.SelectedItem.ToString ()) {  	textBox_name.Text = partner.name;  	textBox_phone.Text = partner.telephone;  	textBox_comment.Text = partner.comment;  	dataGridView_volume.Rows.Clear ();  	foreach (Fund fund in partner.funds) {  		dataGridView_volume.Rows.Add ();  		int index = dataGridView_volume.Rows.Count - 2;  		dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  		dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  		dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  		dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  	}  	return;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: if (partner.name == listBox_name.SelectedItem.ToString ()) {  	textBox_name.Text = partner.name;  	textBox_phone.Text = partner.telephone;  	textBox_comment.Text = partner.comment;  	dataGridView_volume.Rows.Clear ();  	foreach (Fund fund in partner.funds) {  		dataGridView_volume.Rows.Add ();  		int index = dataGridView_volume.Rows.Count - 2;  		dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  		dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  		dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  		dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  	}  	return;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: if (partner.name == listBox_name.SelectedItem.ToString ()) {  	textBox_name.Text = partner.name;  	textBox_phone.Text = partner.telephone;  	textBox_comment.Text = partner.comment;  	dataGridView_volume.Rows.Clear ();  	foreach (Fund fund in partner.funds) {  		dataGridView_volume.Rows.Add ();  		int index = dataGridView_volume.Rows.Count - 2;  		dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  		dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  		dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  		dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  	}  	return;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: if (partner.name == listBox_name.SelectedItem.ToString ()) {  	textBox_name.Text = partner.name;  	textBox_phone.Text = partner.telephone;  	textBox_comment.Text = partner.comment;  	dataGridView_volume.Rows.Clear ();  	foreach (Fund fund in partner.funds) {  		dataGridView_volume.Rows.Add ();  		int index = dataGridView_volume.Rows.Count - 2;  		dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  		dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  		dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  		dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  	}  	return;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: if (partner.name == listBox_name.SelectedItem.ToString ()) {  	textBox_name.Text = partner.name;  	textBox_phone.Text = partner.telephone;  	textBox_comment.Text = partner.comment;  	dataGridView_volume.Rows.Clear ();  	foreach (Fund fund in partner.funds) {  		dataGridView_volume.Rows.Add ();  		int index = dataGridView_volume.Rows.Count - 2;  		dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  		dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  		dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  		dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  	}  	return;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: if (partner.name == listBox_name.SelectedItem.ToString ()) {  	textBox_name.Text = partner.name;  	textBox_phone.Text = partner.telephone;  	textBox_comment.Text = partner.comment;  	dataGridView_volume.Rows.Clear ();  	foreach (Fund fund in partner.funds) {  		dataGridView_volume.Rows.Add ();  		int index = dataGridView_volume.Rows.Count - 2;  		dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  		dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  		(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  		dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  		dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  	}  	return;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	dataGridView_volume.Rows.Add ();  	int index = dataGridView_volume.Rows.Count - 2;  	dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  	dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  	dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  	dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	dataGridView_volume.Rows.Add ();  	int index = dataGridView_volume.Rows.Count - 2;  	dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  	dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  	dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  	dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	dataGridView_volume.Rows.Add ();  	int index = dataGridView_volume.Rows.Count - 2;  	dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  	dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  	dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  	dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	dataGridView_volume.Rows.Add ();  	int index = dataGridView_volume.Rows.Count - 2;  	dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  	dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  	dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  	dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	dataGridView_volume.Rows.Add ();  	int index = dataGridView_volume.Rows.Count - 2;  	dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  	dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  	dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  	dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	dataGridView_volume.Rows.Add ();  	int index = dataGridView_volume.Rows.Count - 2;  	dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  	dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  	dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  	dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	dataGridView_volume.Rows.Add ();  	int index = dataGridView_volume.Rows.Count - 2;  	dataGridView_volume.Rows [index].Cells [0].Value = fund.volume.ToString ();  	dataGridView_volume.Rows [index].Cells [1].Value = fund.rate.ToString ();  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  	(dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  	dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  	dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: (dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DataSource = dsCycle.Tables [0];  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: (dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).DisplayMember = "name";  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: (dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).ValueMember = "value";  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: (dataGridView_volume.Rows [index].Cells [2] as DataGridViewComboBoxCell).Value = (int)fund.cycle;  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: dataGridView_volume.Rows [index].Cells [3].Value = fund.start;  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_load_Click,The following statement contains a magic number: dataGridView_volume.Rows [index].Cells [4].Value = fund.end;  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_volume.Rows) {  	if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  		Fund fund = new Fund ();  		fund.volume = double.Parse (row.Cells [0].Value.ToString ());  		fund.rate = double.Parse (row.Cells [1].Value.ToString ());  		if (row.Cells [2].Value.ToString () == "0") {  			fund.cycle = Cycle.undefined;  		}  		else if (row.Cells [2].Value.ToString () == "1") {  			fund.cycle = Cycle.monthly;  		}  		else if (row.Cells [2].Value.ToString () == "2") {  			fund.cycle = Cycle.seasonly;  		}  		else if (row.Cells [2].Value.ToString () == "3") {  			fund.cycle = Cycle.halfyearly;  		}  		else if (row.Cells [2].Value.ToString () == "4") {  			fund.cycle = Cycle.yearly;  		}  		else {  			fund.cycle = Cycle.undefined;  		}  		fund.start = (DateTime)row.Cells [3].Value;  		fund.end = (DateTime)row.Cells [4].Value;  		fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  		partner.funds.Add (fund);  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_volume.Rows) {  	if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  		Fund fund = new Fund ();  		fund.volume = double.Parse (row.Cells [0].Value.ToString ());  		fund.rate = double.Parse (row.Cells [1].Value.ToString ());  		if (row.Cells [2].Value.ToString () == "0") {  			fund.cycle = Cycle.undefined;  		}  		else if (row.Cells [2].Value.ToString () == "1") {  			fund.cycle = Cycle.monthly;  		}  		else if (row.Cells [2].Value.ToString () == "2") {  			fund.cycle = Cycle.seasonly;  		}  		else if (row.Cells [2].Value.ToString () == "3") {  			fund.cycle = Cycle.halfyearly;  		}  		else if (row.Cells [2].Value.ToString () == "4") {  			fund.cycle = Cycle.yearly;  		}  		else {  			fund.cycle = Cycle.undefined;  		}  		fund.start = (DateTime)row.Cells [3].Value;  		fund.end = (DateTime)row.Cells [4].Value;  		fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  		partner.funds.Add (fund);  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_volume.Rows) {  	if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  		Fund fund = new Fund ();  		fund.volume = double.Parse (row.Cells [0].Value.ToString ());  		fund.rate = double.Parse (row.Cells [1].Value.ToString ());  		if (row.Cells [2].Value.ToString () == "0") {  			fund.cycle = Cycle.undefined;  		}  		else if (row.Cells [2].Value.ToString () == "1") {  			fund.cycle = Cycle.monthly;  		}  		else if (row.Cells [2].Value.ToString () == "2") {  			fund.cycle = Cycle.seasonly;  		}  		else if (row.Cells [2].Value.ToString () == "3") {  			fund.cycle = Cycle.halfyearly;  		}  		else if (row.Cells [2].Value.ToString () == "4") {  			fund.cycle = Cycle.yearly;  		}  		else {  			fund.cycle = Cycle.undefined;  		}  		fund.start = (DateTime)row.Cells [3].Value;  		fund.end = (DateTime)row.Cells [4].Value;  		fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  		partner.funds.Add (fund);  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_volume.Rows) {  	if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  		Fund fund = new Fund ();  		fund.volume = double.Parse (row.Cells [0].Value.ToString ());  		fund.rate = double.Parse (row.Cells [1].Value.ToString ());  		if (row.Cells [2].Value.ToString () == "0") {  			fund.cycle = Cycle.undefined;  		}  		else if (row.Cells [2].Value.ToString () == "1") {  			fund.cycle = Cycle.monthly;  		}  		else if (row.Cells [2].Value.ToString () == "2") {  			fund.cycle = Cycle.seasonly;  		}  		else if (row.Cells [2].Value.ToString () == "3") {  			fund.cycle = Cycle.halfyearly;  		}  		else if (row.Cells [2].Value.ToString () == "4") {  			fund.cycle = Cycle.yearly;  		}  		else {  			fund.cycle = Cycle.undefined;  		}  		fund.start = (DateTime)row.Cells [3].Value;  		fund.end = (DateTime)row.Cells [4].Value;  		fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  		partner.funds.Add (fund);  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_volume.Rows) {  	if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  		Fund fund = new Fund ();  		fund.volume = double.Parse (row.Cells [0].Value.ToString ());  		fund.rate = double.Parse (row.Cells [1].Value.ToString ());  		if (row.Cells [2].Value.ToString () == "0") {  			fund.cycle = Cycle.undefined;  		}  		else if (row.Cells [2].Value.ToString () == "1") {  			fund.cycle = Cycle.monthly;  		}  		else if (row.Cells [2].Value.ToString () == "2") {  			fund.cycle = Cycle.seasonly;  		}  		else if (row.Cells [2].Value.ToString () == "3") {  			fund.cycle = Cycle.halfyearly;  		}  		else if (row.Cells [2].Value.ToString () == "4") {  			fund.cycle = Cycle.yearly;  		}  		else {  			fund.cycle = Cycle.undefined;  		}  		fund.start = (DateTime)row.Cells [3].Value;  		fund.end = (DateTime)row.Cells [4].Value;  		fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  		partner.funds.Add (fund);  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_volume.Rows) {  	if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  		Fund fund = new Fund ();  		fund.volume = double.Parse (row.Cells [0].Value.ToString ());  		fund.rate = double.Parse (row.Cells [1].Value.ToString ());  		if (row.Cells [2].Value.ToString () == "0") {  			fund.cycle = Cycle.undefined;  		}  		else if (row.Cells [2].Value.ToString () == "1") {  			fund.cycle = Cycle.monthly;  		}  		else if (row.Cells [2].Value.ToString () == "2") {  			fund.cycle = Cycle.seasonly;  		}  		else if (row.Cells [2].Value.ToString () == "3") {  			fund.cycle = Cycle.halfyearly;  		}  		else if (row.Cells [2].Value.ToString () == "4") {  			fund.cycle = Cycle.yearly;  		}  		else {  			fund.cycle = Cycle.undefined;  		}  		fund.start = (DateTime)row.Cells [3].Value;  		fund.end = (DateTime)row.Cells [4].Value;  		fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  		partner.funds.Add (fund);  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_volume.Rows) {  	if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  		Fund fund = new Fund ();  		fund.volume = double.Parse (row.Cells [0].Value.ToString ());  		fund.rate = double.Parse (row.Cells [1].Value.ToString ());  		if (row.Cells [2].Value.ToString () == "0") {  			fund.cycle = Cycle.undefined;  		}  		else if (row.Cells [2].Value.ToString () == "1") {  			fund.cycle = Cycle.monthly;  		}  		else if (row.Cells [2].Value.ToString () == "2") {  			fund.cycle = Cycle.seasonly;  		}  		else if (row.Cells [2].Value.ToString () == "3") {  			fund.cycle = Cycle.halfyearly;  		}  		else if (row.Cells [2].Value.ToString () == "4") {  			fund.cycle = Cycle.yearly;  		}  		else {  			fund.cycle = Cycle.undefined;  		}  		fund.start = (DateTime)row.Cells [3].Value;  		fund.end = (DateTime)row.Cells [4].Value;  		fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  		partner.funds.Add (fund);  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_volume.Rows) {  	if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  		Fund fund = new Fund ();  		fund.volume = double.Parse (row.Cells [0].Value.ToString ());  		fund.rate = double.Parse (row.Cells [1].Value.ToString ());  		if (row.Cells [2].Value.ToString () == "0") {  			fund.cycle = Cycle.undefined;  		}  		else if (row.Cells [2].Value.ToString () == "1") {  			fund.cycle = Cycle.monthly;  		}  		else if (row.Cells [2].Value.ToString () == "2") {  			fund.cycle = Cycle.seasonly;  		}  		else if (row.Cells [2].Value.ToString () == "3") {  			fund.cycle = Cycle.halfyearly;  		}  		else if (row.Cells [2].Value.ToString () == "4") {  			fund.cycle = Cycle.yearly;  		}  		else {  			fund.cycle = Cycle.undefined;  		}  		fund.start = (DateTime)row.Cells [3].Value;  		fund.end = (DateTime)row.Cells [4].Value;  		fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  		partner.funds.Add (fund);  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_volume.Rows) {  	if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  		Fund fund = new Fund ();  		fund.volume = double.Parse (row.Cells [0].Value.ToString ());  		fund.rate = double.Parse (row.Cells [1].Value.ToString ());  		if (row.Cells [2].Value.ToString () == "0") {  			fund.cycle = Cycle.undefined;  		}  		else if (row.Cells [2].Value.ToString () == "1") {  			fund.cycle = Cycle.monthly;  		}  		else if (row.Cells [2].Value.ToString () == "2") {  			fund.cycle = Cycle.seasonly;  		}  		else if (row.Cells [2].Value.ToString () == "3") {  			fund.cycle = Cycle.halfyearly;  		}  		else if (row.Cells [2].Value.ToString () == "4") {  			fund.cycle = Cycle.yearly;  		}  		else {  			fund.cycle = Cycle.undefined;  		}  		fund.start = (DateTime)row.Cells [3].Value;  		fund.end = (DateTime)row.Cells [4].Value;  		fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  		partner.funds.Add (fund);  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dataGridView_volume.Rows) {  	if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  		Fund fund = new Fund ();  		fund.volume = double.Parse (row.Cells [0].Value.ToString ());  		fund.rate = double.Parse (row.Cells [1].Value.ToString ());  		if (row.Cells [2].Value.ToString () == "0") {  			fund.cycle = Cycle.undefined;  		}  		else if (row.Cells [2].Value.ToString () == "1") {  			fund.cycle = Cycle.monthly;  		}  		else if (row.Cells [2].Value.ToString () == "2") {  			fund.cycle = Cycle.seasonly;  		}  		else if (row.Cells [2].Value.ToString () == "3") {  			fund.cycle = Cycle.halfyearly;  		}  		else if (row.Cells [2].Value.ToString () == "4") {  			fund.cycle = Cycle.yearly;  		}  		else {  			fund.cycle = Cycle.undefined;  		}  		fund.start = (DateTime)row.Cells [3].Value;  		fund.end = (DateTime)row.Cells [4].Value;  		fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  		partner.funds.Add (fund);  	}  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  	Fund fund = new Fund ();  	fund.volume = double.Parse (row.Cells [0].Value.ToString ());  	fund.rate = double.Parse (row.Cells [1].Value.ToString ());  	if (row.Cells [2].Value.ToString () == "0") {  		fund.cycle = Cycle.undefined;  	}  	else if (row.Cells [2].Value.ToString () == "1") {  		fund.cycle = Cycle.monthly;  	}  	else if (row.Cells [2].Value.ToString () == "2") {  		fund.cycle = Cycle.seasonly;  	}  	else if (row.Cells [2].Value.ToString () == "3") {  		fund.cycle = Cycle.halfyearly;  	}  	else if (row.Cells [2].Value.ToString () == "4") {  		fund.cycle = Cycle.yearly;  	}  	else {  		fund.cycle = Cycle.undefined;  	}  	fund.start = (DateTime)row.Cells [3].Value;  	fund.end = (DateTime)row.Cells [4].Value;  	fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  	partner.funds.Add (fund);  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  	Fund fund = new Fund ();  	fund.volume = double.Parse (row.Cells [0].Value.ToString ());  	fund.rate = double.Parse (row.Cells [1].Value.ToString ());  	if (row.Cells [2].Value.ToString () == "0") {  		fund.cycle = Cycle.undefined;  	}  	else if (row.Cells [2].Value.ToString () == "1") {  		fund.cycle = Cycle.monthly;  	}  	else if (row.Cells [2].Value.ToString () == "2") {  		fund.cycle = Cycle.seasonly;  	}  	else if (row.Cells [2].Value.ToString () == "3") {  		fund.cycle = Cycle.halfyearly;  	}  	else if (row.Cells [2].Value.ToString () == "4") {  		fund.cycle = Cycle.yearly;  	}  	else {  		fund.cycle = Cycle.undefined;  	}  	fund.start = (DateTime)row.Cells [3].Value;  	fund.end = (DateTime)row.Cells [4].Value;  	fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  	partner.funds.Add (fund);  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  	Fund fund = new Fund ();  	fund.volume = double.Parse (row.Cells [0].Value.ToString ());  	fund.rate = double.Parse (row.Cells [1].Value.ToString ());  	if (row.Cells [2].Value.ToString () == "0") {  		fund.cycle = Cycle.undefined;  	}  	else if (row.Cells [2].Value.ToString () == "1") {  		fund.cycle = Cycle.monthly;  	}  	else if (row.Cells [2].Value.ToString () == "2") {  		fund.cycle = Cycle.seasonly;  	}  	else if (row.Cells [2].Value.ToString () == "3") {  		fund.cycle = Cycle.halfyearly;  	}  	else if (row.Cells [2].Value.ToString () == "4") {  		fund.cycle = Cycle.yearly;  	}  	else {  		fund.cycle = Cycle.undefined;  	}  	fund.start = (DateTime)row.Cells [3].Value;  	fund.end = (DateTime)row.Cells [4].Value;  	fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  	partner.funds.Add (fund);  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  	Fund fund = new Fund ();  	fund.volume = double.Parse (row.Cells [0].Value.ToString ());  	fund.rate = double.Parse (row.Cells [1].Value.ToString ());  	if (row.Cells [2].Value.ToString () == "0") {  		fund.cycle = Cycle.undefined;  	}  	else if (row.Cells [2].Value.ToString () == "1") {  		fund.cycle = Cycle.monthly;  	}  	else if (row.Cells [2].Value.ToString () == "2") {  		fund.cycle = Cycle.seasonly;  	}  	else if (row.Cells [2].Value.ToString () == "3") {  		fund.cycle = Cycle.halfyearly;  	}  	else if (row.Cells [2].Value.ToString () == "4") {  		fund.cycle = Cycle.yearly;  	}  	else {  		fund.cycle = Cycle.undefined;  	}  	fund.start = (DateTime)row.Cells [3].Value;  	fund.end = (DateTime)row.Cells [4].Value;  	fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  	partner.funds.Add (fund);  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  	Fund fund = new Fund ();  	fund.volume = double.Parse (row.Cells [0].Value.ToString ());  	fund.rate = double.Parse (row.Cells [1].Value.ToString ());  	if (row.Cells [2].Value.ToString () == "0") {  		fund.cycle = Cycle.undefined;  	}  	else if (row.Cells [2].Value.ToString () == "1") {  		fund.cycle = Cycle.monthly;  	}  	else if (row.Cells [2].Value.ToString () == "2") {  		fund.cycle = Cycle.seasonly;  	}  	else if (row.Cells [2].Value.ToString () == "3") {  		fund.cycle = Cycle.halfyearly;  	}  	else if (row.Cells [2].Value.ToString () == "4") {  		fund.cycle = Cycle.yearly;  	}  	else {  		fund.cycle = Cycle.undefined;  	}  	fund.start = (DateTime)row.Cells [3].Value;  	fund.end = (DateTime)row.Cells [4].Value;  	fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  	partner.funds.Add (fund);  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  	Fund fund = new Fund ();  	fund.volume = double.Parse (row.Cells [0].Value.ToString ());  	fund.rate = double.Parse (row.Cells [1].Value.ToString ());  	if (row.Cells [2].Value.ToString () == "0") {  		fund.cycle = Cycle.undefined;  	}  	else if (row.Cells [2].Value.ToString () == "1") {  		fund.cycle = Cycle.monthly;  	}  	else if (row.Cells [2].Value.ToString () == "2") {  		fund.cycle = Cycle.seasonly;  	}  	else if (row.Cells [2].Value.ToString () == "3") {  		fund.cycle = Cycle.halfyearly;  	}  	else if (row.Cells [2].Value.ToString () == "4") {  		fund.cycle = Cycle.yearly;  	}  	else {  		fund.cycle = Cycle.undefined;  	}  	fund.start = (DateTime)row.Cells [3].Value;  	fund.end = (DateTime)row.Cells [4].Value;  	fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  	partner.funds.Add (fund);  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  	Fund fund = new Fund ();  	fund.volume = double.Parse (row.Cells [0].Value.ToString ());  	fund.rate = double.Parse (row.Cells [1].Value.ToString ());  	if (row.Cells [2].Value.ToString () == "0") {  		fund.cycle = Cycle.undefined;  	}  	else if (row.Cells [2].Value.ToString () == "1") {  		fund.cycle = Cycle.monthly;  	}  	else if (row.Cells [2].Value.ToString () == "2") {  		fund.cycle = Cycle.seasonly;  	}  	else if (row.Cells [2].Value.ToString () == "3") {  		fund.cycle = Cycle.halfyearly;  	}  	else if (row.Cells [2].Value.ToString () == "4") {  		fund.cycle = Cycle.yearly;  	}  	else {  		fund.cycle = Cycle.undefined;  	}  	fund.start = (DateTime)row.Cells [3].Value;  	fund.end = (DateTime)row.Cells [4].Value;  	fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  	partner.funds.Add (fund);  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  	Fund fund = new Fund ();  	fund.volume = double.Parse (row.Cells [0].Value.ToString ());  	fund.rate = double.Parse (row.Cells [1].Value.ToString ());  	if (row.Cells [2].Value.ToString () == "0") {  		fund.cycle = Cycle.undefined;  	}  	else if (row.Cells [2].Value.ToString () == "1") {  		fund.cycle = Cycle.monthly;  	}  	else if (row.Cells [2].Value.ToString () == "2") {  		fund.cycle = Cycle.seasonly;  	}  	else if (row.Cells [2].Value.ToString () == "3") {  		fund.cycle = Cycle.halfyearly;  	}  	else if (row.Cells [2].Value.ToString () == "4") {  		fund.cycle = Cycle.yearly;  	}  	else {  		fund.cycle = Cycle.undefined;  	}  	fund.start = (DateTime)row.Cells [3].Value;  	fund.end = (DateTime)row.Cells [4].Value;  	fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  	partner.funds.Add (fund);  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  	Fund fund = new Fund ();  	fund.volume = double.Parse (row.Cells [0].Value.ToString ());  	fund.rate = double.Parse (row.Cells [1].Value.ToString ());  	if (row.Cells [2].Value.ToString () == "0") {  		fund.cycle = Cycle.undefined;  	}  	else if (row.Cells [2].Value.ToString () == "1") {  		fund.cycle = Cycle.monthly;  	}  	else if (row.Cells [2].Value.ToString () == "2") {  		fund.cycle = Cycle.seasonly;  	}  	else if (row.Cells [2].Value.ToString () == "3") {  		fund.cycle = Cycle.halfyearly;  	}  	else if (row.Cells [2].Value.ToString () == "4") {  		fund.cycle = Cycle.yearly;  	}  	else {  		fund.cycle = Cycle.undefined;  	}  	fund.start = (DateTime)row.Cells [3].Value;  	fund.end = (DateTime)row.Cells [4].Value;  	fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  	partner.funds.Add (fund);  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [0].Value != null && row.Cells [1] != null && row.Cells [2].Value != null) {  	Fund fund = new Fund ();  	fund.volume = double.Parse (row.Cells [0].Value.ToString ());  	fund.rate = double.Parse (row.Cells [1].Value.ToString ());  	if (row.Cells [2].Value.ToString () == "0") {  		fund.cycle = Cycle.undefined;  	}  	else if (row.Cells [2].Value.ToString () == "1") {  		fund.cycle = Cycle.monthly;  	}  	else if (row.Cells [2].Value.ToString () == "2") {  		fund.cycle = Cycle.seasonly;  	}  	else if (row.Cells [2].Value.ToString () == "3") {  		fund.cycle = Cycle.halfyearly;  	}  	else if (row.Cells [2].Value.ToString () == "4") {  		fund.cycle = Cycle.yearly;  	}  	else {  		fund.cycle = Cycle.undefined;  	}  	fund.start = (DateTime)row.Cells [3].Value;  	fund.end = (DateTime)row.Cells [4].Value;  	fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  	partner.funds.Add (fund);  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "0") {  	fund.cycle = Cycle.undefined;  }  else if (row.Cells [2].Value.ToString () == "1") {  	fund.cycle = Cycle.monthly;  }  else if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "0") {  	fund.cycle = Cycle.undefined;  }  else if (row.Cells [2].Value.ToString () == "1") {  	fund.cycle = Cycle.monthly;  }  else if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "0") {  	fund.cycle = Cycle.undefined;  }  else if (row.Cells [2].Value.ToString () == "1") {  	fund.cycle = Cycle.monthly;  }  else if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "0") {  	fund.cycle = Cycle.undefined;  }  else if (row.Cells [2].Value.ToString () == "1") {  	fund.cycle = Cycle.monthly;  }  else if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "0") {  	fund.cycle = Cycle.undefined;  }  else if (row.Cells [2].Value.ToString () == "1") {  	fund.cycle = Cycle.monthly;  }  else if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "1") {  	fund.cycle = Cycle.monthly;  }  else if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "1") {  	fund.cycle = Cycle.monthly;  }  else if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "1") {  	fund.cycle = Cycle.monthly;  }  else if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "1") {  	fund.cycle = Cycle.monthly;  }  else if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "2") {  	fund.cycle = Cycle.seasonly;  }  else if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "3") {  	fund.cycle = Cycle.halfyearly;  }  else if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: if (row.Cells [2].Value.ToString () == "4") {  	fund.cycle = Cycle.yearly;  }  else {  	fund.cycle = Cycle.undefined;  }  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: fund.start = (DateTime)row.Cells [3].Value;  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: fund.end = (DateTime)row.Cells [4].Value;  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  
Magic Number,ThePool,Form_Partner,C:\repos\solunar66_ThePool\ThePool\Form_Partner.cs,button_save_Click,The following statement contains a magic number: fund.comment = row.Cells [5].Value == null ? "" : row.Cells [5].Value.ToString ();  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_Load,The following statement contains a magic number: myPane.YAxis.Title.FontSpec.Angle = 90;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_Load,The following statement contains a magic number: myPane.Chart.Fill = new Fill (Color.White' Color.FromArgb (255' 255' 166)' 45.0F);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_Load,The following statement contains a magic number: myPane.Chart.Fill = new Fill (Color.White' Color.FromArgb (255' 255' 166)' 45.0F);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_Load,The following statement contains a magic number: myPane.Chart.Fill = new Fill (Color.White' Color.FromArgb (255' 255' 166)' 45.0F);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.end < end) {  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (debt.end < end) {  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  				}  			}  		}  	}  	// sum all up  	Xlabelslist.Add (i.ToString () + "月");  	invests.Add (new PointPair (i' baseInvest));  	cash.Add (new PointPair (i' baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney));  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar   {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar   {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar   {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar   {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar   {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: switch (fund.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: switch (fund.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: switch (fund.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.end < end) {  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.end < end) {  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.end < end) {  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.end < end) {  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.end < end) {  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.end < end) {  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.end < end) {  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.end < end) {  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.end < end) {  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.end < end) {  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.end < end) {  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.end < end) {  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.start < end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (debt.end < end) {  			debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  		}  		else {  			debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.start < end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (debt.end < end) {  			debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  		}  		else {  			debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.start < end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (debt.end < end) {  			debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  		}  		else {  			debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.start < end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (debt.end < end) {  			debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  		}  		else {  			debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.start < end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (debt.end < end) {  			debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  		}  		else {  			debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (debt.end < end) {  		debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  	}  	else {  		debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (debt.end < end) {  		debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  	}  	else {  		debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (debt.end < end) {  		debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  	}  	else {  		debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (debt.end < end) {  		debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  	}  	else {  		debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (debt.end < end) {  		debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  	}  	else {  		debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (debt.end < end) {  	debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  }  else {  	debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: if (debt.end < end) {  	debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  }  else {  	debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Reload,The following statement contains a magic number: debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: panel1.Location = new Point (0' 34);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: panel1.Width = Width - 16;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: panel1.Height = Height - 116;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: dateTimePicker_year.Location = new Point (Width / 2 - 36' 7);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: dateTimePicker_year.Location = new Point (Width / 2 - 36' 7);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: dateTimePicker_year.Location = new Point (Width / 2 - 36' 7);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: button_pre.Location = new Point (Width / 2 - 120' 5);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: button_pre.Location = new Point (Width / 2 - 120' 5);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: button_pre.Location = new Point (Width / 2 - 120' 5);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: button_next.Location = new Point (Width / 2 + 29' 5);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: button_next.Location = new Point (Width / 2 + 29' 5);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: button_next.Location = new Point (Width / 2 + 29' 5);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: button_partner.Location = new Point (0' Height - 76);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: button_invest.Location = new Point (button_invest.Location.X' Height - 76);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: button_debt.Location = new Point (button_debt.Location.X' Height - 76);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: button_quit.Location = new Point (Width - 128' Height - 76);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,Form1_SizeChanged,The following statement contains a magic number: button_quit.Location = new Point (Width - 128' Height - 76);  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,CreateBarLabels,The following statement contains a magic number: foreach (CurveItem curve in pane.CurveList) {  	// work with BarItems only  	BarItem bar = curve as BarItem;  	if (bar != null) {  		IPointList points = curve.Points;  		// Loop through each point in the BarItem  		for (int i = 0; i < points.Count; i++) {  			// Get the high' low and base values for the current bar  			// note that this method will automatically calculate the "effective"  			// values if the bar is stacked  			double baseVal' lowVal' hiVal;  			valueHandler.GetValues (curve' i' out baseVal' out lowVal' out hiVal);  			// Get the value that corresponds to the center of the bar base  			// This method figures out how the bars are positioned within a cluster  			float centerVal = (float)valueHandler.BarCenterValue (bar' bar.GetBarWidth (pane)' i' baseVal' curveIndex);  			// Create a text label -- note that we have to go back to the original point  			// data for this' since hiVal and lowVal could be "effective" values from a bar stack  			string barLabelText = (isVertical ? points [i].Y : points [i].X).ToString (valueFormat);  			barLabelText = barLabelText.Replace (".000"' "");  			// Calculate the position of the label -- this is either the X or the Y coordinate  			// depending on whether they are horizontal or vertical bars' respectively  			float position;  			if (isBarCenter)  				position = (float)(hiVal + lowVal) / 2.0f;  			else  				position = (float)hiVal + labelOffset;  			// Create the new TextObj  			TextObj label;  			if (isVertical)  				label = new TextObj (barLabelText' centerVal' position);  			else  				label = new TextObj (barLabelText' position' centerVal);  			// Configure the TextObj  			label.Location.CoordinateFrame = CoordType.AxisXYScale;  			label.FontSpec.Size = 12;  			label.FontSpec.FontColor = Color.Black;  			label.FontSpec.Angle = isVertical ? 0 : 90;  			label.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  			label.Location.AlignV = AlignV.Center;  			label.FontSpec.Border.IsVisible = false;  			label.FontSpec.Fill.IsVisible = false;  			// Add the TextObj to the GraphPane  			pane.GraphObjList.Add (label);  			//if(curveIndex == 1)  			//{  			//    string total = (points[i].Y + pane.CurveList[0].Points[i].Y).ToString();  			//    TextObj totallabel = new TextObj(total' centerVal' position + hiVal - lowVal);  			//    totallabel.Location.CoordinateFrame = CoordType.AxisXYScale;  			//    totallabel.FontSpec.Size = 12;  			//    totallabel.FontSpec.FontColor = Color.Black;  			//    totallabel.FontSpec.Angle = isVertical ? 0 : 90;  			//    totallabel.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  			//    totallabel.Location.AlignV = AlignV.Center;  			//    totallabel.FontSpec.Border.IsVisible = false;  			//    totallabel.FontSpec.Fill.IsVisible = false;  			//    pane.GraphObjList.Add(totallabel);  			//}  		}  	}  	curveIndex++;  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,CreateBarLabels,The following statement contains a magic number: foreach (CurveItem curve in pane.CurveList) {  	// work with BarItems only  	BarItem bar = curve as BarItem;  	if (bar != null) {  		IPointList points = curve.Points;  		// Loop through each point in the BarItem  		for (int i = 0; i < points.Count; i++) {  			// Get the high' low and base values for the current bar  			// note that this method will automatically calculate the "effective"  			// values if the bar is stacked  			double baseVal' lowVal' hiVal;  			valueHandler.GetValues (curve' i' out baseVal' out lowVal' out hiVal);  			// Get the value that corresponds to the center of the bar base  			// This method figures out how the bars are positioned within a cluster  			float centerVal = (float)valueHandler.BarCenterValue (bar' bar.GetBarWidth (pane)' i' baseVal' curveIndex);  			// Create a text label -- note that we have to go back to the original point  			// data for this' since hiVal and lowVal could be "effective" values from a bar stack  			string barLabelText = (isVertical ? points [i].Y : points [i].X).ToString (valueFormat);  			barLabelText = barLabelText.Replace (".000"' "");  			// Calculate the position of the label -- this is either the X or the Y coordinate  			// depending on whether they are horizontal or vertical bars' respectively  			float position;  			if (isBarCenter)  				position = (float)(hiVal + lowVal) / 2.0f;  			else  				position = (float)hiVal + labelOffset;  			// Create the new TextObj  			TextObj label;  			if (isVertical)  				label = new TextObj (barLabelText' centerVal' position);  			else  				label = new TextObj (barLabelText' position' centerVal);  			// Configure the TextObj  			label.Location.CoordinateFrame = CoordType.AxisXYScale;  			label.FontSpec.Size = 12;  			label.FontSpec.FontColor = Color.Black;  			label.FontSpec.Angle = isVertical ? 0 : 90;  			label.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  			label.Location.AlignV = AlignV.Center;  			label.FontSpec.Border.IsVisible = false;  			label.FontSpec.Fill.IsVisible = false;  			// Add the TextObj to the GraphPane  			pane.GraphObjList.Add (label);  			//if(curveIndex == 1)  			//{  			//    string total = (points[i].Y + pane.CurveList[0].Points[i].Y).ToString();  			//    TextObj totallabel = new TextObj(total' centerVal' position + hiVal - lowVal);  			//    totallabel.Location.CoordinateFrame = CoordType.AxisXYScale;  			//    totallabel.FontSpec.Size = 12;  			//    totallabel.FontSpec.FontColor = Color.Black;  			//    totallabel.FontSpec.Angle = isVertical ? 0 : 90;  			//    totallabel.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  			//    totallabel.Location.AlignV = AlignV.Center;  			//    totallabel.FontSpec.Border.IsVisible = false;  			//    totallabel.FontSpec.Fill.IsVisible = false;  			//    pane.GraphObjList.Add(totallabel);  			//}  		}  	}  	curveIndex++;  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,CreateBarLabels,The following statement contains a magic number: if (bar != null) {  	IPointList points = curve.Points;  	// Loop through each point in the BarItem  	for (int i = 0; i < points.Count; i++) {  		// Get the high' low and base values for the current bar  		// note that this method will automatically calculate the "effective"  		// values if the bar is stacked  		double baseVal' lowVal' hiVal;  		valueHandler.GetValues (curve' i' out baseVal' out lowVal' out hiVal);  		// Get the value that corresponds to the center of the bar base  		// This method figures out how the bars are positioned within a cluster  		float centerVal = (float)valueHandler.BarCenterValue (bar' bar.GetBarWidth (pane)' i' baseVal' curveIndex);  		// Create a text label -- note that we have to go back to the original point  		// data for this' since hiVal and lowVal could be "effective" values from a bar stack  		string barLabelText = (isVertical ? points [i].Y : points [i].X).ToString (valueFormat);  		barLabelText = barLabelText.Replace (".000"' "");  		// Calculate the position of the label -- this is either the X or the Y coordinate  		// depending on whether they are horizontal or vertical bars' respectively  		float position;  		if (isBarCenter)  			position = (float)(hiVal + lowVal) / 2.0f;  		else  			position = (float)hiVal + labelOffset;  		// Create the new TextObj  		TextObj label;  		if (isVertical)  			label = new TextObj (barLabelText' centerVal' position);  		else  			label = new TextObj (barLabelText' position' centerVal);  		// Configure the TextObj  		label.Location.CoordinateFrame = CoordType.AxisXYScale;  		label.FontSpec.Size = 12;  		label.FontSpec.FontColor = Color.Black;  		label.FontSpec.Angle = isVertical ? 0 : 90;  		label.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  		label.Location.AlignV = AlignV.Center;  		label.FontSpec.Border.IsVisible = false;  		label.FontSpec.Fill.IsVisible = false;  		// Add the TextObj to the GraphPane  		pane.GraphObjList.Add (label);  		//if(curveIndex == 1)  		//{  		//    string total = (points[i].Y + pane.CurveList[0].Points[i].Y).ToString();  		//    TextObj totallabel = new TextObj(total' centerVal' position + hiVal - lowVal);  		//    totallabel.Location.CoordinateFrame = CoordType.AxisXYScale;  		//    totallabel.FontSpec.Size = 12;  		//    totallabel.FontSpec.FontColor = Color.Black;  		//    totallabel.FontSpec.Angle = isVertical ? 0 : 90;  		//    totallabel.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  		//    totallabel.Location.AlignV = AlignV.Center;  		//    totallabel.FontSpec.Border.IsVisible = false;  		//    totallabel.FontSpec.Fill.IsVisible = false;  		//    pane.GraphObjList.Add(totallabel);  		//}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,CreateBarLabels,The following statement contains a magic number: if (bar != null) {  	IPointList points = curve.Points;  	// Loop through each point in the BarItem  	for (int i = 0; i < points.Count; i++) {  		// Get the high' low and base values for the current bar  		// note that this method will automatically calculate the "effective"  		// values if the bar is stacked  		double baseVal' lowVal' hiVal;  		valueHandler.GetValues (curve' i' out baseVal' out lowVal' out hiVal);  		// Get the value that corresponds to the center of the bar base  		// This method figures out how the bars are positioned within a cluster  		float centerVal = (float)valueHandler.BarCenterValue (bar' bar.GetBarWidth (pane)' i' baseVal' curveIndex);  		// Create a text label -- note that we have to go back to the original point  		// data for this' since hiVal and lowVal could be "effective" values from a bar stack  		string barLabelText = (isVertical ? points [i].Y : points [i].X).ToString (valueFormat);  		barLabelText = barLabelText.Replace (".000"' "");  		// Calculate the position of the label -- this is either the X or the Y coordinate  		// depending on whether they are horizontal or vertical bars' respectively  		float position;  		if (isBarCenter)  			position = (float)(hiVal + lowVal) / 2.0f;  		else  			position = (float)hiVal + labelOffset;  		// Create the new TextObj  		TextObj label;  		if (isVertical)  			label = new TextObj (barLabelText' centerVal' position);  		else  			label = new TextObj (barLabelText' position' centerVal);  		// Configure the TextObj  		label.Location.CoordinateFrame = CoordType.AxisXYScale;  		label.FontSpec.Size = 12;  		label.FontSpec.FontColor = Color.Black;  		label.FontSpec.Angle = isVertical ? 0 : 90;  		label.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  		label.Location.AlignV = AlignV.Center;  		label.FontSpec.Border.IsVisible = false;  		label.FontSpec.Fill.IsVisible = false;  		// Add the TextObj to the GraphPane  		pane.GraphObjList.Add (label);  		//if(curveIndex == 1)  		//{  		//    string total = (points[i].Y + pane.CurveList[0].Points[i].Y).ToString();  		//    TextObj totallabel = new TextObj(total' centerVal' position + hiVal - lowVal);  		//    totallabel.Location.CoordinateFrame = CoordType.AxisXYScale;  		//    totallabel.FontSpec.Size = 12;  		//    totallabel.FontSpec.FontColor = Color.Black;  		//    totallabel.FontSpec.Angle = isVertical ? 0 : 90;  		//    totallabel.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  		//    totallabel.Location.AlignV = AlignV.Center;  		//    totallabel.FontSpec.Border.IsVisible = false;  		//    totallabel.FontSpec.Fill.IsVisible = false;  		//    pane.GraphObjList.Add(totallabel);  		//}  	}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,CreateBarLabels,The following statement contains a magic number: for (int i = 0; i < points.Count; i++) {  	// Get the high' low and base values for the current bar  	// note that this method will automatically calculate the "effective"  	// values if the bar is stacked  	double baseVal' lowVal' hiVal;  	valueHandler.GetValues (curve' i' out baseVal' out lowVal' out hiVal);  	// Get the value that corresponds to the center of the bar base  	// This method figures out how the bars are positioned within a cluster  	float centerVal = (float)valueHandler.BarCenterValue (bar' bar.GetBarWidth (pane)' i' baseVal' curveIndex);  	// Create a text label -- note that we have to go back to the original point  	// data for this' since hiVal and lowVal could be "effective" values from a bar stack  	string barLabelText = (isVertical ? points [i].Y : points [i].X).ToString (valueFormat);  	barLabelText = barLabelText.Replace (".000"' "");  	// Calculate the position of the label -- this is either the X or the Y coordinate  	// depending on whether they are horizontal or vertical bars' respectively  	float position;  	if (isBarCenter)  		position = (float)(hiVal + lowVal) / 2.0f;  	else  		position = (float)hiVal + labelOffset;  	// Create the new TextObj  	TextObj label;  	if (isVertical)  		label = new TextObj (barLabelText' centerVal' position);  	else  		label = new TextObj (barLabelText' position' centerVal);  	// Configure the TextObj  	label.Location.CoordinateFrame = CoordType.AxisXYScale;  	label.FontSpec.Size = 12;  	label.FontSpec.FontColor = Color.Black;  	label.FontSpec.Angle = isVertical ? 0 : 90;  	label.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  	label.Location.AlignV = AlignV.Center;  	label.FontSpec.Border.IsVisible = false;  	label.FontSpec.Fill.IsVisible = false;  	// Add the TextObj to the GraphPane  	pane.GraphObjList.Add (label);  	//if(curveIndex == 1)  	//{  	//    string total = (points[i].Y + pane.CurveList[0].Points[i].Y).ToString();  	//    TextObj totallabel = new TextObj(total' centerVal' position + hiVal - lowVal);  	//    totallabel.Location.CoordinateFrame = CoordType.AxisXYScale;  	//    totallabel.FontSpec.Size = 12;  	//    totallabel.FontSpec.FontColor = Color.Black;  	//    totallabel.FontSpec.Angle = isVertical ? 0 : 90;  	//    totallabel.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  	//    totallabel.Location.AlignV = AlignV.Center;  	//    totallabel.FontSpec.Border.IsVisible = false;  	//    totallabel.FontSpec.Fill.IsVisible = false;  	//    pane.GraphObjList.Add(totallabel);  	//}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,CreateBarLabels,The following statement contains a magic number: for (int i = 0; i < points.Count; i++) {  	// Get the high' low and base values for the current bar  	// note that this method will automatically calculate the "effective"  	// values if the bar is stacked  	double baseVal' lowVal' hiVal;  	valueHandler.GetValues (curve' i' out baseVal' out lowVal' out hiVal);  	// Get the value that corresponds to the center of the bar base  	// This method figures out how the bars are positioned within a cluster  	float centerVal = (float)valueHandler.BarCenterValue (bar' bar.GetBarWidth (pane)' i' baseVal' curveIndex);  	// Create a text label -- note that we have to go back to the original point  	// data for this' since hiVal and lowVal could be "effective" values from a bar stack  	string barLabelText = (isVertical ? points [i].Y : points [i].X).ToString (valueFormat);  	barLabelText = barLabelText.Replace (".000"' "");  	// Calculate the position of the label -- this is either the X or the Y coordinate  	// depending on whether they are horizontal or vertical bars' respectively  	float position;  	if (isBarCenter)  		position = (float)(hiVal + lowVal) / 2.0f;  	else  		position = (float)hiVal + labelOffset;  	// Create the new TextObj  	TextObj label;  	if (isVertical)  		label = new TextObj (barLabelText' centerVal' position);  	else  		label = new TextObj (barLabelText' position' centerVal);  	// Configure the TextObj  	label.Location.CoordinateFrame = CoordType.AxisXYScale;  	label.FontSpec.Size = 12;  	label.FontSpec.FontColor = Color.Black;  	label.FontSpec.Angle = isVertical ? 0 : 90;  	label.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  	label.Location.AlignV = AlignV.Center;  	label.FontSpec.Border.IsVisible = false;  	label.FontSpec.Fill.IsVisible = false;  	// Add the TextObj to the GraphPane  	pane.GraphObjList.Add (label);  	//if(curveIndex == 1)  	//{  	//    string total = (points[i].Y + pane.CurveList[0].Points[i].Y).ToString();  	//    TextObj totallabel = new TextObj(total' centerVal' position + hiVal - lowVal);  	//    totallabel.Location.CoordinateFrame = CoordType.AxisXYScale;  	//    totallabel.FontSpec.Size = 12;  	//    totallabel.FontSpec.FontColor = Color.Black;  	//    totallabel.FontSpec.Angle = isVertical ? 0 : 90;  	//    totallabel.Location.AlignH = isBarCenter ? AlignH.Center : AlignH.Left;  	//    totallabel.Location.AlignV = AlignV.Center;  	//    totallabel.FontSpec.Border.IsVisible = false;  	//    totallabel.FontSpec.Fill.IsVisible = false;  	//    pane.GraphObjList.Add(totallabel);  	//}  }  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,CreateBarLabels,The following statement contains a magic number: label.FontSpec.Size = 12;  
Magic Number,ThePool,Form_Main,C:\repos\solunar66_ThePool\ThePool\Form_Main.cs,CreateBarLabels,The following statement contains a magic number: label.FontSpec.Angle = isVertical ? 0 : 90;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	DataGridView dgv;  	baseMoney = 0;  	baseInvest = 0;  	projInterest = 0;  	parInterest = 0;  	debtMoney = 0;  	adjustMoney = 0;  	comment = "";  	start = new DateTime (dateTimePicker_year.Value.Year' i' 1);  	end = start.AddDays (1 - start.Day).AddMonths (1).AddDays (-1);  	//------------------ for total status----------------//  	/* partners */foreach (Partner partner in ar_Partners) {  		foreach (Fund fund in partner.funds) {  			if (fund.start < end)// except future invest  			 {  				if (fund.end < end)// finished interest  				 {  					parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  				}  				else {  					baseMoney += fund.volume;  					// current base money  					if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  					 {  						switch (fund.cycle) {  						case Cycle.monthly:  							intervel = 1;  							break;  						case Cycle.seasonly:  							intervel = 3;  							break;  						case Cycle.halfyearly:  							intervel = 6;  							break;  						case Cycle.yearly:  							intervel = 12;  							break;  						default:  							intervel = 0;  							break;  						}  						parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  					}  				}  			}  		}  	}  	/* projects */foreach (Project project in ar_Projects) {  		if (project.start < end) {  			if (project.start >= start) {  				comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  			}  			if (project.end < end) {  				if (project.end >= start) {  					comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  				}  				projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  			}  			else {  				baseInvest += project.volume;  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  			}  		}  	}  	/* debts */foreach (Debt debt in ar_Debts) {  		if (debt.start < end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				intervelStr = "每月";  				break;  			case Cycle.seasonly:  				intervel = 3;  				intervelStr = "每季度";  				break;  			case Cycle.halfyearly:  				intervel = 6;  				intervelStr = "每半年";  				break;  			case Cycle.yearly:  				intervel = 12;  				intervelStr = "每年";  				break;  			default:  				intervel = 0;  				intervelStr = "";  				break;  			}  			if (debt.start >= start) {  				comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			if (debt.end < end) {  				if (debt.end >= start) {  					comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  				}  				debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  			}  			else {  				debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  			}  		}  	}  	/* calendar */foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date <= end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					adjustMoney += flow.volume;  					if (calendar.date >= start) {  						comment += "△调整收入\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  				else if (flow.type == FlowType.payout) {  					adjustMoney -= flow.volume;  					if (calendar.date >= start) {  						comment += "▽调整支出\"" + flow.comment + "\"(" + flow.volume.ToString () + "万); ";  					}  				}  			}  		}  	}  	// sum up  	List<string> data = new List<string> ();  	// date  	data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  	// total  	data.Add ((baseMoney + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// cash  	data.Add ((baseMoney - baseInvest + projInterest - parInterest - debtMoney + adjustMoney).ToString ("N2"));  	// invest                  	data.Add (baseInvest.ToString ());  	//------------------ for current month status----------------//  	monthIncome = 0;  	monthPayout = 0;  	monthAdjust = 0;  	monthDebt = 0;  	foreach (Project project in ar_Projects) {  		if (project.end < start)  			continue;  		if (project.start < end) {  			if (project.end >= end) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  					monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  				}  			}  		}  	}  	foreach (Debt debt in ar_Debts) {  		if (debt.end < start)  			continue;  		if (debt.start < end) {  			if (debt.end >= end) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  					monthPayout += debt.volume;  					monthDebt += debt.volume;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= start && calendar.date < end) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					monthAdjust += flow.volume;  				}  				else if (flow.type == FlowType.payout) {  					monthAdjust -= flow.volume;  				}  				else {  				}  			}  		}  	}  	// income  	data.Add (monthIncome.ToString ());  	// payout  	data.Add (monthPayout.ToString ());  	// adjust  	data.Add (monthAdjust.ToString ());  	// comment  	data.Add (comment);  	// debt  	data.Add (monthDebt.ToString ());  	GenerateDGV (data' out dgv);  	flowLayoutPanel1.Controls.Add (dgv);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Partner partner in ar_Partners) {  	foreach (Fund fund in partner.funds) {  		if (fund.start < end)// except future invest  		 {  			if (fund.end < end)// finished interest  			 {  				parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  			}  			else {  				baseMoney += fund.volume;  				// current base money  				if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  				 {  					switch (fund.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  				}  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Fund fund in partner.funds) {  	if (fund.start < end)// except future invest  	 {  		if (fund.end < end)// finished interest  		 {  			parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  		}  		else {  			baseMoney += fund.volume;  			// current base money  			if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  			 {  				switch (fund.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.start < end)// except future invest   {  	if (fund.end < end)// finished interest  	 {  		parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  	}  	else {  		baseMoney += fund.volume;  		// current base money  		if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  		 {  			switch (fund.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.end < end)// finished interest   {  	parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  }  else {  	baseMoney += fund.volume;  	// current base money  	if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar  	 {  		switch (fund.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: parInterest += fund.volume * (fund.rate / 12) * ((fund.end.Year - fund.start.Year) * 12 + fund.end.Month - fund.start.Month);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar   {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar   {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar   {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar   {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (fund.cycle != Cycle.undefined)// undefined payback should be defined in calendar   {  	switch (fund.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (fund.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (fund.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (fund.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: parInterest += fund.volume * (fund.rate * intervel / 12) * ((int)((end.Year - fund.start.Year) * 12 + end.Month - fund.start.Month) / intervel);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.start >= start) {  			comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  		}  		if (project.end < end) {  			if (project.end >= start) {  				comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  			}  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.start >= start) {  			comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  		}  		if (project.end < end) {  			if (project.end >= start) {  				comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  			}  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.start >= start) {  			comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  		}  		if (project.end < end) {  			if (project.end >= start) {  				comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  			}  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.start >= start) {  			comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  		}  		if (project.end < end) {  			if (project.end >= start) {  				comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  			}  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.start >= start) {  			comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  		}  		if (project.end < end) {  			if (project.end >= start) {  				comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  			}  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.start < end) {  		if (project.start >= start) {  			comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  		}  		if (project.end < end) {  			if (project.end >= start) {  				comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  			}  			projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  		}  		else {  			baseInvest += project.volume;  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.start >= start) {  		comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  	}  	if (project.end < end) {  		if (project.end >= start) {  			comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  		}  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.start >= start) {  		comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  	}  	if (project.end < end) {  		if (project.end >= start) {  			comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  		}  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.start >= start) {  		comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  	}  	if (project.end < end) {  		if (project.end >= start) {  			comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  		}  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.start >= start) {  		comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  	}  	if (project.end < end) {  		if (project.end >= start) {  			comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  		}  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.start >= start) {  		comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  	}  	if (project.end < end) {  		if (project.end >= start) {  			comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  		}  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.start >= start) {  		comment += "★新投资:\"" + project.name + "\"(" + project.volume.ToString () + "万); ";  	}  	if (project.end < end) {  		if (project.end >= start) {  			comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  		}  		projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  	}  	else {  		baseInvest += project.volume;  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	if (project.end >= start) {  		comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  	}  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	if (project.end >= start) {  		comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  	}  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	if (project.end >= start) {  		comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  	}  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	if (project.end >= start) {  		comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  	}  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	if (project.end >= start) {  		comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  	}  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.end < end) {  	if (project.end >= start) {  		comment += "☆投资终止:\"" + project.name + "\"(" + project.volume.ToString () + "万)结息日:" + project.end.Day + "日; ";  	}  	projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  }  else {  	baseInvest += project.volume;  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: projInterest += project.volume * (project.rate / 12) * ((project.end.Year - project.start.Year) * 12 + project.end.Month - project.start.Month);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: projInterest += project.volume * (project.rate * intervel / 12f) * ((int)((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) / intervel);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.start < end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			intervelStr = "每月";  			break;  		case Cycle.seasonly:  			intervel = 3;  			intervelStr = "每季度";  			break;  		case Cycle.halfyearly:  			intervel = 6;  			intervelStr = "每半年";  			break;  		case Cycle.yearly:  			intervel = 12;  			intervelStr = "每年";  			break;  		default:  			intervel = 0;  			intervelStr = "";  			break;  		}  		if (debt.start >= start) {  			comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  		}  		if (debt.end < end) {  			if (debt.end >= start) {  				comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  		}  		else {  			debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.start < end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			intervelStr = "每月";  			break;  		case Cycle.seasonly:  			intervel = 3;  			intervelStr = "每季度";  			break;  		case Cycle.halfyearly:  			intervel = 6;  			intervelStr = "每半年";  			break;  		case Cycle.yearly:  			intervel = 12;  			intervelStr = "每年";  			break;  		default:  			intervel = 0;  			intervelStr = "";  			break;  		}  		if (debt.start >= start) {  			comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  		}  		if (debt.end < end) {  			if (debt.end >= start) {  				comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  		}  		else {  			debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.start < end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			intervelStr = "每月";  			break;  		case Cycle.seasonly:  			intervel = 3;  			intervelStr = "每季度";  			break;  		case Cycle.halfyearly:  			intervel = 6;  			intervelStr = "每半年";  			break;  		case Cycle.yearly:  			intervel = 12;  			intervelStr = "每年";  			break;  		default:  			intervel = 0;  			intervelStr = "";  			break;  		}  		if (debt.start >= start) {  			comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  		}  		if (debt.end < end) {  			if (debt.end >= start) {  				comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  		}  		else {  			debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.start < end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			intervelStr = "每月";  			break;  		case Cycle.seasonly:  			intervel = 3;  			intervelStr = "每季度";  			break;  		case Cycle.halfyearly:  			intervel = 6;  			intervelStr = "每半年";  			break;  		case Cycle.yearly:  			intervel = 12;  			intervelStr = "每年";  			break;  		default:  			intervel = 0;  			intervelStr = "";  			break;  		}  		if (debt.start >= start) {  			comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  		}  		if (debt.end < end) {  			if (debt.end >= start) {  				comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  		}  		else {  			debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.start < end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			intervelStr = "每月";  			break;  		case Cycle.seasonly:  			intervel = 3;  			intervelStr = "每季度";  			break;  		case Cycle.halfyearly:  			intervel = 6;  			intervelStr = "每半年";  			break;  		case Cycle.yearly:  			intervel = 12;  			intervelStr = "每年";  			break;  		default:  			intervel = 0;  			intervelStr = "";  			break;  		}  		if (debt.start >= start) {  			comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  		}  		if (debt.end < end) {  			if (debt.end >= start) {  				comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  			}  			debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  		}  		else {  			debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		intervelStr = "每月";  		break;  	case Cycle.seasonly:  		intervel = 3;  		intervelStr = "每季度";  		break;  	case Cycle.halfyearly:  		intervel = 6;  		intervelStr = "每半年";  		break;  	case Cycle.yearly:  		intervel = 12;  		intervelStr = "每年";  		break;  	default:  		intervel = 0;  		intervelStr = "";  		break;  	}  	if (debt.start >= start) {  		comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  	}  	if (debt.end < end) {  		if (debt.end >= start) {  			comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  		}  		debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  	}  	else {  		debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		intervelStr = "每月";  		break;  	case Cycle.seasonly:  		intervel = 3;  		intervelStr = "每季度";  		break;  	case Cycle.halfyearly:  		intervel = 6;  		intervelStr = "每半年";  		break;  	case Cycle.yearly:  		intervel = 12;  		intervelStr = "每年";  		break;  	default:  		intervel = 0;  		intervelStr = "";  		break;  	}  	if (debt.start >= start) {  		comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  	}  	if (debt.end < end) {  		if (debt.end >= start) {  			comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  		}  		debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  	}  	else {  		debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		intervelStr = "每月";  		break;  	case Cycle.seasonly:  		intervel = 3;  		intervelStr = "每季度";  		break;  	case Cycle.halfyearly:  		intervel = 6;  		intervelStr = "每半年";  		break;  	case Cycle.yearly:  		intervel = 12;  		intervelStr = "每年";  		break;  	default:  		intervel = 0;  		intervelStr = "";  		break;  	}  	if (debt.start >= start) {  		comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  	}  	if (debt.end < end) {  		if (debt.end >= start) {  			comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  		}  		debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  	}  	else {  		debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		intervelStr = "每月";  		break;  	case Cycle.seasonly:  		intervel = 3;  		intervelStr = "每季度";  		break;  	case Cycle.halfyearly:  		intervel = 6;  		intervelStr = "每半年";  		break;  	case Cycle.yearly:  		intervel = 12;  		intervelStr = "每年";  		break;  	default:  		intervel = 0;  		intervelStr = "";  		break;  	}  	if (debt.start >= start) {  		comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  	}  	if (debt.end < end) {  		if (debt.end >= start) {  			comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  		}  		debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  	}  	else {  		debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		intervelStr = "每月";  		break;  	case Cycle.seasonly:  		intervel = 3;  		intervelStr = "每季度";  		break;  	case Cycle.halfyearly:  		intervel = 6;  		intervelStr = "每半年";  		break;  	case Cycle.yearly:  		intervel = 12;  		intervelStr = "每年";  		break;  	default:  		intervel = 0;  		intervelStr = "";  		break;  	}  	if (debt.start >= start) {  		comment += "╋新生活支出:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  	}  	if (debt.end < end) {  		if (debt.end >= start) {  			comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  		}  		debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  	}  	else {  		debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	intervelStr = "每月";  	break;  case Cycle.seasonly:  	intervel = 3;  	intervelStr = "每季度";  	break;  case Cycle.halfyearly:  	intervel = 6;  	intervelStr = "每半年";  	break;  case Cycle.yearly:  	intervel = 12;  	intervelStr = "每年";  	break;  default:  	intervel = 0;  	intervelStr = "";  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	intervelStr = "每月";  	break;  case Cycle.seasonly:  	intervel = 3;  	intervelStr = "每季度";  	break;  case Cycle.halfyearly:  	intervel = 6;  	intervelStr = "每半年";  	break;  case Cycle.yearly:  	intervel = 12;  	intervelStr = "每年";  	break;  default:  	intervel = 0;  	intervelStr = "";  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	intervelStr = "每月";  	break;  case Cycle.seasonly:  	intervel = 3;  	intervelStr = "每季度";  	break;  case Cycle.halfyearly:  	intervel = 6;  	intervelStr = "每半年";  	break;  case Cycle.yearly:  	intervel = 12;  	intervelStr = "每年";  	break;  default:  	intervel = 0;  	intervelStr = "";  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.end < end) {  	if (debt.end >= start) {  		comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  	}  	debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  }  else {  	debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.end < end) {  	if (debt.end >= start) {  		comment += "╬生活支出终止:\"" + debt.name + "\"(" + intervelStr + debt.volume.ToString () + "万); ";  	}  	debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  }  else {  	debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: debtMoney += debt.volume * ((debt.end.Year - debt.start.Year) * 12 + debt.end.Month - debt.start.Month) / intervel;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: debtMoney += debt.volume * ((int)((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) / intervel);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: data.Add (dateTimePicker_year.Value.Year.ToString () + "-" + i.ToString ().PadLeft (2' '0'));  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.end < start)  		continue;  	if (project.start < end) {  		if (project.end >= end) {  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  				monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.end < start)  		continue;  	if (project.start < end) {  		if (project.end >= end) {  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  				monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.end < start)  		continue;  	if (project.start < end) {  		if (project.end >= end) {  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  				monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.end < start)  		continue;  	if (project.start < end) {  		if (project.end >= end) {  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  				monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.end < start)  		continue;  	if (project.start < end) {  		if (project.end >= end) {  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  				monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.end >= end) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  			monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.end >= end) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  			monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.end >= end) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  			monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.end >= end) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  			monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.start < end) {  	if (project.end >= end) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  			monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.end >= end) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  		monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.end >= end) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  		monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.end >= end) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  		monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.end >= end) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  		monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (project.end >= end) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  		monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  	monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) != 0 && ((end.Year - project.start.Year) * 12 + end.Month - project.start.Month) % intervel == 0) {  	monthIncome += (project.volume * (project.rate * intervel / 12f) * intervel);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.end < start)  		continue;  	if (debt.start < end) {  		if (debt.end >= end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  				monthPayout += debt.volume;  				monthDebt += debt.volume;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.end < start)  		continue;  	if (debt.start < end) {  		if (debt.end >= end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  				monthPayout += debt.volume;  				monthDebt += debt.volume;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.end < start)  		continue;  	if (debt.start < end) {  		if (debt.end >= end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  				monthPayout += debt.volume;  				monthDebt += debt.volume;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.end < start)  		continue;  	if (debt.start < end) {  		if (debt.end >= end) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  				monthPayout += debt.volume;  				monthDebt += debt.volume;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	if (debt.end >= end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  			monthPayout += debt.volume;  			monthDebt += debt.volume;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	if (debt.end >= end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  			monthPayout += debt.volume;  			monthDebt += debt.volume;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	if (debt.end >= end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  			monthPayout += debt.volume;  			monthDebt += debt.volume;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.start < end) {  	if (debt.end >= end) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  			monthPayout += debt.volume;  			monthDebt += debt.volume;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.end >= end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  		monthPayout += debt.volume;  		monthDebt += debt.volume;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.end >= end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  		monthPayout += debt.volume;  		monthDebt += debt.volume;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.end >= end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  		monthPayout += debt.volume;  		monthDebt += debt.volume;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (debt.end >= end) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  		monthPayout += debt.volume;  		monthDebt += debt.volume;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,Reload,The following statement contains a magic number: if (((end.Year - debt.start.Year) * 12 + end.Month - debt.start.Month) % intervel == 0) {  	monthPayout += debt.volume;  	monthDebt += debt.volume;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Location = new System.Drawing.Point (3' 3);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Location = new System.Drawing.Point (3' 3);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.RowTemplate.Height = 23;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Size = new System.Drawing.Size (1500' 60);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Size = new System.Drawing.Size (1500' 60);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: Column_Header.Width = 30;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: Column_Comment.Width = 1766;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [2].Value = data [1];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [3].Value = data [2];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [3].Value = data [2];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [4].Value = data [3];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [4].Value = data [3];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [5].Value = data [4];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [5].Value = data [4];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [6].Value = data [5];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [6].Value = data [5];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [7].Value = data [6];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [7].Value = data [6];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [8].Value = data [7];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [8].Value = data [7];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [9].Value = data [8];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateDGV,The following statement contains a magic number: DGV.Rows [0].Cells [9].Value = data [8];  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: GB.Size = new System.Drawing.Size (735' 255);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: GB.Size = new System.Drawing.Size (735' 255);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabControl_month.ItemSize = new System.Drawing.Size (145' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabControl_month.ItemSize = new System.Drawing.Size (145' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabControl_month.Location = new System.Drawing.Point (3' 17);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabControl_month.Location = new System.Drawing.Point (3' 17);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabControl_month.Size = new System.Drawing.Size (729' 235);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabControl_month.Size = new System.Drawing.Size (729' 235);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabControl_month.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_cash.Location = new System.Drawing.Point (4' 24);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_cash.Location = new System.Drawing.Point (4' 24);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_cash.Padding = new Padding (3);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_cash.Size = new System.Drawing.Size (721' 207);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_cash.Size = new System.Drawing.Size (721' 207);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_new.Location = new System.Drawing.Point (624' 111);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_new.Location = new System.Drawing.Point (624' 111);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_new.Size = new System.Drawing.Size (75' 23);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_new.Size = new System.Drawing.Size (75' 23);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_new.TabIndex = 7;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_save.Location = new System.Drawing.Point (624' 151);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_save.Location = new System.Drawing.Point (624' 151);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_save.Size = new System.Drawing.Size (75' 23);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_save.Size = new System.Drawing.Size (75' 23);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_save.TabIndex = 7;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupbox_cash.Location = new System.Drawing.Point (136' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupbox_cash.Location = new System.Drawing.Point (136' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupbox_cash.Size = new System.Drawing.Size (471' 167);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupbox_cash.Size = new System.Drawing.Size (471' 167);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupbox_cash.TabIndex = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_day.Location = new System.Drawing.Point (350' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_day.Location = new System.Drawing.Point (350' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_day.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_day.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_day.TabIndex = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycle.Location = new System.Drawing.Point (236' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycle.Location = new System.Drawing.Point (236' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycle.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycle.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycle.TabIndex = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volume.Location = new System.Drawing.Point (6' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volume.Location = new System.Drawing.Point (6' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volume.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volume.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volume.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volume.TabIndex = 4;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rate.DecimalPlaces = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rate.Increment = new decimal (new int[] {  	1'  	0'  	0'  	131072  });  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rate.Location = new System.Drawing.Point (121' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rate.Location = new System.Drawing.Point (121' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rate.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rate.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rate.TabIndex = 4;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label3.Location = new System.Drawing.Point (236' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label3.Location = new System.Drawing.Point (236' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label3.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label3.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label3.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label10.Location = new System.Drawing.Point (6' 64);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label10.Location = new System.Drawing.Point (6' 64);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label10.Size = new System.Drawing.Size (65' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label10.Size = new System.Drawing.Size (65' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label10.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label2.Location = new System.Drawing.Point (121' 64);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label2.Location = new System.Drawing.Point (121' 64);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label2.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label2.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label2.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label7.Location = new System.Drawing.Point (6' 116);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label7.Location = new System.Drawing.Point (6' 116);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label7.Size = new System.Drawing.Size (29' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label7.Size = new System.Drawing.Size (29' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label7.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label6.Location = new System.Drawing.Point (350' 67);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label6.Location = new System.Drawing.Point (350' 67);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label6.Size = new System.Drawing.Size (41' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label6.Size = new System.Drawing.Size (41' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label6.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label4.Location = new System.Drawing.Point (121' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label4.Location = new System.Drawing.Point (121' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label4.Size = new System.Drawing.Size (41' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label4.Size = new System.Drawing.Size (41' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label4.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label8.Location = new System.Drawing.Point (236' 67);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label8.Location = new System.Drawing.Point (236' 67);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label8.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label8.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label8.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label5.Location = new System.Drawing.Point (6' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label5.Location = new System.Drawing.Point (6' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label5.Size = new System.Drawing.Size (77' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label5.Size = new System.Drawing.Size (77' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label5.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_phone.Location = new System.Drawing.Point (236' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_phone.Location = new System.Drawing.Point (236' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_phone.MaxLength = 11;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_phone.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_phone.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_phone.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_comment.Location = new System.Drawing.Point (6' 133);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_comment.Location = new System.Drawing.Point (6' 133);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_comment.Size = new System.Drawing.Size (444' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_comment.Size = new System.Drawing.Size (444' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_comment.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contact.Location = new System.Drawing.Point (121' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contact.Location = new System.Drawing.Point (121' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contact.MaxLength = 8;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contact.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contact.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contact.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_name.Location = new System.Drawing.Point (6' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_name.Location = new System.Drawing.Point (6' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_name.MaxLength = 32;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_name.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_name.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_name.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label1.Font = new System.Drawing.Font ("SimSun"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(134)));  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label1.Location = new System.Drawing.Point (18' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label1.Location = new System.Drawing.Point (18' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label1.Size = new System.Drawing.Size (84' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label1.Size = new System.Drawing.Size (84' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_cash.Location = new System.Drawing.Point (20' 40);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_cash.Location = new System.Drawing.Point (20' 40);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_cash.Size = new System.Drawing.Size (87' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_cash.Size = new System.Drawing.Size (87' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_cash.Maximum = 100000;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_cash.Minimum = -1000;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_cash.DecimalPlaces = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_invest.Location = new System.Drawing.Point (4' 24);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_invest.Location = new System.Drawing.Point (4' 24);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_invest.Padding = new Padding (3);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_invest.Size = new System.Drawing.Size (721' 207);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_invest.Size = new System.Drawing.Size (721' 207);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label18.Font = new System.Drawing.Font ("SimSun"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(134)));  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label18.Location = new System.Drawing.Point (18' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label18.Location = new System.Drawing.Point (18' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label18.Size = new System.Drawing.Size (84' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label18.Size = new System.Drawing.Size (84' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label18.TabIndex = 14;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_invest.Location = new System.Drawing.Point (20' 40);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_invest.Location = new System.Drawing.Point (20' 40);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_invest.Size = new System.Drawing.Size (87' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_invest.Size = new System.Drawing.Size (87' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_invest.TabIndex = 13;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_invest.Maximum = 100000;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupBox_invest.Location = new System.Drawing.Point (258' 6);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupBox_invest.Location = new System.Drawing.Point (258' 6);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupBox_invest.Size = new System.Drawing.Size (457' 195);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupBox_invest.Size = new System.Drawing.Size (457' 195);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupBox_invest.TabIndex = 12;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_dayinvest.Location = new System.Drawing.Point (350' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_dayinvest.Location = new System.Drawing.Point (350' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_dayinvest.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_dayinvest.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_dayinvest.TabIndex = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycleinvest.Location = new System.Drawing.Point (236' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycleinvest.Location = new System.Drawing.Point (236' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycleinvest.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycleinvest.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycleinvest.TabIndex = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_stopinvest.Location = new System.Drawing.Point (246' 160);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_stopinvest.Location = new System.Drawing.Point (246' 160);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_stopinvest.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_stopinvest.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_stopinvest.TabIndex = 9;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumeinvest.Location = new System.Drawing.Point (6' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumeinvest.Location = new System.Drawing.Point (6' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumeinvest.Maximum = new decimal (new int[] {  	10000'  	0'  	0'  	0  });  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumeinvest.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumeinvest.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumeinvest.TabIndex = 4;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rateinvest.DecimalPlaces = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rateinvest.Increment = new decimal (new int[] {  	1'  	0'  	0'  	131072  });  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rateinvest.Location = new System.Drawing.Point (121' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rateinvest.Location = new System.Drawing.Point (121' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rateinvest.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rateinvest.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_rateinvest.TabIndex = 4;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_updateinvest.Location = new System.Drawing.Point (359' 160);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_updateinvest.Location = new System.Drawing.Point (359' 160);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_updateinvest.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_updateinvest.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_updateinvest.TabIndex = 8;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label9.Location = new System.Drawing.Point (236' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label9.Location = new System.Drawing.Point (236' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label9.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label9.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label9.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label11.Location = new System.Drawing.Point (6' 64);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label11.Location = new System.Drawing.Point (6' 64);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label11.Size = new System.Drawing.Size (65' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label11.Size = new System.Drawing.Size (65' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label11.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label12.Location = new System.Drawing.Point (121' 64);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label12.Location = new System.Drawing.Point (121' 64);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label12.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label12.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label12.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label13.Location = new System.Drawing.Point (6' 116);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label13.Location = new System.Drawing.Point (6' 116);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label13.Size = new System.Drawing.Size (29' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label13.Size = new System.Drawing.Size (29' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label13.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label14.Location = new System.Drawing.Point (350' 67);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label14.Location = new System.Drawing.Point (350' 67);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label14.Size = new System.Drawing.Size (41' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label14.Size = new System.Drawing.Size (41' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label14.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label15.Location = new System.Drawing.Point (121' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label15.Location = new System.Drawing.Point (121' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label15.Size = new System.Drawing.Size (41' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label15.Size = new System.Drawing.Size (41' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label15.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label16.Location = new System.Drawing.Point (236' 67);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label16.Location = new System.Drawing.Point (236' 67);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label16.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label16.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label16.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label17.Location = new System.Drawing.Point (6' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label17.Location = new System.Drawing.Point (6' 14);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label17.Size = new System.Drawing.Size (77' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label17.Size = new System.Drawing.Size (77' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label17.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_telephoneinvest.Location = new System.Drawing.Point (236' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_telephoneinvest.Location = new System.Drawing.Point (236' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_telephoneinvest.MaxLength = 11;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_telephoneinvest.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_telephoneinvest.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_telephoneinvest.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_commentinvest.Location = new System.Drawing.Point (6' 133);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_commentinvest.Location = new System.Drawing.Point (6' 133);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_commentinvest.Size = new System.Drawing.Size (444' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_commentinvest.Size = new System.Drawing.Size (444' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_commentinvest.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contactinvest.Location = new System.Drawing.Point (121' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contactinvest.Location = new System.Drawing.Point (121' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contactinvest.MaxLength = 8;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contactinvest.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contactinvest.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_contactinvest.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_nameinvest.Location = new System.Drawing.Point (6' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_nameinvest.Location = new System.Drawing.Point (6' 32);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_nameinvest.MaxLength = 32;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_nameinvest.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_nameinvest.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_nameinvest.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_invest.ItemHeight = 12;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_invest.Location = new System.Drawing.Point (111' 5);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_invest.Location = new System.Drawing.Point (111' 5);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_invest.Size = new System.Drawing.Size (141' 196);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_invest.Size = new System.Drawing.Size (141' 196);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_invest.TabIndex = 7;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_debt.Location = new System.Drawing.Point (4' 24);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_debt.Location = new System.Drawing.Point (4' 24);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_debt.Padding = new Padding (3);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_debt.Size = new System.Drawing.Size (721' 207);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_debt.Size = new System.Drawing.Size (721' 207);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_debt.TabIndex = 4;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label23.Font = new System.Drawing.Font ("SimSun"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(134)));  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label23.Location = new System.Drawing.Point (18' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label23.Location = new System.Drawing.Point (18' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label23.Size = new System.Drawing.Size (84' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label23.Size = new System.Drawing.Size (84' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label23.TabIndex = 25;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_debt.Location = new System.Drawing.Point (20' 40);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_debt.Location = new System.Drawing.Point (20' 40);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_debt.Size = new System.Drawing.Size (87' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_debt.Size = new System.Drawing.Size (87' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_debt.TabIndex = 24;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_debt.Maximum = 100000;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_debt.DecimalPlaces = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupBox_debt.Location = new System.Drawing.Point (273' 6);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupBox_debt.Location = new System.Drawing.Point (273' 6);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupBox_debt.Size = new System.Drawing.Size (323' 195);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupBox_debt.Size = new System.Drawing.Size (323' 195);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: groupBox_debt.TabIndex = 22;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_daydebt.Location = new System.Drawing.Point (150' 95);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_daydebt.Location = new System.Drawing.Point (150' 95);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_daydebt.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_daydebt.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_daydebt.TabIndex = 14;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label22.Location = new System.Drawing.Point (150' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label22.Location = new System.Drawing.Point (150' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label22.Size = new System.Drawing.Size (41' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label22.Size = new System.Drawing.Size (41' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label22.TabIndex = 13;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycledebt.Location = new System.Drawing.Point (27' 95);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycledebt.Location = new System.Drawing.Point (27' 95);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycledebt.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycledebt.Size = new System.Drawing.Size (100' 20);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: comboBox_cycledebt.TabIndex = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumedebt.DecimalPlaces = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumedebt.Increment = new decimal (new int[] {  	1'  	0'  	0'  	65536  });  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumedebt.Location = new System.Drawing.Point (150' 45);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumedebt.Location = new System.Drawing.Point (150' 45);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumedebt.Maximum = new decimal (new int[] {  	1000'  	0'  	0'  	0  });  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumedebt.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumedebt.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_volumedebt.TabIndex = 4;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label19.Location = new System.Drawing.Point (150' 30);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label19.Location = new System.Drawing.Point (150' 30);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label19.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label19.Size = new System.Drawing.Size (53' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label19.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button3.Location = new System.Drawing.Point (403' 97);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button3.Location = new System.Drawing.Point (403' 97);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button3.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button3.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button3.TabIndex = 12;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label20.Location = new System.Drawing.Point (27' 130);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label20.Location = new System.Drawing.Point (27' 130);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label20.Size = new System.Drawing.Size (29' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label20.Size = new System.Drawing.Size (29' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label20.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label21.Location = new System.Drawing.Point (27' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label21.Location = new System.Drawing.Point (27' 81);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label21.Size = new System.Drawing.Size (29' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label21.Size = new System.Drawing.Size (29' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label21.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label24.Location = new System.Drawing.Point (27' 27);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label24.Location = new System.Drawing.Point (27' 27);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label24.Size = new System.Drawing.Size (29' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label24.Size = new System.Drawing.Size (29' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label24.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_commentdebt.Location = new System.Drawing.Point (27' 147);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_commentdebt.Location = new System.Drawing.Point (27' 147);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_commentdebt.Size = new System.Drawing.Size (272' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_commentdebt.Size = new System.Drawing.Size (272' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_commentdebt.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_namedebt.Location = new System.Drawing.Point (27' 45);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_namedebt.Location = new System.Drawing.Point (27' 45);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_namedebt.MaxLength = 8;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_namedebt.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_namedebt.Size = new System.Drawing.Size (100' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: textBox_namedebt.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_stopdebt.Location = new System.Drawing.Point (602' 140);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_stopdebt.Location = new System.Drawing.Point (602' 140);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_stopdebt.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_stopdebt.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_stopdebt.TabIndex = 20;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_updatedebt.Location = new System.Drawing.Point (602' 91);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_updatedebt.Location = new System.Drawing.Point (602' 91);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_updatedebt.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_updatedebt.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_updatedebt.TabIndex = 18;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_newdebt.Location = new System.Drawing.Point (602' 41);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_newdebt.Location = new System.Drawing.Point (602' 41);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_newdebt.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_newdebt.Size = new System.Drawing.Size (91' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_newdebt.TabIndex = 19;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_debt.ItemHeight = 12;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_debt.Location = new System.Drawing.Point (126' 6);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_debt.Location = new System.Drawing.Point (126' 6);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_debt.Size = new System.Drawing.Size (141' 196);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_debt.Size = new System.Drawing.Size (141' 196);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: listBox_debt.TabIndex = 21;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_payout.Location = new System.Drawing.Point (4' 24);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_payout.Location = new System.Drawing.Point (4' 24);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_payout.Padding = new Padding (3);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_payout.Size = new System.Drawing.Size (721' 207);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_payout.Size = new System.Drawing.Size (721' 207);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_payout.TabIndex = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: Column_payout_day.Width = 75;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: Column_payout_volume.Width = 100;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: Column_payout_comment.Width = 300;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_payout.Location = new System.Drawing.Point (129' 18);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_payout.Location = new System.Drawing.Point (129' 18);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_payout.RowTemplate.Height = 23;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_payout.Size = new System.Drawing.Size (486' 171);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_payout.Size = new System.Drawing.Size (486' 171);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_payout.TabIndex = 30;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_savepayout.Location = new System.Drawing.Point (630' 166);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_savepayout.Location = new System.Drawing.Point (630' 166);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_savepayout.Size = new System.Drawing.Size (75' 23);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_savepayout.Size = new System.Drawing.Size (75' 23);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_savepayout.TabIndex = 29;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label25.Font = new System.Drawing.Font ("SimSun"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(134)));  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label25.Location = new System.Drawing.Point (18' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label25.Location = new System.Drawing.Point (18' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label25.Size = new System.Drawing.Size (84' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label25.Size = new System.Drawing.Size (84' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label25.TabIndex = 27;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_payout.Location = new System.Drawing.Point (20' 40);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_payout.Location = new System.Drawing.Point (20' 40);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_payout.Size = new System.Drawing.Size (87' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_payout.Size = new System.Drawing.Size (87' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_payout.TabIndex = 26;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_payout.Maximum = 100000;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_payout.DecimalPlaces = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_income.Location = new System.Drawing.Point (4' 24);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_income.Location = new System.Drawing.Point (4' 24);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_income.Padding = new Padding (3);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_income.Size = new System.Drawing.Size (721' 207);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_income.Size = new System.Drawing.Size (721' 207);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: tabPage_income.TabIndex = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: Column_income_day.Width = 75;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: Column_income_volume.Width = 100;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: Column_income_comment.Width = 300;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_income.Location = new System.Drawing.Point (129' 18);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_income.Location = new System.Drawing.Point (129' 18);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_income.RowTemplate.Height = 23;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_income.Size = new System.Drawing.Size (486' 171);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_income.Size = new System.Drawing.Size (486' 171);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: dataGridView_income.TabIndex = 34;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_saveincome.Location = new System.Drawing.Point (630' 166);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_saveincome.Location = new System.Drawing.Point (630' 166);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_saveincome.Size = new System.Drawing.Size (75' 23);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_saveincome.Size = new System.Drawing.Size (75' 23);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: button_saveincome.TabIndex = 33;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label26.Font = new System.Drawing.Font ("SimSun"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(134)));  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label26.Location = new System.Drawing.Point (18' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label26.Location = new System.Drawing.Point (18' 25);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label26.Size = new System.Drawing.Size (84' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label26.Size = new System.Drawing.Size (84' 12);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: label26.TabIndex = 32;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_income.Location = new System.Drawing.Point (20' 40);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_income.Location = new System.Drawing.Point (20' 40);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_income.Size = new System.Drawing.Size (87' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_income.Size = new System.Drawing.Size (87' 21);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_income.TabIndex = 31;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_income.Maximum = 100000;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: numericUpDown_income.DecimalPlaces = 2;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: contextMenuStrip1.Size = new Size (153' 48);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: contextMenuStrip1.Size = new Size (153' 48);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: ToolStripMenuItem_delete.Size = new Size (152' 22);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The following statement contains a magic number: ToolStripMenuItem_delete.Size = new Size (152' 22);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,tabPage1_SizeChanged,The following statement contains a magic number: flowLayoutPanel1.Height = tabPage1.Height - 37;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (e.ColumnIndex == 0) {  	DataGridView dgv = sender as DataGridView;  	if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  		dgv.Rows [0].Cells [0].Value = "-";  		GroupBox gb;  		GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  		flowLayoutPanel1.Controls.Add (gb);  		flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  		// load values  		DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  		DateTime End = Start.AddMonths (1);  		int intervel;  		TabControl tb = gb.Controls [0] as TabControl;  		TabPage tpCash = tb.TabPages ["tabPage_cash"];  		TabPage tpInvest = tb.TabPages ["tabPage_invest"];  		TabPage tpDebt = tb.TabPages ["tabPage_debt"];  		TabPage tpPayout = tb.TabPages ["tabPage_payout"];  		TabPage tpIncome = tb.TabPages ["tabPage_income"];  		((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  		((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  		((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  		ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  		DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  		DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  		foreach (Project project in ar_Projects) {  			if (project.end < Start)  				continue;  			else if (project.start <= End)  				projList.Items.Add (project.name);  			if (project.start < End) {  				if (project.end >= End) {  					switch (project.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  						incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  						incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  		foreach (Debt debt in ar_Debts) {  			if (debt.end < Start)  				continue;  			else if (debt.start <= End)  				debtList.Items.Add (debt.name);  			if (debt.start < End) {  				if (debt.end >= End) {  					switch (debt.cycle) {  					case Cycle.monthly:  						intervel = 1;  						break;  					case Cycle.seasonly:  						intervel = 3;  						break;  					case Cycle.halfyearly:  						intervel = 6;  						break;  					case Cycle.yearly:  						intervel = 12;  						break;  					default:  						intervel = 0;  						break;  					}  					if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  						payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  						payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  					}  				}  			}  		}  		foreach (Calendar calendar in ar_Calendars) {  			if (calendar.date >= Start && calendar.date < End) {  				foreach (Flow flow in calendar.flows) {  					if (flow.type == FlowType.income) {  						incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else if (flow.type == FlowType.payout) {  						payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  					}  					else {  					}  				}  			}  		}  		foreach (DataGridViewRow row in incomeDGV.Rows) {  			if (!row.IsNewRow)  				(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  		foreach (DataGridViewRow row in payoutDGV.Rows) {  			if (!row.IsNewRow)  				(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  		}  	}  	else {  		dgv.Rows [0].Cells [0].Value = "+";  		flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (dgv.Rows [0].Cells [0].Value.ToString () == "+") {  	dgv.Rows [0].Cells [0].Value = "-";  	GroupBox gb;  	GenerateGB (dgv.Rows [0].Cells [1].Value.ToString ()' out gb);  	flowLayoutPanel1.Controls.Add (gb);  	flowLayoutPanel1.Controls.SetChildIndex (gb' flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  	// load values  	DateTime Start = DateTime.Parse (dgv.Rows [0].Cells [1].Value.ToString ());  	DateTime End = Start.AddMonths (1);  	int intervel;  	TabControl tb = gb.Controls [0] as TabControl;  	TabPage tpCash = tb.TabPages ["tabPage_cash"];  	TabPage tpInvest = tb.TabPages ["tabPage_invest"];  	TabPage tpDebt = tb.TabPages ["tabPage_debt"];  	TabPage tpPayout = tb.TabPages ["tabPage_payout"];  	TabPage tpIncome = tb.TabPages ["tabPage_income"];  	((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  	((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  	((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  	ListBox projList = tpInvest.Controls ["listBox_invest"] as ListBox;  	DataGridView incomeDGV = tpIncome.Controls ["datagridview_income"] as DataGridView;  	DataGridView payoutDGV = tpPayout.Controls ["datagridview_payout"] as DataGridView;  	foreach (Project project in ar_Projects) {  		if (project.end < Start)  			continue;  		else if (project.start <= End)  			projList.Items.Add (project.name);  		if (project.start < End) {  			if (project.end >= End) {  				switch (project.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  					incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  					incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	ListBox debtList = tpDebt.Controls ["listBox_debt"] as ListBox;  	foreach (Debt debt in ar_Debts) {  		if (debt.end < Start)  			continue;  		else if (debt.start <= End)  			debtList.Items.Add (debt.name);  		if (debt.start < End) {  			if (debt.end >= End) {  				switch (debt.cycle) {  				case Cycle.monthly:  					intervel = 1;  					break;  				case Cycle.seasonly:  					intervel = 3;  					break;  				case Cycle.halfyearly:  					intervel = 6;  					break;  				case Cycle.yearly:  					intervel = 12;  					break;  				default:  					intervel = 0;  					break;  				}  				if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  					payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  					payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  				}  			}  		}  	}  	foreach (Calendar calendar in ar_Calendars) {  		if (calendar.date >= Start && calendar.date < End) {  			foreach (Flow flow in calendar.flows) {  				if (flow.type == FlowType.income) {  					incomeDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else if (flow.type == FlowType.payout) {  					payoutDGV.Rows.Add (calendar.date.Day' flow.volume' flow.comment);  				}  				else {  				}  			}  		}  	}  	foreach (DataGridViewRow row in incomeDGV.Rows) {  		if (!row.IsNewRow)  			(tpIncome.Controls ["numericUpDown_income"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  	foreach (DataGridViewRow row in payoutDGV.Rows) {  		if (!row.IsNewRow)  			(tpPayout.Controls ["numericUpDown_payout"] as NumericUpDown).Value += decimal.Parse (row.Cells [1].Value.ToString ());  	}  }  else {  	dgv.Rows [0].Cells [0].Value = "+";  	flowLayoutPanel1.Controls.RemoveAt (flowLayoutPanel1.Controls.IndexOf (dgv) + 1);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: ((NumericUpDown)tpCash.Controls ["numericUpDown_cash"]).Value = decimal.Parse (dgv.Rows [0].Cells [3].Value.ToString ());  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: ((NumericUpDown)tpInvest.Controls ["numericUpDown_invest"]).Value = decimal.Parse (dgv.Rows [0].Cells [4].Value.ToString ());  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: ((NumericUpDown)tpDebt.Controls ["numericUpDown_debt"]).Value = decimal.Parse (dgv.Rows [0].Cells [9].Value.ToString ());  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.end < Start)  		continue;  	else if (project.start <= End)  		projList.Items.Add (project.name);  	if (project.start < End) {  		if (project.end >= End) {  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  				incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  				incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.end < Start)  		continue;  	else if (project.start <= End)  		projList.Items.Add (project.name);  	if (project.start < End) {  		if (project.end >= End) {  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  				incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  				incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.end < Start)  		continue;  	else if (project.start <= End)  		projList.Items.Add (project.name);  	if (project.start < End) {  		if (project.end >= End) {  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  				incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  				incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.end < Start)  		continue;  	else if (project.start <= End)  		projList.Items.Add (project.name);  	if (project.start < End) {  		if (project.end >= End) {  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  				incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  				incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: foreach (Project project in ar_Projects) {  	if (project.end < Start)  		continue;  	else if (project.start <= End)  		projList.Items.Add (project.name);  	if (project.start < End) {  		if (project.end >= End) {  			switch (project.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  				incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  				incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (project.start < End) {  	if (project.end >= End) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  			incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  			incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (project.start < End) {  	if (project.end >= End) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  			incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  			incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (project.start < End) {  	if (project.end >= End) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  			incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  			incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (project.start < End) {  	if (project.end >= End) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  			incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  			incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (project.start < End) {  	if (project.end >= End) {  		switch (project.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  			incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  			incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (project.end >= End) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  		incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  		incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (project.end >= End) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  		incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  		incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (project.end >= End) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  		incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  		incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (project.end >= End) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  		incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  		incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (project.end >= End) {  	switch (project.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  		incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  		incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: switch (project.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  	incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  	incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (((End.Year - project.start.Year) * 12 + End.Month - project.start.Month) % intervel == 0) {  	incomeDGV.Rows.Add (project.start.Day' (project.volume * (project.rate * intervel / 12f) * intervel)' "投资 收益: \"" + project.name + "\"(总投资" + project.volume + "万)");  	incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: incomeDGV.Rows [incomeDGV.Rows.Count - 2].ReadOnly = true;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.end < Start)  		continue;  	else if (debt.start <= End)  		debtList.Items.Add (debt.name);  	if (debt.start < End) {  		if (debt.end >= End) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  				payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  				payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.end < Start)  		continue;  	else if (debt.start <= End)  		debtList.Items.Add (debt.name);  	if (debt.start < End) {  		if (debt.end >= End) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  				payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  				payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.end < Start)  		continue;  	else if (debt.start <= End)  		debtList.Items.Add (debt.name);  	if (debt.start < End) {  		if (debt.end >= End) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  				payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  				payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.end < Start)  		continue;  	else if (debt.start <= End)  		debtList.Items.Add (debt.name);  	if (debt.start < End) {  		if (debt.end >= End) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  				payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  				payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: foreach (Debt debt in ar_Debts) {  	if (debt.end < Start)  		continue;  	else if (debt.start <= End)  		debtList.Items.Add (debt.name);  	if (debt.start < End) {  		if (debt.end >= End) {  			switch (debt.cycle) {  			case Cycle.monthly:  				intervel = 1;  				break;  			case Cycle.seasonly:  				intervel = 3;  				break;  			case Cycle.halfyearly:  				intervel = 6;  				break;  			case Cycle.yearly:  				intervel = 12;  				break;  			default:  				intervel = 0;  				break;  			}  			if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  				payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  				payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  			}  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (debt.start < End) {  	if (debt.end >= End) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  			payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  			payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (debt.start < End) {  	if (debt.end >= End) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  			payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  			payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (debt.start < End) {  	if (debt.end >= End) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  			payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  			payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (debt.start < End) {  	if (debt.end >= End) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  			payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  			payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (debt.start < End) {  	if (debt.end >= End) {  		switch (debt.cycle) {  		case Cycle.monthly:  			intervel = 1;  			break;  		case Cycle.seasonly:  			intervel = 3;  			break;  		case Cycle.halfyearly:  			intervel = 6;  			break;  		case Cycle.yearly:  			intervel = 12;  			break;  		default:  			intervel = 0;  			break;  		}  		if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  			payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  			payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (debt.end >= End) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  		payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  		payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (debt.end >= End) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  		payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  		payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (debt.end >= End) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  		payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  		payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (debt.end >= End) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  		payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  		payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (debt.end >= End) {  	switch (debt.cycle) {  	case Cycle.monthly:  		intervel = 1;  		break;  	case Cycle.seasonly:  		intervel = 3;  		break;  	case Cycle.halfyearly:  		intervel = 6;  		break;  	case Cycle.yearly:  		intervel = 12;  		break;  	default:  		intervel = 0;  		break;  	}  	if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  		payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  		payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: switch (debt.cycle) {  case Cycle.monthly:  	intervel = 1;  	break;  case Cycle.seasonly:  	intervel = 3;  	break;  case Cycle.halfyearly:  	intervel = 6;  	break;  case Cycle.yearly:  	intervel = 12;  	break;  default:  	intervel = 0;  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: intervel = 3;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: intervel = 6;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: intervel = 12;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  	payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  	payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: if (((End.Year - debt.start.Year) * 12 + End.Month - debt.start.Month) % intervel == 0) {  	payoutDGV.Rows.Add (debt.start.Day' debt.volume' "生活支出 支出: \"" + debt.name + "\"");  	payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_CellContentClick,The following statement contains a magic number: payoutDGV.Rows [payoutDGV.Rows.Count - 2].ReadOnly = true;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_RowPrePaint,The following statement contains a magic number: if (dgv.Rows [e.RowIndex].Cells [8].Value.ToString ().Contains ("新投资"))  	dgv.Rows [e.RowIndex].Cells [4].Style.BackColor = Color.Orange;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_RowPrePaint,The following statement contains a magic number: if (dgv.Rows [e.RowIndex].Cells [8].Value.ToString ().Contains ("新投资"))  	dgv.Rows [e.RowIndex].Cells [4].Style.BackColor = Color.Orange;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_RowPrePaint,The following statement contains a magic number: dgv.Rows [e.RowIndex].Cells [4].Style.BackColor = Color.Orange;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_RowPrePaint,The following statement contains a magic number: if (dgv.Rows [e.RowIndex].Cells [3].Value.ToString ().Contains ("-"))  	dgv.Rows [e.RowIndex].Cells [3].Style.BackColor = Color.Red;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_RowPrePaint,The following statement contains a magic number: if (dgv.Rows [e.RowIndex].Cells [3].Value.ToString ().Contains ("-"))  	dgv.Rows [e.RowIndex].Cells [3].Style.BackColor = Color.Red;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,DGV_RowPrePaint,The following statement contains a magic number: dgv.Rows [e.RowIndex].Cells [3].Style.BackColor = Color.Red;  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_save_Click,The following statement contains a magic number: project.end = new DateTime (2100' 1' 1);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_updatedebt_Click,The following statement contains a magic number: if (DialogResult.Yes == MessageBox.Show ("请确认保存新生活支出: \"" + name + "\""' "新建生活支出"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) {  	DateTime curMonth = DateTime.Parse ((gb.Parent.Parent.Parent as GroupBox).Text);  	Debt debt = new Debt ();  	debt.name = name;  	debt.volume = volume;  	debt.cycle = (Cycle)Enum.ToObject (typeof(Cycle)' byte.Parse (cycle.ToString ()));  	debt.start = new DateTime (curMonth.Year' curMonth.Month' day + 1);  	debt.end = new DateTime (2100' 1' 1);  	debt.comment = comment;  	ar_Debts.Add (debt);  	try {  		Xml.UpdateDebt (file_Debts' ar_Debts);  		MessageBox.Show ("生活支出信息保存成功!"' "新建生活支出"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		Reload ();  	}  	catch (Exception ex) {  		MessageBox.Show ("生活支出信息保存失败!\n\n(" + ex.Message + ")"' "新建生活支出"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_updatedebt_Click,The following statement contains a magic number: debt.end = new DateTime (2100' 1' 1);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: if (DialogResult.Yes == MessageBox.Show ("确认修改本月支出信息?"' "确认修改"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) {  	DataGridView dgv = (sender as Button).Parent.Controls ["dataGridView_payout"] as DataGridView;  	DateTime curMonth = DateTime.Parse ((dgv.Parent.Parent.Parent as GroupBox).Text);  	for (int i = 0; i < ar_Calendars.Count; i++) {  		Calendar c = (Calendar)ar_Calendars [i];  		if (c.date.Year == curMonth.Year && c.date.Month == curMonth.Month) {  			ArrayList newflows = new ArrayList ();  			for (int j = 0; j < c.flows.Count; j++) {  				Flow f = (Flow)c.flows [j];  				if (f.type == FlowType.payout) {  					c.flows.Remove (f);  					j--;  				}  			}  		}  	}  	try {  		foreach (DataGridViewRow row in dgv.Rows) {  			if (!row.ReadOnly && !row.IsNewRow) {  				Calendar calendar = new Calendar ();  				calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = double.Parse (row.Cells [1].Value.ToString ());  				flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  				foreach (Calendar existC in ar_Calendars) {  					if (existC.date == calendar.date) {  						existC.flows.Add (flow);  						calendar.date = new DateTime (1000' 1' 1);  						break;  					}  				}  				if (calendar.date.Year != 1000) {  					calendar.flows = new ArrayList ();  					calendar.flows.Add (flow);  					ar_Calendars.Add (calendar);  				}  			}  		}  		Xml.UpdateCalendar (file_Calendars' ar_Calendars);  		MessageBox.Show ("支出信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		Reload ();  	}  	catch (Exception ex) {  		MessageBox.Show ("支出信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: if (DialogResult.Yes == MessageBox.Show ("确认修改本月支出信息?"' "确认修改"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) {  	DataGridView dgv = (sender as Button).Parent.Controls ["dataGridView_payout"] as DataGridView;  	DateTime curMonth = DateTime.Parse ((dgv.Parent.Parent.Parent as GroupBox).Text);  	for (int i = 0; i < ar_Calendars.Count; i++) {  		Calendar c = (Calendar)ar_Calendars [i];  		if (c.date.Year == curMonth.Year && c.date.Month == curMonth.Month) {  			ArrayList newflows = new ArrayList ();  			for (int j = 0; j < c.flows.Count; j++) {  				Flow f = (Flow)c.flows [j];  				if (f.type == FlowType.payout) {  					c.flows.Remove (f);  					j--;  				}  			}  		}  	}  	try {  		foreach (DataGridViewRow row in dgv.Rows) {  			if (!row.ReadOnly && !row.IsNewRow) {  				Calendar calendar = new Calendar ();  				calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = double.Parse (row.Cells [1].Value.ToString ());  				flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  				foreach (Calendar existC in ar_Calendars) {  					if (existC.date == calendar.date) {  						existC.flows.Add (flow);  						calendar.date = new DateTime (1000' 1' 1);  						break;  					}  				}  				if (calendar.date.Year != 1000) {  					calendar.flows = new ArrayList ();  					calendar.flows.Add (flow);  					ar_Calendars.Add (calendar);  				}  			}  		}  		Xml.UpdateCalendar (file_Calendars' ar_Calendars);  		MessageBox.Show ("支出信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		Reload ();  	}  	catch (Exception ex) {  		MessageBox.Show ("支出信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: if (DialogResult.Yes == MessageBox.Show ("确认修改本月支出信息?"' "确认修改"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) {  	DataGridView dgv = (sender as Button).Parent.Controls ["dataGridView_payout"] as DataGridView;  	DateTime curMonth = DateTime.Parse ((dgv.Parent.Parent.Parent as GroupBox).Text);  	for (int i = 0; i < ar_Calendars.Count; i++) {  		Calendar c = (Calendar)ar_Calendars [i];  		if (c.date.Year == curMonth.Year && c.date.Month == curMonth.Month) {  			ArrayList newflows = new ArrayList ();  			for (int j = 0; j < c.flows.Count; j++) {  				Flow f = (Flow)c.flows [j];  				if (f.type == FlowType.payout) {  					c.flows.Remove (f);  					j--;  				}  			}  		}  	}  	try {  		foreach (DataGridViewRow row in dgv.Rows) {  			if (!row.ReadOnly && !row.IsNewRow) {  				Calendar calendar = new Calendar ();  				calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = double.Parse (row.Cells [1].Value.ToString ());  				flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  				foreach (Calendar existC in ar_Calendars) {  					if (existC.date == calendar.date) {  						existC.flows.Add (flow);  						calendar.date = new DateTime (1000' 1' 1);  						break;  					}  				}  				if (calendar.date.Year != 1000) {  					calendar.flows = new ArrayList ();  					calendar.flows.Add (flow);  					ar_Calendars.Add (calendar);  				}  			}  		}  		Xml.UpdateCalendar (file_Calendars' ar_Calendars);  		MessageBox.Show ("支出信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		Reload ();  	}  	catch (Exception ex) {  		MessageBox.Show ("支出信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: if (DialogResult.Yes == MessageBox.Show ("确认修改本月支出信息?"' "确认修改"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) {  	DataGridView dgv = (sender as Button).Parent.Controls ["dataGridView_payout"] as DataGridView;  	DateTime curMonth = DateTime.Parse ((dgv.Parent.Parent.Parent as GroupBox).Text);  	for (int i = 0; i < ar_Calendars.Count; i++) {  		Calendar c = (Calendar)ar_Calendars [i];  		if (c.date.Year == curMonth.Year && c.date.Month == curMonth.Month) {  			ArrayList newflows = new ArrayList ();  			for (int j = 0; j < c.flows.Count; j++) {  				Flow f = (Flow)c.flows [j];  				if (f.type == FlowType.payout) {  					c.flows.Remove (f);  					j--;  				}  			}  		}  	}  	try {  		foreach (DataGridViewRow row in dgv.Rows) {  			if (!row.ReadOnly && !row.IsNewRow) {  				Calendar calendar = new Calendar ();  				calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  				Flow flow = new Flow ();  				flow.type = FlowType.payout;  				flow.volume = double.Parse (row.Cells [1].Value.ToString ());  				flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  				foreach (Calendar existC in ar_Calendars) {  					if (existC.date == calendar.date) {  						existC.flows.Add (flow);  						calendar.date = new DateTime (1000' 1' 1);  						break;  					}  				}  				if (calendar.date.Year != 1000) {  					calendar.flows = new ArrayList ();  					calendar.flows.Add (flow);  					ar_Calendars.Add (calendar);  				}  			}  		}  		Xml.UpdateCalendar (file_Calendars' ar_Calendars);  		MessageBox.Show ("支出信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		Reload ();  	}  	catch (Exception ex) {  		MessageBox.Show ("支出信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: try {  	foreach (DataGridViewRow row in dgv.Rows) {  		if (!row.ReadOnly && !row.IsNewRow) {  			Calendar calendar = new Calendar ();  			calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = double.Parse (row.Cells [1].Value.ToString ());  			flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  			foreach (Calendar existC in ar_Calendars) {  				if (existC.date == calendar.date) {  					existC.flows.Add (flow);  					calendar.date = new DateTime (1000' 1' 1);  					break;  				}  			}  			if (calendar.date.Year != 1000) {  				calendar.flows = new ArrayList ();  				calendar.flows.Add (flow);  				ar_Calendars.Add (calendar);  			}  		}  	}  	Xml.UpdateCalendar (file_Calendars' ar_Calendars);  	MessageBox.Show ("支出信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	Reload ();  }  catch (Exception ex) {  	MessageBox.Show ("支出信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: try {  	foreach (DataGridViewRow row in dgv.Rows) {  		if (!row.ReadOnly && !row.IsNewRow) {  			Calendar calendar = new Calendar ();  			calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = double.Parse (row.Cells [1].Value.ToString ());  			flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  			foreach (Calendar existC in ar_Calendars) {  				if (existC.date == calendar.date) {  					existC.flows.Add (flow);  					calendar.date = new DateTime (1000' 1' 1);  					break;  				}  			}  			if (calendar.date.Year != 1000) {  				calendar.flows = new ArrayList ();  				calendar.flows.Add (flow);  				ar_Calendars.Add (calendar);  			}  		}  	}  	Xml.UpdateCalendar (file_Calendars' ar_Calendars);  	MessageBox.Show ("支出信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	Reload ();  }  catch (Exception ex) {  	MessageBox.Show ("支出信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: try {  	foreach (DataGridViewRow row in dgv.Rows) {  		if (!row.ReadOnly && !row.IsNewRow) {  			Calendar calendar = new Calendar ();  			calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = double.Parse (row.Cells [1].Value.ToString ());  			flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  			foreach (Calendar existC in ar_Calendars) {  				if (existC.date == calendar.date) {  					existC.flows.Add (flow);  					calendar.date = new DateTime (1000' 1' 1);  					break;  				}  			}  			if (calendar.date.Year != 1000) {  				calendar.flows = new ArrayList ();  				calendar.flows.Add (flow);  				ar_Calendars.Add (calendar);  			}  		}  	}  	Xml.UpdateCalendar (file_Calendars' ar_Calendars);  	MessageBox.Show ("支出信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	Reload ();  }  catch (Exception ex) {  	MessageBox.Show ("支出信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: try {  	foreach (DataGridViewRow row in dgv.Rows) {  		if (!row.ReadOnly && !row.IsNewRow) {  			Calendar calendar = new Calendar ();  			calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  			Flow flow = new Flow ();  			flow.type = FlowType.payout;  			flow.volume = double.Parse (row.Cells [1].Value.ToString ());  			flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  			foreach (Calendar existC in ar_Calendars) {  				if (existC.date == calendar.date) {  					existC.flows.Add (flow);  					calendar.date = new DateTime (1000' 1' 1);  					break;  				}  			}  			if (calendar.date.Year != 1000) {  				calendar.flows = new ArrayList ();  				calendar.flows.Add (flow);  				ar_Calendars.Add (calendar);  			}  		}  	}  	Xml.UpdateCalendar (file_Calendars' ar_Calendars);  	MessageBox.Show ("支出信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	Reload ();  }  catch (Exception ex) {  	MessageBox.Show ("支出信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dgv.Rows) {  	if (!row.ReadOnly && !row.IsNewRow) {  		Calendar calendar = new Calendar ();  		calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  		Flow flow = new Flow ();  		flow.type = FlowType.payout;  		flow.volume = double.Parse (row.Cells [1].Value.ToString ());  		flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  		foreach (Calendar existC in ar_Calendars) {  			if (existC.date == calendar.date) {  				existC.flows.Add (flow);  				calendar.date = new DateTime (1000' 1' 1);  				break;  			}  		}  		if (calendar.date.Year != 1000) {  			calendar.flows = new ArrayList ();  			calendar.flows.Add (flow);  			ar_Calendars.Add (calendar);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dgv.Rows) {  	if (!row.ReadOnly && !row.IsNewRow) {  		Calendar calendar = new Calendar ();  		calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  		Flow flow = new Flow ();  		flow.type = FlowType.payout;  		flow.volume = double.Parse (row.Cells [1].Value.ToString ());  		flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  		foreach (Calendar existC in ar_Calendars) {  			if (existC.date == calendar.date) {  				existC.flows.Add (flow);  				calendar.date = new DateTime (1000' 1' 1);  				break;  			}  		}  		if (calendar.date.Year != 1000) {  			calendar.flows = new ArrayList ();  			calendar.flows.Add (flow);  			ar_Calendars.Add (calendar);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dgv.Rows) {  	if (!row.ReadOnly && !row.IsNewRow) {  		Calendar calendar = new Calendar ();  		calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  		Flow flow = new Flow ();  		flow.type = FlowType.payout;  		flow.volume = double.Parse (row.Cells [1].Value.ToString ());  		flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  		foreach (Calendar existC in ar_Calendars) {  			if (existC.date == calendar.date) {  				existC.flows.Add (flow);  				calendar.date = new DateTime (1000' 1' 1);  				break;  			}  		}  		if (calendar.date.Year != 1000) {  			calendar.flows = new ArrayList ();  			calendar.flows.Add (flow);  			ar_Calendars.Add (calendar);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dgv.Rows) {  	if (!row.ReadOnly && !row.IsNewRow) {  		Calendar calendar = new Calendar ();  		calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  		Flow flow = new Flow ();  		flow.type = FlowType.payout;  		flow.volume = double.Parse (row.Cells [1].Value.ToString ());  		flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  		foreach (Calendar existC in ar_Calendars) {  			if (existC.date == calendar.date) {  				existC.flows.Add (flow);  				calendar.date = new DateTime (1000' 1' 1);  				break;  			}  		}  		if (calendar.date.Year != 1000) {  			calendar.flows = new ArrayList ();  			calendar.flows.Add (flow);  			ar_Calendars.Add (calendar);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: if (!row.ReadOnly && !row.IsNewRow) {  	Calendar calendar = new Calendar ();  	calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  	Flow flow = new Flow ();  	flow.type = FlowType.payout;  	flow.volume = double.Parse (row.Cells [1].Value.ToString ());  	flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  	foreach (Calendar existC in ar_Calendars) {  		if (existC.date == calendar.date) {  			existC.flows.Add (flow);  			calendar.date = new DateTime (1000' 1' 1);  			break;  		}  	}  	if (calendar.date.Year != 1000) {  		calendar.flows = new ArrayList ();  		calendar.flows.Add (flow);  		ar_Calendars.Add (calendar);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: if (!row.ReadOnly && !row.IsNewRow) {  	Calendar calendar = new Calendar ();  	calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  	Flow flow = new Flow ();  	flow.type = FlowType.payout;  	flow.volume = double.Parse (row.Cells [1].Value.ToString ());  	flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  	foreach (Calendar existC in ar_Calendars) {  		if (existC.date == calendar.date) {  			existC.flows.Add (flow);  			calendar.date = new DateTime (1000' 1' 1);  			break;  		}  	}  	if (calendar.date.Year != 1000) {  		calendar.flows = new ArrayList ();  		calendar.flows.Add (flow);  		ar_Calendars.Add (calendar);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: if (!row.ReadOnly && !row.IsNewRow) {  	Calendar calendar = new Calendar ();  	calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  	Flow flow = new Flow ();  	flow.type = FlowType.payout;  	flow.volume = double.Parse (row.Cells [1].Value.ToString ());  	flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  	foreach (Calendar existC in ar_Calendars) {  		if (existC.date == calendar.date) {  			existC.flows.Add (flow);  			calendar.date = new DateTime (1000' 1' 1);  			break;  		}  	}  	if (calendar.date.Year != 1000) {  		calendar.flows = new ArrayList ();  		calendar.flows.Add (flow);  		ar_Calendars.Add (calendar);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: if (!row.ReadOnly && !row.IsNewRow) {  	Calendar calendar = new Calendar ();  	calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  	Flow flow = new Flow ();  	flow.type = FlowType.payout;  	flow.volume = double.Parse (row.Cells [1].Value.ToString ());  	flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  	foreach (Calendar existC in ar_Calendars) {  		if (existC.date == calendar.date) {  			existC.flows.Add (flow);  			calendar.date = new DateTime (1000' 1' 1);  			break;  		}  	}  	if (calendar.date.Year != 1000) {  		calendar.flows = new ArrayList ();  		calendar.flows.Add (flow);  		ar_Calendars.Add (calendar);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: foreach (Calendar existC in ar_Calendars) {  	if (existC.date == calendar.date) {  		existC.flows.Add (flow);  		calendar.date = new DateTime (1000' 1' 1);  		break;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: if (existC.date == calendar.date) {  	existC.flows.Add (flow);  	calendar.date = new DateTime (1000' 1' 1);  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: calendar.date = new DateTime (1000' 1' 1);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_savepayout_Click,The following statement contains a magic number: if (calendar.date.Year != 1000) {  	calendar.flows = new ArrayList ();  	calendar.flows.Add (flow);  	ar_Calendars.Add (calendar);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: if (DialogResult.Yes == MessageBox.Show ("确认修改本月收入信息?"' "确认修改"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) {  	DataGridView dgv = (sender as Button).Parent.Controls ["dataGridView_income"] as DataGridView;  	DateTime curMonth = DateTime.Parse ((dgv.Parent.Parent.Parent as GroupBox).Text);  	for (int i = 0; i < ar_Calendars.Count; i++) {  		Calendar c = (Calendar)ar_Calendars [i];  		if (c.date.Year == curMonth.Year && c.date.Month == curMonth.Month) {  			ArrayList newflows = new ArrayList ();  			for (int j = 0; j < c.flows.Count; j++) {  				Flow f = (Flow)c.flows [j];  				if (f.type == FlowType.income) {  					c.flows.Remove (f);  					j--;  				}  			}  		}  	}  	try {  		foreach (DataGridViewRow row in dgv.Rows) {  			if (!row.ReadOnly && !row.IsNewRow) {  				Calendar calendar = new Calendar ();  				calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  				Flow flow = new Flow ();  				flow.type = FlowType.income;  				flow.volume = double.Parse (row.Cells [1].Value.ToString ());  				flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  				foreach (Calendar existC in ar_Calendars) {  					if (existC.date == calendar.date) {  						existC.flows.Add (flow);  						calendar.date = new DateTime (1000' 1' 1);  						break;  					}  				}  				if (calendar.date.Year != 1000) {  					calendar.flows = new ArrayList ();  					calendar.flows.Add (flow);  					ar_Calendars.Add (calendar);  				}  			}  		}  		Xml.UpdateCalendar (file_Calendars' ar_Calendars);  		MessageBox.Show ("收入信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		Reload ();  	}  	catch (Exception ex) {  		MessageBox.Show ("收入信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: if (DialogResult.Yes == MessageBox.Show ("确认修改本月收入信息?"' "确认修改"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) {  	DataGridView dgv = (sender as Button).Parent.Controls ["dataGridView_income"] as DataGridView;  	DateTime curMonth = DateTime.Parse ((dgv.Parent.Parent.Parent as GroupBox).Text);  	for (int i = 0; i < ar_Calendars.Count; i++) {  		Calendar c = (Calendar)ar_Calendars [i];  		if (c.date.Year == curMonth.Year && c.date.Month == curMonth.Month) {  			ArrayList newflows = new ArrayList ();  			for (int j = 0; j < c.flows.Count; j++) {  				Flow f = (Flow)c.flows [j];  				if (f.type == FlowType.income) {  					c.flows.Remove (f);  					j--;  				}  			}  		}  	}  	try {  		foreach (DataGridViewRow row in dgv.Rows) {  			if (!row.ReadOnly && !row.IsNewRow) {  				Calendar calendar = new Calendar ();  				calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  				Flow flow = new Flow ();  				flow.type = FlowType.income;  				flow.volume = double.Parse (row.Cells [1].Value.ToString ());  				flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  				foreach (Calendar existC in ar_Calendars) {  					if (existC.date == calendar.date) {  						existC.flows.Add (flow);  						calendar.date = new DateTime (1000' 1' 1);  						break;  					}  				}  				if (calendar.date.Year != 1000) {  					calendar.flows = new ArrayList ();  					calendar.flows.Add (flow);  					ar_Calendars.Add (calendar);  				}  			}  		}  		Xml.UpdateCalendar (file_Calendars' ar_Calendars);  		MessageBox.Show ("收入信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		Reload ();  	}  	catch (Exception ex) {  		MessageBox.Show ("收入信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: if (DialogResult.Yes == MessageBox.Show ("确认修改本月收入信息?"' "确认修改"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) {  	DataGridView dgv = (sender as Button).Parent.Controls ["dataGridView_income"] as DataGridView;  	DateTime curMonth = DateTime.Parse ((dgv.Parent.Parent.Parent as GroupBox).Text);  	for (int i = 0; i < ar_Calendars.Count; i++) {  		Calendar c = (Calendar)ar_Calendars [i];  		if (c.date.Year == curMonth.Year && c.date.Month == curMonth.Month) {  			ArrayList newflows = new ArrayList ();  			for (int j = 0; j < c.flows.Count; j++) {  				Flow f = (Flow)c.flows [j];  				if (f.type == FlowType.income) {  					c.flows.Remove (f);  					j--;  				}  			}  		}  	}  	try {  		foreach (DataGridViewRow row in dgv.Rows) {  			if (!row.ReadOnly && !row.IsNewRow) {  				Calendar calendar = new Calendar ();  				calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  				Flow flow = new Flow ();  				flow.type = FlowType.income;  				flow.volume = double.Parse (row.Cells [1].Value.ToString ());  				flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  				foreach (Calendar existC in ar_Calendars) {  					if (existC.date == calendar.date) {  						existC.flows.Add (flow);  						calendar.date = new DateTime (1000' 1' 1);  						break;  					}  				}  				if (calendar.date.Year != 1000) {  					calendar.flows = new ArrayList ();  					calendar.flows.Add (flow);  					ar_Calendars.Add (calendar);  				}  			}  		}  		Xml.UpdateCalendar (file_Calendars' ar_Calendars);  		MessageBox.Show ("收入信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		Reload ();  	}  	catch (Exception ex) {  		MessageBox.Show ("收入信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: if (DialogResult.Yes == MessageBox.Show ("确认修改本月收入信息?"' "确认修改"' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) {  	DataGridView dgv = (sender as Button).Parent.Controls ["dataGridView_income"] as DataGridView;  	DateTime curMonth = DateTime.Parse ((dgv.Parent.Parent.Parent as GroupBox).Text);  	for (int i = 0; i < ar_Calendars.Count; i++) {  		Calendar c = (Calendar)ar_Calendars [i];  		if (c.date.Year == curMonth.Year && c.date.Month == curMonth.Month) {  			ArrayList newflows = new ArrayList ();  			for (int j = 0; j < c.flows.Count; j++) {  				Flow f = (Flow)c.flows [j];  				if (f.type == FlowType.income) {  					c.flows.Remove (f);  					j--;  				}  			}  		}  	}  	try {  		foreach (DataGridViewRow row in dgv.Rows) {  			if (!row.ReadOnly && !row.IsNewRow) {  				Calendar calendar = new Calendar ();  				calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  				Flow flow = new Flow ();  				flow.type = FlowType.income;  				flow.volume = double.Parse (row.Cells [1].Value.ToString ());  				flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  				foreach (Calendar existC in ar_Calendars) {  					if (existC.date == calendar.date) {  						existC.flows.Add (flow);  						calendar.date = new DateTime (1000' 1' 1);  						break;  					}  				}  				if (calendar.date.Year != 1000) {  					calendar.flows = new ArrayList ();  					calendar.flows.Add (flow);  					ar_Calendars.Add (calendar);  				}  			}  		}  		Xml.UpdateCalendar (file_Calendars' ar_Calendars);  		MessageBox.Show ("收入信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  		Reload ();  	}  	catch (Exception ex) {  		MessageBox.Show ("收入信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: try {  	foreach (DataGridViewRow row in dgv.Rows) {  		if (!row.ReadOnly && !row.IsNewRow) {  			Calendar calendar = new Calendar ();  			calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  			Flow flow = new Flow ();  			flow.type = FlowType.income;  			flow.volume = double.Parse (row.Cells [1].Value.ToString ());  			flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  			foreach (Calendar existC in ar_Calendars) {  				if (existC.date == calendar.date) {  					existC.flows.Add (flow);  					calendar.date = new DateTime (1000' 1' 1);  					break;  				}  			}  			if (calendar.date.Year != 1000) {  				calendar.flows = new ArrayList ();  				calendar.flows.Add (flow);  				ar_Calendars.Add (calendar);  			}  		}  	}  	Xml.UpdateCalendar (file_Calendars' ar_Calendars);  	MessageBox.Show ("收入信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	Reload ();  }  catch (Exception ex) {  	MessageBox.Show ("收入信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: try {  	foreach (DataGridViewRow row in dgv.Rows) {  		if (!row.ReadOnly && !row.IsNewRow) {  			Calendar calendar = new Calendar ();  			calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  			Flow flow = new Flow ();  			flow.type = FlowType.income;  			flow.volume = double.Parse (row.Cells [1].Value.ToString ());  			flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  			foreach (Calendar existC in ar_Calendars) {  				if (existC.date == calendar.date) {  					existC.flows.Add (flow);  					calendar.date = new DateTime (1000' 1' 1);  					break;  				}  			}  			if (calendar.date.Year != 1000) {  				calendar.flows = new ArrayList ();  				calendar.flows.Add (flow);  				ar_Calendars.Add (calendar);  			}  		}  	}  	Xml.UpdateCalendar (file_Calendars' ar_Calendars);  	MessageBox.Show ("收入信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	Reload ();  }  catch (Exception ex) {  	MessageBox.Show ("收入信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: try {  	foreach (DataGridViewRow row in dgv.Rows) {  		if (!row.ReadOnly && !row.IsNewRow) {  			Calendar calendar = new Calendar ();  			calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  			Flow flow = new Flow ();  			flow.type = FlowType.income;  			flow.volume = double.Parse (row.Cells [1].Value.ToString ());  			flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  			foreach (Calendar existC in ar_Calendars) {  				if (existC.date == calendar.date) {  					existC.flows.Add (flow);  					calendar.date = new DateTime (1000' 1' 1);  					break;  				}  			}  			if (calendar.date.Year != 1000) {  				calendar.flows = new ArrayList ();  				calendar.flows.Add (flow);  				ar_Calendars.Add (calendar);  			}  		}  	}  	Xml.UpdateCalendar (file_Calendars' ar_Calendars);  	MessageBox.Show ("收入信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	Reload ();  }  catch (Exception ex) {  	MessageBox.Show ("收入信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: try {  	foreach (DataGridViewRow row in dgv.Rows) {  		if (!row.ReadOnly && !row.IsNewRow) {  			Calendar calendar = new Calendar ();  			calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  			Flow flow = new Flow ();  			flow.type = FlowType.income;  			flow.volume = double.Parse (row.Cells [1].Value.ToString ());  			flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  			foreach (Calendar existC in ar_Calendars) {  				if (existC.date == calendar.date) {  					existC.flows.Add (flow);  					calendar.date = new DateTime (1000' 1' 1);  					break;  				}  			}  			if (calendar.date.Year != 1000) {  				calendar.flows = new ArrayList ();  				calendar.flows.Add (flow);  				ar_Calendars.Add (calendar);  			}  		}  	}  	Xml.UpdateCalendar (file_Calendars' ar_Calendars);  	MessageBox.Show ("收入信息保存成功!"' "保存成功"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	Reload ();  }  catch (Exception ex) {  	MessageBox.Show ("收入信息保存失败!\n\n" + ex.Message' "保存失败"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dgv.Rows) {  	if (!row.ReadOnly && !row.IsNewRow) {  		Calendar calendar = new Calendar ();  		calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  		Flow flow = new Flow ();  		flow.type = FlowType.income;  		flow.volume = double.Parse (row.Cells [1].Value.ToString ());  		flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  		foreach (Calendar existC in ar_Calendars) {  			if (existC.date == calendar.date) {  				existC.flows.Add (flow);  				calendar.date = new DateTime (1000' 1' 1);  				break;  			}  		}  		if (calendar.date.Year != 1000) {  			calendar.flows = new ArrayList ();  			calendar.flows.Add (flow);  			ar_Calendars.Add (calendar);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dgv.Rows) {  	if (!row.ReadOnly && !row.IsNewRow) {  		Calendar calendar = new Calendar ();  		calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  		Flow flow = new Flow ();  		flow.type = FlowType.income;  		flow.volume = double.Parse (row.Cells [1].Value.ToString ());  		flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  		foreach (Calendar existC in ar_Calendars) {  			if (existC.date == calendar.date) {  				existC.flows.Add (flow);  				calendar.date = new DateTime (1000' 1' 1);  				break;  			}  		}  		if (calendar.date.Year != 1000) {  			calendar.flows = new ArrayList ();  			calendar.flows.Add (flow);  			ar_Calendars.Add (calendar);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dgv.Rows) {  	if (!row.ReadOnly && !row.IsNewRow) {  		Calendar calendar = new Calendar ();  		calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  		Flow flow = new Flow ();  		flow.type = FlowType.income;  		flow.volume = double.Parse (row.Cells [1].Value.ToString ());  		flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  		foreach (Calendar existC in ar_Calendars) {  			if (existC.date == calendar.date) {  				existC.flows.Add (flow);  				calendar.date = new DateTime (1000' 1' 1);  				break;  			}  		}  		if (calendar.date.Year != 1000) {  			calendar.flows = new ArrayList ();  			calendar.flows.Add (flow);  			ar_Calendars.Add (calendar);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: foreach (DataGridViewRow row in dgv.Rows) {  	if (!row.ReadOnly && !row.IsNewRow) {  		Calendar calendar = new Calendar ();  		calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  		Flow flow = new Flow ();  		flow.type = FlowType.income;  		flow.volume = double.Parse (row.Cells [1].Value.ToString ());  		flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  		foreach (Calendar existC in ar_Calendars) {  			if (existC.date == calendar.date) {  				existC.flows.Add (flow);  				calendar.date = new DateTime (1000' 1' 1);  				break;  			}  		}  		if (calendar.date.Year != 1000) {  			calendar.flows = new ArrayList ();  			calendar.flows.Add (flow);  			ar_Calendars.Add (calendar);  		}  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: if (!row.ReadOnly && !row.IsNewRow) {  	Calendar calendar = new Calendar ();  	calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  	Flow flow = new Flow ();  	flow.type = FlowType.income;  	flow.volume = double.Parse (row.Cells [1].Value.ToString ());  	flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  	foreach (Calendar existC in ar_Calendars) {  		if (existC.date == calendar.date) {  			existC.flows.Add (flow);  			calendar.date = new DateTime (1000' 1' 1);  			break;  		}  	}  	if (calendar.date.Year != 1000) {  		calendar.flows = new ArrayList ();  		calendar.flows.Add (flow);  		ar_Calendars.Add (calendar);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: if (!row.ReadOnly && !row.IsNewRow) {  	Calendar calendar = new Calendar ();  	calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  	Flow flow = new Flow ();  	flow.type = FlowType.income;  	flow.volume = double.Parse (row.Cells [1].Value.ToString ());  	flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  	foreach (Calendar existC in ar_Calendars) {  		if (existC.date == calendar.date) {  			existC.flows.Add (flow);  			calendar.date = new DateTime (1000' 1' 1);  			break;  		}  	}  	if (calendar.date.Year != 1000) {  		calendar.flows = new ArrayList ();  		calendar.flows.Add (flow);  		ar_Calendars.Add (calendar);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: if (!row.ReadOnly && !row.IsNewRow) {  	Calendar calendar = new Calendar ();  	calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  	Flow flow = new Flow ();  	flow.type = FlowType.income;  	flow.volume = double.Parse (row.Cells [1].Value.ToString ());  	flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  	foreach (Calendar existC in ar_Calendars) {  		if (existC.date == calendar.date) {  			existC.flows.Add (flow);  			calendar.date = new DateTime (1000' 1' 1);  			break;  		}  	}  	if (calendar.date.Year != 1000) {  		calendar.flows = new ArrayList ();  		calendar.flows.Add (flow);  		ar_Calendars.Add (calendar);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: if (!row.ReadOnly && !row.IsNewRow) {  	Calendar calendar = new Calendar ();  	calendar.date = new DateTime (curMonth.Year' curMonth.Month' int.Parse (row.Cells [0].Value.ToString ()));  	Flow flow = new Flow ();  	flow.type = FlowType.income;  	flow.volume = double.Parse (row.Cells [1].Value.ToString ());  	flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  	foreach (Calendar existC in ar_Calendars) {  		if (existC.date == calendar.date) {  			existC.flows.Add (flow);  			calendar.date = new DateTime (1000' 1' 1);  			break;  		}  	}  	if (calendar.date.Year != 1000) {  		calendar.flows = new ArrayList ();  		calendar.flows.Add (flow);  		ar_Calendars.Add (calendar);  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: flow.comment = row.Cells [2].Value == null ? "" : row.Cells [2].Value.ToString ();  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: foreach (Calendar existC in ar_Calendars) {  	if (existC.date == calendar.date) {  		existC.flows.Add (flow);  		calendar.date = new DateTime (1000' 1' 1);  		break;  	}  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: if (existC.date == calendar.date) {  	existC.flows.Add (flow);  	calendar.date = new DateTime (1000' 1' 1);  	break;  }  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: calendar.date = new DateTime (1000' 1' 1);  
Magic Number,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,button_saveincome_Click,The following statement contains a magic number: if (calendar.date.Year != 1000) {  	calendar.flows = new ArrayList ();  	calendar.flows.Add (flow);  	ar_Calendars.Add (calendar);  }  
Duplicate Code,ThePool,Form_Calendar,C:\repos\solunar66_ThePool\ThePool\Form_Calendar.cs,Form_Calendar_Load,The method contains a code clone-set at the following line numbers (starting from the method definition): ((14' 33)' (52' 71)' (89' 108))
Duplicate Code,ThePool,Main_Form,C:\repos\solunar66_ThePool\ThePool\Main_Form.cs,GenerateGB,The method contains a code clone-set at the following line numbers (starting from the method definition): ((284' 315)' (565' 596)' (848' 879))
