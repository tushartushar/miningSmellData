Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GeneticSharp.Extensions.Checkers,CheckersFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersFitness.cs,EvaluateMove,Cyclomatic complexity of the method is 10
Complex Method,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,Cyclomatic complexity of the method is 8
Long Parameter List,GeneticSharp.Extensions.Tsp,TspFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Tsp\TspFitness.cs,TspFitness,The method has 5 parameters.
Long Statement,GeneticSharp.Extensions.AutoConfig,AutoConfigChromosome,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\AutoConfig\AutoConfigChromosome.cs,CreateRandomGene,The length of the statement  "	return new Gene (TypeHelper.CreateInstanceByName<TGeneValue> (available [s_randomization.GetInt (0' available.Count)])); " is 120.
Long Statement,GeneticSharp.Extensions.Checkers,CheckersSquare,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersSquare.cs,PutPiece,The length of the statement  "		State = piece.Player == CheckersPlayer.PlayerOne ? CheckersSquareState.OccupiedByPlayerOne : CheckersSquareState.OccupiedByPlayerTwo; " is 133.
Long Statement,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The length of the statement  "	if (currentSquareState == CheckersSquareState.OccupiedByPlayerOne || currentSquareState == CheckersSquareState.OccupiedByPlayerTwo) { " is 133.
Long Statement,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The length of the statement  "			if (to.RowIndex == from.RowIndex + (1 * indexModifier) && (to.ColumnIndex == from.ColumnIndex - (1 * indexModifier) || to.ColumnIndex == from.ColumnIndex + (1 * indexModifier))) { " is 179.
Long Statement,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The length of the statement  "				if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) { " is 177.
Long Statement,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The length of the statement  "				} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) { " is 184.
Long Statement,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,CountCatchableByPiece,The length of the statement  "			capturableCount += GetMoveKind (new CheckersMove (piece' GetSquare (newColumnToLeftIndex' newRowIndex))) == CheckersMoveKind.Capture ? 1 : 0; " is 141.
Long Statement,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,CountCatchableByPiece,The length of the statement  "			capturableCount += GetMoveKind (new CheckersMove (piece' GetSquare (newColumnToRightIndex' newRowIndex))) == CheckersMoveKind.Capture ? 1 : 0; " is 142.
Long Statement,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,CountPieceChancesToBeCaptured,The length of the statement  "				capturedCount += GetMoveKind (new CheckersMove (enemyPiece' GetSquare (enemyRightColumnIndex' enemyToSquareRowIndex))) == CheckersMoveKind.Capture ? 1 : 0; " is 155.
Long Statement,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,CountPieceChancesToBeCaptured,The length of the statement  "				capturedCount += GetMoveKind (new CheckersMove (enemyPiece' GetSquare (enemyLeftColumnIndex' enemyToSquareRowIndex))) == CheckersMoveKind.Capture ? 1 : 0; " is 154.
Magic Number,GeneticSharp.Extensions.AutoConfig,AutoConfigFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\AutoConfig\AutoConfigFitness.cs,AutoConfigFitness,The following statement contains a magic number: PopulationMinSize = 100;  
Magic Number,GeneticSharp.Extensions.AutoConfig,AutoConfigFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\AutoConfig\AutoConfigFitness.cs,AutoConfigFitness,The following statement contains a magic number: PopulationMaxSize = 100;  
Magic Number,GeneticSharp.Extensions.AutoConfig,AutoConfigFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\AutoConfig\AutoConfigFitness.cs,AutoConfigFitness,The following statement contains a magic number: Termination = new TimeEvolvingTermination (TimeSpan.FromSeconds (30));  
Magic Number,GeneticSharp.Extensions.AutoConfig,AutoConfigChromosome,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\AutoConfig\AutoConfigChromosome.cs,GenerateGene,The following statement contains a magic number: switch (geneIndex) {  // Selection.  case 0:  	return CreateRandomGene<ISelection> (s_availableSelections);  // Crossover.  case 1:  	return CreateRandomGene<ICrossover> (s_availableCrossovers);  // Mutation.  case 2:  	return CreateRandomGene<IMutation> (s_availableMutations);  default:  	throw new InvalidOperationException ("Invalid AutoConfigChromosome gene index.");  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersChromosome,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersChromosome.cs,FindPlayableSquare,The following statement contains a magic number: do {  	var columnIndex = rnd.GetInt (0' m_boardSize);  	var rowIndex = columnIndex % 2 == 0 ? rnd.GetOddInt (0' m_boardSize) : rnd.GetEvenInt (0' m_boardSize);  	square = new CheckersSquare (columnIndex' rowIndex);  } while (square.State == CheckersSquareState.NotPlayable);  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersFitness.cs,EvaluateMove,The following statement contains a magic number: switch (moveKind) {  case CheckersMoveKind.Forward:  	moveFitness = 0.5;  	break;  case CheckersMoveKind.Capture:  	moveFitness = 1;  	break;  case CheckersMoveKind.Invalid:  	moveFitness = 0;  	break;  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersFitness.cs,EvaluateMove,The following statement contains a magic number: moveFitness = 0.5;  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersSquare,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersSquare.cs,IsNotPlayableSquare,The following statement contains a magic number: return !((columnIndex % 2 == 0 && rowIndex % 2 != 0) || (columnIndex % 2 != 0 && rowIndex % 2 == 0));  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersSquare,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersSquare.cs,IsNotPlayableSquare,The following statement contains a magic number: return !((columnIndex % 2 == 0 && rowIndex % 2 != 0) || (columnIndex % 2 != 0 && rowIndex % 2 == 0));  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersSquare,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersSquare.cs,IsNotPlayableSquare,The following statement contains a magic number: return !((columnIndex % 2 == 0 && rowIndex % 2 != 0) || (columnIndex % 2 != 0 && rowIndex % 2 == 0));  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersSquare,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersSquare.cs,IsNotPlayableSquare,The following statement contains a magic number: return !((columnIndex % 2 == 0 && rowIndex % 2 != 0) || (columnIndex % 2 != 0 && rowIndex % 2 == 0));  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersSquare,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersSquare.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 23) + ColumnIndex.GetHashCode ();  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersSquare,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersSquare.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 23) + RowIndex.GetHashCode ();  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersSquare,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersSquare.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 23) + State.GetHashCode ();  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,CheckersBoard,The following statement contains a magic number: if (size < 8) {  	throw new ArgumentException ("The minimum valid size is 8.");  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,Reset,The following statement contains a magic number: for (int c = 0; c < Size; c++) {  	for (int r = 0; r < Size; r++) {  		var square = new CheckersSquare (c' r);  		if (square.State == CheckersSquareState.Free) {  			if (r < 3) {  				var piece = new CheckersPiece (CheckersPlayer.PlayerOne);  				PlayerOnePieces.Add (piece);  				square.PutPiece (piece);  			} else if (r >= Size - 3) {  				var piece = new CheckersPiece (CheckersPlayer.PlayerTwo);  				PlayerTwoPieces.Add (piece);  				square.PutPiece (piece);  			}  		}  		m_squares [c' r] = square;  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,Reset,The following statement contains a magic number: for (int c = 0; c < Size; c++) {  	for (int r = 0; r < Size; r++) {  		var square = new CheckersSquare (c' r);  		if (square.State == CheckersSquareState.Free) {  			if (r < 3) {  				var piece = new CheckersPiece (CheckersPlayer.PlayerOne);  				PlayerOnePieces.Add (piece);  				square.PutPiece (piece);  			} else if (r >= Size - 3) {  				var piece = new CheckersPiece (CheckersPlayer.PlayerTwo);  				PlayerTwoPieces.Add (piece);  				square.PutPiece (piece);  			}  		}  		m_squares [c' r] = square;  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,Reset,The following statement contains a magic number: for (int r = 0; r < Size; r++) {  	var square = new CheckersSquare (c' r);  	if (square.State == CheckersSquareState.Free) {  		if (r < 3) {  			var piece = new CheckersPiece (CheckersPlayer.PlayerOne);  			PlayerOnePieces.Add (piece);  			square.PutPiece (piece);  		} else if (r >= Size - 3) {  			var piece = new CheckersPiece (CheckersPlayer.PlayerTwo);  			PlayerTwoPieces.Add (piece);  			square.PutPiece (piece);  		}  	}  	m_squares [c' r] = square;  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,Reset,The following statement contains a magic number: for (int r = 0; r < Size; r++) {  	var square = new CheckersSquare (c' r);  	if (square.State == CheckersSquareState.Free) {  		if (r < 3) {  			var piece = new CheckersPiece (CheckersPlayer.PlayerOne);  			PlayerOnePieces.Add (piece);  			square.PutPiece (piece);  		} else if (r >= Size - 3) {  			var piece = new CheckersPiece (CheckersPlayer.PlayerTwo);  			PlayerTwoPieces.Add (piece);  			square.PutPiece (piece);  		}  	}  	m_squares [c' r] = square;  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,Reset,The following statement contains a magic number: if (square.State == CheckersSquareState.Free) {  	if (r < 3) {  		var piece = new CheckersPiece (CheckersPlayer.PlayerOne);  		PlayerOnePieces.Add (piece);  		square.PutPiece (piece);  	} else if (r >= Size - 3) {  		var piece = new CheckersPiece (CheckersPlayer.PlayerTwo);  		PlayerTwoPieces.Add (piece);  		square.PutPiece (piece);  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,Reset,The following statement contains a magic number: if (square.State == CheckersSquareState.Free) {  	if (r < 3) {  		var piece = new CheckersPiece (CheckersPlayer.PlayerOne);  		PlayerOnePieces.Add (piece);  		square.PutPiece (piece);  	} else if (r >= Size - 3) {  		var piece = new CheckersPiece (CheckersPlayer.PlayerTwo);  		PlayerTwoPieces.Add (piece);  		square.PutPiece (piece);  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,Reset,The following statement contains a magic number: if (r < 3) {  	var piece = new CheckersPiece (CheckersPlayer.PlayerOne);  	PlayerOnePieces.Add (piece);  	square.PutPiece (piece);  } else if (r >= Size - 3) {  	var piece = new CheckersPiece (CheckersPlayer.PlayerTwo);  	PlayerTwoPieces.Add (piece);  	square.PutPiece (piece);  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,Reset,The following statement contains a magic number: if (r < 3) {  	var piece = new CheckersPiece (CheckersPlayer.PlayerOne);  	PlayerOnePieces.Add (piece);  	square.PutPiece (piece);  } else if (r >= Size - 3) {  	var piece = new CheckersPiece (CheckersPlayer.PlayerTwo);  	PlayerTwoPieces.Add (piece);  	square.PutPiece (piece);  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,Reset,The following statement contains a magic number: if (r >= Size - 3) {  	var piece = new CheckersPiece (CheckersPlayer.PlayerTwo);  	PlayerTwoPieces.Add (piece);  	square.PutPiece (piece);  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,MovePiece,The following statement contains a magic number: if (moveKind != CheckersMoveKind.Invalid) {  	var to = GetSquare (move.ToSquare.ColumnIndex' move.ToSquare.RowIndex);  	to.PutPiece (from.CurrentPiece);  	var indexModifier = to.State == CheckersSquareState.OccupiedByPlayerOne ? 1 : -1;  	from.RemovePiece ();  	moved = true;  	// Capture move.  	if (moveKind == CheckersMoveKind.Capture) {  		if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier)) {  			GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  		} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier)) {  			GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  		}  		moved = true;  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,MovePiece,The following statement contains a magic number: if (moveKind != CheckersMoveKind.Invalid) {  	var to = GetSquare (move.ToSquare.ColumnIndex' move.ToSquare.RowIndex);  	to.PutPiece (from.CurrentPiece);  	var indexModifier = to.State == CheckersSquareState.OccupiedByPlayerOne ? 1 : -1;  	from.RemovePiece ();  	moved = true;  	// Capture move.  	if (moveKind == CheckersMoveKind.Capture) {  		if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier)) {  			GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  		} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier)) {  			GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  		}  		moved = true;  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,MovePiece,The following statement contains a magic number: if (moveKind == CheckersMoveKind.Capture) {  	if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier)) {  		GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  	} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier)) {  		GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  	}  	moved = true;  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,MovePiece,The following statement contains a magic number: if (moveKind == CheckersMoveKind.Capture) {  	if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier)) {  		GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  	} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier)) {  		GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  	}  	moved = true;  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,MovePiece,The following statement contains a magic number: if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier)) {  	GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  } else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier)) {  	GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,MovePiece,The following statement contains a magic number: if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier)) {  	GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  } else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier)) {  	GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,MovePiece,The following statement contains a magic number: if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier)) {  	GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).RemovePiece ();  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (currentSquareState == CheckersSquareState.OccupiedByPlayerOne || currentSquareState == CheckersSquareState.OccupiedByPlayerTwo) {  	var from = GetSquare (move.Piece.CurrentSquare.ColumnIndex' move.Piece.CurrentSquare.RowIndex);  	var to = GetSquare (move.ToSquare.ColumnIndex' move.ToSquare.RowIndex);  	// From is square of the AI player and To is a free square.  	if (from.State == currentSquareState && to.State == CheckersSquareState.Free) {  		int indexModifier = GetIndexModifier (player);  		CheckersSquareState opponentState;  		if (from.State == CheckersSquareState.OccupiedByPlayerOne) {  			opponentState = CheckersSquareState.OccupiedByPlayerTwo;  		} else {  			opponentState = CheckersSquareState.OccupiedByPlayerOne;  		}  		// Forward move.  		if (to.RowIndex == from.RowIndex + (1 * indexModifier) && (to.ColumnIndex == from.ColumnIndex - (1 * indexModifier) || to.ColumnIndex == from.ColumnIndex + (1 * indexModifier))) {  			kind = CheckersMoveKind.Forward;  		} else if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  			// Capture move.  			// To right or To left?  			if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  				kind = CheckersMoveKind.Capture;  			} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  				kind = CheckersMoveKind.Capture;  			}  		}  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (currentSquareState == CheckersSquareState.OccupiedByPlayerOne || currentSquareState == CheckersSquareState.OccupiedByPlayerTwo) {  	var from = GetSquare (move.Piece.CurrentSquare.ColumnIndex' move.Piece.CurrentSquare.RowIndex);  	var to = GetSquare (move.ToSquare.ColumnIndex' move.ToSquare.RowIndex);  	// From is square of the AI player and To is a free square.  	if (from.State == currentSquareState && to.State == CheckersSquareState.Free) {  		int indexModifier = GetIndexModifier (player);  		CheckersSquareState opponentState;  		if (from.State == CheckersSquareState.OccupiedByPlayerOne) {  			opponentState = CheckersSquareState.OccupiedByPlayerTwo;  		} else {  			opponentState = CheckersSquareState.OccupiedByPlayerOne;  		}  		// Forward move.  		if (to.RowIndex == from.RowIndex + (1 * indexModifier) && (to.ColumnIndex == from.ColumnIndex - (1 * indexModifier) || to.ColumnIndex == from.ColumnIndex + (1 * indexModifier))) {  			kind = CheckersMoveKind.Forward;  		} else if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  			// Capture move.  			// To right or To left?  			if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  				kind = CheckersMoveKind.Capture;  			} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  				kind = CheckersMoveKind.Capture;  			}  		}  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (currentSquareState == CheckersSquareState.OccupiedByPlayerOne || currentSquareState == CheckersSquareState.OccupiedByPlayerTwo) {  	var from = GetSquare (move.Piece.CurrentSquare.ColumnIndex' move.Piece.CurrentSquare.RowIndex);  	var to = GetSquare (move.ToSquare.ColumnIndex' move.ToSquare.RowIndex);  	// From is square of the AI player and To is a free square.  	if (from.State == currentSquareState && to.State == CheckersSquareState.Free) {  		int indexModifier = GetIndexModifier (player);  		CheckersSquareState opponentState;  		if (from.State == CheckersSquareState.OccupiedByPlayerOne) {  			opponentState = CheckersSquareState.OccupiedByPlayerTwo;  		} else {  			opponentState = CheckersSquareState.OccupiedByPlayerOne;  		}  		// Forward move.  		if (to.RowIndex == from.RowIndex + (1 * indexModifier) && (to.ColumnIndex == from.ColumnIndex - (1 * indexModifier) || to.ColumnIndex == from.ColumnIndex + (1 * indexModifier))) {  			kind = CheckersMoveKind.Forward;  		} else if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  			// Capture move.  			// To right or To left?  			if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  				kind = CheckersMoveKind.Capture;  			} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  				kind = CheckersMoveKind.Capture;  			}  		}  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (from.State == currentSquareState && to.State == CheckersSquareState.Free) {  	int indexModifier = GetIndexModifier (player);  	CheckersSquareState opponentState;  	if (from.State == CheckersSquareState.OccupiedByPlayerOne) {  		opponentState = CheckersSquareState.OccupiedByPlayerTwo;  	} else {  		opponentState = CheckersSquareState.OccupiedByPlayerOne;  	}  	// Forward move.  	if (to.RowIndex == from.RowIndex + (1 * indexModifier) && (to.ColumnIndex == from.ColumnIndex - (1 * indexModifier) || to.ColumnIndex == from.ColumnIndex + (1 * indexModifier))) {  		kind = CheckersMoveKind.Forward;  	} else if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  		// Capture move.  		// To right or To left?  		if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  			kind = CheckersMoveKind.Capture;  		} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  			kind = CheckersMoveKind.Capture;  		}  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (from.State == currentSquareState && to.State == CheckersSquareState.Free) {  	int indexModifier = GetIndexModifier (player);  	CheckersSquareState opponentState;  	if (from.State == CheckersSquareState.OccupiedByPlayerOne) {  		opponentState = CheckersSquareState.OccupiedByPlayerTwo;  	} else {  		opponentState = CheckersSquareState.OccupiedByPlayerOne;  	}  	// Forward move.  	if (to.RowIndex == from.RowIndex + (1 * indexModifier) && (to.ColumnIndex == from.ColumnIndex - (1 * indexModifier) || to.ColumnIndex == from.ColumnIndex + (1 * indexModifier))) {  		kind = CheckersMoveKind.Forward;  	} else if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  		// Capture move.  		// To right or To left?  		if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  			kind = CheckersMoveKind.Capture;  		} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  			kind = CheckersMoveKind.Capture;  		}  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (from.State == currentSquareState && to.State == CheckersSquareState.Free) {  	int indexModifier = GetIndexModifier (player);  	CheckersSquareState opponentState;  	if (from.State == CheckersSquareState.OccupiedByPlayerOne) {  		opponentState = CheckersSquareState.OccupiedByPlayerTwo;  	} else {  		opponentState = CheckersSquareState.OccupiedByPlayerOne;  	}  	// Forward move.  	if (to.RowIndex == from.RowIndex + (1 * indexModifier) && (to.ColumnIndex == from.ColumnIndex - (1 * indexModifier) || to.ColumnIndex == from.ColumnIndex + (1 * indexModifier))) {  		kind = CheckersMoveKind.Forward;  	} else if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  		// Capture move.  		// To right or To left?  		if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  			kind = CheckersMoveKind.Capture;  		} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  			kind = CheckersMoveKind.Capture;  		}  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (to.RowIndex == from.RowIndex + (1 * indexModifier) && (to.ColumnIndex == from.ColumnIndex - (1 * indexModifier) || to.ColumnIndex == from.ColumnIndex + (1 * indexModifier))) {  	kind = CheckersMoveKind.Forward;  } else if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  	// Capture move.  	// To right or To left?  	if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (to.RowIndex == from.RowIndex + (1 * indexModifier) && (to.ColumnIndex == from.ColumnIndex - (1 * indexModifier) || to.ColumnIndex == from.ColumnIndex + (1 * indexModifier))) {  	kind = CheckersMoveKind.Forward;  } else if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  	// Capture move.  	// To right or To left?  	if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (to.RowIndex == from.RowIndex + (1 * indexModifier) && (to.ColumnIndex == from.ColumnIndex - (1 * indexModifier) || to.ColumnIndex == from.ColumnIndex + (1 * indexModifier))) {  	kind = CheckersMoveKind.Forward;  } else if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  	// Capture move.  	// To right or To left?  	if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  	// Capture move.  	// To right or To left?  	if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  	// Capture move.  	// To right or To left?  	if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (to.RowIndex == from.RowIndex + (2 * indexModifier)) {  	// Capture move.  	// To right or To left?  	if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	} else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  		kind = CheckersMoveKind.Capture;  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  	kind = CheckersMoveKind.Capture;  } else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  	kind = CheckersMoveKind.Capture;  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (to.ColumnIndex == from.ColumnIndex + (2 * indexModifier) && GetSquare (from.ColumnIndex + (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  	kind = CheckersMoveKind.Capture;  } else if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  	kind = CheckersMoveKind.Capture;  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,GetMoveKind,The following statement contains a magic number: if (to.ColumnIndex == from.ColumnIndex - (2 * indexModifier) && GetSquare (from.ColumnIndex - (1 * indexModifier)' from.RowIndex + (1 * indexModifier)).State == opponentState) {  	kind = CheckersMoveKind.Capture;  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,CountCatchableByPiece,The following statement contains a magic number: if (IsValidIndex (newRowIndex)) {  	var columnIndex = square.ColumnIndex;  	var newColumnToLeftIndex = columnIndex - 2;  	var newColumnToRightIndex = columnIndex + 2;  	if (IsValidIndex (newColumnToLeftIndex)) {  		capturableCount += GetMoveKind (new CheckersMove (piece' GetSquare (newColumnToLeftIndex' newRowIndex))) == CheckersMoveKind.Capture ? 1 : 0;  	}  	if (IsValidIndex (newColumnToRightIndex)) {  		capturableCount += GetMoveKind (new CheckersMove (piece' GetSquare (newColumnToRightIndex' newRowIndex))) == CheckersMoveKind.Capture ? 1 : 0;  	}  }  
Magic Number,GeneticSharp.Extensions.Checkers,CheckersBoard,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersBoard.cs,CountCatchableByPiece,The following statement contains a magic number: if (IsValidIndex (newRowIndex)) {  	var columnIndex = square.ColumnIndex;  	var newColumnToLeftIndex = columnIndex - 2;  	var newColumnToRightIndex = columnIndex + 2;  	if (IsValidIndex (newColumnToLeftIndex)) {  		capturableCount += GetMoveKind (new CheckersMove (piece' GetSquare (newColumnToLeftIndex' newRowIndex))) == CheckersMoveKind.Capture ? 1 : 0;  	}  	if (IsValidIndex (newColumnToRightIndex)) {  		capturableCount += GetMoveKind (new CheckersMove (piece' GetSquare (newColumnToRightIndex' newRowIndex))) == CheckersMoveKind.Capture ? 1 : 0;  	}  }  
Magic Number,GeneticSharp.Extensions.Mathematic,EqualityFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Mathematic\EqualityFitness.cs,GetEquationResult,The following statement contains a magic number: return a + (2 * b) + (3 * c) + (4 * d);  
Magic Number,GeneticSharp.Extensions.Mathematic,EqualityFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Mathematic\EqualityFitness.cs,GetEquationResult,The following statement contains a magic number: return a + (2 * b) + (3 * c) + (4 * d);  
Magic Number,GeneticSharp.Extensions.Mathematic,EqualityFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Mathematic\EqualityFitness.cs,GetEquationResult,The following statement contains a magic number: return a + (2 * b) + (3 * c) + (4 * d);  
Magic Number,GeneticSharp.Extensions.Mathematic,FunctionBuilderChromosome,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Mathematic\FunctionBuilderChromosome.cs,GetParameterNames,The following statement contains a magic number: for (int i = 0; i < parametersCount; i++) {  	parameterNames [i] = ((char)(i + 65)).ToString ();  }  
Magic Number,GeneticSharp.Extensions.Mathematic,FunctionBuilderChromosome,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Mathematic\FunctionBuilderChromosome.cs,GetParameterNames,The following statement contains a magic number: parameterNames [i] = ((char)(i + 65)).ToString ();  
Magic Number,GeneticSharp.Extensions.Mathematic,EquationChromosome,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Mathematic\EquationChromosome.cs,EquationChromosome,The following statement contains a magic number: if (expectedResult >= int.MaxValue / 2) {  	throw new ArgumentOutOfRangeException ("expectedResult"' expectedResult' "EquationChromosome expected value must be lower");  }  
Magic Number,GeneticSharp.Extensions.Mathematic,EquationChromosome,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Mathematic\EquationChromosome.cs,EquationChromosome,The following statement contains a magic number: ResultRange = expectedResult * 2;  
Magic Number,GeneticSharp.Extensions.Mathematic,EquationChromosome,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Mathematic\EquationChromosome.cs,CreateNew,The following statement contains a magic number: return new EquationChromosome (ResultRange / 2' Length);  
Magic Number,GeneticSharp.Extensions.Tsp,TspFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Tsp\TspFitness.cs,CalcDistanceTwoCities,The following statement contains a magic number: return Math.Sqrt (Math.Pow (two.X - one.X' 2) + Math.Pow (two.Y - one.Y' 2));  
Magic Number,GeneticSharp.Extensions.Tsp,TspFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Tsp\TspFitness.cs,CalcDistanceTwoCities,The following statement contains a magic number: return Math.Sqrt (Math.Pow (two.X - one.X' 2) + Math.Pow (two.Y - one.Y' 2));  
Magic Number,GeneticSharp.Extensions.Drawing,BitmapChromosome,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Drawing\BitmapChromosome.cs,GenerateGene,The following statement contains a magic number: return new Gene (Color.FromArgb (rnd.GetInt (0' 256)' rnd.GetInt (0' 256)' rnd.GetInt (0' 256)));  
Magic Number,GeneticSharp.Extensions.Drawing,BitmapChromosome,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Drawing\BitmapChromosome.cs,GenerateGene,The following statement contains a magic number: return new Gene (Color.FromArgb (rnd.GetInt (0' 256)' rnd.GetInt (0' 256)' rnd.GetInt (0' 256)));  
Magic Number,GeneticSharp.Extensions.Drawing,BitmapChromosome,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Drawing\BitmapChromosome.cs,GenerateGene,The following statement contains a magic number: return new Gene (Color.FromArgb (rnd.GetInt (0' 256)' rnd.GetInt (0' 256)' rnd.GetInt (0' 256)));  
Missing Default,GeneticSharp.Extensions.Checkers,CheckersFitness,F:\newReposMay17\giacomelli_GeneticSharp\src\GeneticSharp.Extensions\Checkers\CheckersFitness.cs,EvaluateMove,The following switch statement is missing a default case: switch (moveKind) {  case CheckersMoveKind.Forward:  	moveFitness = 0.5;  	break;  case CheckersMoveKind.Capture:  	moveFitness = 1;  	break;  case CheckersMoveKind.Invalid:  	moveFitness = 0;  	break;  }  
