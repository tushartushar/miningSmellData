Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,GeneticSharp.Domain.Crossovers,CycleCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\CycleCrossover.cs,CopyCycleIndexPair,The method has 5 parameters. Parameters: cycle' fromParent1Genes' toOffspring1' fromParent2Genes' toOffspring2
Long Parameter List,GeneticSharp.Domain,GeneticAlgorithm,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\GeneticAlgorithm.cs,GeneticAlgorithm,The method has 5 parameters. Parameters: population' fitness' selection' crossover' mutation
Long Identifier,GeneticSharp.Domain.Chromosomes,FloatingPointChromosome,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Chromosomes\FloatingPointChromosome.cs,,The length of the parameter m_originalValueStringRepresentation is 35.
Long Identifier,GeneticSharp.Domain.Selections,TournamentSelection,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Selections\TournamentSelection.cs,TournamentSelection,The length of the parameter allowWinnerCompeteNextTournament is 32.
Long Identifier,GeneticSharp.Domain.Terminations,FitnessStagnationTermination,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Terminations\FitnessStagnationTermination.cs,FitnessStagnationTermination,The length of the parameter expectedStagnantGenerationsNumber is 33.
Long Statement,GeneticSharp.Domain.Chromosomes,ChromosomeBase,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Chromosomes\ChromosomeBase.cs,ReplaceGenes,The length of the statement  "                        "genes"' "The number of genes to be replaced is greater than available space' there is {0} genes between the index {1} and the end of chromosome' but there is {2} genes to be replaced.".With(availableSpaceLength' startIndex' genesToBeReplacedLength)); " is 251.
Long Statement,GeneticSharp.Domain.Chromosomes,ChromosomeExtensions,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Chromosomes\ChromosomeExtensions.cs,ValidateGenes,The length of the statement  "                throw new InvalidOperationException("The chromosome '{0}' is generating genes with null value.".With(chromosomes.First().GetType().Name)); " is 138.
Long Statement,GeneticSharp.Domain.Chromosomes,ChromosomeExtensions,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Chromosomes\ChromosomeExtensions.cs,ValidateGenes,The length of the statement  "                throw new InvalidOperationException("The chromosome '{0}' is generating genes with null value.".With(chromosome.GetType().Name)); " is 129.
Long Statement,GeneticSharp.Domain.Crossovers,CrossoverBase,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\CrossoverBase.cs,Cross,The length of the statement  "                    this' "A chromosome should have' at least' {0} genes. {1} has only {2} gene.".With(MinChromosomeLength' firstParent.GetType().Name' firstParent.Length)); " is 153.
Long Statement,GeneticSharp.Domain.Crossovers,CycleCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\CycleCrossover.cs,PerformCross,The length of the statement  "                throw new CrossoverException(this' "The Cycle Crossover (CX) can be only used with ordered chromosomes. The specified chromosome has repeated genes.");" is 151.
Long Statement,GeneticSharp.Domain.Crossovers,CycleCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\CycleCrossover.cs,PerformCross,The length of the statement  "                    // Copy cycle index pair: values from Parent 1 and copied to Child 1' and values from Parent 2 will be copied to Child 2. " is 121.
Long Statement,GeneticSharp.Domain.Crossovers,CycleCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\CycleCrossover.cs,PerformCross,The length of the statement  "                    // Copy cycle index odd: values from Parent 1 will be copied to Child 2' and values from Parent 1 will be copied to Child 1. " is 124.
Long Statement,GeneticSharp.Domain.Crossovers,CycleCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\CycleCrossover.cs,CreateCycle,The length of the statement  "                var newGeneIndex = parent1Genes.Select((g' i) => new { Value = g.Value' Index = i }).First(g => g.Value.Equals(parent2Gene.Value));" is 131.
Long Statement,GeneticSharp.Domain.Crossovers,OnePointCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\OnePointCrossover.cs,PerformCross,The length of the statement  "                    "The swap point index is {0}' but there is only {1} genes. The swap should result at least one gene to each side.".With(SwapPointIndex' firstParent.Length)); " is 157.
Long Statement,GeneticSharp.Domain.Crossovers,OrderedCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\OrderedCrossover.cs,PerformCross,The length of the statement  "                throw new CrossoverException(this' "The Ordered Crossover (OX1) can be only used with ordered chromosomes. The specified chromosome has repeated genes."); " is 154.
Long Statement,GeneticSharp.Domain.Crossovers,OrderedCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\OrderedCrossover.cs,CreateChild,The length of the statement  "            var middleSectionGenes = firstParent.GetGenes().Skip(middleSectionBeginIndex).Take((middleSectionEndIndex - middleSectionBeginIndex) + 1); " is 138.
Long Statement,GeneticSharp.Domain.Crossovers,TwoPointCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\TwoPointCrossover.cs,PerformCross,The length of the statement  "					"The swap point two index is {0}' but there is only {1} genes. The swap should result at least one gene to each sides.".With(SwapPointTwoGeneIndex' parentLength)); " is 163.
Long Statement,GeneticSharp.Domain.Crossovers,TwoPointCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\TwoPointCrossover.cs,CreateChild,The length of the statement  "			child.ReplaceGenes(firstCutGenesCount' rightParent.GetGenes().Skip(firstCutGenesCount).Take(secondCutGenesCount - firstCutGenesCount).ToArray()); " is 145.
Long Statement,GeneticSharp.Domain.Crossovers,PartiallyMappedCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\PartiallyMappedCrossover.cs,PerformCross,The length of the statement  "                throw new CrossoverException(this' "The Partially Mapped Crossover (PMX) can be only used with ordered chromosomes. The specified chromosome has repeated genes."); " is 163.
Long Statement,GeneticSharp.Domain.Crossovers,PartiallyMappedCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\PartiallyMappedCrossover.cs,PerformCross,The length of the statement  "            var parent1MappingSection = parent1Genes.Skip(firstCutPointIndex).Take((secondCutPointIdnex - firstCutPointIndex) + 1).ToArray(); " is 129.
Long Statement,GeneticSharp.Domain.Crossovers,PartiallyMappedCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\PartiallyMappedCrossover.cs,PerformCross,The length of the statement  "            var parent2MappingSection = parent2Genes.Skip(firstCutPointIndex).Take((secondCutPointIdnex - firstCutPointIndex) + 1).ToArray(); " is 129.
Long Statement,GeneticSharp.Domain.Crossovers,PartiallyMappedCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\PartiallyMappedCrossover.cs,GetGeneNotInMappingSection,The length of the statement  "                return GetGeneNotInMappingSection(otherParentMappingSection[indexOnMappingSection.Index]' mappingSection' otherParentMappingSection); " is 133.
Long Statement,GeneticSharp.Domain.Crossovers,OrderBasedCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\OrderBasedCrossover.cs,ValidateParents,The length of the statement  "                throw new CrossoverException(this' "The Order-based Crossover (OX2) can be only used with ordered chromosomes. The specified chromosome has repeated genes."); " is 158.
Long Statement,GeneticSharp.Domain.Crossovers,PositionBasedCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\PositionBasedCrossover.cs,ValidateParents,The length of the statement  "                throw new CrossoverException(this' "The Position-based Crossover (POS) can be only used with ordered chromosomes. The specified chromosome has repeated genes."); " is 161.
Long Statement,GeneticSharp.Domain.Mutations,ReverseSequenceMutation,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Mutations\ReverseSequenceMutation.cs,PerformMutate,The length of the statement  "                throw new MutationException(this' "A chromosome should have' at least' 3 genes. {0} has only {1} gene.".With(chromosome.GetType().Name' chromosome.Length)); " is 156.
Long Statement,GeneticSharp.Domain.Mutations,UniformMutation,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Mutations\UniformMutation.cs,PerformMutate,The length of the statement  "                    throw new MutationException(this' "The chromosome has no gene on index {0}. The chromosome genes length is {1}.".With(i' genesLength)); " is 135.
Long Statement,GeneticSharp.Domain.Populations,Population,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Populations\Population.cs,CreateInitialGeneration,The length of the statement  "                    throw new InvalidOperationException("The Adam chromosome's 'CreateNew' method generated a null chromosome. This is a invalid behavior' please' check your chromosome code."); " is 173.
Long Statement,GeneticSharp.Domain.Populations,Generation,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Populations\Generation.cs,ValidateChromosome,The length of the statement  "                throw new InvalidOperationException("There is unknown problem in current generation' because a chromosome has no fitness value."); " is 130.
Long Statement,SharpNeatLib.Maths,FastRandom,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\Externals\FastRandom.cs,Next,The length of the statement  "                return lowerBound + (int)((REAL_UNIT_UINT * (double)(w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound)); " is 141.
Long Statement,SharpNeatLib.Maths,FastRandom,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\Externals\FastRandom.cs,Next,The length of the statement  "            return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * (double)range); " is 128.
Long Statement,GeneticSharp.Domain.Randomizations,RandomizationBase,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\RandomizationBase.cs,GetUniqueInts,The length of the statement  "					"The length is {0}' but the possible unique values between {1} (inclusive) and {2} (exclusive) are {3}.".With(length' min' max' diff)); " is 135.
Long Statement,GeneticSharp.Domain.Reinsertions,ReinsertionBase,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Reinsertions\ReinsertionBase.cs,SelectChromosomes,The length of the statement  "                throw new ReinsertionException(this' "Cannot collapse the number of chromosome in population. Try another reinsertion!"); " is 121.
Long Statement,GeneticSharp.Domain.Selections,RouletteWheelSelection,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Selections\RouletteWheelSelection.cs,SelectFromWheel,The length of the statement  "                var chromosomeIndex = rouletteWheel.Select((value' index) => new { Value = value' Index = index }).FirstOrDefault(r => r.Value >= pointer).Index;" is 145.
Long Statement,GeneticSharp.Domain.Selections,SelectionBase,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Selections\SelectionBase.cs,SelectChromosomes,The length of the statement  "                throw new ArgumentOutOfRangeException("number"' "The number of selected chromosomes should be at least {0}.".With(m_minNumberChromosomes)); " is 139.
Long Statement,GeneticSharp.Domain.Selections,TournamentSelection,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Selections\TournamentSelection.cs,PerformSelectChromosomes,The length of the statement  "                    "The tournament size is greater than available chromosomes. Tournament size is {0} and generation {1} available chromosomes are {2}.".With(Size' generation.Number' generation.Chromosomes.Count)); " is 195.
Long Statement,GeneticSharp.Domain.Terminations,LogicalOperatorTerminationBase,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Terminations\LogicalOperatorTerminationBase.cs,HasReached,The length of the statement  "                throw new InvalidOperationException("The {0} needs at least {1} terminations to perform. Please' add the missing terminations.".With(GetType().Name' m_minOperands)); " is 165.
Long Statement,GeneticSharp.Domain,GeneticAlgorithm,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\GeneticAlgorithm.cs,Resume,The length of the statement  "                        throw new InvalidOperationException("Attempt to resume a genetic algorithm with a termination ({0}) already reached. Please' specify a new termination or extend the current one.".With(Termination)); " is 198.
Long Statement,GeneticSharp.Domain,GeneticAlgorithm,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\GeneticAlgorithm.cs,EvaluateFitness,The length of the statement  "            Population.CurrentGeneration.Chromosomes = Population.CurrentGeneration.Chromosomes.OrderByDescending(c => c.Fitness.Value).ToList(); " is 133.
Long Statement,GeneticSharp.Domain,GeneticAlgorithm,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\GeneticAlgorithm.cs,Cross,The length of the statement  "                // Checks if the number of selected parents is equal which the crossover expect' because the in the end of the list we can " is 122.
Long Statement,GeneticSharp.Domain,GeneticAlgorithm,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\GeneticAlgorithm.cs,Cross,The length of the statement  "                if (selectedParents.Count == Crossover.ParentsNumber && RandomizationProvider.Current.GetDouble() <= CrossoverProbability) " is 122.
Virtual Method Call from Constructor,GeneticSharp.Domain.Chromosomes,IntegerChromosome,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Chromosomes\IntegerChromosome.cs,IntegerChromosome,The constructor "IntegerChromosome" calls a virtual method "CreateGenes".
Virtual Method Call from Constructor,GeneticSharp.Domain.Chromosomes,FloatingPointChromosome,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Chromosomes\FloatingPointChromosome.cs,FloatingPointChromosome,The constructor "FloatingPointChromosome" calls a virtual method "CreateGenes".
Magic Number,GeneticSharp.Domain.Chromosomes,ChromosomeBase,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Chromosomes\ChromosomeBase.cs,ValidateLength,The following statement contains a magic number: if (length < 2)              {                  throw new ArgumentException("The minimum length for a chromosome is 2 genes.");              }
Magic Number,GeneticSharp.Domain.Chromosomes,BinaryChromosomeBase,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Chromosomes\BinaryChromosomeBase.cs,GenerateGene,The following statement contains a magic number: return new Gene (RandomizationProvider.Current.GetInt (0' 2));
Magic Number,GeneticSharp.Domain.Crossovers,CycleCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\CycleCrossover.cs,PerformCross,The following statement contains a magic number: for (int i = 0; i < cycles.Count; i++)             {                 var cycle = cycles[i];                  if (i % 2 == 0)                 {                      // Copy cycle index pair: values from Parent 1 and copied to Child 1' and values from Parent 2 will be copied to Child 2.                      CopyCycleIndexPair(cycle' parent1Genes' offspring1' parent2Genes' offspring2);                 }                 else                 {                      // Copy cycle index odd: values from Parent 1 will be copied to Child 2' and values from Parent 1 will be copied to Child 1.                      CopyCycleIndexPair(cycle' parent1Genes' offspring2' parent2Genes' offspring1);                 }             }
Magic Number,GeneticSharp.Domain.Crossovers,OrderedCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\OrderedCrossover.cs,PerformCross,The following statement contains a magic number: var middleSectionIndexes = RandomizationProvider.Current.GetUniqueInts(2' 0' firstParent.Length);
Magic Number,GeneticSharp.Domain.Crossovers,ThreeParentCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\ThreeParentCrossover.cs,PerformCross,The following statement contains a magic number: var parent3Genes = parents[2].GetGenes();
Magic Number,GeneticSharp.Domain.Crossovers,TwoPointCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\TwoPointCrossover.cs,TwoPointCrossover,The following statement contains a magic number: MinChromosomeLength = 3;
Magic Number,GeneticSharp.Domain.Crossovers,PartiallyMappedCrossover,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Crossovers\PartiallyMappedCrossover.cs,PerformCross,The following statement contains a magic number: var cutPointsIndexes = RandomizationProvider.Current.GetUniqueInts(2' 0' parent1.Length);
Magic Number,GeneticSharp.Domain.Mutations,ReverseSequenceMutation,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Mutations\ReverseSequenceMutation.cs,PerformMutate,The following statement contains a magic number: if (chromosome.Length < 3)              {                  throw new MutationException(this' "A chromosome should have' at least' 3 genes. {0} has only {1} gene.".With(chromosome.GetType().Name' chromosome.Length));              }
Magic Number,GeneticSharp.Domain.Mutations,ReverseSequenceMutation,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Mutations\ReverseSequenceMutation.cs,PerformMutate,The following statement contains a magic number: if (RandomizationProvider.Current.GetDouble() <= probability)              {                  var indexes = RandomizationProvider.Current.GetUniqueInts(2' 0' chromosome.Length).OrderBy(i => i).ToArray();                  var firstIndex = indexes[0];                  var secondIndex = indexes[1];                    var revertedSequence = chromosome.GetGenes().Skip(firstIndex).Take((secondIndex - firstIndex) + 1).Reverse().ToArray();                    chromosome.ReplaceGenes(firstIndex' revertedSequence);              }
Magic Number,GeneticSharp.Domain.Mutations,TworsMutation,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Mutations\TworsMutation.cs,PerformMutate,The following statement contains a magic number: if (RandomizationProvider.Current.GetDouble() <= probability)              {                  var indexes = RandomizationProvider.Current.GetUniqueInts(2' 0' chromosome.Length);                  var firstIndex = indexes[0];                  var secondIndex = indexes[1];                  var firstGene = chromosome.GetGene(firstIndex);                  var secondGene = chromosome.GetGene(secondIndex);                    chromosome.ReplaceGene(firstIndex' secondGene);                  chromosome.ReplaceGene(secondIndex' firstGene);              }
Magic Number,GeneticSharp.Domain.Populations,Population,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Populations\Population.cs,Population,The following statement contains a magic number: if (minSize < 2)              {                  throw new ArgumentOutOfRangeException("minSize"' "The minimum size for a population is 2 chromosomes.");              }
Magic Number,GeneticSharp.Domain.Populations,Population,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Populations\Population.cs,Population,The following statement contains a magic number: GenerationStrategy = new PerformanceGenerationStrategy(10);
Magic Number,GeneticSharp.Domain.Populations,Generation,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Populations\Generation.cs,Generation,The following statement contains a magic number: if (chromosomes == null || chromosomes.Count < 2)              {                  throw new ArgumentOutOfRangeException("chromosomes"' "A generation should have at least 2 chromosomes.");              }
Magic Number,SharpNeatLib.Maths,FastRandom,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\Externals\FastRandom.cs,Next,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,SharpNeatLib.Maths,FastRandom,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\Externals\FastRandom.cs,Next,The following statement contains a magic number: if (range < 0)              {   // If range is <0 then an overflow has occured and must resort to using long integer arithmetic instead (slower).                  // We also must use all 32 bits of precision' instead of the normal 31' which again is slower.	                  return lowerBound + (int)((REAL_UNIT_UINT * (double)(w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));              }
Magic Number,SharpNeatLib.Maths,FastRandom,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\Externals\FastRandom.cs,Next,The following statement contains a magic number: if (range < 0)              {   // If range is <0 then an overflow has occured and must resort to using long integer arithmetic instead (slower).                  // We also must use all 32 bits of precision' instead of the normal 31' which again is slower.	                  return lowerBound + (int)((REAL_UNIT_UINT * (double)(w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));              }
Magic Number,SharpNeatLib.Maths,FastRandom,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\Externals\FastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * (double)range);
Magic Number,SharpNeatLib.Maths,FastRandom,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\Externals\FastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * (double)range);
Magic Number,SharpNeatLib.Maths,FastRandom,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\Externals\FastRandom.cs,NextDouble,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,SharpNeatLib.Maths,FastRandom,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\Externals\FastRandom.cs,NextDouble,The following statement contains a magic number: return (REAL_UNIT_INT * (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))));
Magic Number,SharpNeatLib.Maths,FastRandom,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\Externals\FastRandom.cs,NextDouble,The following statement contains a magic number: return (REAL_UNIT_INT * (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))));
Magic Number,GeneticSharp.Domain.Randomizations,RandomizationExtensions,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\RandomizationExtensions.cs,GetEvenInt,The following statement contains a magic number: checked              {                  var candidate = randomization.GetInt(min' max - 1);                    return candidate % 2 == 0 ? candidate : candidate + 1;              }
Magic Number,GeneticSharp.Domain.Randomizations,RandomizationExtensions,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Domain\Randomizations\RandomizationExtensions.cs,GetOddInt,The following statement contains a magic number: checked              {                  var candidate = randomization.GetInt(min' max - 1);                    return candidate % 2 != 0 ? candidate : candidate + 1;              }
