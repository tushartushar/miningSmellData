Implementation smell,Namespace,Class,File,Method,Description
Long Statement,GeneticSharp.Infrastructure.Threading,SmartThreadPoolTaskExecutor,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Infrastructure.Threading\SmartThreadPoolTaskExecutor.cs,Start,The length of the statement  "                if (!m_threadPool.WaitForIdle(Timeout.TotalMilliseconds > int.MaxValue ? int.MaxValue : Convert.ToInt32(Timeout.TotalMilliseconds))) " is 132.
Magic Number,GeneticSharp.Infrastructure.Threading,SmartThreadPoolTaskExecutor,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Infrastructure.Threading\SmartThreadPoolTaskExecutor.cs,SmartThreadPoolTaskExecutor,The following statement contains a magic number: MinThreads = 2;
Magic Number,GeneticSharp.Infrastructure.Threading,SmartThreadPoolTaskExecutor,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Infrastructure.Threading\SmartThreadPoolTaskExecutor.cs,SmartThreadPoolTaskExecutor,The following statement contains a magic number: MaxThreads = 2;
Magic Number,GeneticSharp.Infrastructure.Threading,SmartThreadPoolTaskExecutor,C:\repos\giacomelli_GeneticSharp\src\GeneticSharp.Infrastructure.Threading\SmartThreadPoolTaskExecutor.cs,Start,The following statement contains a magic number: try              {                  m_threadPool.MinThreads = MinThreads;                  m_threadPool.MaxThreads = MaxThreads;                  var workItemResults = new IWorkItemResult[Tasks.Count];                    for (int i = 0; i < Tasks.Count; i++)                  {                      var t = Tasks[i];                      workItemResults[i] = m_threadPool.QueueWorkItem(new WorkItemCallback(Run)' t);                  }                    m_threadPool.Start();                    // Timeout was reach?                  if (!m_threadPool.WaitForIdle(Timeout.TotalMilliseconds > int.MaxValue ? int.MaxValue : Convert.ToInt32(Timeout.TotalMilliseconds)))                  {                      if (m_threadPool.IsShuttingdown)                      {                          return true;                      }                      else                      {                          m_threadPool.Cancel(true);                          return false;                      }                  }                    foreach (var wi in workItemResults)                  {                      Exception ex;                      wi.GetResult(out ex);                        if (ex != null)                      {                          throw ex;                      }                  }                    return true;              }              finally              {                  m_threadPool.Shutdown(true' 1000);                  m_threadPool.Dispose();                  IsRunning = false;              }
