Implementation smell,Namespace,Class,File,Method,Description
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnOneForFirstIdInNewScope,The following statement contains a magic number: var generator = new UniqueIdGenerator(store) { BatchSize = 3 };
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldInitializeBlobForFirstIdInNewScope,The following statement contains a magic number: var generator = new UniqueIdGenerator(store) { BatchSize = 3 };
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldNotUpdateBlobAtEndOfBatch,The following statement contains a magic number: var generator = new UniqueIdGenerator(store) { BatchSize = 3 };
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldUpdateBlobWhenGeneratingNextIdAfterEndOfBatch,The following statement contains a magic number: var generator = new UniqueIdGenerator(store) { BatchSize = 3 };
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsFromThirdBatchIfSecondBatchTakenByAnotherGenerator,The following statement contains a magic number: var generator1 = new UniqueIdGenerator(store1) { BatchSize = 3 };
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsFromThirdBatchIfSecondBatchTakenByAnotherGenerator,The following statement contains a magic number: var generator2 = new UniqueIdGenerator(store2) { BatchSize = 3 };
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsFromThirdBatchIfSecondBatchTakenByAnotherGenerator,The following statement contains a magic number: Assert.AreEqual(7' lastId);
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsAcrossMultipleGenerators,The following statement contains a magic number: var generator1 = new UniqueIdGenerator(store1) { BatchSize = 3 };
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsAcrossMultipleGenerators,The following statement contains a magic number: var generator2 = new UniqueIdGenerator(store2) { BatchSize = 3 };
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsAcrossMultipleGenerators,The following statement contains a magic number: CollectionAssert.AreEqual(                      new[] { 1' 2' 3' 4' 7' 5' 6' 10' 8' 9 }'                      generatedIds);
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsAcrossMultipleGenerators,The following statement contains a magic number: CollectionAssert.AreEqual(                      new[] { 1' 2' 3' 4' 7' 5' 6' 10' 8' 9 }'                      generatedIds);
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsAcrossMultipleGenerators,The following statement contains a magic number: CollectionAssert.AreEqual(                      new[] { 1' 2' 3' 4' 7' 5' 6' 10' 8' 9 }'                      generatedIds);
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsAcrossMultipleGenerators,The following statement contains a magic number: CollectionAssert.AreEqual(                      new[] { 1' 2' 3' 4' 7' 5' 6' 10' 8' 9 }'                      generatedIds);
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsAcrossMultipleGenerators,The following statement contains a magic number: CollectionAssert.AreEqual(                      new[] { 1' 2' 3' 4' 7' 5' 6' 10' 8' 9 }'                      generatedIds);
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsAcrossMultipleGenerators,The following statement contains a magic number: CollectionAssert.AreEqual(                      new[] { 1' 2' 3' 4' 7' 5' 6' 10' 8' 9 }'                      generatedIds);
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsAcrossMultipleGenerators,The following statement contains a magic number: CollectionAssert.AreEqual(                      new[] { 1' 2' 3' 4' 7' 5' 6' 10' 8' 9 }'                      generatedIds);
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsAcrossMultipleGenerators,The following statement contains a magic number: CollectionAssert.AreEqual(                      new[] { 1' 2' 3' 4' 7' 5' 6' 10' 8' 9 }'                      generatedIds);
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldReturnIdsAcrossMultipleGenerators,The following statement contains a magic number: CollectionAssert.AreEqual(                      new[] { 1' 2' 3' 4' 7' 5' 6' 10' 8' 9 }'                      generatedIds);
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldSupportUsingOneGeneratorFromMultipleThreads,The following statement contains a magic number: var generator = new UniqueIdGenerator(store) { BatchSize = 1000 };
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldSupportUsingOneGeneratorFromMultipleThreads,The following statement contains a magic number: const int testLength = 10000;
Magic Number,IntegrationTests.cs,Scenarios<TTestScope>,D:\research\architectureSmells\repos1\tathamoddie_SnowMaker\IntegrationTests\Scenarios.cs,ShouldSupportUsingOneGeneratorFromMultipleThreads,The following statement contains a magic number: Parallel.For(                      0'                      testLength'                      new ParallelOptions { MaxDegreeOfParallelism = 10 }'                      i =>                      {                          generatedIds.Enqueue(generator.NextId(scopeName));                          threadIds.Enqueue(Thread.CurrentThread.ManagedThreadId);                      });
