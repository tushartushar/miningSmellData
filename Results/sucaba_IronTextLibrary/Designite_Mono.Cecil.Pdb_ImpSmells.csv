Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,Insert,The method has 85 lines of code.
Long Method,Microsoft.Cci.Pdb,PdbConstant,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbConstant.cs,PdbConstant,The method has 79 lines of code.
Long Method,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The method has 93 lines of code.
Long Method,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadTokenToSourceInfo,The method has 69 lines of code.
Long Method,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,LoadManagedFunctions,The method has 78 lines of code.
Long Method,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The method has 116 lines of code.
Long Method,Microsoft.Cci.Pdb,PdbScope,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbScope.cs,PdbScope,The method has 72 lines of code.
Complex Method,Microsoft.Cci.Pdb,DataStream,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\DataStream.cs,Read,Cyclomatic complexity of the method is 7
Complex Method,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,Insert,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Cci.Pdb,PdbConstant,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbConstant.cs,PdbConstant,Cyclomatic complexity of the method is 53
Complex Method,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadFunctions,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadTokenToSourceInfo,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,ReadSourceFileInfo,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,LoadManagedFunctions,Cyclomatic complexity of the method is 37
Complex Method,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,CountScopesAndSlots,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,Cyclomatic complexity of the method is 33
Complex Method,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,ReadCustomMetadata,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Cci.Pdb,PdbScope,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbScope.cs,PdbScope,Cyclomatic complexity of the method is 23
Long Parameter List,Microsoft.Cci.Pdb,DataStream,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\DataStream.cs,Read,The method has 5 parameters.
Long Parameter List,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,InitHash,The method has 4 parameters.
Long Parameter List,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,putEntry,The method has 4 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadGuidStream,The method has 4 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The method has 7 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadFuncsFromDbiModule,The method has 8 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadDbiStream,The method has 4 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadFunctions,The method has 5 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadTokenToSourceInfo,The method has 7 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,ReadSourceFileInfo,The method has 6 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,CountScopesAndSlots,The method has 6 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbLine,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbLine.cs,PdbLine,The method has 5 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbScope,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbScope.cs,PdbScope,The method has 5 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbScope,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbScope.cs,PdbScope,The method has 4 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbSource,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbSource.cs,PdbSource,The method has 4 parameters.
Long Parameter List,Microsoft.Cci.Pdb,PdbTokenLine,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbTokenLine.cs,PdbTokenLine,The method has 6 parameters.
Long Parameter List,Mono.Cecil.Pdb,ISymUnmanagedWriter2,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ISymUnmanagedWriter2.cs,DefineDocument,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ISymUnmanagedWriter2,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ISymUnmanagedWriter2.cs,Initialize,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ISymUnmanagedWriter2,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ISymUnmanagedWriter2.cs,GetDebugInfo,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ISymUnmanagedWriter2,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ISymUnmanagedWriter2.cs,DefineSequencePoints,The method has 7 parameters.
Long Parameter List,Mono.Cecil.Pdb,ISymUnmanagedWriter2,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ISymUnmanagedWriter2.cs,DefineLocalVariable2,The method has 9 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineTypeDef,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineNestedType,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineMethod,The method has 7 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineImportType,The method has 6 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineMemberRef,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineImportMember,The method has 7 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineEvent,The method has 8 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetClassLayout,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefinePermissionSet,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetMethodProps,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetTypeDefProps,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetEventProps,The method has 7 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetPermissionSetProps,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefinePinvokeMap,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetPinvokeMap,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineCustomAttribute,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineField,The method has 8 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineProperty,The method has 11 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineParam,The method has 7 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetFieldProps,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetPropertyProps,The method has 8 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetParamProps,The method has 6 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataEmit,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,TranslateSigWithScope,The method has 10 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumInterfaceImpls,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetTypeDefProps,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetTypeRefProps,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMembers,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMembersWithName,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMethods,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMethodsWithName,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumFields,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumFieldsWithName,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumParams,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMemberRefs,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMethodImpls,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumPermissionSets,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,FindMember,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,FindMethod,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,FindField,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,FindMemberRef,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetMethodProps,The method has 9 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetMemberRefProps,The method has 6 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumProperties,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumEvents,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetEventProps,The method has 12 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMethodSemantics,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetClassLayout,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetPinvokeMap,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumCustomAttributes,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetCustomAttributeProps,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetMemberProps,The method has 12 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetFieldProps,The method has 10 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetPropertyProps,The method has 15 parameters.
Long Parameter List,Mono.Cecil.Pdb,IMetaDataImport,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetParamProps,The method has 9 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineTypeDef,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineNestedType,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineMethod,The method has 7 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineImportType,The method has 6 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineMemberRef,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineImportMember,The method has 7 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineEvent,The method has 8 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetClassLayout,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefinePermissionSet,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetMethodProps,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetTypeDefProps,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetEventProps,The method has 7 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetPermissionSetProps,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefinePinvokeMap,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetPinvokeMap,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineCustomAttribute,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineField,The method has 8 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineProperty,The method has 11 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,DefineParam,The method has 7 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetFieldProps,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetPropertyProps,The method has 8 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,SetParamProps,The method has 6 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,TranslateSigWithScope,The method has 10 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumInterfaceImpls,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetTypeDefProps,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,WriteString,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetTypeRefProps,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMembers,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMembersWithName,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMethods,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMethodsWithName,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumFields,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumFieldsWithName,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumParams,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMemberRefs,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMethodImpls,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumPermissionSets,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,FindMember,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,FindMethod,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,FindField,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,FindMemberRef,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetMethodProps,The method has 9 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetMemberRefProps,The method has 6 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumProperties,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumEvents,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetEventProps,The method has 12 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumMethodSemantics,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetClassLayout,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetPinvokeMap,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,EnumCustomAttributes,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetCustomAttributeProps,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetMemberProps,The method has 12 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetFieldProps,The method has 10 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetPropertyProps,The method has 15 parameters.
Long Parameter List,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,GetParamProps,The method has 9 parameters.
Long Parameter List,Mono.Cecil.Pdb,PdbReader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbReader.cs,ReadScopeAndLocals,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,PdbReader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbReader.cs,ReadScopeAndLocals,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,PdbWriter,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbWriter.cs,CreateLocalVariable,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,SymWriter,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\SymWriter.cs,CoCreateInstance,The method has 5 parameters.
Long Parameter List,Mono.Cecil.Pdb,SymWriter,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\SymWriter.cs,DefineLocalVariable2,The method has 9 parameters.
Long Parameter List,Mono.Cecil.Pdb,SymWriter,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\SymWriter.cs,DefineDocument,The method has 4 parameters.
Long Parameter List,Mono.Cecil.Pdb,SymWriter,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\SymWriter.cs,DefineParameter,The method has 7 parameters.
Long Parameter List,Mono.Cecil.Pdb,SymWriter,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\SymWriter.cs,DefineSequencePoints,The method has 6 parameters.
Long Statement,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt32,The length of the statement  "	value = (int)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24)); " is 133.
Long Statement,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The length of the statement  "	value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56)); " is 310.
Long Statement,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt32,The length of the statement  "	value = (uint)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24)); " is 134.
Long Statement,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The length of the statement  "	value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56)); " is 311.
Long Statement,Mono.Cecil.Pdb,PdbWriter,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbWriter.cs,CreateLocalVariable,The length of the statement  "	writer.DefineLocalVariable2 (variable.Name' 0' local_var_token' SymAddressKind.ILOffset' variable.Index' 0' 0' start_offset' end_offset); " is 137.
Long Statement,Mono.Cecil.Pdb,PdbWriter,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbWriter.cs,GetDocument,The length of the statement  "	doc_writer = writer.DefineDocument (document.Url' document.Language.ToGuid ()' document.LanguageVendor.ToGuid ()' document.Type.ToGuid ()); " is 139.
Long Statement,Mono.Cecil.Pdb,SymWriter,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\SymWriter.cs,DefineLocalVariable2,The length of the statement  "	m_writer.DefineLocalVariable2 (name' (int)attributes' sigToken' (int)addrKind' addr1' addr2' addr3' startOffset' endOffset); " is 124.
Long Statement,Mono.Cecil.Pdb,SymWriter,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\SymWriter.cs,DefineSequencePoints,The length of the statement  "	m_writer.DefineSequencePoints (document.GetUnmanaged ()' offsets.Length' offsets' lines' columns' endLines' endColumns); " is 120.
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt16,The following statement contains a magic number: value = (short)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt16,The following statement contains a magic number: offset += 2;  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt32,The following statement contains a magic number: value = (int)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt32,The following statement contains a magic number: value = (int)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt32,The following statement contains a magic number: value = (int)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt32,The following statement contains a magic number: value = (int)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt32,The following statement contains a magic number: value = (int)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt32,The following statement contains a magic number: offset += 4;  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: value = (long)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadInt64,The following statement contains a magic number: offset += 8;  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt16,The following statement contains a magic number: value = (ushort)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt16,The following statement contains a magic number: offset += 2;  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt32,The following statement contains a magic number: value = (uint)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt32,The following statement contains a magic number: value = (uint)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt32,The following statement contains a magic number: value = (uint)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt32,The following statement contains a magic number: value = (uint)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt32,The following statement contains a magic number: value = (uint)((buffer [offset + 0] & 0xFF) | (buffer [offset + 1] << 8) | (buffer [offset + 2] << 16) | (buffer [offset + 3] << 24));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt32,The following statement contains a magic number: offset += 4;  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: value = (ulong)(((ulong)buffer [offset + 0] & 0xFF) | ((ulong)buffer [offset + 1] << 8) | ((ulong)buffer [offset + 2] << 16) | ((ulong)buffer [offset + 3] << 24) | ((ulong)buffer [offset + 4] << 32) | ((ulong)buffer [offset + 5] << 40) | ((ulong)buffer [offset + 6] << 48) | ((ulong)buffer [offset + 7] << 56));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadUInt64,The following statement contains a magic number: offset += 8;  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadFloat,The following statement contains a magic number: offset += 4;  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadDouble,The following statement contains a magic number: offset += 8;  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadDecimal,The following statement contains a magic number: return new decimal (bits [2]' bits [3]' bits [1]' bits [0] < 0' (byte)((bits [0] & 0x00FF0000) >> 16));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadDecimal,The following statement contains a magic number: return new decimal (bits [2]' bits [3]' bits [1]' bits [0] < 0' (byte)((bits [0] & 0x00FF0000) >> 16));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadDecimal,The following statement contains a magic number: return new decimal (bits [2]' bits [3]' bits [1]' bits [0] < 0' (byte)((bits [0] & 0x00FF0000) >> 16));  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadString,The following statement contains a magic number: while (offset + len < buffer.Length && buffer [offset + len] != 0) {  	len += 2;  }  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadString,The following statement contains a magic number: len += 2;  
Magic Number,Microsoft.Cci.Pdb,BitAccess,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitAccess.cs,ReadString,The following statement contains a magic number: offset += len + 2;  
Magic Number,Microsoft.Cci.Pdb,BitSet,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\BitSet.cs,GetBit,The following statement contains a magic number: return ((uint)1 << (index % 32));  
Magic Number,Microsoft.Cci.Pdb,DbiModuleInfo,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\DbiModuleInfo.cs,DbiModuleInfo,The following statement contains a magic number: bits.Align (4);  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,IntHashTable,The following statement contains a magic number: if (!(loadFactorPerc >= 10 && loadFactorPerc <= 100))  	throw new ArgumentOutOfRangeException ("loadFactorPerc"' String.Format ("ArgumentOutOfRange_IntHashTableLoadFactor"' 10' 100));  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,IntHashTable,The following statement contains a magic number: if (!(loadFactorPerc >= 10 && loadFactorPerc <= 100))  	throw new ArgumentOutOfRangeException ("loadFactorPerc"' String.Format ("ArgumentOutOfRange_IntHashTableLoadFactor"' 10' 100));  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,IntHashTable,The following statement contains a magic number: if (!(loadFactorPerc >= 10 && loadFactorPerc <= 100))  	throw new ArgumentOutOfRangeException ("loadFactorPerc"' String.Format ("ArgumentOutOfRange_IntHashTableLoadFactor"' 10' 100));  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,IntHashTable,The following statement contains a magic number: if (!(loadFactorPerc >= 10 && loadFactorPerc <= 100))  	throw new ArgumentOutOfRangeException ("loadFactorPerc"' String.Format ("ArgumentOutOfRange_IntHashTableLoadFactor"' 10' 100));  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,IntHashTable,The following statement contains a magic number: throw new ArgumentOutOfRangeException ("loadFactorPerc"' String.Format ("ArgumentOutOfRange_IntHashTableLoadFactor"' 10' 100));  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,IntHashTable,The following statement contains a magic number: throw new ArgumentOutOfRangeException ("loadFactorPerc"' String.Format ("ArgumentOutOfRange_IntHashTableLoadFactor"' 10' 100));  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,IntHashTable,The following statement contains a magic number: this.loadFactorPerc = (loadFactorPerc * 72) / 100;  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,IntHashTable,The following statement contains a magic number: this.loadFactorPerc = (loadFactorPerc * 72) / 100;  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,IntHashTable,The following statement contains a magic number: loadsize = (int)(this.loadFactorPerc * hashsize) / 100;  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,InitHash,The following statement contains a magic number: incr = (uint)(1 + (((seed >> 5) + 1) % ((uint)hashsize - 1)));  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,expand,The following statement contains a magic number: rehash (GetPrime (1 + buckets.Length * 2));  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,rehash,The following statement contains a magic number: loadsize = (int)(loadFactorPerc * newsize) / 100;  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,Insert,The following statement contains a magic number: if (count >= loadsize) {  	expand ();  } else if (occupancy > loadsize && count > 100) {  	rehash ();  }  
Magic Number,Microsoft.Cci.Pdb,IntHashTable,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\IntHashTable.cs,Insert,The following statement contains a magic number: if (occupancy > loadsize && count > 100) {  	rehash ();  }  
Magic Number,Microsoft.Cci.Pdb,MsfDirectory,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\MsfDirectory.cs,MsfDirectory,The following statement contains a magic number: for (int i = 0; i < directoryRootPages; i++) {  	int pagesInThisPage = pagesToGo <= pagesPerPage ? pagesToGo : pagesPerPage;  	reader.Seek (head.directoryRoot [i]' 0);  	bits.Append (reader.reader' pagesInThisPage * 4);  	pagesToGo -= pagesInThisPage;  }  
Magic Number,Microsoft.Cci.Pdb,MsfDirectory,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\MsfDirectory.cs,MsfDirectory,The following statement contains a magic number: bits.Append (reader.reader' pagesInThisPage * 4);  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < limit) {  	int sig;  	int siz;  	bits.ReadInt32 (out sig);  	bits.ReadInt32 (out siz);  	int endSym = bits.Position + siz;  	switch ((DEBUG_S_SUBSECTION)sig) {  	case DEBUG_S_SUBSECTION.LINES: {  		CV_LineSection sec;  		bits.ReadUInt32 (out sec.off);  		bits.ReadUInt16 (out sec.sec);  		bits.ReadUInt16 (out sec.flags);  		bits.ReadUInt32 (out sec.cod);  		int funcIndex = FindFunction (funcs' sec.sec' sec.off);  		if (funcIndex < 0)  			break;  		var func = funcs [funcIndex];  		if (func.lines == null) {  			while (funcIndex > 0) {  				var f = funcs [funcIndex - 1];  				if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex--;  			}  		} else {  			while (funcIndex < funcs.Length - 1 && func.lines != null) {  				var f = funcs [funcIndex + 1];  				if (f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex++;  			}  		}  		if (func.lines != null)  			break;  		// Count the line blocks.  		int begSym = bits.Position;  		int blocks = 0;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  			bits.Position += linsiz;  			blocks++;  		}  		func.lines = new PdbLines[blocks];  		int block = 0;  		bits.Position = begSym;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			PdbSource src = (PdbSource)checks [(int)file.index];  			PdbLines tmp = new PdbLines (src' file.count);  			func.lines [block++] = tmp;  			PdbLine[] lines = tmp.lines;  			int plin = bits.Position;  			int pcol = bits.Position + 8 * (int)file.count;  			for (int i = 0; i < file.count; i++) {  				CV_Line line;  				CV_Column column = new CV_Column ();  				bits.Position = plin + 8 * i;  				bits.ReadUInt32 (out line.offset);  				bits.ReadUInt32 (out line.flags);  				uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  				uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  				//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  				if ((sec.flags & 1) != 0) {  					bits.Position = pcol + 4 * i;  					bits.ReadUInt16 (out column.offColumnStart);  					bits.ReadUInt16 (out column.offColumnEnd);  				}  				lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  			}  		}  		break;  	}  	}  	bits.Position = endSym;  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < limit) {  	int sig;  	int siz;  	bits.ReadInt32 (out sig);  	bits.ReadInt32 (out siz);  	int endSym = bits.Position + siz;  	switch ((DEBUG_S_SUBSECTION)sig) {  	case DEBUG_S_SUBSECTION.LINES: {  		CV_LineSection sec;  		bits.ReadUInt32 (out sec.off);  		bits.ReadUInt16 (out sec.sec);  		bits.ReadUInt16 (out sec.flags);  		bits.ReadUInt32 (out sec.cod);  		int funcIndex = FindFunction (funcs' sec.sec' sec.off);  		if (funcIndex < 0)  			break;  		var func = funcs [funcIndex];  		if (func.lines == null) {  			while (funcIndex > 0) {  				var f = funcs [funcIndex - 1];  				if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex--;  			}  		} else {  			while (funcIndex < funcs.Length - 1 && func.lines != null) {  				var f = funcs [funcIndex + 1];  				if (f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex++;  			}  		}  		if (func.lines != null)  			break;  		// Count the line blocks.  		int begSym = bits.Position;  		int blocks = 0;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  			bits.Position += linsiz;  			blocks++;  		}  		func.lines = new PdbLines[blocks];  		int block = 0;  		bits.Position = begSym;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			PdbSource src = (PdbSource)checks [(int)file.index];  			PdbLines tmp = new PdbLines (src' file.count);  			func.lines [block++] = tmp;  			PdbLine[] lines = tmp.lines;  			int plin = bits.Position;  			int pcol = bits.Position + 8 * (int)file.count;  			for (int i = 0; i < file.count; i++) {  				CV_Line line;  				CV_Column column = new CV_Column ();  				bits.Position = plin + 8 * i;  				bits.ReadUInt32 (out line.offset);  				bits.ReadUInt32 (out line.flags);  				uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  				uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  				//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  				if ((sec.flags & 1) != 0) {  					bits.Position = pcol + 4 * i;  					bits.ReadUInt16 (out column.offColumnStart);  					bits.ReadUInt16 (out column.offColumnEnd);  				}  				lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  			}  		}  		break;  	}  	}  	bits.Position = endSym;  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < limit) {  	int sig;  	int siz;  	bits.ReadInt32 (out sig);  	bits.ReadInt32 (out siz);  	int endSym = bits.Position + siz;  	switch ((DEBUG_S_SUBSECTION)sig) {  	case DEBUG_S_SUBSECTION.LINES: {  		CV_LineSection sec;  		bits.ReadUInt32 (out sec.off);  		bits.ReadUInt16 (out sec.sec);  		bits.ReadUInt16 (out sec.flags);  		bits.ReadUInt32 (out sec.cod);  		int funcIndex = FindFunction (funcs' sec.sec' sec.off);  		if (funcIndex < 0)  			break;  		var func = funcs [funcIndex];  		if (func.lines == null) {  			while (funcIndex > 0) {  				var f = funcs [funcIndex - 1];  				if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex--;  			}  		} else {  			while (funcIndex < funcs.Length - 1 && func.lines != null) {  				var f = funcs [funcIndex + 1];  				if (f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex++;  			}  		}  		if (func.lines != null)  			break;  		// Count the line blocks.  		int begSym = bits.Position;  		int blocks = 0;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  			bits.Position += linsiz;  			blocks++;  		}  		func.lines = new PdbLines[blocks];  		int block = 0;  		bits.Position = begSym;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			PdbSource src = (PdbSource)checks [(int)file.index];  			PdbLines tmp = new PdbLines (src' file.count);  			func.lines [block++] = tmp;  			PdbLine[] lines = tmp.lines;  			int plin = bits.Position;  			int pcol = bits.Position + 8 * (int)file.count;  			for (int i = 0; i < file.count; i++) {  				CV_Line line;  				CV_Column column = new CV_Column ();  				bits.Position = plin + 8 * i;  				bits.ReadUInt32 (out line.offset);  				bits.ReadUInt32 (out line.flags);  				uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  				uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  				//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  				if ((sec.flags & 1) != 0) {  					bits.Position = pcol + 4 * i;  					bits.ReadUInt16 (out column.offColumnStart);  					bits.ReadUInt16 (out column.offColumnEnd);  				}  				lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  			}  		}  		break;  	}  	}  	bits.Position = endSym;  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < limit) {  	int sig;  	int siz;  	bits.ReadInt32 (out sig);  	bits.ReadInt32 (out siz);  	int endSym = bits.Position + siz;  	switch ((DEBUG_S_SUBSECTION)sig) {  	case DEBUG_S_SUBSECTION.LINES: {  		CV_LineSection sec;  		bits.ReadUInt32 (out sec.off);  		bits.ReadUInt16 (out sec.sec);  		bits.ReadUInt16 (out sec.flags);  		bits.ReadUInt32 (out sec.cod);  		int funcIndex = FindFunction (funcs' sec.sec' sec.off);  		if (funcIndex < 0)  			break;  		var func = funcs [funcIndex];  		if (func.lines == null) {  			while (funcIndex > 0) {  				var f = funcs [funcIndex - 1];  				if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex--;  			}  		} else {  			while (funcIndex < funcs.Length - 1 && func.lines != null) {  				var f = funcs [funcIndex + 1];  				if (f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex++;  			}  		}  		if (func.lines != null)  			break;  		// Count the line blocks.  		int begSym = bits.Position;  		int blocks = 0;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  			bits.Position += linsiz;  			blocks++;  		}  		func.lines = new PdbLines[blocks];  		int block = 0;  		bits.Position = begSym;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			PdbSource src = (PdbSource)checks [(int)file.index];  			PdbLines tmp = new PdbLines (src' file.count);  			func.lines [block++] = tmp;  			PdbLine[] lines = tmp.lines;  			int plin = bits.Position;  			int pcol = bits.Position + 8 * (int)file.count;  			for (int i = 0; i < file.count; i++) {  				CV_Line line;  				CV_Column column = new CV_Column ();  				bits.Position = plin + 8 * i;  				bits.ReadUInt32 (out line.offset);  				bits.ReadUInt32 (out line.flags);  				uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  				uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  				//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  				if ((sec.flags & 1) != 0) {  					bits.Position = pcol + 4 * i;  					bits.ReadUInt16 (out column.offColumnStart);  					bits.ReadUInt16 (out column.offColumnEnd);  				}  				lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  			}  		}  		break;  	}  	}  	bits.Position = endSym;  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < limit) {  	int sig;  	int siz;  	bits.ReadInt32 (out sig);  	bits.ReadInt32 (out siz);  	int endSym = bits.Position + siz;  	switch ((DEBUG_S_SUBSECTION)sig) {  	case DEBUG_S_SUBSECTION.LINES: {  		CV_LineSection sec;  		bits.ReadUInt32 (out sec.off);  		bits.ReadUInt16 (out sec.sec);  		bits.ReadUInt16 (out sec.flags);  		bits.ReadUInt32 (out sec.cod);  		int funcIndex = FindFunction (funcs' sec.sec' sec.off);  		if (funcIndex < 0)  			break;  		var func = funcs [funcIndex];  		if (func.lines == null) {  			while (funcIndex > 0) {  				var f = funcs [funcIndex - 1];  				if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex--;  			}  		} else {  			while (funcIndex < funcs.Length - 1 && func.lines != null) {  				var f = funcs [funcIndex + 1];  				if (f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex++;  			}  		}  		if (func.lines != null)  			break;  		// Count the line blocks.  		int begSym = bits.Position;  		int blocks = 0;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  			bits.Position += linsiz;  			blocks++;  		}  		func.lines = new PdbLines[blocks];  		int block = 0;  		bits.Position = begSym;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			PdbSource src = (PdbSource)checks [(int)file.index];  			PdbLines tmp = new PdbLines (src' file.count);  			func.lines [block++] = tmp;  			PdbLine[] lines = tmp.lines;  			int plin = bits.Position;  			int pcol = bits.Position + 8 * (int)file.count;  			for (int i = 0; i < file.count; i++) {  				CV_Line line;  				CV_Column column = new CV_Column ();  				bits.Position = plin + 8 * i;  				bits.ReadUInt32 (out line.offset);  				bits.ReadUInt32 (out line.flags);  				uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  				uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  				//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  				if ((sec.flags & 1) != 0) {  					bits.Position = pcol + 4 * i;  					bits.ReadUInt16 (out column.offColumnStart);  					bits.ReadUInt16 (out column.offColumnEnd);  				}  				lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  			}  		}  		break;  	}  	}  	bits.Position = endSym;  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < limit) {  	int sig;  	int siz;  	bits.ReadInt32 (out sig);  	bits.ReadInt32 (out siz);  	int endSym = bits.Position + siz;  	switch ((DEBUG_S_SUBSECTION)sig) {  	case DEBUG_S_SUBSECTION.LINES: {  		CV_LineSection sec;  		bits.ReadUInt32 (out sec.off);  		bits.ReadUInt16 (out sec.sec);  		bits.ReadUInt16 (out sec.flags);  		bits.ReadUInt32 (out sec.cod);  		int funcIndex = FindFunction (funcs' sec.sec' sec.off);  		if (funcIndex < 0)  			break;  		var func = funcs [funcIndex];  		if (func.lines == null) {  			while (funcIndex > 0) {  				var f = funcs [funcIndex - 1];  				if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex--;  			}  		} else {  			while (funcIndex < funcs.Length - 1 && func.lines != null) {  				var f = funcs [funcIndex + 1];  				if (f.segment != sec.sec || f.address != sec.off)  					break;  				func = f;  				funcIndex++;  			}  		}  		if (func.lines != null)  			break;  		// Count the line blocks.  		int begSym = bits.Position;  		int blocks = 0;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  			bits.Position += linsiz;  			blocks++;  		}  		func.lines = new PdbLines[blocks];  		int block = 0;  		bits.Position = begSym;  		while (bits.Position < endSym) {  			CV_SourceFile file;  			bits.ReadUInt32 (out file.index);  			bits.ReadUInt32 (out file.count);  			bits.ReadUInt32 (out file.linsiz);  			// Size of payload.  			PdbSource src = (PdbSource)checks [(int)file.index];  			PdbLines tmp = new PdbLines (src' file.count);  			func.lines [block++] = tmp;  			PdbLine[] lines = tmp.lines;  			int plin = bits.Position;  			int pcol = bits.Position + 8 * (int)file.count;  			for (int i = 0; i < file.count; i++) {  				CV_Line line;  				CV_Column column = new CV_Column ();  				bits.Position = plin + 8 * i;  				bits.ReadUInt32 (out line.offset);  				bits.ReadUInt32 (out line.flags);  				uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  				uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  				//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  				if ((sec.flags & 1) != 0) {  					bits.Position = pcol + 4 * i;  					bits.ReadUInt16 (out column.offColumnStart);  					bits.ReadUInt16 (out column.offColumnEnd);  				}  				lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  			}  		}  		break;  	}  	}  	bits.Position = endSym;  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: switch ((DEBUG_S_SUBSECTION)sig) {  case DEBUG_S_SUBSECTION.LINES: {  	CV_LineSection sec;  	bits.ReadUInt32 (out sec.off);  	bits.ReadUInt16 (out sec.sec);  	bits.ReadUInt16 (out sec.flags);  	bits.ReadUInt32 (out sec.cod);  	int funcIndex = FindFunction (funcs' sec.sec' sec.off);  	if (funcIndex < 0)  		break;  	var func = funcs [funcIndex];  	if (func.lines == null) {  		while (funcIndex > 0) {  			var f = funcs [funcIndex - 1];  			if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex--;  		}  	} else {  		while (funcIndex < funcs.Length - 1 && func.lines != null) {  			var f = funcs [funcIndex + 1];  			if (f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex++;  		}  	}  	if (func.lines != null)  		break;  	// Count the line blocks.  	int begSym = bits.Position;  	int blocks = 0;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  		bits.Position += linsiz;  		blocks++;  	}  	func.lines = new PdbLines[blocks];  	int block = 0;  	bits.Position = begSym;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		PdbSource src = (PdbSource)checks [(int)file.index];  		PdbLines tmp = new PdbLines (src' file.count);  		func.lines [block++] = tmp;  		PdbLine[] lines = tmp.lines;  		int plin = bits.Position;  		int pcol = bits.Position + 8 * (int)file.count;  		for (int i = 0; i < file.count; i++) {  			CV_Line line;  			CV_Column column = new CV_Column ();  			bits.Position = plin + 8 * i;  			bits.ReadUInt32 (out line.offset);  			bits.ReadUInt32 (out line.flags);  			uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  			uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  			//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  			if ((sec.flags & 1) != 0) {  				bits.Position = pcol + 4 * i;  				bits.ReadUInt16 (out column.offColumnStart);  				bits.ReadUInt16 (out column.offColumnEnd);  			}  			lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  		}  	}  	break;  }  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: switch ((DEBUG_S_SUBSECTION)sig) {  case DEBUG_S_SUBSECTION.LINES: {  	CV_LineSection sec;  	bits.ReadUInt32 (out sec.off);  	bits.ReadUInt16 (out sec.sec);  	bits.ReadUInt16 (out sec.flags);  	bits.ReadUInt32 (out sec.cod);  	int funcIndex = FindFunction (funcs' sec.sec' sec.off);  	if (funcIndex < 0)  		break;  	var func = funcs [funcIndex];  	if (func.lines == null) {  		while (funcIndex > 0) {  			var f = funcs [funcIndex - 1];  			if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex--;  		}  	} else {  		while (funcIndex < funcs.Length - 1 && func.lines != null) {  			var f = funcs [funcIndex + 1];  			if (f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex++;  		}  	}  	if (func.lines != null)  		break;  	// Count the line blocks.  	int begSym = bits.Position;  	int blocks = 0;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  		bits.Position += linsiz;  		blocks++;  	}  	func.lines = new PdbLines[blocks];  	int block = 0;  	bits.Position = begSym;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		PdbSource src = (PdbSource)checks [(int)file.index];  		PdbLines tmp = new PdbLines (src' file.count);  		func.lines [block++] = tmp;  		PdbLine[] lines = tmp.lines;  		int plin = bits.Position;  		int pcol = bits.Position + 8 * (int)file.count;  		for (int i = 0; i < file.count; i++) {  			CV_Line line;  			CV_Column column = new CV_Column ();  			bits.Position = plin + 8 * i;  			bits.ReadUInt32 (out line.offset);  			bits.ReadUInt32 (out line.flags);  			uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  			uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  			//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  			if ((sec.flags & 1) != 0) {  				bits.Position = pcol + 4 * i;  				bits.ReadUInt16 (out column.offColumnStart);  				bits.ReadUInt16 (out column.offColumnEnd);  			}  			lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  		}  	}  	break;  }  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: switch ((DEBUG_S_SUBSECTION)sig) {  case DEBUG_S_SUBSECTION.LINES: {  	CV_LineSection sec;  	bits.ReadUInt32 (out sec.off);  	bits.ReadUInt16 (out sec.sec);  	bits.ReadUInt16 (out sec.flags);  	bits.ReadUInt32 (out sec.cod);  	int funcIndex = FindFunction (funcs' sec.sec' sec.off);  	if (funcIndex < 0)  		break;  	var func = funcs [funcIndex];  	if (func.lines == null) {  		while (funcIndex > 0) {  			var f = funcs [funcIndex - 1];  			if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex--;  		}  	} else {  		while (funcIndex < funcs.Length - 1 && func.lines != null) {  			var f = funcs [funcIndex + 1];  			if (f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex++;  		}  	}  	if (func.lines != null)  		break;  	// Count the line blocks.  	int begSym = bits.Position;  	int blocks = 0;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  		bits.Position += linsiz;  		blocks++;  	}  	func.lines = new PdbLines[blocks];  	int block = 0;  	bits.Position = begSym;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		PdbSource src = (PdbSource)checks [(int)file.index];  		PdbLines tmp = new PdbLines (src' file.count);  		func.lines [block++] = tmp;  		PdbLine[] lines = tmp.lines;  		int plin = bits.Position;  		int pcol = bits.Position + 8 * (int)file.count;  		for (int i = 0; i < file.count; i++) {  			CV_Line line;  			CV_Column column = new CV_Column ();  			bits.Position = plin + 8 * i;  			bits.ReadUInt32 (out line.offset);  			bits.ReadUInt32 (out line.flags);  			uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  			uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  			//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  			if ((sec.flags & 1) != 0) {  				bits.Position = pcol + 4 * i;  				bits.ReadUInt16 (out column.offColumnStart);  				bits.ReadUInt16 (out column.offColumnEnd);  			}  			lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  		}  	}  	break;  }  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: switch ((DEBUG_S_SUBSECTION)sig) {  case DEBUG_S_SUBSECTION.LINES: {  	CV_LineSection sec;  	bits.ReadUInt32 (out sec.off);  	bits.ReadUInt16 (out sec.sec);  	bits.ReadUInt16 (out sec.flags);  	bits.ReadUInt32 (out sec.cod);  	int funcIndex = FindFunction (funcs' sec.sec' sec.off);  	if (funcIndex < 0)  		break;  	var func = funcs [funcIndex];  	if (func.lines == null) {  		while (funcIndex > 0) {  			var f = funcs [funcIndex - 1];  			if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex--;  		}  	} else {  		while (funcIndex < funcs.Length - 1 && func.lines != null) {  			var f = funcs [funcIndex + 1];  			if (f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex++;  		}  	}  	if (func.lines != null)  		break;  	// Count the line blocks.  	int begSym = bits.Position;  	int blocks = 0;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  		bits.Position += linsiz;  		blocks++;  	}  	func.lines = new PdbLines[blocks];  	int block = 0;  	bits.Position = begSym;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		PdbSource src = (PdbSource)checks [(int)file.index];  		PdbLines tmp = new PdbLines (src' file.count);  		func.lines [block++] = tmp;  		PdbLine[] lines = tmp.lines;  		int plin = bits.Position;  		int pcol = bits.Position + 8 * (int)file.count;  		for (int i = 0; i < file.count; i++) {  			CV_Line line;  			CV_Column column = new CV_Column ();  			bits.Position = plin + 8 * i;  			bits.ReadUInt32 (out line.offset);  			bits.ReadUInt32 (out line.flags);  			uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  			uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  			//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  			if ((sec.flags & 1) != 0) {  				bits.Position = pcol + 4 * i;  				bits.ReadUInt16 (out column.offColumnStart);  				bits.ReadUInt16 (out column.offColumnEnd);  			}  			lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  		}  	}  	break;  }  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: switch ((DEBUG_S_SUBSECTION)sig) {  case DEBUG_S_SUBSECTION.LINES: {  	CV_LineSection sec;  	bits.ReadUInt32 (out sec.off);  	bits.ReadUInt16 (out sec.sec);  	bits.ReadUInt16 (out sec.flags);  	bits.ReadUInt32 (out sec.cod);  	int funcIndex = FindFunction (funcs' sec.sec' sec.off);  	if (funcIndex < 0)  		break;  	var func = funcs [funcIndex];  	if (func.lines == null) {  		while (funcIndex > 0) {  			var f = funcs [funcIndex - 1];  			if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex--;  		}  	} else {  		while (funcIndex < funcs.Length - 1 && func.lines != null) {  			var f = funcs [funcIndex + 1];  			if (f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex++;  		}  	}  	if (func.lines != null)  		break;  	// Count the line blocks.  	int begSym = bits.Position;  	int blocks = 0;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  		bits.Position += linsiz;  		blocks++;  	}  	func.lines = new PdbLines[blocks];  	int block = 0;  	bits.Position = begSym;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		PdbSource src = (PdbSource)checks [(int)file.index];  		PdbLines tmp = new PdbLines (src' file.count);  		func.lines [block++] = tmp;  		PdbLine[] lines = tmp.lines;  		int plin = bits.Position;  		int pcol = bits.Position + 8 * (int)file.count;  		for (int i = 0; i < file.count; i++) {  			CV_Line line;  			CV_Column column = new CV_Column ();  			bits.Position = plin + 8 * i;  			bits.ReadUInt32 (out line.offset);  			bits.ReadUInt32 (out line.flags);  			uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  			uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  			//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  			if ((sec.flags & 1) != 0) {  				bits.Position = pcol + 4 * i;  				bits.ReadUInt16 (out column.offColumnStart);  				bits.ReadUInt16 (out column.offColumnEnd);  			}  			lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  		}  	}  	break;  }  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: switch ((DEBUG_S_SUBSECTION)sig) {  case DEBUG_S_SUBSECTION.LINES: {  	CV_LineSection sec;  	bits.ReadUInt32 (out sec.off);  	bits.ReadUInt16 (out sec.sec);  	bits.ReadUInt16 (out sec.flags);  	bits.ReadUInt32 (out sec.cod);  	int funcIndex = FindFunction (funcs' sec.sec' sec.off);  	if (funcIndex < 0)  		break;  	var func = funcs [funcIndex];  	if (func.lines == null) {  		while (funcIndex > 0) {  			var f = funcs [funcIndex - 1];  			if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex--;  		}  	} else {  		while (funcIndex < funcs.Length - 1 && func.lines != null) {  			var f = funcs [funcIndex + 1];  			if (f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex++;  		}  	}  	if (func.lines != null)  		break;  	// Count the line blocks.  	int begSym = bits.Position;  	int blocks = 0;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  		bits.Position += linsiz;  		blocks++;  	}  	func.lines = new PdbLines[blocks];  	int block = 0;  	bits.Position = begSym;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		PdbSource src = (PdbSource)checks [(int)file.index];  		PdbLines tmp = new PdbLines (src' file.count);  		func.lines [block++] = tmp;  		PdbLine[] lines = tmp.lines;  		int plin = bits.Position;  		int pcol = bits.Position + 8 * (int)file.count;  		for (int i = 0; i < file.count; i++) {  			CV_Line line;  			CV_Column column = new CV_Column ();  			bits.Position = plin + 8 * i;  			bits.ReadUInt32 (out line.offset);  			bits.ReadUInt32 (out line.flags);  			uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  			uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  			//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  			if ((sec.flags & 1) != 0) {  				bits.Position = pcol + 4 * i;  				bits.ReadUInt16 (out column.offColumnStart);  				bits.ReadUInt16 (out column.offColumnEnd);  			}  			lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  		}  	}  	break;  }  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < endSym) {  	CV_SourceFile file;  	bits.ReadUInt32 (out file.index);  	bits.ReadUInt32 (out file.count);  	bits.ReadUInt32 (out file.linsiz);  	// Size of payload.  	int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  	bits.Position += linsiz;  	blocks++;  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < endSym) {  	CV_SourceFile file;  	bits.ReadUInt32 (out file.index);  	bits.ReadUInt32 (out file.count);  	bits.ReadUInt32 (out file.linsiz);  	// Size of payload.  	int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  	bits.Position += linsiz;  	blocks++;  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < endSym) {  	CV_SourceFile file;  	bits.ReadUInt32 (out file.index);  	bits.ReadUInt32 (out file.count);  	bits.ReadUInt32 (out file.linsiz);  	// Size of payload.  	PdbSource src = (PdbSource)checks [(int)file.index];  	PdbLines tmp = new PdbLines (src' file.count);  	func.lines [block++] = tmp;  	PdbLine[] lines = tmp.lines;  	int plin = bits.Position;  	int pcol = bits.Position + 8 * (int)file.count;  	for (int i = 0; i < file.count; i++) {  		CV_Line line;  		CV_Column column = new CV_Column ();  		bits.Position = plin + 8 * i;  		bits.ReadUInt32 (out line.offset);  		bits.ReadUInt32 (out line.flags);  		uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  		uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  		//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  		if ((sec.flags & 1) != 0) {  			bits.Position = pcol + 4 * i;  			bits.ReadUInt16 (out column.offColumnStart);  			bits.ReadUInt16 (out column.offColumnEnd);  		}  		lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  	}  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < endSym) {  	CV_SourceFile file;  	bits.ReadUInt32 (out file.index);  	bits.ReadUInt32 (out file.count);  	bits.ReadUInt32 (out file.linsiz);  	// Size of payload.  	PdbSource src = (PdbSource)checks [(int)file.index];  	PdbLines tmp = new PdbLines (src' file.count);  	func.lines [block++] = tmp;  	PdbLine[] lines = tmp.lines;  	int plin = bits.Position;  	int pcol = bits.Position + 8 * (int)file.count;  	for (int i = 0; i < file.count; i++) {  		CV_Line line;  		CV_Column column = new CV_Column ();  		bits.Position = plin + 8 * i;  		bits.ReadUInt32 (out line.offset);  		bits.ReadUInt32 (out line.flags);  		uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  		uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  		//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  		if ((sec.flags & 1) != 0) {  			bits.Position = pcol + 4 * i;  			bits.ReadUInt16 (out column.offColumnStart);  			bits.ReadUInt16 (out column.offColumnEnd);  		}  		lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  	}  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < endSym) {  	CV_SourceFile file;  	bits.ReadUInt32 (out file.index);  	bits.ReadUInt32 (out file.count);  	bits.ReadUInt32 (out file.linsiz);  	// Size of payload.  	PdbSource src = (PdbSource)checks [(int)file.index];  	PdbLines tmp = new PdbLines (src' file.count);  	func.lines [block++] = tmp;  	PdbLine[] lines = tmp.lines;  	int plin = bits.Position;  	int pcol = bits.Position + 8 * (int)file.count;  	for (int i = 0; i < file.count; i++) {  		CV_Line line;  		CV_Column column = new CV_Column ();  		bits.Position = plin + 8 * i;  		bits.ReadUInt32 (out line.offset);  		bits.ReadUInt32 (out line.flags);  		uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  		uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  		//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  		if ((sec.flags & 1) != 0) {  			bits.Position = pcol + 4 * i;  			bits.ReadUInt16 (out column.offColumnStart);  			bits.ReadUInt16 (out column.offColumnEnd);  		}  		lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  	}  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: while (bits.Position < endSym) {  	CV_SourceFile file;  	bits.ReadUInt32 (out file.index);  	bits.ReadUInt32 (out file.count);  	bits.ReadUInt32 (out file.linsiz);  	// Size of payload.  	PdbSource src = (PdbSource)checks [(int)file.index];  	PdbLines tmp = new PdbLines (src' file.count);  	func.lines [block++] = tmp;  	PdbLine[] lines = tmp.lines;  	int plin = bits.Position;  	int pcol = bits.Position + 8 * (int)file.count;  	for (int i = 0; i < file.count; i++) {  		CV_Line line;  		CV_Column column = new CV_Column ();  		bits.Position = plin + 8 * i;  		bits.ReadUInt32 (out line.offset);  		bits.ReadUInt32 (out line.flags);  		uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  		uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  		//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  		if ((sec.flags & 1) != 0) {  			bits.Position = pcol + 4 * i;  			bits.ReadUInt16 (out column.offColumnStart);  			bits.ReadUInt16 (out column.offColumnEnd);  		}  		lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  	}  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: for (int i = 0; i < file.count; i++) {  	CV_Line line;  	CV_Column column = new CV_Column ();  	bits.Position = plin + 8 * i;  	bits.ReadUInt32 (out line.offset);  	bits.ReadUInt32 (out line.flags);  	uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  	uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  	//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  	if ((sec.flags & 1) != 0) {  		bits.Position = pcol + 4 * i;  		bits.ReadUInt16 (out column.offColumnStart);  		bits.ReadUInt16 (out column.offColumnEnd);  	}  	lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: for (int i = 0; i < file.count; i++) {  	CV_Line line;  	CV_Column column = new CV_Column ();  	bits.Position = plin + 8 * i;  	bits.ReadUInt32 (out line.offset);  	bits.ReadUInt32 (out line.flags);  	uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  	uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  	//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  	if ((sec.flags & 1) != 0) {  		bits.Position = pcol + 4 * i;  		bits.ReadUInt16 (out column.offColumnStart);  		bits.ReadUInt16 (out column.offColumnEnd);  	}  	lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: for (int i = 0; i < file.count; i++) {  	CV_Line line;  	CV_Column column = new CV_Column ();  	bits.Position = plin + 8 * i;  	bits.ReadUInt32 (out line.offset);  	bits.ReadUInt32 (out line.flags);  	uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  	uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  	//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  	if ((sec.flags & 1) != 0) {  		bits.Position = pcol + 4 * i;  		bits.ReadUInt16 (out column.offColumnStart);  		bits.ReadUInt16 (out column.offColumnEnd);  	}  	lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: bits.Position = plin + 8 * i;  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: if ((sec.flags & 1) != 0) {  	bits.Position = pcol + 4 * i;  	bits.ReadUInt16 (out column.offColumnStart);  	bits.ReadUInt16 (out column.offColumnEnd);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following statement contains a magic number: bits.Position = pcol + 4 * i;  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadFuncsFromDbiModule,The following statement contains a magic number: if (sig != 4) {  	throw new PdbDebugException ("Invalid signature. (sig={0})"' sig);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadFuncsFromDbiModule,The following statement contains a magic number: bits.Position = 4;  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadFunctions,The following statement contains a magic number: dir.streams [3].Read (reader' bits);  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadFunctions,The following statement contains a magic number: if (header.snTokenRidMap != 0 && header.snTokenRidMap != 0xffff) {  	dir.streams [header.snTokenRidMap].Read (reader' bits);  	uint[] ridMap = new uint[dir.streams [header.snTokenRidMap].Length / 4];  	bits.ReadUInt32 (ridMap);  	foreach (PdbFunction func in funcs) {  		func.token = 0x06000000 | ridMap [func.token & 0xffffff];  	}  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadTokenToSourceInfo,The following statement contains a magic number: if (sig != 4) {  	throw new PdbDebugException ("Invalid signature. (sig={0})"' sig);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadTokenToSourceInfo,The following statement contains a magic number: bits.Position = 4;  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,ReadSourceFileInfo,The following statement contains a magic number: while (bits.Position < limit) {  	int sig;  	int siz;  	bits.ReadInt32 (out sig);  	bits.ReadInt32 (out siz);  	int place = bits.Position;  	int endSym = bits.Position + siz;  	switch ((DEBUG_S_SUBSECTION)sig) {  	case DEBUG_S_SUBSECTION.FILECHKSMS:  		while (bits.Position < endSym) {  			CV_FileCheckSum chk;  			int ni = bits.Position - place;  			bits.ReadUInt32 (out chk.name);  			bits.ReadUInt8 (out chk.len);  			bits.ReadUInt8 (out chk.type);  			string name = (string)names [(int)chk.name];  			int guidStream;  			Guid doctypeGuid = SymDocumentType.Text;  			Guid languageGuid = Guid.Empty;  			Guid vendorGuid = Guid.Empty;  			if (nameIndex.TryGetValue ("/SRC/FILES/" + name.ToUpperInvariant ()' out guidStream)) {  				var guidBits = new BitAccess (0x100);  				dir.streams [guidStream].Read (reader' guidBits);  				LoadGuidStream (guidBits' out doctypeGuid' out languageGuid' out vendorGuid);  			}  			PdbSource src = new PdbSource (/*(uint)ni'*/name' doctypeGuid' languageGuid' vendorGuid);  			checks.Add (ni' src);  			bits.Position += chk.len;  			bits.Align (4);  		}  		bits.Position = endSym;  		break;  	default:  		bits.Position = endSym;  		break;  	}  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,ReadSourceFileInfo,The following statement contains a magic number: switch ((DEBUG_S_SUBSECTION)sig) {  case DEBUG_S_SUBSECTION.FILECHKSMS:  	while (bits.Position < endSym) {  		CV_FileCheckSum chk;  		int ni = bits.Position - place;  		bits.ReadUInt32 (out chk.name);  		bits.ReadUInt8 (out chk.len);  		bits.ReadUInt8 (out chk.type);  		string name = (string)names [(int)chk.name];  		int guidStream;  		Guid doctypeGuid = SymDocumentType.Text;  		Guid languageGuid = Guid.Empty;  		Guid vendorGuid = Guid.Empty;  		if (nameIndex.TryGetValue ("/SRC/FILES/" + name.ToUpperInvariant ()' out guidStream)) {  			var guidBits = new BitAccess (0x100);  			dir.streams [guidStream].Read (reader' guidBits);  			LoadGuidStream (guidBits' out doctypeGuid' out languageGuid' out vendorGuid);  		}  		PdbSource src = new PdbSource (/*(uint)ni'*/name' doctypeGuid' languageGuid' vendorGuid);  		checks.Add (ni' src);  		bits.Position += chk.len;  		bits.Align (4);  	}  	bits.Position = endSym;  	break;  default:  	bits.Position = endSym;  	break;  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,ReadSourceFileInfo,The following statement contains a magic number: while (bits.Position < endSym) {  	CV_FileCheckSum chk;  	int ni = bits.Position - place;  	bits.ReadUInt32 (out chk.name);  	bits.ReadUInt8 (out chk.len);  	bits.ReadUInt8 (out chk.type);  	string name = (string)names [(int)chk.name];  	int guidStream;  	Guid doctypeGuid = SymDocumentType.Text;  	Guid languageGuid = Guid.Empty;  	Guid vendorGuid = Guid.Empty;  	if (nameIndex.TryGetValue ("/SRC/FILES/" + name.ToUpperInvariant ()' out guidStream)) {  		var guidBits = new BitAccess (0x100);  		dir.streams [guidStream].Read (reader' guidBits);  		LoadGuidStream (guidBits' out doctypeGuid' out languageGuid' out vendorGuid);  	}  	PdbSource src = new PdbSource (/*(uint)ni'*/name' doctypeGuid' languageGuid' vendorGuid);  	checks.Add (ni' src);  	bits.Position += chk.len;  	bits.Align (4);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,ReadSourceFileInfo,The following statement contains a magic number: bits.Align (4);  
Magic Number,Microsoft.Cci.Pdb,PdbFileHeader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFileHeader.cs,PdbFileHeader,The following statement contains a magic number: bits.MinCapacity (56);  
Magic Number,Microsoft.Cci.Pdb,PdbFileHeader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFileHeader.cs,PdbFileHeader,The following statement contains a magic number: bits.FillBuffer (reader' 52);  
Magic Number,Microsoft.Cci.Pdb,PdbFileHeader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFileHeader.cs,PdbFileHeader,The following statement contains a magic number: this.magic = new byte[32];  
Magic Number,Microsoft.Cci.Pdb,PdbFileHeader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFileHeader.cs,PdbFileHeader,The following statement contains a magic number: bits.FillBuffer (reader' directoryPages * 4);  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The following statement contains a magic number: while (bits.Position < proc.end) {  	ushort siz;  	ushort rec;  	bits.ReadUInt16 (out siz);  	int star = bits.Position;  	int stop = bits.Position + siz;  	bits.Position = star;  	bits.ReadUInt16 (out rec);  	switch ((SYM)rec) {  	case SYM.S_OEM: {  		// 0x0404  		OemSymbol oem;  		bits.ReadGuid (out oem.idOem);  		bits.ReadUInt32 (out oem.typind);  		// internal byte[]   rgl;        // user data' force 4-byte alignment  		if (oem.idOem == msilMetaData) {  			string name = bits.ReadString ();  			if (name == "MD2") {  				byte version;  				bits.ReadUInt8 (out version);  				if (version == 4) {  					byte count;  					bits.ReadUInt8 (out count);  					bits.Align (4);  					while (count-- > 0)  						this.ReadCustomMetadata (bits);  				}  			} else if (name == "asyncMethodInfo") {  				this.synchronizationInformation = new PdbSynchronizationInformation (bits);  			}  			bits.Position = stop;  			break;  		} else {  			throw new PdbDebugException ("OEM section: guid={0} ti={1}"' oem.idOem' oem.typind);  			// bits.Position = stop;  		}  	}  	case SYM.S_BLOCK32: {  		BlockSym32 block = new BlockSym32 ();  		bits.ReadUInt32 (out block.parent);  		bits.ReadUInt32 (out block.end);  		bits.ReadUInt32 (out block.len);  		bits.ReadUInt32 (out block.off);  		bits.ReadUInt16 (out block.seg);  		bits.SkipCString (out block.name);  		bits.Position = stop;  		scopes [scope++] = new PdbScope (this.address' block' bits' out slotToken);  		bits.Position = (int)block.end;  		break;  	}  	case SYM.S_MANSLOT:  		slots [slot++] = new PdbSlot (bits);  		bits.Position = stop;  		break;  	case SYM.S_MANCONSTANT:  		constants [constant++] = new PdbConstant (bits);  		bits.Position = stop;  		break;  	case SYM.S_UNAMESPACE:  		bits.ReadCString (out usedNamespaces [usedNs++]);  		bits.Position = stop;  		break;  	case SYM.S_END:  		bits.Position = stop;  		break;  	default: {  		//throw new PdbDebugException("Unknown SYM: {0}"' (SYM)rec);  		bits.Position = stop;  		break;  	}  	}  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The following statement contains a magic number: while (bits.Position < proc.end) {  	ushort siz;  	ushort rec;  	bits.ReadUInt16 (out siz);  	int star = bits.Position;  	int stop = bits.Position + siz;  	bits.Position = star;  	bits.ReadUInt16 (out rec);  	switch ((SYM)rec) {  	case SYM.S_OEM: {  		// 0x0404  		OemSymbol oem;  		bits.ReadGuid (out oem.idOem);  		bits.ReadUInt32 (out oem.typind);  		// internal byte[]   rgl;        // user data' force 4-byte alignment  		if (oem.idOem == msilMetaData) {  			string name = bits.ReadString ();  			if (name == "MD2") {  				byte version;  				bits.ReadUInt8 (out version);  				if (version == 4) {  					byte count;  					bits.ReadUInt8 (out count);  					bits.Align (4);  					while (count-- > 0)  						this.ReadCustomMetadata (bits);  				}  			} else if (name == "asyncMethodInfo") {  				this.synchronizationInformation = new PdbSynchronizationInformation (bits);  			}  			bits.Position = stop;  			break;  		} else {  			throw new PdbDebugException ("OEM section: guid={0} ti={1}"' oem.idOem' oem.typind);  			// bits.Position = stop;  		}  	}  	case SYM.S_BLOCK32: {  		BlockSym32 block = new BlockSym32 ();  		bits.ReadUInt32 (out block.parent);  		bits.ReadUInt32 (out block.end);  		bits.ReadUInt32 (out block.len);  		bits.ReadUInt32 (out block.off);  		bits.ReadUInt16 (out block.seg);  		bits.SkipCString (out block.name);  		bits.Position = stop;  		scopes [scope++] = new PdbScope (this.address' block' bits' out slotToken);  		bits.Position = (int)block.end;  		break;  	}  	case SYM.S_MANSLOT:  		slots [slot++] = new PdbSlot (bits);  		bits.Position = stop;  		break;  	case SYM.S_MANCONSTANT:  		constants [constant++] = new PdbConstant (bits);  		bits.Position = stop;  		break;  	case SYM.S_UNAMESPACE:  		bits.ReadCString (out usedNamespaces [usedNs++]);  		bits.Position = stop;  		break;  	case SYM.S_END:  		bits.Position = stop;  		break;  	default: {  		//throw new PdbDebugException("Unknown SYM: {0}"' (SYM)rec);  		bits.Position = stop;  		break;  	}  	}  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The following statement contains a magic number: switch ((SYM)rec) {  case SYM.S_OEM: {  	// 0x0404  	OemSymbol oem;  	bits.ReadGuid (out oem.idOem);  	bits.ReadUInt32 (out oem.typind);  	// internal byte[]   rgl;        // user data' force 4-byte alignment  	if (oem.idOem == msilMetaData) {  		string name = bits.ReadString ();  		if (name == "MD2") {  			byte version;  			bits.ReadUInt8 (out version);  			if (version == 4) {  				byte count;  				bits.ReadUInt8 (out count);  				bits.Align (4);  				while (count-- > 0)  					this.ReadCustomMetadata (bits);  			}  		} else if (name == "asyncMethodInfo") {  			this.synchronizationInformation = new PdbSynchronizationInformation (bits);  		}  		bits.Position = stop;  		break;  	} else {  		throw new PdbDebugException ("OEM section: guid={0} ti={1}"' oem.idOem' oem.typind);  		// bits.Position = stop;  	}  }  case SYM.S_BLOCK32: {  	BlockSym32 block = new BlockSym32 ();  	bits.ReadUInt32 (out block.parent);  	bits.ReadUInt32 (out block.end);  	bits.ReadUInt32 (out block.len);  	bits.ReadUInt32 (out block.off);  	bits.ReadUInt16 (out block.seg);  	bits.SkipCString (out block.name);  	bits.Position = stop;  	scopes [scope++] = new PdbScope (this.address' block' bits' out slotToken);  	bits.Position = (int)block.end;  	break;  }  case SYM.S_MANSLOT:  	slots [slot++] = new PdbSlot (bits);  	bits.Position = stop;  	break;  case SYM.S_MANCONSTANT:  	constants [constant++] = new PdbConstant (bits);  	bits.Position = stop;  	break;  case SYM.S_UNAMESPACE:  	bits.ReadCString (out usedNamespaces [usedNs++]);  	bits.Position = stop;  	break;  case SYM.S_END:  	bits.Position = stop;  	break;  default: {  	//throw new PdbDebugException("Unknown SYM: {0}"' (SYM)rec);  	bits.Position = stop;  	break;  }  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The following statement contains a magic number: switch ((SYM)rec) {  case SYM.S_OEM: {  	// 0x0404  	OemSymbol oem;  	bits.ReadGuid (out oem.idOem);  	bits.ReadUInt32 (out oem.typind);  	// internal byte[]   rgl;        // user data' force 4-byte alignment  	if (oem.idOem == msilMetaData) {  		string name = bits.ReadString ();  		if (name == "MD2") {  			byte version;  			bits.ReadUInt8 (out version);  			if (version == 4) {  				byte count;  				bits.ReadUInt8 (out count);  				bits.Align (4);  				while (count-- > 0)  					this.ReadCustomMetadata (bits);  			}  		} else if (name == "asyncMethodInfo") {  			this.synchronizationInformation = new PdbSynchronizationInformation (bits);  		}  		bits.Position = stop;  		break;  	} else {  		throw new PdbDebugException ("OEM section: guid={0} ti={1}"' oem.idOem' oem.typind);  		// bits.Position = stop;  	}  }  case SYM.S_BLOCK32: {  	BlockSym32 block = new BlockSym32 ();  	bits.ReadUInt32 (out block.parent);  	bits.ReadUInt32 (out block.end);  	bits.ReadUInt32 (out block.len);  	bits.ReadUInt32 (out block.off);  	bits.ReadUInt16 (out block.seg);  	bits.SkipCString (out block.name);  	bits.Position = stop;  	scopes [scope++] = new PdbScope (this.address' block' bits' out slotToken);  	bits.Position = (int)block.end;  	break;  }  case SYM.S_MANSLOT:  	slots [slot++] = new PdbSlot (bits);  	bits.Position = stop;  	break;  case SYM.S_MANCONSTANT:  	constants [constant++] = new PdbConstant (bits);  	bits.Position = stop;  	break;  case SYM.S_UNAMESPACE:  	bits.ReadCString (out usedNamespaces [usedNs++]);  	bits.Position = stop;  	break;  case SYM.S_END:  	bits.Position = stop;  	break;  default: {  	//throw new PdbDebugException("Unknown SYM: {0}"' (SYM)rec);  	bits.Position = stop;  	break;  }  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The following statement contains a magic number: if (oem.idOem == msilMetaData) {  	string name = bits.ReadString ();  	if (name == "MD2") {  		byte version;  		bits.ReadUInt8 (out version);  		if (version == 4) {  			byte count;  			bits.ReadUInt8 (out count);  			bits.Align (4);  			while (count-- > 0)  				this.ReadCustomMetadata (bits);  		}  	} else if (name == "asyncMethodInfo") {  		this.synchronizationInformation = new PdbSynchronizationInformation (bits);  	}  	bits.Position = stop;  	break;  } else {  	throw new PdbDebugException ("OEM section: guid={0} ti={1}"' oem.idOem' oem.typind);  	// bits.Position = stop;  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The following statement contains a magic number: if (oem.idOem == msilMetaData) {  	string name = bits.ReadString ();  	if (name == "MD2") {  		byte version;  		bits.ReadUInt8 (out version);  		if (version == 4) {  			byte count;  			bits.ReadUInt8 (out count);  			bits.Align (4);  			while (count-- > 0)  				this.ReadCustomMetadata (bits);  		}  	} else if (name == "asyncMethodInfo") {  		this.synchronizationInformation = new PdbSynchronizationInformation (bits);  	}  	bits.Position = stop;  	break;  } else {  	throw new PdbDebugException ("OEM section: guid={0} ti={1}"' oem.idOem' oem.typind);  	// bits.Position = stop;  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The following statement contains a magic number: if (name == "MD2") {  	byte version;  	bits.ReadUInt8 (out version);  	if (version == 4) {  		byte count;  		bits.ReadUInt8 (out count);  		bits.Align (4);  		while (count-- > 0)  			this.ReadCustomMetadata (bits);  	}  } else if (name == "asyncMethodInfo") {  	this.synchronizationInformation = new PdbSynchronizationInformation (bits);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The following statement contains a magic number: if (name == "MD2") {  	byte version;  	bits.ReadUInt8 (out version);  	if (version == 4) {  		byte count;  		bits.ReadUInt8 (out count);  		bits.Align (4);  		while (count-- > 0)  			this.ReadCustomMetadata (bits);  	}  } else if (name == "asyncMethodInfo") {  	this.synchronizationInformation = new PdbSynchronizationInformation (bits);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The following statement contains a magic number: if (version == 4) {  	byte count;  	bits.ReadUInt8 (out count);  	bits.Align (4);  	while (count-- > 0)  		this.ReadCustomMetadata (bits);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The following statement contains a magic number: if (version == 4) {  	byte count;  	bits.ReadUInt8 (out count);  	bits.Align (4);  	while (count-- > 0)  		this.ReadCustomMetadata (bits);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,PdbFunction,The following statement contains a magic number: bits.Align (4);  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,ReadCustomMetadata,The following statement contains a magic number: if (version != 4) {  	throw new PdbDebugException ("Unknown custom metadata item version: {0}"' version);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,ReadCustomMetadata,The following statement contains a magic number: bits.Align (4);  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,ReadCustomMetadata,The following statement contains a magic number: switch (kind) {  case 0:  	this.ReadUsingInfo (bits);  	break;  case 1:  	this.ReadForwardInfo (bits);  	break;  case 2:  	break;  // this.ReadForwardedToModuleInfo(bits); break;  case 3:  	this.ReadIteratorLocals (bits);  	break;  case 4:  	this.ReadForwardIterator (bits);  	break;  default:  	throw new PdbDebugException ("Unknown custom metadata item kind: {0}"' kind);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,ReadCustomMetadata,The following statement contains a magic number: switch (kind) {  case 0:  	this.ReadUsingInfo (bits);  	break;  case 1:  	this.ReadForwardInfo (bits);  	break;  case 2:  	break;  // this.ReadForwardedToModuleInfo(bits); break;  case 3:  	this.ReadIteratorLocals (bits);  	break;  case 4:  	this.ReadForwardIterator (bits);  	break;  default:  	throw new PdbDebugException ("Unknown custom metadata item kind: {0}"' kind);  }  
Magic Number,Microsoft.Cci.Pdb,PdbFunction,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFunction.cs,ReadCustomMetadata,The following statement contains a magic number: switch (kind) {  case 0:  	this.ReadUsingInfo (bits);  	break;  case 1:  	this.ReadForwardInfo (bits);  	break;  case 2:  	break;  // this.ReadForwardedToModuleInfo(bits); break;  case 3:  	this.ReadIteratorLocals (bits);  	break;  case 4:  	this.ReadForwardIterator (bits);  	break;  default:  	throw new PdbDebugException ("Unknown custom metadata item kind: {0}"' kind);  }  
Magic Number,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,WriteString,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	Marshal.WriteInt16 (buffer' offset' str [i]);  	offset += 2;  }  
Magic Number,Mono.Cecil.Pdb,ModuleMetadata,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\ModuleMetadata.cs,WriteString,The following statement contains a magic number: offset += 2;  
Magic Number,Mono.Cecil.Pdb,PdbReader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbReader.cs,ProcessDebugHeader,The following statement contains a magic number: if (header.Length < 24)  	return false;  
Magic Number,Mono.Cecil.Pdb,PdbReader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbReader.cs,ProcessDebugHeader,The following statement contains a magic number: Buffer.BlockCopy (header' 4' guid_bytes' 0' 16);  
Magic Number,Mono.Cecil.Pdb,PdbReader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbReader.cs,ProcessDebugHeader,The following statement contains a magic number: Buffer.BlockCopy (header' 4' guid_bytes' 0' 16);  
Magic Number,Mono.Cecil.Pdb,PdbReader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbReader.cs,ProcessDebugHeader,The following statement contains a magic number: this.age = ReadInt32 (header' 20);  
Magic Number,Mono.Cecil.Pdb,PdbReader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbReader.cs,ReadInt32,The following statement contains a magic number: return (bytes [start] | (bytes [start + 1] << 8) | (bytes [start + 2] << 16) | (bytes [start + 3] << 24));  
Magic Number,Mono.Cecil.Pdb,PdbReader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbReader.cs,ReadInt32,The following statement contains a magic number: return (bytes [start] | (bytes [start + 1] << 8) | (bytes [start + 2] << 16) | (bytes [start + 3] << 24));  
Magic Number,Mono.Cecil.Pdb,PdbReader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbReader.cs,ReadInt32,The following statement contains a magic number: return (bytes [start] | (bytes [start + 1] << 8) | (bytes [start + 2] << 16) | (bytes [start + 3] << 24));  
Magic Number,Mono.Cecil.Pdb,PdbReader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbReader.cs,ReadInt32,The following statement contains a magic number: return (bytes [start] | (bytes [start + 1] << 8) | (bytes [start + 2] << 16) | (bytes [start + 3] << 24));  
Magic Number,Mono.Cecil.Pdb,PdbReader,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Mono.Cecil.Pdb\PdbReader.cs,ReadInt32,The following statement contains a magic number: return (bytes [start] | (bytes [start + 1] << 8) | (bytes [start + 2] << 16) | (bytes [start + 3] << 24));  
Missing Default,Microsoft.Cci.Pdb,PdbFile,D:\newReposJune17\sucaba_IronTextLibrary\Deps\cecil\symbols\pdb\Microsoft.Cci.Pdb\PdbFile.cs,LoadManagedLines,The following switch statement is missing a default case: switch ((DEBUG_S_SUBSECTION)sig) {  case DEBUG_S_SUBSECTION.LINES: {  	CV_LineSection sec;  	bits.ReadUInt32 (out sec.off);  	bits.ReadUInt16 (out sec.sec);  	bits.ReadUInt16 (out sec.flags);  	bits.ReadUInt32 (out sec.cod);  	int funcIndex = FindFunction (funcs' sec.sec' sec.off);  	if (funcIndex < 0)  		break;  	var func = funcs [funcIndex];  	if (func.lines == null) {  		while (funcIndex > 0) {  			var f = funcs [funcIndex - 1];  			if (f.lines != null || f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex--;  		}  	} else {  		while (funcIndex < funcs.Length - 1 && func.lines != null) {  			var f = funcs [funcIndex + 1];  			if (f.segment != sec.sec || f.address != sec.off)  				break;  			func = f;  			funcIndex++;  		}  	}  	if (func.lines != null)  		break;  	// Count the line blocks.  	int begSym = bits.Position;  	int blocks = 0;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		int linsiz = (int)file.count * (8 + ((sec.flags & 1) != 0 ? 4 : 0));  		bits.Position += linsiz;  		blocks++;  	}  	func.lines = new PdbLines[blocks];  	int block = 0;  	bits.Position = begSym;  	while (bits.Position < endSym) {  		CV_SourceFile file;  		bits.ReadUInt32 (out file.index);  		bits.ReadUInt32 (out file.count);  		bits.ReadUInt32 (out file.linsiz);  		// Size of payload.  		PdbSource src = (PdbSource)checks [(int)file.index];  		PdbLines tmp = new PdbLines (src' file.count);  		func.lines [block++] = tmp;  		PdbLine[] lines = tmp.lines;  		int plin = bits.Position;  		int pcol = bits.Position + 8 * (int)file.count;  		for (int i = 0; i < file.count; i++) {  			CV_Line line;  			CV_Column column = new CV_Column ();  			bits.Position = plin + 8 * i;  			bits.ReadUInt32 (out line.offset);  			bits.ReadUInt32 (out line.flags);  			uint lineBegin = line.flags & (uint)CV_Line_Flags.linenumStart;  			uint delta = (line.flags & (uint)CV_Line_Flags.deltaLineEnd) >> 24;  			//bool statement = ((line.flags & (uint)CV_Line_Flags.fStatement) == 0);  			if ((sec.flags & 1) != 0) {  				bits.Position = pcol + 4 * i;  				bits.ReadUInt16 (out column.offColumnStart);  				bits.ReadUInt16 (out column.offColumnEnd);  			}  			lines [i] = new PdbLine (line.offset' lineBegin' column.offColumnStart' lineBegin + delta' column.offColumnEnd);  		}  	}  	break;  }  }  
