Implementation smell,Namespace,Class,File,Method,Description
Long Method,IronText.Framework,ScanBaseAttribute,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Framework\Attributes\ScanBaseAttribute.cs,GetMatchers,The method has 100 lines of code.
Long Method,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,Next,The method has 131 lines of code.
Long Method,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,Reducer,The method has 102 lines of code.
Complex Method,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,SetEquals,Cyclomatic complexity of the method is 10
Complex Method,IronText.Algorithm,IntervalIntSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\IntervalIntSetBase.cs,Intersect,Cyclomatic complexity of the method is 9
Complex Method,IronText.Algorithm,IntervalIntSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\IntervalIntSetBase.cs,Add,Cyclomatic complexity of the method is 12
Complex Method,IronText.Algorithm,IntInterval,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntInterval.cs,RelationTo,Cyclomatic complexity of the method is 8
Complex Method,IronText.Diagnostics,GvGraphView,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Diagnostics\GvGraphView.cs,SetGraphProperties,Cyclomatic complexity of the method is 8
Complex Method,IronText.Runtime,NullableFirstTables,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Tables\NullableFirstTables.cs,Build,Cyclomatic complexity of the method is 8
Complex Method,IronText.Runtime,LocalCorrectionErrorRecovery,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\ErrorRecovery\LocalCorrectionErrorRecovery.cs,FindCorrection,Cyclomatic complexity of the method is 10
Complex Method,IronText.Runtime,LocalCorrectionErrorRecovery,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\ErrorRecovery\LocalCorrectionErrorRecovery.cs,Following,Cyclomatic complexity of the method is 8
Complex Method,IronText.Runtime,Gss<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\GraphStructuredStack\Gss.cs,WriteGraph,Cyclomatic complexity of the method is 8
Complex Method,IronText.Runtime,GssReducePath<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\GraphStructuredStack\GssReducePath.cs,GetAll,Cyclomatic complexity of the method is 11
Complex Method,IronText.Runtime,SppfEpsilonProducer,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Producers\SppfEpsilonProducer.cs,BuildCache,Cyclomatic complexity of the method is 9
Complex Method,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,Next,Cyclomatic complexity of the method is 10
Complex Method,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,Reducer,Cyclomatic complexity of the method is 16
Complex Method,IronText.Runtime,DeterministicParser<TNode>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Deterministic\DeterministicParser.cs,Next,Cyclomatic complexity of the method is 12
Complex Method,IronText.Runtime,ScannerEnumerator,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Scanning\ScannerEnumerator.cs,MoveNext,Cyclomatic complexity of the method is 9
Complex Method,IronText.Lib.Ctem,QStr,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\Ctem\QStr.cs,Unescape,Cyclomatic complexity of the method is 9
Complex Method,IronText.Misc,PropertyComparer<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Misc\PropertyComparer.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,IronText.Misc,TypePattern,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Misc\TypePattern.cs,Match,Cyclomatic complexity of the method is 17
Long Parameter List,IronText.Diagnostics,GvGraphView,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Diagnostics\GvGraphView.cs,AddNode,The method has 5 parameters. Parameters: identity' label' style' shape' color
Long Parameter List,IronText.Diagnostics,GvGraphView,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Diagnostics\GvGraphView.cs,GetOrAddNode,The method has 5 parameters. Parameters: identity' label' style' shape' color
Long Parameter List,IronText.Diagnostics,IGraphView,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Diagnostics\IGraphView.cs,AddNode,The method has 5 parameters. Parameters: identity' label' style' shape' color
Long Parameter List,IronText.Reflection.Managed,CilProduction,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Reflection\Cil\CilProduction.cs,CilProduction,The method has 5 parameters. Parameters: outcome' pattern' context' actionBuilder' precedence
Long Parameter List,IronText.Reflection,Matcher,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Reflection\Matcher.cs,Matcher,The method has 5 parameters. Parameters: pattern' outcome' context' nextCondition' disambiguation
Long Parameter List,IronText.Reflection,Matcher,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Reflection\Matcher.cs,Matcher,The method has 5 parameters. Parameters: pattern' outcome' context' nextCondition' disambiguation
Long Parameter List,IronText.Runtime,NullProducer<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Producers\NullProducer.cs,FillEpsilonSuffix,The method has 5 parameters. Parameters: ruleId' prefixSize' buffer' destIndex' lookback
Long Parameter List,IronText.Runtime,Reduction,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\ReductionQueueing\Reduction.cs,Reduction,The method has 5 parameters. Parameters: rightNode' rule' size' epsilonIndex' rightLink
Long Parameter List,IronText.Runtime,Msg,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Msg.cs,Msg,The method has 5 parameters. Parameters: id' token' value' location' hLocation
Long Parameter List,IronText.Runtime,LanguageBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\LanguageBase.cs,DefaultMerge,The method has 5 parameters. Parameters: token' alt1' alt2' context' stackLookback
Long Parameter List,IronText.Runtime,GssReducePath<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\GraphStructuredStack\GssReducePath.cs,GetAll,The method has 6 parameters. Parameters: rightNode' size' tail' rule' rightLink' action0
Long Parameter List,IronText.Runtime,SppfEpsilonProducer,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Producers\SppfEpsilonProducer.cs,FillEpsilonSuffix,The method has 5 parameters. Parameters: ruleId' prefixSize' dest' destIndex' stackLookback
Long Parameter List,IronText.Runtime,ActionEpsilonProducer,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Producers\ActionEpsilonProducer.cs,FillEpsilonSuffix,The method has 5 parameters. Parameters: prodId' prefixSize' buffer' destIndex' stackLookback
Long Parameter List,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,RnGlrParser,The method has 8 parameters. Parameters: grammar' tokenComplexity' transition' stateToPriorToken' conflictActionsTable' producer' allocator' logging
Long Parameter List,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,RnGlrParser,The method has 9 parameters. Parameters: grammar' tokenComplexity' transition' stateToPriorToken' conflictActionsTable' producer' allocator' logging' gss
Long Parameter List,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,PlanShiftReduce,The method has 5 parameters. Parameters: frontNode' shiftToken' shiftValue' rule' size
Long Parameter List,IronText.Runtime,Scanner,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Scanning\Scanner.cs,Scanner,The method has 7 parameters. Parameters: startMode' textSource' document' rootContext' scanAction' maxActionCount' logging
Long Parameter List,IronText.Runtime,DeterministicParser<TNode>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Deterministic\DeterministicParser.cs,DeterministicParser,The method has 5 parameters. Parameters: producer' grammar' actionTable' allocator' logging
Long Parameter List,IronText.Runtime,DeterministicParser<TNode>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Deterministic\DeterministicParser.cs,DeterministicParser,The method has 6 parameters. Parameters: producer' grammar' actionTable' allocator' logging' stateStack
Long Parameter List,IronText.Logging,LoggingExtensions,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Logging\LoggingExtensions.cs,WithTimeLogging,The method has 5 parameters. Parameters: logging' contextName' origin' action' activityName
Long Parameter List,IronText.Lib,Builtins,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\Builtins.cs,Array,The method has 5 parameters. Parameters: x' y' z' t' more
Long Statement,IronText.Runtime,DeterministicParser<TNode>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Deterministic\DeterministicParser.cs,ReportUnexpectedToken,The length of the statement  "            //message.Append("  State stack [" + string.Join("' "' stateStack.Data.Take(stateStack.Count).Select(st => st.Tag)) + "]"); " is 123.
Long Statement,IronText.Extensibility,MetadataParser,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Extensibility\MetadataParser.cs,GetTypeMetaChildren,The length of the statement  "            const BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Instance; " is 121.
Complex Conditional,IronText.Framework,ScanBaseAttribute,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Framework\Attributes\ScanBaseAttribute.cs,GetMatchers,The conditional expression  "parameters.Count == 3                              && parameters[0].ParameterType == typeof(char[])                              && parameters[1].ParameterType == typeof(int)                              && parameters[2].ParameterType == typeof(int)"  is complex.
Complex Conditional,IronText.Runtime,Gss<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\GraphStructuredStack\Gss.cs,GetFrontNode,The conditional expression  "node.State == state && (lookahead < 0 || node.Lookahead < 0 || lookahead == node.Lookahead)"  is complex.
Magic Number,IronText.Algorithm,Buffer<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\Buffer.cs,Add,The following statement contains a magic number: Count = Count * 2;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,CountOfBits,The following statement contains a magic number: x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,CountOfBits,The following statement contains a magic number: return (((x + (x >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,CountOfBits,The following statement contains a magic number: return (((x + (x >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,Ntz,The following statement contains a magic number: return 32;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,Ntz,The following statement contains a magic number: byte n = 31;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,Ntz,The following statement contains a magic number: y = x << 16;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,Ntz,The following statement contains a magic number: n -= 16;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,Ntz,The following statement contains a magic number: y = x << 8;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,Ntz,The following statement contains a magic number: n -= 8;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,Ntz,The following statement contains a magic number: y = x << 4;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,Ntz,The following statement contains a magic number: n -= 4;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,Ntz,The following statement contains a magic number: y = x << 2;
Magic Number,IronText.Algorithm,BitSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\BitSetBase.cs,Ntz,The following statement contains a magic number: n -= 2;
Magic Number,IronText.Algorithm,IntervalIntSetBase,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\IntervalIntSetBase.cs,UpdateHash,The following statement contains a magic number: this.hash = (int)(this.bounds.First << 16) | (this.intervals.Count & 0x0000ffff);
Magic Number,IronText.Algorithm,IntSet,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Algorithm\IntegerSets\IntSet.cs,ToString,The following statement contains a magic number: int limitCountdown = 20;
Magic Number,IronText.Collections,IndexedCollection<T;TScope>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Collections\IndexedCollection.cs,Add,The following statement contains a magic number: Array.Resize(ref indexToItem' index * 2);
Magic Number,IronText.Framework,DescribeParserStateMachineAttribute,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Framework\Attributes\Diagnostics\DescribeParserStateMachineAttribute.cs,ReportConflict,The following statement contains a magic number: message.WriteLine(new string('-'' 50));
Magic Number,IronText.Framework,DescribeParserStateMachineAttribute,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Framework\Attributes\Diagnostics\DescribeParserStateMachineAttribute.cs,ReportConflict,The following statement contains a magic number: message.WriteLine(new string('-'' 50));
Magic Number,IronText.Framework,ScanBaseAttribute,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Framework\Attributes\ScanBaseAttribute.cs,GetMatchers,The following statement contains a magic number: matcher.ActionBuilder =                  code =>                  {                      ParameterInfo nextModeParameter;                      if (parameters.Count != 0 && parameters.Last().IsOut)                      {                          nextModeParameter = parameters.Last();                          parameters.RemoveAt(parameters.Count - 1);                      }                      else                      {                          nextModeParameter = null;                      }                        if (parameters.Count == 0)                      {                      }                      else if (parameters.Count == 1                              && parameters[0].ParameterType == typeof(string))                      {                          code.LdMatcherTokenString();                      }                      else if (parameters.Count == 3                              && parameters[0].ParameterType == typeof(char[])                              && parameters[1].ParameterType == typeof(int)                              && parameters[2].ParameterType == typeof(int))                      {                          code                              .LdMatcherBuffer()                              .LdMatcherStartIndex()                              .LdMatcherLength();                      }                      else                      {                          throw new InvalidOperationException(                              "Unsupported match-method signature: "                              + string.Join("' "' parameters.Select(p => p.ParameterType.Name)));                      }                        Ref<Locals> nextModeVar = null;                      if (nextModeParameter != null)                      {                          code                              .Emit(il =>                              {                                  nextModeVar = il.Locals.Generate().GetRef();                                  return il                                      .Local(nextModeVar.Def' il.Types.Object)                                      .Ldloca(nextModeVar);                              });                      }                        code.Emit(il => il.Call(Method));                        if (nextModeParameter != null)                      {                          code                              .Emit(il => il.Ldloc(nextModeVar))                              .ChangeCondition(nextConditionType);                      }                        if (Method.ReturnType == typeof(void))                      {                          code.SkipAction();                      }                      else                      {                          if (Method.ReturnType.IsValueType)                          {                              code.Emit(il => il.Box(il.Types.Import(Method.ReturnType)));                          }                            code                              .ReturnFromAction()                              ;                      }                        return code;                  };
Magic Number,IronText.Framework,ScanBaseAttribute,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Framework\Attributes\ScanBaseAttribute.cs,GetMatchers,The following statement contains a magic number: matcher.ActionBuilder =                  code =>                  {                      ParameterInfo nextModeParameter;                      if (parameters.Count != 0 && parameters.Last().IsOut)                      {                          nextModeParameter = parameters.Last();                          parameters.RemoveAt(parameters.Count - 1);                      }                      else                      {                          nextModeParameter = null;                      }                        if (parameters.Count == 0)                      {                      }                      else if (parameters.Count == 1                              && parameters[0].ParameterType == typeof(string))                      {                          code.LdMatcherTokenString();                      }                      else if (parameters.Count == 3                              && parameters[0].ParameterType == typeof(char[])                              && parameters[1].ParameterType == typeof(int)                              && parameters[2].ParameterType == typeof(int))                      {                          code                              .LdMatcherBuffer()                              .LdMatcherStartIndex()                              .LdMatcherLength();                      }                      else                      {                          throw new InvalidOperationException(                              "Unsupported match-method signature: "                              + string.Join("' "' parameters.Select(p => p.ParameterType.Name)));                      }                        Ref<Locals> nextModeVar = null;                      if (nextModeParameter != null)                      {                          code                              .Emit(il =>                              {                                  nextModeVar = il.Locals.Generate().GetRef();                                  return il                                      .Local(nextModeVar.Def' il.Types.Object)                                      .Ldloca(nextModeVar);                              });                      }                        code.Emit(il => il.Call(Method));                        if (nextModeParameter != null)                      {                          code                              .Emit(il => il.Ldloc(nextModeVar))                              .ChangeCondition(nextConditionType);                      }                        if (Method.ReturnType == typeof(void))                      {                          code.SkipAction();                      }                      else                      {                          if (Method.ReturnType.IsValueType)                          {                              code.Emit(il => il.Box(il.Types.Import(Method.ReturnType)));                          }                            code                              .ReturnFromAction()                              ;                      }                        return code;                  };
Magic Number,IronText.Framework,LrGraph,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Framework\Attributes\Diagnostics\LrGraph.cs,StateToHtml,The following statement contains a magic number: int limit = 20;
Magic Number,IronText.Runtime,Gss<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\GraphStructuredStack\Gss.cs,Gss,The following statement contains a magic number: history = new CircularStack<GssNode<T>>(2 * stateCount + 2);
Magic Number,IronText.Runtime,Gss<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\GraphStructuredStack\Gss.cs,Gss,The following statement contains a magic number: history = new CircularStack<GssNode<T>>(2 * stateCount + 2);
Magic Number,IronText.Runtime,Gss<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\GraphStructuredStack\Gss.cs,WriteGraph,The following statement contains a magic number: var layers = Enumerable                              .Range(0' currentLayer + 1)                              .Select(i => new List<GssNode<T>>(2))                              .ToList();
Magic Number,IronText.Runtime,TaggedStack<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Deterministic\TaggedStack.cs,InternalPop,The following statement contains a magic number: switch (count)              {                  case 0:                      break;                  case 1:                      data[Count]     = default(T);                      break;                  case 2:                      data[Count]     = default(T);                      data[Count + 1] = default(T);                      break;                  case 3:                      data[Count]     = default(T);                      data[Count + 1] = default(T);                      data[Count + 2] = default(T);                      break;                  default:                      Array.Clear(data' Count' count);                      break;              }
Magic Number,IronText.Runtime,TaggedStack<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Deterministic\TaggedStack.cs,InternalPop,The following statement contains a magic number: switch (count)              {                  case 0:                      break;                  case 1:                      data[Count]     = default(T);                      break;                  case 2:                      data[Count]     = default(T);                      data[Count + 1] = default(T);                      break;                  case 3:                      data[Count]     = default(T);                      data[Count + 1] = default(T);                      data[Count + 2] = default(T);                      break;                  default:                      Array.Clear(data' Count' count);                      break;              }
Magic Number,IronText.Runtime,TaggedStack<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Deterministic\TaggedStack.cs,InternalPop,The following statement contains a magic number: switch (count)              {                  case 0:                      break;                  case 1:                      data[Count]     = default(T);                      break;                  case 2:                      data[Count]     = default(T);                      data[Count + 1] = default(T);                      break;                  case 3:                      data[Count]     = default(T);                      data[Count + 1] = default(T);                      data[Count + 2] = default(T);                      break;                  default:                      Array.Clear(data' Count' count);                      break;              }
Magic Number,IronText.Runtime,TaggedStack<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Deterministic\TaggedStack.cs,Grow,The following statement contains a magic number: int newSize = Capacity * 2;
Magic Number,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,GetNKey,The following statement contains a magic number: return (X << 32) + c;
Magic Number,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,MakeFakeDestState,The following statement contains a magic number: return -((state << 16) + token);
Magic Number,IronText.Runtime,SppfNode,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Producers\SppfNode.cs,WriteIndented,The following statement contains a magic number: const int IndentStep = 2;
Magic Number,IronText.Runtime,SppfNode,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\Producers\SppfNode.cs,WriteIndented,The following statement contains a magic number: child.WriteIndented(grammar' output' indentLevel + 2 * IndentStep);
Magic Number,IronText.Lib.Ctem,QStr,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\Ctem\QStr.cs,Parse,The following statement contains a magic number: return new QStr(Unescape(buffer' start + 1' length - 2));
Magic Number,IronText.Lib.Ctem,QStr,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\Ctem\QStr.cs,Parse,The following statement contains a magic number: return new QStr(Unescape(text.ToCharArray()' 1' text.Length - 2));
Magic Number,IronText.Lib.IL,Bytes,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\IL\Grammar\CilPrimitives.cs,FromText,The following statement contains a magic number: List<byte> data = new List<byte>(8);
Magic Number,IronText.Lib.IL,Bytes,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\IL\Grammar\CilPrimitives.cs,ByteFromChars,The following statement contains a magic number: return (byte)((Hex(highHex) << 4) + Hex(lowHex));
Magic Number,IronText.Lib.IL,Bytes,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\IL\Grammar\CilPrimitives.cs,Hex,The following statement contains a magic number: return (char.ToLower(hexDigit) - 'a') + 10;
Magic Number,IronText.Lib.IL,CilPrimitives,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\IL\Grammar\CilPrimitives.cs,ByteSeq,The following statement contains a magic number: return Bytes.FromText(buf' start + 1' length - 2);
Magic Number,IronText.Lib,Builtins,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\Builtins.cs,List,The following statement contains a magic number: return new List<T>(4);
Magic Number,IronText.Lib,Builtins,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\Builtins.cs,Array,The following statement contains a magic number: T[] result = new T[4 + more.Count];
Magic Number,IronText.Lib,Builtins,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\Builtins.cs,Array,The following statement contains a magic number: result[2] = z;
Magic Number,IronText.Lib,Builtins,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\Builtins.cs,Array,The following statement contains a magic number: result[3] = t;
Magic Number,IronText.Lib,Builtins,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Lib\Builtins.cs,Array,The following statement contains a magic number: more.CopyTo(result' 4);
Missing Default,IronText.Diagnostics,GvGraphView,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Diagnostics\GvGraphView.cs,SetGraphProperties,The following switch statement is missing a default case: switch (value)              {                  case RankDir.BottomToTop: text = "BT"; break;                  case RankDir.TopToBottom: text = "TB"; break;                  case RankDir.RightToLeft: text = "RL"; break;                  case RankDir.LeftToRight: text = "LR"; break;              }
Missing Default,IronText.Framework,DescribeParserStateMachineAttribute,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Framework\Attributes\Diagnostics\DescribeParserStateMachineAttribute.cs,PrintAction,The following switch statement is missing a default case: switch (action.Kind)              {                  case ParserActionKind.Shift:                      output.Write("shift and go to state ");                      output.Write(action.State);                      break;                  case ParserActionKind.Reduce:                      output.Write("reduce using rule ");                      output.Write(action.ProductionId);                      break;                  case ParserActionKind.ShiftReduce:                      output.Write("shift-reduce using rule ");                      output.Write(action.ProductionId);                      break;                  case ParserActionKind.Accept:                      output.WriteLine("accept");                      break;              }
Missing Default,IronText.Framework,DescribeParserStateMachineAttribute,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Framework\Attributes\Diagnostics\DescribeParserStateMachineAttribute.cs,DescribeAction,The following switch statement is missing a default case: switch (action.Kind)              {                  case ParserActionKind.Shift:                      output.Write(indent);                      output.Write("Shift to the state I");                      output.Write(action.State + "");                      output.WriteLine(":");                      DescribeState(data' action.State' output' indent + indent);                      break;                  case ParserActionKind.ShiftReduce:                      output.Write(indent);                      output.WriteLine("Shift-Reduce on the rule:");                      output.Write(indent + indent);                      DescribeRule(data' action.ProductionId' output);                      output.WriteLine();                      break;                  case ParserActionKind.Reduce:                      output.Write(indent);                      output.WriteLine("Reduce on the rule:");                      output.Write(indent + indent);                      DescribeRule(data' action.ProductionId' output);                      output.WriteLine();                      break;                  case ParserActionKind.Accept:                      output.Write(indent);                      output.WriteLine("Accept.");                      break;              }
Missing Default,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,RnGlrParser,The following switch statement is missing a default case: switch (producer.ReductionOrder)              {                  case ReductionOrder.Unordered:                      {                          this.R = new ReductionQueue<T>();                          break;                      }                  case ReductionOrder.ByRuleDependency:                      {                          this.R = new ReductionPathQueue<T>(tokenComplexity' grammar);                          break;                      }              }
Missing Default,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,GetShift,The following switch statement is missing a default case: switch (action.Kind)              {                  case ParserActionKind.Shift:                      shift = action.State;                      break;                  case ParserActionKind.Conflict:                      int start = action.Value1;                      int last = action.Value1 + action.Value2;                      while (start != last)                      {                          var conflictAction = ParserAction.Decode(conflictActionsTable[start++]);                          if (conflictAction.Kind == ParserActionKind.Shift)                          {                              shift = conflictAction.State;                              break;                          }                      }                      break;              }
Missing Default,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,GetShiftReduce,The following switch statement is missing a default case: switch (action.Kind)              {                  case ParserActionKind.ShiftReduce:                      return action;                  case ParserActionKind.Conflict:                      int start = action.Value1;                      int last = action.Value1 + action.Value2;                      while (start != last)                      {                          var conflictAction = ParserAction.Decode(conflictActionsTable[start++]);                          if (conflictAction.Kind == ParserActionKind.ShiftReduce)                          {                              return conflictAction;                          }                      }                        break;              }
Missing Default,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,GetReductions,The following switch statement is missing a default case: switch (action.Kind)              {                  case ParserActionKind.Reduce:                      rule = grammar.Productions[action.ProductionId];                      pendingReductionsCount = 1;                      pendingReductions[0] = new ModifiedReduction(rule' action.Size);                      break;                  case ParserActionKind.Accept:                      accepted = true;                      break;                  case ParserActionKind.Conflict:                      int start = action.Value1;                      int last = action.Value1 + action.Value2;                      while (start != last)                      {                          var conflictAction = ParserAction.Decode(conflictActionsTable[start++]);                          switch (conflictAction.Kind)                          {                              case ParserActionKind.Reduce:                                  var crule = grammar.Productions[conflictAction.ProductionId];                                  pendingReductions[pendingReductionsCount++]                                      = new ModifiedReduction(crule' conflictAction.Size);                                  break;                          }                      }                        break;              }
Missing Default,IronText.Runtime,RnGlrParser<T>,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Runtime\GLR\RnGlrParser.cs,GetReductions,The following switch statement is missing a default case: switch (conflictAction.Kind)                          {                              case ParserActionKind.Reduce:                                  var crule = grammar.Productions[conflictAction.ProductionId];                                  pendingReductions[pendingReductionsCount++]                                      = new ModifiedReduction(crule' conflictAction.Size);                                  break;                          }
Missing Default,IronText.Extensibility,ScannerUtils,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Extensibility\ScannerUtils.cs,EscapeChar,The following switch statement is missing a default case: switch (value)              {                  case '\n': return @"\n";                  case '\r': return @"\r";                  case '\'': return @"\'";                  case '\\': return @"\\";                  case '\0': return @"\0";              }
Missing Default,IronText.Logging,MemoryLogging,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Logging\MemoryLogging.cs,Write,The following switch statement is missing a default case: switch (entry.Severity)              {                  case Severity.Error: ++errorCount; break;                  case Severity.Warning: ++warningCount; break;              }
Missing Default,IronText.Logging,TextLogging,D:\research\architectureSmells\repos1\sucaba_IronTextLibrary\Src\IronText.Core\Logging\TextLogging.cs,Write,The following switch statement is missing a default case: switch (entry.Severity)              {                  case Severity.Error: ++errorCount; break;                  case Severity.Warning: ++warningCount; break;              }
