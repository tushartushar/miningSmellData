Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeNode,Cyclomatic complexity of the method is 8
Complex Method,SharpLab.Server.Decompilation,JitAsmDecompilerBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\JitAsmDecompilerBase.cs,ResolveJitResult,Cyclomatic complexity of the method is 8
Complex Method,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,Cyclomatic complexity of the method is 12
Complex Method,SharpLab.Server.Execution.Internal,ExecutionResultSerializer,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\ExecutionResultSerializer.cs,SerializeOutput,Cyclomatic complexity of the method is 8
Complex Method,SharpLab.Server.Execution.Internal,FSharpEntryPointRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\FSharpEntryPointRewriter.cs,FindBestEntryPointCandidate,Cyclomatic complexity of the method is 8
Complex Method,SharpLab.Server.MirrorSharp,SlowUpdate,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\MirrorSharp\SlowUpdate.cs,ProcessAsync,Cyclomatic complexity of the method is 10
Long Parameter List,SharpLab.Server.Compilation,Compiler,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Compilation\Compiler.cs,TryCompileToStreamAsync,The method has 5 parameters. Parameters: assemblyStream' symbolStream' session' diagnostics' cancellationToken
Long Parameter List,SharpLab.Server.Compilation,ICompiler,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Compilation\ICompiler.cs,TryCompileToStreamAsync,The method has 5 parameters. Parameters: assemblyStream' symbolStream' session' diagnostics' cancellationToken
Long Parameter List,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeNode,The method has 5 parameters. Parameters: node' writer' parentPropertyName' parentChildrenStarted' session
Long Parameter List,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeList,The method has 5 parameters. Parameters: list' writer' parentPropertyName' parentChildrenStarted' session
Long Parameter List,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeIdent,The method has 5 parameters. Parameters: ident' writer' parentPropertyName' parentChildrenStarted' session
Long Parameter List,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeIdentList,The method has 5 parameters. Parameters: list' writer' parentPropertyName' parentChildrenStarted' session
Long Parameter List,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeEnum,The method has 5 parameters. Parameters: value' writer' parentPropertyName' parentChildrenStarted' session
Long Parameter List,SharpLab.Server.Decompilation.Internal,FastJsonWriterExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\Internal\FastJsonWriterExtensions.cs,WriteValueFromParts,The method has 8 parameters. Parameters: writer' part1' part2' part3' part4' part5' part6' part7
Long Parameter List,SharpLab.Server.Decompilation,JitAsmDecompilerBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\JitAsmDecompilerBase.cs,DisassembleAndWrite,The method has 6 parameters. Parameters: result' runtime' architecture' translator' methodAddressRef' writer
Long Parameter List,SharpLab.Server.Execution,Executor,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Executor.cs,Executor,The method has 7 parameters. Parameters: assemblyResolver' symbolReaderProvider' apiPolicy' rewriters' memoryStreamManager' serializer' monitor
Long Parameter List,SharpLab.Server.AspNetCore.Execution,ExecutorBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\ExecutorBase.cs,ExecutorBase,The method has 7 parameters. Parameters: assemblyResolver' symbolReaderProvider' apiPolicy' rewriters' memoryStreamManager' serializer' monitor
Long Parameter List,SharpLab.Server.Execution.Internal,FlowReportingRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\FlowReportingRewriter.cs,TryInsertReportMethodArguments,The method has 7 parameters. Parameters: il' instruction' sequencePoint' method' flow' session' index
Long Parameter List,SharpLab.Server.Execution.Internal,FlowReportingRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\FlowReportingRewriter.cs,InsertReportValue,The method has 8 parameters. Parameters: il' instruction' getValue' valueType' valueName' line' flow' index
Long Parameter List,SharpLab.Server.Execution.Internal,MemoryGraphArgumentNamesRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\MemoryGraphArgumentNamesRewriter.cs,RewriteInspectMemoryGraph,The method has 5 parameters. Parameters: method' il' call' session' argumentMethods
Long Parameter List,SharpLab.Server.MirrorSharp,SlowUpdate,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\MirrorSharp\SlowUpdate.cs,SlowUpdate,The method has 6 parameters. Parameters: compiler' decompilers' astTargets' executor' explainer' memoryStreamManager
Long Identifier,SharpLab.Server.Common.Languages,FSharpAdapter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Common\Languages\FSharpAdapter.cs,,The length of the parameter _referencedAssembliesTaskSource is 31.
Long Identifier,SharpLab.Server.Common.Languages,VisualBasicAdapter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Common\Languages\VisualBasicAdapter.cs,,The length of the parameter _assemblyReferenceDiscoveryTaskSource is 37.
Long Identifier,SharpLab.Server.Decompilation.Internal,RoslynSyntaxHelper,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\Internal\RoslynSyntaxHelper.cs,,The length of the parameter CompiledSyntaxNodeGetParentPropertyName is 39.
Long Identifier,SharpLab.Server.Decompilation.Internal,RoslynSyntaxHelper,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\Internal\RoslynSyntaxHelper.cs,,The length of the parameter CompiledSyntaxTokenGetParentPropertyName is 40.
Long Identifier,SharpLab.Server.Execution.Internal,FlowReportingRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\FlowReportingRewriter.cs,,The length of the parameter ReportRefReadOnlySpanValueMethod is 32.
Long Statement,SharpLab.Server.Common.Internal,AssemblyReferenceDiscoveryTaskSource,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Common\Internal\AssemblyReferenceDiscoveryTaskSource.cs,ContinueWith,The length of the statement  "                    throw new InvalidOperationException($"Only one continuation is supported for {nameof(AssemblyReferenceDiscoveryTask)}."); " is 121.
Long Statement,SharpLab.Server.Common.Languages,CSharpAdapter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Common\Languages\CSharpAdapter.cs,SetOptimize,The length of the statement  "                .WithParseOptions(parseOptions.WithPreprocessorSymbols(optimize == Optimize.Debug ? DebugPreprocessorSymbols : ReleasePreprocessorSymbols)) " is 139.
Long Statement,SharpLab.Server.Common.Languages,CSharpAdapter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Common\Languages\CSharpAdapter.cs,SetOptimize,The length of the statement  "                .WithCompilationOptions(compilationOptions.WithOptimizationLevel(optimize == Optimize.Debug ? OptimizationLevel.Debug : OptimizationLevel.Release)); " is 148.
Long Statement,SharpLab.Server.Common.Languages,VisualBasicAdapter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Common\Languages\VisualBasicAdapter.cs,SlowSetup,The length of the statement  "                    .Select(a => (MetadataReference)MetadataReference.CreateFromFile(a.Location' documentation: _documentationResolver.GetDocumentation(a))) " is 136.
Long Statement,SharpLab.Server.Common.Languages,VisualBasicAdapter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Common\Languages\VisualBasicAdapter.cs,SetOptimize,The length of the statement  "                .WithParseOptions(parseOptions.WithPreprocessorSymbols(optimize == Optimize.Debug ? DebugPreprocessorSymbols : ReleasePreprocessorSymbols)) " is 139.
Long Statement,SharpLab.Server.Common.Languages,VisualBasicAdapter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Common\Languages\VisualBasicAdapter.cs,SetOptimize,The length of the statement  "                .WithCompilationOptions(compilationOptions.WithOptimizationLevel(optimize == Optimize.Debug ? OptimizationLevel.Debug : OptimizationLevel.Release)); " is 148.
Long Statement,SharpLab.Server.Common.Languages,VisualBasicAdapter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Common\Languages\VisualBasicAdapter.cs,GetCallArgumentIdentifiers,The length of the statement  "            var call = RoslynAdapterHelper.FindSyntaxNodeInSession(session' callStartLine' callStartColumn) as InvocationExpressionSyntax; " is 126.
Long Statement,SharpLab.Server.Compilation,Compiler,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Compilation\Compiler.cs,TryCompileToStreamAsync,The length of the statement  "                var compiled = await TryCompileFSharpToStreamAsync(assemblyStream' session' diagnostics' cancellationToken).ConfigureAwait(false); " is 130.
Long Statement,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeList,The length of the statement  "                SerializeNode(item!' writer' null /* UI does not support list property names at the moment */' ref parentChildrenStarted' session); " is 131.
Long Statement,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\AstOnly\FSharpAstTarget.cs,GetChildrenSerializer,The length of the statement  "                t => new Lazy<SerializeChildrenAction>(() => CompileChildrenSerializer(t)' LazyThreadSafetyMode.ExecutionAndPublication) " is 120.
Long Statement,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\AstOnly\FSharpAstTarget.cs,CompileChildrenSerializer,The length of the statement  "                body.Add(Expression.Call(method' Expression.Property(node' property)' writer' Expression.Constant(propertyName' typeof(string))' refChildrenStarted' session)); " is 159.
Long Statement,SharpLab.Server.Decompilation.Internal,IsolatedJitAsmDecompilerCore,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\Internal\IsolatedJitAsmDecompilerCore.cs,JitCompileAndGetMethods,The length of the statement  "                        throw new NotSupportedException("Type " + type + " has a static constructor' which is not supported by SharpLab JIT decompiler."); " is 130.
Long Statement,SharpLab.Server.Decompilation.Internal,RoslynSyntaxHelper,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\Internal\RoslynSyntaxHelper.cs,GetParentPropertyName,The length of the statement  "                t => new Lazy<Func<T' SyntaxNode' string>>(() => SlowCompileGetParentPropertyName<T>(t)' LazyThreadSafetyMode.ExecutionAndPublication) " is 134.
Long Statement,SharpLab.Server.Decompilation,CSharpDecompiler,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\CSharpDecompiler.cs,Decompile,The length of the statement  "                var decompiler = new ICSharpCode.Decompiler.CSharp.CSharpDecompiler(assemblyFile' _assemblyResolver' DecompilerSettings) { " is 122.
Long Statement,SharpLab.Server.Decompilation,JitAsmDecompilerBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\JitAsmDecompilerBase.cs,WriteJitInfo,The length of the statement  "                clr.Flavor' clr.Version' Path.GetFileName(clr.ModuleInfo.FileName)' clr.DacInfo.TargetArchitecture.ToString("G").ToLowerInvariant() " is 131.
Long Statement,SharpLab.Server.Decompilation,JitAsmDecompilerBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\JitAsmDecompilerBase.cs,ResolveSymbol,The length of the statement  "                    return $"{operand!.RawValue} ; failed to resolve lval ({operand.Size})' please report at https://github.com/ashmind/SharpLab/issues"; " is 133.
Long Statement,SharpLab.Server.Decompilation,JitAsmDecompilerBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\JitAsmDecompilerBase.cs,DisassembleAndWrite,The length of the statement  "            using (var disasm = new Disassembler(new IntPtr(unchecked((long)methodAddress))' (int)regions.HotSize' architecture' methodAddress)) { " is 134.
Long Statement,SharpLab.Server.Decompilation,JitAsmDecompilerBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\JitAsmDecompilerBase.cs,FindNonEmptyHotColdInfo,The length of the statement  "                if (other.MetadataToken == method.MetadataToken && other.GetFullSignature() == methodSignature && other.HotColdInfo.HotSize > 0) " is 128.
Long Statement,SharpLab.Server.Execution,Executor,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Executor.cs,ExecuteWithIsolation,The length of the statement  "                return RemoteFunc.Invoke(context.Domain' assemblyStream.ToArray()' guardToken' Current.ProcessId' ProfilerState.Active' Remote.Execute); " is 136.
Long Statement,SharpLab.Server.Execution,IsolatedExecutorCore,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\IsolatedExecutorCore.cs,Execute,The length of the statement  "                    ex = new TimeGuardException("Time limit reached while evaluating a Regex.\r\nNote that timeout was added by SharpLab — in real code this would not throw' but might run for a very long time."' ex); " is 196.
Long Statement,SharpLab.Server.AspNetCore.Execution,ExecutorBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\ExecutorBase.cs,CreateGuardSettings,The length of the statement  "            settings.AllowPointerOperationsInTypesMatchingPattern = CompileRegex(settings.AllowPointerOperationsInTypesMatchingPattern); " is 124.
Long Statement,SharpLab.Server.Execution.Internal,FlowReportingRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\FlowReportingRewriter.cs,InsertReportValue,The length of the statement  "                report = PrepareReportValue(byRef.ElementType' flow.ReportRefValue' flow.ReportRefSpanValue' flow.ReportRefReadOnlySpanValue); " is 126.
Long Statement,SharpLab.Server.Execution.Internal,FSharpEntryPointRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\FSharpEntryPointRewriter.cs,HasEntryPointAttribute,The length of the statement  "                if (attribute.AttributeType.Namespace == "Microsoft.FSharp.Core" && attribute.AttributeType.Name == nameof(EntryPointAttribute)) " is 128.
Long Statement,SharpLab.Server.Explanation.Internal,CSharpExplanationPathDialect,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Explanation\Internal\CSharpExplanationPathDialect.cs,EnumerateNodeKinds,The length of the statement  "            // https://github.com/dotnet/roslyn/blob/7ea6fa4d1871175f5ad5445677c0e0dd1a7a597c/src/Compilers/Core/Portable/Operations/OperationKind.cs#L209-L212 " is 147.
Long Statement,SharpLab.Server.MirrorSharp,SlowUpdate,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\MirrorSharp\SlowUpdate.cs,ProcessAsync,The length of the statement  "                var compiled = await _compiler.TryCompileToStreamAsync(assemblyStream' symbolStream' session' diagnostics' cancellationToken).ConfigureAwait(false); " is 148.
Magic Number,SharpLab.Server.Common,DotEnv,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Common\DotEnv.cs,Load,The following statement contains a magic number: var parts = trimmed.Split(new[] { '=' }' 2);
Magic Number,SharpLab.Server.Decompilation,JitAsmDecompilerBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\JitAsmDecompilerBase.cs,GetOperandLValue,The following statement contains a magic number: switch (operand.Size) {                  case 8:  return (ulong)operand.LvalSByte;                  case 16: return (ulong)operand.LvalSWord;                  case 32: return (ulong)operand.LvalSDWord;                  default: return null;              }
Magic Number,SharpLab.Server.Decompilation,JitAsmDecompilerBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\JitAsmDecompilerBase.cs,GetOperandLValue,The following statement contains a magic number: switch (operand.Size) {                  case 8:  return (ulong)operand.LvalSByte;                  case 16: return (ulong)operand.LvalSWord;                  case 32: return (ulong)operand.LvalSDWord;                  default: return null;              }
Magic Number,SharpLab.Server.Decompilation,JitAsmDecompilerBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\JitAsmDecompilerBase.cs,GetOperandLValue,The following statement contains a magic number: switch (operand.Size) {                  case 8:  return (ulong)operand.LvalSByte;                  case 16: return (ulong)operand.LvalSWord;                  case 32: return (ulong)operand.LvalSDWord;                  default: return null;              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdargBest,The following statement contains a magic number: switch (index) {                  case 0: return il.Create(OpCodes.Ldarg_0);                  case 1: return il.Create(OpCodes.Ldarg_1);                  case 2: return il.Create(OpCodes.Ldarg_2);                  case 3: return il.Create(OpCodes.Ldarg_3);                  default:                      if (IsSByte(index))                          return il.Create(OpCodes.Ldarg_S' (sbyte)index);                      return il.Create(OpCodes.Ldarg' index);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdargBest,The following statement contains a magic number: switch (index) {                  case 0: return il.Create(OpCodes.Ldarg_0);                  case 1: return il.Create(OpCodes.Ldarg_1);                  case 2: return il.Create(OpCodes.Ldarg_2);                  case 3: return il.Create(OpCodes.Ldarg_3);                  default:                      if (IsSByte(index))                          return il.Create(OpCodes.Ldarg_S' (sbyte)index);                      return il.Create(OpCodes.Ldarg' index);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdlocBest,The following statement contains a magic number: switch (variable.Index) {                  case 0:  return il.Create(OpCodes.Ldloc_0);                  case 1:  return il.Create(OpCodes.Ldloc_1);                  case 2:  return il.Create(OpCodes.Ldloc_2);                  case 3:  return il.Create(OpCodes.Ldloc_3);                  default:                      if (IsSByte(variable.Index))                          return il.Create(OpCodes.Ldloc_S' variable);                      return il.Create(OpCodes.Ldloc' variable);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdlocBest,The following statement contains a magic number: switch (variable.Index) {                  case 0:  return il.Create(OpCodes.Ldloc_0);                  case 1:  return il.Create(OpCodes.Ldloc_1);                  case 2:  return il.Create(OpCodes.Ldloc_2);                  case 3:  return il.Create(OpCodes.Ldloc_3);                  default:                      if (IsSByte(variable.Index))                          return il.Create(OpCodes.Ldloc_S' variable);                      return il.Create(OpCodes.Ldloc' variable);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateStlocBest,The following statement contains a magic number: switch (variable.Index) {                  case 0:  return il.Create(OpCodes.Stloc_0);                  case 1:  return il.Create(OpCodes.Stloc_1);                  case 2:  return il.Create(OpCodes.Stloc_2);                  case 3:  return il.Create(OpCodes.Stloc_3);                  default:                      if (IsSByte(variable.Index))                          return il.Create(OpCodes.Stloc_S' variable);                      return il.Create(OpCodes.Stloc' variable);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateStlocBest,The following statement contains a magic number: switch (variable.Index) {                  case 0:  return il.Create(OpCodes.Stloc_0);                  case 1:  return il.Create(OpCodes.Stloc_1);                  case 2:  return il.Create(OpCodes.Stloc_2);                  case 3:  return il.Create(OpCodes.Stloc_3);                  default:                      if (IsSByte(variable.Index))                          return il.Create(OpCodes.Stloc_S' variable);                      return il.Create(OpCodes.Stloc' variable);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,FlowReportingRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\FlowReportingRewriter.cs,Rewrite,The following statement contains a magic number: i += 2;
Magic Number,SharpLab.Server.Execution.Internal,FlowReportingRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\FlowReportingRewriter.cs,InsertReportValue,The following statement contains a magic number: index += 4;
Magic Number,SharpLab.Server.Execution.Internal,FlowReportingRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\FlowReportingRewriter.cs,GetIndexIfStloc,The following statement contains a magic number: switch (instruction.OpCode.Code) {                  case Code.Stloc_0: return 0;                  case Code.Stloc_1: return 1;                  case Code.Stloc_2: return 2;                  case Code.Stloc_3: return 3;                    case Code.Stloc_S:                  case Code.Stloc:                      return ((VariableReference)instruction.Operand).Index;                    default: return null;              }
Magic Number,SharpLab.Server.Execution.Internal,FlowReportingRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\FlowReportingRewriter.cs,GetIndexIfStloc,The following statement contains a magic number: switch (instruction.OpCode.Code) {                  case Code.Stloc_0: return 0;                  case Code.Stloc_1: return 1;                  case Code.Stloc_2: return 2;                  case Code.Stloc_3: return 3;                    case Code.Stloc_S:                  case Code.Stloc:                      return ((VariableReference)instruction.Operand).Index;                    default: return null;              }
Missing Default,SharpLab.Server.Decompilation,JitAsmDecompilerBase,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Decompilation\JitAsmDecompilerBase.cs,DisassembleAndWrite,The following switch statement is missing a default case: switch (result.Status) {                  case MethodJitStatus.IgnoredRuntime:                      writer.WriteLine("    ; Cannot produce JIT assembly for runtime-implemented method.");                      return;                  case MethodJitStatus.IgnoredOpenGenericWithNoAttribute:                      writer.WriteLine("    ; Open generics cannot be JIT-compiled.");                      writer.WriteLine("    ; However you can use attribute SharpLab.Runtime.JitGeneric to specify argument types.");                      writer.WriteLine("    ; Example: [JitGeneric(typeof(int))' JitGeneric(typeof(string))] void M<T>() { ... }.");                      return;              }
Missing Default,SharpLab.Server.Execution.Internal,FlowReportingRewriter,D:\research\architectureSmells\repos\ashmind_TryRoslyn\source\NetFramework\Server\Execution\Internal\FlowReportingRewriter.cs,RewriteExceptionHandlers,The following switch statement is missing a default case: switch (handlers[i].HandlerType) {                      case ExceptionHandlerType.Catch:                          RewriteCatch(handlers[i].HandlerStart' il' flow);                          break;                        case ExceptionHandlerType.Filter:                          RewriteCatch(handlers[i].FilterStart' il' flow);                          break;                        case ExceptionHandlerType.Finally:                          RewriteFinally(handlers[i]' ref i' il' flow);                          break;                  }
