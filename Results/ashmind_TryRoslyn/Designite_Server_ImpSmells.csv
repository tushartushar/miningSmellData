Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpLab.Server.Execution.Internal,FSharpEntryPointRewriter,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\FSharpEntryPointRewriter.cs,FindBestEntryPointCandidate,Cyclomatic complexity of the method is 8
Long Parameter List,SharpLab.Server.Compilation,Compiler,C:\repos\ashmind_TryRoslyn\source\Server\Compilation\Compiler.cs,TryCompileToStreamAsync,The method has 5 parameters. Parameters: assemblyStream' symbolStream' session' diagnostics' cancellationToken
Long Parameter List,SharpLab.Server.Compilation,ICompiler,C:\repos\ashmind_TryRoslyn\source\Server\Compilation\ICompiler.cs,TryCompileToStreamAsync,The method has 5 parameters. Parameters: assemblyStream' symbolStream' session' diagnostics' cancellationToken
Long Parameter List,SharpLab.Server.Decompilation,JitAsmDecompiler,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\JitAsmDecompiler.cs,DisassembleAndWrite,The method has 6 parameters. Parameters: method' result' architecture' translator' methodAddressRef' writer
Long Parameter List,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeNode,The method has 5 parameters. Parameters: node' writer' parentPropertyName' parentChildrenStarted' session
Long Parameter List,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeList,The method has 5 parameters. Parameters: list' writer' parentPropertyName' parentChildrenStarted' session
Long Parameter List,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeIdent,The method has 5 parameters. Parameters: ident' writer' parentPropertyName' parentChildrenStarted' session
Long Parameter List,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeIdentList,The method has 5 parameters. Parameters: list' writer' parentPropertyName' parentChildrenStarted' session
Long Parameter List,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeEnum,The method has 5 parameters. Parameters: value' writer' parentPropertyName' parentChildrenStarted' session
Long Parameter List,SharpLab.Server.Decompilation.Internal,FastJsonWriterExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\Internal\FastJsonWriterExtensions.cs,WriteValueFromParts,The method has 8 parameters. Parameters: writer' part1' part2' part3' part4' part5' part6' part7
Long Parameter List,SharpLab.Server.Execution.Internal,FlowReportingRewriter,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\FlowReportingRewriter.cs,TryInsertReportMethodArguments,The method has 6 parameters. Parameters: il' instruction' method' flow' session' index
Long Parameter List,SharpLab.Server.Execution.Internal,FlowReportingRewriter,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\FlowReportingRewriter.cs,InsertReportValue,The method has 8 parameters. Parameters: il' instruction' getValue' valueType' valueName' line' flow' index
Long Parameter List,SharpLab.Server.MirrorSharp,SlowUpdate,C:\repos\ashmind_TryRoslyn\source\Server\MirrorSharp\SlowUpdate.cs,SlowUpdate,The method has 5 parameters. Parameters: compiler' decompilers' astTargets' executor' memoryStreamManager
Long Identifier,SharpLab.Server.Decompilation.Internal,RoslynSyntaxHelper,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\Internal\RoslynSyntaxHelper.cs,,The length of the parameter CompiledSyntaxNodeGetParentPropertyName is 39.
Long Identifier,SharpLab.Server.Decompilation.Internal,RoslynSyntaxHelper,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\Internal\RoslynSyntaxHelper.cs,,The length of the parameter CompiledSyntaxTokenGetParentPropertyName is 40.
Long Statement,SharpLab.Server.Common.Languages,CSharpAdapter,C:\repos\ashmind_TryRoslyn\source\Server\Common\Languages\CSharpAdapter.cs,SlowSetup,The length of the statement  "            options.CSharp.ParseOptions = new CSharpParseOptions(MaxLanguageVersion' preprocessorSymbols: DebugPreprocessorSymbols).WithFeatures(_features); " is 144.
Long Statement,SharpLab.Server.Common.Languages,CSharpAdapter,C:\repos\ashmind_TryRoslyn\source\Server\Common\Languages\CSharpAdapter.cs,SetOptimize,The length of the statement  "                .WithParseOptions(parseOptions.WithPreprocessorSymbols(optimize == Optimize.Debug ? DebugPreprocessorSymbols : ReleasePreprocessorSymbols)) " is 139.
Long Statement,SharpLab.Server.Common.Languages,CSharpAdapter,C:\repos\ashmind_TryRoslyn\source\Server\Common\Languages\CSharpAdapter.cs,SetOptimize,The length of the statement  "                .WithCompilationOptions(compilationOptions.WithOptimizationLevel(optimize == Optimize.Debug ? OptimizationLevel.Debug : OptimizationLevel.Release)); " is 148.
Long Statement,SharpLab.Server.Common.Languages,VisualBasicAdapter,C:\repos\ashmind_TryRoslyn\source\Server\Common\Languages\VisualBasicAdapter.cs,SetOptimize,The length of the statement  "                .WithParseOptions(parseOptions.WithPreprocessorSymbols(optimize == Optimize.Debug ? DebugPreprocessorSymbols : ReleasePreprocessorSymbols)) " is 139.
Long Statement,SharpLab.Server.Common.Languages,VisualBasicAdapter,C:\repos\ashmind_TryRoslyn\source\Server\Common\Languages\VisualBasicAdapter.cs,SetOptimize,The length of the statement  "                .WithCompilationOptions(compilationOptions.WithOptimizationLevel(optimize == Optimize.Debug ? OptimizationLevel.Debug : OptimizationLevel.Release)); " is 148.
Long Statement,SharpLab.Server.Compilation.Internal,CSharpFeatureDiscovery,C:\repos\ashmind_TryRoslyn\source\Server\Compilation\Internal\CSharpFeatureDiscovery.cs,SlowDiscoverAll,The length of the statement  "            var requiredFeature = messageIdExtensionsType.GetMethod("RequiredFeature"' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 143.
Long Statement,SharpLab.Server.Compilation.Internal,VisualBasicFeatureDiscovery,C:\repos\ashmind_TryRoslyn\source\Server\Compilation\Internal\VisualBasicFeatureDiscovery.cs,SlowDiscoverAll,The length of the statement  "            var featureExtensionsType = assembly.GetType("Microsoft.CodeAnalysis.VisualBasic.Syntax.InternalSyntax.FeatureExtensions"); " is 123.
Long Statement,SharpLab.Server.Compilation.Internal,VisualBasicFeatureDiscovery,C:\repos\ashmind_TryRoslyn\source\Server\Compilation\Internal\VisualBasicFeatureDiscovery.cs,SlowDiscoverAll,The length of the statement  "            var getFeatureFlag = featureExtensionsType.GetMethod("GetFeatureFlag"' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 139.
Long Statement,SharpLab.Server.Decompilation,JitAsmDecompiler,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\JitAsmDecompiler.cs,WriteJitInfo,The length of the statement  "                clr.Flavor' clr.Version' Path.GetFileName(clr.ModuleInfo.FileName)' clr.DacInfo.TargetArchitecture.ToString("G").ToLowerInvariant() " is 131.
Long Statement,SharpLab.Server.Decompilation,JitAsmDecompiler,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\JitAsmDecompiler.cs,DisassembleAndWrite,The length of the statement  "            using (var disasm = new Disassembler(new IntPtr(unchecked((long)methodAddress))' (int)info.HotSize' architecture' methodAddress)) { " is 131.
Long Statement,SharpLab.Server.Decompilation,JitAsmDecompiler,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\JitAsmDecompiler.cs,FindNonEmptyHotColdInfo,The length of the statement  "                if (other.MetadataToken == method.MetadataToken && other.GetFullSignature() == methodSignature && other.HotColdInfo.HotSize > 0) " is 128.
Long Statement,SharpLab.Server.Decompilation,Remote,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\JitAsmDecompiler.cs,GetCompiledMethods,The length of the statement  "                            throw new NotSupportedException("Type " + type + " has a static constructor' which is not supported by SharpLab JIT decompiler."); " is 130.
Long Statement,SharpLab.Server.Decompilation,Remote,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\JitAsmDecompiler.cs,CollectCompiledWraps,The length of the statement  "                    results.Add(new MethodJitResult(method.MethodHandle' MethodJitStatus.FailedOpenGenericWithNoAttribute' isGeneric: true)); " is 121.
Long Statement,SharpLab.Server.Decompilation,Remote,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\JitAsmDecompiler.cs,CollectCompiledGeneric,The length of the statement  "                    results.Add(new MethodJitResult(method.MethodHandle' MethodJitStatus.FailedOpenGenericWithNoAttribute' isGeneric: true)); " is 121.
Long Statement,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\AstOnly\FSharpAstTarget.cs,SerializeList,The length of the statement  "                SerializeNode(item' writer' null /* UI does not support list property names at the moment */' ref parentChildrenStarted' session); " is 130.
Long Statement,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\AstOnly\FSharpAstTarget.cs,GetChildrenSerializer,The length of the statement  "                t => new Lazy<SerializeChildrenAction>(() => CompileChildrenSerializer(t)' LazyThreadSafetyMode.ExecutionAndPublication) " is 120.
Long Statement,SharpLab.Server.Decompilation.AstOnly,FSharpAstTarget,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\AstOnly\FSharpAstTarget.cs,CompileChildrenSerializer,The length of the statement  "                body.Add(Expression.Call(method' Expression.Property(node' property)' writer' Expression.Constant(propertyName' typeof(string))' refChildrenStarted' session)); " is 159.
Long Statement,SharpLab.Server.Decompilation.Internal,RoslynSyntaxHelper,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\Internal\RoslynSyntaxHelper.cs,GetParentPropertyName,The length of the statement  "                t => new Lazy<Func<T' SyntaxNode' string>>(() => SlowCompileGetParentPropertyName<T>(t)' LazyThreadSafetyMode.ExecutionAndPublication) " is 134.
Long Statement,SharpLab.Server.Execution.Internal,FSharpEntryPointRewriter,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\FSharpEntryPointRewriter.cs,HasEntryPointAttribute,The length of the statement  "                if (attribute.AttributeType.Namespace == "Microsoft.FSharp.Core" && attribute.AttributeType.Name == nameof(EntryPointAttribute)) " is 128.
Long Statement,SharpLab.Server.MirrorSharp,SlowUpdate,C:\repos\ashmind_TryRoslyn\source\Server\MirrorSharp\SlowUpdate.cs,ProcessAsync,The length of the statement  "                if (!await _compiler.TryCompileToStreamAsync(assemblyStream' symbolStream' session' diagnostics' cancellationToken).ConfigureAwait(false)) { " is 140.
Magic Number,SharpLab.Server,Startup,C:\repos\ashmind_TryRoslyn\source\Server\App_Start\Startup.cs,Configuration,The following statement contains a magic number: var corsPolicyTask = Task.FromResult(new CorsPolicy {                  AllowAnyHeader = true'                  AllowAnyMethod = true'                  AllowAnyOrigin = true'                  PreflightMaxAge = 60 * 60 * 1000 // 1 hour' though Chrome would limit to 10 mins I believe              });
Magic Number,SharpLab.Server,Startup,C:\repos\ashmind_TryRoslyn\source\Server\App_Start\Startup.cs,Configuration,The following statement contains a magic number: var corsPolicyTask = Task.FromResult(new CorsPolicy {                  AllowAnyHeader = true'                  AllowAnyMethod = true'                  AllowAnyOrigin = true'                  PreflightMaxAge = 60 * 60 * 1000 // 1 hour' though Chrome would limit to 10 mins I believe              });
Magic Number,SharpLab.Server,Startup,C:\repos\ashmind_TryRoslyn\source\Server\App_Start\Startup.cs,Configuration,The following statement contains a magic number: var corsPolicyTask = Task.FromResult(new CorsPolicy {                  AllowAnyHeader = true'                  AllowAnyMethod = true'                  AllowAnyOrigin = true'                  PreflightMaxAge = 60 * 60 * 1000 // 1 hour' though Chrome would limit to 10 mins I believe              });
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateLdargBest,The following statement contains a magic number: switch (index) {                  case 0: return il.Create(OpCodes.Ldarg_0);                  case 1: return il.Create(OpCodes.Ldarg_1);                  case 2: return il.Create(OpCodes.Ldarg_2);                  case 3: return il.Create(OpCodes.Ldarg_3);                  default:                      if (IsSByte(index))                          return il.Create(OpCodes.Ldarg_S' (sbyte)index);                      return il.Create(OpCodes.Ldarg' index);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateLdargBest,The following statement contains a magic number: switch (index) {                  case 0: return il.Create(OpCodes.Ldarg_0);                  case 1: return il.Create(OpCodes.Ldarg_1);                  case 2: return il.Create(OpCodes.Ldarg_2);                  case 3: return il.Create(OpCodes.Ldarg_3);                  default:                      if (IsSByte(index))                          return il.Create(OpCodes.Ldarg_S' (sbyte)index);                      return il.Create(OpCodes.Ldarg' index);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateLdlocBest,The following statement contains a magic number: switch (variable.Index) {                  case 0:  return il.Create(OpCodes.Ldloc_0);                  case 1:  return il.Create(OpCodes.Ldloc_1);                  case 2:  return il.Create(OpCodes.Ldloc_2);                  case 3:  return il.Create(OpCodes.Ldloc_3);                  default:                      if (IsSByte(variable.Index))                          return il.Create(OpCodes.Ldloc_S' (sbyte)variable.Index);                      return il.Create(OpCodes.Ldloc' variable);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateLdlocBest,The following statement contains a magic number: switch (variable.Index) {                  case 0:  return il.Create(OpCodes.Ldloc_0);                  case 1:  return il.Create(OpCodes.Ldloc_1);                  case 2:  return il.Create(OpCodes.Ldloc_2);                  case 3:  return il.Create(OpCodes.Ldloc_3);                  default:                      if (IsSByte(variable.Index))                          return il.Create(OpCodes.Ldloc_S' (sbyte)variable.Index);                      return il.Create(OpCodes.Ldloc' variable);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateStlocBest,The following statement contains a magic number: switch (variable.Index) {                  case 0:  return il.Create(OpCodes.Stloc_0);                  case 1:  return il.Create(OpCodes.Stloc_1);                  case 2:  return il.Create(OpCodes.Stloc_2);                  case 3:  return il.Create(OpCodes.Stloc_3);                  default:                      if (IsSByte(variable.Index))                          return il.Create(OpCodes.Stloc_S' (sbyte)variable.Index);                      return il.Create(OpCodes.Stloc' variable);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateStlocBest,The following statement contains a magic number: switch (variable.Index) {                  case 0:  return il.Create(OpCodes.Stloc_0);                  case 1:  return il.Create(OpCodes.Stloc_1);                  case 2:  return il.Create(OpCodes.Stloc_2);                  case 3:  return il.Create(OpCodes.Stloc_3);                  default:                      if (IsSByte(variable.Index))                          return il.Create(OpCodes.Stloc_S' (sbyte)variable.Index);                      return il.Create(OpCodes.Stloc' variable);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,CecilExtensions,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\CecilExtensions.cs,CreateLdcI4Best,The following statement contains a magic number: switch (value) {                  case 0: return il.Create(OpCodes.Ldc_I4_0);                  case 1: return il.Create(OpCodes.Ldc_I4_1);                  case 2: return il.Create(OpCodes.Ldc_I4_2);                  case 3: return il.Create(OpCodes.Ldc_I4_3);                  case 4: return il.Create(OpCodes.Ldc_I4_4);                  case 5: return il.Create(OpCodes.Ldc_I4_5);                  case 6: return il.Create(OpCodes.Ldc_I4_6);                  case 7: return il.Create(OpCodes.Ldc_I4_7);                  case 8: return il.Create(OpCodes.Ldc_I4_8);                  case -1: return il.Create(OpCodes.Ldc_I4_M1);                  default:                      if (IsSByte(value))                          return il.Create(OpCodes.Ldc_I4_S' (sbyte)value);                      return il.Create(OpCodes.Ldc_I4' value);              }
Magic Number,SharpLab.Server.Execution.Internal,FlowReportingRewriter,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\FlowReportingRewriter.cs,Rewrite,The following statement contains a magic number: for (var i = 0; i < instructions.Count; i++) {                  var instruction = instructions[i];                  var sequencePoint = instruction.SequencePoint;                  var hasSequencePoint = sequencePoint != null && sequencePoint.StartLine != HiddenLine;                  if (!hasSequencePoint && lastLine == null)                      continue;                    if (hasSequencePoint && sequencePoint.StartLine != lastLine) {                      if (i == 0)                          TryInsertReportMethodArguments(il' instruction' method' flow' session' ref i);                        InsertBeforeAndRetargetAll(il' instruction' il.CreateLdcI4Best(sequencePoint.StartLine));                      il.InsertBefore(instruction' il.CreateCall(flow.ReportLineStart));                      i += 2;                      lastLine = sequencePoint.StartLine;                  }                    var valueOrNull = GetValueToReport(instruction' il' session);                  if (valueOrNull == null)                      continue;                    var value = valueOrNull.Value;                  InsertReportValue(                      il' instruction'                      il.Create(OpCodes.Dup)' value.type' value.name'                      sequencePoint?.StartLine ?? lastLine ?? Flow.UnknownLineNumber'                      flow' ref i                  );              }
Magic Number,SharpLab.Server.Execution.Internal,FlowReportingRewriter,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\FlowReportingRewriter.cs,InsertReportValue,The following statement contains a magic number: index += 4;
Magic Number,SharpLab.Server.Execution.Internal,FlowReportingRewriter,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\FlowReportingRewriter.cs,GetIndexIfStloc,The following statement contains a magic number: switch (instruction.OpCode.Code) {                  case Code.Stloc_0: return 0;                  case Code.Stloc_1: return 1;                  case Code.Stloc_2: return 2;                  case Code.Stloc_3: return 3;                    case Code.Stloc_S:                  case Code.Stloc:                      return ((VariableReference)instruction.Operand).Index;                    default: return null;              }
Magic Number,SharpLab.Server.Execution.Internal,FlowReportingRewriter,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\FlowReportingRewriter.cs,GetIndexIfStloc,The following statement contains a magic number: switch (instruction.OpCode.Code) {                  case Code.Stloc_0: return 0;                  case Code.Stloc_1: return 1;                  case Code.Stloc_2: return 2;                  case Code.Stloc_3: return 3;                    case Code.Stloc_S:                  case Code.Stloc:                      return ((VariableReference)instruction.Operand).Index;                    default: return null;              }
Missing Default,SharpLab.Server.Decompilation,JitAsmDecompiler,C:\repos\ashmind_TryRoslyn\source\Server\Decompilation\JitAsmDecompiler.cs,DisassembleAndWrite,The following switch statement is missing a default case: switch (result.Status) {                  case Remote.MethodJitStatus.FailedOpenGenericWithNoAttribute:                      writer.WriteLine("    ; Open generics cannot be JIT-compiled.");                      writer.WriteLine("    ; However you can use attribute SharpLab.Runtime.JitGeneric to specify argument types.");                      writer.WriteLine("    ; Example: [JitGeneric(typeof(int))' JitGeneric(typeof(string))] void M<T>() { ... }.");                      return;              }
Missing Default,SharpLab.Server.Execution.Internal,FlowReportingRewriter,C:\repos\ashmind_TryRoslyn\source\Server\Execution\Internal\FlowReportingRewriter.cs,RewriteExceptionHandlers,The following switch statement is missing a default case: switch (handlers[i].HandlerType) {                      case ExceptionHandlerType.Catch:                          RewriteCatch(handlers[i].HandlerStart' il' flow);                          break;                        case ExceptionHandlerType.Filter:                          RewriteCatch(handlers[i].FilterStart' il' flow);                          break;                        case ExceptionHandlerType.Finally:                          RewriteFinally(handlers[i]' ref i' il' flow);                          break;                  }
