Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Laan.Sql.Parser.Parsers,CreateTableStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Parsers\CreateTableStatementParser.cs,ProcessFieldDefinition,Cyclomatic complexity of the method is 10
Complex Method,Laan.Sql.Parser.Parsers,CriteriaStatementParser<T>,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Parsers\CriteriaStatementParser.cs,GetJoinType,Cyclomatic complexity of the method is 10
Complex Method,Laan.Sql.Parser.Parsers,ExpressionParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Parsers\ExpressionParser.cs,ReadFactor,Cyclomatic complexity of the method is 8
Complex Method,Laan.Sql.Parser,SetStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Parsers\SetStatementParser.cs,Execute,Cyclomatic complexity of the method is 8
Long Statement,Laan.Sql.Parser.Parsers,CreateProcedureStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Parsers\CreateProcedureStatementParser.cs,Execute,The length of the statement  "            _statement = new CreateProcedureStatement() { Name = GetDotNotationIdentifier()' IsAlter = IsAlter' IsShortForm = IsShortForm }; " is 128.
Long Statement,Laan.Sql.Parser.Parsers,CreateIndexParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Parsers\CreateNonClusteredIndexParser.cs,GetRelationalIndexOptionsList,The length of the statement  "                if ( Tokenizer.IsNextToken( Constants.PadIndex' Constants.SortInTempDb' Constants.IgnoreDupKey' Constants.StatisticsNorecompute' Constants.DropExisting' Constants.Online' Constants.AllowRowLocks' Constants.AllowPageLocks ) ) " is 224.
Long Statement,Laan.Sql.Parser.Parsers,CreateTableStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Parsers\CreateTableStatementParser.cs,ProcessFieldDefinition,The length of the statement  "                FieldDefinition calcExpression = new FieldDefinition() { Name = fieldName' Nullability = Nullability.Nullable' Type = null }; " is 125.
Long Statement,Laan.Sql.Parser.Parsers,CriteriaStatementParser<T>,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Parsers\CriteriaStatementParser.cs,ProcessFrom,The length of the statement  "                if (!Tokenizer.IsNextToken(Constants.OpenBracket) && (alias.Type != AliasType.Implicit || !Tokenizer.IsNextToken(FromTerminatorSet))) " is 133.
Long Statement,Laan.Sql.Parser.Parsers,CriteriaStatementParser<T>,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Parsers\CriteriaStatementParser.cs,ProcessJoins,The length of the statement  "                if (!(expr is CriteriaExpression) && !(expr is NestedExpression && (expr as NestedExpression).Expression is CriteriaExpression)) " is 128.
Complex Conditional,Laan.Sql.Parser.Entities,FieldDefinition,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Entities\FieldDefinition.cs,CompareIdentity,The conditional expression  "( Identity != null && other.Identity == null ) || ( other.Identity != null && Identity == null )"  is complex.
Missing Default,Laan.Sql.Parser.Parsers,CriteriaStatementParser<T>,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Parsers\CriteriaStatementParser.cs,ProcessField,The following switch statement is missing a default case: switch (fieldType)              {                  case FieldType.Select:                      field = GetSelectField(token);                      break;                  case FieldType.Update:                      field = GetUpdateField(token);                      break;                  case FieldType.OrderBy:                      field = GetOrderByField(token);                      break;                  case FieldType.GroupBy:                      field = new Field { Expression = token };                      break;              }
Missing Default,Laan.Sql.Parser,SetStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser\Parsers\SetStatementParser.cs,Execute,The following switch statement is missing a default case: switch ( identifier )                  {                      case Constants.DateFirst:                      {                          SetDateFirstStatement statement = new SetDateFirstStatement();                          ReadAssignment( statement );                          return statement;                      }                        case Constants.DateFormat:                      {                          SetDateFormatStatement statement = new SetDateFormatStatement();                          ReadAssignment( statement );                          return statement;                      }                        case Constants.DeadlockPriority:                      {                          SetDeadlockPriorityStatement statement = new SetDeadlockPriorityStatement();                          ReadAssignment( statement );                          return statement;                      }                  }
