Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Laan.Sql.Parser.Test,TestCreateProcedureStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateProcedureStatement.cs,Select_StarField_Only,The length of the statement  "            var statement = ParserFactory.Execute<CreateProcedureStatement>(string.Format("{0} proc v1 as select * from table"' modificationType)).First(); " is 143.
Long Statement,Laan.Sql.Parser.Test,TestCreateProcedureStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateProcedureStatement.cs,Create_Procedure_With_Schema,The length of the statement  "            var statement = ParserFactory.Execute<CreateProcedureStatement>("create procedure dbo.v1 as select * from table").First(); " is 122.
Long Statement,Laan.Sql.Parser.Test,TestCreateProcedureStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateProcedureStatement.cs,Create_Procedure_With_Block_Definition,The length of the statement  "            var statement = ParserFactory.Execute<CreateProcedureStatement>("create procedure dbo.v1 as begin select * from table end").First(); " is 132.
Long Statement,Laan.Sql.Parser.Test,TestCreateProcedureStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateProcedureStatement.cs,Create_Procedure_With_Arguments_Without_Brackets,The length of the statement  "            var statement = ParserFactory.Execute<CreateProcedureStatement>("create procedure dbo.v1 @Id INT' @Name VARCHAR(MAX) as select * from table").First(); " is 150.
Long Statement,Laan.Sql.Parser.Test,TestCreateProcedureStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateProcedureStatement.cs,Create_Procedure_With_Arguments_With_Brackets,The length of the statement  "            var statement = ParserFactory.Execute<CreateProcedureStatement>("create procedure dbo.v1 (@Id INT' @Name VARCHAR(MAX)) as select * from table").First(); " is 152.
Long Statement,Laan.Sql.Parser.Test,TestTableHints,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestTableHints.cs,Select_With_Hint_Without_With,The length of the statement  "            Assert.IsTrue(statement.From[0].TableHints.Where(x => x.Hint == "TABLOCK").Count() == 1' "Should be one hint - TABLOCK"); " is 121.
Long Statement,Laan.Sql.Parser.Test,TestCastFunction,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\TestCastFunction.cs,ExpressionWithLowerCast,The length of the statement  "            var tokenizer = NewTokenizer("CASE WHEN CostCenter > 0 THEN  cast(CostCenter as varchar(10)) ELSE CostCenterDesc END "); " is 120.
Long Statement,Laan.Sql.Parser.Test,TestUpdateStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestUpdateStatementParser.cs,Update_Statement_With_Where_Clause,The length of the statement  "            UpdateStatement statement = ParserFactory.Execute<UpdateStatement>( "update dbo.table set field = 1 where field <> 2" ).First(); " is 128.
Long Statement,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_StarField_Only,The length of the statement  "            CreateViewStatement sut = ParserFactory.Execute<CreateViewStatement>(string.Format("{0} view v1 as select * from table"' modificationType)).First(); " is 148.
Long Statement,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Create_View_With_Schema,The length of the statement  "            CreateViewStatement sut = ParserFactory.Execute<CreateViewStatement>("create view dbo.v1 as select * from table").First(); " is 122.
Long Statement,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_Top_10_StarField,The length of the statement  "            CreateViewStatement sut = ParserFactory.Execute<CreateViewStatement>("create view v1 as select top 10 * from table").First(); " is 125.
Long Statement,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_Top_Missing_Top_Param_StarField,The length of the statement  "                CreateViewStatement sut = ParserFactory.Execute<CreateViewStatement>("create view v1 as select top * from table").First(); " is 122.
Long Statement,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_Distinct_Top_10_StarField,The length of the statement  "            CreateViewStatement sut = ParserFactory.Execute<CreateViewStatement>("create view v1 as select distinct top 10 * from table").First(); " is 134.
Long Statement,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_Multiple_Fields,The length of the statement  "            CreateViewStatement sut = ParserFactory.Execute<CreateViewStatement>("create view v1 as select fielda' field2' fie3ld from table").First(); " is 139.
Long Statement,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_With_Aliased_Table_With_As,The length of the statement  "            CreateViewStatement sut = ParserFactory.Execute<CreateViewStatement>("create view v1 as select * from table as t").First(); " is 123.
Long Statement,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_With_Aliased_Table_Without_As,The length of the statement  "            CreateViewStatement sut = ParserFactory.Execute<CreateViewStatement>("create view v1 as select * from table t").First(); " is 120.
Long Statement,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_With_Two_Aliased_Table_With_As,The length of the statement  "            CreateViewStatement sut = ParserFactory.Execute<CreateViewStatement>("create view v1 as select * from table1 as t1' table2 as t2").First(); " is 139.
Long Statement,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_With_Two_Aliased_Table_Without_As,The length of the statement  "            CreateViewStatement sut = ParserFactory.Execute<CreateViewStatement>("create view v1 as select * from table1 t1' table2 t2 ").First(); " is 134.
Long Statement,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_Multiple_Fields_With_Table_Alias_Prefix,The length of the statement  "            //CreateViewStatement sut = ParserFactory.Execute<CreateViewStatement>( "create view something as select t1.fielda' t1.field2' t1.fie3ld from table as t1" ); " is 157.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,One_Column_With_Multi_Scope_Table_Name,The length of the statement  "            var statement = ParserFactory.Execute<CreateTableStatement>( "create table SomeDatabase.dbo.Schema.Test ( id int )" ).First(); " is 126.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Multiple_Int_Columns_With_Escaped_Names,The length of the statement  "                new FieldDefinition() { Name = "[id1]"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.Nullable }' " is 128.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Multiple_Int_Columns_With_Escaped_Names,The length of the statement  "                new FieldDefinition() { Name = "id2"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.Nullable }' " is 126.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Multiple_Int_Columns_With_Escaped_Names,The length of the statement  "                new FieldDefinition() { Name = "[id3]"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.Nullable }' " is 128.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Int_Column_With_Nullability,The length of the statement  "                new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = true' Nullability = Nullability.NotNullable }' " is 128.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Int_Column_With_Nullability,The length of the statement  "                new FieldDefinition() { Name = "id2"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.Nullable }' " is 126.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Int_Column_With_Nullability,The length of the statement  "                new FieldDefinition() { Name = "id3"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.NotNullable }' " is 129.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Columns_With_Complex_Data_Types,The length of the statement  "                new FieldDefinition() { Name = "id1"' Type = new SqlType("int")' IsPrimaryKey = true' Nullability = Nullability.NotNullable }' " is 126.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Columns_With_Complex_Data_Types,The length of the statement  "                new FieldDefinition() { Name = "id2"' Type = new SqlType("varchar") { Length = 10 } ' IsPrimaryKey = false' Nullability = Nullability.Nullable }' " is 145.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Columns_With_Complex_Data_Types,The length of the statement  "                new FieldDefinition() { Name = "id3"' Type = new SqlType("varchar")' IsPrimaryKey = false' Nullability = Nullability.NotNullable }' " is 131.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Columns_With_Complex_Data_Types,The length of the statement  "                new FieldDefinition() { Name = "id4"' Type = new SqlType("decimal") { Length = 10' Scale = 2 }' IsPrimaryKey = false' Nullability = Nullability.NotNullable }' " is 158.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Columns_With_Complex_Data_Types,The length of the statement  "                new FieldDefinition() { Name = "id5"' Type = new SqlType("decimal") { Length = 25' Scale = 3 }' IsPrimaryKey = false' Nullability = Nullability.Nullable }' " is 155.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Columns_With_Complex_Data_Types,The length of the statement  "                new FieldDefinition() { Name = "id6"' Type = new SqlType("varchar") { Max = true }' IsPrimaryKey = false' Nullability = Nullability.Nullable }' " is 143.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Primary_Key_As_Constraint,The length of the statement  "                new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = true' Nullability = Nullability.NotNullable }' " is 128.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Primary_Key_As_Constraint,The length of the statement  "                new FieldDefinition() { Name = "id2"' Type = new SqlType( "varchar" ) { Length = 10 }' IsPrimaryKey = false' Nullability = Nullability.Nullable }' " is 146.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Primary_Key_As_Constraint,The length of the statement  "                new FieldDefinition() { Name = "id3"' Type = new SqlType( "varchar" )' IsPrimaryKey = false' Nullability = Nullability.NotNullable }' " is 133.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Primary_Key_As_Constraint,The length of the statement  "                new FieldDefinition() { Name = "id4"' Type = new SqlType( "decimal" ) { Length = 10' Scale = 2 }' IsPrimaryKey = false' Nullability = Nullability.NotNullable }' " is 160.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,VarChar_Column_With_Collation,The length of the statement  "                new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.Nullable }' " is 126.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,VarChar_Column_With_Constraint,The length of the statement  "                new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.Nullable }' " is 126.
Long Statement,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,VarChar_Column_With_Constraint_As_Complex_Expressions,The length of the statement  "                new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.Nullable }' " is 126.
Long Statement,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Multiple_Fields_With_Aliases,The length of the statement  "            SelectStatement statement = ParserFactory.Execute<SelectStatement>("select field' fielda a' field2 as b' alias = fie3ld from table").First(); " is 141.
Long Statement,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Field_With_Alias_As_Identifier_With_Spaces,The length of the statement  "            SelectStatement statement = ParserFactory.Execute<SelectStatement>("select field as [an identifier with spaces] from table").First(); " is 133.
Long Statement,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Multiple_Fields_With_Table_Alias_Prefix,The length of the statement  "            SelectStatement statement = ParserFactory.Execute<SelectStatement>("select t1.fielda' t1.field2' SomeDb.dbo.fie3ld from table as t1").First(); " is 142.
Long Statement,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Ranking_Functions_Over_With_Order_By_And_Partition_By,The length of the statement  "            Assert.AreEqual(functionName + " OVER (PARTITION BY Code ORDER BY SomeNumber' OtherNumber DESC)"' rankingFunctionExpression.Value); " is 131.
Magic Number,Laan.Sql.Parser.Test,TestCommonTableExpressionStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCommonTableExpressionStatementParser.cs,Can_Select_With_Simple_Cte,The following statement contains a magic number: Assert.AreEqual(2' cte.Fields.Count);
Magic Number,Laan.Sql.Parser.Test,TestCommonTableExpressionStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCommonTableExpressionStatementParser.cs,Can_Select_Cte_With_Explicit_Columns,The following statement contains a magic number: Assert.AreEqual(2' statement.CommonTableExpressions[0].ColumnNames.Count);
Magic Number,Laan.Sql.Parser.Test,TestCommonTableExpressionStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCommonTableExpressionStatementParser.cs,Can_Select_With_Multiple_Ctes,The following statement contains a magic number: Assert.AreEqual(2' statement.CommonTableExpressions.Count);
Magic Number,Laan.Sql.Parser.Test,TestCommonTableExpressionStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCommonTableExpressionStatementParser.cs,Can_Select_With_Multiple_Ctes,The following statement contains a magic number: Assert.AreEqual(2' statement.CommonTableExpressions[0].ColumnNames.Count);
Magic Number,Laan.Sql.Parser.Test,TestCommonTableExpressionStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCommonTableExpressionStatementParser.cs,Can_Select_With_Multiple_Ctes,The following statement contains a magic number: Assert.AreEqual(3' statement.Statement.From.Count);
Magic Number,Laan.Sql.Parser.Test,TestCommonTableExpressionStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCommonTableExpressionStatementParser.cs,Can_Define_View_With_Cte,The following statement contains a magic number: Assert.AreEqual(2' statement.CommonTableExpressions.Count);
Magic Number,Laan.Sql.Parser.Test,TestCommonTableExpressionStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCommonTableExpressionStatementParser.cs,Can_Define_View_With_Cte,The following statement contains a magic number: Assert.AreEqual(2' statement.CommonTableExpressions[0].ColumnNames.Count);
Magic Number,Laan.Sql.Parser.Test,TestCommonTableExpressionStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCommonTableExpressionStatementParser.cs,Can_Define_View_With_Cte,The following statement contains a magic number: Assert.AreEqual(3' statement.Statement.From.Count);
Magic Number,Laan.Sql.Parser.Test,TestCreateProcedureStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateProcedureStatement.cs,Create_Procedure_With_Arguments_Without_Brackets,The following statement contains a magic number: Assert.AreEqual(2' statement.Arguments.Count);
Magic Number,Laan.Sql.Parser.Test,TestCreateProcedureStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateProcedureStatement.cs,Create_Procedure_With_Arguments_With_Brackets,The following statement contains a magic number: Assert.AreEqual(2' statement.Arguments.Count);
Magic Number,Laan.Sql.Parser.Test,TestExecStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestExecStatementParser.cs,Can_Execute_Simple_Sql_String,The following statement contains a magic number: Assert.AreEqual(3' statement.Arguments.Count);
Magic Number,Laan.Sql.Parser.Test,TestExecStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestExecStatementParser.cs,Can_Parse_Execute_Sql_With_Multiple_Statements_Within_The_Content_Body,The following statement contains a magic number: Assert.AreEqual(3' statement.InnerStatements.Count);
Magic Number,Laan.Sql.Parser.Test,TestExecStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestExecStatementParser.cs,Can_Parse_Execute_Sql_With_Multiple_Statements_Within_The_Content_Body,The following statement contains a magic number: Assert.AreEqual("C"' selectStatements[2].From[0].Name);
Magic Number,Laan.Sql.Parser.Test,TestExecStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestExecStatementParser.cs,Can_Execute_Multiple_Sql_Strings,The following statement contains a magic number: Assert.AreEqual(3' statements.Count);
Magic Number,Laan.Sql.Parser.Test,TestExecStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestExecStatementParser.cs,Can_Execute_Multiple_Sql_Strings,The following statement contains a magic number: Assert.AreEqual(3' statement.Arguments.Count);
Magic Number,Laan.Sql.Parser.Test,TestExecStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestExecStatementParser.cs,Can_Execute_Stored_Proc_With_Two_Named_Arguments,The following statement contains a magic number: Assert.AreEqual(2' statement.Arguments.Count);
Magic Number,Laan.Sql.Parser.Test,TestExecStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestExecStatementParser.cs,Can_Execute_Stored_Proc_With_Two_Unnamed_Arguments,The following statement contains a magic number: Assert.AreEqual(2' statement.Arguments.Count);
Magic Number,Laan.Sql.Parser.Test,TestBatchTerminators,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestBatchTerminators.cs,Statements_With_Semicolon_Terminators,The following statement contains a magic number: Assert.AreEqual( 4' statements.Count );
Magic Number,Laan.Sql.Parser.Test,TestBatchTerminators,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestBatchTerminators.cs,Statements_With_Go_Terminators,The following statement contains a magic number: Assert.AreEqual( 4' statements.Count );
Magic Number,Laan.Sql.Parser.Test,TestBatchTerminators,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestBatchTerminators.cs,Statements_With_Go_Terminators,The following statement contains a magic number: Assert.AreEqual( 2' statements.Count( st => typeof( GoTerminator ).IsAssignableFrom( st.GetType() ) ) );
Magic Number,Laan.Sql.Parser.Test,TestTransactionParsers,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestTransactionParsers.cs,Basic_Begin_Tran_With_Commit,The following statement contains a magic number: Assert.AreEqual( 3' statements.Count );
Magic Number,Laan.Sql.Parser.Test,TestTransactionParsers,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestTransactionParsers.cs,Basic_Begin_Tran_With_RollBack,The following statement contains a magic number: Assert.AreEqual( 3' statements.Count );
Magic Number,Laan.Sql.Parser.Test,TestBatchStatements,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\TestBatchStatements.cs,Implicit_Termination_Of_Statement,The following statement contains a magic number: Assert.AreEqual( 2' statements.Count );
Magic Number,Laan.Sql.Parser.Test,TestDeclareStatements,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestDeclareStatements.cs,Declare_Statement_With_Multiple_Variables,The following statement contains a magic number: Assert.AreEqual(3' statement.Definitions.Count);
Magic Number,Laan.Sql.Parser.Test,TestDeclareStatements,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestDeclareStatements.cs,Declare_Statement_With_Multiple_Variables_With_Default_Values,The following statement contains a magic number: Assert.AreEqual(3' statement.Definitions.Count);
Magic Number,Laan.Sql.Parser.Test,TestExpressionParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\TestExpressionParser.cs,Expression_Reads_Function_Expression_With_Multiple_Params,The following statement contains a magic number: Assert.AreEqual( 2' function.Arguments.Count );
Magic Number,Laan.Sql.Parser.Test,TestExpressionParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\TestExpressionParser.cs,Can_Read_Case_Switch_Expression,The following statement contains a magic number: Assert.AreEqual( 2' caseSwitch.Cases.Count );
Magic Number,Laan.Sql.Parser.Test,TestExpressionParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\TestExpressionParser.cs,Can_Read_Case_Expression_With_Nested_Case_Expression,The following statement contains a magic number: Assert.AreEqual( 2' caseSwitch.Cases.Count );
Magic Number,Laan.Sql.Parser.Test,TestExpressionParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\TestExpressionParser.cs,Can_Read_Case_When_Expression,The following statement contains a magic number: Assert.AreEqual( 2' caseWhen.Cases.Count );
Magic Number,Laan.Sql.Parser.Test,TestCreateNonClusteredIndex,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateNonClusteredIndex.cs,Can_Read_Non_Clustered_Index,The following statement contains a magic number: Assert.AreEqual( 3' statement.Columns.Count );
Magic Number,Laan.Sql.Parser.Test,TestCreateNonClusteredIndex,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateNonClusteredIndex.cs,Can_Read_Non_Clustered_Index,The following statement contains a magic number: index < 3
Magic Number,Laan.Sql.Parser.Test,TestCreateNonClusteredIndex,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateNonClusteredIndex.cs,Can_Read_Non_Clustered_Index_In_Descending_Order,The following statement contains a magic number: Assert.AreEqual( 3' statement.Columns.Count );
Magic Number,Laan.Sql.Parser.Test,TestCreateNonClusteredIndex,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateNonClusteredIndex.cs,Can_Read_Non_Clustered_Index_In_Descending_Order,The following statement contains a magic number: index < 3
Magic Number,Laan.Sql.Parser.Test,TestCreateNonClusteredIndex,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateNonClusteredIndex.cs,Can_Read_Non_Clustered_Index_Again,The following statement contains a magic number: Assert.AreEqual( 3' statement.Columns.Count );
Magic Number,Laan.Sql.Parser.Test,TestCreateNonClusteredIndex,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateNonClusteredIndex.cs,Test_Can_Read_Index_With_Multiple,The following statement contains a magic number: Assert.AreEqual( 2' statement.RelationalIndexOptions.Count' "Should be one RelationalIndexOption" );
Magic Number,Laan.Sql.Parser.Test,TestCreateNonClusteredIndex,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateNonClusteredIndex.cs,Test,The following statement contains a magic number: Assert.AreEqual( 6' statement.Columns.Count );
Magic Number,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_Multiple_Fields,The following statement contains a magic number: Assert.AreEqual(3' statement.Fields.Count);
Magic Number,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_With_Two_Aliased_Table_With_As,The following statement contains a magic number: Assert.AreEqual(2' statement.From.Count);
Magic Number,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_With_Two_Aliased_Table_Without_As,The following statement contains a magic number: Assert.AreEqual(2' statement.From.Count);
Magic Number,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual(4' statement.Fields.Count);
Magic Number,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual("field2"' statement.Fields[2].Expression.Value);
Magic Number,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual("b"' statement.Fields[2].Alias.Name);
Magic Number,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual("fie3ld"' statement.Fields[3].Expression.Value);
Magic Number,Laan.Sql.Parser.Test,TestCreateViewStatement,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateViewStatement.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual("alias"' statement.Fields[3].Alias.Name);
Magic Number,Laan.Sql.Parser.Test,TestAlterTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestAlterTable.cs,Add_Clustered_Primary_Key_With_Multiple_Columns,The following statement contains a magic number: Assert.AreEqual( 4' statement.PrimaryKeys.Count );
Magic Number,Laan.Sql.Parser.Test,TestAlterTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestAlterTable.cs,Add_Clustered_Primary_Key_With_Multiple_Columns,The following statement contains a magic number: Assert.AreEqual( "id3"' statement.PrimaryKeys[ 2 ] );
Magic Number,Laan.Sql.Parser.Test,TestAlterTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestAlterTable.cs,Add_Clustered_Primary_Key_With_Multiple_Columns,The following statement contains a magic number: Assert.AreEqual( "[Hello World]"' statement.PrimaryKeys[ 3 ] );
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Multiple_Int_Columns,The following statement contains a magic number: Assert.AreEqual( 3' statement.Fields.Count );
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Multiple_Int_Columns,The following statement contains a magic number: i < 3
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Multiple_Int_Columns_With_Escaped_Names,The following statement contains a magic number: Assert.AreEqual( 3' statement.Fields.Count );
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Columns_With_Complex_Data_Types,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType("int")' IsPrimaryKey = true' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id2"' Type = new SqlType("varchar") { Length = 10 } ' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id3"' Type = new SqlType("varchar")' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id4"' Type = new SqlType("decimal") { Length = 10' Scale = 2 }' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id5"' Type = new SqlType("decimal") { Length = 25' Scale = 3 }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id6"' Type = new SqlType("varchar") { Max = true }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Columns_With_Complex_Data_Types,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType("int")' IsPrimaryKey = true' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id2"' Type = new SqlType("varchar") { Length = 10 } ' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id3"' Type = new SqlType("varchar")' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id4"' Type = new SqlType("decimal") { Length = 10' Scale = 2 }' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id5"' Type = new SqlType("decimal") { Length = 25' Scale = 3 }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id6"' Type = new SqlType("varchar") { Max = true }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Columns_With_Complex_Data_Types,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType("int")' IsPrimaryKey = true' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id2"' Type = new SqlType("varchar") { Length = 10 } ' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id3"' Type = new SqlType("varchar")' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id4"' Type = new SqlType("decimal") { Length = 10' Scale = 2 }' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id5"' Type = new SqlType("decimal") { Length = 25' Scale = 3 }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id6"' Type = new SqlType("varchar") { Max = true }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Columns_With_Complex_Data_Types,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType("int")' IsPrimaryKey = true' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id2"' Type = new SqlType("varchar") { Length = 10 } ' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id3"' Type = new SqlType("varchar")' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id4"' Type = new SqlType("decimal") { Length = 10' Scale = 2 }' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id5"' Type = new SqlType("decimal") { Length = 25' Scale = 3 }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id6"' Type = new SqlType("varchar") { Max = true }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Columns_With_Complex_Data_Types,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType("int")' IsPrimaryKey = true' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id2"' Type = new SqlType("varchar") { Length = 10 } ' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id3"' Type = new SqlType("varchar")' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id4"' Type = new SqlType("decimal") { Length = 10' Scale = 2 }' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id5"' Type = new SqlType("decimal") { Length = 25' Scale = 3 }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id6"' Type = new SqlType("varchar") { Max = true }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Primary_Key_As_Constraint,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = true' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id2"' Type = new SqlType( "varchar" ) { Length = 10 }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id3"' Type = new SqlType( "varchar" )' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id4"' Type = new SqlType( "decimal" ) { Length = 10' Scale = 2 }' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Primary_Key_As_Constraint,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = true' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id2"' Type = new SqlType( "varchar" ) { Length = 10 }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id3"' Type = new SqlType( "varchar" )' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id4"' Type = new SqlType( "decimal" ) { Length = 10' Scale = 2 }' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Primary_Key_As_Constraint,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = true' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id2"' Type = new SqlType( "varchar" ) { Length = 10 }' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition() { Name = "id3"' Type = new SqlType( "varchar" )' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'                  new FieldDefinition() { Name = "id4"' Type = new SqlType( "decimal" ) { Length = 10' Scale = 2 }' IsPrimaryKey = false' Nullability = Nullability.NotNullable }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Int_Column_With_Identity,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition()                   {                       Name = "id1"'                       Type = new SqlType( "int" )'                       IsPrimaryKey = false'                      Nullability = Nullability.NotNullable'                       Identity = new Identity() { Start = 100' Increment = 1 }                   }'                  new FieldDefinition()                   {                       Name = "id2"' Type = new SqlType("varchar") { Length = 10 }' IsPrimaryKey = false' Nullability = Nullability.Nullable                   }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Int_Column_With_Identity,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition()                   {                       Name = "id1"'                       Type = new SqlType( "int" )'                       IsPrimaryKey = false'                      Nullability = Nullability.NotNullable'                       Identity = new Identity() { Start = 100' Increment = 1 }                   }'                  new FieldDefinition()                   {                       Name = "id2"' Type = new SqlType("varchar") { Length = 10 }' IsPrimaryKey = false' Nullability = Nullability.Nullable                   }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Int_Column_With_Identity_After_Not_Null,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition()                   {                       Name = "id1"'                       Type = new SqlType( "int" )'                       IsPrimaryKey = false'                      Nullability = Nullability.NotNullable'                       Identity = new Identity() { Start = 100' Increment = 1 }                   }'                  new FieldDefinition()                   {                       Name = "id2"' Type = new SqlType("varchar") { Length = 10 }' IsPrimaryKey = false' Nullability = Nullability.Nullable                   }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,Int_Column_With_Identity_After_Not_Null,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition()                   {                       Name = "id1"'                       Type = new SqlType( "int" )'                       IsPrimaryKey = false'                      Nullability = Nullability.NotNullable'                       Identity = new Identity() { Start = 100' Increment = 1 }                   }'                  new FieldDefinition()                   {                       Name = "id2"' Type = new SqlType("varchar") { Length = 10 }' IsPrimaryKey = false' Nullability = Nullability.Nullable                   }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,VarChar_Column_With_Collation,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition()                   {                       Name = "id2"'                       Type = new SqlType("varchar") { Length = 10' Collation = "Latin1_General_CI_AS" } '                       IsPrimaryKey = false'                       Nullability = Nullability.Nullable                   }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,VarChar_Column_With_Constraint,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition()                   {                       Name = "id2"'                       Type = new SqlType( "bit" )'                      IsPrimaryKey = false'                       Nullability = Nullability.Nullable                   }'                  new FieldDefinition()                   {                       Name = "id3"'                       Type = new SqlType("varchar") { Length = 10 }'                      IsPrimaryKey = false'                       Nullability = Nullability.NotNullable                   }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,VarChar_Column_With_Constraint_As_Complex_Expressions,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition()                   {                       Name = "id2"'                       Type = new SqlType( "bit" )'                      IsPrimaryKey = false'                       Nullability = Nullability.Nullable                   }'                  new FieldDefinition() {                       Name = "id3"'                       Type = new SqlType( "uniqueidentifier" )'                      IsPrimaryKey = false'                       Nullability = Nullability.NotNullable                   }'                  new FieldDefinition()                   {                       Name = "id4"'                       Type = new SqlType("varchar") { Length = 10 }'                      IsPrimaryKey = false'                       Nullability = Nullability.NotNullable                   }'                  new FieldDefinition()                   {                       Name = "id5"'                       Type = new SqlType("varchar") { Length = 10 }'                      IsPrimaryKey = false'                       Nullability = Nullability.NotNullable                  }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,VarChar_Column_With_Constraint_As_Complex_Expressions,The following statement contains a magic number: var expected = new[]               {                   new FieldDefinition() { Name = "id1"' Type = new SqlType( "int" )' IsPrimaryKey = false' Nullability = Nullability.Nullable }'                  new FieldDefinition()                   {                       Name = "id2"'                       Type = new SqlType( "bit" )'                      IsPrimaryKey = false'                       Nullability = Nullability.Nullable                   }'                  new FieldDefinition() {                       Name = "id3"'                       Type = new SqlType( "uniqueidentifier" )'                      IsPrimaryKey = false'                       Nullability = Nullability.NotNullable                   }'                  new FieldDefinition()                   {                       Name = "id4"'                       Type = new SqlType("varchar") { Length = 10 }'                      IsPrimaryKey = false'                       Nullability = Nullability.NotNullable                   }'                  new FieldDefinition()                   {                       Name = "id5"'                       Type = new SqlType("varchar") { Length = 10 }'                      IsPrimaryKey = false'                       Nullability = Nullability.NotNullable                  }'              };
Magic Number,Laan.Sql.Parser.Test,TestCreateTable,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestCreateTable.cs,VarChar_Column_With_Calculated_Value,The following statement contains a magic number: Assert.AreEqual( 3' statement.Fields.Count );
Magic Number,Laan.Sql.Parser.Test,TestInsertStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestInsertStatementParser.cs,Basic_Insert_Statement,The following statement contains a magic number: Assert.AreEqual(2' row.Count);
Magic Number,Laan.Sql.Parser.Test,TestInsertStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestInsertStatementParser.cs,Basic_Insert_Statement_With_Columns,The following statement contains a magic number: Assert.AreEqual(2' row.Count);
Magic Number,Laan.Sql.Parser.Test,TestInsertStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestInsertStatementParser.cs,Basic_Insert_Statement_With_Columns,The following statement contains a magic number: Assert.AreEqual(2' statement.Columns.Count);
Magic Number,Laan.Sql.Parser.Test,TestInsertStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestInsertStatementParser.cs,Insert_Statement_With_Multiple_Value_Sets,The following statement contains a magic number: Assert.AreEqual(3' statement.Values.Count);
Magic Number,Laan.Sql.Parser.Test,TestInsertStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestInsertStatementParser.cs,Insert_Statement_With_Complex_Values,The following statement contains a magic number: Assert.AreEqual(3' row.Count);
Magic Number,Laan.Sql.Parser.Test,TestInsertStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestInsertStatementParser.cs,Insert_Statement_With_Complex_Values,The following statement contains a magic number: Assert.AreEqual("to_date('16/JAN/14 05:55:24'''DD/MON/RR HH24:MI:SS')"' row[2].Value);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Multiple_Fields,The following statement contains a magic number: Assert.AreEqual(3' statement.Fields.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_With_Two_Aliased_Table_With_As,The following statement contains a magic number: Assert.AreEqual(2' statement.From.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_With_Two_Aliased_Table_Without_As,The following statement contains a magic number: Assert.AreEqual(2' statement.From.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual(4' statement.Fields.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual("field2"' statement.Fields[2].Expression.Value);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual("b"' statement.Fields[2].Alias.Name);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual(AliasType.As' statement.Fields[2].Alias.Type);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual("fie3ld"' statement.Fields[3].Expression.Value);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual("alias"' statement.Fields[3].Alias.Name);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Multiple_Fields_With_Aliases,The following statement contains a magic number: Assert.AreEqual(AliasType.Equals' statement.Fields[3].Alias.Type);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Multiple_Fields_With_Table_Alias_Prefix,The following statement contains a magic number: Assert.AreEqual(3' statement.Fields.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_With_Order_By,The following statement contains a magic number: Assert.AreEqual(2' statement.OrderBy.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_With_Group_By,The following statement contains a magic number: Assert.AreEqual(2' statement.GroupBy.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_With_Group_By_With_Having,The following statement contains a magic number: Assert.AreEqual(2' statement.GroupBy.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_With_Into_Clause,The following statement contains a magic number: Assert.AreEqual(2' statement.Fields.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_With_Multiple_From_Tables,The following statement contains a magic number: Assert.AreEqual(2' statement.From.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_With_Multiple_From_Tables_With_Joins,The following statement contains a magic number: Assert.AreEqual(2' statement.From.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Ranking_Functions_Over_With_Order_By,The following statement contains a magic number: Assert.AreEqual(2' rankingFunctionExpression.OrderBy.Count);
Magic Number,Laan.Sql.Parser.Test,TestSelectStatementParser,D:\research\architectureSmells\repos\benlaan_sqlformat\Laan.SQL.Parser.Test\Statements\TestSelectStatementParser.cs,Select_Ranking_Functions_Over_With_Order_By_And_Partition_By,The following statement contains a magic number: Assert.AreEqual(2' rankingFunctionExpression.OrderBy.Count);
