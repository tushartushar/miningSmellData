Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Laan.Sql.Formatter,CreateIndexStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\CreateIndexStatementFormatter.cs,Execute,The length of the statement  "                _sql.AppendFormat( " ( {0} )"' string.Join( "' "' _statement.RelationalIndexOptions.Select( x => FormatIndexOptions( x ) ).ToArray() ) ); " is 137.
Long Statement,Laan.Sql.Formatter,CreateViewStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\CreateViewStatementFormatter.cs,Execute,The length of the statement  "                var formatter = new CommonTableExpressionStatementFormatter(this' _sql' (CommonTableExpressionStatement)_statement.Definition); " is 127.
Long Statement,Laan.Sql.Formatter,ExecStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\ExecStatementFormatter.cs,GetArgumentFormatted,The length of the statement  "            return !String.IsNullOrEmpty(argument.Name) ? String.Format("{0} = {1}"' argument.Name' argument.Value) : argument.Value.ToString(); " is 132.
Long Statement,Laan.Sql.Formatter,SelectStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\SelectStatementFormatter.cs,FormatFields,The length of the statement  "            if ( fields.Count <= MaxInlineColumns && fields.Take( MaxInlineColumns ).All( f => f.Expression.CanInline && FitsOnRow( f.Expression.Value ) ) ) " is 144.
Magic Number,Laan.Sql.Formatter,Indentation,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\Interfaces\Indentation.cs,Indentation,The following statement contains a magic number: Indent = new string(' '' 4);
Magic Number,Laan.Sql.Formatter,BlockStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\BlockStatementFormatter.cs,Execute,The following statement contains a magic number: using (new IndentScope(this))              {                  foreach (IStatement statement in _statement.Statements)                  {                      FormatStatement(statement);                      NewLine(2);                  }              }
Magic Number,Laan.Sql.Formatter,CustomStatementFormatter<T>,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\CustomStatementFormatter.cs,FormatWhere,The following statement contains a magic number: NewLine( CanCompactFormat() ? 1 : 2 );
Magic Number,Laan.Sql.Formatter,CustomStatementFormatter<T>,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\CustomStatementFormatter.cs,FormatFrom,The following statement contains a magic number: foreach (var from in _statement.From)              {                  string fromText = !multipleFroms || from == _statement.From.First() ? "FROM " : "";                    DerivedTable derivedTable = from as DerivedTable;                  if (derivedTable != null)                  {                      NewLine();                      IndentAppend(String.Format("{0}("' fromText));                      NewLine(canCompactFormat ? 1 : 2);                        using (new IndentScope(this))                      {                          var formatter = new SelectStatementFormatter(this' _sql' derivedTable.SelectStatement);                          formatter.Execute();                      }                      NewLine(canCompactFormat ? 1 : 2);                      IndentAppend(String.Format("){0}"' from.Alias.Value));                  }                  else                  {                      bool isLast = from == _statement.From.Last();                      NewLine(1);                      IndentAppendFormat(                          "{0}{1}{2}{3}{4}{5}"'                          fromIndex > 0 ? Indent + " " : ""' fromText'                           from.Name'                           from.Alias.Value'                           FormatHints(from)'                          !isLast && !from.Joins.Any() ? Constants.Comma + "\n" : ""                      );                  }                  FormatJoins(from' multipleFroms' from == _statement.From.Last());                  fromIndex++;              }
Magic Number,Laan.Sql.Formatter,CustomStatementFormatter<T>,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\CustomStatementFormatter.cs,FormatFrom,The following statement contains a magic number: foreach (var from in _statement.From)              {                  string fromText = !multipleFroms || from == _statement.From.First() ? "FROM " : "";                    DerivedTable derivedTable = from as DerivedTable;                  if (derivedTable != null)                  {                      NewLine();                      IndentAppend(String.Format("{0}("' fromText));                      NewLine(canCompactFormat ? 1 : 2);                        using (new IndentScope(this))                      {                          var formatter = new SelectStatementFormatter(this' _sql' derivedTable.SelectStatement);                          formatter.Execute();                      }                      NewLine(canCompactFormat ? 1 : 2);                      IndentAppend(String.Format("){0}"' from.Alias.Value));                  }                  else                  {                      bool isLast = from == _statement.From.Last();                      NewLine(1);                      IndentAppendFormat(                          "{0}{1}{2}{3}{4}{5}"'                          fromIndex > 0 ? Indent + " " : ""' fromText'                           from.Name'                           from.Alias.Value'                           FormatHints(from)'                          !isLast && !from.Joins.Any() ? Constants.Comma + "\n" : ""                      );                  }                  FormatJoins(from' multipleFroms' from == _statement.From.Last());                  fromIndex++;              }
Magic Number,Laan.Sql.Formatter,FunctionExpressionFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\ExpressionFormatters\FunctionExpressionFormatter.cs,Execute,The following statement contains a magic number: if ( String.Compare( _expression.Name' Constants.Exists' true ) == 0 )              {                  StringBuilder sql = new StringBuilder();                  sql.AppendFormat( "{0}(\r\n"' _expression.Name );                  sql.AppendLine();                  using ( new IndentScope( this ) )                  {                      sql.Append( _expression.Arguments.First().FormattedValue( Offset' this ) );                  }                  sql.AppendLine();                  sql.Append( GetIndent( true ) + ")" );                  return sql.ToString();              }              else              {                  string[] args = _expression.Arguments                      .Select( arg => arg.FormattedValue( Offset' this ) )                      .ToArray();                    bool canInline = _expression.Value.Length <= 40;                  string comma = Constants.Comma + ( canInline ? " " : "" );                    StringBuilder sql = new StringBuilder();                  sql.AppendFormat( "{0}("' _expression.Name );                  using ( new IndentScope( this ) )                  {                      if ( !canInline )                          sql.Append( GetIndent( true ) );                      string separator = !canInline ? comma + GetIndent( true ) : comma;                      sql.Append( String.Join( separator' args ) );                  }                  sql.Append( ( canInline ? "" : GetIndent( true ) ) + ")" );                  return sql.ToString();              }
Magic Number,Laan.Sql.Formatter,ExecuteSqlStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\ExecuteSqlStatementFormatter.cs,Execute,The following statement contains a magic number: foreach (IStatement statement in statements)              {                  FormatStatement(statement);                  if (statement != last)                      NewLine(2);              }
Magic Number,Laan.Sql.Formatter,InsertStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\InsertStatementFormatter.cs,GetValues,The following statement contains a magic number: foreach (var item in values)              {                  var value = item.Value;                  size += value.Length;                    result.Append(value + (count > 1 ? "' " : String.Empty));                  if (size > 120)                  {                      result.Append(Environment.NewLine + Indent + Indent);                      size = 0;                      multiline = true;                  }                  count--;              }
Magic Number,Laan.Sql.Formatter,FormattingEngine,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\FormattingEngine.cs,Execute,The following statement contains a magic number: var outSql = new StringBuilder(sql.Length * 2);
Magic Number,Laan.Sql.Formatter,SelectStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\SelectStatementFormatter.cs,FormatInto,The following statement contains a magic number: if (_statement.Into != null )              {                  NewLine( 2 );                  IndentAppend( "INTO " + _statement.Into );              }
Magic Number,Laan.Sql.Formatter,SelectStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\SelectStatementFormatter.cs,FormatGroupBy,The following statement contains a magic number: if ( _statement.GroupBy.Count > 0 )              {                  bool canCompact = CanCompactFormat();                  NewLine( canCompact ? 1 : 2 );                  IndentAppend( "GROUP BY" );                  FormatFields( _statement.GroupBy' canCompact );                    if ( _statement.Having != null )                  {                      NewLine( canCompact && IsExpressionOperatorAndOr( _statement.Having ) ? 1 : 2 );                      IndentAppendFormat(                          "HAVING {0}"'                          _statement.Having.FormattedValue( Constants.Having.Length' this )                      );                  }              }
Magic Number,Laan.Sql.Formatter,SelectStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\SelectStatementFormatter.cs,FormatGroupBy,The following statement contains a magic number: if ( _statement.GroupBy.Count > 0 )              {                  bool canCompact = CanCompactFormat();                  NewLine( canCompact ? 1 : 2 );                  IndentAppend( "GROUP BY" );                  FormatFields( _statement.GroupBy' canCompact );                    if ( _statement.Having != null )                  {                      NewLine( canCompact && IsExpressionOperatorAndOr( _statement.Having ) ? 1 : 2 );                      IndentAppendFormat(                          "HAVING {0}"'                          _statement.Having.FormattedValue( Constants.Having.Length' this )                      );                  }              }
Magic Number,Laan.Sql.Formatter,SelectStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\SelectStatementFormatter.cs,FormatOrderBy,The following statement contains a magic number: if ( _statement.OrderBy.Count > 0 )              {                  bool canCompact = CanCompactFormat();                  NewLine( canCompact ? 1 : 2 );                  IndentAppend( "ORDER BY" );                  FormatFields( _statement.OrderBy' canCompact );              }
Magic Number,Laan.Sql.Formatter,SelectStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\SelectStatementFormatter.cs,FormatSetOperation,The following statement contains a magic number: NewLine( 2 );
Magic Number,Laan.Sql.Formatter,SelectStatementFormatter,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\SelectStatementFormatter.cs,FormatSetOperation,The following statement contains a magic number: NewLine( 2 );
Magic Number,Laan.Sql.Formatter,StatementFormatter<T>,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\StatementFormatter.cs,FormatDerivedJoin,The following statement contains a magic number: NewLine(2);
Magic Number,Laan.Sql.Formatter,StatementFormatter<T>,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\StatementFormatter.cs,FormatDerivedJoin,The following statement contains a magic number: NewLine(2);
Magic Number,Laan.Sql.Formatter,StatementFormatter<T>,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\StatementFormatter.cs,FormatDerivedJoin,The following statement contains a magic number: NewLine(2);
Magic Number,Laan.Sql.Formatter,StatementFormatter<T>,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\StatementFormatter.cs,FormatDerivedJoin,The following statement contains a magic number: IndentAppendFormat(                  "  ON {0}"'                  derivedJoin.Condition.FormattedValue(4' this)              );
Magic Number,Laan.Sql.Formatter,StatementFormatter<T>,C:\repos\benlaan_sqlformat\Laan.SQL.Formatter\StatementFormatters\StatementFormatter.cs,FormatJoins,The following statement contains a magic number: foreach (var join in table.Joins)              {                  if (join is DerivedJoin)                      FormatDerivedJoin((DerivedJoin)join);                  else                  {                      using (new IndentScope(this' multipleFroms))                      {                          NewLine(2);                          IndentAppend(join.Value + FormatHints(join));                          NewLine();                            bool isLastJoin = join == table.Joins.Last();                            IndentAppendFormat(                              "{0}ON {1}{2}"'                              new string(' '' join.Length - Constants.On.Length)'                              join.Condition.FormattedValue(join.Length' this)'                              (!isLastFrom && isLastJoin) ? Constants.Comma + "\n" : ""                          );                      }                  }              }
