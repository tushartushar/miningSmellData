Implementation smell,Namespace,Class,File,Method,Description
Long Method,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The method has 116 lines of code.
Complex Method,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,Cyclomatic complexity of the method is 30
Complex Method,L2TowerDatabaseGenerator,TxtIndexFileParser,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\TxtIndexFileParser.cs,TxtIndexFileParser,Cyclomatic complexity of the method is 11
Complex Method,L2TowerDatabaseGenerator,L2jParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\L2jParse.cs,Process_skill_scripts,Cyclomatic complexity of the method is 11
Complex Method,L2TowerDatabaseGenerator,TxtFileParser,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\TxtFileParser.cs,TxtFileParser,Cyclomatic complexity of the method is 14
Complex Method,L2TowerDatabaseGenerator.Tables,AbstractTable,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Tables\AbstractTable.cs,insertRecord,Cyclomatic complexity of the method is 12
Complex Method,L2TowerDatabaseGenerator.Tables,AbstractTable,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Tables\AbstractTable.cs,getRecord,Cyclomatic complexity of the method is 19
Complex Method,L2TowerDatabaseGenerator.Tables,AbstractTable,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Tables\AbstractTable.cs,updateRecord,Cyclomatic complexity of the method is 14
Complex Method,L2TowerDatabaseGenerator.Tables,AbstractTable,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Tables\AbstractTable.cs,createTable,Cyclomatic complexity of the method is 11
Long Statement,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,StartGeneration,The length of the statement  "			DirectoryInfo test = new DirectoryInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\l2jsql"); " is 126.
Long Statement,L2TowerDatabaseGenerator,MysqlManager,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\MysqlManager.cs,StartMysql,The length of the statement  "	System.Diagnostics.ProcessStartInfo p = new System.Diagnostics.ProcessStartInfo (Path.GetDirectoryName (Application.ExecutablePath) + "/mysql/mysql_start.bat"); " is 160.
Long Statement,L2TowerDatabaseGenerator,MysqlManager,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\MysqlManager.cs,StopMysql,The length of the statement  "	System.Diagnostics.ProcessStartInfo p = new System.Diagnostics.ProcessStartInfo (Path.GetDirectoryName (Application.ExecutablePath) + "/mysql/mysql_stop.bat"); " is 159.
Long Statement,L2TowerDatabaseGenerator,MysqlManager,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\MysqlManager.cs,LoadDatabase,The length of the statement  "	File.Copy (Path.GetDirectoryName (Application.ExecutablePath) + "\\database_installer.bat"' Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + name + "\\l2jsql\\database_installer.bat"' true); " is 211.
Long Statement,L2TowerDatabaseGenerator,MysqlManager,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\MysqlManager.cs,LoadDatabase,The length of the statement  "	File.Copy (Path.GetDirectoryName (Application.ExecutablePath) + "\\vars.txt"' Path.GetDirectoryName (Application.ExecutablePath) + "\\../data\\" + name + "\\l2jsql\\vars.txt"' true); " is 182.
Long Statement,L2TowerDatabaseGenerator,MysqlManager,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\MysqlManager.cs,LoadDatabase,The length of the statement  "	System.Diagnostics.ProcessStartInfo p = new System.Diagnostics.ProcessStartInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + name + "\\l2jsql\\database_installer.bat"); " is 194.
Long Statement,L2TowerDatabaseGenerator,MysqlManager,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\MysqlManager.cs,LoadDatabase,The length of the statement  "	File.Delete (Path.GetDirectoryName (Application.ExecutablePath) + "/../data/" + name + "/l2jsql/database_installer.bat"); " is 121.
Long Statement,L2TowerDatabaseGenerator.Tables,AbstractTable,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Tables\AbstractTable.cs,getRecord,The length of the statement  "		SqliteCommand sql = new SqliteCommand ("SELECT " + fields + " FROM " + ja.Name + " WHERE " + where' SqliteManager.connection); " is 126.
Empty Catch Block,L2TowerDatabaseGenerator,SqliteManager,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SqliteManager.cs,CloseDatabase,The method has an empty catch block.
Empty Catch Block,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,Form1_FormClosed,The method has an empty catch block.
Empty Catch Block,L2TowerDatabaseGenerator,MysqlManager,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\MysqlManager.cs,CloseDatabase,The method has an empty catch block.
Empty Catch Block,L2TowerDatabaseGenerator,Program,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,L2TowerDatabaseGenerator.Tables,AbstractTable,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Tables\AbstractTable.cs,createTable,The method has an empty catch block.
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: try {  	for (int i = 1; i <= levels; ++i) {  		baseItem.skillLvl = i;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "set") {  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					value = tables [value] [i - 1];  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "for") {  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								value = tables [value] [i - 1];  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		items.Add (baseItem);  		baseItem = Clone<SkillTableItem> (baseItem);  	}  	//enchants...  	SkillTableItem backup = Clone<SkillTableItem> (baseItem);  	for (int i = 1; i <= 20; ++i)//maximum 20 enchants  	 {  		int level = 0;  		while (level < 100) {  			level++;  			baseItem = Clone<SkillTableItem> (backup);  			baseItem.skillLvl = i * 100 + level;  			bool wasEnchant = false;  			foreach (XmlNode ns in node.ChildNodes) {  				if (ns.Name == "enchant" + i) {  					wasEnchant = true;  					string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  					if (value.Length > 0 && tables.ContainsKey (value)) {  						if (level - 1 < tables [value].Length) {  							value = tables [value] [level - 1];  						}  						else {  							level = 100;  							break;  						}  					}  					baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  				}  				else if (ns.Name == "enchant" + i + "for") {  					wasEnchant = true;  					foreach (XmlNode ne in ns.ChildNodes) {  						if (ne.Name == "effect") {  							SkillEffectItem effect = new SkillEffectItem ();  							foreach (XmlNode na in ne.Attributes) {  								string value = na.Value.Trim ();  								if (value.Length > 0 && tables.ContainsKey (value)) {  									if (level - 1 < tables [value].Length) {  										value = tables [value] [level - 1];  									}  									else {  										level = 100;  										break;  									}  								}  								effect.values.Add (na.Name.Trim ()' value);  							}  							if (effect.values.Count > 0) {  								baseItem.effects [effect.getName ()] = effect;  							}  						}  					}  				}  			}  			if (!wasEnchant) {  				level = 100;  			}  			if (level < 100) {  				items.Add (baseItem);  			}  		}  	}  }  catch (Exception e) {  	MessageBox.Show (baseItem.name);  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: try {  	for (int i = 1; i <= levels; ++i) {  		baseItem.skillLvl = i;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "set") {  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					value = tables [value] [i - 1];  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "for") {  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								value = tables [value] [i - 1];  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		items.Add (baseItem);  		baseItem = Clone<SkillTableItem> (baseItem);  	}  	//enchants...  	SkillTableItem backup = Clone<SkillTableItem> (baseItem);  	for (int i = 1; i <= 20; ++i)//maximum 20 enchants  	 {  		int level = 0;  		while (level < 100) {  			level++;  			baseItem = Clone<SkillTableItem> (backup);  			baseItem.skillLvl = i * 100 + level;  			bool wasEnchant = false;  			foreach (XmlNode ns in node.ChildNodes) {  				if (ns.Name == "enchant" + i) {  					wasEnchant = true;  					string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  					if (value.Length > 0 && tables.ContainsKey (value)) {  						if (level - 1 < tables [value].Length) {  							value = tables [value] [level - 1];  						}  						else {  							level = 100;  							break;  						}  					}  					baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  				}  				else if (ns.Name == "enchant" + i + "for") {  					wasEnchant = true;  					foreach (XmlNode ne in ns.ChildNodes) {  						if (ne.Name == "effect") {  							SkillEffectItem effect = new SkillEffectItem ();  							foreach (XmlNode na in ne.Attributes) {  								string value = na.Value.Trim ();  								if (value.Length > 0 && tables.ContainsKey (value)) {  									if (level - 1 < tables [value].Length) {  										value = tables [value] [level - 1];  									}  									else {  										level = 100;  										break;  									}  								}  								effect.values.Add (na.Name.Trim ()' value);  							}  							if (effect.values.Count > 0) {  								baseItem.effects [effect.getName ()] = effect;  							}  						}  					}  				}  			}  			if (!wasEnchant) {  				level = 100;  			}  			if (level < 100) {  				items.Add (baseItem);  			}  		}  	}  }  catch (Exception e) {  	MessageBox.Show (baseItem.name);  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: try {  	for (int i = 1; i <= levels; ++i) {  		baseItem.skillLvl = i;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "set") {  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					value = tables [value] [i - 1];  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "for") {  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								value = tables [value] [i - 1];  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		items.Add (baseItem);  		baseItem = Clone<SkillTableItem> (baseItem);  	}  	//enchants...  	SkillTableItem backup = Clone<SkillTableItem> (baseItem);  	for (int i = 1; i <= 20; ++i)//maximum 20 enchants  	 {  		int level = 0;  		while (level < 100) {  			level++;  			baseItem = Clone<SkillTableItem> (backup);  			baseItem.skillLvl = i * 100 + level;  			bool wasEnchant = false;  			foreach (XmlNode ns in node.ChildNodes) {  				if (ns.Name == "enchant" + i) {  					wasEnchant = true;  					string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  					if (value.Length > 0 && tables.ContainsKey (value)) {  						if (level - 1 < tables [value].Length) {  							value = tables [value] [level - 1];  						}  						else {  							level = 100;  							break;  						}  					}  					baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  				}  				else if (ns.Name == "enchant" + i + "for") {  					wasEnchant = true;  					foreach (XmlNode ne in ns.ChildNodes) {  						if (ne.Name == "effect") {  							SkillEffectItem effect = new SkillEffectItem ();  							foreach (XmlNode na in ne.Attributes) {  								string value = na.Value.Trim ();  								if (value.Length > 0 && tables.ContainsKey (value)) {  									if (level - 1 < tables [value].Length) {  										value = tables [value] [level - 1];  									}  									else {  										level = 100;  										break;  									}  								}  								effect.values.Add (na.Name.Trim ()' value);  							}  							if (effect.values.Count > 0) {  								baseItem.effects [effect.getName ()] = effect;  							}  						}  					}  				}  			}  			if (!wasEnchant) {  				level = 100;  			}  			if (level < 100) {  				items.Add (baseItem);  			}  		}  	}  }  catch (Exception e) {  	MessageBox.Show (baseItem.name);  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: try {  	for (int i = 1; i <= levels; ++i) {  		baseItem.skillLvl = i;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "set") {  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					value = tables [value] [i - 1];  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "for") {  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								value = tables [value] [i - 1];  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		items.Add (baseItem);  		baseItem = Clone<SkillTableItem> (baseItem);  	}  	//enchants...  	SkillTableItem backup = Clone<SkillTableItem> (baseItem);  	for (int i = 1; i <= 20; ++i)//maximum 20 enchants  	 {  		int level = 0;  		while (level < 100) {  			level++;  			baseItem = Clone<SkillTableItem> (backup);  			baseItem.skillLvl = i * 100 + level;  			bool wasEnchant = false;  			foreach (XmlNode ns in node.ChildNodes) {  				if (ns.Name == "enchant" + i) {  					wasEnchant = true;  					string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  					if (value.Length > 0 && tables.ContainsKey (value)) {  						if (level - 1 < tables [value].Length) {  							value = tables [value] [level - 1];  						}  						else {  							level = 100;  							break;  						}  					}  					baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  				}  				else if (ns.Name == "enchant" + i + "for") {  					wasEnchant = true;  					foreach (XmlNode ne in ns.ChildNodes) {  						if (ne.Name == "effect") {  							SkillEffectItem effect = new SkillEffectItem ();  							foreach (XmlNode na in ne.Attributes) {  								string value = na.Value.Trim ();  								if (value.Length > 0 && tables.ContainsKey (value)) {  									if (level - 1 < tables [value].Length) {  										value = tables [value] [level - 1];  									}  									else {  										level = 100;  										break;  									}  								}  								effect.values.Add (na.Name.Trim ()' value);  							}  							if (effect.values.Count > 0) {  								baseItem.effects [effect.getName ()] = effect;  							}  						}  					}  				}  			}  			if (!wasEnchant) {  				level = 100;  			}  			if (level < 100) {  				items.Add (baseItem);  			}  		}  	}  }  catch (Exception e) {  	MessageBox.Show (baseItem.name);  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: try {  	for (int i = 1; i <= levels; ++i) {  		baseItem.skillLvl = i;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "set") {  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					value = tables [value] [i - 1];  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "for") {  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								value = tables [value] [i - 1];  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		items.Add (baseItem);  		baseItem = Clone<SkillTableItem> (baseItem);  	}  	//enchants...  	SkillTableItem backup = Clone<SkillTableItem> (baseItem);  	for (int i = 1; i <= 20; ++i)//maximum 20 enchants  	 {  		int level = 0;  		while (level < 100) {  			level++;  			baseItem = Clone<SkillTableItem> (backup);  			baseItem.skillLvl = i * 100 + level;  			bool wasEnchant = false;  			foreach (XmlNode ns in node.ChildNodes) {  				if (ns.Name == "enchant" + i) {  					wasEnchant = true;  					string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  					if (value.Length > 0 && tables.ContainsKey (value)) {  						if (level - 1 < tables [value].Length) {  							value = tables [value] [level - 1];  						}  						else {  							level = 100;  							break;  						}  					}  					baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  				}  				else if (ns.Name == "enchant" + i + "for") {  					wasEnchant = true;  					foreach (XmlNode ne in ns.ChildNodes) {  						if (ne.Name == "effect") {  							SkillEffectItem effect = new SkillEffectItem ();  							foreach (XmlNode na in ne.Attributes) {  								string value = na.Value.Trim ();  								if (value.Length > 0 && tables.ContainsKey (value)) {  									if (level - 1 < tables [value].Length) {  										value = tables [value] [level - 1];  									}  									else {  										level = 100;  										break;  									}  								}  								effect.values.Add (na.Name.Trim ()' value);  							}  							if (effect.values.Count > 0) {  								baseItem.effects [effect.getName ()] = effect;  							}  						}  					}  				}  			}  			if (!wasEnchant) {  				level = 100;  			}  			if (level < 100) {  				items.Add (baseItem);  			}  		}  	}  }  catch (Exception e) {  	MessageBox.Show (baseItem.name);  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: try {  	for (int i = 1; i <= levels; ++i) {  		baseItem.skillLvl = i;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "set") {  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					value = tables [value] [i - 1];  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "for") {  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								value = tables [value] [i - 1];  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		items.Add (baseItem);  		baseItem = Clone<SkillTableItem> (baseItem);  	}  	//enchants...  	SkillTableItem backup = Clone<SkillTableItem> (baseItem);  	for (int i = 1; i <= 20; ++i)//maximum 20 enchants  	 {  		int level = 0;  		while (level < 100) {  			level++;  			baseItem = Clone<SkillTableItem> (backup);  			baseItem.skillLvl = i * 100 + level;  			bool wasEnchant = false;  			foreach (XmlNode ns in node.ChildNodes) {  				if (ns.Name == "enchant" + i) {  					wasEnchant = true;  					string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  					if (value.Length > 0 && tables.ContainsKey (value)) {  						if (level - 1 < tables [value].Length) {  							value = tables [value] [level - 1];  						}  						else {  							level = 100;  							break;  						}  					}  					baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  				}  				else if (ns.Name == "enchant" + i + "for") {  					wasEnchant = true;  					foreach (XmlNode ne in ns.ChildNodes) {  						if (ne.Name == "effect") {  							SkillEffectItem effect = new SkillEffectItem ();  							foreach (XmlNode na in ne.Attributes) {  								string value = na.Value.Trim ();  								if (value.Length > 0 && tables.ContainsKey (value)) {  									if (level - 1 < tables [value].Length) {  										value = tables [value] [level - 1];  									}  									else {  										level = 100;  										break;  									}  								}  								effect.values.Add (na.Name.Trim ()' value);  							}  							if (effect.values.Count > 0) {  								baseItem.effects [effect.getName ()] = effect;  							}  						}  					}  				}  			}  			if (!wasEnchant) {  				level = 100;  			}  			if (level < 100) {  				items.Add (baseItem);  			}  		}  	}  }  catch (Exception e) {  	MessageBox.Show (baseItem.name);  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: try {  	for (int i = 1; i <= levels; ++i) {  		baseItem.skillLvl = i;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "set") {  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					value = tables [value] [i - 1];  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "for") {  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								value = tables [value] [i - 1];  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		items.Add (baseItem);  		baseItem = Clone<SkillTableItem> (baseItem);  	}  	//enchants...  	SkillTableItem backup = Clone<SkillTableItem> (baseItem);  	for (int i = 1; i <= 20; ++i)//maximum 20 enchants  	 {  		int level = 0;  		while (level < 100) {  			level++;  			baseItem = Clone<SkillTableItem> (backup);  			baseItem.skillLvl = i * 100 + level;  			bool wasEnchant = false;  			foreach (XmlNode ns in node.ChildNodes) {  				if (ns.Name == "enchant" + i) {  					wasEnchant = true;  					string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  					if (value.Length > 0 && tables.ContainsKey (value)) {  						if (level - 1 < tables [value].Length) {  							value = tables [value] [level - 1];  						}  						else {  							level = 100;  							break;  						}  					}  					baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  				}  				else if (ns.Name == "enchant" + i + "for") {  					wasEnchant = true;  					foreach (XmlNode ne in ns.ChildNodes) {  						if (ne.Name == "effect") {  							SkillEffectItem effect = new SkillEffectItem ();  							foreach (XmlNode na in ne.Attributes) {  								string value = na.Value.Trim ();  								if (value.Length > 0 && tables.ContainsKey (value)) {  									if (level - 1 < tables [value].Length) {  										value = tables [value] [level - 1];  									}  									else {  										level = 100;  										break;  									}  								}  								effect.values.Add (na.Name.Trim ()' value);  							}  							if (effect.values.Count > 0) {  								baseItem.effects [effect.getName ()] = effect;  							}  						}  					}  				}  			}  			if (!wasEnchant) {  				level = 100;  			}  			if (level < 100) {  				items.Add (baseItem);  			}  		}  	}  }  catch (Exception e) {  	MessageBox.Show (baseItem.name);  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: for (int i = 1; i <= 20; ++i)//maximum 20 enchants   {  	int level = 0;  	while (level < 100) {  		level++;  		baseItem = Clone<SkillTableItem> (backup);  		baseItem.skillLvl = i * 100 + level;  		bool wasEnchant = false;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "enchant" + i) {  				wasEnchant = true;  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					if (level - 1 < tables [value].Length) {  						value = tables [value] [level - 1];  					}  					else {  						level = 100;  						break;  					}  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "enchant" + i + "for") {  				wasEnchant = true;  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								if (level - 1 < tables [value].Length) {  									value = tables [value] [level - 1];  								}  								else {  									level = 100;  									break;  								}  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		if (!wasEnchant) {  			level = 100;  		}  		if (level < 100) {  			items.Add (baseItem);  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: for (int i = 1; i <= 20; ++i)//maximum 20 enchants   {  	int level = 0;  	while (level < 100) {  		level++;  		baseItem = Clone<SkillTableItem> (backup);  		baseItem.skillLvl = i * 100 + level;  		bool wasEnchant = false;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "enchant" + i) {  				wasEnchant = true;  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					if (level - 1 < tables [value].Length) {  						value = tables [value] [level - 1];  					}  					else {  						level = 100;  						break;  					}  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "enchant" + i + "for") {  				wasEnchant = true;  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								if (level - 1 < tables [value].Length) {  									value = tables [value] [level - 1];  								}  								else {  									level = 100;  									break;  								}  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		if (!wasEnchant) {  			level = 100;  		}  		if (level < 100) {  			items.Add (baseItem);  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: for (int i = 1; i <= 20; ++i)//maximum 20 enchants   {  	int level = 0;  	while (level < 100) {  		level++;  		baseItem = Clone<SkillTableItem> (backup);  		baseItem.skillLvl = i * 100 + level;  		bool wasEnchant = false;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "enchant" + i) {  				wasEnchant = true;  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					if (level - 1 < tables [value].Length) {  						value = tables [value] [level - 1];  					}  					else {  						level = 100;  						break;  					}  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "enchant" + i + "for") {  				wasEnchant = true;  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								if (level - 1 < tables [value].Length) {  									value = tables [value] [level - 1];  								}  								else {  									level = 100;  									break;  								}  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		if (!wasEnchant) {  			level = 100;  		}  		if (level < 100) {  			items.Add (baseItem);  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: for (int i = 1; i <= 20; ++i)//maximum 20 enchants   {  	int level = 0;  	while (level < 100) {  		level++;  		baseItem = Clone<SkillTableItem> (backup);  		baseItem.skillLvl = i * 100 + level;  		bool wasEnchant = false;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "enchant" + i) {  				wasEnchant = true;  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					if (level - 1 < tables [value].Length) {  						value = tables [value] [level - 1];  					}  					else {  						level = 100;  						break;  					}  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "enchant" + i + "for") {  				wasEnchant = true;  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								if (level - 1 < tables [value].Length) {  									value = tables [value] [level - 1];  								}  								else {  									level = 100;  									break;  								}  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		if (!wasEnchant) {  			level = 100;  		}  		if (level < 100) {  			items.Add (baseItem);  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: for (int i = 1; i <= 20; ++i)//maximum 20 enchants   {  	int level = 0;  	while (level < 100) {  		level++;  		baseItem = Clone<SkillTableItem> (backup);  		baseItem.skillLvl = i * 100 + level;  		bool wasEnchant = false;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "enchant" + i) {  				wasEnchant = true;  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					if (level - 1 < tables [value].Length) {  						value = tables [value] [level - 1];  					}  					else {  						level = 100;  						break;  					}  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "enchant" + i + "for") {  				wasEnchant = true;  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								if (level - 1 < tables [value].Length) {  									value = tables [value] [level - 1];  								}  								else {  									level = 100;  									break;  								}  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		if (!wasEnchant) {  			level = 100;  		}  		if (level < 100) {  			items.Add (baseItem);  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: for (int i = 1; i <= 20; ++i)//maximum 20 enchants   {  	int level = 0;  	while (level < 100) {  		level++;  		baseItem = Clone<SkillTableItem> (backup);  		baseItem.skillLvl = i * 100 + level;  		bool wasEnchant = false;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "enchant" + i) {  				wasEnchant = true;  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					if (level - 1 < tables [value].Length) {  						value = tables [value] [level - 1];  					}  					else {  						level = 100;  						break;  					}  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "enchant" + i + "for") {  				wasEnchant = true;  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								if (level - 1 < tables [value].Length) {  									value = tables [value] [level - 1];  								}  								else {  									level = 100;  									break;  								}  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		if (!wasEnchant) {  			level = 100;  		}  		if (level < 100) {  			items.Add (baseItem);  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: for (int i = 1; i <= 20; ++i)//maximum 20 enchants   {  	int level = 0;  	while (level < 100) {  		level++;  		baseItem = Clone<SkillTableItem> (backup);  		baseItem.skillLvl = i * 100 + level;  		bool wasEnchant = false;  		foreach (XmlNode ns in node.ChildNodes) {  			if (ns.Name == "enchant" + i) {  				wasEnchant = true;  				string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					if (level - 1 < tables [value].Length) {  						value = tables [value] [level - 1];  					}  					else {  						level = 100;  						break;  					}  				}  				baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  			}  			else if (ns.Name == "enchant" + i + "for") {  				wasEnchant = true;  				foreach (XmlNode ne in ns.ChildNodes) {  					if (ne.Name == "effect") {  						SkillEffectItem effect = new SkillEffectItem ();  						foreach (XmlNode na in ne.Attributes) {  							string value = na.Value.Trim ();  							if (value.Length > 0 && tables.ContainsKey (value)) {  								if (level - 1 < tables [value].Length) {  									value = tables [value] [level - 1];  								}  								else {  									level = 100;  									break;  								}  							}  							effect.values.Add (na.Name.Trim ()' value);  						}  						if (effect.values.Count > 0) {  							baseItem.effects [effect.getName ()] = effect;  						}  					}  				}  			}  		}  		if (!wasEnchant) {  			level = 100;  		}  		if (level < 100) {  			items.Add (baseItem);  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: while (level < 100) {  	level++;  	baseItem = Clone<SkillTableItem> (backup);  	baseItem.skillLvl = i * 100 + level;  	bool wasEnchant = false;  	foreach (XmlNode ns in node.ChildNodes) {  		if (ns.Name == "enchant" + i) {  			wasEnchant = true;  			string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  			if (value.Length > 0 && tables.ContainsKey (value)) {  				if (level - 1 < tables [value].Length) {  					value = tables [value] [level - 1];  				}  				else {  					level = 100;  					break;  				}  			}  			baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  		}  		else if (ns.Name == "enchant" + i + "for") {  			wasEnchant = true;  			foreach (XmlNode ne in ns.ChildNodes) {  				if (ne.Name == "effect") {  					SkillEffectItem effect = new SkillEffectItem ();  					foreach (XmlNode na in ne.Attributes) {  						string value = na.Value.Trim ();  						if (value.Length > 0 && tables.ContainsKey (value)) {  							if (level - 1 < tables [value].Length) {  								value = tables [value] [level - 1];  							}  							else {  								level = 100;  								break;  							}  						}  						effect.values.Add (na.Name.Trim ()' value);  					}  					if (effect.values.Count > 0) {  						baseItem.effects [effect.getName ()] = effect;  					}  				}  			}  		}  	}  	if (!wasEnchant) {  		level = 100;  	}  	if (level < 100) {  		items.Add (baseItem);  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: while (level < 100) {  	level++;  	baseItem = Clone<SkillTableItem> (backup);  	baseItem.skillLvl = i * 100 + level;  	bool wasEnchant = false;  	foreach (XmlNode ns in node.ChildNodes) {  		if (ns.Name == "enchant" + i) {  			wasEnchant = true;  			string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  			if (value.Length > 0 && tables.ContainsKey (value)) {  				if (level - 1 < tables [value].Length) {  					value = tables [value] [level - 1];  				}  				else {  					level = 100;  					break;  				}  			}  			baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  		}  		else if (ns.Name == "enchant" + i + "for") {  			wasEnchant = true;  			foreach (XmlNode ne in ns.ChildNodes) {  				if (ne.Name == "effect") {  					SkillEffectItem effect = new SkillEffectItem ();  					foreach (XmlNode na in ne.Attributes) {  						string value = na.Value.Trim ();  						if (value.Length > 0 && tables.ContainsKey (value)) {  							if (level - 1 < tables [value].Length) {  								value = tables [value] [level - 1];  							}  							else {  								level = 100;  								break;  							}  						}  						effect.values.Add (na.Name.Trim ()' value);  					}  					if (effect.values.Count > 0) {  						baseItem.effects [effect.getName ()] = effect;  					}  				}  			}  		}  	}  	if (!wasEnchant) {  		level = 100;  	}  	if (level < 100) {  		items.Add (baseItem);  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: while (level < 100) {  	level++;  	baseItem = Clone<SkillTableItem> (backup);  	baseItem.skillLvl = i * 100 + level;  	bool wasEnchant = false;  	foreach (XmlNode ns in node.ChildNodes) {  		if (ns.Name == "enchant" + i) {  			wasEnchant = true;  			string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  			if (value.Length > 0 && tables.ContainsKey (value)) {  				if (level - 1 < tables [value].Length) {  					value = tables [value] [level - 1];  				}  				else {  					level = 100;  					break;  				}  			}  			baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  		}  		else if (ns.Name == "enchant" + i + "for") {  			wasEnchant = true;  			foreach (XmlNode ne in ns.ChildNodes) {  				if (ne.Name == "effect") {  					SkillEffectItem effect = new SkillEffectItem ();  					foreach (XmlNode na in ne.Attributes) {  						string value = na.Value.Trim ();  						if (value.Length > 0 && tables.ContainsKey (value)) {  							if (level - 1 < tables [value].Length) {  								value = tables [value] [level - 1];  							}  							else {  								level = 100;  								break;  							}  						}  						effect.values.Add (na.Name.Trim ()' value);  					}  					if (effect.values.Count > 0) {  						baseItem.effects [effect.getName ()] = effect;  					}  				}  			}  		}  	}  	if (!wasEnchant) {  		level = 100;  	}  	if (level < 100) {  		items.Add (baseItem);  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: while (level < 100) {  	level++;  	baseItem = Clone<SkillTableItem> (backup);  	baseItem.skillLvl = i * 100 + level;  	bool wasEnchant = false;  	foreach (XmlNode ns in node.ChildNodes) {  		if (ns.Name == "enchant" + i) {  			wasEnchant = true;  			string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  			if (value.Length > 0 && tables.ContainsKey (value)) {  				if (level - 1 < tables [value].Length) {  					value = tables [value] [level - 1];  				}  				else {  					level = 100;  					break;  				}  			}  			baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  		}  		else if (ns.Name == "enchant" + i + "for") {  			wasEnchant = true;  			foreach (XmlNode ne in ns.ChildNodes) {  				if (ne.Name == "effect") {  					SkillEffectItem effect = new SkillEffectItem ();  					foreach (XmlNode na in ne.Attributes) {  						string value = na.Value.Trim ();  						if (value.Length > 0 && tables.ContainsKey (value)) {  							if (level - 1 < tables [value].Length) {  								value = tables [value] [level - 1];  							}  							else {  								level = 100;  								break;  							}  						}  						effect.values.Add (na.Name.Trim ()' value);  					}  					if (effect.values.Count > 0) {  						baseItem.effects [effect.getName ()] = effect;  					}  				}  			}  		}  	}  	if (!wasEnchant) {  		level = 100;  	}  	if (level < 100) {  		items.Add (baseItem);  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: while (level < 100) {  	level++;  	baseItem = Clone<SkillTableItem> (backup);  	baseItem.skillLvl = i * 100 + level;  	bool wasEnchant = false;  	foreach (XmlNode ns in node.ChildNodes) {  		if (ns.Name == "enchant" + i) {  			wasEnchant = true;  			string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  			if (value.Length > 0 && tables.ContainsKey (value)) {  				if (level - 1 < tables [value].Length) {  					value = tables [value] [level - 1];  				}  				else {  					level = 100;  					break;  				}  			}  			baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  		}  		else if (ns.Name == "enchant" + i + "for") {  			wasEnchant = true;  			foreach (XmlNode ne in ns.ChildNodes) {  				if (ne.Name == "effect") {  					SkillEffectItem effect = new SkillEffectItem ();  					foreach (XmlNode na in ne.Attributes) {  						string value = na.Value.Trim ();  						if (value.Length > 0 && tables.ContainsKey (value)) {  							if (level - 1 < tables [value].Length) {  								value = tables [value] [level - 1];  							}  							else {  								level = 100;  								break;  							}  						}  						effect.values.Add (na.Name.Trim ()' value);  					}  					if (effect.values.Count > 0) {  						baseItem.effects [effect.getName ()] = effect;  					}  				}  			}  		}  	}  	if (!wasEnchant) {  		level = 100;  	}  	if (level < 100) {  		items.Add (baseItem);  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: while (level < 100) {  	level++;  	baseItem = Clone<SkillTableItem> (backup);  	baseItem.skillLvl = i * 100 + level;  	bool wasEnchant = false;  	foreach (XmlNode ns in node.ChildNodes) {  		if (ns.Name == "enchant" + i) {  			wasEnchant = true;  			string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  			if (value.Length > 0 && tables.ContainsKey (value)) {  				if (level - 1 < tables [value].Length) {  					value = tables [value] [level - 1];  				}  				else {  					level = 100;  					break;  				}  			}  			baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  		}  		else if (ns.Name == "enchant" + i + "for") {  			wasEnchant = true;  			foreach (XmlNode ne in ns.ChildNodes) {  				if (ne.Name == "effect") {  					SkillEffectItem effect = new SkillEffectItem ();  					foreach (XmlNode na in ne.Attributes) {  						string value = na.Value.Trim ();  						if (value.Length > 0 && tables.ContainsKey (value)) {  							if (level - 1 < tables [value].Length) {  								value = tables [value] [level - 1];  							}  							else {  								level = 100;  								break;  							}  						}  						effect.values.Add (na.Name.Trim ()' value);  					}  					if (effect.values.Count > 0) {  						baseItem.effects [effect.getName ()] = effect;  					}  				}  			}  		}  	}  	if (!wasEnchant) {  		level = 100;  	}  	if (level < 100) {  		items.Add (baseItem);  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: baseItem.skillLvl = i * 100 + level;  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: foreach (XmlNode ns in node.ChildNodes) {  	if (ns.Name == "enchant" + i) {  		wasEnchant = true;  		string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  		if (value.Length > 0 && tables.ContainsKey (value)) {  			if (level - 1 < tables [value].Length) {  				value = tables [value] [level - 1];  			}  			else {  				level = 100;  				break;  			}  		}  		baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  	}  	else if (ns.Name == "enchant" + i + "for") {  		wasEnchant = true;  		foreach (XmlNode ne in ns.ChildNodes) {  			if (ne.Name == "effect") {  				SkillEffectItem effect = new SkillEffectItem ();  				foreach (XmlNode na in ne.Attributes) {  					string value = na.Value.Trim ();  					if (value.Length > 0 && tables.ContainsKey (value)) {  						if (level - 1 < tables [value].Length) {  							value = tables [value] [level - 1];  						}  						else {  							level = 100;  							break;  						}  					}  					effect.values.Add (na.Name.Trim ()' value);  				}  				if (effect.values.Count > 0) {  					baseItem.effects [effect.getName ()] = effect;  				}  			}  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: foreach (XmlNode ns in node.ChildNodes) {  	if (ns.Name == "enchant" + i) {  		wasEnchant = true;  		string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  		if (value.Length > 0 && tables.ContainsKey (value)) {  			if (level - 1 < tables [value].Length) {  				value = tables [value] [level - 1];  			}  			else {  				level = 100;  				break;  			}  		}  		baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  	}  	else if (ns.Name == "enchant" + i + "for") {  		wasEnchant = true;  		foreach (XmlNode ne in ns.ChildNodes) {  			if (ne.Name == "effect") {  				SkillEffectItem effect = new SkillEffectItem ();  				foreach (XmlNode na in ne.Attributes) {  					string value = na.Value.Trim ();  					if (value.Length > 0 && tables.ContainsKey (value)) {  						if (level - 1 < tables [value].Length) {  							value = tables [value] [level - 1];  						}  						else {  							level = 100;  							break;  						}  					}  					effect.values.Add (na.Name.Trim ()' value);  				}  				if (effect.values.Count > 0) {  					baseItem.effects [effect.getName ()] = effect;  				}  			}  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: if (ns.Name == "enchant" + i) {  	wasEnchant = true;  	string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  	if (value.Length > 0 && tables.ContainsKey (value)) {  		if (level - 1 < tables [value].Length) {  			value = tables [value] [level - 1];  		}  		else {  			level = 100;  			break;  		}  	}  	baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  }  else if (ns.Name == "enchant" + i + "for") {  	wasEnchant = true;  	foreach (XmlNode ne in ns.ChildNodes) {  		if (ne.Name == "effect") {  			SkillEffectItem effect = new SkillEffectItem ();  			foreach (XmlNode na in ne.Attributes) {  				string value = na.Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					if (level - 1 < tables [value].Length) {  						value = tables [value] [level - 1];  					}  					else {  						level = 100;  						break;  					}  				}  				effect.values.Add (na.Name.Trim ()' value);  			}  			if (effect.values.Count > 0) {  				baseItem.effects [effect.getName ()] = effect;  			}  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: if (ns.Name == "enchant" + i) {  	wasEnchant = true;  	string value = ns.Attributes.GetNamedItem ("val").Value.Trim ();  	if (value.Length > 0 && tables.ContainsKey (value)) {  		if (level - 1 < tables [value].Length) {  			value = tables [value] [level - 1];  		}  		else {  			level = 100;  			break;  		}  	}  	baseItem.settings [ns.Attributes.GetNamedItem ("name").Value.Trim ()] = value;  }  else if (ns.Name == "enchant" + i + "for") {  	wasEnchant = true;  	foreach (XmlNode ne in ns.ChildNodes) {  		if (ne.Name == "effect") {  			SkillEffectItem effect = new SkillEffectItem ();  			foreach (XmlNode na in ne.Attributes) {  				string value = na.Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					if (level - 1 < tables [value].Length) {  						value = tables [value] [level - 1];  					}  					else {  						level = 100;  						break;  					}  				}  				effect.values.Add (na.Name.Trim ()' value);  			}  			if (effect.values.Count > 0) {  				baseItem.effects [effect.getName ()] = effect;  			}  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: if (value.Length > 0 && tables.ContainsKey (value)) {  	if (level - 1 < tables [value].Length) {  		value = tables [value] [level - 1];  	}  	else {  		level = 100;  		break;  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: if (level - 1 < tables [value].Length) {  	value = tables [value] [level - 1];  }  else {  	level = 100;  	break;  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: level = 100;  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: if (ns.Name == "enchant" + i + "for") {  	wasEnchant = true;  	foreach (XmlNode ne in ns.ChildNodes) {  		if (ne.Name == "effect") {  			SkillEffectItem effect = new SkillEffectItem ();  			foreach (XmlNode na in ne.Attributes) {  				string value = na.Value.Trim ();  				if (value.Length > 0 && tables.ContainsKey (value)) {  					if (level - 1 < tables [value].Length) {  						value = tables [value] [level - 1];  					}  					else {  						level = 100;  						break;  					}  				}  				effect.values.Add (na.Name.Trim ()' value);  			}  			if (effect.values.Count > 0) {  				baseItem.effects [effect.getName ()] = effect;  			}  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: foreach (XmlNode ne in ns.ChildNodes) {  	if (ne.Name == "effect") {  		SkillEffectItem effect = new SkillEffectItem ();  		foreach (XmlNode na in ne.Attributes) {  			string value = na.Value.Trim ();  			if (value.Length > 0 && tables.ContainsKey (value)) {  				if (level - 1 < tables [value].Length) {  					value = tables [value] [level - 1];  				}  				else {  					level = 100;  					break;  				}  			}  			effect.values.Add (na.Name.Trim ()' value);  		}  		if (effect.values.Count > 0) {  			baseItem.effects [effect.getName ()] = effect;  		}  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: if (ne.Name == "effect") {  	SkillEffectItem effect = new SkillEffectItem ();  	foreach (XmlNode na in ne.Attributes) {  		string value = na.Value.Trim ();  		if (value.Length > 0 && tables.ContainsKey (value)) {  			if (level - 1 < tables [value].Length) {  				value = tables [value] [level - 1];  			}  			else {  				level = 100;  				break;  			}  		}  		effect.values.Add (na.Name.Trim ()' value);  	}  	if (effect.values.Count > 0) {  		baseItem.effects [effect.getName ()] = effect;  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: foreach (XmlNode na in ne.Attributes) {  	string value = na.Value.Trim ();  	if (value.Length > 0 && tables.ContainsKey (value)) {  		if (level - 1 < tables [value].Length) {  			value = tables [value] [level - 1];  		}  		else {  			level = 100;  			break;  		}  	}  	effect.values.Add (na.Name.Trim ()' value);  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: if (value.Length > 0 && tables.ContainsKey (value)) {  	if (level - 1 < tables [value].Length) {  		value = tables [value] [level - 1];  	}  	else {  		level = 100;  		break;  	}  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: if (level - 1 < tables [value].Length) {  	value = tables [value] [level - 1];  }  else {  	level = 100;  	break;  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: level = 100;  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: if (!wasEnchant) {  	level = 100;  }  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: level = 100;  
Magic Number,L2TowerDatabaseGenerator,SkillTableItem,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\SkillTableItem.cs,parseSkill,The following statement contains a magic number: if (level < 100) {  	items.Add (baseItem);  }  
Magic Number,L2TowerDatabaseGenerator,TxtIndexFileParser,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\TxtIndexFileParser.cs,TxtIndexFileParser,The following statement contains a magic number: while (true) {  	int begin = line.IndexOf ("/*");  	if (-1 == begin)  		break;  	int end = line.IndexOf ("*/"' begin);  	if (-1 == end)  		break;  	line = line.Remove (begin' end - begin + 2);  }  
Magic Number,L2TowerDatabaseGenerator,TxtIndexFileParser,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\TxtIndexFileParser.cs,TxtIndexFileParser,The following statement contains a magic number: line = line.Remove (begin' end - begin + 2);  
Magic Number,L2TowerDatabaseGenerator,TxtIndexFileParser,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\TxtIndexFileParser.cs,TxtIndexFileParser,The following statement contains a magic number: foreach (string s in lines) {  	string[] tmp = s.Split ('=');  	if (tmp.Length != 2)  		continue;  	tmp [0] = tmp [0].Trim ();  	tmp [1] = tmp [1].Trim ();  	if (tmp [0].Length > 0) {  		if (!items.ContainsKey (tmp [0]))  			items.Add (tmp [0]' tmp [1]);  	}  }  
Magic Number,L2TowerDatabaseGenerator,TxtIndexFileParser,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\TxtIndexFileParser.cs,TxtIndexFileParser,The following statement contains a magic number: if (tmp.Length != 2)  	continue;  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,processString,The following statement contains a magic number: if (s.StartsWith ("a'"))  	s = s.Remove (0' 2);  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,processString,The following statement contains a magic number: s = s.Remove (0' 2);  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,processString,The following statement contains a magic number: if (s.EndsWith ("\\0"))  	s = s.Remove (s.Length - 2' 2);  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,processString,The following statement contains a magic number: if (s.EndsWith ("\\0"))  	s = s.Remove (s.Length - 2' 2);  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,processString,The following statement contains a magic number: s = s.Remove (s.Length - 2' 2);  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,processString,The following statement contains a magic number: s = s.Remove (s.Length - 2' 2);  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	SkillInfo ni = new SkillInfo ();  	ni.id = processInt (dp.getValue (i' 0));  	ni.level = processInt (dp.getValue (i' 1));  	ni.getRecord ();  	ni.mp_consume = processInt (dp.getValue (i' 4));  	ni.cast_range = processInt (dp.getValue (i' 5));  	ni.is_physic = 0 == processInt (dp.getValue (i' "is_magic"));  	ni.is_magic = 1 == processInt (dp.getValue (i' "is_magic"));  	ni.is_dance_song = 3 == processInt (dp.getValue (i' "is_magic"));  	ni.is_passive = 2 == processInt (dp.getValue (i' 3));  	ni.is_active = 0 == processInt (dp.getValue (i' 3)) || 1 == processInt (dp.getValue (i' 3));  	ni.is_toogle = 3 == processInt (dp.getValue (i' 3));  	ni.icon = processString (dp.getValue (i' "icon_name"));  	ni.hp_consume = processInt (dp.getValue (i' "UNK_1"));  	ni.updateOrInsertRecord ();  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	SkillInfo ni = new SkillInfo ();  	ni.id = processInt (dp.getValue (i' 0));  	ni.level = processInt (dp.getValue (i' 1));  	ni.getRecord ();  	ni.mp_consume = processInt (dp.getValue (i' 4));  	ni.cast_range = processInt (dp.getValue (i' 5));  	ni.is_physic = 0 == processInt (dp.getValue (i' "is_magic"));  	ni.is_magic = 1 == processInt (dp.getValue (i' "is_magic"));  	ni.is_dance_song = 3 == processInt (dp.getValue (i' "is_magic"));  	ni.is_passive = 2 == processInt (dp.getValue (i' 3));  	ni.is_active = 0 == processInt (dp.getValue (i' 3)) || 1 == processInt (dp.getValue (i' 3));  	ni.is_toogle = 3 == processInt (dp.getValue (i' 3));  	ni.icon = processString (dp.getValue (i' "icon_name"));  	ni.hp_consume = processInt (dp.getValue (i' "UNK_1"));  	ni.updateOrInsertRecord ();  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	SkillInfo ni = new SkillInfo ();  	ni.id = processInt (dp.getValue (i' 0));  	ni.level = processInt (dp.getValue (i' 1));  	ni.getRecord ();  	ni.mp_consume = processInt (dp.getValue (i' 4));  	ni.cast_range = processInt (dp.getValue (i' 5));  	ni.is_physic = 0 == processInt (dp.getValue (i' "is_magic"));  	ni.is_magic = 1 == processInt (dp.getValue (i' "is_magic"));  	ni.is_dance_song = 3 == processInt (dp.getValue (i' "is_magic"));  	ni.is_passive = 2 == processInt (dp.getValue (i' 3));  	ni.is_active = 0 == processInt (dp.getValue (i' 3)) || 1 == processInt (dp.getValue (i' 3));  	ni.is_toogle = 3 == processInt (dp.getValue (i' 3));  	ni.icon = processString (dp.getValue (i' "icon_name"));  	ni.hp_consume = processInt (dp.getValue (i' "UNK_1"));  	ni.updateOrInsertRecord ();  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	SkillInfo ni = new SkillInfo ();  	ni.id = processInt (dp.getValue (i' 0));  	ni.level = processInt (dp.getValue (i' 1));  	ni.getRecord ();  	ni.mp_consume = processInt (dp.getValue (i' 4));  	ni.cast_range = processInt (dp.getValue (i' 5));  	ni.is_physic = 0 == processInt (dp.getValue (i' "is_magic"));  	ni.is_magic = 1 == processInt (dp.getValue (i' "is_magic"));  	ni.is_dance_song = 3 == processInt (dp.getValue (i' "is_magic"));  	ni.is_passive = 2 == processInt (dp.getValue (i' 3));  	ni.is_active = 0 == processInt (dp.getValue (i' 3)) || 1 == processInt (dp.getValue (i' 3));  	ni.is_toogle = 3 == processInt (dp.getValue (i' 3));  	ni.icon = processString (dp.getValue (i' "icon_name"));  	ni.hp_consume = processInt (dp.getValue (i' "UNK_1"));  	ni.updateOrInsertRecord ();  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	SkillInfo ni = new SkillInfo ();  	ni.id = processInt (dp.getValue (i' 0));  	ni.level = processInt (dp.getValue (i' 1));  	ni.getRecord ();  	ni.mp_consume = processInt (dp.getValue (i' 4));  	ni.cast_range = processInt (dp.getValue (i' 5));  	ni.is_physic = 0 == processInt (dp.getValue (i' "is_magic"));  	ni.is_magic = 1 == processInt (dp.getValue (i' "is_magic"));  	ni.is_dance_song = 3 == processInt (dp.getValue (i' "is_magic"));  	ni.is_passive = 2 == processInt (dp.getValue (i' 3));  	ni.is_active = 0 == processInt (dp.getValue (i' 3)) || 1 == processInt (dp.getValue (i' 3));  	ni.is_toogle = 3 == processInt (dp.getValue (i' 3));  	ni.icon = processString (dp.getValue (i' "icon_name"));  	ni.hp_consume = processInt (dp.getValue (i' "UNK_1"));  	ni.updateOrInsertRecord ();  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	SkillInfo ni = new SkillInfo ();  	ni.id = processInt (dp.getValue (i' 0));  	ni.level = processInt (dp.getValue (i' 1));  	ni.getRecord ();  	ni.mp_consume = processInt (dp.getValue (i' 4));  	ni.cast_range = processInt (dp.getValue (i' 5));  	ni.is_physic = 0 == processInt (dp.getValue (i' "is_magic"));  	ni.is_magic = 1 == processInt (dp.getValue (i' "is_magic"));  	ni.is_dance_song = 3 == processInt (dp.getValue (i' "is_magic"));  	ni.is_passive = 2 == processInt (dp.getValue (i' 3));  	ni.is_active = 0 == processInt (dp.getValue (i' 3)) || 1 == processInt (dp.getValue (i' 3));  	ni.is_toogle = 3 == processInt (dp.getValue (i' 3));  	ni.icon = processString (dp.getValue (i' "icon_name"));  	ni.hp_consume = processInt (dp.getValue (i' "UNK_1"));  	ni.updateOrInsertRecord ();  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	SkillInfo ni = new SkillInfo ();  	ni.id = processInt (dp.getValue (i' 0));  	ni.level = processInt (dp.getValue (i' 1));  	ni.getRecord ();  	ni.mp_consume = processInt (dp.getValue (i' 4));  	ni.cast_range = processInt (dp.getValue (i' 5));  	ni.is_physic = 0 == processInt (dp.getValue (i' "is_magic"));  	ni.is_magic = 1 == processInt (dp.getValue (i' "is_magic"));  	ni.is_dance_song = 3 == processInt (dp.getValue (i' "is_magic"));  	ni.is_passive = 2 == processInt (dp.getValue (i' 3));  	ni.is_active = 0 == processInt (dp.getValue (i' 3)) || 1 == processInt (dp.getValue (i' 3));  	ni.is_toogle = 3 == processInt (dp.getValue (i' 3));  	ni.icon = processString (dp.getValue (i' "icon_name"));  	ni.hp_consume = processInt (dp.getValue (i' "UNK_1"));  	ni.updateOrInsertRecord ();  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	SkillInfo ni = new SkillInfo ();  	ni.id = processInt (dp.getValue (i' 0));  	ni.level = processInt (dp.getValue (i' 1));  	ni.getRecord ();  	ni.mp_consume = processInt (dp.getValue (i' 4));  	ni.cast_range = processInt (dp.getValue (i' 5));  	ni.is_physic = 0 == processInt (dp.getValue (i' "is_magic"));  	ni.is_magic = 1 == processInt (dp.getValue (i' "is_magic"));  	ni.is_dance_song = 3 == processInt (dp.getValue (i' "is_magic"));  	ni.is_passive = 2 == processInt (dp.getValue (i' 3));  	ni.is_active = 0 == processInt (dp.getValue (i' 3)) || 1 == processInt (dp.getValue (i' 3));  	ni.is_toogle = 3 == processInt (dp.getValue (i' 3));  	ni.icon = processString (dp.getValue (i' "icon_name"));  	ni.hp_consume = processInt (dp.getValue (i' "UNK_1"));  	ni.updateOrInsertRecord ();  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	SkillInfo ni = new SkillInfo ();  	ni.id = processInt (dp.getValue (i' 0));  	ni.level = processInt (dp.getValue (i' 1));  	ni.getRecord ();  	ni.mp_consume = processInt (dp.getValue (i' 4));  	ni.cast_range = processInt (dp.getValue (i' 5));  	ni.is_physic = 0 == processInt (dp.getValue (i' "is_magic"));  	ni.is_magic = 1 == processInt (dp.getValue (i' "is_magic"));  	ni.is_dance_song = 3 == processInt (dp.getValue (i' "is_magic"));  	ni.is_passive = 2 == processInt (dp.getValue (i' 3));  	ni.is_active = 0 == processInt (dp.getValue (i' 3)) || 1 == processInt (dp.getValue (i' 3));  	ni.is_toogle = 3 == processInt (dp.getValue (i' 3));  	ni.icon = processString (dp.getValue (i' "icon_name"));  	ni.hp_consume = processInt (dp.getValue (i' "UNK_1"));  	ni.updateOrInsertRecord ();  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: ni.mp_consume = processInt (dp.getValue (i' 4));  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: ni.cast_range = processInt (dp.getValue (i' 5));  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: ni.is_dance_song = 3 == processInt (dp.getValue (i' "is_magic"));  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: ni.is_passive = 2 == processInt (dp.getValue (i' 3));  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: ni.is_passive = 2 == processInt (dp.getValue (i' 3));  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: ni.is_active = 0 == processInt (dp.getValue (i' 3)) || 1 == processInt (dp.getValue (i' 3));  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: ni.is_active = 0 == processInt (dp.getValue (i' 3)) || 1 == processInt (dp.getValue (i' 3));  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: ni.is_toogle = 3 == processInt (dp.getValue (i' 3));  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessSkillGrpInfo,The following statement contains a magic number: ni.is_toogle = 3 == processInt (dp.getValue (i' 3));  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	NpcInfoPassive ni = new NpcInfoPassive ();  	ni.id = Convert.ToInt32 (dp.getValue (i' "tag"));  	for (int ii = 0; ii < 20; ii++) {  		if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  			continue;  		try {  			ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  		}  		catch (Exception e) {  			ni.skillId = 0;  		}  		try {  			ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  		}  		catch (Exception e) {  			ni.skillLvl = 0;  		}  		if (ni.skillLvl != 0 && ni.skillId != 0)  			ni.insertRecord ();  	}  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	NpcInfoPassive ni = new NpcInfoPassive ();  	ni.id = Convert.ToInt32 (dp.getValue (i' "tag"));  	for (int ii = 0; ii < 20; ii++) {  		if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  			continue;  		try {  			ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  		}  		catch (Exception e) {  			ni.skillId = 0;  		}  		try {  			ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  		}  		catch (Exception e) {  			ni.skillLvl = 0;  		}  		if (ni.skillLvl != 0 && ni.skillId != 0)  			ni.insertRecord ();  	}  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	NpcInfoPassive ni = new NpcInfoPassive ();  	ni.id = Convert.ToInt32 (dp.getValue (i' "tag"));  	for (int ii = 0; ii < 20; ii++) {  		if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  			continue;  		try {  			ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  		}  		catch (Exception e) {  			ni.skillId = 0;  		}  		try {  			ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  		}  		catch (Exception e) {  			ni.skillLvl = 0;  		}  		if (ni.skillLvl != 0 && ni.skillId != 0)  			ni.insertRecord ();  	}  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	NpcInfoPassive ni = new NpcInfoPassive ();  	ni.id = Convert.ToInt32 (dp.getValue (i' "tag"));  	for (int ii = 0; ii < 20; ii++) {  		if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  			continue;  		try {  			ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  		}  		catch (Exception e) {  			ni.skillId = 0;  		}  		try {  			ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  		}  		catch (Exception e) {  			ni.skillLvl = 0;  		}  		if (ni.skillLvl != 0 && ni.skillId != 0)  			ni.insertRecord ();  	}  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	NpcInfoPassive ni = new NpcInfoPassive ();  	ni.id = Convert.ToInt32 (dp.getValue (i' "tag"));  	for (int ii = 0; ii < 20; ii++) {  		if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  			continue;  		try {  			ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  		}  		catch (Exception e) {  			ni.skillId = 0;  		}  		try {  			ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  		}  		catch (Exception e) {  			ni.skillLvl = 0;  		}  		if (ni.skillLvl != 0 && ni.skillId != 0)  			ni.insertRecord ();  	}  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: for (int ii = 0; ii < 20; ii++) {  	if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  		continue;  	try {  		ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  	}  	catch (Exception e) {  		ni.skillId = 0;  	}  	try {  		ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  	}  	catch (Exception e) {  		ni.skillLvl = 0;  	}  	if (ni.skillLvl != 0 && ni.skillId != 0)  		ni.insertRecord ();  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: for (int ii = 0; ii < 20; ii++) {  	if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  		continue;  	try {  		ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  	}  	catch (Exception e) {  		ni.skillId = 0;  	}  	try {  		ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  	}  	catch (Exception e) {  		ni.skillLvl = 0;  	}  	if (ni.skillLvl != 0 && ni.skillId != 0)  		ni.insertRecord ();  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: for (int ii = 0; ii < 20; ii++) {  	if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  		continue;  	try {  		ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  	}  	catch (Exception e) {  		ni.skillId = 0;  	}  	try {  		ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  	}  	catch (Exception e) {  		ni.skillLvl = 0;  	}  	if (ni.skillLvl != 0 && ni.skillId != 0)  		ni.insertRecord ();  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: for (int ii = 0; ii < 20; ii++) {  	if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  		continue;  	try {  		ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  	}  	catch (Exception e) {  		ni.skillId = 0;  	}  	try {  		ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  	}  	catch (Exception e) {  		ni.skillLvl = 0;  	}  	if (ni.skillLvl != 0 && ni.skillId != 0)  		ni.insertRecord ();  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: for (int ii = 0; ii < 20; ii++) {  	if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  		continue;  	try {  		ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  	}  	catch (Exception e) {  		ni.skillId = 0;  	}  	try {  		ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  	}  	catch (Exception e) {  		ni.skillLvl = 0;  	}  	if (ni.skillLvl != 0 && ni.skillId != 0)  		ni.insertRecord ();  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  	continue;  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: if (!(dp.isColumn ("dtab1[" + (ii * 2) + "]") && dp.isColumn ("dtab1[" + ((ii * 2) + 1) + "]")))  	continue;  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: try {  	ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  }  catch (Exception e) {  	ni.skillId = 0;  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: ni.skillId = Convert.ToInt32 (dp.getValue (i' "dtab1[" + (ii * 2) + "]"));  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: try {  	ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  }  catch (Exception e) {  	ni.skillLvl = 0;  }  
Magic Number,L2TowerDatabaseGenerator,ClientParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\ClientParse.cs,ProcessNpcInfoPassive,The following statement contains a magic number: ni.skillLvl = Convert.ToInt32 (dp.getValue (i' "dtab1[" + ((ii * 2) + 1) + "]"));  
Magic Number,L2TowerDatabaseGenerator,L2OffParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\L2OffParse.cs,Process_npcdata_txt,The following statement contains a magic number: for (int i = 0; i < dp.getRecordsCount (); i++) {  	NpcInfo it = new NpcInfo ();  	it.id = processInt (dp.getValue (i' 1));  	if (it.getRecord ()) {  		if (it.name.Length == 0) {  			it.name = dp.getValue (i' 2);  		}  		it.level = processInt (dp.getValue (i' "level"));  		/*it.agro_range = processInt(dp.getValue(i' "agro_range"));                       string ai = dp.getValue(i' "npc_ai");                       if (ai==null || ai.IndexOf("{[IsAggressive]=1}")==-1)                           it.agro_range = 0;*/it.updateOrInsertRecord ();  	}  	Log.log2 (i + 1' dp.getRecordsCount ());  }  
Magic Number,L2TowerDatabaseGenerator,L2OffParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\L2OffParse.cs,Process_npcdata_txt,The following statement contains a magic number: if (it.getRecord ()) {  	if (it.name.Length == 0) {  		it.name = dp.getValue (i' 2);  	}  	it.level = processInt (dp.getValue (i' "level"));  	/*it.agro_range = processInt(dp.getValue(i' "agro_range"));                       string ai = dp.getValue(i' "npc_ai");                       if (ai==null || ai.IndexOf("{[IsAggressive]=1}")==-1)                           it.agro_range = 0;*/it.updateOrInsertRecord ();  }  
Magic Number,L2TowerDatabaseGenerator,L2OffParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\L2OffParse.cs,Process_npcdata_txt,The following statement contains a magic number: if (it.name.Length == 0) {  	it.name = dp.getValue (i' 2);  }  
Magic Number,L2TowerDatabaseGenerator,L2OffParse,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Parsers\L2OffParse.cs,Process_npcdata_txt,The following statement contains a magic number: it.name = dp.getValue (i' 2);  
Magic Number,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,StartGeneration,The following statement contains a magic number: try {  	MysqlManager.StartMysql ();  	string[] dir = Directory.GetDirectories (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\"' "*");  	progressBar1.Maximum = (dir.Length - 1) * 4;  	progressBar1.Value = 0;  	foreach (string g in dir) {  		FileInfo f = new FileInfo (g);  		string c = f.Name;  		if (c.Contains ('.'))  			continue;  		Log.log ("Processing dir: " + c);  		File.Delete (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2off.db");  		File.Delete (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2j.db");  		DirectoryInfo test = new DirectoryInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\l2jsql");  		if (test.Exists) {  			MysqlManager.LoadDatabase (c);  			if (!MysqlManager.OpenDatabase ())  				MessageBox.Show ("Failed to open mysql database connection");  			SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2j.db");  			SqliteManager.CreateTables ();  			ClientParse cp = new ClientParse ();  			cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			L2jParse jp = new L2jParse ();  			jp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			SqliteManager.CloseDatabase ();  			MysqlManager.CloseDatabase ();  		}  		else  			progressBar1.Value += 2;  		this.Refresh ();  		test = new DirectoryInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\l2offscript");  		if (test.Exists) {  			SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2off.db");  			SqliteManager.CreateTables ();  			ClientParse cp = new ClientParse ();  			cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			L2OffParse op = new L2OffParse ();  			op.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			SqliteManager.CloseDatabase ();  		}  		else  			progressBar1.Value += 2;  		this.Refresh ();  	}  	MysqlManager.StopMysql ();  }  catch (Exception e) {  	MessageBox.Show (e.ToString ());  }  
Magic Number,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,StartGeneration,The following statement contains a magic number: try {  	MysqlManager.StartMysql ();  	string[] dir = Directory.GetDirectories (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\"' "*");  	progressBar1.Maximum = (dir.Length - 1) * 4;  	progressBar1.Value = 0;  	foreach (string g in dir) {  		FileInfo f = new FileInfo (g);  		string c = f.Name;  		if (c.Contains ('.'))  			continue;  		Log.log ("Processing dir: " + c);  		File.Delete (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2off.db");  		File.Delete (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2j.db");  		DirectoryInfo test = new DirectoryInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\l2jsql");  		if (test.Exists) {  			MysqlManager.LoadDatabase (c);  			if (!MysqlManager.OpenDatabase ())  				MessageBox.Show ("Failed to open mysql database connection");  			SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2j.db");  			SqliteManager.CreateTables ();  			ClientParse cp = new ClientParse ();  			cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			L2jParse jp = new L2jParse ();  			jp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			SqliteManager.CloseDatabase ();  			MysqlManager.CloseDatabase ();  		}  		else  			progressBar1.Value += 2;  		this.Refresh ();  		test = new DirectoryInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\l2offscript");  		if (test.Exists) {  			SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2off.db");  			SqliteManager.CreateTables ();  			ClientParse cp = new ClientParse ();  			cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			L2OffParse op = new L2OffParse ();  			op.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			SqliteManager.CloseDatabase ();  		}  		else  			progressBar1.Value += 2;  		this.Refresh ();  	}  	MysqlManager.StopMysql ();  }  catch (Exception e) {  	MessageBox.Show (e.ToString ());  }  
Magic Number,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,StartGeneration,The following statement contains a magic number: try {  	MysqlManager.StartMysql ();  	string[] dir = Directory.GetDirectories (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\"' "*");  	progressBar1.Maximum = (dir.Length - 1) * 4;  	progressBar1.Value = 0;  	foreach (string g in dir) {  		FileInfo f = new FileInfo (g);  		string c = f.Name;  		if (c.Contains ('.'))  			continue;  		Log.log ("Processing dir: " + c);  		File.Delete (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2off.db");  		File.Delete (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2j.db");  		DirectoryInfo test = new DirectoryInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\l2jsql");  		if (test.Exists) {  			MysqlManager.LoadDatabase (c);  			if (!MysqlManager.OpenDatabase ())  				MessageBox.Show ("Failed to open mysql database connection");  			SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2j.db");  			SqliteManager.CreateTables ();  			ClientParse cp = new ClientParse ();  			cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			L2jParse jp = new L2jParse ();  			jp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			SqliteManager.CloseDatabase ();  			MysqlManager.CloseDatabase ();  		}  		else  			progressBar1.Value += 2;  		this.Refresh ();  		test = new DirectoryInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\l2offscript");  		if (test.Exists) {  			SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2off.db");  			SqliteManager.CreateTables ();  			ClientParse cp = new ClientParse ();  			cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			L2OffParse op = new L2OffParse ();  			op.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  			progressBar1.Value++;  			this.Refresh ();  			SqliteManager.CloseDatabase ();  		}  		else  			progressBar1.Value += 2;  		this.Refresh ();  	}  	MysqlManager.StopMysql ();  }  catch (Exception e) {  	MessageBox.Show (e.ToString ());  }  
Magic Number,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,StartGeneration,The following statement contains a magic number: progressBar1.Maximum = (dir.Length - 1) * 4;  
Magic Number,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,StartGeneration,The following statement contains a magic number: foreach (string g in dir) {  	FileInfo f = new FileInfo (g);  	string c = f.Name;  	if (c.Contains ('.'))  		continue;  	Log.log ("Processing dir: " + c);  	File.Delete (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2off.db");  	File.Delete (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2j.db");  	DirectoryInfo test = new DirectoryInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\l2jsql");  	if (test.Exists) {  		MysqlManager.LoadDatabase (c);  		if (!MysqlManager.OpenDatabase ())  			MessageBox.Show ("Failed to open mysql database connection");  		SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2j.db");  		SqliteManager.CreateTables ();  		ClientParse cp = new ClientParse ();  		cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  		progressBar1.Value++;  		this.Refresh ();  		L2jParse jp = new L2jParse ();  		jp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  		progressBar1.Value++;  		this.Refresh ();  		SqliteManager.CloseDatabase ();  		MysqlManager.CloseDatabase ();  	}  	else  		progressBar1.Value += 2;  	this.Refresh ();  	test = new DirectoryInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\l2offscript");  	if (test.Exists) {  		SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2off.db");  		SqliteManager.CreateTables ();  		ClientParse cp = new ClientParse ();  		cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  		progressBar1.Value++;  		this.Refresh ();  		L2OffParse op = new L2OffParse ();  		op.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  		progressBar1.Value++;  		this.Refresh ();  		SqliteManager.CloseDatabase ();  	}  	else  		progressBar1.Value += 2;  	this.Refresh ();  }  
Magic Number,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,StartGeneration,The following statement contains a magic number: foreach (string g in dir) {  	FileInfo f = new FileInfo (g);  	string c = f.Name;  	if (c.Contains ('.'))  		continue;  	Log.log ("Processing dir: " + c);  	File.Delete (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2off.db");  	File.Delete (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2j.db");  	DirectoryInfo test = new DirectoryInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\l2jsql");  	if (test.Exists) {  		MysqlManager.LoadDatabase (c);  		if (!MysqlManager.OpenDatabase ())  			MessageBox.Show ("Failed to open mysql database connection");  		SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2j.db");  		SqliteManager.CreateTables ();  		ClientParse cp = new ClientParse ();  		cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  		progressBar1.Value++;  		this.Refresh ();  		L2jParse jp = new L2jParse ();  		jp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  		progressBar1.Value++;  		this.Refresh ();  		SqliteManager.CloseDatabase ();  		MysqlManager.CloseDatabase ();  	}  	else  		progressBar1.Value += 2;  	this.Refresh ();  	test = new DirectoryInfo (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\l2offscript");  	if (test.Exists) {  		SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2off.db");  		SqliteManager.CreateTables ();  		ClientParse cp = new ClientParse ();  		cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  		progressBar1.Value++;  		this.Refresh ();  		L2OffParse op = new L2OffParse ();  		op.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  		progressBar1.Value++;  		this.Refresh ();  		SqliteManager.CloseDatabase ();  	}  	else  		progressBar1.Value += 2;  	this.Refresh ();  }  
Magic Number,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,StartGeneration,The following statement contains a magic number: if (test.Exists) {  	MysqlManager.LoadDatabase (c);  	if (!MysqlManager.OpenDatabase ())  		MessageBox.Show ("Failed to open mysql database connection");  	SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2j.db");  	SqliteManager.CreateTables ();  	ClientParse cp = new ClientParse ();  	cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  	progressBar1.Value++;  	this.Refresh ();  	L2jParse jp = new L2jParse ();  	jp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  	progressBar1.Value++;  	this.Refresh ();  	SqliteManager.CloseDatabase ();  	MysqlManager.CloseDatabase ();  }  else  	progressBar1.Value += 2;  
Magic Number,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,StartGeneration,The following statement contains a magic number: progressBar1.Value += 2;  
Magic Number,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,StartGeneration,The following statement contains a magic number: if (test.Exists) {  	SqliteManager.OpenDatabase (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\" + c + " - L2off.db");  	SqliteManager.CreateTables ();  	ClientParse cp = new ClientParse ();  	cp.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  	progressBar1.Value++;  	this.Refresh ();  	L2OffParse op = new L2OffParse ();  	op.Process (Path.GetDirectoryName (Application.ExecutablePath) + "\\..\\data\\" + c + "\\");  	progressBar1.Value++;  	this.Refresh ();  	SqliteManager.CloseDatabase ();  }  else  	progressBar1.Value += 2;  
Magic Number,L2TowerDatabaseGenerator,Form1,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,StartGeneration,The following statement contains a magic number: progressBar1.Value += 2;  
Magic Number,L2TowerDatabaseGenerator,Log,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,log2,The following statement contains a magic number: if (Form1.me.progressBar2.Value != procent) {  	if (Form1.me != null) {  		Form1.me.progressBar2.Maximum = 500;  		Form1.me.progressBar2.Value = procent;  		Form1.me.progressBar2.Refresh ();  	}  }  
Magic Number,L2TowerDatabaseGenerator,Log,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,log2,The following statement contains a magic number: if (Form1.me != null) {  	Form1.me.progressBar2.Maximum = 500;  	Form1.me.progressBar2.Value = procent;  	Form1.me.progressBar2.Refresh ();  }  
Magic Number,L2TowerDatabaseGenerator,Log,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\Form1.cs,log2,The following statement contains a magic number: Form1.me.progressBar2.Maximum = 500;  
Magic Number,L2TowerDatabaseGenerator,TxtFileParser,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\TxtFileParser.cs,TxtFileParser,The following statement contains a magic number: while (true) {  	int begin = line.IndexOf ("/*");  	if (-1 == begin)  		break;  	int end = line.IndexOf ("*/"' begin);  	if (-1 == end)  		break;  	line = line.Remove (begin' end - begin + 2);  }  
Magic Number,L2TowerDatabaseGenerator,TxtFileParser,C:\repos\ClockMan_l2tower-lua-api\Source\L2TowerDatabaseGenerator\TxtFileParser.cs,TxtFileParser,The following statement contains a magic number: line = line.Remove (begin' end - begin + 2);  
