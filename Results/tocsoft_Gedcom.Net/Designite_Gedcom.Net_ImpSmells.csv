Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,Cyclomatic complexity of the method is 11
Long Statement,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,ToString,The length of the statement  "	//        return string.Format("FROM {0:" + DateFormatFromAccuracy(FromAccuracy) + "} TO {1:" + DateFormatFromAccuracy(ToAccuracy) + "}"' From' To); " is 148.
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: for (var i = 1; i <= 12; i++) {  	var d = new DateTime (2000' i' 1);  	var nameShort = d.ToString ("MMM"' CultureInfo.InvariantCulture).ToUpperInvariant ();  	_monthLookUp.Add (nameShort' i);  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: for (var i = 1; i <= 12; i++) {  	var d = new DateTime (2000' i' 1);  	var nameShort = d.ToString ("MMM"' CultureInfo.InvariantCulture).ToUpperInvariant ();  	_monthLookUp.Add (nameShort' i);  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("BEF")) {  	value = value.Substring (value.IndexOf (' ')).Trim ();  	From = DateTime.MinValue;  	FromAccuracy = Accuracy.Unknown;  	var to = new Date (value);  	ToAccuracy = to.FromAccuracy;  	To = to.From;  }  else if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("BEF")) {  	value = value.Substring (value.IndexOf (' ')).Trim ();  	From = DateTime.MinValue;  	FromAccuracy = Accuracy.Unknown;  	var to = new Date (value);  	ToAccuracy = to.FromAccuracy;  	To = to.From;  }  else if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("BEF")) {  	value = value.Substring (value.IndexOf (' ')).Trim ();  	From = DateTime.MinValue;  	FromAccuracy = Accuracy.Unknown;  	var to = new Date (value);  	ToAccuracy = to.FromAccuracy;  	To = to.From;  }  else if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("BEF")) {  	value = value.Substring (value.IndexOf (' ')).Trim ();  	From = DateTime.MinValue;  	FromAccuracy = Accuracy.Unknown;  	var to = new Date (value);  	ToAccuracy = to.FromAccuracy;  	To = to.From;  }  else if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("BEF")) {  	value = value.Substring (value.IndexOf (' ')).Trim ();  	From = DateTime.MinValue;  	FromAccuracy = Accuracy.Unknown;  	var to = new Date (value);  	ToAccuracy = to.FromAccuracy;  	To = to.From;  }  else if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("BEF")) {  	value = value.Substring (value.IndexOf (' ')).Trim ();  	From = DateTime.MinValue;  	FromAccuracy = Accuracy.Unknown;  	var to = new Date (value);  	ToAccuracy = to.FromAccuracy;  	To = to.From;  }  else if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("BEF")) {  	value = value.Substring (value.IndexOf (' ')).Trim ();  	From = DateTime.MinValue;  	FromAccuracy = Accuracy.Unknown;  	var to = new Date (value);  	ToAccuracy = to.FromAccuracy;  	To = to.From;  }  else if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (value.StartsWith ("FROM")) {  	value = value.Substring (4);  	var parts = value.Split (new[] {  		"TO"  	}' StringSplitOptions.RemoveEmptyEntries);  	var startDate = new Date (parts [0]);  	From = startDate.From;  	FromAccuracy = startDate.FromAccuracy;  	To = DateTime.MaxValue;  	ToAccuracy = Accuracy.Unknown;  	if (parts.Length == 2) {  		var end = new Date (parts [1]);  		To = end.To;  		ToAccuracy = startDate.ToAccuracy;  	}  }  else {  	bool matchedAnyPart = false;  	var parts = value.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	int startDay = -1;  	var day = parts.Where (x => x.All (char.IsDigit) && x.Length <= 2).FirstOrDefault ();  	if (day != null) {  		parts.Remove (day);  		startDay = int.Parse (day);  		matchedAnyPart = true;  	}  	var month = parts.Where (x => !x.All (char.IsDigit)).FirstOrDefault ();  	int startMonth = 1;  	int endMonth = 12;  	if (month != null) {  		parts.Remove (month);  		var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  		if (_monthLookUp.ContainsKey (m)) {  			startMonth = endMonth = _monthLookUp [m];  			matchedAnyPart = true;  		}  	}  	var year = parts.Where (x => x.Trim ('S').All (char.IsDigit) && x.Length <= 4 && x.Length >= 2).FirstOrDefault ();  	int startYear = DateTime.MinValue.Year;  	int endYear = DateTime.MaxValue.Year;  	if (year != null) {  		parts.Remove (year);  		endYear = startYear = int.Parse (year);  		matchedAnyPart = true;  	}  	if (matchedAnyPart) {  		if (startDay > 0) {  			From = new DateTime (startYear' startMonth' startDay);  			To = new DateTime (endYear' endMonth' startDay);  			FromAccuracy = ToAccuracy = Accuracy.Day;  		}  		else {  			if (month != null) {  				FromAccuracy = ToAccuracy = Accuracy.Month;  			}  			else {  				FromAccuracy = ToAccuracy = Accuracy.Year;  			}  			From = new DateTime (startYear' startMonth' 1);  			To = new DateTime (endYear' endMonth' 1).AddMonths (1).AddDays (-1);  		}  	}  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: value = value.Substring (4);  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (parts.Length == 2) {  	var end = new Date (parts [1]);  	To = end.To;  	ToAccuracy = startDate.ToAccuracy;  }  
Magic Number,Gedcom.Net,Date,C:\repos\tocsoft_Gedcom.Net\Gedcom.Net\Date.cs,Date,The following statement contains a magic number: if (month != null) {  	parts.Remove (month);  	var m = month.ToUpperInvariant ().Substring (0' Math.Min (month.Length' 3));  	if (_monthLookUp.ContainsKey (m)) {  		startMonth = endMonth = _monthLookUp [m];  		matchedAnyPart = true;  	}  }  
