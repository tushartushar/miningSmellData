Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Geo.Raven.Query,LinqWhereClause<T>,C:\repos\sibartlett_Geo\Geo.Raven\Query\LinqWhereClause.cs,RelatesToShape,The length of the statement  "            return _source.Customize(x => x.RelatesToShape(SpatialField.NameFor(_property)' _writer.Write(geometry.GetSpatial4nShape())' relation)); " is 136.
Long Statement,Geo.Raven.Query,LinqWhereClause<T>,C:\repos\sibartlett_Geo\Geo.Raven\Query\LinqWhereClause.cs,WithinRadiusOf,The length of the statement  "            return _source.Customize(x => x.WithinRadiusOf(SpatialField.NameFor(_property)' distance.ConvertTo(DistanceUnit.Km).Value' position.GetCoordinate().Latitude' position.GetCoordinate().Longitude)); " is 195.
Long Statement,Geo.Raven.Query,LuceneWhereClause<T>,C:\repos\sibartlett_Geo\Geo.Raven\Query\LuceneWhereClause.cs,RelatesToShape,The length of the statement  "            return _query.RelatesToShape(SpatialField.NameFor(_propertySelector)' _writer.Write(geometry.GetSpatial4nShape())' relation); " is 125.
Long Statement,Geo.Raven.Query,LuceneWhereClause<T>,C:\repos\sibartlett_Geo\Geo.Raven\Query\LuceneWhereClause.cs,WithinRadiusOf,The length of the statement  "            return _query.WithinRadiusOf(SpatialField.NameFor(_propertySelector)' distance.ConvertTo(DistanceUnit.Km).Value' position.GetCoordinate().Latitude' position.GetCoordinate().Longitude); " is 184.
Magic Number,Geo.Raven.Json,CoordinateConverter,C:\repos\sibartlett_Geo\Geo.Raven\Json\CoordinateConverter.cs,ReadJson,The following statement contains a magic number: if (arr != null)              {                  if (arr.Length == 2)                      return new Coordinate(arr[1]' arr[0]);                    if (arr.Length == 3)                      return new CoordinateZ(arr[1]' arr[0]' arr[2]);                    if (arr.Length == 4 && double.IsNaN(arr[2]))                      return new CoordinateM(arr[1]' arr[0]' arr[3]);                    if (arr.Length == 4)                      return new CoordinateZM(arr[1]' arr[0]' arr[2]' arr[3]);              }
Magic Number,Geo.Raven.Json,CoordinateConverter,C:\repos\sibartlett_Geo\Geo.Raven\Json\CoordinateConverter.cs,ReadJson,The following statement contains a magic number: if (arr != null)              {                  if (arr.Length == 2)                      return new Coordinate(arr[1]' arr[0]);                    if (arr.Length == 3)                      return new CoordinateZ(arr[1]' arr[0]' arr[2]);                    if (arr.Length == 4 && double.IsNaN(arr[2]))                      return new CoordinateM(arr[1]' arr[0]' arr[3]);                    if (arr.Length == 4)                      return new CoordinateZM(arr[1]' arr[0]' arr[2]' arr[3]);              }
Magic Number,Geo.Raven.Json,CoordinateConverter,C:\repos\sibartlett_Geo\Geo.Raven\Json\CoordinateConverter.cs,ReadJson,The following statement contains a magic number: if (arr != null)              {                  if (arr.Length == 2)                      return new Coordinate(arr[1]' arr[0]);                    if (arr.Length == 3)                      return new CoordinateZ(arr[1]' arr[0]' arr[2]);                    if (arr.Length == 4 && double.IsNaN(arr[2]))                      return new CoordinateM(arr[1]' arr[0]' arr[3]);                    if (arr.Length == 4)                      return new CoordinateZM(arr[1]' arr[0]' arr[2]' arr[3]);              }
Magic Number,Geo.Raven.Json,CoordinateConverter,C:\repos\sibartlett_Geo\Geo.Raven\Json\CoordinateConverter.cs,ReadJson,The following statement contains a magic number: if (arr != null)              {                  if (arr.Length == 2)                      return new Coordinate(arr[1]' arr[0]);                    if (arr.Length == 3)                      return new CoordinateZ(arr[1]' arr[0]' arr[2]);                    if (arr.Length == 4 && double.IsNaN(arr[2]))                      return new CoordinateM(arr[1]' arr[0]' arr[3]);                    if (arr.Length == 4)                      return new CoordinateZM(arr[1]' arr[0]' arr[2]' arr[3]);              }
Magic Number,Geo.Raven.Json,CoordinateConverter,C:\repos\sibartlett_Geo\Geo.Raven\Json\CoordinateConverter.cs,ReadJson,The following statement contains a magic number: if (arr != null)              {                  if (arr.Length == 2)                      return new Coordinate(arr[1]' arr[0]);                    if (arr.Length == 3)                      return new CoordinateZ(arr[1]' arr[0]' arr[2]);                    if (arr.Length == 4 && double.IsNaN(arr[2]))                      return new CoordinateM(arr[1]' arr[0]' arr[3]);                    if (arr.Length == 4)                      return new CoordinateZM(arr[1]' arr[0]' arr[2]' arr[3]);              }
Magic Number,Geo.Raven.Json,CoordinateConverter,C:\repos\sibartlett_Geo\Geo.Raven\Json\CoordinateConverter.cs,ReadJson,The following statement contains a magic number: if (arr != null)              {                  if (arr.Length == 2)                      return new Coordinate(arr[1]' arr[0]);                    if (arr.Length == 3)                      return new CoordinateZ(arr[1]' arr[0]' arr[2]);                    if (arr.Length == 4 && double.IsNaN(arr[2]))                      return new CoordinateM(arr[1]' arr[0]' arr[3]);                    if (arr.Length == 4)                      return new CoordinateZM(arr[1]' arr[0]' arr[2]' arr[3]);              }
Magic Number,Geo.Raven.Json,CoordinateConverter,C:\repos\sibartlett_Geo\Geo.Raven\Json\CoordinateConverter.cs,ReadJson,The following statement contains a magic number: if (arr != null)              {                  if (arr.Length == 2)                      return new Coordinate(arr[1]' arr[0]);                    if (arr.Length == 3)                      return new CoordinateZ(arr[1]' arr[0]' arr[2]);                    if (arr.Length == 4 && double.IsNaN(arr[2]))                      return new CoordinateM(arr[1]' arr[0]' arr[3]);                    if (arr.Length == 4)                      return new CoordinateZM(arr[1]' arr[0]' arr[2]' arr[3]);              }
Magic Number,Geo.Raven.Json,CoordinateConverter,C:\repos\sibartlett_Geo\Geo.Raven\Json\CoordinateConverter.cs,ReadJson,The following statement contains a magic number: if (arr != null)              {                  if (arr.Length == 2)                      return new Coordinate(arr[1]' arr[0]);                    if (arr.Length == 3)                      return new CoordinateZ(arr[1]' arr[0]' arr[2]);                    if (arr.Length == 4 && double.IsNaN(arr[2]))                      return new CoordinateM(arr[1]' arr[0]' arr[3]);                    if (arr.Length == 4)                      return new CoordinateZM(arr[1]' arr[0]' arr[2]' arr[3]);              }
Magic Number,Geo.Raven.Json,CoordinateConverter,C:\repos\sibartlett_Geo\Geo.Raven\Json\CoordinateConverter.cs,ReadJson,The following statement contains a magic number: if (arr != null)              {                  if (arr.Length == 2)                      return new Coordinate(arr[1]' arr[0]);                    if (arr.Length == 3)                      return new CoordinateZ(arr[1]' arr[0]' arr[2]);                    if (arr.Length == 4 && double.IsNaN(arr[2]))                      return new CoordinateM(arr[1]' arr[0]' arr[3]);                    if (arr.Length == 4)                      return new CoordinateZM(arr[1]' arr[0]' arr[2]' arr[3]);              }
