Implementation smell,Namespace,Class,File,Method,Description
Long Method,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,HandleServerReport,The method has 129 lines of code.
Complex Method,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,GetSafeGameAddress,Cyclomatic complexity of the method is 8
Complex Method,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,HandleServerReport,Cyclomatic complexity of the method is 15
Complex Method,DMPServerReportingReceiver,DatabaseConnection,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\DatabaseConnection.cs,ExecuteReader,Cyclomatic complexity of the method is 10
Complex Method,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,Cyclomatic complexity of the method is 15
Complex Method,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,Cyclomatic complexity of the method is 9
Long Statement,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,HandleServerReport,The length of the statement  "		string sqlQuery = "CALL gameserverinit(@serverhash' @namex' @descriptionx' @gameportx' @gameaddressx' @protocolx' @programversion' @maxplayersx' @modcontrolx' @modcontrolshax' @gamemodex' @cheatsx' @warpmodex' @universex' @bannerx' @homepagex' @httpportx' @adminx' @teamx' @locationx' @fixedipx);"; " is 298.
Long Statement,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,HandleServerReport,The length of the statement  "			string errorPath = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "errors"); " is 128.
Long Statement,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,HandleServerReport,The length of the statement  "				string errorPath = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "errors"); " is 128.
Long Statement,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,HandleServerReport,The length of the statement  "		//Take all the currently connected players and remove the players that were connected already to generate a list of players to be added " is 135.
Long Statement,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,HandleServerReport,The length of the statement  "		//Take all the old players connected and remove the players that are connected already to generate a list of players to be removed " is 130.
Long Statement,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,HandleServerReport,The length of the statement  "				string errorPath = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "errors"); " is 128.
Long Statement,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,HandleServerReport,The length of the statement  "				string errorPath = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "errors"); " is 128.
Long Statement,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,HandleServerReport,The length of the statement  "	Console.WriteLine ("Handled report from " + serverReport.serverName + " (" + client.address + ")' Protocol " + serverReport.protocolVersion + "' Program Version: " + serverReport.programVersion + "' Time: " + sw.ElapsedMilliseconds); " is 233.
Long Statement,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,SetErrorCounter,The length of the statement  "	string errorDirectory = Path.Combine (Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "errors"); " is 133.
Long Statement,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,DisconnectClient,The length of the statement  "			Console.WriteLine ("Dropped connection from " + disconnectClient.address.ToString () + "' connected: " + connectedClients); " is 123.
Long Statement,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,SetupNewClient,The length of the statement  "		newClient.clientConnection.GetStream ().BeginRead (newClient.incomingMessage.data' newClient.incomingMessage.data.Length - newClient.bytesToReceive' newClient.bytesToReceive' ReceiveCallback' newClient); " is 203.
Long Statement,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The length of the statement  "		client.clientConnection.GetStream ().BeginRead (client.incomingMessage.data' client.incomingMessage.data.Length - client.bytesToReceive' client.bytesToReceive' ReceiveCallback' client); " is 185.
Empty Catch Block,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,DisconnectClient,The method has an empty catch block.
Empty Catch Block,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The method has an empty catch block.
Empty Catch Block,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The method has an empty catch block.
Empty Catch Block,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The method has an empty catch block.
Empty Catch Block,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The method has an empty catch block.
Empty Catch Block,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The method has an empty catch block.
Magic Number,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,GetSafeGameAddress,The following statement contains a magic number: if (!IPAddress.TryParse (inputAddress' out parseAddress)) {  	try {  		IAsyncResult ar = Dns.BeginGetHostAddresses (inputAddress' null' null);  		if (ar.AsyncWaitHandle.WaitOne (30000)) {  			IPAddress[] addresses = Dns.EndGetHostAddresses (ar);  			if (addresses.Length == 0) {  				overrideAddress = true;  			}  		}  		else {  			overrideAddress = true;  		}  	}  	catch {  		overrideAddress = true;  	}  }  
Magic Number,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,GetSafeGameAddress,The following statement contains a magic number: try {  	IAsyncResult ar = Dns.BeginGetHostAddresses (inputAddress' null' null);  	if (ar.AsyncWaitHandle.WaitOne (30000)) {  		IPAddress[] addresses = Dns.EndGetHostAddresses (ar);  		if (addresses.Length == 0) {  			overrideAddress = true;  		}  	}  	else {  		overrideAddress = true;  	}  }  catch {  	overrideAddress = true;  }  
Magic Number,DMPServerReportingReceiver,MessageHandlers,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\MessageHandlers.cs,GetSafeGameAddress,The following statement contains a magic number: if (ar.AsyncWaitHandle.WaitOne (30000)) {  	IPAddress[] addresses = Dns.EndGetHostAddresses (ar);  	if (addresses.Length == 0) {  		overrideAddress = true;  	}  }  else {  	overrideAddress = true;  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,Main,The following statement contains a magic number: while (true) {  	CheckTimeouts ();  	Thread.Sleep (500);  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,Main,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,StartServer,The following statement contains a magic number: serverListener = new TcpListener (IPAddress.Any' 9001);  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,SetupNewClient,The following statement contains a magic number: newClient.incomingMessage.data = new byte[8];  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,SetupNewClient,The following statement contains a magic number: newClient.bytesToReceive = 8;  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: try {  	int bytesReceived = client.clientConnection.GetStream ().EndRead (ar);  	client.bytesToReceive -= bytesReceived;  	if (bytesReceived > 0) {  		client.lastReceiveTime = programClock.ElapsedMilliseconds;  	}  	if (client.bytesToReceive == 0) {  		//We have a header or a payload  		if (!client.isRecevingPayload) {  			//We have a header  			client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  			int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  			if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  				Console.WriteLine ("Invalid TCP message. Disconnecting client.");  				DisconnectClient (client);  				return;  			}  			if (messagePayload == 0) {  				client.incomingMessage.data = null;  				HandleMessage (client' client.incomingMessage);  				client.incomingMessage = new NetworkMessage ();  				client.incomingMessage.data = new byte[8];  				client.bytesToReceive = 8;  			}  			else {  				client.isRecevingPayload = true;  				client.incomingMessage.data = new byte[messagePayload];  				client.bytesToReceive = messagePayload;  			}  		}  		else {  			//We have a payload  			HandleMessage (client' client.incomingMessage);  			client.isRecevingPayload = false;  			client.incomingMessage = new NetworkMessage ();  			client.incomingMessage.data = new byte[8];  			client.bytesToReceive = 8;  		}  	}  	client.clientConnection.GetStream ().BeginRead (client.incomingMessage.data' client.incomingMessage.data.Length - client.bytesToReceive' client.bytesToReceive' ReceiveCallback' client);  }  catch (Exception e) {  	Console.WriteLine ("Error reading data' Exception: " + e);  	DisconnectClient (client);  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: try {  	int bytesReceived = client.clientConnection.GetStream ().EndRead (ar);  	client.bytesToReceive -= bytesReceived;  	if (bytesReceived > 0) {  		client.lastReceiveTime = programClock.ElapsedMilliseconds;  	}  	if (client.bytesToReceive == 0) {  		//We have a header or a payload  		if (!client.isRecevingPayload) {  			//We have a header  			client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  			int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  			if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  				Console.WriteLine ("Invalid TCP message. Disconnecting client.");  				DisconnectClient (client);  				return;  			}  			if (messagePayload == 0) {  				client.incomingMessage.data = null;  				HandleMessage (client' client.incomingMessage);  				client.incomingMessage = new NetworkMessage ();  				client.incomingMessage.data = new byte[8];  				client.bytesToReceive = 8;  			}  			else {  				client.isRecevingPayload = true;  				client.incomingMessage.data = new byte[messagePayload];  				client.bytesToReceive = messagePayload;  			}  		}  		else {  			//We have a payload  			HandleMessage (client' client.incomingMessage);  			client.isRecevingPayload = false;  			client.incomingMessage = new NetworkMessage ();  			client.incomingMessage.data = new byte[8];  			client.bytesToReceive = 8;  		}  	}  	client.clientConnection.GetStream ().BeginRead (client.incomingMessage.data' client.incomingMessage.data.Length - client.bytesToReceive' client.bytesToReceive' ReceiveCallback' client);  }  catch (Exception e) {  	Console.WriteLine ("Error reading data' Exception: " + e);  	DisconnectClient (client);  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: try {  	int bytesReceived = client.clientConnection.GetStream ().EndRead (ar);  	client.bytesToReceive -= bytesReceived;  	if (bytesReceived > 0) {  		client.lastReceiveTime = programClock.ElapsedMilliseconds;  	}  	if (client.bytesToReceive == 0) {  		//We have a header or a payload  		if (!client.isRecevingPayload) {  			//We have a header  			client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  			int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  			if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  				Console.WriteLine ("Invalid TCP message. Disconnecting client.");  				DisconnectClient (client);  				return;  			}  			if (messagePayload == 0) {  				client.incomingMessage.data = null;  				HandleMessage (client' client.incomingMessage);  				client.incomingMessage = new NetworkMessage ();  				client.incomingMessage.data = new byte[8];  				client.bytesToReceive = 8;  			}  			else {  				client.isRecevingPayload = true;  				client.incomingMessage.data = new byte[messagePayload];  				client.bytesToReceive = messagePayload;  			}  		}  		else {  			//We have a payload  			HandleMessage (client' client.incomingMessage);  			client.isRecevingPayload = false;  			client.incomingMessage = new NetworkMessage ();  			client.incomingMessage.data = new byte[8];  			client.bytesToReceive = 8;  		}  	}  	client.clientConnection.GetStream ().BeginRead (client.incomingMessage.data' client.incomingMessage.data.Length - client.bytesToReceive' client.bytesToReceive' ReceiveCallback' client);  }  catch (Exception e) {  	Console.WriteLine ("Error reading data' Exception: " + e);  	DisconnectClient (client);  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: try {  	int bytesReceived = client.clientConnection.GetStream ().EndRead (ar);  	client.bytesToReceive -= bytesReceived;  	if (bytesReceived > 0) {  		client.lastReceiveTime = programClock.ElapsedMilliseconds;  	}  	if (client.bytesToReceive == 0) {  		//We have a header or a payload  		if (!client.isRecevingPayload) {  			//We have a header  			client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  			int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  			if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  				Console.WriteLine ("Invalid TCP message. Disconnecting client.");  				DisconnectClient (client);  				return;  			}  			if (messagePayload == 0) {  				client.incomingMessage.data = null;  				HandleMessage (client' client.incomingMessage);  				client.incomingMessage = new NetworkMessage ();  				client.incomingMessage.data = new byte[8];  				client.bytesToReceive = 8;  			}  			else {  				client.isRecevingPayload = true;  				client.incomingMessage.data = new byte[messagePayload];  				client.bytesToReceive = messagePayload;  			}  		}  		else {  			//We have a payload  			HandleMessage (client' client.incomingMessage);  			client.isRecevingPayload = false;  			client.incomingMessage = new NetworkMessage ();  			client.incomingMessage.data = new byte[8];  			client.bytesToReceive = 8;  		}  	}  	client.clientConnection.GetStream ().BeginRead (client.incomingMessage.data' client.incomingMessage.data.Length - client.bytesToReceive' client.bytesToReceive' ReceiveCallback' client);  }  catch (Exception e) {  	Console.WriteLine ("Error reading data' Exception: " + e);  	DisconnectClient (client);  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: try {  	int bytesReceived = client.clientConnection.GetStream ().EndRead (ar);  	client.bytesToReceive -= bytesReceived;  	if (bytesReceived > 0) {  		client.lastReceiveTime = programClock.ElapsedMilliseconds;  	}  	if (client.bytesToReceive == 0) {  		//We have a header or a payload  		if (!client.isRecevingPayload) {  			//We have a header  			client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  			int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  			if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  				Console.WriteLine ("Invalid TCP message. Disconnecting client.");  				DisconnectClient (client);  				return;  			}  			if (messagePayload == 0) {  				client.incomingMessage.data = null;  				HandleMessage (client' client.incomingMessage);  				client.incomingMessage = new NetworkMessage ();  				client.incomingMessage.data = new byte[8];  				client.bytesToReceive = 8;  			}  			else {  				client.isRecevingPayload = true;  				client.incomingMessage.data = new byte[messagePayload];  				client.bytesToReceive = messagePayload;  			}  		}  		else {  			//We have a payload  			HandleMessage (client' client.incomingMessage);  			client.isRecevingPayload = false;  			client.incomingMessage = new NetworkMessage ();  			client.incomingMessage.data = new byte[8];  			client.bytesToReceive = 8;  		}  	}  	client.clientConnection.GetStream ().BeginRead (client.incomingMessage.data' client.incomingMessage.data.Length - client.bytesToReceive' client.bytesToReceive' ReceiveCallback' client);  }  catch (Exception e) {  	Console.WriteLine ("Error reading data' Exception: " + e);  	DisconnectClient (client);  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (client.bytesToReceive == 0) {  	//We have a header or a payload  	if (!client.isRecevingPayload) {  		//We have a header  		client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  		int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  		if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  			Console.WriteLine ("Invalid TCP message. Disconnecting client.");  			DisconnectClient (client);  			return;  		}  		if (messagePayload == 0) {  			client.incomingMessage.data = null;  			HandleMessage (client' client.incomingMessage);  			client.incomingMessage = new NetworkMessage ();  			client.incomingMessage.data = new byte[8];  			client.bytesToReceive = 8;  		}  		else {  			client.isRecevingPayload = true;  			client.incomingMessage.data = new byte[messagePayload];  			client.bytesToReceive = messagePayload;  		}  	}  	else {  		//We have a payload  		HandleMessage (client' client.incomingMessage);  		client.isRecevingPayload = false;  		client.incomingMessage = new NetworkMessage ();  		client.incomingMessage.data = new byte[8];  		client.bytesToReceive = 8;  	}  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (client.bytesToReceive == 0) {  	//We have a header or a payload  	if (!client.isRecevingPayload) {  		//We have a header  		client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  		int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  		if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  			Console.WriteLine ("Invalid TCP message. Disconnecting client.");  			DisconnectClient (client);  			return;  		}  		if (messagePayload == 0) {  			client.incomingMessage.data = null;  			HandleMessage (client' client.incomingMessage);  			client.incomingMessage = new NetworkMessage ();  			client.incomingMessage.data = new byte[8];  			client.bytesToReceive = 8;  		}  		else {  			client.isRecevingPayload = true;  			client.incomingMessage.data = new byte[messagePayload];  			client.bytesToReceive = messagePayload;  		}  	}  	else {  		//We have a payload  		HandleMessage (client' client.incomingMessage);  		client.isRecevingPayload = false;  		client.incomingMessage = new NetworkMessage ();  		client.incomingMessage.data = new byte[8];  		client.bytesToReceive = 8;  	}  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (client.bytesToReceive == 0) {  	//We have a header or a payload  	if (!client.isRecevingPayload) {  		//We have a header  		client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  		int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  		if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  			Console.WriteLine ("Invalid TCP message. Disconnecting client.");  			DisconnectClient (client);  			return;  		}  		if (messagePayload == 0) {  			client.incomingMessage.data = null;  			HandleMessage (client' client.incomingMessage);  			client.incomingMessage = new NetworkMessage ();  			client.incomingMessage.data = new byte[8];  			client.bytesToReceive = 8;  		}  		else {  			client.isRecevingPayload = true;  			client.incomingMessage.data = new byte[messagePayload];  			client.bytesToReceive = messagePayload;  		}  	}  	else {  		//We have a payload  		HandleMessage (client' client.incomingMessage);  		client.isRecevingPayload = false;  		client.incomingMessage = new NetworkMessage ();  		client.incomingMessage.data = new byte[8];  		client.bytesToReceive = 8;  	}  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (client.bytesToReceive == 0) {  	//We have a header or a payload  	if (!client.isRecevingPayload) {  		//We have a header  		client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  		int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  		if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  			Console.WriteLine ("Invalid TCP message. Disconnecting client.");  			DisconnectClient (client);  			return;  		}  		if (messagePayload == 0) {  			client.incomingMessage.data = null;  			HandleMessage (client' client.incomingMessage);  			client.incomingMessage = new NetworkMessage ();  			client.incomingMessage.data = new byte[8];  			client.bytesToReceive = 8;  		}  		else {  			client.isRecevingPayload = true;  			client.incomingMessage.data = new byte[messagePayload];  			client.bytesToReceive = messagePayload;  		}  	}  	else {  		//We have a payload  		HandleMessage (client' client.incomingMessage);  		client.isRecevingPayload = false;  		client.incomingMessage = new NetworkMessage ();  		client.incomingMessage.data = new byte[8];  		client.bytesToReceive = 8;  	}  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (client.bytesToReceive == 0) {  	//We have a header or a payload  	if (!client.isRecevingPayload) {  		//We have a header  		client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  		int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  		if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  			Console.WriteLine ("Invalid TCP message. Disconnecting client.");  			DisconnectClient (client);  			return;  		}  		if (messagePayload == 0) {  			client.incomingMessage.data = null;  			HandleMessage (client' client.incomingMessage);  			client.incomingMessage = new NetworkMessage ();  			client.incomingMessage.data = new byte[8];  			client.bytesToReceive = 8;  		}  		else {  			client.isRecevingPayload = true;  			client.incomingMessage.data = new byte[messagePayload];  			client.bytesToReceive = messagePayload;  		}  	}  	else {  		//We have a payload  		HandleMessage (client' client.incomingMessage);  		client.isRecevingPayload = false;  		client.incomingMessage = new NetworkMessage ();  		client.incomingMessage.data = new byte[8];  		client.bytesToReceive = 8;  	}  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (!client.isRecevingPayload) {  	//We have a header  	client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  	int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  	if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  		Console.WriteLine ("Invalid TCP message. Disconnecting client.");  		DisconnectClient (client);  		return;  	}  	if (messagePayload == 0) {  		client.incomingMessage.data = null;  		HandleMessage (client' client.incomingMessage);  		client.incomingMessage = new NetworkMessage ();  		client.incomingMessage.data = new byte[8];  		client.bytesToReceive = 8;  	}  	else {  		client.isRecevingPayload = true;  		client.incomingMessage.data = new byte[messagePayload];  		client.bytesToReceive = messagePayload;  	}  }  else {  	//We have a payload  	HandleMessage (client' client.incomingMessage);  	client.isRecevingPayload = false;  	client.incomingMessage = new NetworkMessage ();  	client.incomingMessage.data = new byte[8];  	client.bytesToReceive = 8;  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (!client.isRecevingPayload) {  	//We have a header  	client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  	int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  	if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  		Console.WriteLine ("Invalid TCP message. Disconnecting client.");  		DisconnectClient (client);  		return;  	}  	if (messagePayload == 0) {  		client.incomingMessage.data = null;  		HandleMessage (client' client.incomingMessage);  		client.incomingMessage = new NetworkMessage ();  		client.incomingMessage.data = new byte[8];  		client.bytesToReceive = 8;  	}  	else {  		client.isRecevingPayload = true;  		client.incomingMessage.data = new byte[messagePayload];  		client.bytesToReceive = messagePayload;  	}  }  else {  	//We have a payload  	HandleMessage (client' client.incomingMessage);  	client.isRecevingPayload = false;  	client.incomingMessage = new NetworkMessage ();  	client.incomingMessage.data = new byte[8];  	client.bytesToReceive = 8;  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (!client.isRecevingPayload) {  	//We have a header  	client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  	int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  	if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  		Console.WriteLine ("Invalid TCP message. Disconnecting client.");  		DisconnectClient (client);  		return;  	}  	if (messagePayload == 0) {  		client.incomingMessage.data = null;  		HandleMessage (client' client.incomingMessage);  		client.incomingMessage = new NetworkMessage ();  		client.incomingMessage.data = new byte[8];  		client.bytesToReceive = 8;  	}  	else {  		client.isRecevingPayload = true;  		client.incomingMessage.data = new byte[messagePayload];  		client.bytesToReceive = messagePayload;  	}  }  else {  	//We have a payload  	HandleMessage (client' client.incomingMessage);  	client.isRecevingPayload = false;  	client.incomingMessage = new NetworkMessage ();  	client.incomingMessage.data = new byte[8];  	client.bytesToReceive = 8;  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (!client.isRecevingPayload) {  	//We have a header  	client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  	int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  	if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  		Console.WriteLine ("Invalid TCP message. Disconnecting client.");  		DisconnectClient (client);  		return;  	}  	if (messagePayload == 0) {  		client.incomingMessage.data = null;  		HandleMessage (client' client.incomingMessage);  		client.incomingMessage = new NetworkMessage ();  		client.incomingMessage.data = new byte[8];  		client.bytesToReceive = 8;  	}  	else {  		client.isRecevingPayload = true;  		client.incomingMessage.data = new byte[messagePayload];  		client.bytesToReceive = messagePayload;  	}  }  else {  	//We have a payload  	HandleMessage (client' client.incomingMessage);  	client.isRecevingPayload = false;  	client.incomingMessage = new NetworkMessage ();  	client.incomingMessage.data = new byte[8];  	client.bytesToReceive = 8;  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (!client.isRecevingPayload) {  	//We have a header  	client.incomingMessage.type = BitConverter.ToInt32 (client.incomingMessage.data' 0);  	int messagePayload = BitConverter.ToInt32 (client.incomingMessage.data' 4);  	if (messagePayload > MAX_PAYLOAD_SIZE || MAX_PAYLOAD_SIZE < 0) {  		Console.WriteLine ("Invalid TCP message. Disconnecting client.");  		DisconnectClient (client);  		return;  	}  	if (messagePayload == 0) {  		client.incomingMessage.data = null;  		HandleMessage (client' client.incomingMessage);  		client.incomingMessage = new NetworkMessage ();  		client.incomingMessage.data = new byte[8];  		client.bytesToReceive = 8;  	}  	else {  		client.isRecevingPayload = true;  		client.incomingMessage.data = new byte[messagePayload];  		client.bytesToReceive = messagePayload;  	}  }  else {  	//We have a payload  	HandleMessage (client' client.incomingMessage);  	client.isRecevingPayload = false;  	client.incomingMessage = new NetworkMessage ();  	client.incomingMessage.data = new byte[8];  	client.bytesToReceive = 8;  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (messagePayload == 0) {  	client.incomingMessage.data = null;  	HandleMessage (client' client.incomingMessage);  	client.incomingMessage = new NetworkMessage ();  	client.incomingMessage.data = new byte[8];  	client.bytesToReceive = 8;  }  else {  	client.isRecevingPayload = true;  	client.incomingMessage.data = new byte[messagePayload];  	client.bytesToReceive = messagePayload;  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: if (messagePayload == 0) {  	client.incomingMessage.data = null;  	HandleMessage (client' client.incomingMessage);  	client.incomingMessage = new NetworkMessage ();  	client.incomingMessage.data = new byte[8];  	client.bytesToReceive = 8;  }  else {  	client.isRecevingPayload = true;  	client.incomingMessage.data = new byte[messagePayload];  	client.bytesToReceive = messagePayload;  }  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: client.incomingMessage.data = new byte[8];  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: client.bytesToReceive = 8;  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: client.incomingMessage.data = new byte[8];  
Magic Number,DMPServerReportingReceiver,MainClass,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\Main.cs,ReceiveCallback,The following statement contains a magic number: client.bytesToReceive = 8;  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: while (true) {  	try {  		if (reportTCPClient == null) {  			AttemptToConnect ();  			if (reportTCPClient != null) {  				Console.WriteLine ("Sending all client reports");  				foreach (ClientObject client in MainClass.clients.ToArray ()) {  					int clientID;  					if (!clientIDs.TryGetValue (client' out clientID)) {  						continue;  					}  					ReportData connectData = new ReportData ();  					connectData.clientID = clientID;  					connectData.reportType = ReportType.CONNECT;  					connectData.serverReport = new ServerReport ();  					connectData.serverReport.gameAddress = client.address.Address.ToString ();  					byte[] connectBytes = GetReportBytes (connectData);  					reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  					if (client.initialized && client.lastReport != null) {  						ReportData lastData = new ReportData ();  						lastData.clientID = clientID;  						lastData.serverReport = client.lastReport;  						lastData.reportType = ReportType.REPORT;  						byte[] lastBytes = GetReportBytes (lastData);  						if (lastBytes != null) {  							reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  						}  					}  				}  				Console.WriteLine ("Sent all client reports");  			}  			else {  				//Try to connect every minute  				Console.WriteLine ("Failed to connect' waiting 60 seconds.");  				Thread.Sleep (60000);  			}  		}  		if (reportTCPClient != null) {  			while (reportDataQueue.Count > 0) {  				ReportData rd;  				lock (reportDataQueue) {  					rd = reportDataQueue.Dequeue ();  				}  				byte[] reportBytes = GetReportBytes (rd);  				if (reportBytes != null) {  					reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  					lastSendTime = MainClass.programClock.ElapsedMilliseconds;  				}  			}  			//30 sec heartbeat  			if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  				Console.WriteLine ("Sending heartbeat");  				byte[] heartBeat = new byte[8];  				reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			}  			//60 sec timeout  			if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  				Console.WriteLine ("Reporting tee connection timed out.");  				try {  					reportTCPClient.Close ();  				}  				catch {  					//Don't care  				}  				reportTCPClient = null;  			}  		}  	}  	catch (Exception e) {  		Console.WriteLine ("Report tee error: " + e);  		if (reportTCPClient != null) {  			try {  				reportTCPClient.Close ();  			}  			catch {  				//Don't care.  			}  			reportTCPClient = null;  			Thread.Sleep (60000);  		}  	}  	Thread.Sleep (1000);  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: while (true) {  	try {  		if (reportTCPClient == null) {  			AttemptToConnect ();  			if (reportTCPClient != null) {  				Console.WriteLine ("Sending all client reports");  				foreach (ClientObject client in MainClass.clients.ToArray ()) {  					int clientID;  					if (!clientIDs.TryGetValue (client' out clientID)) {  						continue;  					}  					ReportData connectData = new ReportData ();  					connectData.clientID = clientID;  					connectData.reportType = ReportType.CONNECT;  					connectData.serverReport = new ServerReport ();  					connectData.serverReport.gameAddress = client.address.Address.ToString ();  					byte[] connectBytes = GetReportBytes (connectData);  					reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  					if (client.initialized && client.lastReport != null) {  						ReportData lastData = new ReportData ();  						lastData.clientID = clientID;  						lastData.serverReport = client.lastReport;  						lastData.reportType = ReportType.REPORT;  						byte[] lastBytes = GetReportBytes (lastData);  						if (lastBytes != null) {  							reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  						}  					}  				}  				Console.WriteLine ("Sent all client reports");  			}  			else {  				//Try to connect every minute  				Console.WriteLine ("Failed to connect' waiting 60 seconds.");  				Thread.Sleep (60000);  			}  		}  		if (reportTCPClient != null) {  			while (reportDataQueue.Count > 0) {  				ReportData rd;  				lock (reportDataQueue) {  					rd = reportDataQueue.Dequeue ();  				}  				byte[] reportBytes = GetReportBytes (rd);  				if (reportBytes != null) {  					reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  					lastSendTime = MainClass.programClock.ElapsedMilliseconds;  				}  			}  			//30 sec heartbeat  			if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  				Console.WriteLine ("Sending heartbeat");  				byte[] heartBeat = new byte[8];  				reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			}  			//60 sec timeout  			if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  				Console.WriteLine ("Reporting tee connection timed out.");  				try {  					reportTCPClient.Close ();  				}  				catch {  					//Don't care  				}  				reportTCPClient = null;  			}  		}  	}  	catch (Exception e) {  		Console.WriteLine ("Report tee error: " + e);  		if (reportTCPClient != null) {  			try {  				reportTCPClient.Close ();  			}  			catch {  				//Don't care.  			}  			reportTCPClient = null;  			Thread.Sleep (60000);  		}  	}  	Thread.Sleep (1000);  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: while (true) {  	try {  		if (reportTCPClient == null) {  			AttemptToConnect ();  			if (reportTCPClient != null) {  				Console.WriteLine ("Sending all client reports");  				foreach (ClientObject client in MainClass.clients.ToArray ()) {  					int clientID;  					if (!clientIDs.TryGetValue (client' out clientID)) {  						continue;  					}  					ReportData connectData = new ReportData ();  					connectData.clientID = clientID;  					connectData.reportType = ReportType.CONNECT;  					connectData.serverReport = new ServerReport ();  					connectData.serverReport.gameAddress = client.address.Address.ToString ();  					byte[] connectBytes = GetReportBytes (connectData);  					reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  					if (client.initialized && client.lastReport != null) {  						ReportData lastData = new ReportData ();  						lastData.clientID = clientID;  						lastData.serverReport = client.lastReport;  						lastData.reportType = ReportType.REPORT;  						byte[] lastBytes = GetReportBytes (lastData);  						if (lastBytes != null) {  							reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  						}  					}  				}  				Console.WriteLine ("Sent all client reports");  			}  			else {  				//Try to connect every minute  				Console.WriteLine ("Failed to connect' waiting 60 seconds.");  				Thread.Sleep (60000);  			}  		}  		if (reportTCPClient != null) {  			while (reportDataQueue.Count > 0) {  				ReportData rd;  				lock (reportDataQueue) {  					rd = reportDataQueue.Dequeue ();  				}  				byte[] reportBytes = GetReportBytes (rd);  				if (reportBytes != null) {  					reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  					lastSendTime = MainClass.programClock.ElapsedMilliseconds;  				}  			}  			//30 sec heartbeat  			if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  				Console.WriteLine ("Sending heartbeat");  				byte[] heartBeat = new byte[8];  				reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			}  			//60 sec timeout  			if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  				Console.WriteLine ("Reporting tee connection timed out.");  				try {  					reportTCPClient.Close ();  				}  				catch {  					//Don't care  				}  				reportTCPClient = null;  			}  		}  	}  	catch (Exception e) {  		Console.WriteLine ("Report tee error: " + e);  		if (reportTCPClient != null) {  			try {  				reportTCPClient.Close ();  			}  			catch {  				//Don't care.  			}  			reportTCPClient = null;  			Thread.Sleep (60000);  		}  	}  	Thread.Sleep (1000);  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: while (true) {  	try {  		if (reportTCPClient == null) {  			AttemptToConnect ();  			if (reportTCPClient != null) {  				Console.WriteLine ("Sending all client reports");  				foreach (ClientObject client in MainClass.clients.ToArray ()) {  					int clientID;  					if (!clientIDs.TryGetValue (client' out clientID)) {  						continue;  					}  					ReportData connectData = new ReportData ();  					connectData.clientID = clientID;  					connectData.reportType = ReportType.CONNECT;  					connectData.serverReport = new ServerReport ();  					connectData.serverReport.gameAddress = client.address.Address.ToString ();  					byte[] connectBytes = GetReportBytes (connectData);  					reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  					if (client.initialized && client.lastReport != null) {  						ReportData lastData = new ReportData ();  						lastData.clientID = clientID;  						lastData.serverReport = client.lastReport;  						lastData.reportType = ReportType.REPORT;  						byte[] lastBytes = GetReportBytes (lastData);  						if (lastBytes != null) {  							reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  						}  					}  				}  				Console.WriteLine ("Sent all client reports");  			}  			else {  				//Try to connect every minute  				Console.WriteLine ("Failed to connect' waiting 60 seconds.");  				Thread.Sleep (60000);  			}  		}  		if (reportTCPClient != null) {  			while (reportDataQueue.Count > 0) {  				ReportData rd;  				lock (reportDataQueue) {  					rd = reportDataQueue.Dequeue ();  				}  				byte[] reportBytes = GetReportBytes (rd);  				if (reportBytes != null) {  					reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  					lastSendTime = MainClass.programClock.ElapsedMilliseconds;  				}  			}  			//30 sec heartbeat  			if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  				Console.WriteLine ("Sending heartbeat");  				byte[] heartBeat = new byte[8];  				reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			}  			//60 sec timeout  			if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  				Console.WriteLine ("Reporting tee connection timed out.");  				try {  					reportTCPClient.Close ();  				}  				catch {  					//Don't care  				}  				reportTCPClient = null;  			}  		}  	}  	catch (Exception e) {  		Console.WriteLine ("Report tee error: " + e);  		if (reportTCPClient != null) {  			try {  				reportTCPClient.Close ();  			}  			catch {  				//Don't care.  			}  			reportTCPClient = null;  			Thread.Sleep (60000);  		}  	}  	Thread.Sleep (1000);  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: while (true) {  	try {  		if (reportTCPClient == null) {  			AttemptToConnect ();  			if (reportTCPClient != null) {  				Console.WriteLine ("Sending all client reports");  				foreach (ClientObject client in MainClass.clients.ToArray ()) {  					int clientID;  					if (!clientIDs.TryGetValue (client' out clientID)) {  						continue;  					}  					ReportData connectData = new ReportData ();  					connectData.clientID = clientID;  					connectData.reportType = ReportType.CONNECT;  					connectData.serverReport = new ServerReport ();  					connectData.serverReport.gameAddress = client.address.Address.ToString ();  					byte[] connectBytes = GetReportBytes (connectData);  					reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  					if (client.initialized && client.lastReport != null) {  						ReportData lastData = new ReportData ();  						lastData.clientID = clientID;  						lastData.serverReport = client.lastReport;  						lastData.reportType = ReportType.REPORT;  						byte[] lastBytes = GetReportBytes (lastData);  						if (lastBytes != null) {  							reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  						}  					}  				}  				Console.WriteLine ("Sent all client reports");  			}  			else {  				//Try to connect every minute  				Console.WriteLine ("Failed to connect' waiting 60 seconds.");  				Thread.Sleep (60000);  			}  		}  		if (reportTCPClient != null) {  			while (reportDataQueue.Count > 0) {  				ReportData rd;  				lock (reportDataQueue) {  					rd = reportDataQueue.Dequeue ();  				}  				byte[] reportBytes = GetReportBytes (rd);  				if (reportBytes != null) {  					reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  					lastSendTime = MainClass.programClock.ElapsedMilliseconds;  				}  			}  			//30 sec heartbeat  			if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  				Console.WriteLine ("Sending heartbeat");  				byte[] heartBeat = new byte[8];  				reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			}  			//60 sec timeout  			if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  				Console.WriteLine ("Reporting tee connection timed out.");  				try {  					reportTCPClient.Close ();  				}  				catch {  					//Don't care  				}  				reportTCPClient = null;  			}  		}  	}  	catch (Exception e) {  		Console.WriteLine ("Report tee error: " + e);  		if (reportTCPClient != null) {  			try {  				reportTCPClient.Close ();  			}  			catch {  				//Don't care.  			}  			reportTCPClient = null;  			Thread.Sleep (60000);  		}  	}  	Thread.Sleep (1000);  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: while (true) {  	try {  		if (reportTCPClient == null) {  			AttemptToConnect ();  			if (reportTCPClient != null) {  				Console.WriteLine ("Sending all client reports");  				foreach (ClientObject client in MainClass.clients.ToArray ()) {  					int clientID;  					if (!clientIDs.TryGetValue (client' out clientID)) {  						continue;  					}  					ReportData connectData = new ReportData ();  					connectData.clientID = clientID;  					connectData.reportType = ReportType.CONNECT;  					connectData.serverReport = new ServerReport ();  					connectData.serverReport.gameAddress = client.address.Address.ToString ();  					byte[] connectBytes = GetReportBytes (connectData);  					reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  					if (client.initialized && client.lastReport != null) {  						ReportData lastData = new ReportData ();  						lastData.clientID = clientID;  						lastData.serverReport = client.lastReport;  						lastData.reportType = ReportType.REPORT;  						byte[] lastBytes = GetReportBytes (lastData);  						if (lastBytes != null) {  							reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  						}  					}  				}  				Console.WriteLine ("Sent all client reports");  			}  			else {  				//Try to connect every minute  				Console.WriteLine ("Failed to connect' waiting 60 seconds.");  				Thread.Sleep (60000);  			}  		}  		if (reportTCPClient != null) {  			while (reportDataQueue.Count > 0) {  				ReportData rd;  				lock (reportDataQueue) {  					rd = reportDataQueue.Dequeue ();  				}  				byte[] reportBytes = GetReportBytes (rd);  				if (reportBytes != null) {  					reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  					lastSendTime = MainClass.programClock.ElapsedMilliseconds;  				}  			}  			//30 sec heartbeat  			if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  				Console.WriteLine ("Sending heartbeat");  				byte[] heartBeat = new byte[8];  				reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			}  			//60 sec timeout  			if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  				Console.WriteLine ("Reporting tee connection timed out.");  				try {  					reportTCPClient.Close ();  				}  				catch {  					//Don't care  				}  				reportTCPClient = null;  			}  		}  	}  	catch (Exception e) {  		Console.WriteLine ("Report tee error: " + e);  		if (reportTCPClient != null) {  			try {  				reportTCPClient.Close ();  			}  			catch {  				//Don't care.  			}  			reportTCPClient = null;  			Thread.Sleep (60000);  		}  	}  	Thread.Sleep (1000);  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: try {  	if (reportTCPClient == null) {  		AttemptToConnect ();  		if (reportTCPClient != null) {  			Console.WriteLine ("Sending all client reports");  			foreach (ClientObject client in MainClass.clients.ToArray ()) {  				int clientID;  				if (!clientIDs.TryGetValue (client' out clientID)) {  					continue;  				}  				ReportData connectData = new ReportData ();  				connectData.clientID = clientID;  				connectData.reportType = ReportType.CONNECT;  				connectData.serverReport = new ServerReport ();  				connectData.serverReport.gameAddress = client.address.Address.ToString ();  				byte[] connectBytes = GetReportBytes (connectData);  				reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  				if (client.initialized && client.lastReport != null) {  					ReportData lastData = new ReportData ();  					lastData.clientID = clientID;  					lastData.serverReport = client.lastReport;  					lastData.reportType = ReportType.REPORT;  					byte[] lastBytes = GetReportBytes (lastData);  					if (lastBytes != null) {  						reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  					}  				}  			}  			Console.WriteLine ("Sent all client reports");  		}  		else {  			//Try to connect every minute  			Console.WriteLine ("Failed to connect' waiting 60 seconds.");  			Thread.Sleep (60000);  		}  	}  	if (reportTCPClient != null) {  		while (reportDataQueue.Count > 0) {  			ReportData rd;  			lock (reportDataQueue) {  				rd = reportDataQueue.Dequeue ();  			}  			byte[] reportBytes = GetReportBytes (rd);  			if (reportBytes != null) {  				reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			}  		}  		//30 sec heartbeat  		if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  			Console.WriteLine ("Sending heartbeat");  			byte[] heartBeat = new byte[8];  			reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  			lastSendTime = MainClass.programClock.ElapsedMilliseconds;  		}  		//60 sec timeout  		if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  			Console.WriteLine ("Reporting tee connection timed out.");  			try {  				reportTCPClient.Close ();  			}  			catch {  				//Don't care  			}  			reportTCPClient = null;  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Report tee error: " + e);  	if (reportTCPClient != null) {  		try {  			reportTCPClient.Close ();  		}  		catch {  			//Don't care.  		}  		reportTCPClient = null;  		Thread.Sleep (60000);  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: try {  	if (reportTCPClient == null) {  		AttemptToConnect ();  		if (reportTCPClient != null) {  			Console.WriteLine ("Sending all client reports");  			foreach (ClientObject client in MainClass.clients.ToArray ()) {  				int clientID;  				if (!clientIDs.TryGetValue (client' out clientID)) {  					continue;  				}  				ReportData connectData = new ReportData ();  				connectData.clientID = clientID;  				connectData.reportType = ReportType.CONNECT;  				connectData.serverReport = new ServerReport ();  				connectData.serverReport.gameAddress = client.address.Address.ToString ();  				byte[] connectBytes = GetReportBytes (connectData);  				reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  				if (client.initialized && client.lastReport != null) {  					ReportData lastData = new ReportData ();  					lastData.clientID = clientID;  					lastData.serverReport = client.lastReport;  					lastData.reportType = ReportType.REPORT;  					byte[] lastBytes = GetReportBytes (lastData);  					if (lastBytes != null) {  						reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  					}  				}  			}  			Console.WriteLine ("Sent all client reports");  		}  		else {  			//Try to connect every minute  			Console.WriteLine ("Failed to connect' waiting 60 seconds.");  			Thread.Sleep (60000);  		}  	}  	if (reportTCPClient != null) {  		while (reportDataQueue.Count > 0) {  			ReportData rd;  			lock (reportDataQueue) {  				rd = reportDataQueue.Dequeue ();  			}  			byte[] reportBytes = GetReportBytes (rd);  			if (reportBytes != null) {  				reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			}  		}  		//30 sec heartbeat  		if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  			Console.WriteLine ("Sending heartbeat");  			byte[] heartBeat = new byte[8];  			reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  			lastSendTime = MainClass.programClock.ElapsedMilliseconds;  		}  		//60 sec timeout  		if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  			Console.WriteLine ("Reporting tee connection timed out.");  			try {  				reportTCPClient.Close ();  			}  			catch {  				//Don't care  			}  			reportTCPClient = null;  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Report tee error: " + e);  	if (reportTCPClient != null) {  		try {  			reportTCPClient.Close ();  		}  		catch {  			//Don't care.  		}  		reportTCPClient = null;  		Thread.Sleep (60000);  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: try {  	if (reportTCPClient == null) {  		AttemptToConnect ();  		if (reportTCPClient != null) {  			Console.WriteLine ("Sending all client reports");  			foreach (ClientObject client in MainClass.clients.ToArray ()) {  				int clientID;  				if (!clientIDs.TryGetValue (client' out clientID)) {  					continue;  				}  				ReportData connectData = new ReportData ();  				connectData.clientID = clientID;  				connectData.reportType = ReportType.CONNECT;  				connectData.serverReport = new ServerReport ();  				connectData.serverReport.gameAddress = client.address.Address.ToString ();  				byte[] connectBytes = GetReportBytes (connectData);  				reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  				if (client.initialized && client.lastReport != null) {  					ReportData lastData = new ReportData ();  					lastData.clientID = clientID;  					lastData.serverReport = client.lastReport;  					lastData.reportType = ReportType.REPORT;  					byte[] lastBytes = GetReportBytes (lastData);  					if (lastBytes != null) {  						reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  					}  				}  			}  			Console.WriteLine ("Sent all client reports");  		}  		else {  			//Try to connect every minute  			Console.WriteLine ("Failed to connect' waiting 60 seconds.");  			Thread.Sleep (60000);  		}  	}  	if (reportTCPClient != null) {  		while (reportDataQueue.Count > 0) {  			ReportData rd;  			lock (reportDataQueue) {  				rd = reportDataQueue.Dequeue ();  			}  			byte[] reportBytes = GetReportBytes (rd);  			if (reportBytes != null) {  				reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			}  		}  		//30 sec heartbeat  		if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  			Console.WriteLine ("Sending heartbeat");  			byte[] heartBeat = new byte[8];  			reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  			lastSendTime = MainClass.programClock.ElapsedMilliseconds;  		}  		//60 sec timeout  		if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  			Console.WriteLine ("Reporting tee connection timed out.");  			try {  				reportTCPClient.Close ();  			}  			catch {  				//Don't care  			}  			reportTCPClient = null;  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Report tee error: " + e);  	if (reportTCPClient != null) {  		try {  			reportTCPClient.Close ();  		}  		catch {  			//Don't care.  		}  		reportTCPClient = null;  		Thread.Sleep (60000);  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: try {  	if (reportTCPClient == null) {  		AttemptToConnect ();  		if (reportTCPClient != null) {  			Console.WriteLine ("Sending all client reports");  			foreach (ClientObject client in MainClass.clients.ToArray ()) {  				int clientID;  				if (!clientIDs.TryGetValue (client' out clientID)) {  					continue;  				}  				ReportData connectData = new ReportData ();  				connectData.clientID = clientID;  				connectData.reportType = ReportType.CONNECT;  				connectData.serverReport = new ServerReport ();  				connectData.serverReport.gameAddress = client.address.Address.ToString ();  				byte[] connectBytes = GetReportBytes (connectData);  				reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  				if (client.initialized && client.lastReport != null) {  					ReportData lastData = new ReportData ();  					lastData.clientID = clientID;  					lastData.serverReport = client.lastReport;  					lastData.reportType = ReportType.REPORT;  					byte[] lastBytes = GetReportBytes (lastData);  					if (lastBytes != null) {  						reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  					}  				}  			}  			Console.WriteLine ("Sent all client reports");  		}  		else {  			//Try to connect every minute  			Console.WriteLine ("Failed to connect' waiting 60 seconds.");  			Thread.Sleep (60000);  		}  	}  	if (reportTCPClient != null) {  		while (reportDataQueue.Count > 0) {  			ReportData rd;  			lock (reportDataQueue) {  				rd = reportDataQueue.Dequeue ();  			}  			byte[] reportBytes = GetReportBytes (rd);  			if (reportBytes != null) {  				reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			}  		}  		//30 sec heartbeat  		if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  			Console.WriteLine ("Sending heartbeat");  			byte[] heartBeat = new byte[8];  			reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  			lastSendTime = MainClass.programClock.ElapsedMilliseconds;  		}  		//60 sec timeout  		if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  			Console.WriteLine ("Reporting tee connection timed out.");  			try {  				reportTCPClient.Close ();  			}  			catch {  				//Don't care  			}  			reportTCPClient = null;  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Report tee error: " + e);  	if (reportTCPClient != null) {  		try {  			reportTCPClient.Close ();  		}  		catch {  			//Don't care.  		}  		reportTCPClient = null;  		Thread.Sleep (60000);  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: try {  	if (reportTCPClient == null) {  		AttemptToConnect ();  		if (reportTCPClient != null) {  			Console.WriteLine ("Sending all client reports");  			foreach (ClientObject client in MainClass.clients.ToArray ()) {  				int clientID;  				if (!clientIDs.TryGetValue (client' out clientID)) {  					continue;  				}  				ReportData connectData = new ReportData ();  				connectData.clientID = clientID;  				connectData.reportType = ReportType.CONNECT;  				connectData.serverReport = new ServerReport ();  				connectData.serverReport.gameAddress = client.address.Address.ToString ();  				byte[] connectBytes = GetReportBytes (connectData);  				reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  				if (client.initialized && client.lastReport != null) {  					ReportData lastData = new ReportData ();  					lastData.clientID = clientID;  					lastData.serverReport = client.lastReport;  					lastData.reportType = ReportType.REPORT;  					byte[] lastBytes = GetReportBytes (lastData);  					if (lastBytes != null) {  						reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  					}  				}  			}  			Console.WriteLine ("Sent all client reports");  		}  		else {  			//Try to connect every minute  			Console.WriteLine ("Failed to connect' waiting 60 seconds.");  			Thread.Sleep (60000);  		}  	}  	if (reportTCPClient != null) {  		while (reportDataQueue.Count > 0) {  			ReportData rd;  			lock (reportDataQueue) {  				rd = reportDataQueue.Dequeue ();  			}  			byte[] reportBytes = GetReportBytes (rd);  			if (reportBytes != null) {  				reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			}  		}  		//30 sec heartbeat  		if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  			Console.WriteLine ("Sending heartbeat");  			byte[] heartBeat = new byte[8];  			reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  			lastSendTime = MainClass.programClock.ElapsedMilliseconds;  		}  		//60 sec timeout  		if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  			Console.WriteLine ("Reporting tee connection timed out.");  			try {  				reportTCPClient.Close ();  			}  			catch {  				//Don't care  			}  			reportTCPClient = null;  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Report tee error: " + e);  	if (reportTCPClient != null) {  		try {  			reportTCPClient.Close ();  		}  		catch {  			//Don't care.  		}  		reportTCPClient = null;  		Thread.Sleep (60000);  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: if (reportTCPClient == null) {  	AttemptToConnect ();  	if (reportTCPClient != null) {  		Console.WriteLine ("Sending all client reports");  		foreach (ClientObject client in MainClass.clients.ToArray ()) {  			int clientID;  			if (!clientIDs.TryGetValue (client' out clientID)) {  				continue;  			}  			ReportData connectData = new ReportData ();  			connectData.clientID = clientID;  			connectData.reportType = ReportType.CONNECT;  			connectData.serverReport = new ServerReport ();  			connectData.serverReport.gameAddress = client.address.Address.ToString ();  			byte[] connectBytes = GetReportBytes (connectData);  			reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  			if (client.initialized && client.lastReport != null) {  				ReportData lastData = new ReportData ();  				lastData.clientID = clientID;  				lastData.serverReport = client.lastReport;  				lastData.reportType = ReportType.REPORT;  				byte[] lastBytes = GetReportBytes (lastData);  				if (lastBytes != null) {  					reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  				}  			}  		}  		Console.WriteLine ("Sent all client reports");  	}  	else {  		//Try to connect every minute  		Console.WriteLine ("Failed to connect' waiting 60 seconds.");  		Thread.Sleep (60000);  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: if (reportTCPClient != null) {  	Console.WriteLine ("Sending all client reports");  	foreach (ClientObject client in MainClass.clients.ToArray ()) {  		int clientID;  		if (!clientIDs.TryGetValue (client' out clientID)) {  			continue;  		}  		ReportData connectData = new ReportData ();  		connectData.clientID = clientID;  		connectData.reportType = ReportType.CONNECT;  		connectData.serverReport = new ServerReport ();  		connectData.serverReport.gameAddress = client.address.Address.ToString ();  		byte[] connectBytes = GetReportBytes (connectData);  		reportTCPClient.GetStream ().Write (connectBytes' 0' connectBytes.Length);  		if (client.initialized && client.lastReport != null) {  			ReportData lastData = new ReportData ();  			lastData.clientID = clientID;  			lastData.serverReport = client.lastReport;  			lastData.reportType = ReportType.REPORT;  			byte[] lastBytes = GetReportBytes (lastData);  			if (lastBytes != null) {  				reportTCPClient.GetStream ().Write (lastBytes' 0' lastBytes.Length);  			}  		}  	}  	Console.WriteLine ("Sent all client reports");  }  else {  	//Try to connect every minute  	Console.WriteLine ("Failed to connect' waiting 60 seconds.");  	Thread.Sleep (60000);  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: Thread.Sleep (60000);  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: if (reportTCPClient != null) {  	while (reportDataQueue.Count > 0) {  		ReportData rd;  		lock (reportDataQueue) {  			rd = reportDataQueue.Dequeue ();  		}  		byte[] reportBytes = GetReportBytes (rd);  		if (reportBytes != null) {  			reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  			lastSendTime = MainClass.programClock.ElapsedMilliseconds;  		}  	}  	//30 sec heartbeat  	if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  		Console.WriteLine ("Sending heartbeat");  		byte[] heartBeat = new byte[8];  		reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  		lastSendTime = MainClass.programClock.ElapsedMilliseconds;  	}  	//60 sec timeout  	if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  		Console.WriteLine ("Reporting tee connection timed out.");  		try {  			reportTCPClient.Close ();  		}  		catch {  			//Don't care  		}  		reportTCPClient = null;  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: if (reportTCPClient != null) {  	while (reportDataQueue.Count > 0) {  		ReportData rd;  		lock (reportDataQueue) {  			rd = reportDataQueue.Dequeue ();  		}  		byte[] reportBytes = GetReportBytes (rd);  		if (reportBytes != null) {  			reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  			lastSendTime = MainClass.programClock.ElapsedMilliseconds;  		}  	}  	//30 sec heartbeat  	if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  		Console.WriteLine ("Sending heartbeat");  		byte[] heartBeat = new byte[8];  		reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  		lastSendTime = MainClass.programClock.ElapsedMilliseconds;  	}  	//60 sec timeout  	if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  		Console.WriteLine ("Reporting tee connection timed out.");  		try {  			reportTCPClient.Close ();  		}  		catch {  			//Don't care  		}  		reportTCPClient = null;  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: if (reportTCPClient != null) {  	while (reportDataQueue.Count > 0) {  		ReportData rd;  		lock (reportDataQueue) {  			rd = reportDataQueue.Dequeue ();  		}  		byte[] reportBytes = GetReportBytes (rd);  		if (reportBytes != null) {  			reportTCPClient.GetStream ().Write (reportBytes' 0' reportBytes.Length);  			lastSendTime = MainClass.programClock.ElapsedMilliseconds;  		}  	}  	//30 sec heartbeat  	if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  		Console.WriteLine ("Sending heartbeat");  		byte[] heartBeat = new byte[8];  		reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  		lastSendTime = MainClass.programClock.ElapsedMilliseconds;  	}  	//60 sec timeout  	if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  		Console.WriteLine ("Reporting tee connection timed out.");  		try {  			reportTCPClient.Close ();  		}  		catch {  			//Don't care  		}  		reportTCPClient = null;  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  	Console.WriteLine ("Sending heartbeat");  	byte[] heartBeat = new byte[8];  	reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  	lastSendTime = MainClass.programClock.ElapsedMilliseconds;  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: if ((MainClass.programClock.ElapsedMilliseconds - lastSendTime) > 30000) {  	Console.WriteLine ("Sending heartbeat");  	byte[] heartBeat = new byte[8];  	reportTCPClient.GetStream ().Write (heartBeat' 0' heartBeat.Length);  	lastSendTime = MainClass.programClock.ElapsedMilliseconds;  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: if ((MainClass.programClock.ElapsedMilliseconds - lastReceiveTime) > 60000) {  	Console.WriteLine ("Reporting tee connection timed out.");  	try {  		reportTCPClient.Close ();  	}  	catch {  		//Don't care  	}  	reportTCPClient = null;  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: if (reportTCPClient != null) {  	try {  		reportTCPClient.Close ();  	}  	catch {  		//Don't care.  	}  	reportTCPClient = null;  	Thread.Sleep (60000);  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: Thread.Sleep (60000);  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,SendThreadMain,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: try {  	if (receiveClient != reportTCPClient) {  		receiveClient.Close ();  		return;  	}  	int receivedBytes = receiveClient.GetStream ().EndRead (ar);  	if (receivedBytes > 0) {  		lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  		bytesToReceive -= receivedBytes;  		if (bytesToReceive == 0) {  			if (!receivingHeader) {  				byte[] typeBytes = new byte[4];  				byte[] lengthBytes = new byte[4];  				Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  				Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  				if (BitConverter.IsLittleEndian) {  					Array.Reverse (typeBytes);  					Array.Reverse (lengthBytes);  				}  				receivingType = BitConverter.ToInt32 (typeBytes' 0);  				int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  				if (receivingLength == 0) {  					if (receivingType == 0) {  						Console.WriteLine ("Received heartbeat");  					}  					bytesToReceive = 8;  					receiveBytes = new byte[8];  				}  				else {  					receivingHeader = true;  					bytesToReceive = receivingLength;  					receiveBytes = new byte[receivingLength];  				}  			}  			else {  				Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  				receivingHeader = false;  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  		}  	}  	receiveClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' receiveClient);  }  catch {  	try {  		receiveClient.Close ();  	}  	catch {  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: try {  	if (receiveClient != reportTCPClient) {  		receiveClient.Close ();  		return;  	}  	int receivedBytes = receiveClient.GetStream ().EndRead (ar);  	if (receivedBytes > 0) {  		lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  		bytesToReceive -= receivedBytes;  		if (bytesToReceive == 0) {  			if (!receivingHeader) {  				byte[] typeBytes = new byte[4];  				byte[] lengthBytes = new byte[4];  				Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  				Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  				if (BitConverter.IsLittleEndian) {  					Array.Reverse (typeBytes);  					Array.Reverse (lengthBytes);  				}  				receivingType = BitConverter.ToInt32 (typeBytes' 0);  				int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  				if (receivingLength == 0) {  					if (receivingType == 0) {  						Console.WriteLine ("Received heartbeat");  					}  					bytesToReceive = 8;  					receiveBytes = new byte[8];  				}  				else {  					receivingHeader = true;  					bytesToReceive = receivingLength;  					receiveBytes = new byte[receivingLength];  				}  			}  			else {  				Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  				receivingHeader = false;  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  		}  	}  	receiveClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' receiveClient);  }  catch {  	try {  		receiveClient.Close ();  	}  	catch {  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: try {  	if (receiveClient != reportTCPClient) {  		receiveClient.Close ();  		return;  	}  	int receivedBytes = receiveClient.GetStream ().EndRead (ar);  	if (receivedBytes > 0) {  		lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  		bytesToReceive -= receivedBytes;  		if (bytesToReceive == 0) {  			if (!receivingHeader) {  				byte[] typeBytes = new byte[4];  				byte[] lengthBytes = new byte[4];  				Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  				Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  				if (BitConverter.IsLittleEndian) {  					Array.Reverse (typeBytes);  					Array.Reverse (lengthBytes);  				}  				receivingType = BitConverter.ToInt32 (typeBytes' 0);  				int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  				if (receivingLength == 0) {  					if (receivingType == 0) {  						Console.WriteLine ("Received heartbeat");  					}  					bytesToReceive = 8;  					receiveBytes = new byte[8];  				}  				else {  					receivingHeader = true;  					bytesToReceive = receivingLength;  					receiveBytes = new byte[receivingLength];  				}  			}  			else {  				Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  				receivingHeader = false;  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  		}  	}  	receiveClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' receiveClient);  }  catch {  	try {  		receiveClient.Close ();  	}  	catch {  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: try {  	if (receiveClient != reportTCPClient) {  		receiveClient.Close ();  		return;  	}  	int receivedBytes = receiveClient.GetStream ().EndRead (ar);  	if (receivedBytes > 0) {  		lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  		bytesToReceive -= receivedBytes;  		if (bytesToReceive == 0) {  			if (!receivingHeader) {  				byte[] typeBytes = new byte[4];  				byte[] lengthBytes = new byte[4];  				Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  				Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  				if (BitConverter.IsLittleEndian) {  					Array.Reverse (typeBytes);  					Array.Reverse (lengthBytes);  				}  				receivingType = BitConverter.ToInt32 (typeBytes' 0);  				int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  				if (receivingLength == 0) {  					if (receivingType == 0) {  						Console.WriteLine ("Received heartbeat");  					}  					bytesToReceive = 8;  					receiveBytes = new byte[8];  				}  				else {  					receivingHeader = true;  					bytesToReceive = receivingLength;  					receiveBytes = new byte[receivingLength];  				}  			}  			else {  				Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  				receivingHeader = false;  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  		}  	}  	receiveClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' receiveClient);  }  catch {  	try {  		receiveClient.Close ();  	}  	catch {  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: try {  	if (receiveClient != reportTCPClient) {  		receiveClient.Close ();  		return;  	}  	int receivedBytes = receiveClient.GetStream ().EndRead (ar);  	if (receivedBytes > 0) {  		lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  		bytesToReceive -= receivedBytes;  		if (bytesToReceive == 0) {  			if (!receivingHeader) {  				byte[] typeBytes = new byte[4];  				byte[] lengthBytes = new byte[4];  				Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  				Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  				if (BitConverter.IsLittleEndian) {  					Array.Reverse (typeBytes);  					Array.Reverse (lengthBytes);  				}  				receivingType = BitConverter.ToInt32 (typeBytes' 0);  				int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  				if (receivingLength == 0) {  					if (receivingType == 0) {  						Console.WriteLine ("Received heartbeat");  					}  					bytesToReceive = 8;  					receiveBytes = new byte[8];  				}  				else {  					receivingHeader = true;  					bytesToReceive = receivingLength;  					receiveBytes = new byte[receivingLength];  				}  			}  			else {  				Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  				receivingHeader = false;  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  		}  	}  	receiveClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' receiveClient);  }  catch {  	try {  		receiveClient.Close ();  	}  	catch {  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: try {  	if (receiveClient != reportTCPClient) {  		receiveClient.Close ();  		return;  	}  	int receivedBytes = receiveClient.GetStream ().EndRead (ar);  	if (receivedBytes > 0) {  		lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  		bytesToReceive -= receivedBytes;  		if (bytesToReceive == 0) {  			if (!receivingHeader) {  				byte[] typeBytes = new byte[4];  				byte[] lengthBytes = new byte[4];  				Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  				Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  				if (BitConverter.IsLittleEndian) {  					Array.Reverse (typeBytes);  					Array.Reverse (lengthBytes);  				}  				receivingType = BitConverter.ToInt32 (typeBytes' 0);  				int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  				if (receivingLength == 0) {  					if (receivingType == 0) {  						Console.WriteLine ("Received heartbeat");  					}  					bytesToReceive = 8;  					receiveBytes = new byte[8];  				}  				else {  					receivingHeader = true;  					bytesToReceive = receivingLength;  					receiveBytes = new byte[receivingLength];  				}  			}  			else {  				Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  				receivingHeader = false;  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  		}  	}  	receiveClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' receiveClient);  }  catch {  	try {  		receiveClient.Close ();  	}  	catch {  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (receivedBytes > 0) {  	lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  	bytesToReceive -= receivedBytes;  	if (bytesToReceive == 0) {  		if (!receivingHeader) {  			byte[] typeBytes = new byte[4];  			byte[] lengthBytes = new byte[4];  			Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  			Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  			if (BitConverter.IsLittleEndian) {  				Array.Reverse (typeBytes);  				Array.Reverse (lengthBytes);  			}  			receivingType = BitConverter.ToInt32 (typeBytes' 0);  			int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  			if (receivingLength == 0) {  				if (receivingType == 0) {  					Console.WriteLine ("Received heartbeat");  				}  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  			else {  				receivingHeader = true;  				bytesToReceive = receivingLength;  				receiveBytes = new byte[receivingLength];  			}  		}  		else {  			Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  			receivingHeader = false;  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (receivedBytes > 0) {  	lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  	bytesToReceive -= receivedBytes;  	if (bytesToReceive == 0) {  		if (!receivingHeader) {  			byte[] typeBytes = new byte[4];  			byte[] lengthBytes = new byte[4];  			Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  			Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  			if (BitConverter.IsLittleEndian) {  				Array.Reverse (typeBytes);  				Array.Reverse (lengthBytes);  			}  			receivingType = BitConverter.ToInt32 (typeBytes' 0);  			int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  			if (receivingLength == 0) {  				if (receivingType == 0) {  					Console.WriteLine ("Received heartbeat");  				}  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  			else {  				receivingHeader = true;  				bytesToReceive = receivingLength;  				receiveBytes = new byte[receivingLength];  			}  		}  		else {  			Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  			receivingHeader = false;  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (receivedBytes > 0) {  	lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  	bytesToReceive -= receivedBytes;  	if (bytesToReceive == 0) {  		if (!receivingHeader) {  			byte[] typeBytes = new byte[4];  			byte[] lengthBytes = new byte[4];  			Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  			Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  			if (BitConverter.IsLittleEndian) {  				Array.Reverse (typeBytes);  				Array.Reverse (lengthBytes);  			}  			receivingType = BitConverter.ToInt32 (typeBytes' 0);  			int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  			if (receivingLength == 0) {  				if (receivingType == 0) {  					Console.WriteLine ("Received heartbeat");  				}  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  			else {  				receivingHeader = true;  				bytesToReceive = receivingLength;  				receiveBytes = new byte[receivingLength];  			}  		}  		else {  			Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  			receivingHeader = false;  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (receivedBytes > 0) {  	lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  	bytesToReceive -= receivedBytes;  	if (bytesToReceive == 0) {  		if (!receivingHeader) {  			byte[] typeBytes = new byte[4];  			byte[] lengthBytes = new byte[4];  			Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  			Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  			if (BitConverter.IsLittleEndian) {  				Array.Reverse (typeBytes);  				Array.Reverse (lengthBytes);  			}  			receivingType = BitConverter.ToInt32 (typeBytes' 0);  			int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  			if (receivingLength == 0) {  				if (receivingType == 0) {  					Console.WriteLine ("Received heartbeat");  				}  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  			else {  				receivingHeader = true;  				bytesToReceive = receivingLength;  				receiveBytes = new byte[receivingLength];  			}  		}  		else {  			Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  			receivingHeader = false;  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (receivedBytes > 0) {  	lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  	bytesToReceive -= receivedBytes;  	if (bytesToReceive == 0) {  		if (!receivingHeader) {  			byte[] typeBytes = new byte[4];  			byte[] lengthBytes = new byte[4];  			Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  			Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  			if (BitConverter.IsLittleEndian) {  				Array.Reverse (typeBytes);  				Array.Reverse (lengthBytes);  			}  			receivingType = BitConverter.ToInt32 (typeBytes' 0);  			int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  			if (receivingLength == 0) {  				if (receivingType == 0) {  					Console.WriteLine ("Received heartbeat");  				}  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  			else {  				receivingHeader = true;  				bytesToReceive = receivingLength;  				receiveBytes = new byte[receivingLength];  			}  		}  		else {  			Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  			receivingHeader = false;  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (receivedBytes > 0) {  	lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  	bytesToReceive -= receivedBytes;  	if (bytesToReceive == 0) {  		if (!receivingHeader) {  			byte[] typeBytes = new byte[4];  			byte[] lengthBytes = new byte[4];  			Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  			Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  			if (BitConverter.IsLittleEndian) {  				Array.Reverse (typeBytes);  				Array.Reverse (lengthBytes);  			}  			receivingType = BitConverter.ToInt32 (typeBytes' 0);  			int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  			if (receivingLength == 0) {  				if (receivingType == 0) {  					Console.WriteLine ("Received heartbeat");  				}  				bytesToReceive = 8;  				receiveBytes = new byte[8];  			}  			else {  				receivingHeader = true;  				bytesToReceive = receivingLength;  				receiveBytes = new byte[receivingLength];  			}  		}  		else {  			Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  			receivingHeader = false;  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (bytesToReceive == 0) {  	if (!receivingHeader) {  		byte[] typeBytes = new byte[4];  		byte[] lengthBytes = new byte[4];  		Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  		Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  		if (BitConverter.IsLittleEndian) {  			Array.Reverse (typeBytes);  			Array.Reverse (lengthBytes);  		}  		receivingType = BitConverter.ToInt32 (typeBytes' 0);  		int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  		if (receivingLength == 0) {  			if (receivingType == 0) {  				Console.WriteLine ("Received heartbeat");  			}  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  		else {  			receivingHeader = true;  			bytesToReceive = receivingLength;  			receiveBytes = new byte[receivingLength];  		}  	}  	else {  		Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  		receivingHeader = false;  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (bytesToReceive == 0) {  	if (!receivingHeader) {  		byte[] typeBytes = new byte[4];  		byte[] lengthBytes = new byte[4];  		Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  		Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  		if (BitConverter.IsLittleEndian) {  			Array.Reverse (typeBytes);  			Array.Reverse (lengthBytes);  		}  		receivingType = BitConverter.ToInt32 (typeBytes' 0);  		int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  		if (receivingLength == 0) {  			if (receivingType == 0) {  				Console.WriteLine ("Received heartbeat");  			}  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  		else {  			receivingHeader = true;  			bytesToReceive = receivingLength;  			receiveBytes = new byte[receivingLength];  		}  	}  	else {  		Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  		receivingHeader = false;  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (bytesToReceive == 0) {  	if (!receivingHeader) {  		byte[] typeBytes = new byte[4];  		byte[] lengthBytes = new byte[4];  		Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  		Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  		if (BitConverter.IsLittleEndian) {  			Array.Reverse (typeBytes);  			Array.Reverse (lengthBytes);  		}  		receivingType = BitConverter.ToInt32 (typeBytes' 0);  		int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  		if (receivingLength == 0) {  			if (receivingType == 0) {  				Console.WriteLine ("Received heartbeat");  			}  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  		else {  			receivingHeader = true;  			bytesToReceive = receivingLength;  			receiveBytes = new byte[receivingLength];  		}  	}  	else {  		Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  		receivingHeader = false;  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (bytesToReceive == 0) {  	if (!receivingHeader) {  		byte[] typeBytes = new byte[4];  		byte[] lengthBytes = new byte[4];  		Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  		Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  		if (BitConverter.IsLittleEndian) {  			Array.Reverse (typeBytes);  			Array.Reverse (lengthBytes);  		}  		receivingType = BitConverter.ToInt32 (typeBytes' 0);  		int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  		if (receivingLength == 0) {  			if (receivingType == 0) {  				Console.WriteLine ("Received heartbeat");  			}  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  		else {  			receivingHeader = true;  			bytesToReceive = receivingLength;  			receiveBytes = new byte[receivingLength];  		}  	}  	else {  		Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  		receivingHeader = false;  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (bytesToReceive == 0) {  	if (!receivingHeader) {  		byte[] typeBytes = new byte[4];  		byte[] lengthBytes = new byte[4];  		Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  		Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  		if (BitConverter.IsLittleEndian) {  			Array.Reverse (typeBytes);  			Array.Reverse (lengthBytes);  		}  		receivingType = BitConverter.ToInt32 (typeBytes' 0);  		int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  		if (receivingLength == 0) {  			if (receivingType == 0) {  				Console.WriteLine ("Received heartbeat");  			}  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  		else {  			receivingHeader = true;  			bytesToReceive = receivingLength;  			receiveBytes = new byte[receivingLength];  		}  	}  	else {  		Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  		receivingHeader = false;  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (bytesToReceive == 0) {  	if (!receivingHeader) {  		byte[] typeBytes = new byte[4];  		byte[] lengthBytes = new byte[4];  		Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  		Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  		if (BitConverter.IsLittleEndian) {  			Array.Reverse (typeBytes);  			Array.Reverse (lengthBytes);  		}  		receivingType = BitConverter.ToInt32 (typeBytes' 0);  		int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  		if (receivingLength == 0) {  			if (receivingType == 0) {  				Console.WriteLine ("Received heartbeat");  			}  			bytesToReceive = 8;  			receiveBytes = new byte[8];  		}  		else {  			receivingHeader = true;  			bytesToReceive = receivingLength;  			receiveBytes = new byte[receivingLength];  		}  	}  	else {  		Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  		receivingHeader = false;  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (!receivingHeader) {  	byte[] typeBytes = new byte[4];  	byte[] lengthBytes = new byte[4];  	Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  	Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  	if (BitConverter.IsLittleEndian) {  		Array.Reverse (typeBytes);  		Array.Reverse (lengthBytes);  	}  	receivingType = BitConverter.ToInt32 (typeBytes' 0);  	int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  	if (receivingLength == 0) {  		if (receivingType == 0) {  			Console.WriteLine ("Received heartbeat");  		}  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  	else {  		receivingHeader = true;  		bytesToReceive = receivingLength;  		receiveBytes = new byte[receivingLength];  	}  }  else {  	Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  	receivingHeader = false;  	bytesToReceive = 8;  	receiveBytes = new byte[8];  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (!receivingHeader) {  	byte[] typeBytes = new byte[4];  	byte[] lengthBytes = new byte[4];  	Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  	Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  	if (BitConverter.IsLittleEndian) {  		Array.Reverse (typeBytes);  		Array.Reverse (lengthBytes);  	}  	receivingType = BitConverter.ToInt32 (typeBytes' 0);  	int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  	if (receivingLength == 0) {  		if (receivingType == 0) {  			Console.WriteLine ("Received heartbeat");  		}  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  	else {  		receivingHeader = true;  		bytesToReceive = receivingLength;  		receiveBytes = new byte[receivingLength];  	}  }  else {  	Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  	receivingHeader = false;  	bytesToReceive = 8;  	receiveBytes = new byte[8];  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (!receivingHeader) {  	byte[] typeBytes = new byte[4];  	byte[] lengthBytes = new byte[4];  	Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  	Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  	if (BitConverter.IsLittleEndian) {  		Array.Reverse (typeBytes);  		Array.Reverse (lengthBytes);  	}  	receivingType = BitConverter.ToInt32 (typeBytes' 0);  	int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  	if (receivingLength == 0) {  		if (receivingType == 0) {  			Console.WriteLine ("Received heartbeat");  		}  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  	else {  		receivingHeader = true;  		bytesToReceive = receivingLength;  		receiveBytes = new byte[receivingLength];  	}  }  else {  	Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  	receivingHeader = false;  	bytesToReceive = 8;  	receiveBytes = new byte[8];  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (!receivingHeader) {  	byte[] typeBytes = new byte[4];  	byte[] lengthBytes = new byte[4];  	Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  	Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  	if (BitConverter.IsLittleEndian) {  		Array.Reverse (typeBytes);  		Array.Reverse (lengthBytes);  	}  	receivingType = BitConverter.ToInt32 (typeBytes' 0);  	int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  	if (receivingLength == 0) {  		if (receivingType == 0) {  			Console.WriteLine ("Received heartbeat");  		}  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  	else {  		receivingHeader = true;  		bytesToReceive = receivingLength;  		receiveBytes = new byte[receivingLength];  	}  }  else {  	Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  	receivingHeader = false;  	bytesToReceive = 8;  	receiveBytes = new byte[8];  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (!receivingHeader) {  	byte[] typeBytes = new byte[4];  	byte[] lengthBytes = new byte[4];  	Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  	Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  	if (BitConverter.IsLittleEndian) {  		Array.Reverse (typeBytes);  		Array.Reverse (lengthBytes);  	}  	receivingType = BitConverter.ToInt32 (typeBytes' 0);  	int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  	if (receivingLength == 0) {  		if (receivingType == 0) {  			Console.WriteLine ("Received heartbeat");  		}  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  	else {  		receivingHeader = true;  		bytesToReceive = receivingLength;  		receiveBytes = new byte[receivingLength];  	}  }  else {  	Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  	receivingHeader = false;  	bytesToReceive = 8;  	receiveBytes = new byte[8];  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (!receivingHeader) {  	byte[] typeBytes = new byte[4];  	byte[] lengthBytes = new byte[4];  	Array.Copy (receiveBytes' 0' typeBytes' 0' typeBytes.Length);  	Array.Copy (receiveBytes' typeBytes.Length' lengthBytes' 0' lengthBytes.Length);  	if (BitConverter.IsLittleEndian) {  		Array.Reverse (typeBytes);  		Array.Reverse (lengthBytes);  	}  	receivingType = BitConverter.ToInt32 (typeBytes' 0);  	int receivingLength = BitConverter.ToInt32 (lengthBytes' 0);  	if (receivingLength == 0) {  		if (receivingType == 0) {  			Console.WriteLine ("Received heartbeat");  		}  		bytesToReceive = 8;  		receiveBytes = new byte[8];  	}  	else {  		receivingHeader = true;  		bytesToReceive = receivingLength;  		receiveBytes = new byte[receivingLength];  	}  }  else {  	Console.WriteLine ("Reporting tee' type: " + receivingType + "' length: " + receiveBytes.Length);  	receivingHeader = false;  	bytesToReceive = 8;  	receiveBytes = new byte[8];  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (receivingLength == 0) {  	if (receivingType == 0) {  		Console.WriteLine ("Received heartbeat");  	}  	bytesToReceive = 8;  	receiveBytes = new byte[8];  }  else {  	receivingHeader = true;  	bytesToReceive = receivingLength;  	receiveBytes = new byte[receivingLength];  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: if (receivingLength == 0) {  	if (receivingType == 0) {  		Console.WriteLine ("Received heartbeat");  	}  	bytesToReceive = 8;  	receiveBytes = new byte[8];  }  else {  	receivingHeader = true;  	bytesToReceive = receivingLength;  	receiveBytes = new byte[receivingLength];  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: bytesToReceive = 8;  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: receiveBytes = new byte[8];  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: bytesToReceive = 8;  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,ReceiveCallback,The following statement contains a magic number: receiveBytes = new byte[8];  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The following statement contains a magic number: try {  	IPHostEntry hostEntry = Dns.GetHostEntry ("godarklight.info.tm");  	if (hostEntry.AddressList.Length > 0) {  		IPAddress firstAddress = hostEntry.AddressList [0];  		TcpClient newConnection = new TcpClient (firstAddress.AddressFamily);  		IAsyncResult ar = newConnection.BeginConnect (firstAddress' 9003' null' null);  		if (ar.AsyncWaitHandle.WaitOne (5000)) {  			if (newConnection.Connected) {  				newConnection.EndConnect (ar);  				lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  				reportTCPClient = newConnection;  				receiveBytes = new byte[8];  				bytesToReceive = receiveBytes.Length;  				reportTCPClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' reportTCPClient);  			}  			else {  				Console.WriteLine ("Failed to connect reporting tee to " + firstAddress + "' refused");  				try {  					newConnection.Close ();  				}  				catch {  				}  			}  		}  		else {  			Console.WriteLine ("Error connecting reporting tee to " + firstAddress + "' timeout.");  			try {  				newConnection.Close ();  			}  			catch {  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Error connecting reporting tee' exception: " + e.Message);  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The following statement contains a magic number: try {  	IPHostEntry hostEntry = Dns.GetHostEntry ("godarklight.info.tm");  	if (hostEntry.AddressList.Length > 0) {  		IPAddress firstAddress = hostEntry.AddressList [0];  		TcpClient newConnection = new TcpClient (firstAddress.AddressFamily);  		IAsyncResult ar = newConnection.BeginConnect (firstAddress' 9003' null' null);  		if (ar.AsyncWaitHandle.WaitOne (5000)) {  			if (newConnection.Connected) {  				newConnection.EndConnect (ar);  				lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  				reportTCPClient = newConnection;  				receiveBytes = new byte[8];  				bytesToReceive = receiveBytes.Length;  				reportTCPClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' reportTCPClient);  			}  			else {  				Console.WriteLine ("Failed to connect reporting tee to " + firstAddress + "' refused");  				try {  					newConnection.Close ();  				}  				catch {  				}  			}  		}  		else {  			Console.WriteLine ("Error connecting reporting tee to " + firstAddress + "' timeout.");  			try {  				newConnection.Close ();  			}  			catch {  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Error connecting reporting tee' exception: " + e.Message);  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The following statement contains a magic number: try {  	IPHostEntry hostEntry = Dns.GetHostEntry ("godarklight.info.tm");  	if (hostEntry.AddressList.Length > 0) {  		IPAddress firstAddress = hostEntry.AddressList [0];  		TcpClient newConnection = new TcpClient (firstAddress.AddressFamily);  		IAsyncResult ar = newConnection.BeginConnect (firstAddress' 9003' null' null);  		if (ar.AsyncWaitHandle.WaitOne (5000)) {  			if (newConnection.Connected) {  				newConnection.EndConnect (ar);  				lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  				lastSendTime = MainClass.programClock.ElapsedMilliseconds;  				reportTCPClient = newConnection;  				receiveBytes = new byte[8];  				bytesToReceive = receiveBytes.Length;  				reportTCPClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' reportTCPClient);  			}  			else {  				Console.WriteLine ("Failed to connect reporting tee to " + firstAddress + "' refused");  				try {  					newConnection.Close ();  				}  				catch {  				}  			}  		}  		else {  			Console.WriteLine ("Error connecting reporting tee to " + firstAddress + "' timeout.");  			try {  				newConnection.Close ();  			}  			catch {  			}  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Error connecting reporting tee' exception: " + e.Message);  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The following statement contains a magic number: if (hostEntry.AddressList.Length > 0) {  	IPAddress firstAddress = hostEntry.AddressList [0];  	TcpClient newConnection = new TcpClient (firstAddress.AddressFamily);  	IAsyncResult ar = newConnection.BeginConnect (firstAddress' 9003' null' null);  	if (ar.AsyncWaitHandle.WaitOne (5000)) {  		if (newConnection.Connected) {  			newConnection.EndConnect (ar);  			lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  			lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			reportTCPClient = newConnection;  			receiveBytes = new byte[8];  			bytesToReceive = receiveBytes.Length;  			reportTCPClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' reportTCPClient);  		}  		else {  			Console.WriteLine ("Failed to connect reporting tee to " + firstAddress + "' refused");  			try {  				newConnection.Close ();  			}  			catch {  			}  		}  	}  	else {  		Console.WriteLine ("Error connecting reporting tee to " + firstAddress + "' timeout.");  		try {  			newConnection.Close ();  		}  		catch {  		}  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The following statement contains a magic number: if (hostEntry.AddressList.Length > 0) {  	IPAddress firstAddress = hostEntry.AddressList [0];  	TcpClient newConnection = new TcpClient (firstAddress.AddressFamily);  	IAsyncResult ar = newConnection.BeginConnect (firstAddress' 9003' null' null);  	if (ar.AsyncWaitHandle.WaitOne (5000)) {  		if (newConnection.Connected) {  			newConnection.EndConnect (ar);  			lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  			lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			reportTCPClient = newConnection;  			receiveBytes = new byte[8];  			bytesToReceive = receiveBytes.Length;  			reportTCPClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' reportTCPClient);  		}  		else {  			Console.WriteLine ("Failed to connect reporting tee to " + firstAddress + "' refused");  			try {  				newConnection.Close ();  			}  			catch {  			}  		}  	}  	else {  		Console.WriteLine ("Error connecting reporting tee to " + firstAddress + "' timeout.");  		try {  			newConnection.Close ();  		}  		catch {  		}  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The following statement contains a magic number: if (hostEntry.AddressList.Length > 0) {  	IPAddress firstAddress = hostEntry.AddressList [0];  	TcpClient newConnection = new TcpClient (firstAddress.AddressFamily);  	IAsyncResult ar = newConnection.BeginConnect (firstAddress' 9003' null' null);  	if (ar.AsyncWaitHandle.WaitOne (5000)) {  		if (newConnection.Connected) {  			newConnection.EndConnect (ar);  			lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  			lastSendTime = MainClass.programClock.ElapsedMilliseconds;  			reportTCPClient = newConnection;  			receiveBytes = new byte[8];  			bytesToReceive = receiveBytes.Length;  			reportTCPClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' reportTCPClient);  		}  		else {  			Console.WriteLine ("Failed to connect reporting tee to " + firstAddress + "' refused");  			try {  				newConnection.Close ();  			}  			catch {  			}  		}  	}  	else {  		Console.WriteLine ("Error connecting reporting tee to " + firstAddress + "' timeout.");  		try {  			newConnection.Close ();  		}  		catch {  		}  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The following statement contains a magic number: if (ar.AsyncWaitHandle.WaitOne (5000)) {  	if (newConnection.Connected) {  		newConnection.EndConnect (ar);  		lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  		lastSendTime = MainClass.programClock.ElapsedMilliseconds;  		reportTCPClient = newConnection;  		receiveBytes = new byte[8];  		bytesToReceive = receiveBytes.Length;  		reportTCPClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' reportTCPClient);  	}  	else {  		Console.WriteLine ("Failed to connect reporting tee to " + firstAddress + "' refused");  		try {  			newConnection.Close ();  		}  		catch {  		}  	}  }  else {  	Console.WriteLine ("Error connecting reporting tee to " + firstAddress + "' timeout.");  	try {  		newConnection.Close ();  	}  	catch {  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The following statement contains a magic number: if (ar.AsyncWaitHandle.WaitOne (5000)) {  	if (newConnection.Connected) {  		newConnection.EndConnect (ar);  		lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  		lastSendTime = MainClass.programClock.ElapsedMilliseconds;  		reportTCPClient = newConnection;  		receiveBytes = new byte[8];  		bytesToReceive = receiveBytes.Length;  		reportTCPClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' reportTCPClient);  	}  	else {  		Console.WriteLine ("Failed to connect reporting tee to " + firstAddress + "' refused");  		try {  			newConnection.Close ();  		}  		catch {  		}  	}  }  else {  	Console.WriteLine ("Error connecting reporting tee to " + firstAddress + "' timeout.");  	try {  		newConnection.Close ();  	}  	catch {  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The following statement contains a magic number: if (newConnection.Connected) {  	newConnection.EndConnect (ar);  	lastReceiveTime = MainClass.programClock.ElapsedMilliseconds;  	lastSendTime = MainClass.programClock.ElapsedMilliseconds;  	reportTCPClient = newConnection;  	receiveBytes = new byte[8];  	bytesToReceive = receiveBytes.Length;  	reportTCPClient.GetStream ().BeginRead (receiveBytes' 0' bytesToReceive' ReceiveCallback' reportTCPClient);  }  else {  	Console.WriteLine ("Failed to connect reporting tee to " + firstAddress + "' refused");  	try {  		newConnection.Close ();  	}  	catch {  	}  }  
Magic Number,DMPServerReportingReceiver,ReportTee,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ReportTee.cs,AttemptToConnect,The following statement contains a magic number: receiveBytes = new byte[8];  
Magic Number,DMPServerReportingReceiver,ServerReport,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ServerReport.cs,GetParameters,The following statement contains a magic number: if (serverName.Length > 255) {  	serverName = serverName.Substring (0' 255);  }  
Magic Number,DMPServerReportingReceiver,ServerReport,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ServerReport.cs,GetParameters,The following statement contains a magic number: if (serverName.Length > 255) {  	serverName = serverName.Substring (0' 255);  }  
Magic Number,DMPServerReportingReceiver,ServerReport,C:\repos\godarklight_DMPServerListReportingReceiver\DMPServerReportingReceiver\ServerReport.cs,GetParameters,The following statement contains a magic number: serverName = serverName.Substring (0' 255);  
