Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Csla.Xaml,CslaDataProvider,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\CslaDataProvider.cs,DoQuery,Cyclomatic complexity of the method is 8
Complex Method,Csla.Xaml,ObjectStatus,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\ObjectStatus.cs,Refresh,Cyclomatic complexity of the method is 12
Complex Method,Csla.Xaml,PropertyInfo,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyInfo.cs,SetSource,Cyclomatic complexity of the method is 11
Complex Method,Csla.Xaml,TriggerAction,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\TriggerAction.cs,HookEvent,Cyclomatic complexity of the method is 10
Long Identifier,Csla.Xaml,TriggerAction,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\TriggerAction.cs,,The length of the parameter RebindParameterDynamicallyProperty is 34.
Long Statement,Csla.Xaml,PropertyInfo,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyInfo.cs,ParseRelativeBinding,The length of the statement  "          fi = type.GetField(string.Format("{0}{1}"' path' _dependencyPropertySuffix)' BindingFlags.Instance | BindingFlags.Public); " is 122.
Long Statement,Csla.Xaml,PropertyStatus,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyStatus.cs,popup_Loaded,The length of the statement  "          (sender as Popup).HorizontalOffset = _lastAppSize.Width - _lastPosition.X - _popupLastPosition.X - _lastPopupSize.Width; " is 120.
Long Statement,Csla.Xaml,PropertyStatus,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyStatus.cs,popup_Loaded,The length of the statement  "          (sender as Popup).VerticalOffset = _lastAppSize.Height - _lastPosition.Y - _popupLastPosition.Y - _lastPopupSize.Height; " is 120.
Long Statement,Csla.Xaml,TriggerAction,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\TriggerAction.cs,CallMethod,The length of the statement  "        Trace.TraceError("Csla.Xaml.TriggerAction Error: CallMethod path error: '{0}' method not found on '{1}'' DataContext '{2}'"' MethodName' target.GetType()' this.DataContext.GetType()); " is 183.
Long Statement,Csla.Xaml,TriggerAction,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\TriggerAction.cs,HookEvent,The length of the statement  "                  this.GetType().GetMethod("CallMethod"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)); " is 164.
Long Statement,Csla.Xaml,TriggerAction,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\TriggerAction.cs,HookEvent,The length of the statement  "                  this.GetType().GetMethod("CallMethod"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)); " is 164.
Long Statement,Csla.Xaml,ViewModelBase<T>,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\ViewModelBase.cs,CreateHandler,The length of the statement  "      var p1 = new ParameterExpression[] { Expression.Parameter(typeof(object)' "sender")' Expression.Parameter(typeof(EventArgs)' "args") }; " is 135.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Net4.6\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Csla.Xaml,DataDecoratorBase,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\DataDecoratorBase.cs,FindBindings,The conditional expression  "bnd != null && bnd.RelativeSource == null && bnd.Path != null && string.IsNullOrEmpty(bnd.ElementName)"  is complex.
Complex Conditional,Csla.Xaml,PropertyInfo,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyInfo.cs,ParseRelativeBinding,The conditional expression  "sourceBinding != null          && sourceBinding.ParentBinding.RelativeSource != null          && sourceBinding.ParentBinding.RelativeSource.Mode == RelativeSourceMode.TemplatedParent          && sourceBinding.DataItem is FrameworkElement"  is complex.
Complex Conditional,Csla.Xaml,PropertyStatus,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyStatus.cs,popup_Loaded,The conditional expression  "_lastAppSize != null && _lastPosition != null && _popupLastPosition != null && _lastPopupSize != null"  is complex.
Virtual Method Call from Constructor,Csla.Xaml,PropertyInfo,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyInfo.cs,PropertyInfo,The constructor "PropertyInfo" calls a virtual method "UpdateState".
Virtual Method Call from Constructor,Csla.Xaml,PropertyInfo,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyInfo.cs,PropertyInfo,The constructor "PropertyInfo" calls a virtual method "UpdateState".
Virtual Method Call from Constructor,Csla.Xaml,PropertyStatus,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyStatus.cs,PropertyStatus,The constructor "PropertyStatus" calls a virtual method "UpdateState".
Virtual Method Call from Constructor,Csla.Xaml,PropertyStatus,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyStatus.cs,PropertyStatus,The constructor "PropertyStatus" calls a virtual method "UpdateState".
Virtual Method Call from Constructor,Csla.Xaml,PropertyStatus,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyStatus.cs,PropertyStatus,The constructor "PropertyStatus" calls a virtual method "SetSource".
Magic Number,Csla.Xaml,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\BusyAnimation.cs,ArrangeParts,The following statement contains a magic number: double theta = (2.0 * Math.PI) / NUM_STATES;
Magic Number,Csla.Xaml,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\BusyAnimation.cs,ArrangeParts,The following statement contains a magic number: for (int n = 0; n < NUM_STATES; n++)        {          FrameworkElement item = (FrameworkElement)FindChild(this' "part" + (n + 1));          if (item != null)          {            double itemTheta = theta * (double)n;              double itemScale = scale / 4.0;            double radius = (scale - itemScale) / 2.0;              double x = (radius * Math.Cos(itemTheta)) - (itemScale / 2) + (ActualWidth / 2);            double y = (radius * Math.Sin(itemTheta)) - (itemScale / 2) + (ActualHeight / 2);              item.Width = itemScale;            item.Height = itemScale;            item.SetValue(Canvas.LeftProperty' x);            item.SetValue(Canvas.TopProperty' y);          }        }
Magic Number,Csla.Xaml,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\BusyAnimation.cs,ArrangeParts,The following statement contains a magic number: for (int n = 0; n < NUM_STATES; n++)        {          FrameworkElement item = (FrameworkElement)FindChild(this' "part" + (n + 1));          if (item != null)          {            double itemTheta = theta * (double)n;              double itemScale = scale / 4.0;            double radius = (scale - itemScale) / 2.0;              double x = (radius * Math.Cos(itemTheta)) - (itemScale / 2) + (ActualWidth / 2);            double y = (radius * Math.Sin(itemTheta)) - (itemScale / 2) + (ActualHeight / 2);              item.Width = itemScale;            item.Height = itemScale;            item.SetValue(Canvas.LeftProperty' x);            item.SetValue(Canvas.TopProperty' y);          }        }
Magic Number,Csla.Xaml,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\BusyAnimation.cs,ArrangeParts,The following statement contains a magic number: for (int n = 0; n < NUM_STATES; n++)        {          FrameworkElement item = (FrameworkElement)FindChild(this' "part" + (n + 1));          if (item != null)          {            double itemTheta = theta * (double)n;              double itemScale = scale / 4.0;            double radius = (scale - itemScale) / 2.0;              double x = (radius * Math.Cos(itemTheta)) - (itemScale / 2) + (ActualWidth / 2);            double y = (radius * Math.Sin(itemTheta)) - (itemScale / 2) + (ActualHeight / 2);              item.Width = itemScale;            item.Height = itemScale;            item.SetValue(Canvas.LeftProperty' x);            item.SetValue(Canvas.TopProperty' y);          }        }
Magic Number,Csla.Xaml,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\BusyAnimation.cs,ArrangeParts,The following statement contains a magic number: for (int n = 0; n < NUM_STATES; n++)        {          FrameworkElement item = (FrameworkElement)FindChild(this' "part" + (n + 1));          if (item != null)          {            double itemTheta = theta * (double)n;              double itemScale = scale / 4.0;            double radius = (scale - itemScale) / 2.0;              double x = (radius * Math.Cos(itemTheta)) - (itemScale / 2) + (ActualWidth / 2);            double y = (radius * Math.Sin(itemTheta)) - (itemScale / 2) + (ActualHeight / 2);              item.Width = itemScale;            item.Height = itemScale;            item.SetValue(Canvas.LeftProperty' x);            item.SetValue(Canvas.TopProperty' y);          }        }
Magic Number,Csla.Xaml,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\BusyAnimation.cs,ArrangeParts,The following statement contains a magic number: for (int n = 0; n < NUM_STATES; n++)        {          FrameworkElement item = (FrameworkElement)FindChild(this' "part" + (n + 1));          if (item != null)          {            double itemTheta = theta * (double)n;              double itemScale = scale / 4.0;            double radius = (scale - itemScale) / 2.0;              double x = (radius * Math.Cos(itemTheta)) - (itemScale / 2) + (ActualWidth / 2);            double y = (radius * Math.Sin(itemTheta)) - (itemScale / 2) + (ActualHeight / 2);              item.Width = itemScale;            item.Height = itemScale;            item.SetValue(Canvas.LeftProperty' x);            item.SetValue(Canvas.TopProperty' y);          }        }
Magic Number,Csla.Xaml,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\BusyAnimation.cs,ArrangeParts,The following statement contains a magic number: for (int n = 0; n < NUM_STATES; n++)        {          FrameworkElement item = (FrameworkElement)FindChild(this' "part" + (n + 1));          if (item != null)          {            double itemTheta = theta * (double)n;              double itemScale = scale / 4.0;            double radius = (scale - itemScale) / 2.0;              double x = (radius * Math.Cos(itemTheta)) - (itemScale / 2) + (ActualWidth / 2);            double y = (radius * Math.Sin(itemTheta)) - (itemScale / 2) + (ActualHeight / 2);              item.Width = itemScale;            item.Height = itemScale;            item.SetValue(Canvas.LeftProperty' x);            item.SetValue(Canvas.TopProperty' y);          }        }
Magic Number,Csla.Xaml,InvokeMethod,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\InvokeMethod.cs,InvokeMethod,The following statement contains a magic number: if (!string.IsNullOrEmpty(triggerEvent))        {          // hook up the trigger event          var eventRef = ctrl.GetType().GetEvent(triggerEvent);          if (eventRef != null)          {            var invoke = eventRef.EventHandlerType.GetMethod("Invoke");            var p = invoke.GetParameters();            if (p.Length == 2)            {              var p1Type = p[1].ParameterType;              if (typeof(EventArgs).IsAssignableFrom(p1Type))              {                var del = Delegate.CreateDelegate(eventRef.EventHandlerType'                  this'                  this.GetType().GetMethod("CallMethod"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic));                eventRef.AddEventHandler(ctrl' del);              }              else              {                throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadTriggerEvent);              }            }            else              throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadTriggerEvent);          }        }
Magic Number,Csla.Xaml,InvokeMethod,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\InvokeMethod.cs,CallMethod,The following statement contains a magic number: try        {          if (pCount == 0)            targetMethod.Invoke(target' null);          else if (pCount == 2)            targetMethod.Invoke(target' new object[] { this' new ExecuteEventArgs          {            MethodParameter = p'            TriggerParameter = e'            TriggerSource = (FrameworkElement)_element          }});          else            throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadParams);        }        catch (System.Reflection.TargetInvocationException ex)        {          if (ex.InnerException != null)            throw ex.InnerException;          else            throw;        }
Magic Number,Csla.Xaml,PropertyInfo,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyInfo.cs,PropertyInfo,The following statement contains a magic number: Height = 20;
Magic Number,Csla.Xaml,PropertyInfo,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\PropertyInfo.cs,PropertyInfo,The following statement contains a magic number: Width = 20;
Magic Number,Csla.Xaml,TriggerAction,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\TriggerAction.cs,TriggerAction,The following statement contains a magic number: Height = 20;
Magic Number,Csla.Xaml,TriggerAction,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\TriggerAction.cs,TriggerAction,The following statement contains a magic number: Width = 20;
Magic Number,Csla.Xaml,TriggerAction,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\TriggerAction.cs,CallMethod,The following statement contains a magic number: if (pCount == 0)        {          targetMethod.Invoke(target' null);        }        else if (pCount == 2)        {          object parameterValue = null;          if (RebindParameterDynamically)            parameterValue = GetMethodParameter();          else            parameterValue = MethodParameter;            targetMethod.Invoke(target' new object[] { this' new ExecuteEventArgs              {                MethodParameter = parameterValue'                TriggerParameter = e'                TriggerSource = TargetControl              }});        }        else          throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadParams);
Magic Number,Csla.Xaml,TriggerAction,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\TriggerAction.cs,HookEvent,The following statement contains a magic number: if (!ReferenceEquals(oldTarget' newTarget) || oldEvent != newEvent)        {          if (oldTarget != null && !string.IsNullOrEmpty(oldEvent))          {            var eventRef = oldTarget.GetType().GetEvent(oldEvent);            if (eventRef != null)            {              var invoke = eventRef.EventHandlerType.GetMethod("Invoke");              var p = invoke.GetParameters();              if (p.Length == 2)              {                var p1Type = p[1].ParameterType;                if (typeof(EventArgs).IsAssignableFrom(p1Type))                {                  var del = Delegate.CreateDelegate(eventRef.EventHandlerType'                    this'                    this.GetType().GetMethod("CallMethod"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic));                  eventRef.RemoveEventHandler(oldTarget' del);                }                else                {                  throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadTriggerEvent);                }              }              else                throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadTriggerEvent);            }          }            if (newTarget != null && !string.IsNullOrEmpty(newEvent))          {            var eventRef = newTarget.GetType().GetEvent(newEvent);            if (eventRef != null)            {              var invoke = eventRef.EventHandlerType.GetMethod("Invoke");              var p = invoke.GetParameters();              if (p.Length == 2)              {                var p1Type = p[1].ParameterType;                if (typeof(EventArgs).IsAssignableFrom(p1Type))                {                  var del = Delegate.CreateDelegate(eventRef.EventHandlerType'                    this'                    this.GetType().GetMethod("CallMethod"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic));                  eventRef.AddEventHandler(newTarget' del);                }                else                {                  throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadTriggerEvent);                }              }              else                throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadTriggerEvent);            }          }        }
Magic Number,Csla.Xaml,TriggerAction,C:\repos\MarimerLLC_csla\Source\Csla.Xaml.Shared\TriggerAction.cs,HookEvent,The following statement contains a magic number: if (!ReferenceEquals(oldTarget' newTarget) || oldEvent != newEvent)        {          if (oldTarget != null && !string.IsNullOrEmpty(oldEvent))          {            var eventRef = oldTarget.GetType().GetEvent(oldEvent);            if (eventRef != null)            {              var invoke = eventRef.EventHandlerType.GetMethod("Invoke");              var p = invoke.GetParameters();              if (p.Length == 2)              {                var p1Type = p[1].ParameterType;                if (typeof(EventArgs).IsAssignableFrom(p1Type))                {                  var del = Delegate.CreateDelegate(eventRef.EventHandlerType'                    this'                    this.GetType().GetMethod("CallMethod"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic));                  eventRef.RemoveEventHandler(oldTarget' del);                }                else                {                  throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadTriggerEvent);                }              }              else                throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadTriggerEvent);            }          }            if (newTarget != null && !string.IsNullOrEmpty(newEvent))          {            var eventRef = newTarget.GetType().GetEvent(newEvent);            if (eventRef != null)            {              var invoke = eventRef.EventHandlerType.GetMethod("Invoke");              var p = invoke.GetParameters();              if (p.Length == 2)              {                var p1Type = p[1].ParameterType;                if (typeof(EventArgs).IsAssignableFrom(p1Type))                {                  var del = Delegate.CreateDelegate(eventRef.EventHandlerType'                    this'                    this.GetType().GetMethod("CallMethod"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic));                  eventRef.AddEventHandler(newTarget' del);                }                else                {                  throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadTriggerEvent);                }              }              else                throw new NotSupportedException(Csla.Properties.Resources.ExecuteBadTriggerEvent);            }          }        }
