Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Csla.Web.Design,CslaDataSourceConfiguration,C:\repos\MarimerLLC_csla\Source\Csla.Web.Shared\Design\CslaDataSourceConfiguration.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CslaDataSourceConfiguration)); " is 147.
Empty Catch Block,Csla.Web.Design,ObjectViewSchema,C:\repos\MarimerLLC_csla\Source\Csla.Web.Shared\Design\ObjectViewSchema.cs,GetFields,The method has an empty catch block.
Magic Number,Csla.Web,SelectObjectArgs,C:\repos\MarimerLLC_csla\Source\Csla.Web.Shared\SelectObjectArgs.cs,SelectObjectArgs,The following statement contains a magic number: if (!(string.IsNullOrEmpty(_sortExpression)))        {          if (_sortExpression.Length >= 5 &&            _sortExpression.Substring(_sortExpression.Length - 5) == " DESC")          {            _sortProperty = _sortExpression.Substring(0' _sortExpression.Length - 5);            _sortDirection = ListSortDirection.Descending;            }          else          {            _sortProperty = args.SortExpression;            _sortDirection = ListSortDirection.Ascending;          }        }
Magic Number,Csla.Web,SelectObjectArgs,C:\repos\MarimerLLC_csla\Source\Csla.Web.Shared\SelectObjectArgs.cs,SelectObjectArgs,The following statement contains a magic number: if (!(string.IsNullOrEmpty(_sortExpression)))        {          if (_sortExpression.Length >= 5 &&            _sortExpression.Substring(_sortExpression.Length - 5) == " DESC")          {            _sortProperty = _sortExpression.Substring(0' _sortExpression.Length - 5);            _sortDirection = ListSortDirection.Descending;            }          else          {            _sortProperty = args.SortExpression;            _sortDirection = ListSortDirection.Ascending;          }        }
Magic Number,Csla.Web,SelectObjectArgs,C:\repos\MarimerLLC_csla\Source\Csla.Web.Shared\SelectObjectArgs.cs,SelectObjectArgs,The following statement contains a magic number: if (!(string.IsNullOrEmpty(_sortExpression)))        {          if (_sortExpression.Length >= 5 &&            _sortExpression.Substring(_sortExpression.Length - 5) == " DESC")          {            _sortProperty = _sortExpression.Substring(0' _sortExpression.Length - 5);            _sortDirection = ListSortDirection.Descending;            }          else          {            _sortProperty = args.SortExpression;            _sortDirection = ListSortDirection.Ascending;          }        }
Magic Number,Csla.Web.Design,CslaDataSourceConfiguration,C:\repos\MarimerLLC_csla\Source\Csla.Web.Shared\Design\CslaDataSourceConfiguration.cs,DiscoverTypes,The following statement contains a magic number: if (discovery != null)        {          // saves the cursor and sets the wait cursor          Cursor previousCursor = Cursor.Current;          Cursor.Current = Cursors.WaitCursor;          try          {            // gets all types using the type discovery service            ICollection types = discovery.GetTypes(typeof(object)' true);            TypeComboBox.BeginUpdate();            TypeComboBox.Items.Clear();            // adds the types to the list            foreach (Type type in types)            {              if (type.Assembly.FullName.Substring(0' type.Assembly.FullName.IndexOf("'")) != "Csla" &&                typeof(Csla.Core.IBusinessObject).IsAssignableFrom(type))              {                string name = type.AssemblyQualifiedName;                if (name.Substring(name.Length - 19' 19) == "PublicKeyToken=null")                  name = name.Substring(0' name.IndexOf("'"' name.IndexOf("'") + 1));                TypeComboBox.Items.Add(name);              }            }          }          finally          {            Cursor.Current = previousCursor;            TypeComboBox.EndUpdate();          }        }
Magic Number,Csla.Web.Design,CslaDataSourceConfiguration,C:\repos\MarimerLLC_csla\Source\Csla.Web.Shared\Design\CslaDataSourceConfiguration.cs,DiscoverTypes,The following statement contains a magic number: if (discovery != null)        {          // saves the cursor and sets the wait cursor          Cursor previousCursor = Cursor.Current;          Cursor.Current = Cursors.WaitCursor;          try          {            // gets all types using the type discovery service            ICollection types = discovery.GetTypes(typeof(object)' true);            TypeComboBox.BeginUpdate();            TypeComboBox.Items.Clear();            // adds the types to the list            foreach (Type type in types)            {              if (type.Assembly.FullName.Substring(0' type.Assembly.FullName.IndexOf("'")) != "Csla" &&                typeof(Csla.Core.IBusinessObject).IsAssignableFrom(type))              {                string name = type.AssemblyQualifiedName;                if (name.Substring(name.Length - 19' 19) == "PublicKeyToken=null")                  name = name.Substring(0' name.IndexOf("'"' name.IndexOf("'") + 1));                TypeComboBox.Items.Add(name);              }            }          }          finally          {            Cursor.Current = previousCursor;            TypeComboBox.EndUpdate();          }        }
