Implementation smell,Namespace,Class,File,Method,Description
Long Method,Csla.Windows,CslaActionExtender,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtender.cs,OnClick,The method has 130 lines of code.
Long Method,Csla.Windows,CslaActionExtender,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtender.cs,ExecuteSaveAction,The method has 111 lines of code.
Long Method,Csla.Windows,CslaActionExtenderToolStrip,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtenderToolStrip.cs,OnClick,The method has 130 lines of code.
Long Method,Csla.Windows,CslaActionExtenderToolStrip,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtenderToolStrip.cs,ExecuteSaveAction,The method has 111 lines of code.
Complex Method,Csla.Windows,BindingSourceNode,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\BindingSourceNode.cs,Unbind,Cyclomatic complexity of the method is 8
Complex Method,Csla.Windows,CslaActionExtender,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtender.cs,OnClick,Cyclomatic complexity of the method is 12
Complex Method,Csla.Windows,CslaActionExtender,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtender.cs,ExecuteSaveAction,Cyclomatic complexity of the method is 13
Complex Method,Csla.Windows,CslaActionExtenderToolStrip,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtenderToolStrip.cs,OnClick,Cyclomatic complexity of the method is 12
Complex Method,Csla.Windows,CslaActionExtenderToolStrip,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtenderToolStrip.cs,ExecuteSaveAction,Cyclomatic complexity of the method is 13
Long Parameter List,Csla.Windows,HasBrokenRulesEventArgs,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\HasBrokenRulesEventArgs.cs,HasBrokenRulesEventArgs,The method has 5 parameters. Parameters: commandName' hasErrors' hasWarnings' hasInformation' autoShowBrokenRules
Long Parameter List,Csla.Windows,HasBrokenRulesEventArgs,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\HasBrokenRulesEventArgs.cs,HasBrokenRulesEventArgs,The method has 6 parameters. Parameters: cancel' commandName' hasErrors' hasWarnings' hasInformation' autoShowBrokenRules
Long Statement,Csla.Windows,CslaActionExtender,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtender.cs,OnClick,The length of the statement  "                OnErrorEncountered(new ErrorEncounteredEventArgs(props.CommandName' new InvalidCastException(Resources.ActionExtenderInvalidBindingSourceCast))); " is 145.
Long Statement,Csla.Windows,CslaActionExtender,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtender.cs,OnClick,The length of the statement  "                OnErrorEncountered(new ErrorEncounteredEventArgs(props.CommandName' new InvalidCastException(Resources.ActionExtenderInvalidBusinessObjectBaseCast))); " is 150.
Long Statement,Csla.Windows,CslaActionExtender,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtender.cs,InitializeControls,The length of the statement  "      // controls will not be enabled until the BusinessObjectPropertyChanged event fires or if it's in an appropriate state now " is 122.
Long Statement,Csla.Windows,CslaActionExtenderToolStrip,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtenderToolStrip.cs,OnClick,The length of the statement  "                OnErrorEncountered(new ErrorEncounteredEventArgs(props.CommandName' new InvalidCastException(Resources.ActionExtenderInvalidBindingSourceCast))); " is 145.
Long Statement,Csla.Windows,CslaActionExtenderToolStrip,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtenderToolStrip.cs,OnClick,The length of the statement  "                OnErrorEncountered(new ErrorEncounteredEventArgs(props.CommandName' new InvalidCastException(Resources.ActionExtenderInvalidBusinessObjectBaseCast))); " is 150.
Long Statement,Csla.Windows,CslaActionExtenderToolStrip,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtenderToolStrip.cs,InitializeControls,The length of the statement  "      // controls will not be enabled until the BusinessObjectPropertyChanged event fires or if it's in an appropriate state now " is 122.
Magic Number,Csla.Windows,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\BusyAnimation.cs,BusyAnimation_Load,The following statement contains a magic number: if (IsInDesignMode)        {          this.BusyProgressBar.Value = (int)(this.BusyProgressBar.Maximum / 2);          this.BusyProgressBar.Visible = true;        }
Magic Number,Csla.Windows,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\BusyAnimation.cs,InitializeComponent,The following statement contains a magic number: this.BusyProgressBar.Maximum = 30;
Magic Number,Csla.Windows,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\BusyAnimation.cs,InitializeComponent,The following statement contains a magic number: this.BusyProgressBar.Size = new System.Drawing.Size(100' 23);
Magic Number,Csla.Windows,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\BusyAnimation.cs,InitializeComponent,The following statement contains a magic number: this.BusyProgressBar.Size = new System.Drawing.Size(100' 23);
Magic Number,Csla.Windows,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\BusyAnimation.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(100' 23);
Magic Number,Csla.Windows,BusyAnimation,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\BusyAnimation.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(100' 23);
Missing Default,Csla.Windows,BindingSourceRefresh,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\BindingSourceRefresh.cs,Bindings_CollectionChanging,The following switch statement is missing a default case: switch (e.Action)        {          case CollectionChangeAction.Refresh:            // remove events for entire list            RegisterBindingEvents((BindingsCollection)sender' false);            break;          case CollectionChangeAction.Add:            // adding new element -  remove events for element            RegisterBindingEvent((Binding)e.Element' false);            break;          case CollectionChangeAction.Remove:            // removing element - remove events for element            RegisterBindingEvent((Binding)e.Element' false);            break;        }
Missing Default,Csla.Windows,BindingSourceRefresh,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\BindingSourceRefresh.cs,Bindings_CollectionChanged,The following switch statement is missing a default case: switch (e.Action)        {          case CollectionChangeAction.Refresh:            // refresh entire list  - add event to all items            RegisterBindingEvents((BindingsCollection)sender' true);            break;          case CollectionChangeAction.Add:            // new element added - add event to element            RegisterBindingEvent((Binding)e.Element' true);            break;          case CollectionChangeAction.Remove:            // element has been removed - do nothing            break;        }
Missing Default,Csla.Windows,CslaActionExtender,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtender.cs,OnClick,The following switch statement is missing a default case: switch (props.ActionType)                {                  case CslaFormAction.Save:                    raiseClicked = ExecuteSaveAction(savableObject' trackableObject' props);                    break;                  // case CslaFormAction.Save                    case CslaFormAction.Cancel:                      diagResult = DialogResult.Yes;                    if (_warnOnCancel && trackableObject.IsDirty)                      diagResult = MessageBox.Show(                        _warnOnCancelMessage' Resources.Warning'                        MessageBoxButtons.YesNo' MessageBoxIcon.Warning);                      if (diagResult == DialogResult.Yes)                      _bindingSourceTree.Cancel(savableObject);                      break;                  // case CslaFormAction.Cancel                    case CslaFormAction.Close:                      diagResult = DialogResult.Yes;                    if (trackableObject.IsDirty || trackableObject.IsNew)                    {                      if (_warnIfCloseOnDirty)                        diagResult = MessageBox.Show(                          _dirtyWarningMessage + Environment.NewLine + Resources.ActionExtenderCloseConfirmation'                          Resources.Warning' MessageBoxButtons.YesNo' MessageBoxIcon.Warning);                    }                      if (diagResult == DialogResult.Yes)                    {                      _bindingSourceTree.Close();                      _closeForm = true;                    }                      break;                  // case CslaFormAction.Close                    case CslaFormAction.Validate:                      if (savableObject is BusinessBase)                    {                      BusinessBase businessObject = savableObject as BusinessBase;                      if (!businessObject.IsValid)                      {                        // todo: add child broken rules                        string brokenRules = string.Empty;                        foreach (var brokenRule in businessObject.GetBrokenRules())                        {                          var lambdaBrokenRule = brokenRule;                          var friendlyName =                            PropertyInfoManager.GetRegisteredProperties(businessObject.GetType()).Find(                              c => c.Name == lambdaBrokenRule.Property).FriendlyName;                          brokenRules += string.Format("{0}: {1}{2}"' friendlyName' brokenRule' Environment.NewLine);                        }                        MessageBox.Show(brokenRules' Resources.ActionExtenderErrorCaption'                          MessageBoxButtons.OK' MessageBoxIcon.Error);                      }                      else                      {                        MessageBox.Show(_objectIsValidMessage' Resources.ActionExtenderInformationCaption'                          MessageBoxButtons.OK' MessageBoxIcon.Information);                      }                    }                      break;                  //case CslaFormAction.Validate                  }
Missing Default,Csla.Windows,CslaActionExtender,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtender.cs,ExecuteSaveAction,The following switch statement is missing a default case: switch (props.PostSaveAction)                  {                    case PostSaveActionType.None:                        if (props.RebindAfterSave)                      {                        _bindingSourceTree.Bind(savableObject);                        AddEventHooks(savableObject);                      }                      break;                      case PostSaveActionType.AndClose:                        CloseForm();                      break;                      case PostSaveActionType.AndNew:                        OnSetForNew(new CslaActionEventArgs(props.CommandName));                      AddEventHooks(savableObject);                      break;                  }
Missing Default,Csla.Windows,CslaActionExtenderToolStrip,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtenderToolStrip.cs,OnClick,The following switch statement is missing a default case: switch (props.ActionType)                {                  case CslaFormAction.Save:                    raiseClicked = ExecuteSaveAction(savableObject' trackableObject' props);                    break;                  // case CslaFormAction.Save                    case CslaFormAction.Cancel:                      diagResult = DialogResult.Yes;                    if (_warnOnCancel && trackableObject.IsDirty)                      diagResult = MessageBox.Show(                        _warnOnCancelMessage' Resources.Warning'                        MessageBoxButtons.YesNo' MessageBoxIcon.Warning);                      if (diagResult == DialogResult.Yes)                      _bindingSourceTree.Cancel(savableObject);                      break;                  // case CslaFormAction.Cancel                    case CslaFormAction.Close:                      diagResult = DialogResult.Yes;                    if (trackableObject.IsDirty || trackableObject.IsNew)                    {                      if (_warnIfCloseOnDirty)                        diagResult = MessageBox.Show(                          _dirtyWarningMessage + Environment.NewLine + Resources.ActionExtenderCloseConfirmation'                          Resources.Warning' MessageBoxButtons.YesNo' MessageBoxIcon.Warning);                    }                      if (diagResult == DialogResult.Yes)                    {                      _bindingSourceTree.Close();                      _closeForm = true;                    }                      break;                  // case CslaFormAction.Close                    case CslaFormAction.Validate:                      if (savableObject is BusinessBase)                    {                      BusinessBase businessObject = savableObject as BusinessBase;                      if (!businessObject.IsValid)                      {                        // todo: add child broken rules                        string brokenRules = string.Empty;                        foreach (var brokenRule in businessObject.GetBrokenRules())                        {                          var lambdaBrokenRule = brokenRule;                          var friendlyName =                            PropertyInfoManager.GetRegisteredProperties(businessObject.GetType()).Find(                              c => c.Name == lambdaBrokenRule.Property).FriendlyName;                          brokenRules += string.Format("{0}: {1}{2}"' friendlyName' brokenRule' Environment.NewLine);                        }                        MessageBox.Show(brokenRules' Resources.ActionExtenderErrorCaption'                          MessageBoxButtons.OK' MessageBoxIcon.Error);                      }                      else                      {                        MessageBox.Show(_objectIsValidMessage' Resources.ActionExtenderInformationCaption'                          MessageBoxButtons.OK' MessageBoxIcon.Information);                      }                    }                      break;                  //case CslaFormAction.Validate                  }
Missing Default,Csla.Windows,CslaActionExtenderToolStrip,C:\repos\MarimerLLC_csla\Source\Csla.Windows.Shared\CslaActionExtenderToolStrip.cs,ExecuteSaveAction,The following switch statement is missing a default case: switch (props.PostSaveAction)                  {                    case PostSaveActionType.None:                        if (props.RebindAfterSave)                      {                        _bindingSourceTree.Bind(savableObject);                        AddEventHooks(savableObject);                      }                      break;                      case PostSaveActionType.AndClose:                        CloseForm();                      break;                      case PostSaveActionType.AndNew:                        OnSetForNew(new CslaActionEventArgs(props.CommandName));                      AddEventHooks(savableObject);                      break;                  }
