Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AVCToolkit,Program,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\Program.cs,Main,Cyclomatic complexity of the method is 28
Long Statement,AVCToolkit,VersionInfo,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\VersionInfo.cs,ToString,The length of the statement  "            return this.Patch > 0 ? String.Format("{0}.{1}.{2}"' this.Major' this.Minor' this.Patch) : String.Format("{0}.{1}"' this.Major' this.Minor); " is 140.
Long Statement,AVCToolkit,VersionInfo,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\VersionInfo.cs,Equals,The length of the statement  "            return this.Major.Equals(other.Major) && this.Minor.Equals(other.Minor) && this.Patch.Equals(other.Patch) && this.Build.Equals(other.Build); " is 140.
Magic Number,AVCToolkit,VersionInfo,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\VersionInfo.cs,VersionInfo,The following statement contains a magic number: switch (sections.Length)              {                  case 1:                      this.SetVersion(Int64.Parse(sections[0]));                      return;                    case 2:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1]));                      return;                    case 3:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2]));                      return;                    case 4:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2])' Int64.Parse(sections[3]));                      return;                    default:                      this.SetVersion();                      return;              }
Magic Number,AVCToolkit,VersionInfo,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\VersionInfo.cs,VersionInfo,The following statement contains a magic number: switch (sections.Length)              {                  case 1:                      this.SetVersion(Int64.Parse(sections[0]));                      return;                    case 2:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1]));                      return;                    case 3:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2]));                      return;                    case 4:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2])' Int64.Parse(sections[3]));                      return;                    default:                      this.SetVersion();                      return;              }
Magic Number,AVCToolkit,VersionInfo,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\VersionInfo.cs,VersionInfo,The following statement contains a magic number: switch (sections.Length)              {                  case 1:                      this.SetVersion(Int64.Parse(sections[0]));                      return;                    case 2:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1]));                      return;                    case 3:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2]));                      return;                    case 4:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2])' Int64.Parse(sections[3]));                      return;                    default:                      this.SetVersion();                      return;              }
Magic Number,AVCToolkit,VersionInfo,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\VersionInfo.cs,VersionInfo,The following statement contains a magic number: switch (sections.Length)              {                  case 1:                      this.SetVersion(Int64.Parse(sections[0]));                      return;                    case 2:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1]));                      return;                    case 3:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2]));                      return;                    case 4:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2])' Int64.Parse(sections[3]));                      return;                    default:                      this.SetVersion();                      return;              }
Magic Number,AVCToolkit,VersionInfo,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\VersionInfo.cs,VersionInfo,The following statement contains a magic number: switch (sections.Length)              {                  case 1:                      this.SetVersion(Int64.Parse(sections[0]));                      return;                    case 2:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1]));                      return;                    case 3:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2]));                      return;                    case 4:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2])' Int64.Parse(sections[3]));                      return;                    default:                      this.SetVersion();                      return;              }
Magic Number,AVCToolkit,VersionInfo,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\VersionInfo.cs,VersionInfo,The following statement contains a magic number: switch (sections.Length)              {                  case 1:                      this.SetVersion(Int64.Parse(sections[0]));                      return;                    case 2:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1]));                      return;                    case 3:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2]));                      return;                    case 4:                      this.SetVersion(Int64.Parse(sections[0])' Int64.Parse(sections[1])' Int64.Parse(sections[2])' Int64.Parse(sections[3]));                      return;                    default:                      this.SetVersion();                      return;              }
Magic Number,AVCToolkit,VersionInfo,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\VersionInfo.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.Minor.GetHashCode();
Magic Number,AVCToolkit,VersionInfo,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\VersionInfo.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.Patch.GetHashCode();
Magic Number,AVCToolkit,VersionInfo,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\VersionInfo.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ this.Build.GetHashCode();
Missing Default,AVCToolkit,Program,D:\research\architectureSmells\repos\CYBUTEK_KSPAddonVersionChecker\AVCToolkit\Program.cs,Main,The following switch statement is missing a default case: switch (args[i].ToLower(CultureInfo.InvariantCulture))                  {                      case "-name":                          if (i++ < args.Length)                          {                              addon.Name = args[i];                          }                          break;                        case "-url":                          if (i++ < args.Length)                          {                              addon.Url = args[i];                          }                          break;                        case "-download":                          if (i++ < args.Length)                          {                              addon.Download = args[i];                          }                          break;                        case "-change_log":                          if (i++ < args.Length)                          {                              addon.ChangeLog = args[i];                          }                          break;                        case "-change_log_url":                          if (i++ < args.Length)                          {                              addon.ChangeLogUrl = args[i];                          }                          break;                        case "-github.username":                          if (i++ < args.Length)                          {                              addon.GitHub.Username = args[i];                          }                          break;                        case "-github.repository":                          if (i++ < args.Length)                          {                              addon.GitHub.Repository = args[i];                          }                          break;                        case "-github.allow_pre_release":                          if (i++ < args.Length)                          {                              addon.GitHub.AllowPreRelease = Boolean.Parse(args[i]);                          }                          break;                        case "-version":                          if (i++ < args.Length)                          {                              addon.Version = new VersionInfo(args[i]);                          }                          break;                        case "-ksp_version":                          if (i++ < args.Length)                          {                              addon.KspVersion = new VersionInfo(args[i]);                          }                          break;                        case "-ksp_version_min":                          if (i++ < args.Length)                          {                              addon.KspVersionMin = new VersionInfo(args[i]);                          }                          break;                        case "-ksp_version_max":                          if (i++ < args.Length)                          {                              addon.KspVersionMax = new VersionInfo(args[i]);                          }                          break;                        case "-output":                          if (i++ < args.Length)                          {                              output = args[i];                          }                          break;                  }
