Implementation smell,Namespace,Class,File,Method,Description
Long Method,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The method has 273 lines of code.
Complex Method,Listing_Date_Updater,AccessHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\AccessHandler.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,Listing_Date_Updater,AccessHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\AccessHandler.cs,Insert,Cyclomatic complexity of the method is 9
Complex Method,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,Cyclomatic complexity of the method is 12
Complex Method,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,Cyclomatic complexity of the method is 29
Complex Method,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,CheckInBase,Cyclomatic complexity of the method is 11
Complex Method,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,PrintAllElements,Cyclomatic complexity of the method is 8
Complex Method,Listing_Date_Updater,MousePriceScrapper,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Business Logic\MousePriceScrapper.cs,SearchForDate,Cyclomatic complexity of the method is 9
Complex Method,Listing_Date_Updater,MousePriceScrapper,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Business Logic\MousePriceScrapper.cs,GetMyRecord,Cyclomatic complexity of the method is 8
Long Statement,Listing_Date_Updater,AccessHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\AccessHandler.cs,IsRecordExist,The length of the statement  "		string query = "SELECT ListingDate From [" + tableName + "] WHERE PostalCode='" + postaladress + "' AND PropertyID='" + propertyid + "' AND ListingDate IS NOT NULL"; " is 165.
Long Statement,Listing_Date_Updater,AccessHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\AccessHandler.cs,GetConnectionString,The length of the statement  "		connectionString = string.Format (@"Provider=Microsoft.Jet.OleDb.4.0; Data Source=" + Path.GetDirectoryName (fileName) + "" + @";Extended Properties=""Text;HDR=YES;FMT=Delimited"""); " is 182.
Long Statement,Listing_Date_Updater,AccessHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\AccessHandler.cs,GetConnectionString,The length of the statement  "		connectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileName + @";Extended Properties=""Excel 12.0 XML;HDR=YES;IMEX=1"""; " is 140.
Long Statement,Listing_Date_Updater,AccessHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\AccessHandler.cs,MakeFileName,The length of the statement  "	Suffix = Regex.Match (postalcode' "^(?<data>\\D*?)\\d"' RegexOptions.IgnorePatternWhitespace | RegexOptions.Singleline).Groups ["data"].Value; " is 142.
Long Statement,Listing_Date_Updater,AccessHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\AccessHandler.cs,Update,The length of the statement  "		Updatebuilder.Append (" WHERE [" + tableName + "].[PropertyID]=@PropertyID AND [" + tableName + "].[PostalCode]=@PostalCode"); " is 126.
Long Statement,Listing_Date_Updater,ExcelInterlop,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelInterlop.cs,CreateNewExcelFile,The length of the statement  "		Console.WriteLine ("EXCEL could not be started. Check that your office installation and project references are correct."); " is 122.
Long Statement,Listing_Date_Updater,ExcelInterlop,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelInterlop.cs,CreateNewExcelFile,The length of the statement  "		Console.WriteLine ("Worksheet could not be created. Check that your office installation and project references are correct."); " is 126.
Long Statement,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The length of the statement  "	string connStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + outputFileName + ";Extended Properties=Excel 12.0;"; " is 120.
Long Statement,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The length of the statement  "			sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')"; " is 525.
Long Statement,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The length of the statement  "			sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')"; " is 525.
Long Statement,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The length of the statement  "	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')"; " is 525.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The length of the statement  "				if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) { " is 160.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The length of the statement  "				else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) { " is 157.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The length of the statement  "			if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if " is 126.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The length of the statement  "						DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel); " is 144.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The length of the statement  "					SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n"); " is 122.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The length of the statement  "						SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount); " is 120.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The length of the statement  "					if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) { " is 123.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The length of the statement  "					richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n"; " is 183.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FindDirectUrl,The length of the statement  "		MatchCollection collection = Regex.Matches (WebPage' "<a href=\"(?<data>.*?)\">See full details including the property schedule on the "); " is 138.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,PrintCollection,The length of the statement  "		richTextBox1.Text += "Google Record....\n Title=" + result.Title + " \n  Link= " + result.Link + "\n Date= " + result.Date + "\n\n"; " is 132.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,CheckInBase,The length of the statement  "		MatchCollection collection = Regex.Matches (element.InnerHtml' "<a onmousedown=\"return.*?href=\"(?<data>.*?)\">"' RegexOptions.Multiline); " is 139.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,CheckInBase,The length of the statement  "			if (ResultString.Contains ("cache") == false && ResultString.Contains ("#") == false && ResultString.Contains ("site") == false) { " is 130.
Long Statement,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,CheckInBase,The length of the statement  "		collection = Regex.Matches (element.InnerHtml' @"<h3.*?<a onmousedown=.*?>(?<data>.*?)</a></h3>"' RegexOptions.Multiline); " is 122.
Long Statement,Listing_Date_Updater,MousePriceScrapper,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Business Logic\MousePriceScrapper.cs,SearchForDate,The length of the statement  "		string temp = Regex.Match (RecordString' "Added (?<data>\\d*?) days ago"' RegexOptions.Multiline).Groups ["data"].Value; " is 120.
Long Statement,Listing_Date_Updater,MousePriceScrapper,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Business Logic\MousePriceScrapper.cs,MatchPriceFromSubjectString,The length of the statement  "	MatchCollection mCollection = Regex.Matches (SubjectString' "<span class=\"price\">.*?&pound;(?<data>.*?)</span>"' RegexOptions.Multiline); " is 139.
Long Statement,Listing_Date_Updater,MousePriceScrapper,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Business Logic\MousePriceScrapper.cs,GetMyRecord,The length of the statement  "	MatchCollection collection = Regex.Matches (SubjectString' "<div class=\"srl_row\">(?<data>(.|\\r\\n)*?)<div class=\"srl_mapdesc"' RegexOptions.Multiline); " is 155.
Complex Conditional,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The conditional expression  "InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))"  is complex.
Complex Conditional,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The conditional expression  "InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")"  is complex.
Complex Conditional,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The conditional expression  "InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")"  is complex.
Complex Conditional,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The conditional expression  "DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")"  is complex.
Complex Conditional,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The conditional expression  "DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")"  is complex.
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (String.IsNullOrEmpty (p.Address) == false) {  	if (p.Address.Contains ("*")) {  		AdressTokens = p.Address.Split ('*');  		for (int i = 0; i < AdressTokens.Count (); i++) {  			if (String.IsNullOrEmpty (AdressTokens [i])) {  				AdressTokens [i] = "-";  			}  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  	else {  		AdressTokens = p.Address.Split ('*');  		string address1 = AdressTokens [0];  		string address2 = AdressTokens [1];  		string address3 = AdressTokens [2];  		string address4 = "";  		for (int i = 2; i < AdressTokens.Length; i++) {  			address4 += AdressTokens [i] + " ";  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (String.IsNullOrEmpty (p.Address) == false) {  	if (p.Address.Contains ("*")) {  		AdressTokens = p.Address.Split ('*');  		for (int i = 0; i < AdressTokens.Count (); i++) {  			if (String.IsNullOrEmpty (AdressTokens [i])) {  				AdressTokens [i] = "-";  			}  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  	else {  		AdressTokens = p.Address.Split ('*');  		string address1 = AdressTokens [0];  		string address2 = AdressTokens [1];  		string address3 = AdressTokens [2];  		string address4 = "";  		for (int i = 2; i < AdressTokens.Length; i++) {  			address4 += AdressTokens [i] + " ";  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (String.IsNullOrEmpty (p.Address) == false) {  	if (p.Address.Contains ("*")) {  		AdressTokens = p.Address.Split ('*');  		for (int i = 0; i < AdressTokens.Count (); i++) {  			if (String.IsNullOrEmpty (AdressTokens [i])) {  				AdressTokens [i] = "-";  			}  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  	else {  		AdressTokens = p.Address.Split ('*');  		string address1 = AdressTokens [0];  		string address2 = AdressTokens [1];  		string address3 = AdressTokens [2];  		string address4 = "";  		for (int i = 2; i < AdressTokens.Length; i++) {  			address4 += AdressTokens [i] + " ";  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (String.IsNullOrEmpty (p.Address) == false) {  	if (p.Address.Contains ("*")) {  		AdressTokens = p.Address.Split ('*');  		for (int i = 0; i < AdressTokens.Count (); i++) {  			if (String.IsNullOrEmpty (AdressTokens [i])) {  				AdressTokens [i] = "-";  			}  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  	else {  		AdressTokens = p.Address.Split ('*');  		string address1 = AdressTokens [0];  		string address2 = AdressTokens [1];  		string address3 = AdressTokens [2];  		string address4 = "";  		for (int i = 2; i < AdressTokens.Length; i++) {  			address4 += AdressTokens [i] + " ";  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (String.IsNullOrEmpty (p.Address) == false) {  	if (p.Address.Contains ("*")) {  		AdressTokens = p.Address.Split ('*');  		for (int i = 0; i < AdressTokens.Count (); i++) {  			if (String.IsNullOrEmpty (AdressTokens [i])) {  				AdressTokens [i] = "-";  			}  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  	else {  		AdressTokens = p.Address.Split ('*');  		string address1 = AdressTokens [0];  		string address2 = AdressTokens [1];  		string address3 = AdressTokens [2];  		string address4 = "";  		for (int i = 2; i < AdressTokens.Length; i++) {  			address4 += AdressTokens [i] + " ";  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (String.IsNullOrEmpty (p.Address) == false) {  	if (p.Address.Contains ("*")) {  		AdressTokens = p.Address.Split ('*');  		for (int i = 0; i < AdressTokens.Count (); i++) {  			if (String.IsNullOrEmpty (AdressTokens [i])) {  				AdressTokens [i] = "-";  			}  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  	else {  		AdressTokens = p.Address.Split ('*');  		string address1 = AdressTokens [0];  		string address2 = AdressTokens [1];  		string address3 = AdressTokens [2];  		string address4 = "";  		for (int i = 2; i < AdressTokens.Length; i++) {  			address4 += AdressTokens [i] + " ";  		}  		sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  	}  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (p.Address.Contains ("*")) {  	AdressTokens = p.Address.Split ('*');  	for (int i = 0; i < AdressTokens.Count (); i++) {  		if (String.IsNullOrEmpty (AdressTokens [i])) {  			AdressTokens [i] = "-";  		}  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  else {  	AdressTokens = p.Address.Split ('*');  	string address1 = AdressTokens [0];  	string address2 = AdressTokens [1];  	string address3 = AdressTokens [2];  	string address4 = "";  	for (int i = 2; i < AdressTokens.Length; i++) {  		address4 += AdressTokens [i] + " ";  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (p.Address.Contains ("*")) {  	AdressTokens = p.Address.Split ('*');  	for (int i = 0; i < AdressTokens.Count (); i++) {  		if (String.IsNullOrEmpty (AdressTokens [i])) {  			AdressTokens [i] = "-";  		}  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  else {  	AdressTokens = p.Address.Split ('*');  	string address1 = AdressTokens [0];  	string address2 = AdressTokens [1];  	string address3 = AdressTokens [2];  	string address4 = "";  	for (int i = 2; i < AdressTokens.Length; i++) {  		address4 += AdressTokens [i] + " ";  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (p.Address.Contains ("*")) {  	AdressTokens = p.Address.Split ('*');  	for (int i = 0; i < AdressTokens.Count (); i++) {  		if (String.IsNullOrEmpty (AdressTokens [i])) {  			AdressTokens [i] = "-";  		}  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  else {  	AdressTokens = p.Address.Split ('*');  	string address1 = AdressTokens [0];  	string address2 = AdressTokens [1];  	string address3 = AdressTokens [2];  	string address4 = "";  	for (int i = 2; i < AdressTokens.Length; i++) {  		address4 += AdressTokens [i] + " ";  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (p.Address.Contains ("*")) {  	AdressTokens = p.Address.Split ('*');  	for (int i = 0; i < AdressTokens.Count (); i++) {  		if (String.IsNullOrEmpty (AdressTokens [i])) {  			AdressTokens [i] = "-";  		}  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  else {  	AdressTokens = p.Address.Split ('*');  	string address1 = AdressTokens [0];  	string address2 = AdressTokens [1];  	string address3 = AdressTokens [2];  	string address4 = "";  	for (int i = 2; i < AdressTokens.Length; i++) {  		address4 += AdressTokens [i] + " ";  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (p.Address.Contains ("*")) {  	AdressTokens = p.Address.Split ('*');  	for (int i = 0; i < AdressTokens.Count (); i++) {  		if (String.IsNullOrEmpty (AdressTokens [i])) {  			AdressTokens [i] = "-";  		}  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  else {  	AdressTokens = p.Address.Split ('*');  	string address1 = AdressTokens [0];  	string address2 = AdressTokens [1];  	string address3 = AdressTokens [2];  	string address4 = "";  	for (int i = 2; i < AdressTokens.Length; i++) {  		address4 += AdressTokens [i] + " ";  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: if (p.Address.Contains ("*")) {  	AdressTokens = p.Address.Split ('*');  	for (int i = 0; i < AdressTokens.Count (); i++) {  		if (String.IsNullOrEmpty (AdressTokens [i])) {  			AdressTokens [i] = "-";  		}  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  else {  	AdressTokens = p.Address.Split ('*');  	string address1 = AdressTokens [0];  	string address2 = AdressTokens [1];  	string address3 = AdressTokens [2];  	string address4 = "";  	for (int i = 2; i < AdressTokens.Length; i++) {  		address4 += AdressTokens [i] + " ";  	}  	sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: for (int i = 2; i < AdressTokens.Length; i++) {  	address4 += AdressTokens [i] + " ";  }  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  
Magic Number,Listing_Date_Updater,ExcelOledbHandler,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Handlers\ExcelOledbHandler.cs,WriteInDatabase,The following statement contains a magic number: sql = "Insert into [" + sheetName + "$] ([ADDRESS1]'[ADDRESS2]'[ADDRESS3]'[ADDRESS4]'[POSTCODE]'[PRICE]'[DATE MARKETED]'[MARKETED BY]'[NUMBERS OF DAY]'[Success URL]'[Homes URL]'[MARKETED BY2]'[Property Id]) values('" + AdressTokens [0] + "'''" + AdressTokens [1] + "'''" + AdressTokens [2] + "'''" + AdressTokens [3] + "'''" + p.PostCode + "'''" + p.Price + "'''" + p.MarketedFrom + "'''" + p.MarketedBy + "'''" + p.NumberOfDays + "'''" + p.SuccessUrl + "'''" + p.HomeUrl + "'''" + p.MarketedBy + "'''" + p.PropertyID + "')";  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,Form1,The following statement contains a magic number: comboBox1.SelectedItem = 2;  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataTable table in set.Tables) {  	int Rowscount = table.Rows.Count;  	SetRichboxText ("Total Records= " + Rowscount + "\n");  	foreach (DataRow dr in table.Rows) {  		SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  		progressBar1.Value = getProgress (count' Rowscount);  		progressBar1.Update ();  		#region Read Property From DataTable  		try {  			p = new PropertyInfo ();  			if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  				p.InputSource = InputResourse;  				p.PostCode = dr [0].ToString ();  				p.Price = dr [1].ToString ();  				p.SoldPriceHistory = dr [2].ToString ();  				p.Address = dr [3].ToString ();  				p.MarketedFrom = dr [4].ToString ();  				p.MarketedBy = dr [5].ToString ();  				p.PropertyType = dr [6].ToString ();  				p.PropertyID = dr [7].ToString ();  				p.MarketedDateEstimate = dr [8].ToString ();  			}  			else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  				//This is always going to be RM2 Format  				p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  				p.PostCode = dr [4].ToString ();  				p.Price = dr [5].ToString ();  				p.MarketedBy = dr [7].ToString ();  				p.NumberOfDays = dr [8].ToString ();  				p.SuccessUrl = dr [9].ToString ();  				//Indirect  				p.HomeUrl = dr [10].ToString ();  				//Direct  				p.MarketedBy = dr [11].ToString ();  				p.PropertyID = dr [12].ToString ();  				p.InputSource = InputResourse;  			}  			else {  				MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  				return;  			}  		}  		catch (InvalidCastException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (IndexOutOfRangeException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		catch (DeletedRowInaccessibleException ex) {  			MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  			return;  		}  		#endregion  		if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  		 {  			string DBDate = null;  			#region stop if stop lock is released  			if (safeStop == true) {  				return;  			}  			#endregion  			#region Database Check  			AccessHandler Ahandler = new AccessHandler ();  			try {  				DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  			}  			if (String.IsNullOrEmpty (DBDate) == false) {  				p.MarketedFrom = DBDate;  				SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  				continue;  			}  			#endregion  			#region MousePrice  			SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  			MousePriceScrapper Mscrapper = new MousePriceScrapper ();  			try {  				SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  				Mscrapper.CheckMousePrice (p);  			}  			catch (Exception ex) {  				if (ex.Message.Contains ("IP_BLOCKED")) {  					DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  					if (dialogResult.Equals (DialogResult.Retry)) {  						continue;  					}  					else {  						safeStop = true;  						SetLabelText ("Stopped");  					}  					return;  				}  				SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  				//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  			}  			if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  				#region InsertOrUpdate in database  				SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  				try {  					p.FoundSource = "Mouse Price";  					Ahandler.InsertOrUpdate (p);  					SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  				}  				catch (Exception ex) {  					SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  					return;  				}  				#endregion  			}  			else {  			}  			#endregion  			#region newgoogle  			navigationCount = 0;  			DownloadedPagesCount = 0;  			RecordList.Clear ();  			if (webBrowser1.Document != null) {  				HtmlDocument doc = this.webBrowser1.Document;  				doc.Write (string.Empty);  				webBrowser1.Stop ();  				this.webBrowser1.Navigate ("about:blank");  			}  			Loseit = false;  			string InDirectUrl = p.SuccessUrl;  			string DirectUrl = p.HomeUrl;  			string Adress = p.Address.Replace ("*"' "'");  			if (String.IsNullOrEmpty (InDirectUrl) == false) {  				#region Static and Dynamic URL  				if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  					MessageBox.Show ("Indirect url can not be dynamic");  					//Dynamic URL  					//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = InDirectUrl;  				}  				#endregion  				richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  				ArrayList xcollection = GetAllRecords (SearchQuery);  				if (xcollection.Count == 0) {  					#region Find DirectUrl  					if (String.IsNullOrEmpty (DirectUrl)) {  						DirectUrl = FindDirectUrl (InDirectUrl);  						//     DirectUrl=FindDirectUrl(InDirectUrl);  					}  					#endregion  					if (String.IsNullOrEmpty (DirectUrl)) {  						MessageBox.Show ("Can not Process 'we can not Find Direct Url");  					}  					else {  						//          MessageBox.Show("Continue...");  						#region CheckStatic and Dynamic  						if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  							string ResultString = null;  							try {  								ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  							}  							catch (ArgumentException ex) {  								MessageBox.Show (ex.Message);  							}  							//Dynamic URL  							SearchQuery = ResultString + " " + Adress + "  '";  							//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  						}  						else {  							//Static URL  							SearchQuery = DirectUrl;  						}  						#endregion  						#region FindIndirect Url  						richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  						navigationCount = 0;  						DownloadedPagesCount = 0;  						RecordList.Clear ();  						this.webBrowser1.Navigate ("about:blank");  						Loseit = false;  						HtmlDocument document = this.webBrowser1.Document;  						//  CleanBrowserThread();  						document.Write (string.Empty);  						webBrowser1.Stop ();  						ArrayList xmcollection = GetAllRecords (SearchQuery);  						p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  						#endregion  					}  				}  				else {  					p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  				}  			}  			else {  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Both urls are empty");  				}  				else {  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindDirect Url  					richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList collection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  					#endregion  				}  			}  			#endregion  		}  		try {  			handler.WriteInDatabase (p);  		}  		catch (Exception ex) {  			MessageBox.Show (ex.Message);  			return;  		}  		webBrowser1.Navigate ("about:blank");  		webBrowser1.Stop ();  		//            MessageBox.Show("Continue...");  		//     Thread.Sleep(60 * 60 * 1);  	}  	//     backgroundWorker1.ReportProgress(100);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: foreach (DataRow dr in table.Rows) {  	SetLabelText ("Reading Record " + ++count + "   out of  " + Rowscount);  	progressBar1.Value = getProgress (count' Rowscount);  	progressBar1.Update ();  	#region Read Property From DataTable  	try {  		p = new PropertyInfo ();  		if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  			p.InputSource = InputResourse;  			p.PostCode = dr [0].ToString ();  			p.Price = dr [1].ToString ();  			p.SoldPriceHistory = dr [2].ToString ();  			p.Address = dr [3].ToString ();  			p.MarketedFrom = dr [4].ToString ();  			p.MarketedBy = dr [5].ToString ();  			p.PropertyType = dr [6].ToString ();  			p.PropertyID = dr [7].ToString ();  			p.MarketedDateEstimate = dr [8].ToString ();  		}  		else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  			//This is always going to be RM2 Format  			p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  			p.PostCode = dr [4].ToString ();  			p.Price = dr [5].ToString ();  			p.MarketedBy = dr [7].ToString ();  			p.NumberOfDays = dr [8].ToString ();  			p.SuccessUrl = dr [9].ToString ();  			//Indirect  			p.HomeUrl = dr [10].ToString ();  			//Direct  			p.MarketedBy = dr [11].ToString ();  			p.PropertyID = dr [12].ToString ();  			p.InputSource = InputResourse;  		}  		else {  			MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  			return;  		}  	}  	catch (InvalidCastException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (IndexOutOfRangeException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	catch (DeletedRowInaccessibleException ex) {  		MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  		return;  	}  	#endregion  	if (String.IsNullOrEmpty (p.MarketedFrom) == true && String.IsNullOrEmpty (p.PropertyID) == false)// add more conditions in if  	 {  		string DBDate = null;  		#region stop if stop lock is released  		if (safeStop == true) {  			return;  		}  		#endregion  		#region Database Check  		AccessHandler Ahandler = new AccessHandler ();  		try {  			DBDate = Ahandler.IsRecordExist (p.PropertyID' p.PostCode' InputResourse);  		}  		catch (Exception ex) {  			SetLabelText (ex.Message + "While Checking If Record Exists " + count + "   out of  " + Rowscount);  		}  		if (String.IsNullOrEmpty (DBDate) == false) {  			p.MarketedFrom = DBDate;  			SetLabelText ("Record Already Exists In DB for " + p.PostCode + "  " + count + "   out of  " + Rowscount);  			continue;  		}  		#endregion  		#region MousePrice  		SetRichboxText ("\n\n\n..............Mouse Price Starts................\n\n\n");  		MousePriceScrapper Mscrapper = new MousePriceScrapper ();  		try {  			SetLabelText ("Checking Mouse Price of " + p.PostCode + ".    " + count + "   out of  " + Rowscount);  			Mscrapper.CheckMousePrice (p);  		}  		catch (Exception ex) {  			if (ex.Message.Contains ("IP_BLOCKED")) {  				DialogResult dialogResult = MessageBox.Show ("IP is blocked 'Kindly Change proxy to continue."' "IP is blocked"' MessageBoxButtons.RetryCancel);  				if (dialogResult.Equals (DialogResult.Retry)) {  					continue;  				}  				else {  					safeStop = true;  					SetLabelText ("Stopped");  				}  				return;  			}  			SetLabelText (ex.Message + " at " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  			SetRichboxText (ex.Message + " at " + p.PostCode + count + "   ' " + "   out of  " + Rowscount + "\n");  			//   MessageBox.Show(ex.Message+" at "+p.PostCode+"\n Do you want to quit?"'"Missing Results"'MessageBoxButtons.YesNo);  		}  		if (String.IsNullOrEmpty (p.MarketedFrom) == false) {  			#region InsertOrUpdate in database  			SetRichboxText (p.MarketedFrom + "   Date Found For  " + p.PostCode + "   ' " + count + "   out of  " + Rowscount + "\n");  			try {  				p.FoundSource = "Mouse Price";  				Ahandler.InsertOrUpdate (p);  				SetLabelText ("Added Record of  " + p.PostCode + "in Database" + "   ' " + count + "   out of  " + Rowscount);  			}  			catch (Exception ex) {  				SetLabelText (ex.Message + "Update in Database Failed for " + p.PostCode + "   ' " + count + "   out of  " + Rowscount);  				return;  			}  			#endregion  		}  		else {  		}  		#endregion  		#region newgoogle  		navigationCount = 0;  		DownloadedPagesCount = 0;  		RecordList.Clear ();  		if (webBrowser1.Document != null) {  			HtmlDocument doc = this.webBrowser1.Document;  			doc.Write (string.Empty);  			webBrowser1.Stop ();  			this.webBrowser1.Navigate ("about:blank");  		}  		Loseit = false;  		string InDirectUrl = p.SuccessUrl;  		string DirectUrl = p.HomeUrl;  		string Adress = p.Address.Replace ("*"' "'");  		if (String.IsNullOrEmpty (InDirectUrl) == false) {  			#region Static and Dynamic URL  			if (InDirectUrl.Contains ("?") || InDirectUrl.Contains ("#") || InDirectUrl.Contains ("&") || InDirectUrl.Contains ("=")) {  				MessageBox.Show ("Indirect url can not be dynamic");  				//Dynamic URL  				//  SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  			}  			else {  				//Static URL  				SearchQuery = InDirectUrl;  			}  			#endregion  			richTextBox1.Text += "\n\n---------INPUT BOX----------\nINDirect url= " + InDirectUrl + "\n Direct Url=" + DirectUrl + "\n Search Query= " + SearchQuery + "\n---------------------\n";  			ArrayList xcollection = GetAllRecords (SearchQuery);  			if (xcollection.Count == 0) {  				#region Find DirectUrl  				if (String.IsNullOrEmpty (DirectUrl)) {  					DirectUrl = FindDirectUrl (InDirectUrl);  					//     DirectUrl=FindDirectUrl(InDirectUrl);  				}  				#endregion  				if (String.IsNullOrEmpty (DirectUrl)) {  					MessageBox.Show ("Can not Process 'we can not Find Direct Url");  				}  				else {  					//          MessageBox.Show("Continue...");  					#region CheckStatic and Dynamic  					if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  						string ResultString = null;  						try {  							ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  						}  						catch (ArgumentException ex) {  							MessageBox.Show (ex.Message);  						}  						//Dynamic URL  						SearchQuery = ResultString + " " + Adress + "  '";  						//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  					}  					else {  						//Static URL  						SearchQuery = DirectUrl;  					}  					#endregion  					#region FindIndirect Url  					richTextBox1.Text += "\n\nNow going to Indirect Url\n\n";  					navigationCount = 0;  					DownloadedPagesCount = 0;  					RecordList.Clear ();  					this.webBrowser1.Navigate ("about:blank");  					Loseit = false;  					HtmlDocument document = this.webBrowser1.Document;  					//  CleanBrowserThread();  					document.Write (string.Empty);  					webBrowser1.Stop ();  					ArrayList xmcollection = GetAllRecords (SearchQuery);  					p.MarketedFrom = PrintCollection (xmcollection' p.SuccessUrl);  					#endregion  				}  			}  			else {  				p.MarketedFrom = PrintCollection (xcollection' p.HomeUrl);  			}  		}  		else {  			if (String.IsNullOrEmpty (DirectUrl)) {  				MessageBox.Show ("Both urls are empty");  			}  			else {  				#region CheckStatic and Dynamic  				if (DirectUrl.Contains ("?") || DirectUrl.Contains ("#") || DirectUrl.Contains ("&") || DirectUrl.Contains ("=")) {  					string ResultString = null;  					try {  						ResultString = Regex.Match (DirectUrl' "(?<data>http.*?)(\\?|#)").Groups ["data"].Value;  					}  					catch (ArgumentException ex) {  						MessageBox.Show (ex.Message);  					}  					//Dynamic URL  					SearchQuery = ResultString + " " + Adress + "  '";  					//                                        SearchQuery = "http://www.spcmoray.com/property.php " + Adress + "  '";  				}  				else {  					//Static URL  					SearchQuery = DirectUrl;  				}  				#endregion  				#region FindDirect Url  				richTextBox1.Text += "\n\nNow going to Direct Url\n\n";  				navigationCount = 0;  				DownloadedPagesCount = 0;  				RecordList.Clear ();  				this.webBrowser1.Navigate ("about:blank");  				Loseit = false;  				HtmlDocument document = this.webBrowser1.Document;  				//  CleanBrowserThread();  				document.Write (string.Empty);  				webBrowser1.Stop ();  				ArrayList collection = GetAllRecords (SearchQuery);  				p.MarketedFrom = PrintCollection (collection' p.HomeUrl);  				#endregion  			}  		}  		#endregion  	}  	try {  		handler.WriteInDatabase (p);  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  		return;  	}  	webBrowser1.Navigate ("about:blank");  	webBrowser1.Stop ();  	//            MessageBox.Show("Continue...");  	//     Thread.Sleep(60 * 60 * 1);  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: try {  	p = new PropertyInfo ();  	if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  		p.InputSource = InputResourse;  		p.PostCode = dr [0].ToString ();  		p.Price = dr [1].ToString ();  		p.SoldPriceHistory = dr [2].ToString ();  		p.Address = dr [3].ToString ();  		p.MarketedFrom = dr [4].ToString ();  		p.MarketedBy = dr [5].ToString ();  		p.PropertyType = dr [6].ToString ();  		p.PropertyID = dr [7].ToString ();  		p.MarketedDateEstimate = dr [8].ToString ();  	}  	else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  		//This is always going to be RM2 Format  		p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  		p.PostCode = dr [4].ToString ();  		p.Price = dr [5].ToString ();  		p.MarketedBy = dr [7].ToString ();  		p.NumberOfDays = dr [8].ToString ();  		p.SuccessUrl = dr [9].ToString ();  		//Indirect  		p.HomeUrl = dr [10].ToString ();  		//Direct  		p.MarketedBy = dr [11].ToString ();  		p.PropertyID = dr [12].ToString ();  		p.InputSource = InputResourse;  	}  	else {  		MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  		return;  	}  }  catch (InvalidCastException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (IndexOutOfRangeException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  catch (DeletedRowInaccessibleException ex) {  	MessageBox.Show (ex.Message + "While Extracting data from Adapter '" + count + "   out of  " + Rowscount);  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("Right move") && (FileName.Contains ("RM1") || FileName.Contains ("rm1") || FileName.Contains ("z1") || FileName.Contains ("Z1"))) {  	p.InputSource = InputResourse;  	p.PostCode = dr [0].ToString ();  	p.Price = dr [1].ToString ();  	p.SoldPriceHistory = dr [2].ToString ();  	p.Address = dr [3].ToString ();  	p.MarketedFrom = dr [4].ToString ();  	p.MarketedBy = dr [5].ToString ();  	p.PropertyType = dr [6].ToString ();  	p.PropertyID = dr [7].ToString ();  	p.MarketedDateEstimate = dr [8].ToString ();  }  else if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.SoldPriceHistory = dr [2].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.Address = dr [3].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.MarketedFrom = dr [4].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.MarketedBy = dr [5].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.PropertyType = dr [6].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.PropertyID = dr [7].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.MarketedDateEstimate = dr [8].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: if (InputResourse.Contains ("SSPC") || FileName.Contains ("RM2") || FileName.Contains ("rm2") || FileName.Contains ("z2") || FileName.Contains ("Z2")) {  	//This is always going to be RM2 Format  	p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  	p.PostCode = dr [4].ToString ();  	p.Price = dr [5].ToString ();  	p.MarketedBy = dr [7].ToString ();  	p.NumberOfDays = dr [8].ToString ();  	p.SuccessUrl = dr [9].ToString ();  	//Indirect  	p.HomeUrl = dr [10].ToString ();  	//Direct  	p.MarketedBy = dr [11].ToString ();  	p.PropertyID = dr [12].ToString ();  	p.InputSource = InputResourse;  }  else {  	MessageBox.Show ("File Format Confusion ..Please Choose the correct Format..");  	return;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.Address = dr [0].ToString () + "*" + dr [1].ToString () + "*" + dr [2].ToString () + "*" + dr [3].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.PostCode = dr [4].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.Price = dr [5].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.MarketedBy = dr [7].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.NumberOfDays = dr [8].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.SuccessUrl = dr [9].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.HomeUrl = dr [10].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.MarketedBy = dr [11].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,FrontThreadWork,The following statement contains a magic number: p.PropertyID = dr [12].ToString ();  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: while (Loseit == false) {  	if (NavigateAgain == true) {  		if (navigationCount >= 4) {  			break;  		}  		webBrowser1.Navigate ("");  		webBrowser1.Stop ();  		Thread.Sleep (60 * 30 * 1);  		webBrowser1.Stop ();  		navigationCount++;  		webBrowser1.Navigate (googleUrl + "site:" + query.Trim ());  		DownloadedPagesCount = 0;  		Thread.Sleep (60 * 60 * 1);  		richTextBox1.Text += "\n\n\nNavigated....\n\n\n";  		NavigateAgain = false;  	}  	else {  		Application.DoEvents ();  	}  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: while (Loseit == false) {  	if (NavigateAgain == true) {  		if (navigationCount >= 4) {  			break;  		}  		webBrowser1.Navigate ("");  		webBrowser1.Stop ();  		Thread.Sleep (60 * 30 * 1);  		webBrowser1.Stop ();  		navigationCount++;  		webBrowser1.Navigate (googleUrl + "site:" + query.Trim ());  		DownloadedPagesCount = 0;  		Thread.Sleep (60 * 60 * 1);  		richTextBox1.Text += "\n\n\nNavigated....\n\n\n";  		NavigateAgain = false;  	}  	else {  		Application.DoEvents ();  	}  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: while (Loseit == false) {  	if (NavigateAgain == true) {  		if (navigationCount >= 4) {  			break;  		}  		webBrowser1.Navigate ("");  		webBrowser1.Stop ();  		Thread.Sleep (60 * 30 * 1);  		webBrowser1.Stop ();  		navigationCount++;  		webBrowser1.Navigate (googleUrl + "site:" + query.Trim ());  		DownloadedPagesCount = 0;  		Thread.Sleep (60 * 60 * 1);  		richTextBox1.Text += "\n\n\nNavigated....\n\n\n";  		NavigateAgain = false;  	}  	else {  		Application.DoEvents ();  	}  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: while (Loseit == false) {  	if (NavigateAgain == true) {  		if (navigationCount >= 4) {  			break;  		}  		webBrowser1.Navigate ("");  		webBrowser1.Stop ();  		Thread.Sleep (60 * 30 * 1);  		webBrowser1.Stop ();  		navigationCount++;  		webBrowser1.Navigate (googleUrl + "site:" + query.Trim ());  		DownloadedPagesCount = 0;  		Thread.Sleep (60 * 60 * 1);  		richTextBox1.Text += "\n\n\nNavigated....\n\n\n";  		NavigateAgain = false;  	}  	else {  		Application.DoEvents ();  	}  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: while (Loseit == false) {  	if (NavigateAgain == true) {  		if (navigationCount >= 4) {  			break;  		}  		webBrowser1.Navigate ("");  		webBrowser1.Stop ();  		Thread.Sleep (60 * 30 * 1);  		webBrowser1.Stop ();  		navigationCount++;  		webBrowser1.Navigate (googleUrl + "site:" + query.Trim ());  		DownloadedPagesCount = 0;  		Thread.Sleep (60 * 60 * 1);  		richTextBox1.Text += "\n\n\nNavigated....\n\n\n";  		NavigateAgain = false;  	}  	else {  		Application.DoEvents ();  	}  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: if (NavigateAgain == true) {  	if (navigationCount >= 4) {  		break;  	}  	webBrowser1.Navigate ("");  	webBrowser1.Stop ();  	Thread.Sleep (60 * 30 * 1);  	webBrowser1.Stop ();  	navigationCount++;  	webBrowser1.Navigate (googleUrl + "site:" + query.Trim ());  	DownloadedPagesCount = 0;  	Thread.Sleep (60 * 60 * 1);  	richTextBox1.Text += "\n\n\nNavigated....\n\n\n";  	NavigateAgain = false;  }  else {  	Application.DoEvents ();  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: if (NavigateAgain == true) {  	if (navigationCount >= 4) {  		break;  	}  	webBrowser1.Navigate ("");  	webBrowser1.Stop ();  	Thread.Sleep (60 * 30 * 1);  	webBrowser1.Stop ();  	navigationCount++;  	webBrowser1.Navigate (googleUrl + "site:" + query.Trim ());  	DownloadedPagesCount = 0;  	Thread.Sleep (60 * 60 * 1);  	richTextBox1.Text += "\n\n\nNavigated....\n\n\n";  	NavigateAgain = false;  }  else {  	Application.DoEvents ();  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: if (NavigateAgain == true) {  	if (navigationCount >= 4) {  		break;  	}  	webBrowser1.Navigate ("");  	webBrowser1.Stop ();  	Thread.Sleep (60 * 30 * 1);  	webBrowser1.Stop ();  	navigationCount++;  	webBrowser1.Navigate (googleUrl + "site:" + query.Trim ());  	DownloadedPagesCount = 0;  	Thread.Sleep (60 * 60 * 1);  	richTextBox1.Text += "\n\n\nNavigated....\n\n\n";  	NavigateAgain = false;  }  else {  	Application.DoEvents ();  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: if (NavigateAgain == true) {  	if (navigationCount >= 4) {  		break;  	}  	webBrowser1.Navigate ("");  	webBrowser1.Stop ();  	Thread.Sleep (60 * 30 * 1);  	webBrowser1.Stop ();  	navigationCount++;  	webBrowser1.Navigate (googleUrl + "site:" + query.Trim ());  	DownloadedPagesCount = 0;  	Thread.Sleep (60 * 60 * 1);  	richTextBox1.Text += "\n\n\nNavigated....\n\n\n";  	NavigateAgain = false;  }  else {  	Application.DoEvents ();  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: if (NavigateAgain == true) {  	if (navigationCount >= 4) {  		break;  	}  	webBrowser1.Navigate ("");  	webBrowser1.Stop ();  	Thread.Sleep (60 * 30 * 1);  	webBrowser1.Stop ();  	navigationCount++;  	webBrowser1.Navigate (googleUrl + "site:" + query.Trim ());  	DownloadedPagesCount = 0;  	Thread.Sleep (60 * 60 * 1);  	richTextBox1.Text += "\n\n\nNavigated....\n\n\n";  	NavigateAgain = false;  }  else {  	Application.DoEvents ();  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: if (navigationCount >= 4) {  	break;  }  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: Thread.Sleep (60 * 30 * 1);  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: Thread.Sleep (60 * 30 * 1);  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: Thread.Sleep (60 * 60 * 1);  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,GetAllRecords,The following statement contains a magic number: Thread.Sleep (60 * 60 * 1);  
Magic Number,Listing_Date_Updater,Form1,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Form1.cs,CompareStrings,The following statement contains a magic number: if (Math.Abs (matches - aStrings.Count ()) < 3) {  	Result = true;  }  
Magic Number,Listing_Date_Updater,MousePriceScrapper,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Business Logic\MousePriceScrapper.cs,CompareStrings50Percent,The following statement contains a magic number: if ((wordsinonearray / 2) - 3 < SuccessMathces) {  	return true;  }  else {  	return false;  }  
Magic Number,Listing_Date_Updater,MousePriceScrapper,C:\repos\AbbasNaqvi_Projects\Listing Date Updater\Listing Date Updater\Business Logic\MousePriceScrapper.cs,CompareStrings50Percent,The following statement contains a magic number: if ((wordsinonearray / 2) - 3 < SuccessMathces) {  	return true;  }  else {  	return false;  }  
