Implementation smell,Namespace,Class,File,Method,Description
Long Method,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The method has 133 lines of code.
Complex Method,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,Cyclomatic complexity of the method is 11
Complex Method,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,Cyclomatic complexity of the method is 11
Complex Method,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,Cyclomatic complexity of the method is 8
Long Statement,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The length of the statement  "		xlWorkBook.SaveAs (FilePath' XlFileFormat.xlWorkbookNormal' misValue' misValue' misValue' misValue' XlSaveAsAccessMode.xlShared' misValue' misValue' misValue' misValue' misValue); " is 179.
Long Statement,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The length of the statement  "		workbook = application.Workbooks.Open (FileName' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing); " is 245.
Long Statement,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The length of the statement  "		xlWorkBook.SaveAs (FilePath + "\\" + bc.FolderName + "\\" + bc.FolderName + "_Terraced.xls"' XlFileFormat.xlWorkbookNormal' misValue' misValue' misValue' misValue' XlSaveAsAccessMode.xlShared' misValue' misValue' misValue' misValue' misValue); " is 243.
Long Statement,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The length of the statement  "		xlWorkBook2.SaveAs (FilePath + "\\" + bc.FolderName + "\\" + bc.FolderName + "_Non Terraced.xls"' XlFileFormat.xlWorkbookNormal' misValue' misValue' misValue' misValue' XlSaveAsAccessMode.xlShared' misValue' misValue' misValue' misValue' misValue); " is 248.
Long Statement,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,The length of the statement  "	workbook = application.Workbooks.Open (FileName' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing); " is 245.
Long Statement,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,The length of the statement  "		//                System.Array valueArray = (System.Array)excelRange.get_Value(XlRangeValueDataType.xlRangeValueDefault); " is 121.
Empty Catch Block,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The method has an empty catch block.
Empty Catch Block,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The method has an empty catch block.
Empty Catch Block,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The method has an empty catch block.
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: foreach (Brochures b in brochures) {  	try {  		if (I == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  			}  		}  		else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			OnInformationDownload (new EventArguments () {  				Name = "Writing all records"'  				Time = DateTime.Now'  				Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  			});  		}  	}  	catch (Exception ex) {  		int hr = Marshal.GetHRForException (ex);  		Result += "hr";  	}  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: foreach (Brochures b in brochures) {  	try {  		if (I == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  			}  		}  		else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			OnInformationDownload (new EventArguments () {  				Name = "Writing all records"'  				Time = DateTime.Now'  				Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  			});  		}  	}  	catch (Exception ex) {  		int hr = Marshal.GetHRForException (ex);  		Result += "hr";  	}  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: foreach (Brochures b in brochures) {  	try {  		if (I == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  			}  		}  		else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			OnInformationDownload (new EventArguments () {  				Name = "Writing all records"'  				Time = DateTime.Now'  				Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  			});  		}  	}  	catch (Exception ex) {  		int hr = Marshal.GetHRForException (ex);  		Result += "hr";  	}  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: foreach (Brochures b in brochures) {  	try {  		if (I == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  			}  		}  		else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			OnInformationDownload (new EventArguments () {  				Name = "Writing all records"'  				Time = DateTime.Now'  				Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  			});  		}  	}  	catch (Exception ex) {  		int hr = Marshal.GetHRForException (ex);  		Result += "hr";  	}  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: foreach (Brochures b in brochures) {  	try {  		if (I == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  			}  		}  		else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			OnInformationDownload (new EventArguments () {  				Name = "Writing all records"'  				Time = DateTime.Now'  				Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  			});  		}  	}  	catch (Exception ex) {  		int hr = Marshal.GetHRForException (ex);  		Result += "hr";  	}  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: foreach (Brochures b in brochures) {  	try {  		if (I == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  			}  		}  		else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			OnInformationDownload (new EventArguments () {  				Name = "Writing all records"'  				Time = DateTime.Now'  				Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  			});  		}  	}  	catch (Exception ex) {  		int hr = Marshal.GetHRForException (ex);  		Result += "hr";  	}  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: foreach (Brochures b in brochures) {  	try {  		if (I == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  			}  		}  		else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			OnInformationDownload (new EventArguments () {  				Name = "Writing all records"'  				Time = DateTime.Now'  				Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  			});  		}  	}  	catch (Exception ex) {  		int hr = Marshal.GetHRForException (ex);  		Result += "hr";  	}  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: foreach (Brochures b in brochures) {  	try {  		if (I == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  			}  		}  		else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			OnInformationDownload (new EventArguments () {  				Name = "Writing all records"'  				Time = DateTime.Now'  				Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  			});  		}  	}  	catch (Exception ex) {  		int hr = Marshal.GetHRForException (ex);  		Result += "hr";  	}  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: foreach (Brochures b in brochures) {  	try {  		if (I == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  			}  		}  		else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			OnInformationDownload (new EventArguments () {  				Name = "Writing all records"'  				Time = DateTime.Now'  				Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  			});  		}  	}  	catch (Exception ex) {  		int hr = Marshal.GetHRForException (ex);  		Result += "hr";  	}  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: try {  	if (I == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  		}  	}  	else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		OnInformationDownload (new EventArguments () {  			Name = "Writing all records"'  			Time = DateTime.Now'  			Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  		});  	}  }  catch (Exception ex) {  	int hr = Marshal.GetHRForException (ex);  	Result += "hr";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: try {  	if (I == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  		}  	}  	else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		OnInformationDownload (new EventArguments () {  			Name = "Writing all records"'  			Time = DateTime.Now'  			Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  		});  	}  }  catch (Exception ex) {  	int hr = Marshal.GetHRForException (ex);  	Result += "hr";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: try {  	if (I == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  		}  	}  	else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		OnInformationDownload (new EventArguments () {  			Name = "Writing all records"'  			Time = DateTime.Now'  			Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  		});  	}  }  catch (Exception ex) {  	int hr = Marshal.GetHRForException (ex);  	Result += "hr";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: try {  	if (I == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  		}  	}  	else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		OnInformationDownload (new EventArguments () {  			Name = "Writing all records"'  			Time = DateTime.Now'  			Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  		});  	}  }  catch (Exception ex) {  	int hr = Marshal.GetHRForException (ex);  	Result += "hr";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: try {  	if (I == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  		}  	}  	else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		OnInformationDownload (new EventArguments () {  			Name = "Writing all records"'  			Time = DateTime.Now'  			Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  		});  	}  }  catch (Exception ex) {  	int hr = Marshal.GetHRForException (ex);  	Result += "hr";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: try {  	if (I == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  		}  	}  	else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		OnInformationDownload (new EventArguments () {  			Name = "Writing all records"'  			Time = DateTime.Now'  			Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  		});  	}  }  catch (Exception ex) {  	int hr = Marshal.GetHRForException (ex);  	Result += "hr";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: try {  	if (I == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  		}  	}  	else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		OnInformationDownload (new EventArguments () {  			Name = "Writing all records"'  			Time = DateTime.Now'  			Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  		});  	}  }  catch (Exception ex) {  	int hr = Marshal.GetHRForException (ex);  	Result += "hr";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: try {  	if (I == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  		}  	}  	else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		OnInformationDownload (new EventArguments () {  			Name = "Writing all records"'  			Time = DateTime.Now'  			Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  		});  	}  }  catch (Exception ex) {  	int hr = Marshal.GetHRForException (ex);  	Result += "hr";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: try {  	if (I == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  		}  	}  	else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		OnInformationDownload (new EventArguments () {  			Name = "Writing all records"'  			Time = DateTime.Now'  			Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  		});  	}  }  catch (Exception ex) {  	int hr = Marshal.GetHRForException (ex);  	Result += "hr";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (I == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  	}  }  else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (I == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  	}  }  else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (I == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  	}  }  else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (I == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  	}  }  else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (I == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  	}  }  else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (I == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  	}  }  else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (I == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  	}  }  else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (I == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  	}  }  else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (I == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  	}  }  else if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: xlWorkSheet.Cells [I' 2] = Header.PostCode;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: xlWorkSheet.Cells [I' 3] = Header.Price;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: xlWorkSheet.Cells [I' 4] = Header.PropertyType;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: xlWorkSheet.Cells [I' 2] = "PostCode";  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: xlWorkSheet.Cells [I' 3] = "Price";  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: xlWorkSheet.Cells [I' 4] = "PropertyType";  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: if (b.PostCode.Equals ("Postcode") == false || b.Price.Equals ("Price") == false) {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	OnInformationDownload (new EventArguments () {  		Name = "Writing all records"'  		Time = DateTime.Now'  		Details = "Writing " + I + "/" + brochures.Count + " Record in " + FilePath  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: xlWorkSheet.Cells [I' 2] = b.PostCode;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: xlWorkSheet.Cells [I' 3] = b.Price;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteAllBrochures,The following statement contains a magic number: xlWorkSheet.Cells [I' 4] = b.PropertyType;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: for (int i = 1; i < lastRow; i++) {  	Brochures brochure = new Brochures ();  	System.Array valueArray = null;  	try {  		valueArray = (System.Array)worksheet.get_Range ("A" + i.ToString ()' "D" + i.ToString ()).Cells.EntireRow.Value2;  	}  	catch (Exception e) {  		throw new Exception (e.Message);  	}  	try {  		string FolderName = null;  		string Price = null;  		if (valueArray != null) {  			try {  				FolderName = valueArray.GetValue (1' 1).ToString ();  				Price = valueArray.GetValue (1' 3).ToString ();  			}  			catch (NullReferenceException) {  			}  			if (String.IsNullOrEmpty (FolderName) || String.IsNullOrEmpty (Price)) {  				continue;  			}  			brochure.PostCode = valueArray.GetValue (1' 2).ToString ();  			brochure.PropertyType = valueArray.GetValue (1' 4).ToString ();  			brochure.Price = Price;  			brochure.FolderName = FolderName;  			brochuresList.Add (brochure);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: for (int i = 1; i < lastRow; i++) {  	Brochures brochure = new Brochures ();  	System.Array valueArray = null;  	try {  		valueArray = (System.Array)worksheet.get_Range ("A" + i.ToString ()' "D" + i.ToString ()).Cells.EntireRow.Value2;  	}  	catch (Exception e) {  		throw new Exception (e.Message);  	}  	try {  		string FolderName = null;  		string Price = null;  		if (valueArray != null) {  			try {  				FolderName = valueArray.GetValue (1' 1).ToString ();  				Price = valueArray.GetValue (1' 3).ToString ();  			}  			catch (NullReferenceException) {  			}  			if (String.IsNullOrEmpty (FolderName) || String.IsNullOrEmpty (Price)) {  				continue;  			}  			brochure.PostCode = valueArray.GetValue (1' 2).ToString ();  			brochure.PropertyType = valueArray.GetValue (1' 4).ToString ();  			brochure.Price = Price;  			brochure.FolderName = FolderName;  			brochuresList.Add (brochure);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: for (int i = 1; i < lastRow; i++) {  	Brochures brochure = new Brochures ();  	System.Array valueArray = null;  	try {  		valueArray = (System.Array)worksheet.get_Range ("A" + i.ToString ()' "D" + i.ToString ()).Cells.EntireRow.Value2;  	}  	catch (Exception e) {  		throw new Exception (e.Message);  	}  	try {  		string FolderName = null;  		string Price = null;  		if (valueArray != null) {  			try {  				FolderName = valueArray.GetValue (1' 1).ToString ();  				Price = valueArray.GetValue (1' 3).ToString ();  			}  			catch (NullReferenceException) {  			}  			if (String.IsNullOrEmpty (FolderName) || String.IsNullOrEmpty (Price)) {  				continue;  			}  			brochure.PostCode = valueArray.GetValue (1' 2).ToString ();  			brochure.PropertyType = valueArray.GetValue (1' 4).ToString ();  			brochure.Price = Price;  			brochure.FolderName = FolderName;  			brochuresList.Add (brochure);  		}  	}  	catch (Exception) {  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: try {  	string FolderName = null;  	string Price = null;  	if (valueArray != null) {  		try {  			FolderName = valueArray.GetValue (1' 1).ToString ();  			Price = valueArray.GetValue (1' 3).ToString ();  		}  		catch (NullReferenceException) {  		}  		if (String.IsNullOrEmpty (FolderName) || String.IsNullOrEmpty (Price)) {  			continue;  		}  		brochure.PostCode = valueArray.GetValue (1' 2).ToString ();  		brochure.PropertyType = valueArray.GetValue (1' 4).ToString ();  		brochure.Price = Price;  		brochure.FolderName = FolderName;  		brochuresList.Add (brochure);  	}  }  catch (Exception) {  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: try {  	string FolderName = null;  	string Price = null;  	if (valueArray != null) {  		try {  			FolderName = valueArray.GetValue (1' 1).ToString ();  			Price = valueArray.GetValue (1' 3).ToString ();  		}  		catch (NullReferenceException) {  		}  		if (String.IsNullOrEmpty (FolderName) || String.IsNullOrEmpty (Price)) {  			continue;  		}  		brochure.PostCode = valueArray.GetValue (1' 2).ToString ();  		brochure.PropertyType = valueArray.GetValue (1' 4).ToString ();  		brochure.Price = Price;  		brochure.FolderName = FolderName;  		brochuresList.Add (brochure);  	}  }  catch (Exception) {  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: try {  	string FolderName = null;  	string Price = null;  	if (valueArray != null) {  		try {  			FolderName = valueArray.GetValue (1' 1).ToString ();  			Price = valueArray.GetValue (1' 3).ToString ();  		}  		catch (NullReferenceException) {  		}  		if (String.IsNullOrEmpty (FolderName) || String.IsNullOrEmpty (Price)) {  			continue;  		}  		brochure.PostCode = valueArray.GetValue (1' 2).ToString ();  		brochure.PropertyType = valueArray.GetValue (1' 4).ToString ();  		brochure.Price = Price;  		brochure.FolderName = FolderName;  		brochuresList.Add (brochure);  	}  }  catch (Exception) {  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: if (valueArray != null) {  	try {  		FolderName = valueArray.GetValue (1' 1).ToString ();  		Price = valueArray.GetValue (1' 3).ToString ();  	}  	catch (NullReferenceException) {  	}  	if (String.IsNullOrEmpty (FolderName) || String.IsNullOrEmpty (Price)) {  		continue;  	}  	brochure.PostCode = valueArray.GetValue (1' 2).ToString ();  	brochure.PropertyType = valueArray.GetValue (1' 4).ToString ();  	brochure.Price = Price;  	brochure.FolderName = FolderName;  	brochuresList.Add (brochure);  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: if (valueArray != null) {  	try {  		FolderName = valueArray.GetValue (1' 1).ToString ();  		Price = valueArray.GetValue (1' 3).ToString ();  	}  	catch (NullReferenceException) {  	}  	if (String.IsNullOrEmpty (FolderName) || String.IsNullOrEmpty (Price)) {  		continue;  	}  	brochure.PostCode = valueArray.GetValue (1' 2).ToString ();  	brochure.PropertyType = valueArray.GetValue (1' 4).ToString ();  	brochure.Price = Price;  	brochure.FolderName = FolderName;  	brochuresList.Add (brochure);  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: if (valueArray != null) {  	try {  		FolderName = valueArray.GetValue (1' 1).ToString ();  		Price = valueArray.GetValue (1' 3).ToString ();  	}  	catch (NullReferenceException) {  	}  	if (String.IsNullOrEmpty (FolderName) || String.IsNullOrEmpty (Price)) {  		continue;  	}  	brochure.PostCode = valueArray.GetValue (1' 2).ToString ();  	brochure.PropertyType = valueArray.GetValue (1' 4).ToString ();  	brochure.Price = Price;  	brochure.FolderName = FolderName;  	brochuresList.Add (brochure);  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: try {  	FolderName = valueArray.GetValue (1' 1).ToString ();  	Price = valueArray.GetValue (1' 3).ToString ();  }  catch (NullReferenceException) {  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: Price = valueArray.GetValue (1' 3).ToString ();  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: brochure.PostCode = valueArray.GetValue (1' 2).ToString ();  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,GetBrochuresFromExcel,The following statement contains a magic number: brochure.PropertyType = valueArray.GetValue (1' 4).ToString ();  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: foreach (Brochures b in bc.BListSpecific) {  	Count++;  	if (I + J == 10) {  		break;  	}  	if (b.PropertyType.Equals ("terraced")) {  		if (I == 1) {  			if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  				xlWorkSheet.Cells [I' 1] = Header.FolderName;  				xlWorkSheet.Cells [I' 2] = Header.PostCode;  				xlWorkSheet.Cells [I' 3] = Header.Price;  				xlWorkSheet.Cells [I' 4] = Header.PropertyType;  				I++;  			}  			else {  				xlWorkSheet.Cells [I' 1] = "FolderName";  				xlWorkSheet.Cells [I' 2] = "PostCode";  				xlWorkSheet.Cells [I' 3] = "Price";  				xlWorkSheet.Cells [I' 4] = "PropertyType";  				I++;  			}  			continue;  		}  		try {  			xlWorkSheet.Cells [I' 1] = b.FolderName;  			xlWorkSheet.Cells [I' 2] = b.PostCode;  			xlWorkSheet.Cells [I' 3] = b.Price;  			xlWorkSheet.Cells [I' 4] = b.PropertyType;  			I++;  		}  		catch (COMException) {  			Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	else {  		try {  			if (J == 1) {  				if (Header != null) {  					xlWorkSheet.Cells [J' 1] = Header.FolderName;  					xlWorkSheet.Cells [J' 2] = Header.PostCode;  					xlWorkSheet.Cells [J' 3] = Header.Price;  					xlWorkSheet.Cells [J' 4] = Header.PropertyType;  					J++;  				}  				else {  					xlWorkSheet.Cells [J' 1] = "FolderName";  					xlWorkSheet.Cells [J' 2] = "PostCode";  					xlWorkSheet.Cells [J' 3] = "Price";  					xlWorkSheet.Cells [J' 4] = "PropertyType";  					J++;  				}  				continue;  			}  			xlWorkSheet2.Cells [J' 1] = b.FolderName;  			xlWorkSheet2.Cells [J' 2] = b.PostCode;  			xlWorkSheet2.Cells [J' 3] = b.Price;  			xlWorkSheet2.Cells [J' 4] = b.PropertyType;  			J++;  			OnInformationDownload (new EventArguments () {  				Name = "Writing Records"'  				Time = DateTime.Now'  				Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  			});  		}  		catch (COMException) {  			Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  			OnInformationDownload (new EventArguments () {  				Name = "ERROR"'  				Time = DateTime.Now'  				Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  			});  		}  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (I + J == 10) {  	break;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (b.PropertyType.Equals ("terraced")) {  	if (I == 1) {  		if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  			xlWorkSheet.Cells [I' 1] = Header.FolderName;  			xlWorkSheet.Cells [I' 2] = Header.PostCode;  			xlWorkSheet.Cells [I' 3] = Header.Price;  			xlWorkSheet.Cells [I' 4] = Header.PropertyType;  			I++;  		}  		else {  			xlWorkSheet.Cells [I' 1] = "FolderName";  			xlWorkSheet.Cells [I' 2] = "PostCode";  			xlWorkSheet.Cells [I' 3] = "Price";  			xlWorkSheet.Cells [I' 4] = "PropertyType";  			I++;  		}  		continue;  	}  	try {  		xlWorkSheet.Cells [I' 1] = b.FolderName;  		xlWorkSheet.Cells [I' 2] = b.PostCode;  		xlWorkSheet.Cells [I' 3] = b.Price;  		xlWorkSheet.Cells [I' 4] = b.PropertyType;  		I++;  	}  	catch (COMException) {  		Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  else {  	try {  		if (J == 1) {  			if (Header != null) {  				xlWorkSheet.Cells [J' 1] = Header.FolderName;  				xlWorkSheet.Cells [J' 2] = Header.PostCode;  				xlWorkSheet.Cells [J' 3] = Header.Price;  				xlWorkSheet.Cells [J' 4] = Header.PropertyType;  				J++;  			}  			else {  				xlWorkSheet.Cells [J' 1] = "FolderName";  				xlWorkSheet.Cells [J' 2] = "PostCode";  				xlWorkSheet.Cells [J' 3] = "Price";  				xlWorkSheet.Cells [J' 4] = "PropertyType";  				J++;  			}  			continue;  		}  		xlWorkSheet2.Cells [J' 1] = b.FolderName;  		xlWorkSheet2.Cells [J' 2] = b.PostCode;  		xlWorkSheet2.Cells [J' 3] = b.Price;  		xlWorkSheet2.Cells [J' 4] = b.PropertyType;  		J++;  		OnInformationDownload (new EventArguments () {  			Name = "Writing Records"'  			Time = DateTime.Now'  			Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  		});  	}  	catch (COMException) {  		Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (I == 1) {  	if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		I++;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  		I++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (I == 1) {  	if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		I++;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  		I++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (I == 1) {  	if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		I++;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  		I++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (I == 1) {  	if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		I++;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  		I++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (I == 1) {  	if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		I++;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  		I++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (I == 1) {  	if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  		xlWorkSheet.Cells [I' 1] = Header.FolderName;  		xlWorkSheet.Cells [I' 2] = Header.PostCode;  		xlWorkSheet.Cells [I' 3] = Header.Price;  		xlWorkSheet.Cells [I' 4] = Header.PropertyType;  		I++;  	}  	else {  		xlWorkSheet.Cells [I' 1] = "FolderName";  		xlWorkSheet.Cells [I' 2] = "PostCode";  		xlWorkSheet.Cells [I' 3] = "Price";  		xlWorkSheet.Cells [I' 4] = "PropertyType";  		I++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	I++;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	I++;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	I++;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	I++;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	I++;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (String.IsNullOrEmpty (Header.FolderName) == false && String.IsNullOrEmpty (Header.PostCode) == false) {  	xlWorkSheet.Cells [I' 1] = Header.FolderName;  	xlWorkSheet.Cells [I' 2] = Header.PostCode;  	xlWorkSheet.Cells [I' 3] = Header.Price;  	xlWorkSheet.Cells [I' 4] = Header.PropertyType;  	I++;  }  else {  	xlWorkSheet.Cells [I' 1] = "FolderName";  	xlWorkSheet.Cells [I' 2] = "PostCode";  	xlWorkSheet.Cells [I' 3] = "Price";  	xlWorkSheet.Cells [I' 4] = "PropertyType";  	I++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [I' 2] = Header.PostCode;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [I' 3] = Header.Price;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [I' 4] = Header.PropertyType;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [I' 2] = "PostCode";  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [I' 3] = "Price";  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [I' 4] = "PropertyType";  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	I++;  }  catch (COMException) {  	Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	I++;  }  catch (COMException) {  	Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	xlWorkSheet.Cells [I' 1] = b.FolderName;  	xlWorkSheet.Cells [I' 2] = b.PostCode;  	xlWorkSheet.Cells [I' 3] = b.Price;  	xlWorkSheet.Cells [I' 4] = b.PropertyType;  	I++;  }  catch (COMException) {  	Result = "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [I' 2] = b.PostCode;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [I' 3] = b.Price;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [I' 4] = b.PropertyType;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	if (J == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [J' 1] = Header.FolderName;  			xlWorkSheet.Cells [J' 2] = Header.PostCode;  			xlWorkSheet.Cells [J' 3] = Header.Price;  			xlWorkSheet.Cells [J' 4] = Header.PropertyType;  			J++;  		}  		else {  			xlWorkSheet.Cells [J' 1] = "FolderName";  			xlWorkSheet.Cells [J' 2] = "PostCode";  			xlWorkSheet.Cells [J' 3] = "Price";  			xlWorkSheet.Cells [J' 4] = "PropertyType";  			J++;  		}  		continue;  	}  	xlWorkSheet2.Cells [J' 1] = b.FolderName;  	xlWorkSheet2.Cells [J' 2] = b.PostCode;  	xlWorkSheet2.Cells [J' 3] = b.Price;  	xlWorkSheet2.Cells [J' 4] = b.PropertyType;  	J++;  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  catch (COMException) {  	Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	if (J == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [J' 1] = Header.FolderName;  			xlWorkSheet.Cells [J' 2] = Header.PostCode;  			xlWorkSheet.Cells [J' 3] = Header.Price;  			xlWorkSheet.Cells [J' 4] = Header.PropertyType;  			J++;  		}  		else {  			xlWorkSheet.Cells [J' 1] = "FolderName";  			xlWorkSheet.Cells [J' 2] = "PostCode";  			xlWorkSheet.Cells [J' 3] = "Price";  			xlWorkSheet.Cells [J' 4] = "PropertyType";  			J++;  		}  		continue;  	}  	xlWorkSheet2.Cells [J' 1] = b.FolderName;  	xlWorkSheet2.Cells [J' 2] = b.PostCode;  	xlWorkSheet2.Cells [J' 3] = b.Price;  	xlWorkSheet2.Cells [J' 4] = b.PropertyType;  	J++;  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  catch (COMException) {  	Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	if (J == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [J' 1] = Header.FolderName;  			xlWorkSheet.Cells [J' 2] = Header.PostCode;  			xlWorkSheet.Cells [J' 3] = Header.Price;  			xlWorkSheet.Cells [J' 4] = Header.PropertyType;  			J++;  		}  		else {  			xlWorkSheet.Cells [J' 1] = "FolderName";  			xlWorkSheet.Cells [J' 2] = "PostCode";  			xlWorkSheet.Cells [J' 3] = "Price";  			xlWorkSheet.Cells [J' 4] = "PropertyType";  			J++;  		}  		continue;  	}  	xlWorkSheet2.Cells [J' 1] = b.FolderName;  	xlWorkSheet2.Cells [J' 2] = b.PostCode;  	xlWorkSheet2.Cells [J' 3] = b.Price;  	xlWorkSheet2.Cells [J' 4] = b.PropertyType;  	J++;  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  catch (COMException) {  	Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	if (J == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [J' 1] = Header.FolderName;  			xlWorkSheet.Cells [J' 2] = Header.PostCode;  			xlWorkSheet.Cells [J' 3] = Header.Price;  			xlWorkSheet.Cells [J' 4] = Header.PropertyType;  			J++;  		}  		else {  			xlWorkSheet.Cells [J' 1] = "FolderName";  			xlWorkSheet.Cells [J' 2] = "PostCode";  			xlWorkSheet.Cells [J' 3] = "Price";  			xlWorkSheet.Cells [J' 4] = "PropertyType";  			J++;  		}  		continue;  	}  	xlWorkSheet2.Cells [J' 1] = b.FolderName;  	xlWorkSheet2.Cells [J' 2] = b.PostCode;  	xlWorkSheet2.Cells [J' 3] = b.Price;  	xlWorkSheet2.Cells [J' 4] = b.PropertyType;  	J++;  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  catch (COMException) {  	Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	if (J == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [J' 1] = Header.FolderName;  			xlWorkSheet.Cells [J' 2] = Header.PostCode;  			xlWorkSheet.Cells [J' 3] = Header.Price;  			xlWorkSheet.Cells [J' 4] = Header.PropertyType;  			J++;  		}  		else {  			xlWorkSheet.Cells [J' 1] = "FolderName";  			xlWorkSheet.Cells [J' 2] = "PostCode";  			xlWorkSheet.Cells [J' 3] = "Price";  			xlWorkSheet.Cells [J' 4] = "PropertyType";  			J++;  		}  		continue;  	}  	xlWorkSheet2.Cells [J' 1] = b.FolderName;  	xlWorkSheet2.Cells [J' 2] = b.PostCode;  	xlWorkSheet2.Cells [J' 3] = b.Price;  	xlWorkSheet2.Cells [J' 4] = b.PropertyType;  	J++;  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  catch (COMException) {  	Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	if (J == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [J' 1] = Header.FolderName;  			xlWorkSheet.Cells [J' 2] = Header.PostCode;  			xlWorkSheet.Cells [J' 3] = Header.Price;  			xlWorkSheet.Cells [J' 4] = Header.PropertyType;  			J++;  		}  		else {  			xlWorkSheet.Cells [J' 1] = "FolderName";  			xlWorkSheet.Cells [J' 2] = "PostCode";  			xlWorkSheet.Cells [J' 3] = "Price";  			xlWorkSheet.Cells [J' 4] = "PropertyType";  			J++;  		}  		continue;  	}  	xlWorkSheet2.Cells [J' 1] = b.FolderName;  	xlWorkSheet2.Cells [J' 2] = b.PostCode;  	xlWorkSheet2.Cells [J' 3] = b.Price;  	xlWorkSheet2.Cells [J' 4] = b.PropertyType;  	J++;  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  catch (COMException) {  	Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	if (J == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [J' 1] = Header.FolderName;  			xlWorkSheet.Cells [J' 2] = Header.PostCode;  			xlWorkSheet.Cells [J' 3] = Header.Price;  			xlWorkSheet.Cells [J' 4] = Header.PropertyType;  			J++;  		}  		else {  			xlWorkSheet.Cells [J' 1] = "FolderName";  			xlWorkSheet.Cells [J' 2] = "PostCode";  			xlWorkSheet.Cells [J' 3] = "Price";  			xlWorkSheet.Cells [J' 4] = "PropertyType";  			J++;  		}  		continue;  	}  	xlWorkSheet2.Cells [J' 1] = b.FolderName;  	xlWorkSheet2.Cells [J' 2] = b.PostCode;  	xlWorkSheet2.Cells [J' 3] = b.Price;  	xlWorkSheet2.Cells [J' 4] = b.PropertyType;  	J++;  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  catch (COMException) {  	Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	if (J == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [J' 1] = Header.FolderName;  			xlWorkSheet.Cells [J' 2] = Header.PostCode;  			xlWorkSheet.Cells [J' 3] = Header.Price;  			xlWorkSheet.Cells [J' 4] = Header.PropertyType;  			J++;  		}  		else {  			xlWorkSheet.Cells [J' 1] = "FolderName";  			xlWorkSheet.Cells [J' 2] = "PostCode";  			xlWorkSheet.Cells [J' 3] = "Price";  			xlWorkSheet.Cells [J' 4] = "PropertyType";  			J++;  		}  		continue;  	}  	xlWorkSheet2.Cells [J' 1] = b.FolderName;  	xlWorkSheet2.Cells [J' 2] = b.PostCode;  	xlWorkSheet2.Cells [J' 3] = b.Price;  	xlWorkSheet2.Cells [J' 4] = b.PropertyType;  	J++;  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  catch (COMException) {  	Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: try {  	if (J == 1) {  		if (Header != null) {  			xlWorkSheet.Cells [J' 1] = Header.FolderName;  			xlWorkSheet.Cells [J' 2] = Header.PostCode;  			xlWorkSheet.Cells [J' 3] = Header.Price;  			xlWorkSheet.Cells [J' 4] = Header.PropertyType;  			J++;  		}  		else {  			xlWorkSheet.Cells [J' 1] = "FolderName";  			xlWorkSheet.Cells [J' 2] = "PostCode";  			xlWorkSheet.Cells [J' 3] = "Price";  			xlWorkSheet.Cells [J' 4] = "PropertyType";  			J++;  		}  		continue;  	}  	xlWorkSheet2.Cells [J' 1] = b.FolderName;  	xlWorkSheet2.Cells [J' 2] = b.PostCode;  	xlWorkSheet2.Cells [J' 3] = b.Price;  	xlWorkSheet2.Cells [J' 4] = b.PropertyType;  	J++;  	OnInformationDownload (new EventArguments () {  		Name = "Writing Records"'  		Time = DateTime.Now'  		Details = "Writing " + Count + "//" + bc.BListSpecific.Count + " Record in " + b.FolderName  	});  }  catch (COMException) {  	Result += "\nCan not Fill Cells of Excels 'May be the File is opened somewhere else";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "Can not Fill Cells of Excels 'May be the File is opened somewhere else"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (J == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [J' 1] = Header.FolderName;  		xlWorkSheet.Cells [J' 2] = Header.PostCode;  		xlWorkSheet.Cells [J' 3] = Header.Price;  		xlWorkSheet.Cells [J' 4] = Header.PropertyType;  		J++;  	}  	else {  		xlWorkSheet.Cells [J' 1] = "FolderName";  		xlWorkSheet.Cells [J' 2] = "PostCode";  		xlWorkSheet.Cells [J' 3] = "Price";  		xlWorkSheet.Cells [J' 4] = "PropertyType";  		J++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (J == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [J' 1] = Header.FolderName;  		xlWorkSheet.Cells [J' 2] = Header.PostCode;  		xlWorkSheet.Cells [J' 3] = Header.Price;  		xlWorkSheet.Cells [J' 4] = Header.PropertyType;  		J++;  	}  	else {  		xlWorkSheet.Cells [J' 1] = "FolderName";  		xlWorkSheet.Cells [J' 2] = "PostCode";  		xlWorkSheet.Cells [J' 3] = "Price";  		xlWorkSheet.Cells [J' 4] = "PropertyType";  		J++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (J == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [J' 1] = Header.FolderName;  		xlWorkSheet.Cells [J' 2] = Header.PostCode;  		xlWorkSheet.Cells [J' 3] = Header.Price;  		xlWorkSheet.Cells [J' 4] = Header.PropertyType;  		J++;  	}  	else {  		xlWorkSheet.Cells [J' 1] = "FolderName";  		xlWorkSheet.Cells [J' 2] = "PostCode";  		xlWorkSheet.Cells [J' 3] = "Price";  		xlWorkSheet.Cells [J' 4] = "PropertyType";  		J++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (J == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [J' 1] = Header.FolderName;  		xlWorkSheet.Cells [J' 2] = Header.PostCode;  		xlWorkSheet.Cells [J' 3] = Header.Price;  		xlWorkSheet.Cells [J' 4] = Header.PropertyType;  		J++;  	}  	else {  		xlWorkSheet.Cells [J' 1] = "FolderName";  		xlWorkSheet.Cells [J' 2] = "PostCode";  		xlWorkSheet.Cells [J' 3] = "Price";  		xlWorkSheet.Cells [J' 4] = "PropertyType";  		J++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (J == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [J' 1] = Header.FolderName;  		xlWorkSheet.Cells [J' 2] = Header.PostCode;  		xlWorkSheet.Cells [J' 3] = Header.Price;  		xlWorkSheet.Cells [J' 4] = Header.PropertyType;  		J++;  	}  	else {  		xlWorkSheet.Cells [J' 1] = "FolderName";  		xlWorkSheet.Cells [J' 2] = "PostCode";  		xlWorkSheet.Cells [J' 3] = "Price";  		xlWorkSheet.Cells [J' 4] = "PropertyType";  		J++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (J == 1) {  	if (Header != null) {  		xlWorkSheet.Cells [J' 1] = Header.FolderName;  		xlWorkSheet.Cells [J' 2] = Header.PostCode;  		xlWorkSheet.Cells [J' 3] = Header.Price;  		xlWorkSheet.Cells [J' 4] = Header.PropertyType;  		J++;  	}  	else {  		xlWorkSheet.Cells [J' 1] = "FolderName";  		xlWorkSheet.Cells [J' 2] = "PostCode";  		xlWorkSheet.Cells [J' 3] = "Price";  		xlWorkSheet.Cells [J' 4] = "PropertyType";  		J++;  	}  	continue;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [J' 1] = Header.FolderName;  	xlWorkSheet.Cells [J' 2] = Header.PostCode;  	xlWorkSheet.Cells [J' 3] = Header.Price;  	xlWorkSheet.Cells [J' 4] = Header.PropertyType;  	J++;  }  else {  	xlWorkSheet.Cells [J' 1] = "FolderName";  	xlWorkSheet.Cells [J' 2] = "PostCode";  	xlWorkSheet.Cells [J' 3] = "Price";  	xlWorkSheet.Cells [J' 4] = "PropertyType";  	J++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [J' 1] = Header.FolderName;  	xlWorkSheet.Cells [J' 2] = Header.PostCode;  	xlWorkSheet.Cells [J' 3] = Header.Price;  	xlWorkSheet.Cells [J' 4] = Header.PropertyType;  	J++;  }  else {  	xlWorkSheet.Cells [J' 1] = "FolderName";  	xlWorkSheet.Cells [J' 2] = "PostCode";  	xlWorkSheet.Cells [J' 3] = "Price";  	xlWorkSheet.Cells [J' 4] = "PropertyType";  	J++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [J' 1] = Header.FolderName;  	xlWorkSheet.Cells [J' 2] = Header.PostCode;  	xlWorkSheet.Cells [J' 3] = Header.Price;  	xlWorkSheet.Cells [J' 4] = Header.PropertyType;  	J++;  }  else {  	xlWorkSheet.Cells [J' 1] = "FolderName";  	xlWorkSheet.Cells [J' 2] = "PostCode";  	xlWorkSheet.Cells [J' 3] = "Price";  	xlWorkSheet.Cells [J' 4] = "PropertyType";  	J++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [J' 1] = Header.FolderName;  	xlWorkSheet.Cells [J' 2] = Header.PostCode;  	xlWorkSheet.Cells [J' 3] = Header.Price;  	xlWorkSheet.Cells [J' 4] = Header.PropertyType;  	J++;  }  else {  	xlWorkSheet.Cells [J' 1] = "FolderName";  	xlWorkSheet.Cells [J' 2] = "PostCode";  	xlWorkSheet.Cells [J' 3] = "Price";  	xlWorkSheet.Cells [J' 4] = "PropertyType";  	J++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [J' 1] = Header.FolderName;  	xlWorkSheet.Cells [J' 2] = Header.PostCode;  	xlWorkSheet.Cells [J' 3] = Header.Price;  	xlWorkSheet.Cells [J' 4] = Header.PropertyType;  	J++;  }  else {  	xlWorkSheet.Cells [J' 1] = "FolderName";  	xlWorkSheet.Cells [J' 2] = "PostCode";  	xlWorkSheet.Cells [J' 3] = "Price";  	xlWorkSheet.Cells [J' 4] = "PropertyType";  	J++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: if (Header != null) {  	xlWorkSheet.Cells [J' 1] = Header.FolderName;  	xlWorkSheet.Cells [J' 2] = Header.PostCode;  	xlWorkSheet.Cells [J' 3] = Header.Price;  	xlWorkSheet.Cells [J' 4] = Header.PropertyType;  	J++;  }  else {  	xlWorkSheet.Cells [J' 1] = "FolderName";  	xlWorkSheet.Cells [J' 2] = "PostCode";  	xlWorkSheet.Cells [J' 3] = "Price";  	xlWorkSheet.Cells [J' 4] = "PropertyType";  	J++;  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [J' 2] = Header.PostCode;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [J' 3] = Header.Price;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [J' 4] = Header.PropertyType;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [J' 2] = "PostCode";  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [J' 3] = "Price";  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet.Cells [J' 4] = "PropertyType";  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet2.Cells [J' 2] = b.PostCode;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet2.Cells [J' 3] = b.Price;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,WriteCollectionInExcel,The following statement contains a magic number: xlWorkSheet2.Cells [J' 4] = b.PropertyType;  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,The following statement contains a magic number: for (int i = 1; i <= lastRow; i++) {  	Brochures brochure = new Brochures ();  	//                System.Array valueArray = (System.Array)excelRange.get_Value(XlRangeValueDataType.xlRangeValueDefault);  	System.Array valueArray = null;  	try {  		valueArray = (System.Array)worksheet.get_Range ("A" + i.ToString ()' "L" + i.ToString ()).Cells.Value2;  	}  	catch (Exception e) {  		Result += "\nCan not Retrieve " + i + " Record.'" + e.Message;  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "CAN NOT RELEASE RESOURCES"  		});  		return Result;  	}  	try {  		brochure.PostCode = valueArray.GetValue (1' 5).ToString ();  		brochure.Price = valueArray.GetValue (1' 6).ToString ();  		brochure.PropertyType = valueArray.GetValue (1' 10).ToString ();  		brochure.FindCode ();  		if (brochure.PostCode.Equals ("Postcode") || brochure.Price.Equals ("Price")) {  			Header.PostCode = brochure.PostCode;  			Header.Price = brochure.Price;  			Header.PropertyType = brochure.PropertyType;  		}  		OnInformationDownload (new EventArguments () {  			Name = "Reading Records"'  			Time = DateTime.Now'  			Details = "Reading " + i + "//" + lastRow + " Record in " + brochure.FolderName  		});  		bCollection.BList.Add (brochure);  	}  	catch (Exception) {  		Result += "\nCan not Record Read Value at " + i + ".";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "CAN NOT READ VALUE"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,The following statement contains a magic number: for (int i = 1; i <= lastRow; i++) {  	Brochures brochure = new Brochures ();  	//                System.Array valueArray = (System.Array)excelRange.get_Value(XlRangeValueDataType.xlRangeValueDefault);  	System.Array valueArray = null;  	try {  		valueArray = (System.Array)worksheet.get_Range ("A" + i.ToString ()' "L" + i.ToString ()).Cells.Value2;  	}  	catch (Exception e) {  		Result += "\nCan not Retrieve " + i + " Record.'" + e.Message;  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "CAN NOT RELEASE RESOURCES"  		});  		return Result;  	}  	try {  		brochure.PostCode = valueArray.GetValue (1' 5).ToString ();  		brochure.Price = valueArray.GetValue (1' 6).ToString ();  		brochure.PropertyType = valueArray.GetValue (1' 10).ToString ();  		brochure.FindCode ();  		if (brochure.PostCode.Equals ("Postcode") || brochure.Price.Equals ("Price")) {  			Header.PostCode = brochure.PostCode;  			Header.Price = brochure.Price;  			Header.PropertyType = brochure.PropertyType;  		}  		OnInformationDownload (new EventArguments () {  			Name = "Reading Records"'  			Time = DateTime.Now'  			Details = "Reading " + i + "//" + lastRow + " Record in " + brochure.FolderName  		});  		bCollection.BList.Add (brochure);  	}  	catch (Exception) {  		Result += "\nCan not Record Read Value at " + i + ".";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "CAN NOT READ VALUE"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,The following statement contains a magic number: for (int i = 1; i <= lastRow; i++) {  	Brochures brochure = new Brochures ();  	//                System.Array valueArray = (System.Array)excelRange.get_Value(XlRangeValueDataType.xlRangeValueDefault);  	System.Array valueArray = null;  	try {  		valueArray = (System.Array)worksheet.get_Range ("A" + i.ToString ()' "L" + i.ToString ()).Cells.Value2;  	}  	catch (Exception e) {  		Result += "\nCan not Retrieve " + i + " Record.'" + e.Message;  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "CAN NOT RELEASE RESOURCES"  		});  		return Result;  	}  	try {  		brochure.PostCode = valueArray.GetValue (1' 5).ToString ();  		brochure.Price = valueArray.GetValue (1' 6).ToString ();  		brochure.PropertyType = valueArray.GetValue (1' 10).ToString ();  		brochure.FindCode ();  		if (brochure.PostCode.Equals ("Postcode") || brochure.Price.Equals ("Price")) {  			Header.PostCode = brochure.PostCode;  			Header.Price = brochure.Price;  			Header.PropertyType = brochure.PropertyType;  		}  		OnInformationDownload (new EventArguments () {  			Name = "Reading Records"'  			Time = DateTime.Now'  			Details = "Reading " + i + "//" + lastRow + " Record in " + brochure.FolderName  		});  		bCollection.BList.Add (brochure);  	}  	catch (Exception) {  		Result += "\nCan not Record Read Value at " + i + ".";  		OnInformationDownload (new EventArguments () {  			Name = "ERROR"'  			Time = DateTime.Now'  			Details = "CAN NOT READ VALUE"  		});  	}  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,The following statement contains a magic number: try {  	brochure.PostCode = valueArray.GetValue (1' 5).ToString ();  	brochure.Price = valueArray.GetValue (1' 6).ToString ();  	brochure.PropertyType = valueArray.GetValue (1' 10).ToString ();  	brochure.FindCode ();  	if (brochure.PostCode.Equals ("Postcode") || brochure.Price.Equals ("Price")) {  		Header.PostCode = brochure.PostCode;  		Header.Price = brochure.Price;  		Header.PropertyType = brochure.PropertyType;  	}  	OnInformationDownload (new EventArguments () {  		Name = "Reading Records"'  		Time = DateTime.Now'  		Details = "Reading " + i + "//" + lastRow + " Record in " + brochure.FolderName  	});  	bCollection.BList.Add (brochure);  }  catch (Exception) {  	Result += "\nCan not Record Read Value at " + i + ".";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "CAN NOT READ VALUE"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,The following statement contains a magic number: try {  	brochure.PostCode = valueArray.GetValue (1' 5).ToString ();  	brochure.Price = valueArray.GetValue (1' 6).ToString ();  	brochure.PropertyType = valueArray.GetValue (1' 10).ToString ();  	brochure.FindCode ();  	if (brochure.PostCode.Equals ("Postcode") || brochure.Price.Equals ("Price")) {  		Header.PostCode = brochure.PostCode;  		Header.Price = brochure.Price;  		Header.PropertyType = brochure.PropertyType;  	}  	OnInformationDownload (new EventArguments () {  		Name = "Reading Records"'  		Time = DateTime.Now'  		Details = "Reading " + i + "//" + lastRow + " Record in " + brochure.FolderName  	});  	bCollection.BList.Add (brochure);  }  catch (Exception) {  	Result += "\nCan not Record Read Value at " + i + ".";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "CAN NOT READ VALUE"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,The following statement contains a magic number: try {  	brochure.PostCode = valueArray.GetValue (1' 5).ToString ();  	brochure.Price = valueArray.GetValue (1' 6).ToString ();  	brochure.PropertyType = valueArray.GetValue (1' 10).ToString ();  	brochure.FindCode ();  	if (brochure.PostCode.Equals ("Postcode") || brochure.Price.Equals ("Price")) {  		Header.PostCode = brochure.PostCode;  		Header.Price = brochure.Price;  		Header.PropertyType = brochure.PropertyType;  	}  	OnInformationDownload (new EventArguments () {  		Name = "Reading Records"'  		Time = DateTime.Now'  		Details = "Reading " + i + "//" + lastRow + " Record in " + brochure.FolderName  	});  	bCollection.BList.Add (brochure);  }  catch (Exception) {  	Result += "\nCan not Record Read Value at " + i + ".";  	OnInformationDownload (new EventArguments () {  		Name = "ERROR"'  		Time = DateTime.Now'  		Details = "CAN NOT READ VALUE"  	});  }  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,The following statement contains a magic number: brochure.PostCode = valueArray.GetValue (1' 5).ToString ();  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,The following statement contains a magic number: brochure.Price = valueArray.GetValue (1' 6).ToString ();  
Magic Number,SplitandMerge,ExcelHandlercs,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\ExcelHandlercs.cs,ReadBrochures,The following statement contains a magic number: brochure.PropertyType = valueArray.GetValue (1' 10).ToString ();  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,backgroundWorker1_RunWorkerCompleted,The following statement contains a magic number: notifyIcon1.ShowBalloonTip (100);  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,buttonInput_Click,The following statement contains a magic number: if (radioButtonSplit.Checked == true) {  	openFileDialog1.ShowDialog ();  	if (openFileDialog1.FileName.Contains (".xls") == false || openFileDialog1.FileName.Contains (".xlsx") == false) {  		MessageBox.Show ("You can only choose Excel File");  		notifyIcon1.BalloonTipText = "You can only choose Excel File";  		notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;  		notifyIcon1.BalloonTipTitle = "ExcelError";  		notifyIcon1.ShowBalloonTip (100);  	}  	else {  		textBoxInput.Text = openFileDialog1.FileName;  	}  }  else {  	folderBrowserDialog1.ShowDialog ();  	if (folderBrowserDialog1.SelectedPath == null) {  		MessageBox.Show ("Please select valid Folder");  		notifyIcon1.BalloonTipText = "You can only choose Excel File";  		notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;  		notifyIcon1.BalloonTipTitle = "ExcelError";  		notifyIcon1.ShowBalloonTip (100);  	}  	else {  		textBoxInput.Text = folderBrowserDialog1.SelectedPath;  	}  }  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,buttonInput_Click,The following statement contains a magic number: if (radioButtonSplit.Checked == true) {  	openFileDialog1.ShowDialog ();  	if (openFileDialog1.FileName.Contains (".xls") == false || openFileDialog1.FileName.Contains (".xlsx") == false) {  		MessageBox.Show ("You can only choose Excel File");  		notifyIcon1.BalloonTipText = "You can only choose Excel File";  		notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;  		notifyIcon1.BalloonTipTitle = "ExcelError";  		notifyIcon1.ShowBalloonTip (100);  	}  	else {  		textBoxInput.Text = openFileDialog1.FileName;  	}  }  else {  	folderBrowserDialog1.ShowDialog ();  	if (folderBrowserDialog1.SelectedPath == null) {  		MessageBox.Show ("Please select valid Folder");  		notifyIcon1.BalloonTipText = "You can only choose Excel File";  		notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;  		notifyIcon1.BalloonTipTitle = "ExcelError";  		notifyIcon1.ShowBalloonTip (100);  	}  	else {  		textBoxInput.Text = folderBrowserDialog1.SelectedPath;  	}  }  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,buttonInput_Click,The following statement contains a magic number: if (openFileDialog1.FileName.Contains (".xls") == false || openFileDialog1.FileName.Contains (".xlsx") == false) {  	MessageBox.Show ("You can only choose Excel File");  	notifyIcon1.BalloonTipText = "You can only choose Excel File";  	notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;  	notifyIcon1.BalloonTipTitle = "ExcelError";  	notifyIcon1.ShowBalloonTip (100);  }  else {  	textBoxInput.Text = openFileDialog1.FileName;  }  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,buttonInput_Click,The following statement contains a magic number: notifyIcon1.ShowBalloonTip (100);  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,buttonInput_Click,The following statement contains a magic number: if (folderBrowserDialog1.SelectedPath == null) {  	MessageBox.Show ("Please select valid Folder");  	notifyIcon1.BalloonTipText = "You can only choose Excel File";  	notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;  	notifyIcon1.BalloonTipTitle = "ExcelError";  	notifyIcon1.ShowBalloonTip (100);  }  else {  	textBoxInput.Text = folderBrowserDialog1.SelectedPath;  }  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,buttonInput_Click,The following statement contains a magic number: notifyIcon1.ShowBalloonTip (100);  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,buttonOutput_Click,The following statement contains a magic number: if (radioButtonSplit.Checked == true) {  	folderBrowserDialog1.ShowDialog ();  	if (folderBrowserDialog1.SelectedPath == null) {  		MessageBox.Show ("Please Select valid Folder");  		notifyIcon1.BalloonTipText = "You can only choose Excel File";  		notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;  		notifyIcon1.BalloonTipTitle = "ExcelError";  		notifyIcon1.ShowBalloonTip (100);  	}  	else {  		textBoxOutput.Text = folderBrowserDialog1.SelectedPath;  	}  }  else {  	saveFileDialog1.ShowDialog ();  	if (saveFileDialog1.FileName.Contains (".xls") == true || saveFileDialog1.FileName.Contains (".xlsx") == true) {  		textBoxOutput.Text = saveFileDialog1.FileName;  	}  	else {  		MessageBox.Show ("You can only choose Excel File");  	}  }  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,buttonOutput_Click,The following statement contains a magic number: if (folderBrowserDialog1.SelectedPath == null) {  	MessageBox.Show ("Please Select valid Folder");  	notifyIcon1.BalloonTipText = "You can only choose Excel File";  	notifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;  	notifyIcon1.BalloonTipTitle = "ExcelError";  	notifyIcon1.ShowBalloonTip (100);  }  else {  	textBoxOutput.Text = folderBrowserDialog1.SelectedPath;  }  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,buttonOutput_Click,The following statement contains a magic number: notifyIcon1.ShowBalloonTip (100);  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,LogForm_Load,The following statement contains a magic number: box.Size = new Size (1250' 300);  
Magic Number,SplitandMerge,Form1,C:\repos\AbbasNaqvi_Projects\SplitandMerge\SplitandMerge\Form1.cs,LogForm_Load,The following statement contains a magic number: box.Size = new Size (1250' 300);  
