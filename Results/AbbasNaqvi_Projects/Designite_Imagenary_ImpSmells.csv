Implementation smell,Namespace,Class,File,Method,Description
Long Method,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The method has 160 lines of code.
Long Method,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The method has 156 lines of code.
Long Method,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FilterByLandMark,The method has 102 lines of code.
Long Method,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The method has 164 lines of code.
Complex Method,Imagenary,CsvFileReader,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\CSVhandler.cs,ReadRow,Cyclomatic complexity of the method is 14
Complex Method,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,Cyclomatic complexity of the method is 25
Complex Method,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,AddToDB,Cyclomatic complexity of the method is 9
Complex Method,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,Insert,Cyclomatic complexity of the method is 8
Complex Method,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,Cyclomatic complexity of the method is 26
Complex Method,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,Cyclomatic complexity of the method is 11
Complex Method,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,Cyclomatic complexity of the method is 26
Long Statement,Imagenary,ApplicationData,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ApplicationData.cs,IsSettingsDone,The length of the statement  "	if (String.IsNullOrEmpty (this.ImageOutputDirectory) && String.IsNullOrEmpty (this.sphFileAdress) && String.IsNullOrEmpty (this.pafFileAdress) && xCoordinate == 0 && this.yCoordinate == 0) { " is 190.
Long Statement,Imagenary,Myurl,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\Myurl.cs,Change_Angle,The length of the statement  "		//   ResultString = Regex.Match(url' "http://maps.google.com/maps.q=.layer=c.cbll=.*?cbp=(?<data>.*)").Groups["data"].Value; " is 124.
Long Statement,Imagenary,Myurl,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\Myurl.cs,Change_Angle,The length of the statement  "		ResultString = Regex.Match (url' "maps.google.com/maps\\?(?<data1>.*?)layer.*?cbp=(?<data>.*?)&.*").Groups ["data"].Value; " is 122.
Long Statement,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,GetConnectionString,The length of the statement  "		connectionString = string.Format (@"Provider=Microsoft.Jet.OleDb.4.0; Data Source=" + Path.GetDirectoryName (fileName) + "" + @";Extended Properties=""Text;HDR=YES;FMT=Delimited"""); " is 182.
Long Statement,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,GetConnectionString,The length of the statement  "		connectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileName + @";Extended Properties=""Excel 12.0 XML;HDR=YES;IMEX=1"""; " is 140.
Long Statement,Imagenary,Property,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\Property.cs,SetAdressAutomatically,The length of the statement  "	string temp = (ORD + "' " + ORC + "' " + SBN + "' " + BNA + "' " + POB + "' " + NUM + "' " + DST + "' " + STM + "' " + DDL + "' " + DLO + "' " + PTN + "' " + PCD).Trim ().Replace ("' '"' "'"); " is 192.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The length of the statement  "		//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value); " is 138.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByGoogle,The length of the statement  "		string wsUrl = "https://maps.googleapis.com/maps/api/geocode/json?address=" + adress + "&key=AIzaSyB2OcZcJBCNN8cIuntM4FHLG-mkYdz377A"; " is 134.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByGoogle,The length of the statement  "			MatchCollection Gcollection = Regex.Matches (GoogleResponse' "\\\"location.*?\\n*?.*?lat.*?:(?<lat>.*?)'(\\n|.).*?lng.*?:(?<lng>.*?)\\n"); " is 138.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The length of the statement  "			string adress = p.Value.SimpleAdress.Replace (" "' "%20").Replace ("!"' "%21").Replace ("."' "%2E").Replace ("/"' "%2F").Replace ("("' "%28").Replace (")"' "%29").Replace ("+"' "%2B").Replace ("-"' "%2D").Replace ("."' "%2E").Replace ("="' "%3D").Replace ("_"' "%5F").Replace ("'"' "%2C"); " is 289.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The length of the statement  "             */if (DateTime.Compare (po.SearchedProperties.AddMonths (1)' DateTime.Now) >= 0 && po.SearchedProperties.Equals (new DateTime (0001' 1' 1)) == false) { " is 151.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The length of the statement  "			string b = "<a *?href=\"/property/(?<data>.*?)" + p.PCD.Replace (" "' "-").ToLower () + ".*?class=\"attrProperty\".*?>(?<data2>.*?)" + p.PCD.ToUpper () + "</a>"; " is 161.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The length of the statement  "					pobj.UrlAdress = @"C:\\Users\\jafar.baltidynamolog\\Documents\\Visual Studio 2010\\Projects\\Imagenary\\Imagenary\\bin\\" + m.Groups [2].Value.TrimEnd ().Replace ("\\\\"' "\\").Replace ("'"' "") + "\\"; " is 202.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FilterByLandMark,The length of the statement  "	if (DateTime.Compare (x.SearchedLandMark.AddMonths (1)' DateTime.Now) >= 0 || x.SearchedProperties.Equals (new DateTime (0001' 1' 1)) == false) { " is 145.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FilterByLandMark,The length of the statement  "		//          OnInformationDownload(new EventArguments() { Name = "Trace: "' Time = DateTime.Now' Details = "Creating LandMarkRequest\n" }); " is 138.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FilterByLandMark,The length of the statement  "		request1.UserAgent = " Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/33.0.1750.154 Safari/537.36"; " is 134.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FilterByLandMark,The length of the statement  "			//    MatchCollection collection = Regex.Matches(ResponseString' "<a href=\\\"reportSearchAddressSelectAddress.*?>(?<data>.*?)</a>"); " is 133.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FilterByLandMark,The length of the statement  "			//        //   OnInformationDownload(new EventArguments() { Name = "Trace: "' Time = DateTime.Now' Details = "LandMark does not Matched\n" + x.PID + "\n\n" }); " is 159.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,IsLocationThere,The length of the statement  "			//    string adressTemp=p.Adress.ToLower().Remove(p.Adress.Length-p.PCD.Length'p.PCD.Length).Replace("'"'"").Replace(" "'""); " is 125.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,IsLocationThere,The length of the statement  "			//   string adress = (p.ORD + p.ORC + p.SBN + p.BNA + p.POB + p.NUM + p.DST + p.STM + p.DDL + p.DLO + p.PTN + p.PCD).ToLower().Replace(" "' ""); " is 144.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The length of the statement  "			string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' ""); " is 143.
Long Statement,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The length of the statement  "		throw new Exception ("Index in Generating FileName for PAF file\nDescription :\t" + e.Message + "\nReason:\tWrong Input Postal Code"); " is 134.
Long Statement,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,InitializeWebBrowser,The length of the statement  "	browser.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 226.
Long Statement,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,button1_Click,The length of the statement  "	MessageBox.Show ("Once the Form is loaded' Take the cursor to the Navigation Cicle on the Top left of the image and Double Click Left From the Mouse'Remember 'You have to Double Click on either Left or Right Arrow"); " is 216.
Long Statement,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,buttonSave_Click_1,The length of the statement  "	if (XCoordinate == 0 || YCoordinate == 0 || HideX == 0 || HideY == 0 || String.IsNullOrEmpty (MainFileName) || String.IsNullOrEmpty (PAFFileName) || String.IsNullOrEmpty (SPHFileName)) { " is 186.
Long Statement,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,button5_Click,The length of the statement  "	MessageBox.Show ("Once the Form is loaded' Take the cursor to the Navigation Cicle on the Top left of the image and Double Click Left From the Mouse'Remember 'You have to Double Click on either Left or Right Arrow"); " is 216.
Long Statement,Imagenary,StartPage,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\StartPage.cs,StartPage_Load,The length of the statement  "	icon.Icon = new Icon ("C:\\Users\\jafar.baltidynamolog\\Documents\\Visual Studio 2010\\Projects\\Imagenary\\Imagenary\\Resources\\2.ico"); " is 138.
Long Statement,Imagenary,StartPage,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\StartPage.cs,PrintAllProperties,The length of the statement  "		SetRichboxText (++count + ": LMA= " + x.Value.IsLandMarkCertified + "  -SPH=" + x.Value.IsSphCertified + "  -  " + x.Value.PID + " - " + x.Value.Adress + "\n"); " is 160.
Complex Conditional,Imagenary,ApplicationData,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ApplicationData.cs,IsSettingsDone,The conditional expression  "String.IsNullOrEmpty (this.ImageOutputDirectory) && String.IsNullOrEmpty (this.sphFileAdress) && String.IsNullOrEmpty (this.pafFileAdress) && xCoordinate == 0 && this.yCoordinate == 0"  is complex.
Complex Conditional,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,buttonSave_Click_1,The conditional expression  "XCoordinate == 0 || YCoordinate == 0 || HideX == 0 || HideY == 0 || String.IsNullOrEmpty (MainFileName) || String.IsNullOrEmpty (PAFFileName) || String.IsNullOrEmpty (SPHFileName)"  is complex.
Empty Catch Block,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The method has an empty catch block.
Empty Catch Block,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The method has an empty catch block.
Empty Catch Block,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The method has an empty catch block.
Empty Catch Block,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,SaveImage,The method has an empty catch block.
Empty Catch Block,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_FormClosing,The method has an empty catch block.
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: Result = Spin (600);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (pageCounts >= 2) {  	if (ClickSVButton () == false) {  		if (ClickLabel () == true) {  			IsLabelClicked = true;  		}  		else {  			//Success = false;  			completed = true;  		}  	}  	else {  		IsSVbuttonFound = true;  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while ((IsSVbuttonFound == false && pageCounts < 12) || (IsSVbuttonFound == true && pageCounts < 15)) {  	Result = Spin (300);  	if (Result == 1) {  		IsFormalExit = true;  		r3.Enabled = false;  		this.Dispose ();  		return;  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while ((IsSVbuttonFound == false && pageCounts < 12) || (IsSVbuttonFound == true && pageCounts < 15)) {  	Result = Spin (300);  	if (Result == 1) {  		IsFormalExit = true;  		r3.Enabled = false;  		this.Dispose ();  		return;  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while ((IsSVbuttonFound == false && pageCounts < 12) || (IsSVbuttonFound == true && pageCounts < 15)) {  	Result = Spin (300);  	if (Result == 1) {  		IsFormalExit = true;  		r3.Enabled = false;  		this.Dispose ();  		return;  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: Result = Spin (300);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (pageCounts > 11) {  	if (IsSVbuttonFound == true) {  		//           richTextBox1.Text += "Checking all angles\n";  		urls.Url1 = urls.Change_Angle (FormUrl' "90"' ConsoleText);  		urls.Url2 = urls.Change_Angle (FormUrl' "180"' ConsoleText);  		urls.Url3 = urls.Change_Angle (FormUrl' "270"' ConsoleText);  		urls.Url4 = urls.Change_Angle (FormUrl' "360"' ConsoleText);  	}  	else {  		urls.Url1 = "STREETVIEW";  		urls.Url2 = "STREETVIEW";  		urls.Url3 = "STREETVIEW";  		urls.Url4 = "STREETVIEW";  	}  	if (WindowState != FormWindowState.Maximized) {  		this.WindowState = FormWindowState.Maximized;  	}  	string url = null;  	while (currentUrl <= 3) {  		currentUrl++;  		richTextBox1.Text += "Processing View " + currentUrl + "\n";  		try {  			url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  		}  		catch (Exception) {  			///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  			continue;  		}  		if (url.Equals ("STREETVIEW")) {  			if (currentUrl == 1) {  				ClickHide ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  			}  			try {  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  				ClickLeft ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				ClickLeft ();  			}  			catch (Exception) {  				//                 richTextBox1.Text += "ERROR WHILE Waiting";  			}  		}  		else {  			try {  				webBrowser2.Navigate (url);  				Result = Spin (500);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  			}  			catch (Exception) {  				//                   richTextBox1.Text += "Can not Navigate to this url";  			}  		}  		if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  			int attempts = 0;  			long size = 10;  			do {  				try {  					Result = Spin (300);  					if (Result == 1) {  						IsFormalExit = true;  						r3.Enabled = false;  						this.Close ();  						return;  					}  					//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  					size = SaveImage (attempts);  					//                       richTextBox1.Text += "Size is " + size + "\n";  					attempts++;  				}  				catch (Exception) {  					//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  				}  			}  			while (size < 600000 && attempts <= 8);  		}  	}  	completed = true;  	//GUIclock.Stop();  	IsFormalExit = true;  	this.Close ();  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (pageCounts > 11) {  	if (IsSVbuttonFound == true) {  		//           richTextBox1.Text += "Checking all angles\n";  		urls.Url1 = urls.Change_Angle (FormUrl' "90"' ConsoleText);  		urls.Url2 = urls.Change_Angle (FormUrl' "180"' ConsoleText);  		urls.Url3 = urls.Change_Angle (FormUrl' "270"' ConsoleText);  		urls.Url4 = urls.Change_Angle (FormUrl' "360"' ConsoleText);  	}  	else {  		urls.Url1 = "STREETVIEW";  		urls.Url2 = "STREETVIEW";  		urls.Url3 = "STREETVIEW";  		urls.Url4 = "STREETVIEW";  	}  	if (WindowState != FormWindowState.Maximized) {  		this.WindowState = FormWindowState.Maximized;  	}  	string url = null;  	while (currentUrl <= 3) {  		currentUrl++;  		richTextBox1.Text += "Processing View " + currentUrl + "\n";  		try {  			url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  		}  		catch (Exception) {  			///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  			continue;  		}  		if (url.Equals ("STREETVIEW")) {  			if (currentUrl == 1) {  				ClickHide ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  			}  			try {  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  				ClickLeft ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				ClickLeft ();  			}  			catch (Exception) {  				//                 richTextBox1.Text += "ERROR WHILE Waiting";  			}  		}  		else {  			try {  				webBrowser2.Navigate (url);  				Result = Spin (500);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  			}  			catch (Exception) {  				//                   richTextBox1.Text += "Can not Navigate to this url";  			}  		}  		if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  			int attempts = 0;  			long size = 10;  			do {  				try {  					Result = Spin (300);  					if (Result == 1) {  						IsFormalExit = true;  						r3.Enabled = false;  						this.Close ();  						return;  					}  					//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  					size = SaveImage (attempts);  					//                       richTextBox1.Text += "Size is " + size + "\n";  					attempts++;  				}  				catch (Exception) {  					//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  				}  			}  			while (size < 600000 && attempts <= 8);  		}  	}  	completed = true;  	//GUIclock.Stop();  	IsFormalExit = true;  	this.Close ();  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (pageCounts > 11) {  	if (IsSVbuttonFound == true) {  		//           richTextBox1.Text += "Checking all angles\n";  		urls.Url1 = urls.Change_Angle (FormUrl' "90"' ConsoleText);  		urls.Url2 = urls.Change_Angle (FormUrl' "180"' ConsoleText);  		urls.Url3 = urls.Change_Angle (FormUrl' "270"' ConsoleText);  		urls.Url4 = urls.Change_Angle (FormUrl' "360"' ConsoleText);  	}  	else {  		urls.Url1 = "STREETVIEW";  		urls.Url2 = "STREETVIEW";  		urls.Url3 = "STREETVIEW";  		urls.Url4 = "STREETVIEW";  	}  	if (WindowState != FormWindowState.Maximized) {  		this.WindowState = FormWindowState.Maximized;  	}  	string url = null;  	while (currentUrl <= 3) {  		currentUrl++;  		richTextBox1.Text += "Processing View " + currentUrl + "\n";  		try {  			url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  		}  		catch (Exception) {  			///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  			continue;  		}  		if (url.Equals ("STREETVIEW")) {  			if (currentUrl == 1) {  				ClickHide ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  			}  			try {  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  				ClickLeft ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				ClickLeft ();  			}  			catch (Exception) {  				//                 richTextBox1.Text += "ERROR WHILE Waiting";  			}  		}  		else {  			try {  				webBrowser2.Navigate (url);  				Result = Spin (500);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  			}  			catch (Exception) {  				//                   richTextBox1.Text += "Can not Navigate to this url";  			}  		}  		if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  			int attempts = 0;  			long size = 10;  			do {  				try {  					Result = Spin (300);  					if (Result == 1) {  						IsFormalExit = true;  						r3.Enabled = false;  						this.Close ();  						return;  					}  					//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  					size = SaveImage (attempts);  					//                       richTextBox1.Text += "Size is " + size + "\n";  					attempts++;  				}  				catch (Exception) {  					//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  				}  			}  			while (size < 600000 && attempts <= 8);  		}  	}  	completed = true;  	//GUIclock.Stop();  	IsFormalExit = true;  	this.Close ();  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (pageCounts > 11) {  	if (IsSVbuttonFound == true) {  		//           richTextBox1.Text += "Checking all angles\n";  		urls.Url1 = urls.Change_Angle (FormUrl' "90"' ConsoleText);  		urls.Url2 = urls.Change_Angle (FormUrl' "180"' ConsoleText);  		urls.Url3 = urls.Change_Angle (FormUrl' "270"' ConsoleText);  		urls.Url4 = urls.Change_Angle (FormUrl' "360"' ConsoleText);  	}  	else {  		urls.Url1 = "STREETVIEW";  		urls.Url2 = "STREETVIEW";  		urls.Url3 = "STREETVIEW";  		urls.Url4 = "STREETVIEW";  	}  	if (WindowState != FormWindowState.Maximized) {  		this.WindowState = FormWindowState.Maximized;  	}  	string url = null;  	while (currentUrl <= 3) {  		currentUrl++;  		richTextBox1.Text += "Processing View " + currentUrl + "\n";  		try {  			url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  		}  		catch (Exception) {  			///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  			continue;  		}  		if (url.Equals ("STREETVIEW")) {  			if (currentUrl == 1) {  				ClickHide ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  			}  			try {  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  				ClickLeft ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				ClickLeft ();  			}  			catch (Exception) {  				//                 richTextBox1.Text += "ERROR WHILE Waiting";  			}  		}  		else {  			try {  				webBrowser2.Navigate (url);  				Result = Spin (500);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  			}  			catch (Exception) {  				//                   richTextBox1.Text += "Can not Navigate to this url";  			}  		}  		if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  			int attempts = 0;  			long size = 10;  			do {  				try {  					Result = Spin (300);  					if (Result == 1) {  						IsFormalExit = true;  						r3.Enabled = false;  						this.Close ();  						return;  					}  					//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  					size = SaveImage (attempts);  					//                       richTextBox1.Text += "Size is " + size + "\n";  					attempts++;  				}  				catch (Exception) {  					//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  				}  			}  			while (size < 600000 && attempts <= 8);  		}  	}  	completed = true;  	//GUIclock.Stop();  	IsFormalExit = true;  	this.Close ();  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (pageCounts > 11) {  	if (IsSVbuttonFound == true) {  		//           richTextBox1.Text += "Checking all angles\n";  		urls.Url1 = urls.Change_Angle (FormUrl' "90"' ConsoleText);  		urls.Url2 = urls.Change_Angle (FormUrl' "180"' ConsoleText);  		urls.Url3 = urls.Change_Angle (FormUrl' "270"' ConsoleText);  		urls.Url4 = urls.Change_Angle (FormUrl' "360"' ConsoleText);  	}  	else {  		urls.Url1 = "STREETVIEW";  		urls.Url2 = "STREETVIEW";  		urls.Url3 = "STREETVIEW";  		urls.Url4 = "STREETVIEW";  	}  	if (WindowState != FormWindowState.Maximized) {  		this.WindowState = FormWindowState.Maximized;  	}  	string url = null;  	while (currentUrl <= 3) {  		currentUrl++;  		richTextBox1.Text += "Processing View " + currentUrl + "\n";  		try {  			url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  		}  		catch (Exception) {  			///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  			continue;  		}  		if (url.Equals ("STREETVIEW")) {  			if (currentUrl == 1) {  				ClickHide ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  			}  			try {  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  				ClickLeft ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				ClickLeft ();  			}  			catch (Exception) {  				//                 richTextBox1.Text += "ERROR WHILE Waiting";  			}  		}  		else {  			try {  				webBrowser2.Navigate (url);  				Result = Spin (500);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  			}  			catch (Exception) {  				//                   richTextBox1.Text += "Can not Navigate to this url";  			}  		}  		if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  			int attempts = 0;  			long size = 10;  			do {  				try {  					Result = Spin (300);  					if (Result == 1) {  						IsFormalExit = true;  						r3.Enabled = false;  						this.Close ();  						return;  					}  					//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  					size = SaveImage (attempts);  					//                       richTextBox1.Text += "Size is " + size + "\n";  					attempts++;  				}  				catch (Exception) {  					//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  				}  			}  			while (size < 600000 && attempts <= 8);  		}  	}  	completed = true;  	//GUIclock.Stop();  	IsFormalExit = true;  	this.Close ();  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (pageCounts > 11) {  	if (IsSVbuttonFound == true) {  		//           richTextBox1.Text += "Checking all angles\n";  		urls.Url1 = urls.Change_Angle (FormUrl' "90"' ConsoleText);  		urls.Url2 = urls.Change_Angle (FormUrl' "180"' ConsoleText);  		urls.Url3 = urls.Change_Angle (FormUrl' "270"' ConsoleText);  		urls.Url4 = urls.Change_Angle (FormUrl' "360"' ConsoleText);  	}  	else {  		urls.Url1 = "STREETVIEW";  		urls.Url2 = "STREETVIEW";  		urls.Url3 = "STREETVIEW";  		urls.Url4 = "STREETVIEW";  	}  	if (WindowState != FormWindowState.Maximized) {  		this.WindowState = FormWindowState.Maximized;  	}  	string url = null;  	while (currentUrl <= 3) {  		currentUrl++;  		richTextBox1.Text += "Processing View " + currentUrl + "\n";  		try {  			url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  		}  		catch (Exception) {  			///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  			continue;  		}  		if (url.Equals ("STREETVIEW")) {  			if (currentUrl == 1) {  				ClickHide ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  			}  			try {  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  				ClickLeft ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				ClickLeft ();  			}  			catch (Exception) {  				//                 richTextBox1.Text += "ERROR WHILE Waiting";  			}  		}  		else {  			try {  				webBrowser2.Navigate (url);  				Result = Spin (500);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  			}  			catch (Exception) {  				//                   richTextBox1.Text += "Can not Navigate to this url";  			}  		}  		if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  			int attempts = 0;  			long size = 10;  			do {  				try {  					Result = Spin (300);  					if (Result == 1) {  						IsFormalExit = true;  						r3.Enabled = false;  						this.Close ();  						return;  					}  					//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  					size = SaveImage (attempts);  					//                       richTextBox1.Text += "Size is " + size + "\n";  					attempts++;  				}  				catch (Exception) {  					//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  				}  			}  			while (size < 600000 && attempts <= 8);  		}  	}  	completed = true;  	//GUIclock.Stop();  	IsFormalExit = true;  	this.Close ();  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (pageCounts > 11) {  	if (IsSVbuttonFound == true) {  		//           richTextBox1.Text += "Checking all angles\n";  		urls.Url1 = urls.Change_Angle (FormUrl' "90"' ConsoleText);  		urls.Url2 = urls.Change_Angle (FormUrl' "180"' ConsoleText);  		urls.Url3 = urls.Change_Angle (FormUrl' "270"' ConsoleText);  		urls.Url4 = urls.Change_Angle (FormUrl' "360"' ConsoleText);  	}  	else {  		urls.Url1 = "STREETVIEW";  		urls.Url2 = "STREETVIEW";  		urls.Url3 = "STREETVIEW";  		urls.Url4 = "STREETVIEW";  	}  	if (WindowState != FormWindowState.Maximized) {  		this.WindowState = FormWindowState.Maximized;  	}  	string url = null;  	while (currentUrl <= 3) {  		currentUrl++;  		richTextBox1.Text += "Processing View " + currentUrl + "\n";  		try {  			url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  		}  		catch (Exception) {  			///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  			continue;  		}  		if (url.Equals ("STREETVIEW")) {  			if (currentUrl == 1) {  				ClickHide ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  			}  			try {  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  				ClickLeft ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				ClickLeft ();  			}  			catch (Exception) {  				//                 richTextBox1.Text += "ERROR WHILE Waiting";  			}  		}  		else {  			try {  				webBrowser2.Navigate (url);  				Result = Spin (500);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  			}  			catch (Exception) {  				//                   richTextBox1.Text += "Can not Navigate to this url";  			}  		}  		if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  			int attempts = 0;  			long size = 10;  			do {  				try {  					Result = Spin (300);  					if (Result == 1) {  						IsFormalExit = true;  						r3.Enabled = false;  						this.Close ();  						return;  					}  					//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  					size = SaveImage (attempts);  					//                       richTextBox1.Text += "Size is " + size + "\n";  					attempts++;  				}  				catch (Exception) {  					//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  				}  			}  			while (size < 600000 && attempts <= 8);  		}  	}  	completed = true;  	//GUIclock.Stop();  	IsFormalExit = true;  	this.Close ();  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (pageCounts > 11) {  	if (IsSVbuttonFound == true) {  		//           richTextBox1.Text += "Checking all angles\n";  		urls.Url1 = urls.Change_Angle (FormUrl' "90"' ConsoleText);  		urls.Url2 = urls.Change_Angle (FormUrl' "180"' ConsoleText);  		urls.Url3 = urls.Change_Angle (FormUrl' "270"' ConsoleText);  		urls.Url4 = urls.Change_Angle (FormUrl' "360"' ConsoleText);  	}  	else {  		urls.Url1 = "STREETVIEW";  		urls.Url2 = "STREETVIEW";  		urls.Url3 = "STREETVIEW";  		urls.Url4 = "STREETVIEW";  	}  	if (WindowState != FormWindowState.Maximized) {  		this.WindowState = FormWindowState.Maximized;  	}  	string url = null;  	while (currentUrl <= 3) {  		currentUrl++;  		richTextBox1.Text += "Processing View " + currentUrl + "\n";  		try {  			url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  		}  		catch (Exception) {  			///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  			continue;  		}  		if (url.Equals ("STREETVIEW")) {  			if (currentUrl == 1) {  				ClickHide ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  			}  			try {  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  				ClickLeft ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				ClickLeft ();  			}  			catch (Exception) {  				//                 richTextBox1.Text += "ERROR WHILE Waiting";  			}  		}  		else {  			try {  				webBrowser2.Navigate (url);  				Result = Spin (500);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  			}  			catch (Exception) {  				//                   richTextBox1.Text += "Can not Navigate to this url";  			}  		}  		if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  			int attempts = 0;  			long size = 10;  			do {  				try {  					Result = Spin (300);  					if (Result == 1) {  						IsFormalExit = true;  						r3.Enabled = false;  						this.Close ();  						return;  					}  					//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  					size = SaveImage (attempts);  					//                       richTextBox1.Text += "Size is " + size + "\n";  					attempts++;  				}  				catch (Exception) {  					//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  				}  			}  			while (size < 600000 && attempts <= 8);  		}  	}  	completed = true;  	//GUIclock.Stop();  	IsFormalExit = true;  	this.Close ();  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (pageCounts > 11) {  	if (IsSVbuttonFound == true) {  		//           richTextBox1.Text += "Checking all angles\n";  		urls.Url1 = urls.Change_Angle (FormUrl' "90"' ConsoleText);  		urls.Url2 = urls.Change_Angle (FormUrl' "180"' ConsoleText);  		urls.Url3 = urls.Change_Angle (FormUrl' "270"' ConsoleText);  		urls.Url4 = urls.Change_Angle (FormUrl' "360"' ConsoleText);  	}  	else {  		urls.Url1 = "STREETVIEW";  		urls.Url2 = "STREETVIEW";  		urls.Url3 = "STREETVIEW";  		urls.Url4 = "STREETVIEW";  	}  	if (WindowState != FormWindowState.Maximized) {  		this.WindowState = FormWindowState.Maximized;  	}  	string url = null;  	while (currentUrl <= 3) {  		currentUrl++;  		richTextBox1.Text += "Processing View " + currentUrl + "\n";  		try {  			url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  		}  		catch (Exception) {  			///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  			continue;  		}  		if (url.Equals ("STREETVIEW")) {  			if (currentUrl == 1) {  				ClickHide ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  			}  			try {  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  				ClickLeft ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				ClickLeft ();  			}  			catch (Exception) {  				//                 richTextBox1.Text += "ERROR WHILE Waiting";  			}  		}  		else {  			try {  				webBrowser2.Navigate (url);  				Result = Spin (500);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  			}  			catch (Exception) {  				//                   richTextBox1.Text += "Can not Navigate to this url";  			}  		}  		if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  			int attempts = 0;  			long size = 10;  			do {  				try {  					Result = Spin (300);  					if (Result == 1) {  						IsFormalExit = true;  						r3.Enabled = false;  						this.Close ();  						return;  					}  					//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  					size = SaveImage (attempts);  					//                       richTextBox1.Text += "Size is " + size + "\n";  					attempts++;  				}  				catch (Exception) {  					//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  				}  			}  			while (size < 600000 && attempts <= 8);  		}  	}  	completed = true;  	//GUIclock.Stop();  	IsFormalExit = true;  	this.Close ();  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (pageCounts > 11) {  	if (IsSVbuttonFound == true) {  		//           richTextBox1.Text += "Checking all angles\n";  		urls.Url1 = urls.Change_Angle (FormUrl' "90"' ConsoleText);  		urls.Url2 = urls.Change_Angle (FormUrl' "180"' ConsoleText);  		urls.Url3 = urls.Change_Angle (FormUrl' "270"' ConsoleText);  		urls.Url4 = urls.Change_Angle (FormUrl' "360"' ConsoleText);  	}  	else {  		urls.Url1 = "STREETVIEW";  		urls.Url2 = "STREETVIEW";  		urls.Url3 = "STREETVIEW";  		urls.Url4 = "STREETVIEW";  	}  	if (WindowState != FormWindowState.Maximized) {  		this.WindowState = FormWindowState.Maximized;  	}  	string url = null;  	while (currentUrl <= 3) {  		currentUrl++;  		richTextBox1.Text += "Processing View " + currentUrl + "\n";  		try {  			url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  		}  		catch (Exception) {  			///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  			continue;  		}  		if (url.Equals ("STREETVIEW")) {  			if (currentUrl == 1) {  				ClickHide ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  			}  			try {  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Dispose ();  					return;  				}  				ClickLeft ();  				Result = Spin (200);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				ClickLeft ();  			}  			catch (Exception) {  				//                 richTextBox1.Text += "ERROR WHILE Waiting";  			}  		}  		else {  			try {  				webBrowser2.Navigate (url);  				Result = Spin (500);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  			}  			catch (Exception) {  				//                   richTextBox1.Text += "Can not Navigate to this url";  			}  		}  		if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  			int attempts = 0;  			long size = 10;  			do {  				try {  					Result = Spin (300);  					if (Result == 1) {  						IsFormalExit = true;  						r3.Enabled = false;  						this.Close ();  						return;  					}  					//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  					size = SaveImage (attempts);  					//                       richTextBox1.Text += "Size is " + size + "\n";  					attempts++;  				}  				catch (Exception) {  					//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  				}  			}  			while (size < 600000 && attempts <= 8);  		}  	}  	completed = true;  	//GUIclock.Stop();  	IsFormalExit = true;  	this.Close ();  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while (currentUrl <= 3) {  	currentUrl++;  	richTextBox1.Text += "Processing View " + currentUrl + "\n";  	try {  		url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  	}  	catch (Exception) {  		///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  		continue;  	}  	if (url.Equals ("STREETVIEW")) {  		if (currentUrl == 1) {  			ClickHide ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  		}  		try {  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  			ClickLeft ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			ClickLeft ();  		}  		catch (Exception) {  			//                 richTextBox1.Text += "ERROR WHILE Waiting";  		}  	}  	else {  		try {  			webBrowser2.Navigate (url);  			Result = Spin (500);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  		}  		catch (Exception) {  			//                   richTextBox1.Text += "Can not Navigate to this url";  		}  	}  	if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  		int attempts = 0;  		long size = 10;  		do {  			try {  				Result = Spin (300);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  				size = SaveImage (attempts);  				//                       richTextBox1.Text += "Size is " + size + "\n";  				attempts++;  			}  			catch (Exception) {  				//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  			}  		}  		while (size < 600000 && attempts <= 8);  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while (currentUrl <= 3) {  	currentUrl++;  	richTextBox1.Text += "Processing View " + currentUrl + "\n";  	try {  		url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  	}  	catch (Exception) {  		///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  		continue;  	}  	if (url.Equals ("STREETVIEW")) {  		if (currentUrl == 1) {  			ClickHide ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  		}  		try {  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  			ClickLeft ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			ClickLeft ();  		}  		catch (Exception) {  			//                 richTextBox1.Text += "ERROR WHILE Waiting";  		}  	}  	else {  		try {  			webBrowser2.Navigate (url);  			Result = Spin (500);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  		}  		catch (Exception) {  			//                   richTextBox1.Text += "Can not Navigate to this url";  		}  	}  	if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  		int attempts = 0;  		long size = 10;  		do {  			try {  				Result = Spin (300);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  				size = SaveImage (attempts);  				//                       richTextBox1.Text += "Size is " + size + "\n";  				attempts++;  			}  			catch (Exception) {  				//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  			}  		}  		while (size < 600000 && attempts <= 8);  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while (currentUrl <= 3) {  	currentUrl++;  	richTextBox1.Text += "Processing View " + currentUrl + "\n";  	try {  		url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  	}  	catch (Exception) {  		///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  		continue;  	}  	if (url.Equals ("STREETVIEW")) {  		if (currentUrl == 1) {  			ClickHide ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  		}  		try {  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  			ClickLeft ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			ClickLeft ();  		}  		catch (Exception) {  			//                 richTextBox1.Text += "ERROR WHILE Waiting";  		}  	}  	else {  		try {  			webBrowser2.Navigate (url);  			Result = Spin (500);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  		}  		catch (Exception) {  			//                   richTextBox1.Text += "Can not Navigate to this url";  		}  	}  	if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  		int attempts = 0;  		long size = 10;  		do {  			try {  				Result = Spin (300);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  				size = SaveImage (attempts);  				//                       richTextBox1.Text += "Size is " + size + "\n";  				attempts++;  			}  			catch (Exception) {  				//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  			}  		}  		while (size < 600000 && attempts <= 8);  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while (currentUrl <= 3) {  	currentUrl++;  	richTextBox1.Text += "Processing View " + currentUrl + "\n";  	try {  		url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  	}  	catch (Exception) {  		///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  		continue;  	}  	if (url.Equals ("STREETVIEW")) {  		if (currentUrl == 1) {  			ClickHide ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  		}  		try {  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  			ClickLeft ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			ClickLeft ();  		}  		catch (Exception) {  			//                 richTextBox1.Text += "ERROR WHILE Waiting";  		}  	}  	else {  		try {  			webBrowser2.Navigate (url);  			Result = Spin (500);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  		}  		catch (Exception) {  			//                   richTextBox1.Text += "Can not Navigate to this url";  		}  	}  	if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  		int attempts = 0;  		long size = 10;  		do {  			try {  				Result = Spin (300);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  				size = SaveImage (attempts);  				//                       richTextBox1.Text += "Size is " + size + "\n";  				attempts++;  			}  			catch (Exception) {  				//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  			}  		}  		while (size < 600000 && attempts <= 8);  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while (currentUrl <= 3) {  	currentUrl++;  	richTextBox1.Text += "Processing View " + currentUrl + "\n";  	try {  		url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  	}  	catch (Exception) {  		///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  		continue;  	}  	if (url.Equals ("STREETVIEW")) {  		if (currentUrl == 1) {  			ClickHide ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  		}  		try {  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  			ClickLeft ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			ClickLeft ();  		}  		catch (Exception) {  			//                 richTextBox1.Text += "ERROR WHILE Waiting";  		}  	}  	else {  		try {  			webBrowser2.Navigate (url);  			Result = Spin (500);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  		}  		catch (Exception) {  			//                   richTextBox1.Text += "Can not Navigate to this url";  		}  	}  	if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  		int attempts = 0;  		long size = 10;  		do {  			try {  				Result = Spin (300);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  				size = SaveImage (attempts);  				//                       richTextBox1.Text += "Size is " + size + "\n";  				attempts++;  			}  			catch (Exception) {  				//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  			}  		}  		while (size < 600000 && attempts <= 8);  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while (currentUrl <= 3) {  	currentUrl++;  	richTextBox1.Text += "Processing View " + currentUrl + "\n";  	try {  		url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  	}  	catch (Exception) {  		///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  		continue;  	}  	if (url.Equals ("STREETVIEW")) {  		if (currentUrl == 1) {  			ClickHide ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  		}  		try {  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  			ClickLeft ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			ClickLeft ();  		}  		catch (Exception) {  			//                 richTextBox1.Text += "ERROR WHILE Waiting";  		}  	}  	else {  		try {  			webBrowser2.Navigate (url);  			Result = Spin (500);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  		}  		catch (Exception) {  			//                   richTextBox1.Text += "Can not Navigate to this url";  		}  	}  	if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  		int attempts = 0;  		long size = 10;  		do {  			try {  				Result = Spin (300);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  				size = SaveImage (attempts);  				//                       richTextBox1.Text += "Size is " + size + "\n";  				attempts++;  			}  			catch (Exception) {  				//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  			}  		}  		while (size < 600000 && attempts <= 8);  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while (currentUrl <= 3) {  	currentUrl++;  	richTextBox1.Text += "Processing View " + currentUrl + "\n";  	try {  		url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  	}  	catch (Exception) {  		///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  		continue;  	}  	if (url.Equals ("STREETVIEW")) {  		if (currentUrl == 1) {  			ClickHide ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  		}  		try {  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  			ClickLeft ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			ClickLeft ();  		}  		catch (Exception) {  			//                 richTextBox1.Text += "ERROR WHILE Waiting";  		}  	}  	else {  		try {  			webBrowser2.Navigate (url);  			Result = Spin (500);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  		}  		catch (Exception) {  			//                   richTextBox1.Text += "Can not Navigate to this url";  		}  	}  	if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  		int attempts = 0;  		long size = 10;  		do {  			try {  				Result = Spin (300);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  				size = SaveImage (attempts);  				//                       richTextBox1.Text += "Size is " + size + "\n";  				attempts++;  			}  			catch (Exception) {  				//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  			}  		}  		while (size < 600000 && attempts <= 8);  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while (currentUrl <= 3) {  	currentUrl++;  	richTextBox1.Text += "Processing View " + currentUrl + "\n";  	try {  		url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  	}  	catch (Exception) {  		///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  		continue;  	}  	if (url.Equals ("STREETVIEW")) {  		if (currentUrl == 1) {  			ClickHide ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  		}  		try {  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  			ClickLeft ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			ClickLeft ();  		}  		catch (Exception) {  			//                 richTextBox1.Text += "ERROR WHILE Waiting";  		}  	}  	else {  		try {  			webBrowser2.Navigate (url);  			Result = Spin (500);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  		}  		catch (Exception) {  			//                   richTextBox1.Text += "Can not Navigate to this url";  		}  	}  	if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  		int attempts = 0;  		long size = 10;  		do {  			try {  				Result = Spin (300);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  				size = SaveImage (attempts);  				//                       richTextBox1.Text += "Size is " + size + "\n";  				attempts++;  			}  			catch (Exception) {  				//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  			}  		}  		while (size < 600000 && attempts <= 8);  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: while (currentUrl <= 3) {  	currentUrl++;  	richTextBox1.Text += "Processing View " + currentUrl + "\n";  	try {  		url = urls.GetType ().GetProperty ("Url" + currentUrl).GetValue (urls' null).ToString ();  	}  	catch (Exception) {  		///               richTextBox1.Text += "Stuck While Getting URL---" + currentUrl + "\n";  		continue;  	}  	if (url.Equals ("STREETVIEW")) {  		if (currentUrl == 1) {  			ClickHide ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  		}  		try {  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Dispose ();  				return;  			}  			ClickLeft ();  			Result = Spin (200);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			ClickLeft ();  		}  		catch (Exception) {  			//                 richTextBox1.Text += "ERROR WHILE Waiting";  		}  	}  	else {  		try {  			webBrowser2.Navigate (url);  			Result = Spin (500);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  		}  		catch (Exception) {  			//                   richTextBox1.Text += "Can not Navigate to this url";  		}  	}  	if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  		int attempts = 0;  		long size = 10;  		do {  			try {  				Result = Spin (300);  				if (Result == 1) {  					IsFormalExit = true;  					r3.Enabled = false;  					this.Close ();  					return;  				}  				//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  				size = SaveImage (attempts);  				//                       richTextBox1.Text += "Size is " + size + "\n";  				attempts++;  			}  			catch (Exception) {  				//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  			}  		}  		while (size < 600000 && attempts <= 8);  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (url.Equals ("STREETVIEW")) {  	if (currentUrl == 1) {  		ClickHide ();  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Dispose ();  			return;  		}  	}  	try {  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Dispose ();  			return;  		}  		ClickLeft ();  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Close ();  			return;  		}  		ClickLeft ();  	}  	catch (Exception) {  		//                 richTextBox1.Text += "ERROR WHILE Waiting";  	}  }  else {  	try {  		webBrowser2.Navigate (url);  		Result = Spin (500);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Close ();  			return;  		}  	}  	catch (Exception) {  		//                   richTextBox1.Text += "Can not Navigate to this url";  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (url.Equals ("STREETVIEW")) {  	if (currentUrl == 1) {  		ClickHide ();  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Dispose ();  			return;  		}  	}  	try {  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Dispose ();  			return;  		}  		ClickLeft ();  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Close ();  			return;  		}  		ClickLeft ();  	}  	catch (Exception) {  		//                 richTextBox1.Text += "ERROR WHILE Waiting";  	}  }  else {  	try {  		webBrowser2.Navigate (url);  		Result = Spin (500);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Close ();  			return;  		}  	}  	catch (Exception) {  		//                   richTextBox1.Text += "Can not Navigate to this url";  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (url.Equals ("STREETVIEW")) {  	if (currentUrl == 1) {  		ClickHide ();  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Dispose ();  			return;  		}  	}  	try {  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Dispose ();  			return;  		}  		ClickLeft ();  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Close ();  			return;  		}  		ClickLeft ();  	}  	catch (Exception) {  		//                 richTextBox1.Text += "ERROR WHILE Waiting";  	}  }  else {  	try {  		webBrowser2.Navigate (url);  		Result = Spin (500);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Close ();  			return;  		}  	}  	catch (Exception) {  		//                   richTextBox1.Text += "Can not Navigate to this url";  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (url.Equals ("STREETVIEW")) {  	if (currentUrl == 1) {  		ClickHide ();  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Dispose ();  			return;  		}  	}  	try {  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Dispose ();  			return;  		}  		ClickLeft ();  		Result = Spin (200);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Close ();  			return;  		}  		ClickLeft ();  	}  	catch (Exception) {  		//                 richTextBox1.Text += "ERROR WHILE Waiting";  	}  }  else {  	try {  		webBrowser2.Navigate (url);  		Result = Spin (500);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Close ();  			return;  		}  	}  	catch (Exception) {  		//                   richTextBox1.Text += "Can not Navigate to this url";  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (currentUrl == 1) {  	ClickHide ();  	Result = Spin (200);  	if (Result == 1) {  		IsFormalExit = true;  		r3.Enabled = false;  		this.Dispose ();  		return;  	}  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: Result = Spin (200);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: try {  	Result = Spin (200);  	if (Result == 1) {  		IsFormalExit = true;  		r3.Enabled = false;  		this.Dispose ();  		return;  	}  	ClickLeft ();  	Result = Spin (200);  	if (Result == 1) {  		IsFormalExit = true;  		r3.Enabled = false;  		this.Close ();  		return;  	}  	ClickLeft ();  }  catch (Exception) {  	//                 richTextBox1.Text += "ERROR WHILE Waiting";  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: try {  	Result = Spin (200);  	if (Result == 1) {  		IsFormalExit = true;  		r3.Enabled = false;  		this.Dispose ();  		return;  	}  	ClickLeft ();  	Result = Spin (200);  	if (Result == 1) {  		IsFormalExit = true;  		r3.Enabled = false;  		this.Close ();  		return;  	}  	ClickLeft ();  }  catch (Exception) {  	//                 richTextBox1.Text += "ERROR WHILE Waiting";  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: Result = Spin (200);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: Result = Spin (200);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: try {  	webBrowser2.Navigate (url);  	Result = Spin (500);  	if (Result == 1) {  		IsFormalExit = true;  		r3.Enabled = false;  		this.Close ();  		return;  	}  }  catch (Exception) {  	//                   richTextBox1.Text += "Can not Navigate to this url";  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: Result = Spin (500);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  	int attempts = 0;  	long size = 10;  	do {  		try {  			Result = Spin (300);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  			size = SaveImage (attempts);  			//                       richTextBox1.Text += "Size is " + size + "\n";  			attempts++;  		}  		catch (Exception) {  			//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  		}  	}  	while (size < 600000 && attempts <= 8);  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  	int attempts = 0;  	long size = 10;  	do {  		try {  			Result = Spin (300);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  			size = SaveImage (attempts);  			//                       richTextBox1.Text += "Size is " + size + "\n";  			attempts++;  		}  		catch (Exception) {  			//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  		}  	}  	while (size < 600000 && attempts <= 8);  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  	int attempts = 0;  	long size = 10;  	do {  		try {  			Result = Spin (300);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  			size = SaveImage (attempts);  			//                       richTextBox1.Text += "Size is " + size + "\n";  			attempts++;  		}  		catch (Exception) {  			//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  		}  	}  	while (size < 600000 && attempts <= 8);  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: if (webBrowser2.ReadyState == WebBrowserReadyState.Complete) {  	int attempts = 0;  	long size = 10;  	do {  		try {  			Result = Spin (300);  			if (Result == 1) {  				IsFormalExit = true;  				r3.Enabled = false;  				this.Close ();  				return;  			}  			//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  			size = SaveImage (attempts);  			//                       richTextBox1.Text += "Size is " + size + "\n";  			attempts++;  		}  		catch (Exception) {  			//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  		}  	}  	while (size < 600000 && attempts <= 8);  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: do {  	try {  		Result = Spin (300);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Close ();  			return;  		}  		//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  		size = SaveImage (attempts);  		//                       richTextBox1.Text += "Size is " + size + "\n";  		attempts++;  	}  	catch (Exception) {  		//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  	}  }  while (size < 600000 && attempts <= 8);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: do {  	try {  		Result = Spin (300);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Close ();  			return;  		}  		//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  		size = SaveImage (attempts);  		//                       richTextBox1.Text += "Size is " + size + "\n";  		attempts++;  	}  	catch (Exception) {  		//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  	}  }  while (size < 600000 && attempts <= 8);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: do {  	try {  		Result = Spin (300);  		if (Result == 1) {  			IsFormalExit = true;  			r3.Enabled = false;  			this.Close ();  			return;  		}  		//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  		size = SaveImage (attempts);  		//                       richTextBox1.Text += "Size is " + size + "\n";  		attempts++;  	}  	catch (Exception) {  		//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  	}  }  while (size < 600000 && attempts <= 8);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: try {  	Result = Spin (300);  	if (Result == 1) {  		IsFormalExit = true;  		r3.Enabled = false;  		this.Close ();  		return;  	}  	//                        richTextBox1.Text += "Capture This Image :) " + url + "\n";  	size = SaveImage (attempts);  	//                       richTextBox1.Text += "Size is " + size + "\n";  	attempts++;  }  catch (Exception) {  	//                        richTextBox1.Text += "ERROR WHILE SAVING IMAGE\n";  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,GSVTool_Load,The following statement contains a magic number: Result = Spin (300);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,Spin,The following statement contains a magic number: while (Second_tx_count < 10) {  	Application.DoEvents ();  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,SaveImage,The following statement contains a magic number: try {  	Rectangle bounds = this.Bounds;  	Bitmap bitmap = new Bitmap (bounds.Width - 70' bounds.Height - 125);  	using (Graphics g = Graphics.FromImage (bitmap)) {  		g.CopyFromScreen (new Point (bounds.Left + 100' bounds.Top + 90)' Point.Empty' bounds.Size);  		newbitmap = new Bitmap (bitmap);  	}  	//       richTextBox1.Text += "Saving Image" + "... total attempts: " + attemps + "\n";  	string directory = null;  	try {  		directory = DirectoryName;  		Directory.CreateDirectory (directory);  		bitmap.Save (directory + currentUrl + ".png"' ImageFormat.Png);  	}  	catch (Exception) {  		MessageBox.Show ("cAN NOT SAVE IMAGE");  	}  	FileInfo info = new FileInfo (directory + "/" + currentUrl + ".png");  	size = info.Length;  	return size;  }  catch (IOException) {  	//         richTextBox1.Text += "IO Exception Unhandled";  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,SaveImage,The following statement contains a magic number: try {  	Rectangle bounds = this.Bounds;  	Bitmap bitmap = new Bitmap (bounds.Width - 70' bounds.Height - 125);  	using (Graphics g = Graphics.FromImage (bitmap)) {  		g.CopyFromScreen (new Point (bounds.Left + 100' bounds.Top + 90)' Point.Empty' bounds.Size);  		newbitmap = new Bitmap (bitmap);  	}  	//       richTextBox1.Text += "Saving Image" + "... total attempts: " + attemps + "\n";  	string directory = null;  	try {  		directory = DirectoryName;  		Directory.CreateDirectory (directory);  		bitmap.Save (directory + currentUrl + ".png"' ImageFormat.Png);  	}  	catch (Exception) {  		MessageBox.Show ("cAN NOT SAVE IMAGE");  	}  	FileInfo info = new FileInfo (directory + "/" + currentUrl + ".png");  	size = info.Length;  	return size;  }  catch (IOException) {  	//         richTextBox1.Text += "IO Exception Unhandled";  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,SaveImage,The following statement contains a magic number: try {  	Rectangle bounds = this.Bounds;  	Bitmap bitmap = new Bitmap (bounds.Width - 70' bounds.Height - 125);  	using (Graphics g = Graphics.FromImage (bitmap)) {  		g.CopyFromScreen (new Point (bounds.Left + 100' bounds.Top + 90)' Point.Empty' bounds.Size);  		newbitmap = new Bitmap (bitmap);  	}  	//       richTextBox1.Text += "Saving Image" + "... total attempts: " + attemps + "\n";  	string directory = null;  	try {  		directory = DirectoryName;  		Directory.CreateDirectory (directory);  		bitmap.Save (directory + currentUrl + ".png"' ImageFormat.Png);  	}  	catch (Exception) {  		MessageBox.Show ("cAN NOT SAVE IMAGE");  	}  	FileInfo info = new FileInfo (directory + "/" + currentUrl + ".png");  	size = info.Length;  	return size;  }  catch (IOException) {  	//         richTextBox1.Text += "IO Exception Unhandled";  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,SaveImage,The following statement contains a magic number: try {  	Rectangle bounds = this.Bounds;  	Bitmap bitmap = new Bitmap (bounds.Width - 70' bounds.Height - 125);  	using (Graphics g = Graphics.FromImage (bitmap)) {  		g.CopyFromScreen (new Point (bounds.Left + 100' bounds.Top + 90)' Point.Empty' bounds.Size);  		newbitmap = new Bitmap (bitmap);  	}  	//       richTextBox1.Text += "Saving Image" + "... total attempts: " + attemps + "\n";  	string directory = null;  	try {  		directory = DirectoryName;  		Directory.CreateDirectory (directory);  		bitmap.Save (directory + currentUrl + ".png"' ImageFormat.Png);  	}  	catch (Exception) {  		MessageBox.Show ("cAN NOT SAVE IMAGE");  	}  	FileInfo info = new FileInfo (directory + "/" + currentUrl + ".png");  	size = info.Length;  	return size;  }  catch (IOException) {  	//         richTextBox1.Text += "IO Exception Unhandled";  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,SaveImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (bitmap)) {  	g.CopyFromScreen (new Point (bounds.Left + 100' bounds.Top + 90)' Point.Empty' bounds.Size);  	newbitmap = new Bitmap (bitmap);  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,SaveImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (bitmap)) {  	g.CopyFromScreen (new Point (bounds.Left + 100' bounds.Top + 90)' Point.Empty' bounds.Size);  	newbitmap = new Bitmap (bitmap);  }  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,SaveImage,The following statement contains a magic number: g.CopyFromScreen (new Point (bounds.Left + 100' bounds.Top + 90)' Point.Empty' bounds.Size);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,SaveImage,The following statement contains a magic number: g.CopyFromScreen (new Point (bounds.Left + 100' bounds.Top + 90)' Point.Empty' bounds.Size);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,CalculateAbsoluteCoordinateX,The following statement contains a magic number: return (x * 65536) / GetSystemMetrics (SystemMetric.SM_CXSCREEN);  
Magic Number,Imagenary,GSVTool,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\GSVTool.cs,CalculateAbsoluteCoordinateY,The following statement contains a magic number: return (y * 65536) / GetSystemMetrics (SystemMetric.SM_CYSCREEN);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,PictureBoxS1_Click,The following statement contains a magic number: PictureBoxS2.Location = new Point (8' 8);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,PictureBoxS1_Click,The following statement contains a magic number: PictureBoxS2.Location = new Point (8' 8);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,PictureBoxS2_Click,The following statement contains a magic number: PictureBoxS2.Location = new Point (8' 8);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,PictureBoxS2_Click,The following statement contains a magic number: PictureBoxS2.Location = new Point (8' 8);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,PictureBoxS3_Click,The following statement contains a magic number: PictureBoxS3.Location = new Point (3' 3);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,PictureBoxS3_Click,The following statement contains a magic number: PictureBoxS3.Location = new Point (3' 3);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,PictureBoxS4_Click,The following statement contains a magic number: PictureBoxS4.Location = new Point (3' 3);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,PictureBoxS4_Click,The following statement contains a magic number: PictureBoxS4.Location = new Point (3' 3);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS1.Size = new System.Drawing.Size (333' 308);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS1.Size = new System.Drawing.Size (333' 308);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS1.Location = new System.Drawing.Point (9' 3);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS1.Location = new System.Drawing.Point (9' 3);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS2.Size = new System.Drawing.Size (287' 308);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS2.Size = new System.Drawing.Size (287' 308);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS2.Location = new System.Drawing.Point (348' 3);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS2.Location = new System.Drawing.Point (348' 3);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS3.Size = new System.Drawing.Size (333' 274);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS3.Size = new System.Drawing.Size (333' 274);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS3.Location = new System.Drawing.Point (9' 326);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS3.Location = new System.Drawing.Point (9' 326);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS4.Size = new System.Drawing.Size (287' 274);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS4.Size = new System.Drawing.Size (287' 274);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS4.Location = new System.Drawing.Point (348' 326);  
Magic Number,Imagenary,ImageMatch,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\ImageMatch.cs,buttonClose_Click,The following statement contains a magic number: this.PictureBoxS4.Location = new System.Drawing.Point (348' 326);  
Magic Number,Imagenary,Myurl,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\Myurl.cs,Change_Angle,The following statement contains a magic number: try {  	//   ResultString = Regex.Match(url' "http://maps.google.com/maps.q=.layer=c.cbll=.*?cbp=(?<data>.*)").Groups["data"].Value;  	ResultString = Regex.Match (url' "maps.google.com/maps\\?(?<data1>.*?)layer.*?cbp=(?<data>.*?)&.*").Groups ["data"].Value;  	if (string.IsNullOrEmpty (ResultString)) {  		return "ERROR: ANGLE CAN NOT BE CHANGED";  	}  	string[] tokens = ResultString.Split (new char[] {  		'''  	});  	string c1 = tokens [2];  	string c2 = tokens [3];  	string c3 = tokens [4];  	string JoinedString = tokens [0] + "'" + angle + "'" + c1 + "'" + c2 + "'" + c3;  	RefinedString = Regex.Replace (url' ResultString' JoinedString);  	ResultString = Regex.Replace (RefinedString' "q=.*?&"' "");  }  catch (ArgumentException ex) {  	consoleText += "Invalid Url=  " + ex.Message + "\n";  }  
Magic Number,Imagenary,Myurl,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\Myurl.cs,Change_Angle,The following statement contains a magic number: try {  	//   ResultString = Regex.Match(url' "http://maps.google.com/maps.q=.layer=c.cbll=.*?cbp=(?<data>.*)").Groups["data"].Value;  	ResultString = Regex.Match (url' "maps.google.com/maps\\?(?<data1>.*?)layer.*?cbp=(?<data>.*?)&.*").Groups ["data"].Value;  	if (string.IsNullOrEmpty (ResultString)) {  		return "ERROR: ANGLE CAN NOT BE CHANGED";  	}  	string[] tokens = ResultString.Split (new char[] {  		'''  	});  	string c1 = tokens [2];  	string c2 = tokens [3];  	string c3 = tokens [4];  	string JoinedString = tokens [0] + "'" + angle + "'" + c1 + "'" + c2 + "'" + c3;  	RefinedString = Regex.Replace (url' ResultString' JoinedString);  	ResultString = Regex.Replace (RefinedString' "q=.*?&"' "");  }  catch (ArgumentException ex) {  	consoleText += "Invalid Url=  " + ex.Message + "\n";  }  
Magic Number,Imagenary,Myurl,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\Myurl.cs,Change_Angle,The following statement contains a magic number: try {  	//   ResultString = Regex.Match(url' "http://maps.google.com/maps.q=.layer=c.cbll=.*?cbp=(?<data>.*)").Groups["data"].Value;  	ResultString = Regex.Match (url' "maps.google.com/maps\\?(?<data1>.*?)layer.*?cbp=(?<data>.*?)&.*").Groups ["data"].Value;  	if (string.IsNullOrEmpty (ResultString)) {  		return "ERROR: ANGLE CAN NOT BE CHANGED";  	}  	string[] tokens = ResultString.Split (new char[] {  		'''  	});  	string c1 = tokens [2];  	string c2 = tokens [3];  	string c3 = tokens [4];  	string JoinedString = tokens [0] + "'" + angle + "'" + c1 + "'" + c2 + "'" + c3;  	RefinedString = Regex.Replace (url' ResultString' JoinedString);  	ResultString = Regex.Replace (RefinedString' "q=.*?&"' "");  }  catch (ArgumentException ex) {  	consoleText += "Invalid Url=  " + ex.Message + "\n";  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadExcelFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	cmd = new OleDbCommand ();  	cmd.Connection = conn;  	cmd.CommandText = "SELECT * FROM [" + sheetName + "]  ";  	conn.Open ();  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [0].ToString ()) == false) {  			string po = x ["POSTCODE"].ToString ().Replace (" "' "");  			int length = po.Length;  			string postalcode = po.Insert (length - 3' " ");  			pid = x ["ZOOPLA URL"].ToString ();  			if (PostalAdressObj.adressList.ContainsKey (pid) == false) {  				PostalAdressObj.Add (new PostalAdress () {  					PCD = postalcode'  					PID = pid  				});  			}  			else {  				PostalAdressObj.adressList [pid].PCD = postalcode;  			}  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadExcelFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [0].ToString ()) == false) {  		string po = x ["POSTCODE"].ToString ().Replace (" "' "");  		int length = po.Length;  		string postalcode = po.Insert (length - 3' " ");  		pid = x ["ZOOPLA URL"].ToString ();  		if (PostalAdressObj.adressList.ContainsKey (pid) == false) {  			PostalAdressObj.Add (new PostalAdress () {  				PCD = postalcode'  				PID = pid  			});  		}  		else {  			PostalAdressObj.adressList [pid].PCD = postalcode;  		}  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadExcelFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [0].ToString ()) == false) {  	string po = x ["POSTCODE"].ToString ().Replace (" "' "");  	int length = po.Length;  	string postalcode = po.Insert (length - 3' " ");  	pid = x ["ZOOPLA URL"].ToString ();  	if (PostalAdressObj.adressList.ContainsKey (pid) == false) {  		PostalAdressObj.Add (new PostalAdress () {  			PCD = postalcode'  			PID = pid  		});  	}  	else {  		PostalAdressObj.adressList [pid].PCD = postalcode;  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: using (OleDbConnection conn = new OleDbConnection (ConnectionString)) {  	conn.Open ();  	cmd.Connection = conn;  	//+"."+ sheetName +   	string query = "SELECT * FROM [" + Path.GetFileName (fileName) + "] WHERE  = '" + poobj.PCD.ToUpper () + "'";  	cmd = new OleDbCommand (query' conn);  	//                cmd.Parameters.AddWithValue("@p1"'Path.GetFileName(fileName));  	//              cmd.Parameters.AddWithValue("@p2"' poobj.PCD.ToUpper());  	var x = cmd.ExecuteReader ();  	while (x.Read ()) {  		if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = x [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = x [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = x [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = x [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = x [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = x [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = x [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = x [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = x [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = x [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = x [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = x [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = x [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = x [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = x [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = x [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = x [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = x [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = x [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = x [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			PropertiesObj.Add (p);  			PostalAdressObj.Add (p);  			//adressList.Add(p.PID' p);  			PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  		}  	}  	cmd = null;  	conn.Close ();  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: while (x.Read ()) {  	if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = x [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = x [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = x [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = x [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = x [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = x [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = x [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = x [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = x [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = x [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = x [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = x [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = x [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = x [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = x [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = x [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = x [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = x [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = x [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = x [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		PropertiesObj.Add (p);  		PostalAdressObj.Add (p);  		//adressList.Add(p.PID' p);  		PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  	}  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (x [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = x [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = x [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = x [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = x [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = x [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = x [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = x [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = x [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = x [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = x [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = x [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = x [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = x [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = x [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = x [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = x [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = x [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = x [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = x [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = x [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	PropertiesObj.Add (p);  	PostalAdressObj.Add (p);  	//adressList.Add(p.PID' p);  	PostalAdressObj.adressList [p.PID].AddPropertyKey (p.PID);  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.SBN = x [2].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.SBN = x [2].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.BNA = x [3].ToString ();  	//      ConsoleLog += "Added" + p.BNA + "\n";  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.BNA = x [3].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.POB = x [4].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.POB = x [4].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.NUM = x [5].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.NUM = x [5].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.DST = x [6].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.DST = x [6].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.STM = x [7].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.STM = x [7].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.DDL = x [8].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.DDL = x [8].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.DLO = x [9].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.DLO = x [9].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.PTN = x [10].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.PTN = x [10].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.PCD = x [11].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.PCD = x [11].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.CTA = x [12].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.CTA = x [12].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.CTP = x [13].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.CTP = x [13].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.CTT = x [14].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.CTT = x [14].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.SCD = x [15].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.SCD = x [15].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.CAT = x [16].ToString ();  	//             ConsoleLog += "Added" + p.CAT + "\n";  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.CAT = x [16].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.NDP = x [17].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.NDP = x [17].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.DPX = x [18].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.DPX = x [18].ToString ();  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: try {  	p.URN = x [19].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,OledbHandler,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\OledbHandler.cs,ReadPAFFileSingle,The following statement contains a magic number: p.URN = x [19].ToString ();  
Magic Number,Imagenary,Property,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\Property.cs,SetAdressAutomatically,The following statement contains a magic number: if (temp.StartsWith ("' ")) {  	adress = temp.Remove (0' 2);  }  
Magic Number,Imagenary,Property,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\Property.cs,SetAdressAutomatically,The following statement contains a magic number: adress = temp.Remove (0' 2);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: foreach (KeyValuePair<string' PostalAdress> x in POlog.adressList) {  	/*                  * Find Adress of Folder                  *                   */OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Shifting File toS " + x.Value.PCD  	});  	if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  		Messagebox.Size = new Size (350' 150);  		Messagebox.StartPosition = FormStartPosition.CenterScreen;  		input.Size = new Size (200' 30);  		input.Location = new Point (20' 50);  		Label label = new Label ();  		label.Text = "Select the Directory Name' Pressing the browse Button";  		label.Location = new Point (20' 20);  		Button b = new Button ();  		b.Text = "Browse";  		b.Click += new EventHandler (b_Click);  		b.Location = new Point (250' 50);  		Button ButtonSave = new Button ();  		ButtonSave.Text = "Save";  		ButtonSave.Location = new Point (120' 80);  		ButtonSave.Click += new EventHandler (ButtonSave_Click);  		Messagebox.Controls.Add (label);  		Messagebox.Controls.Add (b);  		Messagebox.Controls.Add (input);  		Messagebox.Controls.Add (ButtonSave);  		Messagebox.ShowDialog ();  		input.Text = Messagebox_String;  	}  	string PafFileName = GenerateFileName (x.Value.PCD' AppdataObj.PafFileAdress);  	ReadPAFFile (PafFileName' x.Value);  	//  ConsoleText = ReadSPHFile("D://SPH Sample.csv"' x.Value);  	//          ConsoleText += handler.ReadPAFFileSingle(PafFileName' x.Value.PCD.Remove(3' x.Value.PCD.Length - 3).ToUpper() + "$"' x.Value);  	//FindAllProperties(...);  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Finding LandMarks" + x.Key  	});  	ConsoleText += FilterByLandMark (x.Value);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: if (String.IsNullOrEmpty (AppdataObj.PafFileAdress)) {  	Messagebox.Size = new Size (350' 150);  	Messagebox.StartPosition = FormStartPosition.CenterScreen;  	input.Size = new Size (200' 30);  	input.Location = new Point (20' 50);  	Label label = new Label ();  	label.Text = "Select the Directory Name' Pressing the browse Button";  	label.Location = new Point (20' 20);  	Button b = new Button ();  	b.Text = "Browse";  	b.Click += new EventHandler (b_Click);  	b.Location = new Point (250' 50);  	Button ButtonSave = new Button ();  	ButtonSave.Text = "Save";  	ButtonSave.Location = new Point (120' 80);  	ButtonSave.Click += new EventHandler (ButtonSave_Click);  	Messagebox.Controls.Add (label);  	Messagebox.Controls.Add (b);  	Messagebox.Controls.Add (input);  	Messagebox.Controls.Add (ButtonSave);  	Messagebox.ShowDialog ();  	input.Text = Messagebox_String;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: Messagebox.Size = new Size (350' 150);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: Messagebox.Size = new Size (350' 150);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: input.Size = new Size (200' 30);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: input.Size = new Size (200' 30);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: input.Location = new Point (20' 50);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: input.Location = new Point (20' 50);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: label.Location = new Point (20' 20);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: label.Location = new Point (20' 20);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: b.Location = new Point (250' 50);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: b.Location = new Point (250' 50);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: ButtonSave.Location = new Point (120' 80);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindMultipleProperties,The following statement contains a magic number: ButtonSave.Location = new Point (120' 80);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByGoogle,The following statement contains a magic number: using (WebClient wc = new WebClient ()) {  	string wsUrl = "https://maps.googleapis.com/maps/api/geocode/json?address=" + adress + "&key=AIzaSyB2OcZcJBCNN8cIuntM4FHLG-mkYdz377A";  	string GoogleResponse = wc.DownloadString (wsUrl);  	try {  		MatchCollection Gcollection = Regex.Matches (GoogleResponse' "\\\"location.*?\\n*?.*?lat.*?:(?<lat>.*?)'(\\n|.).*?lng.*?:(?<lng>.*?)\\n");  		//                        .lat.*?:(?<lat>.*?)'(\\r\\n)*.*?lng.*?:(?<lng>.*?)(\\r\\n|})+");  		if (Gcollection.Count < 1) {  			ErrorCode = 1;  		}  		foreach (Match m in Gcollection) {  			if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lng"].Value)) {  				ErrorCode = 2;  			}  			else {  				p.Latitude = m.Groups ["lat"].Value;  				p.Longitude = m.Groups ["lng"].Value;  			}  		}  	}  	catch (ArgumentException) {  		ErrorCode = 3;  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByGoogle,The following statement contains a magic number: using (WebClient wc = new WebClient ()) {  	string wsUrl = "https://maps.googleapis.com/maps/api/geocode/json?address=" + adress + "&key=AIzaSyB2OcZcJBCNN8cIuntM4FHLG-mkYdz377A";  	string GoogleResponse = wc.DownloadString (wsUrl);  	try {  		MatchCollection Gcollection = Regex.Matches (GoogleResponse' "\\\"location.*?\\n*?.*?lat.*?:(?<lat>.*?)'(\\n|.).*?lng.*?:(?<lng>.*?)\\n");  		//                        .lat.*?:(?<lat>.*?)'(\\r\\n)*.*?lng.*?:(?<lng>.*?)(\\r\\n|})+");  		if (Gcollection.Count < 1) {  			ErrorCode = 1;  		}  		foreach (Match m in Gcollection) {  			if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lng"].Value)) {  				ErrorCode = 2;  			}  			else {  				p.Latitude = m.Groups ["lat"].Value;  				p.Longitude = m.Groups ["lng"].Value;  			}  		}  	}  	catch (ArgumentException) {  		ErrorCode = 3;  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByGoogle,The following statement contains a magic number: try {  	MatchCollection Gcollection = Regex.Matches (GoogleResponse' "\\\"location.*?\\n*?.*?lat.*?:(?<lat>.*?)'(\\n|.).*?lng.*?:(?<lng>.*?)\\n");  	//                        .lat.*?:(?<lat>.*?)'(\\r\\n)*.*?lng.*?:(?<lng>.*?)(\\r\\n|})+");  	if (Gcollection.Count < 1) {  		ErrorCode = 1;  	}  	foreach (Match m in Gcollection) {  		if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lng"].Value)) {  			ErrorCode = 2;  		}  		else {  			p.Latitude = m.Groups ["lat"].Value;  			p.Longitude = m.Groups ["lng"].Value;  		}  	}  }  catch (ArgumentException) {  	ErrorCode = 3;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByGoogle,The following statement contains a magic number: try {  	MatchCollection Gcollection = Regex.Matches (GoogleResponse' "\\\"location.*?\\n*?.*?lat.*?:(?<lat>.*?)'(\\n|.).*?lng.*?:(?<lng>.*?)\\n");  	//                        .lat.*?:(?<lat>.*?)'(\\r\\n)*.*?lng.*?:(?<lng>.*?)(\\r\\n|})+");  	if (Gcollection.Count < 1) {  		ErrorCode = 1;  	}  	foreach (Match m in Gcollection) {  		if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lng"].Value)) {  			ErrorCode = 2;  		}  		else {  			p.Latitude = m.Groups ["lat"].Value;  			p.Longitude = m.Groups ["lng"].Value;  		}  	}  }  catch (ArgumentException) {  	ErrorCode = 3;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByGoogle,The following statement contains a magic number: foreach (Match m in Gcollection) {  	if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lng"].Value)) {  		ErrorCode = 2;  	}  	else {  		p.Latitude = m.Groups ["lat"].Value;  		p.Longitude = m.Groups ["lng"].Value;  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByGoogle,The following statement contains a magic number: if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lng"].Value)) {  	ErrorCode = 2;  }  else {  	p.Latitude = m.Groups ["lat"].Value;  	p.Longitude = m.Groups ["lng"].Value;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByGoogle,The following statement contains a magic number: ErrorCode = 2;  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByGoogle,The following statement contains a magic number: ErrorCode = 3;  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByBing,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	string Response = w.DownloadString (wsUrl.Replace ("%20?&key="' "?&key="));  	try {  		MatchCollection collection = Regex.Matches (Response' RegexString);  		if (collection.Count < 1) {  			ErrorCode = 1;  		}  		foreach (Match m in collection) {  			if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lon"].Value)) {  				ErrorCode = 2;  			}  			else {  				p.Latitude = m.Groups ["lat"].Value;  				p.Longitude = m.Groups ["lon"].Value;  			}  		}  	}  	catch (Exception) {  		ErrorCode = 3;  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByBing,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	string Response = w.DownloadString (wsUrl.Replace ("%20?&key="' "?&key="));  	try {  		MatchCollection collection = Regex.Matches (Response' RegexString);  		if (collection.Count < 1) {  			ErrorCode = 1;  		}  		foreach (Match m in collection) {  			if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lon"].Value)) {  				ErrorCode = 2;  			}  			else {  				p.Latitude = m.Groups ["lat"].Value;  				p.Longitude = m.Groups ["lon"].Value;  			}  		}  	}  	catch (Exception) {  		ErrorCode = 3;  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByBing,The following statement contains a magic number: try {  	MatchCollection collection = Regex.Matches (Response' RegexString);  	if (collection.Count < 1) {  		ErrorCode = 1;  	}  	foreach (Match m in collection) {  		if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lon"].Value)) {  			ErrorCode = 2;  		}  		else {  			p.Latitude = m.Groups ["lat"].Value;  			p.Longitude = m.Groups ["lon"].Value;  		}  	}  }  catch (Exception) {  	ErrorCode = 3;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByBing,The following statement contains a magic number: try {  	MatchCollection collection = Regex.Matches (Response' RegexString);  	if (collection.Count < 1) {  		ErrorCode = 1;  	}  	foreach (Match m in collection) {  		if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lon"].Value)) {  			ErrorCode = 2;  		}  		else {  			p.Latitude = m.Groups ["lat"].Value;  			p.Longitude = m.Groups ["lon"].Value;  		}  	}  }  catch (Exception) {  	ErrorCode = 3;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByBing,The following statement contains a magic number: foreach (Match m in collection) {  	if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lon"].Value)) {  		ErrorCode = 2;  	}  	else {  		p.Latitude = m.Groups ["lat"].Value;  		p.Longitude = m.Groups ["lon"].Value;  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByBing,The following statement contains a magic number: if (String.IsNullOrEmpty (m.Groups ["lat"].Value) || String.IsNullOrEmpty (m.Groups ["lon"].Value)) {  	ErrorCode = 2;  }  else {  	p.Latitude = m.Groups ["lat"].Value;  	p.Longitude = m.Groups ["lon"].Value;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByBing,The following statement contains a magic number: ErrorCode = 2;  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindCoordinatesByBing,The following statement contains a magic number: ErrorCode = 3;  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: foreach (KeyValuePair<string' Property> p in log.propertyList) {  	if (String.IsNullOrEmpty (p.Value.Latitude) == false || String.IsNullOrEmpty (p.Value.Longitude) == false) {  		continue;  	}  	else {  		string localadd = p.Value.SimpleAdress + " " + p.Value.PCD;  		string adress = p.Value.SimpleAdress.Replace (" "' "%20").Replace ("!"' "%21").Replace ("."' "%2E").Replace ("/"' "%2F").Replace ("("' "%28").Replace (")"' "%29").Replace ("+"' "%2B").Replace ("-"' "%2D").Replace ("."' "%2E").Replace ("="' "%3D").Replace ("_"' "%5F").Replace ("'"' "%2C");  		ErrorCode = FindCoordinatesByBing (p.Value' adress);  		if (ErrorCode != 0) {  			if (ErrorCode == 1) {  				ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  			}  			else if (ErrorCode == 2) {  				ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  			}  			else if (ErrorCode == 3) {  				ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  			}  			else {  				ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  			}  			ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  			if (ErrorCode != 0) {  				if (ErrorCode == 1) {  					ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  				}  				else if (ErrorCode == 2) {  					ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  				}  				else if (ErrorCode == 3) {  					ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  				}  				else {  					ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  				}  			}  			else {  				ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  			}  		}  		else {  			ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: foreach (KeyValuePair<string' Property> p in log.propertyList) {  	if (String.IsNullOrEmpty (p.Value.Latitude) == false || String.IsNullOrEmpty (p.Value.Longitude) == false) {  		continue;  	}  	else {  		string localadd = p.Value.SimpleAdress + " " + p.Value.PCD;  		string adress = p.Value.SimpleAdress.Replace (" "' "%20").Replace ("!"' "%21").Replace ("."' "%2E").Replace ("/"' "%2F").Replace ("("' "%28").Replace (")"' "%29").Replace ("+"' "%2B").Replace ("-"' "%2D").Replace ("."' "%2E").Replace ("="' "%3D").Replace ("_"' "%5F").Replace ("'"' "%2C");  		ErrorCode = FindCoordinatesByBing (p.Value' adress);  		if (ErrorCode != 0) {  			if (ErrorCode == 1) {  				ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  			}  			else if (ErrorCode == 2) {  				ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  			}  			else if (ErrorCode == 3) {  				ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  			}  			else {  				ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  			}  			ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  			if (ErrorCode != 0) {  				if (ErrorCode == 1) {  					ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  				}  				else if (ErrorCode == 2) {  					ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  				}  				else if (ErrorCode == 3) {  					ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  				}  				else {  					ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  				}  			}  			else {  				ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  			}  		}  		else {  			ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: foreach (KeyValuePair<string' Property> p in log.propertyList) {  	if (String.IsNullOrEmpty (p.Value.Latitude) == false || String.IsNullOrEmpty (p.Value.Longitude) == false) {  		continue;  	}  	else {  		string localadd = p.Value.SimpleAdress + " " + p.Value.PCD;  		string adress = p.Value.SimpleAdress.Replace (" "' "%20").Replace ("!"' "%21").Replace ("."' "%2E").Replace ("/"' "%2F").Replace ("("' "%28").Replace (")"' "%29").Replace ("+"' "%2B").Replace ("-"' "%2D").Replace ("."' "%2E").Replace ("="' "%3D").Replace ("_"' "%5F").Replace ("'"' "%2C");  		ErrorCode = FindCoordinatesByBing (p.Value' adress);  		if (ErrorCode != 0) {  			if (ErrorCode == 1) {  				ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  			}  			else if (ErrorCode == 2) {  				ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  			}  			else if (ErrorCode == 3) {  				ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  			}  			else {  				ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  			}  			ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  			if (ErrorCode != 0) {  				if (ErrorCode == 1) {  					ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  				}  				else if (ErrorCode == 2) {  					ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  				}  				else if (ErrorCode == 3) {  					ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  				}  				else {  					ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  				}  			}  			else {  				ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  			}  		}  		else {  			ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: foreach (KeyValuePair<string' Property> p in log.propertyList) {  	if (String.IsNullOrEmpty (p.Value.Latitude) == false || String.IsNullOrEmpty (p.Value.Longitude) == false) {  		continue;  	}  	else {  		string localadd = p.Value.SimpleAdress + " " + p.Value.PCD;  		string adress = p.Value.SimpleAdress.Replace (" "' "%20").Replace ("!"' "%21").Replace ("."' "%2E").Replace ("/"' "%2F").Replace ("("' "%28").Replace (")"' "%29").Replace ("+"' "%2B").Replace ("-"' "%2D").Replace ("."' "%2E").Replace ("="' "%3D").Replace ("_"' "%5F").Replace ("'"' "%2C");  		ErrorCode = FindCoordinatesByBing (p.Value' adress);  		if (ErrorCode != 0) {  			if (ErrorCode == 1) {  				ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  			}  			else if (ErrorCode == 2) {  				ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  			}  			else if (ErrorCode == 3) {  				ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  			}  			else {  				ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  			}  			ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  			if (ErrorCode != 0) {  				if (ErrorCode == 1) {  					ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  				}  				else if (ErrorCode == 2) {  					ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  				}  				else if (ErrorCode == 3) {  					ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  				}  				else {  					ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  				}  			}  			else {  				ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  			}  		}  		else {  			ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (String.IsNullOrEmpty (p.Value.Latitude) == false || String.IsNullOrEmpty (p.Value.Longitude) == false) {  	continue;  }  else {  	string localadd = p.Value.SimpleAdress + " " + p.Value.PCD;  	string adress = p.Value.SimpleAdress.Replace (" "' "%20").Replace ("!"' "%21").Replace ("."' "%2E").Replace ("/"' "%2F").Replace ("("' "%28").Replace (")"' "%29").Replace ("+"' "%2B").Replace ("-"' "%2D").Replace ("."' "%2E").Replace ("="' "%3D").Replace ("_"' "%5F").Replace ("'"' "%2C");  	ErrorCode = FindCoordinatesByBing (p.Value' adress);  	if (ErrorCode != 0) {  		if (ErrorCode == 1) {  			ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  		}  		else if (ErrorCode == 2) {  			ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  		}  		else if (ErrorCode == 3) {  			ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  		}  		else {  			ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  		}  		ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  		if (ErrorCode != 0) {  			if (ErrorCode == 1) {  				ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  			}  			else if (ErrorCode == 2) {  				ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  			}  			else if (ErrorCode == 3) {  				ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  			}  			else {  				ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  			}  		}  		else {  			ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  		}  	}  	else {  		ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (String.IsNullOrEmpty (p.Value.Latitude) == false || String.IsNullOrEmpty (p.Value.Longitude) == false) {  	continue;  }  else {  	string localadd = p.Value.SimpleAdress + " " + p.Value.PCD;  	string adress = p.Value.SimpleAdress.Replace (" "' "%20").Replace ("!"' "%21").Replace ("."' "%2E").Replace ("/"' "%2F").Replace ("("' "%28").Replace (")"' "%29").Replace ("+"' "%2B").Replace ("-"' "%2D").Replace ("."' "%2E").Replace ("="' "%3D").Replace ("_"' "%5F").Replace ("'"' "%2C");  	ErrorCode = FindCoordinatesByBing (p.Value' adress);  	if (ErrorCode != 0) {  		if (ErrorCode == 1) {  			ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  		}  		else if (ErrorCode == 2) {  			ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  		}  		else if (ErrorCode == 3) {  			ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  		}  		else {  			ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  		}  		ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  		if (ErrorCode != 0) {  			if (ErrorCode == 1) {  				ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  			}  			else if (ErrorCode == 2) {  				ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  			}  			else if (ErrorCode == 3) {  				ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  			}  			else {  				ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  			}  		}  		else {  			ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  		}  	}  	else {  		ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (String.IsNullOrEmpty (p.Value.Latitude) == false || String.IsNullOrEmpty (p.Value.Longitude) == false) {  	continue;  }  else {  	string localadd = p.Value.SimpleAdress + " " + p.Value.PCD;  	string adress = p.Value.SimpleAdress.Replace (" "' "%20").Replace ("!"' "%21").Replace ("."' "%2E").Replace ("/"' "%2F").Replace ("("' "%28").Replace (")"' "%29").Replace ("+"' "%2B").Replace ("-"' "%2D").Replace ("."' "%2E").Replace ("="' "%3D").Replace ("_"' "%5F").Replace ("'"' "%2C");  	ErrorCode = FindCoordinatesByBing (p.Value' adress);  	if (ErrorCode != 0) {  		if (ErrorCode == 1) {  			ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  		}  		else if (ErrorCode == 2) {  			ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  		}  		else if (ErrorCode == 3) {  			ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  		}  		else {  			ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  		}  		ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  		if (ErrorCode != 0) {  			if (ErrorCode == 1) {  				ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  			}  			else if (ErrorCode == 2) {  				ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  			}  			else if (ErrorCode == 3) {  				ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  			}  			else {  				ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  			}  		}  		else {  			ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  		}  	}  	else {  		ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (String.IsNullOrEmpty (p.Value.Latitude) == false || String.IsNullOrEmpty (p.Value.Longitude) == false) {  	continue;  }  else {  	string localadd = p.Value.SimpleAdress + " " + p.Value.PCD;  	string adress = p.Value.SimpleAdress.Replace (" "' "%20").Replace ("!"' "%21").Replace ("."' "%2E").Replace ("/"' "%2F").Replace ("("' "%28").Replace (")"' "%29").Replace ("+"' "%2B").Replace ("-"' "%2D").Replace ("."' "%2E").Replace ("="' "%3D").Replace ("_"' "%5F").Replace ("'"' "%2C");  	ErrorCode = FindCoordinatesByBing (p.Value' adress);  	if (ErrorCode != 0) {  		if (ErrorCode == 1) {  			ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  		}  		else if (ErrorCode == 2) {  			ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  		}  		else if (ErrorCode == 3) {  			ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  		}  		else {  			ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  		}  		ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  		if (ErrorCode != 0) {  			if (ErrorCode == 1) {  				ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  			}  			else if (ErrorCode == 2) {  				ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  			}  			else if (ErrorCode == 3) {  				ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  			}  			else {  				ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  			}  		}  		else {  			ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  		}  	}  	else {  		ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode != 0) {  	if (ErrorCode == 1) {  		ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  	}  	else if (ErrorCode == 2) {  		ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  	}  	else if (ErrorCode == 3) {  		ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  	}  	else {  		ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  	}  	ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  	if (ErrorCode != 0) {  		if (ErrorCode == 1) {  			ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  		}  		else if (ErrorCode == 2) {  			ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  		}  		else if (ErrorCode == 3) {  			ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  		}  		else {  			ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  		}  	}  	else {  		ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  	}  }  else {  	ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode != 0) {  	if (ErrorCode == 1) {  		ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  	}  	else if (ErrorCode == 2) {  		ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  	}  	else if (ErrorCode == 3) {  		ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  	}  	else {  		ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  	}  	ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  	if (ErrorCode != 0) {  		if (ErrorCode == 1) {  			ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  		}  		else if (ErrorCode == 2) {  			ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  		}  		else if (ErrorCode == 3) {  			ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  		}  		else {  			ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  		}  	}  	else {  		ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  	}  }  else {  	ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode != 0) {  	if (ErrorCode == 1) {  		ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  	}  	else if (ErrorCode == 2) {  		ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  	}  	else if (ErrorCode == 3) {  		ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  	}  	else {  		ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  	}  	ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  	if (ErrorCode != 0) {  		if (ErrorCode == 1) {  			ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  		}  		else if (ErrorCode == 2) {  			ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  		}  		else if (ErrorCode == 3) {  			ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  		}  		else {  			ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  		}  	}  	else {  		ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  	}  }  else {  	ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode != 0) {  	if (ErrorCode == 1) {  		ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  	}  	else if (ErrorCode == 2) {  		ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  	}  	else if (ErrorCode == 3) {  		ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  	}  	else {  		ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  	}  	ErrorCode = FindCoordinatesByGoogle (p.Value' adress);  	if (ErrorCode != 0) {  		if (ErrorCode == 1) {  			ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  		}  		else if (ErrorCode == 2) {  			ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  		}  		else if (ErrorCode == 3) {  			ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  		}  		else {  			ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  		}  	}  	else {  		ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  	}  }  else {  	ConsoleLog += "Bing- Coordinates Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode == 1) {  	ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  }  else if (ErrorCode == 2) {  	ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  }  else if (ErrorCode == 3) {  	ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  }  else {  	ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode == 1) {  	ConsoleLog += "No Coordinates Found by Bing for " + p.Key + "\n";  }  else if (ErrorCode == 2) {  	ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  }  else if (ErrorCode == 3) {  	ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  }  else {  	ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode == 2) {  	ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  }  else if (ErrorCode == 3) {  	ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  }  else {  	ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode == 2) {  	ConsoleLog += "Invalid Coordinates Found by Bing  for " + p.Key + "\n";  }  else if (ErrorCode == 3) {  	ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  }  else {  	ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode == 3) {  	ConsoleLog += "Exception occured while Finding the Coordinates by Bing for " + p.Key + "\n";  }  else {  	ConsoleLog += "Bing-Error Not Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode != 0) {  	if (ErrorCode == 1) {  		ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  	}  	else if (ErrorCode == 2) {  		ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  	}  	else if (ErrorCode == 3) {  		ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  	}  	else {  		ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  	}  }  else {  	ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode != 0) {  	if (ErrorCode == 1) {  		ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  	}  	else if (ErrorCode == 2) {  		ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  	}  	else if (ErrorCode == 3) {  		ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  	}  	else {  		ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  	}  }  else {  	ConsoleLog += "Google- Coordinates Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode == 1) {  	ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  }  else if (ErrorCode == 2) {  	ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  }  else if (ErrorCode == 3) {  	ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  }  else {  	ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode == 1) {  	ConsoleLog += "No Coordinates Found by Google for " + p.Key + "\n";  }  else if (ErrorCode == 2) {  	ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  }  else if (ErrorCode == 3) {  	ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  }  else {  	ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode == 2) {  	ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  }  else if (ErrorCode == 3) {  	ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  }  else {  	ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode == 2) {  	ConsoleLog += "Invalid Coordinates Found By Google for " + p.Key + "\n";  }  else if (ErrorCode == 3) {  	ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  }  else {  	ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindLongitude_Latitude,The following statement contains a magic number: if (ErrorCode == 3) {  	ConsoleLog += "Exception occured while Finding the Coordinates by Google for " + p.Key + "\n";  }  else {  	ConsoleLog += "Google-Error Not Detected. " + p.Key + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The following statement contains a magic number: if (DateTime.Compare (po.SearchedProperties.AddMonths (1)' DateTime.Now) >= 0 && po.SearchedProperties.Equals (new DateTime (0001' 1' 1)) == false) {  	ConsoleLog += "Already Searched this Postal Adress in this month\n";  	return ConsoleLog;  }  else {  	ConsoleLog += "Valid Properties Searched\n";  	string ScrappedString = null;  	using (WebClient webClientObj = new WebClient ()) {  		try {  			ScrappedString = webClientObj.DownloadString ("http://www.zoopla.co.uk/home-values/" + p.PCD);  		}  		catch (Exception e) {  			throw new Exception ("Unable to Connect Zoople" + e.Message);  		}  		string b = "<a *?href=\"/property/(?<data>.*?)" + p.PCD.Replace (" "' "-").ToLower () + ".*?class=\"attrProperty\".*?>(?<data2>.*?)" + p.PCD.ToUpper () + "</a>";  		string RequiredRegex = b;  		try {  			MatchCollection collection = Regex.Matches (ScrappedString' RequiredRegex);  			foreach (Match m in collection) {  				Property pobj = new Property ();  				pobj.SimpleAdress = m.Groups [2].Value.TrimEnd ();  				pobj.UrlAdress = @"C:\\Users\\jafar.baltidynamolog\\Documents\\Visual Studio 2010\\Projects\\Imagenary\\Imagenary\\bin\\" + m.Groups [2].Value.TrimEnd ().Replace ("\\\\"' "\\").Replace ("'"' "") + "\\";  				// log.Add(pobj' p.PCD);  				po.AddPropertyKey (pobj.SimpleAdress);  				ConsoleLog += "Property Addeds..." + pobj.SimpleAdress + "\n";  			}  		}  		catch (ArgumentException ex) {  			throw new Exception ("Exception while getting properties" + ex.Message);  		}  	}  	po.SearchedProperties = DateTime.Now;  	ConsoleLog += "PostalAdress Added ...\n";  	POlog.Add (po);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The following statement contains a magic number: if (DateTime.Compare (po.SearchedProperties.AddMonths (1)' DateTime.Now) >= 0 && po.SearchedProperties.Equals (new DateTime (0001' 1' 1)) == false) {  	ConsoleLog += "Already Searched this Postal Adress in this month\n";  	return ConsoleLog;  }  else {  	ConsoleLog += "Valid Properties Searched\n";  	string ScrappedString = null;  	using (WebClient webClientObj = new WebClient ()) {  		try {  			ScrappedString = webClientObj.DownloadString ("http://www.zoopla.co.uk/home-values/" + p.PCD);  		}  		catch (Exception e) {  			throw new Exception ("Unable to Connect Zoople" + e.Message);  		}  		string b = "<a *?href=\"/property/(?<data>.*?)" + p.PCD.Replace (" "' "-").ToLower () + ".*?class=\"attrProperty\".*?>(?<data2>.*?)" + p.PCD.ToUpper () + "</a>";  		string RequiredRegex = b;  		try {  			MatchCollection collection = Regex.Matches (ScrappedString' RequiredRegex);  			foreach (Match m in collection) {  				Property pobj = new Property ();  				pobj.SimpleAdress = m.Groups [2].Value.TrimEnd ();  				pobj.UrlAdress = @"C:\\Users\\jafar.baltidynamolog\\Documents\\Visual Studio 2010\\Projects\\Imagenary\\Imagenary\\bin\\" + m.Groups [2].Value.TrimEnd ().Replace ("\\\\"' "\\").Replace ("'"' "") + "\\";  				// log.Add(pobj' p.PCD);  				po.AddPropertyKey (pobj.SimpleAdress);  				ConsoleLog += "Property Addeds..." + pobj.SimpleAdress + "\n";  			}  		}  		catch (ArgumentException ex) {  			throw new Exception ("Exception while getting properties" + ex.Message);  		}  	}  	po.SearchedProperties = DateTime.Now;  	ConsoleLog += "PostalAdress Added ...\n";  	POlog.Add (po);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The following statement contains a magic number: using (WebClient webClientObj = new WebClient ()) {  	try {  		ScrappedString = webClientObj.DownloadString ("http://www.zoopla.co.uk/home-values/" + p.PCD);  	}  	catch (Exception e) {  		throw new Exception ("Unable to Connect Zoople" + e.Message);  	}  	string b = "<a *?href=\"/property/(?<data>.*?)" + p.PCD.Replace (" "' "-").ToLower () + ".*?class=\"attrProperty\".*?>(?<data2>.*?)" + p.PCD.ToUpper () + "</a>";  	string RequiredRegex = b;  	try {  		MatchCollection collection = Regex.Matches (ScrappedString' RequiredRegex);  		foreach (Match m in collection) {  			Property pobj = new Property ();  			pobj.SimpleAdress = m.Groups [2].Value.TrimEnd ();  			pobj.UrlAdress = @"C:\\Users\\jafar.baltidynamolog\\Documents\\Visual Studio 2010\\Projects\\Imagenary\\Imagenary\\bin\\" + m.Groups [2].Value.TrimEnd ().Replace ("\\\\"' "\\").Replace ("'"' "") + "\\";  			// log.Add(pobj' p.PCD);  			po.AddPropertyKey (pobj.SimpleAdress);  			ConsoleLog += "Property Addeds..." + pobj.SimpleAdress + "\n";  		}  	}  	catch (ArgumentException ex) {  		throw new Exception ("Exception while getting properties" + ex.Message);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The following statement contains a magic number: using (WebClient webClientObj = new WebClient ()) {  	try {  		ScrappedString = webClientObj.DownloadString ("http://www.zoopla.co.uk/home-values/" + p.PCD);  	}  	catch (Exception e) {  		throw new Exception ("Unable to Connect Zoople" + e.Message);  	}  	string b = "<a *?href=\"/property/(?<data>.*?)" + p.PCD.Replace (" "' "-").ToLower () + ".*?class=\"attrProperty\".*?>(?<data2>.*?)" + p.PCD.ToUpper () + "</a>";  	string RequiredRegex = b;  	try {  		MatchCollection collection = Regex.Matches (ScrappedString' RequiredRegex);  		foreach (Match m in collection) {  			Property pobj = new Property ();  			pobj.SimpleAdress = m.Groups [2].Value.TrimEnd ();  			pobj.UrlAdress = @"C:\\Users\\jafar.baltidynamolog\\Documents\\Visual Studio 2010\\Projects\\Imagenary\\Imagenary\\bin\\" + m.Groups [2].Value.TrimEnd ().Replace ("\\\\"' "\\").Replace ("'"' "") + "\\";  			// log.Add(pobj' p.PCD);  			po.AddPropertyKey (pobj.SimpleAdress);  			ConsoleLog += "Property Addeds..." + pobj.SimpleAdress + "\n";  		}  	}  	catch (ArgumentException ex) {  		throw new Exception ("Exception while getting properties" + ex.Message);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The following statement contains a magic number: try {  	MatchCollection collection = Regex.Matches (ScrappedString' RequiredRegex);  	foreach (Match m in collection) {  		Property pobj = new Property ();  		pobj.SimpleAdress = m.Groups [2].Value.TrimEnd ();  		pobj.UrlAdress = @"C:\\Users\\jafar.baltidynamolog\\Documents\\Visual Studio 2010\\Projects\\Imagenary\\Imagenary\\bin\\" + m.Groups [2].Value.TrimEnd ().Replace ("\\\\"' "\\").Replace ("'"' "") + "\\";  		// log.Add(pobj' p.PCD);  		po.AddPropertyKey (pobj.SimpleAdress);  		ConsoleLog += "Property Addeds..." + pobj.SimpleAdress + "\n";  	}  }  catch (ArgumentException ex) {  	throw new Exception ("Exception while getting properties" + ex.Message);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The following statement contains a magic number: try {  	MatchCollection collection = Regex.Matches (ScrappedString' RequiredRegex);  	foreach (Match m in collection) {  		Property pobj = new Property ();  		pobj.SimpleAdress = m.Groups [2].Value.TrimEnd ();  		pobj.UrlAdress = @"C:\\Users\\jafar.baltidynamolog\\Documents\\Visual Studio 2010\\Projects\\Imagenary\\Imagenary\\bin\\" + m.Groups [2].Value.TrimEnd ().Replace ("\\\\"' "\\").Replace ("'"' "") + "\\";  		// log.Add(pobj' p.PCD);  		po.AddPropertyKey (pobj.SimpleAdress);  		ConsoleLog += "Property Addeds..." + pobj.SimpleAdress + "\n";  	}  }  catch (ArgumentException ex) {  	throw new Exception ("Exception while getting properties" + ex.Message);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The following statement contains a magic number: foreach (Match m in collection) {  	Property pobj = new Property ();  	pobj.SimpleAdress = m.Groups [2].Value.TrimEnd ();  	pobj.UrlAdress = @"C:\\Users\\jafar.baltidynamolog\\Documents\\Visual Studio 2010\\Projects\\Imagenary\\Imagenary\\bin\\" + m.Groups [2].Value.TrimEnd ().Replace ("\\\\"' "\\").Replace ("'"' "") + "\\";  	// log.Add(pobj' p.PCD);  	po.AddPropertyKey (pobj.SimpleAdress);  	ConsoleLog += "Property Addeds..." + pobj.SimpleAdress + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The following statement contains a magic number: foreach (Match m in collection) {  	Property pobj = new Property ();  	pobj.SimpleAdress = m.Groups [2].Value.TrimEnd ();  	pobj.UrlAdress = @"C:\\Users\\jafar.baltidynamolog\\Documents\\Visual Studio 2010\\Projects\\Imagenary\\Imagenary\\bin\\" + m.Groups [2].Value.TrimEnd ().Replace ("\\\\"' "\\").Replace ("'"' "") + "\\";  	// log.Add(pobj' p.PCD);  	po.AddPropertyKey (pobj.SimpleAdress);  	ConsoleLog += "Property Addeds..." + pobj.SimpleAdress + "\n";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The following statement contains a magic number: pobj.SimpleAdress = m.Groups [2].Value.TrimEnd ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,FindAllProperties,The following statement contains a magic number: pobj.UrlAdress = @"C:\\Users\\jafar.baltidynamolog\\Documents\\Visual Studio 2010\\Projects\\Imagenary\\Imagenary\\bin\\" + m.Groups [2].Value.TrimEnd ().Replace ("\\\\"' "\\").Replace ("'"' "") + "\\";  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,DownloadAllImages,The following statement contains a magic number: foreach (var p in log.propertyList) {  	string adress = "https://www.google.com/maps/place/" + p.Value.Adress.Replace (" "' "+").Replace ("'"' "") + "/";  	if (Directory.Exists (data.ImageOutputDirectory + "//" + p.Value.Adress)) {  		string[] names = Directory.GetFiles (p.Value.Adress);  		if (names.Count () >= 4) {  			continue;  		}  	}  	builder.Clear ();  	builder.Append (data.ImageOutputDirectory + "//" + p.Value.Adress + "//");  	// SetRichboxText("Downloading..." + p.Value.Adress);  	GSVTool tool = new GSVTool (adress' builder.ToString ()' startPage);  	//    this.Hide();  	tool.Activate ();  	tool.ShowDialog ();  	if (tool.IsStopped == true) {  		break;  	}  	if (tool.completed == true) {  		// tool.Close();  		continue;  	}  	//else  	//{  	//    tool.Activate();  	//    Application.DoEvents();  	//}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,DownloadAllImages,The following statement contains a magic number: if (Directory.Exists (data.ImageOutputDirectory + "//" + p.Value.Adress)) {  	string[] names = Directory.GetFiles (p.Value.Adress);  	if (names.Count () >= 4) {  		continue;  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,DownloadAllImages,The following statement contains a magic number: if (names.Count () >= 4) {  	continue;  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	count++;  	if (count == 1) {  		continue;  	}  	//If country is there  	if (row.Count >= 14) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "SPH Record No: " + count  		});  		string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  		while (localGroupadress.StartsWith ("' ")) {  			localGroupadress = localGroupadress.Remove (0' 2);  		}  		IsLocationThere (poobj' localGroupadress' true);  	}  	else {  		ConsoleLog = "Row has less element than Required";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	count++;  	if (count == 1) {  		continue;  	}  	//If country is there  	if (row.Count >= 14) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "SPH Record No: " + count  		});  		string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  		while (localGroupadress.StartsWith ("' ")) {  			localGroupadress = localGroupadress.Remove (0' 2);  		}  		IsLocationThere (poobj' localGroupadress' true);  	}  	else {  		ConsoleLog = "Row has less element than Required";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	count++;  	if (count == 1) {  		continue;  	}  	//If country is there  	if (row.Count >= 14) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "SPH Record No: " + count  		});  		string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  		while (localGroupadress.StartsWith ("' ")) {  			localGroupadress = localGroupadress.Remove (0' 2);  		}  		IsLocationThere (poobj' localGroupadress' true);  	}  	else {  		ConsoleLog = "Row has less element than Required";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	count++;  	if (count == 1) {  		continue;  	}  	//If country is there  	if (row.Count >= 14) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "SPH Record No: " + count  		});  		string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  		while (localGroupadress.StartsWith ("' ")) {  			localGroupadress = localGroupadress.Remove (0' 2);  		}  		IsLocationThere (poobj' localGroupadress' true);  	}  	else {  		ConsoleLog = "Row has less element than Required";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	count++;  	if (count == 1) {  		continue;  	}  	//If country is there  	if (row.Count >= 14) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "SPH Record No: " + count  		});  		string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  		while (localGroupadress.StartsWith ("' ")) {  			localGroupadress = localGroupadress.Remove (0' 2);  		}  		IsLocationThere (poobj' localGroupadress' true);  	}  	else {  		ConsoleLog = "Row has less element than Required";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	count++;  	if (count == 1) {  		continue;  	}  	//If country is there  	if (row.Count >= 14) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "SPH Record No: " + count  		});  		string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  		while (localGroupadress.StartsWith ("' ")) {  			localGroupadress = localGroupadress.Remove (0' 2);  		}  		IsLocationThere (poobj' localGroupadress' true);  	}  	else {  		ConsoleLog = "Row has less element than Required";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	count++;  	if (count == 1) {  		continue;  	}  	//If country is there  	if (row.Count >= 14) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "SPH Record No: " + count  		});  		string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  		while (localGroupadress.StartsWith ("' ")) {  			localGroupadress = localGroupadress.Remove (0' 2);  		}  		IsLocationThere (poobj' localGroupadress' true);  	}  	else {  		ConsoleLog = "Row has less element than Required";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	count++;  	if (count == 1) {  		continue;  	}  	//If country is there  	if (row.Count >= 14) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "SPH Record No: " + count  		});  		string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  		while (localGroupadress.StartsWith ("' ")) {  			localGroupadress = localGroupadress.Remove (0' 2);  		}  		IsLocationThere (poobj' localGroupadress' true);  	}  	else {  		ConsoleLog = "Row has less element than Required";  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: if (row.Count >= 14) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "SPH Record No: " + count  	});  	string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  	while (localGroupadress.StartsWith ("' ")) {  		localGroupadress = localGroupadress.Remove (0' 2);  	}  	IsLocationThere (poobj' localGroupadress' true);  }  else {  	ConsoleLog = "Row has less element than Required";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: if (row.Count >= 14) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "SPH Record No: " + count  	});  	string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  	while (localGroupadress.StartsWith ("' ")) {  		localGroupadress = localGroupadress.Remove (0' 2);  	}  	IsLocationThere (poobj' localGroupadress' true);  }  else {  	ConsoleLog = "Row has less element than Required";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: if (row.Count >= 14) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "SPH Record No: " + count  	});  	string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  	while (localGroupadress.StartsWith ("' ")) {  		localGroupadress = localGroupadress.Remove (0' 2);  	}  	IsLocationThere (poobj' localGroupadress' true);  }  else {  	ConsoleLog = "Row has less element than Required";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: if (row.Count >= 14) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "SPH Record No: " + count  	});  	string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  	while (localGroupadress.StartsWith ("' ")) {  		localGroupadress = localGroupadress.Remove (0' 2);  	}  	IsLocationThere (poobj' localGroupadress' true);  }  else {  	ConsoleLog = "Row has less element than Required";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: if (row.Count >= 14) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "SPH Record No: " + count  	});  	string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  	while (localGroupadress.StartsWith ("' ")) {  		localGroupadress = localGroupadress.Remove (0' 2);  	}  	IsLocationThere (poobj' localGroupadress' true);  }  else {  	ConsoleLog = "Row has less element than Required";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: if (row.Count >= 14) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "SPH Record No: " + count  	});  	string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  	while (localGroupadress.StartsWith ("' ")) {  		localGroupadress = localGroupadress.Remove (0' 2);  	}  	IsLocationThere (poobj' localGroupadress' true);  }  else {  	ConsoleLog = "Row has less element than Required";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: if (row.Count >= 14) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "SPH Record No: " + count  	});  	string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  	while (localGroupadress.StartsWith ("' ")) {  		localGroupadress = localGroupadress.Remove (0' 2);  	}  	IsLocationThere (poobj' localGroupadress' true);  }  else {  	ConsoleLog = "Row has less element than Required";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: if (row.Count >= 14) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "SPH Record No: " + count  	});  	string localGroupadress = row [8] + "' " + row [9] + "' " + row [10] + "' " + row [11] + "' " + row [12] + "' " + row [13].Replace ("' '"' "");  	while (localGroupadress.StartsWith ("' ")) {  		localGroupadress = localGroupadress.Remove (0' 2);  	}  	IsLocationThere (poobj' localGroupadress' true);  }  else {  	ConsoleLog = "Row has less element than Required";  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: while (localGroupadress.StartsWith ("' ")) {  	localGroupadress = localGroupadress.Remove (0' 2);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadSPHFile,The following statement contains a magic number: localGroupadress = localGroupadress.Remove (0' 2);  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: while (handler != null) {  	CsvRow row = new CsvRow ();  	handler.ReadRow (row);  	if (row.Count == 0) {  		break;  	}  	if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  		});  		continue;  	}  	else {  		OnInformationDownload (new EventArguments () {  			Name = "Trace: "'  			Time = DateTime.Now'  			Details = "Found Property " + poobj.PCD  		});  		if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  			Property p = new Property ();  			p.DateAdded = DateTime.Now;  			try {  				p.ORD = row [0].ToString ();  				ConsoleLog += "Added" + p.ORD + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.ORC = row [1].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SBN = row [2].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.BNA = row [3].ToString ();  				//      ConsoleLog += "Added" + p.BNA + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.POB = row [4].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NUM = row [5].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DST = row [6].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.STM = row [7].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DDL = row [8].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DLO = row [9].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PTN = row [10].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PCD = row [11].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTA = row [12].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTP = row [13].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CTT = row [14].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.SCD = row [15].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.CAT = row [16].ToString ();  				//             ConsoleLog += "Added" + p.CAT + "\n";  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.NDP = row [17].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.DPX = row [18].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.URN = row [19].ToString ();  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			try {  				p.PID = poobj.PID;  			}  			catch (Exception) {  				throw new Exception ("Can not Find");  			}  			p.SetAdressAutomatically ();  			log.Add (p);  			POlog.Add (p);  			//adressList.Add(p.PID' p);  			POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  		}  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (row [11].Equals (poobj.PCD.ToUpper ()) == false) {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  	});  	continue;  }  else {  	OnInformationDownload (new EventArguments () {  		Name = "Trace: "'  		Time = DateTime.Now'  		Details = "Found Property " + poobj.PCD  	});  	if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  		Property p = new Property ();  		p.DateAdded = DateTime.Now;  		try {  			p.ORD = row [0].ToString ();  			ConsoleLog += "Added" + p.ORD + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.ORC = row [1].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SBN = row [2].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.BNA = row [3].ToString ();  			//      ConsoleLog += "Added" + p.BNA + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.POB = row [4].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NUM = row [5].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DST = row [6].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.STM = row [7].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DDL = row [8].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DLO = row [9].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PTN = row [10].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PCD = row [11].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTA = row [12].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTP = row [13].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CTT = row [14].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.SCD = row [15].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.CAT = row [16].ToString ();  			//             ConsoleLog += "Added" + p.CAT + "\n";  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.NDP = row [17].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.DPX = row [18].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.URN = row [19].ToString ();  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		try {  			p.PID = poobj.PID;  		}  		catch (Exception) {  			throw new Exception ("Can not Find");  		}  		p.SetAdressAutomatically ();  		log.Add (p);  		POlog.Add (p);  		//adressList.Add(p.PID' p);  		POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  	}  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: OnInformationDownload (new EventArguments () {  	Name = "Trace: "'  	Time = DateTime.Now'  	Details = "Searching " + poobj.PCD.ToUpper () + "==" + row [11].ToUpper ()  });  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: if (String.IsNullOrWhiteSpace (row [11].ToString ()) == false) {  	Property p = new Property ();  	p.DateAdded = DateTime.Now;  	try {  		p.ORD = row [0].ToString ();  		ConsoleLog += "Added" + p.ORD + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.ORC = row [1].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SBN = row [2].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.BNA = row [3].ToString ();  		//      ConsoleLog += "Added" + p.BNA + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.POB = row [4].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NUM = row [5].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DST = row [6].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.STM = row [7].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DDL = row [8].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DLO = row [9].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PTN = row [10].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PCD = row [11].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTA = row [12].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTP = row [13].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CTT = row [14].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.SCD = row [15].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.CAT = row [16].ToString ();  		//             ConsoleLog += "Added" + p.CAT + "\n";  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.NDP = row [17].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.DPX = row [18].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.URN = row [19].ToString ();  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	try {  		p.PID = poobj.PID;  	}  	catch (Exception) {  		throw new Exception ("Can not Find");  	}  	p.SetAdressAutomatically ();  	log.Add (p);  	POlog.Add (p);  	//adressList.Add(p.PID' p);  	POlog.adressList [p.PID].AddPropertyKey (p.PCD + p.URN);  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.SBN = row [2].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.SBN = row [2].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.BNA = row [3].ToString ();  	//      ConsoleLog += "Added" + p.BNA + "\n";  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.BNA = row [3].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.POB = row [4].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.POB = row [4].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.NUM = row [5].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.NUM = row [5].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.DST = row [6].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.DST = row [6].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.STM = row [7].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.STM = row [7].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.DDL = row [8].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.DDL = row [8].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.DLO = row [9].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.DLO = row [9].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.PTN = row [10].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.PTN = row [10].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.PCD = row [11].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.PCD = row [11].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.CTA = row [12].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.CTA = row [12].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.CTP = row [13].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.CTP = row [13].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.CTT = row [14].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.CTT = row [14].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.SCD = row [15].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.SCD = row [15].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.CAT = row [16].ToString ();  	//             ConsoleLog += "Added" + p.CAT + "\n";  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.CAT = row [16].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.NDP = row [17].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.NDP = row [17].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.DPX = row [18].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.DPX = row [18].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: try {  	p.URN = row [19].ToString ();  }  catch (Exception) {  	throw new Exception ("Can not Find");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,ReadPAFFile,The following statement contains a magic number: p.URN = row [19].ToString ();  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: parameters [2] = "//";  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: try {  	parameters [3] = pcd.Remove (2' pcd.Length - 2).ToUpper () + "//";  	int length = pcd.Length;  	parameters [4] = pcd.Remove (length - 4' 4).ToUpper () + ".csv";  }  catch (Exception e) {  	throw new Exception ("Index in Generating FileName for PAF file\nDescription :\t" + e.Message + "\nReason:\tWrong Input Postal Code");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: try {  	parameters [3] = pcd.Remove (2' pcd.Length - 2).ToUpper () + "//";  	int length = pcd.Length;  	parameters [4] = pcd.Remove (length - 4' 4).ToUpper () + ".csv";  }  catch (Exception e) {  	throw new Exception ("Index in Generating FileName for PAF file\nDescription :\t" + e.Message + "\nReason:\tWrong Input Postal Code");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: try {  	parameters [3] = pcd.Remove (2' pcd.Length - 2).ToUpper () + "//";  	int length = pcd.Length;  	parameters [4] = pcd.Remove (length - 4' 4).ToUpper () + ".csv";  }  catch (Exception e) {  	throw new Exception ("Index in Generating FileName for PAF file\nDescription :\t" + e.Message + "\nReason:\tWrong Input Postal Code");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: try {  	parameters [3] = pcd.Remove (2' pcd.Length - 2).ToUpper () + "//";  	int length = pcd.Length;  	parameters [4] = pcd.Remove (length - 4' 4).ToUpper () + ".csv";  }  catch (Exception e) {  	throw new Exception ("Index in Generating FileName for PAF file\nDescription :\t" + e.Message + "\nReason:\tWrong Input Postal Code");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: try {  	parameters [3] = pcd.Remove (2' pcd.Length - 2).ToUpper () + "//";  	int length = pcd.Length;  	parameters [4] = pcd.Remove (length - 4' 4).ToUpper () + ".csv";  }  catch (Exception e) {  	throw new Exception ("Index in Generating FileName for PAF file\nDescription :\t" + e.Message + "\nReason:\tWrong Input Postal Code");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: try {  	parameters [3] = pcd.Remove (2' pcd.Length - 2).ToUpper () + "//";  	int length = pcd.Length;  	parameters [4] = pcd.Remove (length - 4' 4).ToUpper () + ".csv";  }  catch (Exception e) {  	throw new Exception ("Index in Generating FileName for PAF file\nDescription :\t" + e.Message + "\nReason:\tWrong Input Postal Code");  }  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: parameters [3] = pcd.Remove (2' pcd.Length - 2).ToUpper () + "//";  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: parameters [3] = pcd.Remove (2' pcd.Length - 2).ToUpper () + "//";  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: parameters [3] = pcd.Remove (2' pcd.Length - 2).ToUpper () + "//";  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: parameters [4] = pcd.Remove (length - 4' 4).ToUpper () + ".csv";  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: parameters [4] = pcd.Remove (length - 4' 4).ToUpper () + ".csv";  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: parameters [4] = pcd.Remove (length - 4' 4).ToUpper () + ".csv";  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: FileName = parameters [1] + parameters [2] + parameters [3] + parameters [3] + parameters [4];  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: FileName = parameters [1] + parameters [2] + parameters [3] + parameters [3] + parameters [4];  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: FileName = parameters [1] + parameters [2] + parameters [3] + parameters [3] + parameters [4];  
Magic Number,Imagenary,PropertyFinder,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\PropertyFinder.cs,GenerateFileName,The following statement contains a magic number: FileName = parameters [1] + parameters [2] + parameters [3] + parameters [3] + parameters [4];  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,CalculateAbsoluteCoordinateX,The following statement contains a magic number: return (x * 65536) / GetSystemMetrics (SystemMetric.SM_CXSCREEN);  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,CalculateAbsoluteCoordinateY,The following statement contains a magic number: return (y * 65536) / GetSystemMetrics (SystemMetric.SM_CYSCREEN);  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,InitializeWebBrowser,The following statement contains a magic number: browser.MinimumSize = new System.Drawing.Size (20' 20);  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,InitializeWebBrowser,The following statement contains a magic number: browser.MinimumSize = new System.Drawing.Size (20' 20);  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,InitializeWebBrowser,The following statement contains a magic number: browser.Size = new System.Drawing.Size (903' 403);  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,InitializeWebBrowser,The following statement contains a magic number: browser.Size = new System.Drawing.Size (903' 403);  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,Spin,The following statement contains a magic number: while (Second_tx_count < 10) {  	Application.DoEvents ();  }  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,f1_Load,The following statement contains a magic number: Spin (300);  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,f1_Load,The following statement contains a magic number: if (pageCounts >= 2) {  	if (ClickSVButton () == false) {  		if (ClickLabel () == true) {  			IsLabelClicked = true;  		}  		else {  			throw new Exception ("1...");  		}  	}  	else {  		throw new Exception ("2...");  	}  }  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,button1_Click,The following statement contains a magic number: f1.Size = new Size (903' 403);  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,button1_Click,The following statement contains a magic number: f1.Size = new Size (903' 403);  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,Body_MouseDown,The following statement contains a magic number: if (FormOpenedType == 1) {  	textBox1.Text = p1.X + "'" + p1.Y;  	XCoordinate = p1.X;  	YCoordinate = p1.Y;  }  else if (FormOpenedType == 2) {  	textBox5.Text = p1.X + "'" + p1.Y;  	HideX = p1.X;  	HideY = p1.Y;  }  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,Body_MouseDown,The following statement contains a magic number: if (FormOpenedType == 2) {  	textBox5.Text = p1.X + "'" + p1.Y;  	HideX = p1.X;  	HideY = p1.Y;  }  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,button5_Click,The following statement contains a magic number: FormOpenedType = 2;  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,button5_Click,The following statement contains a magic number: f1.Size = new Size (903' 403);  
Magic Number,Imagenary,SetSettings,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\SetSettings.cs,button5_Click,The following statement contains a magic number: f1.Size = new Size (903' 403);  
Magic Number,Imagenary,StartPage,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\StartPage.cs,DownloadAllImages,The following statement contains a magic number: foreach (var p in log.propertyList) {  	string adress = "https://www.google.com/maps/place/" + p.Value.Adress.Replace (" "' "+").Replace ("'"' "") + "/";  	string TempDirectory = data.ImageOutputDirectory + "//" + p.Value.Adress;  	if (Directory.Exists (TempDirectory)) {  		string[] names = Directory.GetFiles (p.Value.Adress);  		if (names.Count () >= 4) {  			continue;  		}  	}  	builder.Clear ();  	builder.Append (data.ImageOutputDirectory + "//" + p.Value.Adress + "//");  	SetRichboxText ("Downloading..." + p.Value.Adress);  	GSVTool tool = new GSVTool (adress' builder.ToString ()' startPage);  	//    this.Hide();  	tool.Activate ();  	tool.ShowDialog ();  	if (tool.IsStopped == true) {  		break;  	}  	if (tool.completed == true) {  		// tool.Close();  		continue;  	}  	//else  	//{  	//    tool.Activate();  	//    Application.DoEvents();  	//}  }  
Magic Number,Imagenary,StartPage,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\StartPage.cs,DownloadAllImages,The following statement contains a magic number: if (Directory.Exists (TempDirectory)) {  	string[] names = Directory.GetFiles (p.Value.Adress);  	if (names.Count () >= 4) {  		continue;  	}  }  
Magic Number,Imagenary,StartPage,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\StartPage.cs,DownloadAllImages,The following statement contains a magic number: if (names.Count () >= 4) {  	continue;  }  
Magic Number,Imagenary,StartPage,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\StartPage.cs,backgroundWorker2_DoWork,The following statement contains a magic number: icon.ShowBalloonTip (5 * 60 * 1000);  
Magic Number,Imagenary,StartPage,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\StartPage.cs,backgroundWorker2_DoWork,The following statement contains a magic number: icon.ShowBalloonTip (5 * 60 * 1000);  
Magic Number,Imagenary,StartPage,C:\repos\AbbasNaqvi_Projects\Imagenary\Imagenary\StartPage.cs,backgroundWorker2_DoWork,The following statement contains a magic number: icon.ShowBalloonTip (5 * 60 * 1000);  
