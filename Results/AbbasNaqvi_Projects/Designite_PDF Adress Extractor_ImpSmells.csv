Implementation smell,Namespace,Class,File,Method,Description
Long Method,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The method has 150 lines of code.
Complex Method,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,Cyclomatic complexity of the method is 9
Complex Method,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,Cyclomatic complexity of the method is 8
Complex Method,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,SearchUsingTemplate,Cyclomatic complexity of the method is 8
Complex Method,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,Cyclomatic complexity of the method is 24
Complex Method,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ProcessElements,Cyclomatic complexity of the method is 10
Complex Method,ItextSharp,SerializationHandler,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\Handler\SerializationHandler.cs,DecryptFullAddress,Cyclomatic complexity of the method is 8
Complex Method,ItextSharp,SerializationHandler,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\Handler\SerializationHandler.cs,DeserializeAddressesLog,Cyclomatic complexity of the method is 8
Long Parameter List,ItextSharp,PDFFuctions,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PDFFuctions.cs,getParagraphByCoOrdinate,The method has 7 parameters.
Long Parameter List,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadTextFromCoordinates,The method has 6 parameters.
Long Statement,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button5_Click,The length of the statement  "	//string Document = getParagraphByCoOrdinate(textBox1.Text' 1' Int32.Parse(textBox2.Text)' Int32.Parse(textBox3.Text)' Int32.Parse(textBox4.Text)' Int32.Parse(textBox5.Text)); " is 175.
Long Statement,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button5_Click,The length of the statement  "	//<span style="font-family:ABCDEE+Cambria;font-size:8.948792">House # 1711/A Street # 33/4 Allama Iqbal Colony Rawalpindi </span> " is 129.
Long Statement,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The length of the statement  "	PdfReader reader = new PdfReader (System.IO.Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Desktop)' textBox1.Text)); " is 137.
Long Statement,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The length of the statement  "	string XmlDocument = iTextSharp.text.pdf.parser.PdfTextExtractor.GetTextFromPage (reader' Int32.Parse (numericUpDown1.Value.ToString ())' S); " is 141.
Long Statement,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The length of the statement  "			MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)"); " is 128.
Long Statement,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindAdress,The length of the statement  "	PdfReader reader = new PdfReader (System.IO.Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Desktop)' textBox1.Text)); " is 137.
Long Statement,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindAdress,The length of the statement  "	string XmlDocument = iTextSharp.text.pdf.parser.PdfTextExtractor.GetTextFromPage (reader' Int32.Parse (numericUpDown1.Value.ToString ())' S); " is 141.
Long Statement,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,IsFontFound,The length of the statement  "	PdfReader reader = new PdfReader (System.IO.Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Desktop)' textBox1.Text)); " is 137.
Long Statement,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The length of the statement  "	if (Tempadress != null && Tempadress.URX != 0f && Tempadress.URY != 0f && Tempadress.LLX != 0f && Tempadress.LLY != 0f) { " is 121.
Long Statement,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button2_Click_1,The length of the statement  "			string text = functions.getParagraphByCoOrdinate (textBox1.Text' (int)numericUpDown1.Value' (int)numericUpDown4.Value' (int)numericUpDown5.Value' (int)numericUpDown2.Value' (int)numericUpDown3.Value' true); " is 206.
Long Statement,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,SearchUsingTemplate,The length of the statement  "		string Document = fuctions.getParagraphByCoOrdinate (text' Tempadressobj.PageNo' (int)LLX' (int)LLY' (int)URX' (int)URY' true); " is 127.
Long Statement,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,SearchUsingTemplate,The length of the statement  "			if (x.Address.Equals (Document) && x.FontSize == Tempadressobj.FontSize && x.FontFamily.Equals (Tempadressobj.FontFamily) == true) { " is 132.
Long Statement,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,SearchUsingTemplate,The length of the statement  "				richTextBox1.Text += "Adress Found  =" + x.Address + "   " + Tempadressobj.URX + "    " + x.URX + "  " + Tempadressobj.URY + "\n"; " is 130.
Long Statement,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,FindFont,The length of the statement  "	PdfReader reader = new PdfReader (System.IO.Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Desktop)' text)); " is 128.
Long Statement,ItextSharp,PDFFuctions,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PDFFuctions.cs,getParagraphByCoOrdinate,The length of the statement  "		iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle (cordinate1' 1000 - coordinate2' coordinate3' 1000 - coordinate4); " is 129.
Long Statement,ItextSharp,PDFFuctions,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PDFFuctions.cs,getParagraphByCoOrdinate,The length of the statement  "		ITextExtractionStrategy textExtractionStrategy = new FilteredTextRenderListener (new LocationTextExtractionStrategy ()' renderFilter); " is 134.
Long Statement,ItextSharp,PDFFuctions,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PDFFuctions.cs,getParagraphByCoOrdinate,The length of the statement  "		ITextExtractionStrategy textExtractionStrategy = new FilteredTextRenderListener (new LocationTextExtractionStrategy ()' renderFilter); " is 134.
Long Statement,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The length of the statement  "			String text = txt.GetAsXML (TextExtractor.XMLOutputFlags.e_words_as_elements | TextExtractor.XMLOutputFlags.e_output_bbox | TextExtractor.XMLOutputFlags.e_output_style_info); " is 174.
Long Statement,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The length of the statement  "		// Note: Calling Dispose() on TextExtractor when it is not anymore in use can result in increased performance and lower memory consumption. " is 139.
Long Statement,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,PrintStyle,The length of the statement  "	Console.Write (" style=\"font-family: {0}; font-size: {1}; {2}\""' s.GetFontName ()' s.GetFontSize ()' (s.IsSerif () ? " sans-serif; " : " ")); " is 143.
Long Statement,ItextSharp,TestingForm,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\TestingForm.cs,button1_Click,The length of the statement  "	tron.ReadTextFromCoordinates (textBox1.Text' 1' int.Parse (textBoxURX.Text)' int.Parse (textBoxURY.Text)' int.Parse (textBoxLLX.Text)' int.Parse (textBoxLLY.Text)); " is 164.
Long Statement,ItextSharp,TextWithFontExtractionStategy,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\TextWithFontExtractionStategy.cs,RenderText,The length of the statement  "	iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle (curBaseline [Vector.I1]' curBaseline [Vector.I2]' topRight [Vector.I1]' topRight [Vector.I2]); " is 158.
Long Statement,ItextSharp,TextWithFontExtractionStategy,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\TextWithFontExtractionStategy.cs,RenderText,The length of the statement  "	if ((this.lastBaseLine == null) || (curBaseline [Vector.I2] != lastBaseLine [Vector.I2]) || (curFontSize != lastFontSize) || (curFont != lastFont)) { " is 149.
Long Statement,ItextSharp,TextWithFontExtractionStategy,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\TextWithFontExtractionStategy.cs,RenderText,The length of the statement  "		this.result.AppendFormat ("<span style=\"font-family:{0};font-size:{1};z={2};color={3};coordinates:{4}'{5}'{6}'{7};\">"' curFont' curFontSize' Bold' Color' URX' URY' LLX' LLY); " is 176.
Complex Conditional,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The conditional expression  "Tempadress != null && Tempadress.URX != 0f && Tempadress.URY != 0f && Tempadress.LLX != 0f && Tempadress.LLY != 0f"  is complex.
Complex Conditional,ItextSharp,TextWithFontExtractionStategy,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\TextWithFontExtractionStategy.cs,RenderText,The conditional expression  "(this.lastBaseLine == null) || (curBaseline [Vector.I2] != lastBaseLine [Vector.I2]) || (curFontSize != lastFontSize) || (curFont != lastFont)"  is complex.
Empty Catch Block,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button1_Click,The method has an empty catch block.
Empty Catch Block,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The method has an empty catch block.
Empty Catch Block,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The method has an empty catch block.
Empty Catch Block,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The method has an empty catch block.
Empty Catch Block,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The method has an empty catch block.
Empty Catch Block,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,button1_Click,The method has an empty catch block.
Empty Catch Block,ItextSharp,TextWithFontExtractionStategy,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\TextWithFontExtractionStategy.cs,RenderText,The method has an empty catch block.
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress = new ItextSharp.SinglePdfLine ();  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	Tempadress.DocumentType = textBoxDocumentType.Text;  	Tempadress.PageNo = (int)numericUpDown1.Value;  	if (i.Selected == true) {  		Tempadress.LLX = (int)numericUpDown4.Value;  		Tempadress.LLY = (int)numericUpDown5.Value;  		Tempadress.URX = (int)numericUpDown2.Value;  		Tempadress.URY = (int)numericUpDown3.Value;  	}  	else {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	theme.AdressLines.Add (Tempadress);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress = new ItextSharp.SinglePdfLine ();  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	Tempadress.DocumentType = textBoxDocumentType.Text;  	Tempadress.PageNo = (int)numericUpDown1.Value;  	if (i.Selected == true) {  		Tempadress.LLX = (int)numericUpDown4.Value;  		Tempadress.LLY = (int)numericUpDown5.Value;  		Tempadress.URX = (int)numericUpDown2.Value;  		Tempadress.URY = (int)numericUpDown3.Value;  	}  	else {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	theme.AdressLines.Add (Tempadress);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress = new ItextSharp.SinglePdfLine ();  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	Tempadress.DocumentType = textBoxDocumentType.Text;  	Tempadress.PageNo = (int)numericUpDown1.Value;  	if (i.Selected == true) {  		Tempadress.LLX = (int)numericUpDown4.Value;  		Tempadress.LLY = (int)numericUpDown5.Value;  		Tempadress.URX = (int)numericUpDown2.Value;  		Tempadress.URY = (int)numericUpDown3.Value;  	}  	else {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	theme.AdressLines.Add (Tempadress);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress = new ItextSharp.SinglePdfLine ();  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	Tempadress.DocumentType = textBoxDocumentType.Text;  	Tempadress.PageNo = (int)numericUpDown1.Value;  	if (i.Selected == true) {  		Tempadress.LLX = (int)numericUpDown4.Value;  		Tempadress.LLY = (int)numericUpDown5.Value;  		Tempadress.URX = (int)numericUpDown2.Value;  		Tempadress.URY = (int)numericUpDown3.Value;  	}  	else {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	theme.AdressLines.Add (Tempadress);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress = new ItextSharp.SinglePdfLine ();  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	Tempadress.DocumentType = textBoxDocumentType.Text;  	Tempadress.PageNo = (int)numericUpDown1.Value;  	if (i.Selected == true) {  		Tempadress.LLX = (int)numericUpDown4.Value;  		Tempadress.LLY = (int)numericUpDown5.Value;  		Tempadress.URX = (int)numericUpDown2.Value;  		Tempadress.URY = (int)numericUpDown3.Value;  	}  	else {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	theme.AdressLines.Add (Tempadress);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress = new ItextSharp.SinglePdfLine ();  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	Tempadress.DocumentType = textBoxDocumentType.Text;  	Tempadress.PageNo = (int)numericUpDown1.Value;  	if (i.Selected == true) {  		Tempadress.LLX = (int)numericUpDown4.Value;  		Tempadress.LLY = (int)numericUpDown5.Value;  		Tempadress.URX = (int)numericUpDown2.Value;  		Tempadress.URY = (int)numericUpDown3.Value;  	}  	else {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	theme.AdressLines.Add (Tempadress);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress = new ItextSharp.SinglePdfLine ();  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	Tempadress.DocumentType = textBoxDocumentType.Text;  	Tempadress.PageNo = (int)numericUpDown1.Value;  	if (i.Selected == true) {  		Tempadress.LLX = (int)numericUpDown4.Value;  		Tempadress.LLY = (int)numericUpDown5.Value;  		Tempadress.URX = (int)numericUpDown2.Value;  		Tempadress.URY = (int)numericUpDown3.Value;  	}  	else {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	theme.AdressLines.Add (Tempadress);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress = new ItextSharp.SinglePdfLine ();  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	Tempadress.DocumentType = textBoxDocumentType.Text;  	Tempadress.PageNo = (int)numericUpDown1.Value;  	if (i.Selected == true) {  		Tempadress.LLX = (int)numericUpDown4.Value;  		Tempadress.LLY = (int)numericUpDown5.Value;  		Tempadress.URX = (int)numericUpDown2.Value;  		Tempadress.URY = (int)numericUpDown3.Value;  	}  	else {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	theme.AdressLines.Add (Tempadress);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: Tempadress.FontFamily = i.SubItems [2].Text;  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: Tempadress.Color = i.SubItems [5].Text;  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: if (i.Selected == true) {  	Tempadress.LLX = (int)numericUpDown4.Value;  	Tempadress.LLY = (int)numericUpDown5.Value;  	Tempadress.URX = (int)numericUpDown2.Value;  	Tempadress.URY = (int)numericUpDown3.Value;  }  else {  	Tempadress.URX = float.Parse (i.SubItems [6].Text);  	Tempadress.URY = float.Parse (i.SubItems [7].Text);  	Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	Tempadress.LLY = float.Parse (i.SubItems [9].Text);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: if (i.Selected == true) {  	Tempadress.LLX = (int)numericUpDown4.Value;  	Tempadress.LLY = (int)numericUpDown5.Value;  	Tempadress.URX = (int)numericUpDown2.Value;  	Tempadress.URY = (int)numericUpDown3.Value;  }  else {  	Tempadress.URX = float.Parse (i.SubItems [6].Text);  	Tempadress.URY = float.Parse (i.SubItems [7].Text);  	Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	Tempadress.LLY = float.Parse (i.SubItems [9].Text);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: if (i.Selected == true) {  	Tempadress.LLX = (int)numericUpDown4.Value;  	Tempadress.LLY = (int)numericUpDown5.Value;  	Tempadress.URX = (int)numericUpDown2.Value;  	Tempadress.URY = (int)numericUpDown3.Value;  }  else {  	Tempadress.URX = float.Parse (i.SubItems [6].Text);  	Tempadress.URY = float.Parse (i.SubItems [7].Text);  	Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	Tempadress.LLY = float.Parse (i.SubItems [9].Text);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: if (i.Selected == true) {  	Tempadress.LLX = (int)numericUpDown4.Value;  	Tempadress.LLY = (int)numericUpDown5.Value;  	Tempadress.URX = (int)numericUpDown2.Value;  	Tempadress.URY = (int)numericUpDown3.Value;  }  else {  	Tempadress.URX = float.Parse (i.SubItems [6].Text);  	Tempadress.URY = float.Parse (i.SubItems [7].Text);  	Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	Tempadress.LLY = float.Parse (i.SubItems [9].Text);  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: Tempadress.URX = float.Parse (i.SubItems [6].Text);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: Tempadress.URY = float.Parse (i.SubItems [7].Text);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: Tempadress.LLX = float.Parse (i.SubItems [8].Text);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,button4_Click,The following statement contains a magic number: Tempadress.LLY = float.Parse (i.SubItems [9].Text);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (var extractedtext in ExtractedTexts) {  	try {  		string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  		//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  		MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  		foreach (Match x in collection) {  			SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  			string data = x.Groups ["data"].Value;  			if (data.Contains ("NOTBOLD")) {  				adobj.Bold = false;  				data = data.Replace ("NOTBOLD"' "");  			}  			else {  				adobj.Bold = true;  				data = data.Replace ("BOLD"' "");  			}  			adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  			adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  			string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  			string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  			string[] splits = coordinates.Split (''');  			adobj.URX = float.Parse (splits [0]);  			adobj.URY = float.Parse (splits [1]);  			adobj.LLX = float.Parse (splits [2]);  			adobj.LLY = float.Parse (splits [3]);  			adobj.FontSize = float.Parse (FontSize);  			ListViewItem item = new ListViewItem ();  			item.SubItems.Add ("Address");  			item.SubItems.Add ("Size");  			item.SubItems.Add ("Font");  			item.SubItems.Add ("Bold");  			item.SubItems.Add ("Italic");  			item.SubItems.Add ("Color");  			item.SubItems.Add ("URX");  			item.SubItems.Add ("URY");  			item.SubItems.Add ("LLX");  			item.SubItems.Add ("LLY");  			item.SubItems [0].Text = extractedtext;  			item.SubItems [2].Text = adobj.FontFamily;  			item.SubItems [1].Text = adobj.FontSize.ToString ();  			item.SubItems [3].Text = adobj.Bold.ToString ();  			item.SubItems [4].Text = adobj.Italic.ToString ();  			item.SubItems [5].Text = adobj.Color.ToString ();  			Tempadress = new SinglePdfLine ();  			try {  				numericUpDown2.Value = (int)adobj.URX;  				item.SubItems [6].Text = adobj.URX.ToString ();  				Tempadress.URX = adobj.URX;  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown3.Value = (int)adobj.URY;  				Tempadress.URY = adobj.URY;  				item.SubItems [7].Text = adobj.URY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown4.Value = (int)adobj.LLX;  				Tempadress.LLX = adobj.LLX;  				item.SubItems [8].Text = adobj.LLX.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown5.Value = (int)adobj.LLY;  				Tempadress.LLY = adobj.LLY;  				item.SubItems [9].Text = adobj.LLY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			adobj.DocumentType = textBoxDocumentType.Text;  			listView1.Items.Add (item);  			listView1.Update ();  			Numeric_KeyPad_Lock = false;  			radioButton3.Checked = true;  		}  	}  	catch (ArgumentException) {  		MessageBox.Show ("Input String contains invalid characters");  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (var extractedtext in ExtractedTexts) {  	try {  		string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  		//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  		MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  		foreach (Match x in collection) {  			SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  			string data = x.Groups ["data"].Value;  			if (data.Contains ("NOTBOLD")) {  				adobj.Bold = false;  				data = data.Replace ("NOTBOLD"' "");  			}  			else {  				adobj.Bold = true;  				data = data.Replace ("BOLD"' "");  			}  			adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  			adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  			string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  			string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  			string[] splits = coordinates.Split (''');  			adobj.URX = float.Parse (splits [0]);  			adobj.URY = float.Parse (splits [1]);  			adobj.LLX = float.Parse (splits [2]);  			adobj.LLY = float.Parse (splits [3]);  			adobj.FontSize = float.Parse (FontSize);  			ListViewItem item = new ListViewItem ();  			item.SubItems.Add ("Address");  			item.SubItems.Add ("Size");  			item.SubItems.Add ("Font");  			item.SubItems.Add ("Bold");  			item.SubItems.Add ("Italic");  			item.SubItems.Add ("Color");  			item.SubItems.Add ("URX");  			item.SubItems.Add ("URY");  			item.SubItems.Add ("LLX");  			item.SubItems.Add ("LLY");  			item.SubItems [0].Text = extractedtext;  			item.SubItems [2].Text = adobj.FontFamily;  			item.SubItems [1].Text = adobj.FontSize.ToString ();  			item.SubItems [3].Text = adobj.Bold.ToString ();  			item.SubItems [4].Text = adobj.Italic.ToString ();  			item.SubItems [5].Text = adobj.Color.ToString ();  			Tempadress = new SinglePdfLine ();  			try {  				numericUpDown2.Value = (int)adobj.URX;  				item.SubItems [6].Text = adobj.URX.ToString ();  				Tempadress.URX = adobj.URX;  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown3.Value = (int)adobj.URY;  				Tempadress.URY = adobj.URY;  				item.SubItems [7].Text = adobj.URY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown4.Value = (int)adobj.LLX;  				Tempadress.LLX = adobj.LLX;  				item.SubItems [8].Text = adobj.LLX.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown5.Value = (int)adobj.LLY;  				Tempadress.LLY = adobj.LLY;  				item.SubItems [9].Text = adobj.LLY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			adobj.DocumentType = textBoxDocumentType.Text;  			listView1.Items.Add (item);  			listView1.Update ();  			Numeric_KeyPad_Lock = false;  			radioButton3.Checked = true;  		}  	}  	catch (ArgumentException) {  		MessageBox.Show ("Input String contains invalid characters");  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (var extractedtext in ExtractedTexts) {  	try {  		string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  		//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  		MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  		foreach (Match x in collection) {  			SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  			string data = x.Groups ["data"].Value;  			if (data.Contains ("NOTBOLD")) {  				adobj.Bold = false;  				data = data.Replace ("NOTBOLD"' "");  			}  			else {  				adobj.Bold = true;  				data = data.Replace ("BOLD"' "");  			}  			adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  			adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  			string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  			string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  			string[] splits = coordinates.Split (''');  			adobj.URX = float.Parse (splits [0]);  			adobj.URY = float.Parse (splits [1]);  			adobj.LLX = float.Parse (splits [2]);  			adobj.LLY = float.Parse (splits [3]);  			adobj.FontSize = float.Parse (FontSize);  			ListViewItem item = new ListViewItem ();  			item.SubItems.Add ("Address");  			item.SubItems.Add ("Size");  			item.SubItems.Add ("Font");  			item.SubItems.Add ("Bold");  			item.SubItems.Add ("Italic");  			item.SubItems.Add ("Color");  			item.SubItems.Add ("URX");  			item.SubItems.Add ("URY");  			item.SubItems.Add ("LLX");  			item.SubItems.Add ("LLY");  			item.SubItems [0].Text = extractedtext;  			item.SubItems [2].Text = adobj.FontFamily;  			item.SubItems [1].Text = adobj.FontSize.ToString ();  			item.SubItems [3].Text = adobj.Bold.ToString ();  			item.SubItems [4].Text = adobj.Italic.ToString ();  			item.SubItems [5].Text = adobj.Color.ToString ();  			Tempadress = new SinglePdfLine ();  			try {  				numericUpDown2.Value = (int)adobj.URX;  				item.SubItems [6].Text = adobj.URX.ToString ();  				Tempadress.URX = adobj.URX;  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown3.Value = (int)adobj.URY;  				Tempadress.URY = adobj.URY;  				item.SubItems [7].Text = adobj.URY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown4.Value = (int)adobj.LLX;  				Tempadress.LLX = adobj.LLX;  				item.SubItems [8].Text = adobj.LLX.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown5.Value = (int)adobj.LLY;  				Tempadress.LLY = adobj.LLY;  				item.SubItems [9].Text = adobj.LLY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			adobj.DocumentType = textBoxDocumentType.Text;  			listView1.Items.Add (item);  			listView1.Update ();  			Numeric_KeyPad_Lock = false;  			radioButton3.Checked = true;  		}  	}  	catch (ArgumentException) {  		MessageBox.Show ("Input String contains invalid characters");  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (var extractedtext in ExtractedTexts) {  	try {  		string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  		//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  		MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  		foreach (Match x in collection) {  			SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  			string data = x.Groups ["data"].Value;  			if (data.Contains ("NOTBOLD")) {  				adobj.Bold = false;  				data = data.Replace ("NOTBOLD"' "");  			}  			else {  				adobj.Bold = true;  				data = data.Replace ("BOLD"' "");  			}  			adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  			adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  			string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  			string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  			string[] splits = coordinates.Split (''');  			adobj.URX = float.Parse (splits [0]);  			adobj.URY = float.Parse (splits [1]);  			adobj.LLX = float.Parse (splits [2]);  			adobj.LLY = float.Parse (splits [3]);  			adobj.FontSize = float.Parse (FontSize);  			ListViewItem item = new ListViewItem ();  			item.SubItems.Add ("Address");  			item.SubItems.Add ("Size");  			item.SubItems.Add ("Font");  			item.SubItems.Add ("Bold");  			item.SubItems.Add ("Italic");  			item.SubItems.Add ("Color");  			item.SubItems.Add ("URX");  			item.SubItems.Add ("URY");  			item.SubItems.Add ("LLX");  			item.SubItems.Add ("LLY");  			item.SubItems [0].Text = extractedtext;  			item.SubItems [2].Text = adobj.FontFamily;  			item.SubItems [1].Text = adobj.FontSize.ToString ();  			item.SubItems [3].Text = adobj.Bold.ToString ();  			item.SubItems [4].Text = adobj.Italic.ToString ();  			item.SubItems [5].Text = adobj.Color.ToString ();  			Tempadress = new SinglePdfLine ();  			try {  				numericUpDown2.Value = (int)adobj.URX;  				item.SubItems [6].Text = adobj.URX.ToString ();  				Tempadress.URX = adobj.URX;  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown3.Value = (int)adobj.URY;  				Tempadress.URY = adobj.URY;  				item.SubItems [7].Text = adobj.URY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown4.Value = (int)adobj.LLX;  				Tempadress.LLX = adobj.LLX;  				item.SubItems [8].Text = adobj.LLX.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown5.Value = (int)adobj.LLY;  				Tempadress.LLY = adobj.LLY;  				item.SubItems [9].Text = adobj.LLY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			adobj.DocumentType = textBoxDocumentType.Text;  			listView1.Items.Add (item);  			listView1.Update ();  			Numeric_KeyPad_Lock = false;  			radioButton3.Checked = true;  		}  	}  	catch (ArgumentException) {  		MessageBox.Show ("Input String contains invalid characters");  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (var extractedtext in ExtractedTexts) {  	try {  		string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  		//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  		MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  		foreach (Match x in collection) {  			SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  			string data = x.Groups ["data"].Value;  			if (data.Contains ("NOTBOLD")) {  				adobj.Bold = false;  				data = data.Replace ("NOTBOLD"' "");  			}  			else {  				adobj.Bold = true;  				data = data.Replace ("BOLD"' "");  			}  			adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  			adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  			string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  			string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  			string[] splits = coordinates.Split (''');  			adobj.URX = float.Parse (splits [0]);  			adobj.URY = float.Parse (splits [1]);  			adobj.LLX = float.Parse (splits [2]);  			adobj.LLY = float.Parse (splits [3]);  			adobj.FontSize = float.Parse (FontSize);  			ListViewItem item = new ListViewItem ();  			item.SubItems.Add ("Address");  			item.SubItems.Add ("Size");  			item.SubItems.Add ("Font");  			item.SubItems.Add ("Bold");  			item.SubItems.Add ("Italic");  			item.SubItems.Add ("Color");  			item.SubItems.Add ("URX");  			item.SubItems.Add ("URY");  			item.SubItems.Add ("LLX");  			item.SubItems.Add ("LLY");  			item.SubItems [0].Text = extractedtext;  			item.SubItems [2].Text = adobj.FontFamily;  			item.SubItems [1].Text = adobj.FontSize.ToString ();  			item.SubItems [3].Text = adobj.Bold.ToString ();  			item.SubItems [4].Text = adobj.Italic.ToString ();  			item.SubItems [5].Text = adobj.Color.ToString ();  			Tempadress = new SinglePdfLine ();  			try {  				numericUpDown2.Value = (int)adobj.URX;  				item.SubItems [6].Text = adobj.URX.ToString ();  				Tempadress.URX = adobj.URX;  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown3.Value = (int)adobj.URY;  				Tempadress.URY = adobj.URY;  				item.SubItems [7].Text = adobj.URY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown4.Value = (int)adobj.LLX;  				Tempadress.LLX = adobj.LLX;  				item.SubItems [8].Text = adobj.LLX.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown5.Value = (int)adobj.LLY;  				Tempadress.LLY = adobj.LLY;  				item.SubItems [9].Text = adobj.LLY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			adobj.DocumentType = textBoxDocumentType.Text;  			listView1.Items.Add (item);  			listView1.Update ();  			Numeric_KeyPad_Lock = false;  			radioButton3.Checked = true;  		}  	}  	catch (ArgumentException) {  		MessageBox.Show ("Input String contains invalid characters");  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (var extractedtext in ExtractedTexts) {  	try {  		string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  		//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  		MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  		foreach (Match x in collection) {  			SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  			string data = x.Groups ["data"].Value;  			if (data.Contains ("NOTBOLD")) {  				adobj.Bold = false;  				data = data.Replace ("NOTBOLD"' "");  			}  			else {  				adobj.Bold = true;  				data = data.Replace ("BOLD"' "");  			}  			adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  			adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  			string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  			string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  			string[] splits = coordinates.Split (''');  			adobj.URX = float.Parse (splits [0]);  			adobj.URY = float.Parse (splits [1]);  			adobj.LLX = float.Parse (splits [2]);  			adobj.LLY = float.Parse (splits [3]);  			adobj.FontSize = float.Parse (FontSize);  			ListViewItem item = new ListViewItem ();  			item.SubItems.Add ("Address");  			item.SubItems.Add ("Size");  			item.SubItems.Add ("Font");  			item.SubItems.Add ("Bold");  			item.SubItems.Add ("Italic");  			item.SubItems.Add ("Color");  			item.SubItems.Add ("URX");  			item.SubItems.Add ("URY");  			item.SubItems.Add ("LLX");  			item.SubItems.Add ("LLY");  			item.SubItems [0].Text = extractedtext;  			item.SubItems [2].Text = adobj.FontFamily;  			item.SubItems [1].Text = adobj.FontSize.ToString ();  			item.SubItems [3].Text = adobj.Bold.ToString ();  			item.SubItems [4].Text = adobj.Italic.ToString ();  			item.SubItems [5].Text = adobj.Color.ToString ();  			Tempadress = new SinglePdfLine ();  			try {  				numericUpDown2.Value = (int)adobj.URX;  				item.SubItems [6].Text = adobj.URX.ToString ();  				Tempadress.URX = adobj.URX;  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown3.Value = (int)adobj.URY;  				Tempadress.URY = adobj.URY;  				item.SubItems [7].Text = adobj.URY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown4.Value = (int)adobj.LLX;  				Tempadress.LLX = adobj.LLX;  				item.SubItems [8].Text = adobj.LLX.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown5.Value = (int)adobj.LLY;  				Tempadress.LLY = adobj.LLY;  				item.SubItems [9].Text = adobj.LLY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			adobj.DocumentType = textBoxDocumentType.Text;  			listView1.Items.Add (item);  			listView1.Update ();  			Numeric_KeyPad_Lock = false;  			radioButton3.Checked = true;  		}  	}  	catch (ArgumentException) {  		MessageBox.Show ("Input String contains invalid characters");  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (var extractedtext in ExtractedTexts) {  	try {  		string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  		//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  		MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  		foreach (Match x in collection) {  			SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  			string data = x.Groups ["data"].Value;  			if (data.Contains ("NOTBOLD")) {  				adobj.Bold = false;  				data = data.Replace ("NOTBOLD"' "");  			}  			else {  				adobj.Bold = true;  				data = data.Replace ("BOLD"' "");  			}  			adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  			adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  			string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  			string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  			string[] splits = coordinates.Split (''');  			adobj.URX = float.Parse (splits [0]);  			adobj.URY = float.Parse (splits [1]);  			adobj.LLX = float.Parse (splits [2]);  			adobj.LLY = float.Parse (splits [3]);  			adobj.FontSize = float.Parse (FontSize);  			ListViewItem item = new ListViewItem ();  			item.SubItems.Add ("Address");  			item.SubItems.Add ("Size");  			item.SubItems.Add ("Font");  			item.SubItems.Add ("Bold");  			item.SubItems.Add ("Italic");  			item.SubItems.Add ("Color");  			item.SubItems.Add ("URX");  			item.SubItems.Add ("URY");  			item.SubItems.Add ("LLX");  			item.SubItems.Add ("LLY");  			item.SubItems [0].Text = extractedtext;  			item.SubItems [2].Text = adobj.FontFamily;  			item.SubItems [1].Text = adobj.FontSize.ToString ();  			item.SubItems [3].Text = adobj.Bold.ToString ();  			item.SubItems [4].Text = adobj.Italic.ToString ();  			item.SubItems [5].Text = adobj.Color.ToString ();  			Tempadress = new SinglePdfLine ();  			try {  				numericUpDown2.Value = (int)adobj.URX;  				item.SubItems [6].Text = adobj.URX.ToString ();  				Tempadress.URX = adobj.URX;  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown3.Value = (int)adobj.URY;  				Tempadress.URY = adobj.URY;  				item.SubItems [7].Text = adobj.URY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown4.Value = (int)adobj.LLX;  				Tempadress.LLX = adobj.LLX;  				item.SubItems [8].Text = adobj.LLX.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown5.Value = (int)adobj.LLY;  				Tempadress.LLY = adobj.LLY;  				item.SubItems [9].Text = adobj.LLY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			adobj.DocumentType = textBoxDocumentType.Text;  			listView1.Items.Add (item);  			listView1.Update ();  			Numeric_KeyPad_Lock = false;  			radioButton3.Checked = true;  		}  	}  	catch (ArgumentException) {  		MessageBox.Show ("Input String contains invalid characters");  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (var extractedtext in ExtractedTexts) {  	try {  		string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  		//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  		MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  		foreach (Match x in collection) {  			SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  			string data = x.Groups ["data"].Value;  			if (data.Contains ("NOTBOLD")) {  				adobj.Bold = false;  				data = data.Replace ("NOTBOLD"' "");  			}  			else {  				adobj.Bold = true;  				data = data.Replace ("BOLD"' "");  			}  			adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  			adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  			string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  			string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  			string[] splits = coordinates.Split (''');  			adobj.URX = float.Parse (splits [0]);  			adobj.URY = float.Parse (splits [1]);  			adobj.LLX = float.Parse (splits [2]);  			adobj.LLY = float.Parse (splits [3]);  			adobj.FontSize = float.Parse (FontSize);  			ListViewItem item = new ListViewItem ();  			item.SubItems.Add ("Address");  			item.SubItems.Add ("Size");  			item.SubItems.Add ("Font");  			item.SubItems.Add ("Bold");  			item.SubItems.Add ("Italic");  			item.SubItems.Add ("Color");  			item.SubItems.Add ("URX");  			item.SubItems.Add ("URY");  			item.SubItems.Add ("LLX");  			item.SubItems.Add ("LLY");  			item.SubItems [0].Text = extractedtext;  			item.SubItems [2].Text = adobj.FontFamily;  			item.SubItems [1].Text = adobj.FontSize.ToString ();  			item.SubItems [3].Text = adobj.Bold.ToString ();  			item.SubItems [4].Text = adobj.Italic.ToString ();  			item.SubItems [5].Text = adobj.Color.ToString ();  			Tempadress = new SinglePdfLine ();  			try {  				numericUpDown2.Value = (int)adobj.URX;  				item.SubItems [6].Text = adobj.URX.ToString ();  				Tempadress.URX = adobj.URX;  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown3.Value = (int)adobj.URY;  				Tempadress.URY = adobj.URY;  				item.SubItems [7].Text = adobj.URY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown4.Value = (int)adobj.LLX;  				Tempadress.LLX = adobj.LLX;  				item.SubItems [8].Text = adobj.LLX.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown5.Value = (int)adobj.LLY;  				Tempadress.LLY = adobj.LLY;  				item.SubItems [9].Text = adobj.LLY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			adobj.DocumentType = textBoxDocumentType.Text;  			listView1.Items.Add (item);  			listView1.Update ();  			Numeric_KeyPad_Lock = false;  			radioButton3.Checked = true;  		}  	}  	catch (ArgumentException) {  		MessageBox.Show ("Input String contains invalid characters");  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (var extractedtext in ExtractedTexts) {  	try {  		string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  		//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  		MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  		foreach (Match x in collection) {  			SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  			string data = x.Groups ["data"].Value;  			if (data.Contains ("NOTBOLD")) {  				adobj.Bold = false;  				data = data.Replace ("NOTBOLD"' "");  			}  			else {  				adobj.Bold = true;  				data = data.Replace ("BOLD"' "");  			}  			adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  			adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  			string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  			string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  			string[] splits = coordinates.Split (''');  			adobj.URX = float.Parse (splits [0]);  			adobj.URY = float.Parse (splits [1]);  			adobj.LLX = float.Parse (splits [2]);  			adobj.LLY = float.Parse (splits [3]);  			adobj.FontSize = float.Parse (FontSize);  			ListViewItem item = new ListViewItem ();  			item.SubItems.Add ("Address");  			item.SubItems.Add ("Size");  			item.SubItems.Add ("Font");  			item.SubItems.Add ("Bold");  			item.SubItems.Add ("Italic");  			item.SubItems.Add ("Color");  			item.SubItems.Add ("URX");  			item.SubItems.Add ("URY");  			item.SubItems.Add ("LLX");  			item.SubItems.Add ("LLY");  			item.SubItems [0].Text = extractedtext;  			item.SubItems [2].Text = adobj.FontFamily;  			item.SubItems [1].Text = adobj.FontSize.ToString ();  			item.SubItems [3].Text = adobj.Bold.ToString ();  			item.SubItems [4].Text = adobj.Italic.ToString ();  			item.SubItems [5].Text = adobj.Color.ToString ();  			Tempadress = new SinglePdfLine ();  			try {  				numericUpDown2.Value = (int)adobj.URX;  				item.SubItems [6].Text = adobj.URX.ToString ();  				Tempadress.URX = adobj.URX;  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown3.Value = (int)adobj.URY;  				Tempadress.URY = adobj.URY;  				item.SubItems [7].Text = adobj.URY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown4.Value = (int)adobj.LLX;  				Tempadress.LLX = adobj.LLX;  				item.SubItems [8].Text = adobj.LLX.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown5.Value = (int)adobj.LLY;  				Tempadress.LLY = adobj.LLY;  				item.SubItems [9].Text = adobj.LLY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			adobj.DocumentType = textBoxDocumentType.Text;  			listView1.Items.Add (item);  			listView1.Update ();  			Numeric_KeyPad_Lock = false;  			radioButton3.Checked = true;  		}  	}  	catch (ArgumentException) {  		MessageBox.Show ("Input String contains invalid characters");  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (var extractedtext in ExtractedTexts) {  	try {  		string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  		//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  		MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  		foreach (Match x in collection) {  			SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  			string data = x.Groups ["data"].Value;  			if (data.Contains ("NOTBOLD")) {  				adobj.Bold = false;  				data = data.Replace ("NOTBOLD"' "");  			}  			else {  				adobj.Bold = true;  				data = data.Replace ("BOLD"' "");  			}  			adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  			adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  			string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  			string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  			string[] splits = coordinates.Split (''');  			adobj.URX = float.Parse (splits [0]);  			adobj.URY = float.Parse (splits [1]);  			adobj.LLX = float.Parse (splits [2]);  			adobj.LLY = float.Parse (splits [3]);  			adobj.FontSize = float.Parse (FontSize);  			ListViewItem item = new ListViewItem ();  			item.SubItems.Add ("Address");  			item.SubItems.Add ("Size");  			item.SubItems.Add ("Font");  			item.SubItems.Add ("Bold");  			item.SubItems.Add ("Italic");  			item.SubItems.Add ("Color");  			item.SubItems.Add ("URX");  			item.SubItems.Add ("URY");  			item.SubItems.Add ("LLX");  			item.SubItems.Add ("LLY");  			item.SubItems [0].Text = extractedtext;  			item.SubItems [2].Text = adobj.FontFamily;  			item.SubItems [1].Text = adobj.FontSize.ToString ();  			item.SubItems [3].Text = adobj.Bold.ToString ();  			item.SubItems [4].Text = adobj.Italic.ToString ();  			item.SubItems [5].Text = adobj.Color.ToString ();  			Tempadress = new SinglePdfLine ();  			try {  				numericUpDown2.Value = (int)adobj.URX;  				item.SubItems [6].Text = adobj.URX.ToString ();  				Tempadress.URX = adobj.URX;  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown3.Value = (int)adobj.URY;  				Tempadress.URY = adobj.URY;  				item.SubItems [7].Text = adobj.URY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown4.Value = (int)adobj.LLX;  				Tempadress.LLX = adobj.LLX;  				item.SubItems [8].Text = adobj.LLX.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			try {  				numericUpDown5.Value = (int)adobj.LLY;  				Tempadress.LLY = adobj.LLY;  				item.SubItems [9].Text = adobj.LLY.ToString ();  			}  			catch (ArgumentException) {  				MessageBox.Show ("Argument Exception while Getting numeric box ");  			}  			adobj.DocumentType = textBoxDocumentType.Text;  			listView1.Items.Add (item);  			listView1.Update ();  			Numeric_KeyPad_Lock = false;  			radioButton3.Checked = true;  		}  	}  	catch (ArgumentException) {  		MessageBox.Show ("Input String contains invalid characters");  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  	//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		ListViewItem item = new ListViewItem ();  		item.SubItems.Add ("Address");  		item.SubItems.Add ("Size");  		item.SubItems.Add ("Font");  		item.SubItems.Add ("Bold");  		item.SubItems.Add ("Italic");  		item.SubItems.Add ("Color");  		item.SubItems.Add ("URX");  		item.SubItems.Add ("URY");  		item.SubItems.Add ("LLX");  		item.SubItems.Add ("LLY");  		item.SubItems [0].Text = extractedtext;  		item.SubItems [2].Text = adobj.FontFamily;  		item.SubItems [1].Text = adobj.FontSize.ToString ();  		item.SubItems [3].Text = adobj.Bold.ToString ();  		item.SubItems [4].Text = adobj.Italic.ToString ();  		item.SubItems [5].Text = adobj.Color.ToString ();  		Tempadress = new SinglePdfLine ();  		try {  			numericUpDown2.Value = (int)adobj.URX;  			item.SubItems [6].Text = adobj.URX.ToString ();  			Tempadress.URX = adobj.URX;  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown3.Value = (int)adobj.URY;  			Tempadress.URY = adobj.URY;  			item.SubItems [7].Text = adobj.URY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown4.Value = (int)adobj.LLX;  			Tempadress.LLX = adobj.LLX;  			item.SubItems [8].Text = adobj.LLX.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown5.Value = (int)adobj.LLY;  			Tempadress.LLY = adobj.LLY;  			item.SubItems [9].Text = adobj.LLY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		adobj.DocumentType = textBoxDocumentType.Text;  		listView1.Items.Add (item);  		listView1.Update ();  		Numeric_KeyPad_Lock = false;  		radioButton3.Checked = true;  	}  }  catch (ArgumentException) {  	MessageBox.Show ("Input String contains invalid characters");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  	//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		ListViewItem item = new ListViewItem ();  		item.SubItems.Add ("Address");  		item.SubItems.Add ("Size");  		item.SubItems.Add ("Font");  		item.SubItems.Add ("Bold");  		item.SubItems.Add ("Italic");  		item.SubItems.Add ("Color");  		item.SubItems.Add ("URX");  		item.SubItems.Add ("URY");  		item.SubItems.Add ("LLX");  		item.SubItems.Add ("LLY");  		item.SubItems [0].Text = extractedtext;  		item.SubItems [2].Text = adobj.FontFamily;  		item.SubItems [1].Text = adobj.FontSize.ToString ();  		item.SubItems [3].Text = adobj.Bold.ToString ();  		item.SubItems [4].Text = adobj.Italic.ToString ();  		item.SubItems [5].Text = adobj.Color.ToString ();  		Tempadress = new SinglePdfLine ();  		try {  			numericUpDown2.Value = (int)adobj.URX;  			item.SubItems [6].Text = adobj.URX.ToString ();  			Tempadress.URX = adobj.URX;  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown3.Value = (int)adobj.URY;  			Tempadress.URY = adobj.URY;  			item.SubItems [7].Text = adobj.URY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown4.Value = (int)adobj.LLX;  			Tempadress.LLX = adobj.LLX;  			item.SubItems [8].Text = adobj.LLX.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown5.Value = (int)adobj.LLY;  			Tempadress.LLY = adobj.LLY;  			item.SubItems [9].Text = adobj.LLY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		adobj.DocumentType = textBoxDocumentType.Text;  		listView1.Items.Add (item);  		listView1.Update ();  		Numeric_KeyPad_Lock = false;  		radioButton3.Checked = true;  	}  }  catch (ArgumentException) {  	MessageBox.Show ("Input String contains invalid characters");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  	//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		ListViewItem item = new ListViewItem ();  		item.SubItems.Add ("Address");  		item.SubItems.Add ("Size");  		item.SubItems.Add ("Font");  		item.SubItems.Add ("Bold");  		item.SubItems.Add ("Italic");  		item.SubItems.Add ("Color");  		item.SubItems.Add ("URX");  		item.SubItems.Add ("URY");  		item.SubItems.Add ("LLX");  		item.SubItems.Add ("LLY");  		item.SubItems [0].Text = extractedtext;  		item.SubItems [2].Text = adobj.FontFamily;  		item.SubItems [1].Text = adobj.FontSize.ToString ();  		item.SubItems [3].Text = adobj.Bold.ToString ();  		item.SubItems [4].Text = adobj.Italic.ToString ();  		item.SubItems [5].Text = adobj.Color.ToString ();  		Tempadress = new SinglePdfLine ();  		try {  			numericUpDown2.Value = (int)adobj.URX;  			item.SubItems [6].Text = adobj.URX.ToString ();  			Tempadress.URX = adobj.URX;  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown3.Value = (int)adobj.URY;  			Tempadress.URY = adobj.URY;  			item.SubItems [7].Text = adobj.URY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown4.Value = (int)adobj.LLX;  			Tempadress.LLX = adobj.LLX;  			item.SubItems [8].Text = adobj.LLX.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown5.Value = (int)adobj.LLY;  			Tempadress.LLY = adobj.LLY;  			item.SubItems [9].Text = adobj.LLY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		adobj.DocumentType = textBoxDocumentType.Text;  		listView1.Items.Add (item);  		listView1.Update ();  		Numeric_KeyPad_Lock = false;  		radioButton3.Checked = true;  	}  }  catch (ArgumentException) {  	MessageBox.Show ("Input String contains invalid characters");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  	//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		ListViewItem item = new ListViewItem ();  		item.SubItems.Add ("Address");  		item.SubItems.Add ("Size");  		item.SubItems.Add ("Font");  		item.SubItems.Add ("Bold");  		item.SubItems.Add ("Italic");  		item.SubItems.Add ("Color");  		item.SubItems.Add ("URX");  		item.SubItems.Add ("URY");  		item.SubItems.Add ("LLX");  		item.SubItems.Add ("LLY");  		item.SubItems [0].Text = extractedtext;  		item.SubItems [2].Text = adobj.FontFamily;  		item.SubItems [1].Text = adobj.FontSize.ToString ();  		item.SubItems [3].Text = adobj.Bold.ToString ();  		item.SubItems [4].Text = adobj.Italic.ToString ();  		item.SubItems [5].Text = adobj.Color.ToString ();  		Tempadress = new SinglePdfLine ();  		try {  			numericUpDown2.Value = (int)adobj.URX;  			item.SubItems [6].Text = adobj.URX.ToString ();  			Tempadress.URX = adobj.URX;  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown3.Value = (int)adobj.URY;  			Tempadress.URY = adobj.URY;  			item.SubItems [7].Text = adobj.URY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown4.Value = (int)adobj.LLX;  			Tempadress.LLX = adobj.LLX;  			item.SubItems [8].Text = adobj.LLX.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown5.Value = (int)adobj.LLY;  			Tempadress.LLY = adobj.LLY;  			item.SubItems [9].Text = adobj.LLY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		adobj.DocumentType = textBoxDocumentType.Text;  		listView1.Items.Add (item);  		listView1.Update ();  		Numeric_KeyPad_Lock = false;  		radioButton3.Checked = true;  	}  }  catch (ArgumentException) {  	MessageBox.Show ("Input String contains invalid characters");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  	//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		ListViewItem item = new ListViewItem ();  		item.SubItems.Add ("Address");  		item.SubItems.Add ("Size");  		item.SubItems.Add ("Font");  		item.SubItems.Add ("Bold");  		item.SubItems.Add ("Italic");  		item.SubItems.Add ("Color");  		item.SubItems.Add ("URX");  		item.SubItems.Add ("URY");  		item.SubItems.Add ("LLX");  		item.SubItems.Add ("LLY");  		item.SubItems [0].Text = extractedtext;  		item.SubItems [2].Text = adobj.FontFamily;  		item.SubItems [1].Text = adobj.FontSize.ToString ();  		item.SubItems [3].Text = adobj.Bold.ToString ();  		item.SubItems [4].Text = adobj.Italic.ToString ();  		item.SubItems [5].Text = adobj.Color.ToString ();  		Tempadress = new SinglePdfLine ();  		try {  			numericUpDown2.Value = (int)adobj.URX;  			item.SubItems [6].Text = adobj.URX.ToString ();  			Tempadress.URX = adobj.URX;  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown3.Value = (int)adobj.URY;  			Tempadress.URY = adobj.URY;  			item.SubItems [7].Text = adobj.URY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown4.Value = (int)adobj.LLX;  			Tempadress.LLX = adobj.LLX;  			item.SubItems [8].Text = adobj.LLX.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown5.Value = (int)adobj.LLY;  			Tempadress.LLY = adobj.LLY;  			item.SubItems [9].Text = adobj.LLY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		adobj.DocumentType = textBoxDocumentType.Text;  		listView1.Items.Add (item);  		listView1.Update ();  		Numeric_KeyPad_Lock = false;  		radioButton3.Checked = true;  	}  }  catch (ArgumentException) {  	MessageBox.Show ("Input String contains invalid characters");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  	//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		ListViewItem item = new ListViewItem ();  		item.SubItems.Add ("Address");  		item.SubItems.Add ("Size");  		item.SubItems.Add ("Font");  		item.SubItems.Add ("Bold");  		item.SubItems.Add ("Italic");  		item.SubItems.Add ("Color");  		item.SubItems.Add ("URX");  		item.SubItems.Add ("URY");  		item.SubItems.Add ("LLX");  		item.SubItems.Add ("LLY");  		item.SubItems [0].Text = extractedtext;  		item.SubItems [2].Text = adobj.FontFamily;  		item.SubItems [1].Text = adobj.FontSize.ToString ();  		item.SubItems [3].Text = adobj.Bold.ToString ();  		item.SubItems [4].Text = adobj.Italic.ToString ();  		item.SubItems [5].Text = adobj.Color.ToString ();  		Tempadress = new SinglePdfLine ();  		try {  			numericUpDown2.Value = (int)adobj.URX;  			item.SubItems [6].Text = adobj.URX.ToString ();  			Tempadress.URX = adobj.URX;  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown3.Value = (int)adobj.URY;  			Tempadress.URY = adobj.URY;  			item.SubItems [7].Text = adobj.URY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown4.Value = (int)adobj.LLX;  			Tempadress.LLX = adobj.LLX;  			item.SubItems [8].Text = adobj.LLX.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown5.Value = (int)adobj.LLY;  			Tempadress.LLY = adobj.LLY;  			item.SubItems [9].Text = adobj.LLY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		adobj.DocumentType = textBoxDocumentType.Text;  		listView1.Items.Add (item);  		listView1.Update ();  		Numeric_KeyPad_Lock = false;  		radioButton3.Checked = true;  	}  }  catch (ArgumentException) {  	MessageBox.Show ("Input String contains invalid characters");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  	//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		ListViewItem item = new ListViewItem ();  		item.SubItems.Add ("Address");  		item.SubItems.Add ("Size");  		item.SubItems.Add ("Font");  		item.SubItems.Add ("Bold");  		item.SubItems.Add ("Italic");  		item.SubItems.Add ("Color");  		item.SubItems.Add ("URX");  		item.SubItems.Add ("URY");  		item.SubItems.Add ("LLX");  		item.SubItems.Add ("LLY");  		item.SubItems [0].Text = extractedtext;  		item.SubItems [2].Text = adobj.FontFamily;  		item.SubItems [1].Text = adobj.FontSize.ToString ();  		item.SubItems [3].Text = adobj.Bold.ToString ();  		item.SubItems [4].Text = adobj.Italic.ToString ();  		item.SubItems [5].Text = adobj.Color.ToString ();  		Tempadress = new SinglePdfLine ();  		try {  			numericUpDown2.Value = (int)adobj.URX;  			item.SubItems [6].Text = adobj.URX.ToString ();  			Tempadress.URX = adobj.URX;  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown3.Value = (int)adobj.URY;  			Tempadress.URY = adobj.URY;  			item.SubItems [7].Text = adobj.URY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown4.Value = (int)adobj.LLX;  			Tempadress.LLX = adobj.LLX;  			item.SubItems [8].Text = adobj.LLX.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown5.Value = (int)adobj.LLY;  			Tempadress.LLY = adobj.LLY;  			item.SubItems [9].Text = adobj.LLY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		adobj.DocumentType = textBoxDocumentType.Text;  		listView1.Items.Add (item);  		listView1.Update ();  		Numeric_KeyPad_Lock = false;  		radioButton3.Checked = true;  	}  }  catch (ArgumentException) {  	MessageBox.Show ("Input String contains invalid characters");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  	//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		ListViewItem item = new ListViewItem ();  		item.SubItems.Add ("Address");  		item.SubItems.Add ("Size");  		item.SubItems.Add ("Font");  		item.SubItems.Add ("Bold");  		item.SubItems.Add ("Italic");  		item.SubItems.Add ("Color");  		item.SubItems.Add ("URX");  		item.SubItems.Add ("URY");  		item.SubItems.Add ("LLX");  		item.SubItems.Add ("LLY");  		item.SubItems [0].Text = extractedtext;  		item.SubItems [2].Text = adobj.FontFamily;  		item.SubItems [1].Text = adobj.FontSize.ToString ();  		item.SubItems [3].Text = adobj.Bold.ToString ();  		item.SubItems [4].Text = adobj.Italic.ToString ();  		item.SubItems [5].Text = adobj.Color.ToString ();  		Tempadress = new SinglePdfLine ();  		try {  			numericUpDown2.Value = (int)adobj.URX;  			item.SubItems [6].Text = adobj.URX.ToString ();  			Tempadress.URX = adobj.URX;  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown3.Value = (int)adobj.URY;  			Tempadress.URY = adobj.URY;  			item.SubItems [7].Text = adobj.URY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown4.Value = (int)adobj.LLX;  			Tempadress.LLX = adobj.LLX;  			item.SubItems [8].Text = adobj.LLX.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown5.Value = (int)adobj.LLY;  			Tempadress.LLY = adobj.LLY;  			item.SubItems [9].Text = adobj.LLY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		adobj.DocumentType = textBoxDocumentType.Text;  		listView1.Items.Add (item);  		listView1.Update ();  		Numeric_KeyPad_Lock = false;  		radioButton3.Checked = true;  	}  }  catch (ArgumentException) {  	MessageBox.Show ("Input String contains invalid characters");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  	//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		ListViewItem item = new ListViewItem ();  		item.SubItems.Add ("Address");  		item.SubItems.Add ("Size");  		item.SubItems.Add ("Font");  		item.SubItems.Add ("Bold");  		item.SubItems.Add ("Italic");  		item.SubItems.Add ("Color");  		item.SubItems.Add ("URX");  		item.SubItems.Add ("URY");  		item.SubItems.Add ("LLX");  		item.SubItems.Add ("LLY");  		item.SubItems [0].Text = extractedtext;  		item.SubItems [2].Text = adobj.FontFamily;  		item.SubItems [1].Text = adobj.FontSize.ToString ();  		item.SubItems [3].Text = adobj.Bold.ToString ();  		item.SubItems [4].Text = adobj.Italic.ToString ();  		item.SubItems [5].Text = adobj.Color.ToString ();  		Tempadress = new SinglePdfLine ();  		try {  			numericUpDown2.Value = (int)adobj.URX;  			item.SubItems [6].Text = adobj.URX.ToString ();  			Tempadress.URX = adobj.URX;  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown3.Value = (int)adobj.URY;  			Tempadress.URY = adobj.URY;  			item.SubItems [7].Text = adobj.URY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown4.Value = (int)adobj.LLX;  			Tempadress.LLX = adobj.LLX;  			item.SubItems [8].Text = adobj.LLX.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown5.Value = (int)adobj.LLY;  			Tempadress.LLY = adobj.LLY;  			item.SubItems [9].Text = adobj.LLY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		adobj.DocumentType = textBoxDocumentType.Text;  		listView1.Items.Add (item);  		listView1.Update ();  		Numeric_KeyPad_Lock = false;  		radioButton3.Checked = true;  	}  }  catch (ArgumentException) {  	MessageBox.Show ("Input String contains invalid characters");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	string Regexe = "(?<data><span.*?" + extractedtext + ".*?span>)";  	//        Regex RegexObj = new Regex("(?<data><span.*?"   +Regexe+ ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedtext.Replace (" "' @"\s") + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		ListViewItem item = new ListViewItem ();  		item.SubItems.Add ("Address");  		item.SubItems.Add ("Size");  		item.SubItems.Add ("Font");  		item.SubItems.Add ("Bold");  		item.SubItems.Add ("Italic");  		item.SubItems.Add ("Color");  		item.SubItems.Add ("URX");  		item.SubItems.Add ("URY");  		item.SubItems.Add ("LLX");  		item.SubItems.Add ("LLY");  		item.SubItems [0].Text = extractedtext;  		item.SubItems [2].Text = adobj.FontFamily;  		item.SubItems [1].Text = adobj.FontSize.ToString ();  		item.SubItems [3].Text = adobj.Bold.ToString ();  		item.SubItems [4].Text = adobj.Italic.ToString ();  		item.SubItems [5].Text = adobj.Color.ToString ();  		Tempadress = new SinglePdfLine ();  		try {  			numericUpDown2.Value = (int)adobj.URX;  			item.SubItems [6].Text = adobj.URX.ToString ();  			Tempadress.URX = adobj.URX;  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown3.Value = (int)adobj.URY;  			Tempadress.URY = adobj.URY;  			item.SubItems [7].Text = adobj.URY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown4.Value = (int)adobj.LLX;  			Tempadress.LLX = adobj.LLX;  			item.SubItems [8].Text = adobj.LLX.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		try {  			numericUpDown5.Value = (int)adobj.LLY;  			Tempadress.LLY = adobj.LLY;  			item.SubItems [9].Text = adobj.LLY.ToString ();  		}  		catch (ArgumentException) {  			MessageBox.Show ("Argument Exception while Getting numeric box ");  		}  		adobj.DocumentType = textBoxDocumentType.Text;  		listView1.Items.Add (item);  		listView1.Update ();  		Numeric_KeyPad_Lock = false;  		radioButton3.Checked = true;  	}  }  catch (ArgumentException) {  	MessageBox.Show ("Input String contains invalid characters");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	ListViewItem item = new ListViewItem ();  	item.SubItems.Add ("Address");  	item.SubItems.Add ("Size");  	item.SubItems.Add ("Font");  	item.SubItems.Add ("Bold");  	item.SubItems.Add ("Italic");  	item.SubItems.Add ("Color");  	item.SubItems.Add ("URX");  	item.SubItems.Add ("URY");  	item.SubItems.Add ("LLX");  	item.SubItems.Add ("LLY");  	item.SubItems [0].Text = extractedtext;  	item.SubItems [2].Text = adobj.FontFamily;  	item.SubItems [1].Text = adobj.FontSize.ToString ();  	item.SubItems [3].Text = adobj.Bold.ToString ();  	item.SubItems [4].Text = adobj.Italic.ToString ();  	item.SubItems [5].Text = adobj.Color.ToString ();  	Tempadress = new SinglePdfLine ();  	try {  		numericUpDown2.Value = (int)adobj.URX;  		item.SubItems [6].Text = adobj.URX.ToString ();  		Tempadress.URX = adobj.URX;  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown3.Value = (int)adobj.URY;  		Tempadress.URY = adobj.URY;  		item.SubItems [7].Text = adobj.URY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown4.Value = (int)adobj.LLX;  		Tempadress.LLX = adobj.LLX;  		item.SubItems [8].Text = adobj.LLX.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown5.Value = (int)adobj.LLY;  		Tempadress.LLY = adobj.LLY;  		item.SubItems [9].Text = adobj.LLY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	adobj.DocumentType = textBoxDocumentType.Text;  	listView1.Items.Add (item);  	listView1.Update ();  	Numeric_KeyPad_Lock = false;  	radioButton3.Checked = true;  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	ListViewItem item = new ListViewItem ();  	item.SubItems.Add ("Address");  	item.SubItems.Add ("Size");  	item.SubItems.Add ("Font");  	item.SubItems.Add ("Bold");  	item.SubItems.Add ("Italic");  	item.SubItems.Add ("Color");  	item.SubItems.Add ("URX");  	item.SubItems.Add ("URY");  	item.SubItems.Add ("LLX");  	item.SubItems.Add ("LLY");  	item.SubItems [0].Text = extractedtext;  	item.SubItems [2].Text = adobj.FontFamily;  	item.SubItems [1].Text = adobj.FontSize.ToString ();  	item.SubItems [3].Text = adobj.Bold.ToString ();  	item.SubItems [4].Text = adobj.Italic.ToString ();  	item.SubItems [5].Text = adobj.Color.ToString ();  	Tempadress = new SinglePdfLine ();  	try {  		numericUpDown2.Value = (int)adobj.URX;  		item.SubItems [6].Text = adobj.URX.ToString ();  		Tempadress.URX = adobj.URX;  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown3.Value = (int)adobj.URY;  		Tempadress.URY = adobj.URY;  		item.SubItems [7].Text = adobj.URY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown4.Value = (int)adobj.LLX;  		Tempadress.LLX = adobj.LLX;  		item.SubItems [8].Text = adobj.LLX.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown5.Value = (int)adobj.LLY;  		Tempadress.LLY = adobj.LLY;  		item.SubItems [9].Text = adobj.LLY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	adobj.DocumentType = textBoxDocumentType.Text;  	listView1.Items.Add (item);  	listView1.Update ();  	Numeric_KeyPad_Lock = false;  	radioButton3.Checked = true;  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	ListViewItem item = new ListViewItem ();  	item.SubItems.Add ("Address");  	item.SubItems.Add ("Size");  	item.SubItems.Add ("Font");  	item.SubItems.Add ("Bold");  	item.SubItems.Add ("Italic");  	item.SubItems.Add ("Color");  	item.SubItems.Add ("URX");  	item.SubItems.Add ("URY");  	item.SubItems.Add ("LLX");  	item.SubItems.Add ("LLY");  	item.SubItems [0].Text = extractedtext;  	item.SubItems [2].Text = adobj.FontFamily;  	item.SubItems [1].Text = adobj.FontSize.ToString ();  	item.SubItems [3].Text = adobj.Bold.ToString ();  	item.SubItems [4].Text = adobj.Italic.ToString ();  	item.SubItems [5].Text = adobj.Color.ToString ();  	Tempadress = new SinglePdfLine ();  	try {  		numericUpDown2.Value = (int)adobj.URX;  		item.SubItems [6].Text = adobj.URX.ToString ();  		Tempadress.URX = adobj.URX;  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown3.Value = (int)adobj.URY;  		Tempadress.URY = adobj.URY;  		item.SubItems [7].Text = adobj.URY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown4.Value = (int)adobj.LLX;  		Tempadress.LLX = adobj.LLX;  		item.SubItems [8].Text = adobj.LLX.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown5.Value = (int)adobj.LLY;  		Tempadress.LLY = adobj.LLY;  		item.SubItems [9].Text = adobj.LLY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	adobj.DocumentType = textBoxDocumentType.Text;  	listView1.Items.Add (item);  	listView1.Update ();  	Numeric_KeyPad_Lock = false;  	radioButton3.Checked = true;  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	ListViewItem item = new ListViewItem ();  	item.SubItems.Add ("Address");  	item.SubItems.Add ("Size");  	item.SubItems.Add ("Font");  	item.SubItems.Add ("Bold");  	item.SubItems.Add ("Italic");  	item.SubItems.Add ("Color");  	item.SubItems.Add ("URX");  	item.SubItems.Add ("URY");  	item.SubItems.Add ("LLX");  	item.SubItems.Add ("LLY");  	item.SubItems [0].Text = extractedtext;  	item.SubItems [2].Text = adobj.FontFamily;  	item.SubItems [1].Text = adobj.FontSize.ToString ();  	item.SubItems [3].Text = adobj.Bold.ToString ();  	item.SubItems [4].Text = adobj.Italic.ToString ();  	item.SubItems [5].Text = adobj.Color.ToString ();  	Tempadress = new SinglePdfLine ();  	try {  		numericUpDown2.Value = (int)adobj.URX;  		item.SubItems [6].Text = adobj.URX.ToString ();  		Tempadress.URX = adobj.URX;  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown3.Value = (int)adobj.URY;  		Tempadress.URY = adobj.URY;  		item.SubItems [7].Text = adobj.URY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown4.Value = (int)adobj.LLX;  		Tempadress.LLX = adobj.LLX;  		item.SubItems [8].Text = adobj.LLX.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown5.Value = (int)adobj.LLY;  		Tempadress.LLY = adobj.LLY;  		item.SubItems [9].Text = adobj.LLY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	adobj.DocumentType = textBoxDocumentType.Text;  	listView1.Items.Add (item);  	listView1.Update ();  	Numeric_KeyPad_Lock = false;  	radioButton3.Checked = true;  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	ListViewItem item = new ListViewItem ();  	item.SubItems.Add ("Address");  	item.SubItems.Add ("Size");  	item.SubItems.Add ("Font");  	item.SubItems.Add ("Bold");  	item.SubItems.Add ("Italic");  	item.SubItems.Add ("Color");  	item.SubItems.Add ("URX");  	item.SubItems.Add ("URY");  	item.SubItems.Add ("LLX");  	item.SubItems.Add ("LLY");  	item.SubItems [0].Text = extractedtext;  	item.SubItems [2].Text = adobj.FontFamily;  	item.SubItems [1].Text = adobj.FontSize.ToString ();  	item.SubItems [3].Text = adobj.Bold.ToString ();  	item.SubItems [4].Text = adobj.Italic.ToString ();  	item.SubItems [5].Text = adobj.Color.ToString ();  	Tempadress = new SinglePdfLine ();  	try {  		numericUpDown2.Value = (int)adobj.URX;  		item.SubItems [6].Text = adobj.URX.ToString ();  		Tempadress.URX = adobj.URX;  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown3.Value = (int)adobj.URY;  		Tempadress.URY = adobj.URY;  		item.SubItems [7].Text = adobj.URY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown4.Value = (int)adobj.LLX;  		Tempadress.LLX = adobj.LLX;  		item.SubItems [8].Text = adobj.LLX.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown5.Value = (int)adobj.LLY;  		Tempadress.LLY = adobj.LLY;  		item.SubItems [9].Text = adobj.LLY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	adobj.DocumentType = textBoxDocumentType.Text;  	listView1.Items.Add (item);  	listView1.Update ();  	Numeric_KeyPad_Lock = false;  	radioButton3.Checked = true;  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	ListViewItem item = new ListViewItem ();  	item.SubItems.Add ("Address");  	item.SubItems.Add ("Size");  	item.SubItems.Add ("Font");  	item.SubItems.Add ("Bold");  	item.SubItems.Add ("Italic");  	item.SubItems.Add ("Color");  	item.SubItems.Add ("URX");  	item.SubItems.Add ("URY");  	item.SubItems.Add ("LLX");  	item.SubItems.Add ("LLY");  	item.SubItems [0].Text = extractedtext;  	item.SubItems [2].Text = adobj.FontFamily;  	item.SubItems [1].Text = adobj.FontSize.ToString ();  	item.SubItems [3].Text = adobj.Bold.ToString ();  	item.SubItems [4].Text = adobj.Italic.ToString ();  	item.SubItems [5].Text = adobj.Color.ToString ();  	Tempadress = new SinglePdfLine ();  	try {  		numericUpDown2.Value = (int)adobj.URX;  		item.SubItems [6].Text = adobj.URX.ToString ();  		Tempadress.URX = adobj.URX;  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown3.Value = (int)adobj.URY;  		Tempadress.URY = adobj.URY;  		item.SubItems [7].Text = adobj.URY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown4.Value = (int)adobj.LLX;  		Tempadress.LLX = adobj.LLX;  		item.SubItems [8].Text = adobj.LLX.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown5.Value = (int)adobj.LLY;  		Tempadress.LLY = adobj.LLY;  		item.SubItems [9].Text = adobj.LLY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	adobj.DocumentType = textBoxDocumentType.Text;  	listView1.Items.Add (item);  	listView1.Update ();  	Numeric_KeyPad_Lock = false;  	radioButton3.Checked = true;  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	ListViewItem item = new ListViewItem ();  	item.SubItems.Add ("Address");  	item.SubItems.Add ("Size");  	item.SubItems.Add ("Font");  	item.SubItems.Add ("Bold");  	item.SubItems.Add ("Italic");  	item.SubItems.Add ("Color");  	item.SubItems.Add ("URX");  	item.SubItems.Add ("URY");  	item.SubItems.Add ("LLX");  	item.SubItems.Add ("LLY");  	item.SubItems [0].Text = extractedtext;  	item.SubItems [2].Text = adobj.FontFamily;  	item.SubItems [1].Text = adobj.FontSize.ToString ();  	item.SubItems [3].Text = adobj.Bold.ToString ();  	item.SubItems [4].Text = adobj.Italic.ToString ();  	item.SubItems [5].Text = adobj.Color.ToString ();  	Tempadress = new SinglePdfLine ();  	try {  		numericUpDown2.Value = (int)adobj.URX;  		item.SubItems [6].Text = adobj.URX.ToString ();  		Tempadress.URX = adobj.URX;  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown3.Value = (int)adobj.URY;  		Tempadress.URY = adobj.URY;  		item.SubItems [7].Text = adobj.URY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown4.Value = (int)adobj.LLX;  		Tempadress.LLX = adobj.LLX;  		item.SubItems [8].Text = adobj.LLX.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown5.Value = (int)adobj.LLY;  		Tempadress.LLY = adobj.LLY;  		item.SubItems [9].Text = adobj.LLY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	adobj.DocumentType = textBoxDocumentType.Text;  	listView1.Items.Add (item);  	listView1.Update ();  	Numeric_KeyPad_Lock = false;  	radioButton3.Checked = true;  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	ListViewItem item = new ListViewItem ();  	item.SubItems.Add ("Address");  	item.SubItems.Add ("Size");  	item.SubItems.Add ("Font");  	item.SubItems.Add ("Bold");  	item.SubItems.Add ("Italic");  	item.SubItems.Add ("Color");  	item.SubItems.Add ("URX");  	item.SubItems.Add ("URY");  	item.SubItems.Add ("LLX");  	item.SubItems.Add ("LLY");  	item.SubItems [0].Text = extractedtext;  	item.SubItems [2].Text = adobj.FontFamily;  	item.SubItems [1].Text = adobj.FontSize.ToString ();  	item.SubItems [3].Text = adobj.Bold.ToString ();  	item.SubItems [4].Text = adobj.Italic.ToString ();  	item.SubItems [5].Text = adobj.Color.ToString ();  	Tempadress = new SinglePdfLine ();  	try {  		numericUpDown2.Value = (int)adobj.URX;  		item.SubItems [6].Text = adobj.URX.ToString ();  		Tempadress.URX = adobj.URX;  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown3.Value = (int)adobj.URY;  		Tempadress.URY = adobj.URY;  		item.SubItems [7].Text = adobj.URY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown4.Value = (int)adobj.LLX;  		Tempadress.LLX = adobj.LLX;  		item.SubItems [8].Text = adobj.LLX.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown5.Value = (int)adobj.LLY;  		Tempadress.LLY = adobj.LLY;  		item.SubItems [9].Text = adobj.LLY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	adobj.DocumentType = textBoxDocumentType.Text;  	listView1.Items.Add (item);  	listView1.Update ();  	Numeric_KeyPad_Lock = false;  	radioButton3.Checked = true;  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	ListViewItem item = new ListViewItem ();  	item.SubItems.Add ("Address");  	item.SubItems.Add ("Size");  	item.SubItems.Add ("Font");  	item.SubItems.Add ("Bold");  	item.SubItems.Add ("Italic");  	item.SubItems.Add ("Color");  	item.SubItems.Add ("URX");  	item.SubItems.Add ("URY");  	item.SubItems.Add ("LLX");  	item.SubItems.Add ("LLY");  	item.SubItems [0].Text = extractedtext;  	item.SubItems [2].Text = adobj.FontFamily;  	item.SubItems [1].Text = adobj.FontSize.ToString ();  	item.SubItems [3].Text = adobj.Bold.ToString ();  	item.SubItems [4].Text = adobj.Italic.ToString ();  	item.SubItems [5].Text = adobj.Color.ToString ();  	Tempadress = new SinglePdfLine ();  	try {  		numericUpDown2.Value = (int)adobj.URX;  		item.SubItems [6].Text = adobj.URX.ToString ();  		Tempadress.URX = adobj.URX;  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown3.Value = (int)adobj.URY;  		Tempadress.URY = adobj.URY;  		item.SubItems [7].Text = adobj.URY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown4.Value = (int)adobj.LLX;  		Tempadress.LLX = adobj.LLX;  		item.SubItems [8].Text = adobj.LLX.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown5.Value = (int)adobj.LLY;  		Tempadress.LLY = adobj.LLY;  		item.SubItems [9].Text = adobj.LLY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	adobj.DocumentType = textBoxDocumentType.Text;  	listView1.Items.Add (item);  	listView1.Update ();  	Numeric_KeyPad_Lock = false;  	radioButton3.Checked = true;  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);.*?").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	ListViewItem item = new ListViewItem ();  	item.SubItems.Add ("Address");  	item.SubItems.Add ("Size");  	item.SubItems.Add ("Font");  	item.SubItems.Add ("Bold");  	item.SubItems.Add ("Italic");  	item.SubItems.Add ("Color");  	item.SubItems.Add ("URX");  	item.SubItems.Add ("URY");  	item.SubItems.Add ("LLX");  	item.SubItems.Add ("LLY");  	item.SubItems [0].Text = extractedtext;  	item.SubItems [2].Text = adobj.FontFamily;  	item.SubItems [1].Text = adobj.FontSize.ToString ();  	item.SubItems [3].Text = adobj.Bold.ToString ();  	item.SubItems [4].Text = adobj.Italic.ToString ();  	item.SubItems [5].Text = adobj.Color.ToString ();  	Tempadress = new SinglePdfLine ();  	try {  		numericUpDown2.Value = (int)adobj.URX;  		item.SubItems [6].Text = adobj.URX.ToString ();  		Tempadress.URX = adobj.URX;  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown3.Value = (int)adobj.URY;  		Tempadress.URY = adobj.URY;  		item.SubItems [7].Text = adobj.URY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown4.Value = (int)adobj.LLX;  		Tempadress.LLX = adobj.LLX;  		item.SubItems [8].Text = adobj.LLX.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	try {  		numericUpDown5.Value = (int)adobj.LLY;  		Tempadress.LLY = adobj.LLY;  		item.SubItems [9].Text = adobj.LLY.ToString ();  	}  	catch (ArgumentException) {  		MessageBox.Show ("Argument Exception while Getting numeric box ");  	}  	adobj.DocumentType = textBoxDocumentType.Text;  	listView1.Items.Add (item);  	listView1.Update ();  	Numeric_KeyPad_Lock = false;  	radioButton3.Checked = true;  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: adobj.LLX = float.Parse (splits [2]);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: adobj.LLY = float.Parse (splits [3]);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: item.SubItems [2].Text = adobj.FontFamily;  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: item.SubItems [3].Text = adobj.Bold.ToString ();  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: item.SubItems [4].Text = adobj.Italic.ToString ();  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: item.SubItems [5].Text = adobj.Color.ToString ();  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	numericUpDown2.Value = (int)adobj.URX;  	item.SubItems [6].Text = adobj.URX.ToString ();  	Tempadress.URX = adobj.URX;  }  catch (ArgumentException) {  	MessageBox.Show ("Argument Exception while Getting numeric box ");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: item.SubItems [6].Text = adobj.URX.ToString ();  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	numericUpDown3.Value = (int)adobj.URY;  	Tempadress.URY = adobj.URY;  	item.SubItems [7].Text = adobj.URY.ToString ();  }  catch (ArgumentException) {  	MessageBox.Show ("Argument Exception while Getting numeric box ");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: item.SubItems [7].Text = adobj.URY.ToString ();  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	numericUpDown4.Value = (int)adobj.LLX;  	Tempadress.LLX = adobj.LLX;  	item.SubItems [8].Text = adobj.LLX.ToString ();  }  catch (ArgumentException) {  	MessageBox.Show ("Argument Exception while Getting numeric box ");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: item.SubItems [8].Text = adobj.LLX.ToString ();  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: try {  	numericUpDown5.Value = (int)adobj.LLY;  	Tempadress.LLY = adobj.LLY;  	item.SubItems [9].Text = adobj.LLY.ToString ();  }  catch (ArgumentException) {  	MessageBox.Show ("Argument Exception while Getting numeric box ");  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,FindFont,The following statement contains a magic number: item.SubItems [9].Text = adobj.LLY.ToString ();  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: if (Tempadress != null && Tempadress.URX != 0f && Tempadress.URY != 0f && Tempadress.LLX != 0f && Tempadress.LLY != 0f) {  	listView1.Items [SelectedIndex].SubItems [6].Text = Tempadress.URX.ToString ();  	listView1.Items [SelectedIndex].SubItems [7].Text = Tempadress.URY.ToString ();  	listView1.Items [SelectedIndex].SubItems [8].Text = Tempadress.LLX.ToString ();  	listView1.Items [SelectedIndex].SubItems [9].Text = Tempadress.LLY.ToString ();  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: if (Tempadress != null && Tempadress.URX != 0f && Tempadress.URY != 0f && Tempadress.LLX != 0f && Tempadress.LLY != 0f) {  	listView1.Items [SelectedIndex].SubItems [6].Text = Tempadress.URX.ToString ();  	listView1.Items [SelectedIndex].SubItems [7].Text = Tempadress.URY.ToString ();  	listView1.Items [SelectedIndex].SubItems [8].Text = Tempadress.LLX.ToString ();  	listView1.Items [SelectedIndex].SubItems [9].Text = Tempadress.LLY.ToString ();  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: if (Tempadress != null && Tempadress.URX != 0f && Tempadress.URY != 0f && Tempadress.LLX != 0f && Tempadress.LLY != 0f) {  	listView1.Items [SelectedIndex].SubItems [6].Text = Tempadress.URX.ToString ();  	listView1.Items [SelectedIndex].SubItems [7].Text = Tempadress.URY.ToString ();  	listView1.Items [SelectedIndex].SubItems [8].Text = Tempadress.LLX.ToString ();  	listView1.Items [SelectedIndex].SubItems [9].Text = Tempadress.LLY.ToString ();  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: if (Tempadress != null && Tempadress.URX != 0f && Tempadress.URY != 0f && Tempadress.LLX != 0f && Tempadress.LLY != 0f) {  	listView1.Items [SelectedIndex].SubItems [6].Text = Tempadress.URX.ToString ();  	listView1.Items [SelectedIndex].SubItems [7].Text = Tempadress.URY.ToString ();  	listView1.Items [SelectedIndex].SubItems [8].Text = Tempadress.LLX.ToString ();  	listView1.Items [SelectedIndex].SubItems [9].Text = Tempadress.LLY.ToString ();  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: listView1.Items [SelectedIndex].SubItems [6].Text = Tempadress.URX.ToString ();  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: listView1.Items [SelectedIndex].SubItems [7].Text = Tempadress.URY.ToString ();  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: listView1.Items [SelectedIndex].SubItems [8].Text = Tempadress.LLX.ToString ();  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: listView1.Items [SelectedIndex].SubItems [9].Text = Tempadress.LLY.ToString ();  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	try {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	catch (ArgumentException) {  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	try {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	catch (ArgumentException) {  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	try {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	catch (ArgumentException) {  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	try {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	catch (ArgumentException) {  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	try {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	catch (ArgumentException) {  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	try {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	catch (ArgumentException) {  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	try {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	catch (ArgumentException) {  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: foreach (ListViewItem i in x) {  	Tempadress.Address = i.SubItems [0].Text;  	Tempadress.FontSize = float.Parse (i.SubItems [1].Text);  	Tempadress.FontFamily = i.SubItems [2].Text;  	Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  	Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  	Tempadress.Color = i.SubItems [5].Text;  	try {  		Tempadress.URX = float.Parse (i.SubItems [6].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.URY = float.Parse (i.SubItems [7].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLX = float.Parse (i.SubItems [8].Text);  	}  	catch (ArgumentException) {  	}  	try {  		Tempadress.LLY = float.Parse (i.SubItems [9].Text);  	}  	catch (ArgumentException) {  	}  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: Tempadress.FontFamily = i.SubItems [2].Text;  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: Tempadress.Bold = bool.Parse (i.SubItems [3].Text);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: Tempadress.Italic = bool.Parse (i.SubItems [4].Text);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: Tempadress.Color = i.SubItems [5].Text;  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: try {  	Tempadress.URX = float.Parse (i.SubItems [6].Text);  }  catch (ArgumentException) {  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: Tempadress.URX = float.Parse (i.SubItems [6].Text);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: try {  	Tempadress.URY = float.Parse (i.SubItems [7].Text);  }  catch (ArgumentException) {  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: Tempadress.URY = float.Parse (i.SubItems [7].Text);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: try {  	Tempadress.LLX = float.Parse (i.SubItems [8].Text);  }  catch (ArgumentException) {  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: Tempadress.LLX = float.Parse (i.SubItems [8].Text);  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: try {  	Tempadress.LLY = float.Parse (i.SubItems [9].Text);  }  catch (ArgumentException) {  }  
Magic Number,ItextSharp,SetTemplate,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\SetTemplate.cs,listView1_SelectedIndexChanged,The following statement contains a magic number: Tempadress.LLY = float.Parse (i.SubItems [9].Text);  
Magic Number,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,FindFont,The following statement contains a magic number: try {  	Regex RegexObj = new Regex ("(?<data><span.*?" + extractedText + ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedText + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?)\">").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.Address = Regex.Match (data' "<span.*?\">(?<data>.*?)<.span>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		CompareAddresses.Add (adobj);  	}  }  catch (ArgumentException ex) {  	MessageBox.Show ("Argument Exception in Form1 Find Font  ' " + ex.Message);  }  
Magic Number,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,FindFont,The following statement contains a magic number: try {  	Regex RegexObj = new Regex ("(?<data><span.*?" + extractedText + ".*?span>)");  	MatchCollection collection = Regex.Matches (XmlDocument' "(?<data><span.*?" + extractedText + ".*?span>)");  	foreach (Match x in collection) {  		SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  		string data = x.Groups ["data"].Value;  		if (data.Contains ("NOTBOLD")) {  			adobj.Bold = false;  			data = data.Replace ("NOTBOLD"' "");  		}  		else {  			adobj.Bold = true;  			data = data.Replace ("BOLD"' "");  		}  		adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?)\">").Groups ["data"].Value;  		adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);").Groups ["data"].Value;  		string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  		string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  		adobj.Address = Regex.Match (data' "<span.*?\">(?<data>.*?)<.span>").Groups ["data"].Value;  		string[] splits = coordinates.Split (''');  		adobj.URX = float.Parse (splits [0]);  		adobj.URY = float.Parse (splits [1]);  		adobj.LLX = float.Parse (splits [2]);  		adobj.LLY = float.Parse (splits [3]);  		adobj.FontSize = float.Parse (FontSize);  		CompareAddresses.Add (adobj);  	}  }  catch (ArgumentException ex) {  	MessageBox.Show ("Argument Exception in Form1 Find Font  ' " + ex.Message);  }  
Magic Number,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?)\">").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.Address = Regex.Match (data' "<span.*?\">(?<data>.*?)<.span>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	CompareAddresses.Add (adobj);  }  
Magic Number,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,FindFont,The following statement contains a magic number: foreach (Match x in collection) {  	SinglePdfLine adobj = new ItextSharp.SinglePdfLine ();  	string data = x.Groups ["data"].Value;  	if (data.Contains ("NOTBOLD")) {  		adobj.Bold = false;  		data = data.Replace ("NOTBOLD"' "");  	}  	else {  		adobj.Bold = true;  		data = data.Replace ("BOLD"' "");  	}  	adobj.Color = Regex.Match (data' "<span style=.*?color=(?<data>.*?)\">").Groups ["data"].Value;  	adobj.FontFamily = Regex.Match (data' "<span style=\"font-family:(?<data>.*?);").Groups ["data"].Value;  	string FontSize = Regex.Match (data' "<span style=.*?font-size:(?<data>.*?);.*?>").Groups ["data"].Value;  	string coordinates = Regex.Match (data' "<span style=.*?coordinates:(?<data>.*?);.*?>").Groups ["data"].Value;  	adobj.Address = Regex.Match (data' "<span.*?\">(?<data>.*?)<.span>").Groups ["data"].Value;  	string[] splits = coordinates.Split (''');  	adobj.URX = float.Parse (splits [0]);  	adobj.URY = float.Parse (splits [1]);  	adobj.LLX = float.Parse (splits [2]);  	adobj.LLY = float.Parse (splits [3]);  	adobj.FontSize = float.Parse (FontSize);  	CompareAddresses.Add (adobj);  }  
Magic Number,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,FindFont,The following statement contains a magic number: adobj.LLX = float.Parse (splits [2]);  
Magic Number,ItextSharp,FirstPage,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\FirstPage.cs,FindFont,The following statement contains a magic number: adobj.LLY = float.Parse (splits [3]);  
Magic Number,ItextSharp,PDFFuctions,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PDFFuctions.cs,getParagraphByCoOrdinate,The following statement contains a magic number: if (filter == false) {  	iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle (cordinate1' 1000 - coordinate2' coordinate3' 1000 - coordinate4);  	RenderFilter[] renderFilter = new RenderFilter[1];  	renderFilter [0] = new RegionTextRenderFilter (rect);  	ITextExtractionStrategy textExtractionStrategy = new FilteredTextRenderListener (new LocationTextExtractionStrategy ()' renderFilter);  	string text = PdfTextExtractor.GetTextFromPage (reader' pageno' textExtractionStrategy);  	return text;  }  else {  	iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle (cordinate1' coordinate2' coordinate3' coordinate4);  	RenderFilter[] renderFilter = new RenderFilter[1];  	renderFilter [0] = new RegionTextRenderFilter (rect);  	ITextExtractionStrategy textExtractionStrategy = new FilteredTextRenderListener (new LocationTextExtractionStrategy ()' renderFilter);  	string text = PdfTextExtractor.GetTextFromPage (reader' pageno' textExtractionStrategy);  	return text;  }  
Magic Number,ItextSharp,PDFFuctions,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PDFFuctions.cs,getParagraphByCoOrdinate,The following statement contains a magic number: if (filter == false) {  	iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle (cordinate1' 1000 - coordinate2' coordinate3' 1000 - coordinate4);  	RenderFilter[] renderFilter = new RenderFilter[1];  	renderFilter [0] = new RegionTextRenderFilter (rect);  	ITextExtractionStrategy textExtractionStrategy = new FilteredTextRenderListener (new LocationTextExtractionStrategy ()' renderFilter);  	string text = PdfTextExtractor.GetTextFromPage (reader' pageno' textExtractionStrategy);  	return text;  }  else {  	iTextSharp.text.Rectangle rect = new iTextSharp.text.Rectangle (cordinate1' coordinate2' coordinate3' coordinate4);  	RenderFilter[] renderFilter = new RenderFilter[1];  	renderFilter [0] = new RegionTextRenderFilter (rect);  	ITextExtractionStrategy textExtractionStrategy = new FilteredTextRenderListener (new LocationTextExtractionStrategy ()' renderFilter);  	string text = PdfTextExtractor.GetTextFromPage (reader' pageno' textExtractionStrategy);  	return text;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: if (example5_low_level) {  	try {  		LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  		PDFDoc doc = new PDFDoc (input_path);  		doc.InitSecurityHandler ();  		// Example 1. Extract all text content from the document  		ElementReader reader = new ElementReader ();  		PageIterator itr = doc.GetPageIterator ();  		//for (; itr.HasNext(); itr.Next()) //  Read every page  		{  			reader.Begin (itr.Current ());  			LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  			u.DumpAllText (reader);  			ConsoleLog += u.ConsoleLog;  			reader.End ();  		// Example 2. Extract text based on the selection rectangle.  		// ...   		}  		ConsoleLog += "----------------------------------------------------";  		ConsoleLog += "Extract text based on the selection rectangle.";  		ConsoleLog += "----------------------------------------------------";  		Page first_page = doc.GetPage (1);  		string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  		string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  		string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  		ConsoleLog += "Field 1: {0}" + field1;  		ConsoleLog += "Field 2: {0}" + field2;  		ConsoleLog += "Field 3: {0}" + field3;  		reader.Dispose ();  		doc.Close ();  		ConsoleLog += "Done.";  	}  	catch (PDFNetException e) {  		ConsoleLog += e.Message;  	}  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Magic Number,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ReadAdvanced,The following statement contains a magic number: try {  	LowLevelTextExtractUtils util = new LowLevelTextExtractUtils ();  	PDFDoc doc = new PDFDoc (input_path);  	doc.InitSecurityHandler ();  	// Example 1. Extract all text content from the document  	ElementReader reader = new ElementReader ();  	PageIterator itr = doc.GetPageIterator ();  	//for (; itr.HasNext(); itr.Next()) //  Read every page  	{  		reader.Begin (itr.Current ());  		LowLevelTextExtractUtils u = new LowLevelTextExtractUtils ();  		u.DumpAllText (reader);  		ConsoleLog += u.ConsoleLog;  		reader.End ();  	// Example 2. Extract text based on the selection rectangle.  	// ...   	}  	ConsoleLog += "----------------------------------------------------";  	ConsoleLog += "Extract text based on the selection rectangle.";  	ConsoleLog += "----------------------------------------------------";  	Page first_page = doc.GetPage (1);  	string field1 = util.ReadTextFromRect (first_page' new Rect (27' 392' 563' 534)' reader);  	string field2 = util.ReadTextFromRect (first_page' new Rect (28' 551' 106' 623)' reader);  	string field3 = util.ReadTextFromRect (first_page' new Rect (208' 550' 387' 621)' reader);  	ConsoleLog += "Field 1: {0}" + field1;  	ConsoleLog += "Field 2: {0}" + field2;  	ConsoleLog += "Field 3: {0}" + field3;  	reader.Dispose ();  	doc.Close ();  	ConsoleLog += "Done.";  }  catch (PDFNetException e) {  	ConsoleLog += e.Message;  }  
Missing Default,ItextSharp,PdfTron,C:\repos\AbbasNaqvi_Projects\ItextSharp\ItextSharp\src\BusinessLogic\PdfTron.cs,ProcessElements,The following switch statement is missing a default case: switch (element.GetType ()) {  case Element.Type.e_path:// Process path data...   {  	PathData data = element.GetPathData ();  	double[] points = data.points;  	ConsoleLog += "Process Element.Type.e_path";  	break;  }  case Element.Type.e_image:  case Element.Type.e_inline_image: {  	// Process images...  	ConsoleLog += "Process Element.Type.e_image";  	break;  }  case Element.Type.e_text:// Process text strings...   {  	ConsoleLog += "Process Element.Type.e_text";  	String txt = element.GetTextString ();  	ConsoleLog += txt;  	break;  }  case Element.Type.e_form:// Process form XObjects   {  	ConsoleLog += "Process Element.Type.e_form";  	reader.FormBegin ();  	ProcessElements (reader);  	reader.End ();  	break;  }  }  
