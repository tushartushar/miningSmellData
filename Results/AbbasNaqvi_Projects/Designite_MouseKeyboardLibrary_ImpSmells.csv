Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MouseKeyboardLibrary,KeyboardHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardHook.cs,HookCallbackProcedure,Cyclomatic complexity of the method is 15
Complex Method,MouseKeyboardLibrary,KeyboardSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardSimulator.cs,SimulateStandardShortcut,Cyclomatic complexity of the method is 45
Complex Method,MouseKeyboardLibrary,MouseHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseHook.cs,HookCallbackProcedure,Cyclomatic complexity of the method is 26
Complex Method,MouseKeyboardLibrary,MouseHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseHook.cs,GetButton,Cyclomatic complexity of the method is 10
Complex Method,MouseKeyboardLibrary,MouseHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseHook.cs,GetEventType,Cyclomatic complexity of the method is 12
Complex Method,MouseKeyboardLibrary,MouseSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseSimulator.cs,MouseDown,Cyclomatic complexity of the method is 9
Complex Method,MouseKeyboardLibrary,MouseSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseSimulator.cs,MouseUp,Cyclomatic complexity of the method is 9
Complex Method,MouseKeyboardLibrary,MouseSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseSimulator.cs,Click,Cyclomatic complexity of the method is 9
Complex Method,MouseKeyboardLibrary,MouseSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseSimulator.cs,DoubleClick,Cyclomatic complexity of the method is 9
Long Parameter List,MouseKeyboardLibrary,GlobalHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\GlobalHook.cs,ToAscii,The method has 5 parameters.
Long Parameter List,MouseKeyboardLibrary,MouseSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseSimulator.cs,mouse_event,The method has 5 parameters.
Long Statement,MouseKeyboardLibrary,GlobalHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\GlobalHook.cs,Start,The length of the statement  "		_handleToHook = SetWindowsHookEx (_hookType' _hookCallback' Marshal.GetHINSTANCE (Assembly.GetExecutingAssembly ().GetModules () [0])' 0); " is 138.
Long Statement,MouseKeyboardLibrary,KeyboardHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardHook.cs,HookCallbackProcedure,The length of the statement  "		KeyboardHookStruct keyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct)); " is 120.
Long Statement,MouseKeyboardLibrary,KeyboardHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardHook.cs,HookCallbackProcedure,The length of the statement  "		KeyEventArgs e = new KeyEventArgs ((Keys)(keyboardHookStruct.vkCode | (control ? (int)Keys.Control : 0) | (shift ? (int)Keys.Shift : 0) | (alt ? (int)Keys.Alt : 0))); " is 166.
Long Statement,MouseKeyboardLibrary,KeyboardHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardHook.cs,HookCallbackProcedure,The length of the statement  "			if (ToAscii (keyboardHookStruct.vkCode' keyboardHookStruct.scanCode' keyState' inBuffer' keyboardHookStruct.flags) == 1) { " is 122.
Long Statement,MouseKeyboardLibrary,MouseHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseHook.cs,HookCallbackProcedure,The length of the statement  "		MouseEventArgs e = new MouseEventArgs (button' (eventType == MouseEventType.DoubleClick ? 2 : 1)' mouseHookStruct.pt.x' mouseHookStruct.pt.y' (eventType == MouseEventType.MouseWheel ? (short)((mouseHookStruct.mouseData >> 16) & 0xffff) : 0)); " is 242.
Complex Conditional,MouseKeyboardLibrary,KeyboardHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardHook.cs,HookCallbackProcedure,The conditional expression  "nCode > -1 && (KeyDown != null || KeyUp != null || KeyPress != null)"  is complex.
Complex Conditional,MouseKeyboardLibrary,KeyboardHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardHook.cs,HookCallbackProcedure,The conditional expression  "wParam == WM_KEYDOWN && !handled && !e.SuppressKeyPress && KeyPress != null"  is complex.
Complex Conditional,MouseKeyboardLibrary,MouseHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseHook.cs,HookCallbackProcedure,The conditional expression  "nCode > -1 && (MouseDown != null || MouseUp != null || MouseMove != null)"  is complex.
Magic Number,MouseKeyboardLibrary,KeyboardHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardHook.cs,HookCallbackProcedure,The following statement contains a magic number: if (nCode > -1 && (KeyDown != null || KeyUp != null || KeyPress != null)) {  	KeyboardHookStruct keyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct));  	// Is Control being held down?  	bool control = ((GetKeyState (VK_LCONTROL) & 0x80) != 0) || ((GetKeyState (VK_RCONTROL) & 0x80) != 0);  	// Is Shift being held down?  	bool shift = ((GetKeyState (VK_LSHIFT) & 0x80) != 0) || ((GetKeyState (VK_RSHIFT) & 0x80) != 0);  	// Is Alt being held down?  	bool alt = ((GetKeyState (VK_LALT) & 0x80) != 0) || ((GetKeyState (VK_RALT) & 0x80) != 0);  	// Is CapsLock on?  	bool capslock = (GetKeyState (VK_CAPITAL) != 0);  	// Create event using keycode and control/shift/alt values found above  	KeyEventArgs e = new KeyEventArgs ((Keys)(keyboardHookStruct.vkCode | (control ? (int)Keys.Control : 0) | (shift ? (int)Keys.Shift : 0) | (alt ? (int)Keys.Alt : 0)));  	// Handle KeyDown and KeyUp events  	switch (wParam) {  	case WM_KEYDOWN:  	case WM_SYSKEYDOWN:  		if (KeyDown != null) {  			KeyDown (this' e);  			handled = handled || e.Handled;  		}  		break;  	case WM_KEYUP:  	case WM_SYSKEYUP:  		if (KeyUp != null) {  			KeyUp (this' e);  			handled = handled || e.Handled;  		}  		break;  	}  	// Handle KeyPress event  	if (wParam == WM_KEYDOWN && !handled && !e.SuppressKeyPress && KeyPress != null) {  		byte[] keyState = new byte[256];  		byte[] inBuffer = new byte[2];  		GetKeyboardState (keyState);  		if (ToAscii (keyboardHookStruct.vkCode' keyboardHookStruct.scanCode' keyState' inBuffer' keyboardHookStruct.flags) == 1) {  			char key = (char)inBuffer [0];  			if ((capslock ^ shift) && Char.IsLetter (key))  				key = Char.ToUpper (key);  			KeyPressEventArgs e2 = new KeyPressEventArgs (key);  			KeyPress (this' e2);  			handled = handled || e.Handled;  		}  	}  }  
Magic Number,MouseKeyboardLibrary,KeyboardHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardHook.cs,HookCallbackProcedure,The following statement contains a magic number: if (nCode > -1 && (KeyDown != null || KeyUp != null || KeyPress != null)) {  	KeyboardHookStruct keyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct));  	// Is Control being held down?  	bool control = ((GetKeyState (VK_LCONTROL) & 0x80) != 0) || ((GetKeyState (VK_RCONTROL) & 0x80) != 0);  	// Is Shift being held down?  	bool shift = ((GetKeyState (VK_LSHIFT) & 0x80) != 0) || ((GetKeyState (VK_RSHIFT) & 0x80) != 0);  	// Is Alt being held down?  	bool alt = ((GetKeyState (VK_LALT) & 0x80) != 0) || ((GetKeyState (VK_RALT) & 0x80) != 0);  	// Is CapsLock on?  	bool capslock = (GetKeyState (VK_CAPITAL) != 0);  	// Create event using keycode and control/shift/alt values found above  	KeyEventArgs e = new KeyEventArgs ((Keys)(keyboardHookStruct.vkCode | (control ? (int)Keys.Control : 0) | (shift ? (int)Keys.Shift : 0) | (alt ? (int)Keys.Alt : 0)));  	// Handle KeyDown and KeyUp events  	switch (wParam) {  	case WM_KEYDOWN:  	case WM_SYSKEYDOWN:  		if (KeyDown != null) {  			KeyDown (this' e);  			handled = handled || e.Handled;  		}  		break;  	case WM_KEYUP:  	case WM_SYSKEYUP:  		if (KeyUp != null) {  			KeyUp (this' e);  			handled = handled || e.Handled;  		}  		break;  	}  	// Handle KeyPress event  	if (wParam == WM_KEYDOWN && !handled && !e.SuppressKeyPress && KeyPress != null) {  		byte[] keyState = new byte[256];  		byte[] inBuffer = new byte[2];  		GetKeyboardState (keyState);  		if (ToAscii (keyboardHookStruct.vkCode' keyboardHookStruct.scanCode' keyState' inBuffer' keyboardHookStruct.flags) == 1) {  			char key = (char)inBuffer [0];  			if ((capslock ^ shift) && Char.IsLetter (key))  				key = Char.ToUpper (key);  			KeyPressEventArgs e2 = new KeyPressEventArgs (key);  			KeyPress (this' e2);  			handled = handled || e.Handled;  		}  	}  }  
Magic Number,MouseKeyboardLibrary,KeyboardHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardHook.cs,HookCallbackProcedure,The following statement contains a magic number: if (wParam == WM_KEYDOWN && !handled && !e.SuppressKeyPress && KeyPress != null) {  	byte[] keyState = new byte[256];  	byte[] inBuffer = new byte[2];  	GetKeyboardState (keyState);  	if (ToAscii (keyboardHookStruct.vkCode' keyboardHookStruct.scanCode' keyState' inBuffer' keyboardHookStruct.flags) == 1) {  		char key = (char)inBuffer [0];  		if ((capslock ^ shift) && Char.IsLetter (key))  			key = Char.ToUpper (key);  		KeyPressEventArgs e2 = new KeyPressEventArgs (key);  		KeyPress (this' e2);  		handled = handled || e.Handled;  	}  }  
Magic Number,MouseKeyboardLibrary,KeyboardHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardHook.cs,HookCallbackProcedure,The following statement contains a magic number: if (wParam == WM_KEYDOWN && !handled && !e.SuppressKeyPress && KeyPress != null) {  	byte[] keyState = new byte[256];  	byte[] inBuffer = new byte[2];  	GetKeyboardState (keyState);  	if (ToAscii (keyboardHookStruct.vkCode' keyboardHookStruct.scanCode' keyState' inBuffer' keyboardHookStruct.flags) == 1) {  		char key = (char)inBuffer [0];  		if ((capslock ^ shift) && Char.IsLetter (key))  			key = Char.ToUpper (key);  		KeyPressEventArgs e2 = new KeyPressEventArgs (key);  		KeyPress (this' e2);  		handled = handled || e.Handled;  	}  }  
Magic Number,MouseKeyboardLibrary,KeyboardSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardSimulator.cs,ParseKey,The following statement contains a magic number: switch (key) {  case Keys.Alt:  	return (byte)18;  case Keys.Control:  	return (byte)17;  case Keys.Shift:  	return (byte)16;  default:  	return (byte)key;  }  
Magic Number,MouseKeyboardLibrary,KeyboardSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardSimulator.cs,ParseKey,The following statement contains a magic number: switch (key) {  case Keys.Alt:  	return (byte)18;  case Keys.Control:  	return (byte)17;  case Keys.Shift:  	return (byte)16;  default:  	return (byte)key;  }  
Magic Number,MouseKeyboardLibrary,KeyboardSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardSimulator.cs,ParseKey,The following statement contains a magic number: switch (key) {  case Keys.Alt:  	return (byte)18;  case Keys.Control:  	return (byte)17;  case Keys.Shift:  	return (byte)16;  default:  	return (byte)key;  }  
Magic Number,MouseKeyboardLibrary,KeyboardSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardSimulator.cs,ParseKey,The following statement contains a magic number: return (byte)18;  
Magic Number,MouseKeyboardLibrary,KeyboardSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardSimulator.cs,ParseKey,The following statement contains a magic number: return (byte)17;  
Magic Number,MouseKeyboardLibrary,KeyboardSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardSimulator.cs,ParseKey,The following statement contains a magic number: return (byte)16;  
Magic Number,MouseKeyboardLibrary,MouseHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseHook.cs,HookCallbackProcedure,The following statement contains a magic number: if (nCode > -1 && (MouseDown != null || MouseUp != null || MouseMove != null)) {  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	MouseButtons button = GetButton (wParam);  	MouseEventType eventType = GetEventType (wParam);  	MouseEventArgs e = new MouseEventArgs (button' (eventType == MouseEventType.DoubleClick ? 2 : 1)' mouseHookStruct.pt.x' mouseHookStruct.pt.y' (eventType == MouseEventType.MouseWheel ? (short)((mouseHookStruct.mouseData >> 16) & 0xffff) : 0));  	// Prevent multiple Right Click events (this probably happens for popup menus)  	if (button == MouseButtons.Right && mouseHookStruct.flags != 0) {  		eventType = MouseEventType.None;  	}  	switch (eventType) {  	case MouseEventType.MouseDown:  		if (MouseDown != null) {  			MouseDown (this' e);  		}  		break;  	case MouseEventType.MouseUp:  		if (Click != null) {  			Click (this' new EventArgs ());  		}  		if (MouseUp != null) {  			MouseUp (this' e);  		}  		break;  	case MouseEventType.DoubleClick:  		if (DoubleClick != null) {  			DoubleClick (this' new EventArgs ());  		}  		break;  	case MouseEventType.MouseWheel:  		if (MouseWheel != null) {  			MouseWheel (this' e);  		}  		break;  	case MouseEventType.MouseMove:  		if (MouseMove != null) {  			MouseMove (this' e);  		}  		break;  	default:  		break;  	}  }  
Magic Number,MouseKeyboardLibrary,MouseHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseHook.cs,HookCallbackProcedure,The following statement contains a magic number: if (nCode > -1 && (MouseDown != null || MouseUp != null || MouseMove != null)) {  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	MouseButtons button = GetButton (wParam);  	MouseEventType eventType = GetEventType (wParam);  	MouseEventArgs e = new MouseEventArgs (button' (eventType == MouseEventType.DoubleClick ? 2 : 1)' mouseHookStruct.pt.x' mouseHookStruct.pt.y' (eventType == MouseEventType.MouseWheel ? (short)((mouseHookStruct.mouseData >> 16) & 0xffff) : 0));  	// Prevent multiple Right Click events (this probably happens for popup menus)  	if (button == MouseButtons.Right && mouseHookStruct.flags != 0) {  		eventType = MouseEventType.None;  	}  	switch (eventType) {  	case MouseEventType.MouseDown:  		if (MouseDown != null) {  			MouseDown (this' e);  		}  		break;  	case MouseEventType.MouseUp:  		if (Click != null) {  			Click (this' new EventArgs ());  		}  		if (MouseUp != null) {  			MouseUp (this' e);  		}  		break;  	case MouseEventType.DoubleClick:  		if (DoubleClick != null) {  			DoubleClick (this' new EventArgs ());  		}  		break;  	case MouseEventType.MouseWheel:  		if (MouseWheel != null) {  			MouseWheel (this' e);  		}  		break;  	case MouseEventType.MouseMove:  		if (MouseMove != null) {  			MouseMove (this' e);  		}  		break;  	default:  		break;  	}  }  
Magic Number,MouseKeyboardLibrary,MouseSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseSimulator.cs,MouseUp,The following statement contains a magic number: mouse_event (((int)button) * 2' 0' 0' 0' 0);  
Missing Default,MouseKeyboardLibrary,KeyboardHook,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardHook.cs,HookCallbackProcedure,The following switch statement is missing a default case: switch (wParam) {  case WM_KEYDOWN:  case WM_SYSKEYDOWN:  	if (KeyDown != null) {  		KeyDown (this' e);  		handled = handled || e.Handled;  	}  	break;  case WM_KEYUP:  case WM_SYSKEYUP:  	if (KeyUp != null) {  		KeyUp (this' e);  		handled = handled || e.Handled;  	}  	break;  }  
Missing Default,MouseKeyboardLibrary,KeyboardSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\KeyboardSimulator.cs,SimulateStandardShortcut,The following switch statement is missing a default case: switch (shortcut) {  case StandardShortcut.Copy:  	KeyDown (Keys.Control);  	KeyPress (Keys.C);  	KeyUp (Keys.Control);  	break;  case StandardShortcut.Cut:  	KeyDown (Keys.Control);  	KeyPress (Keys.X);  	KeyUp (Keys.Control);  	break;  case StandardShortcut.Paste:  	KeyDown (Keys.Control);  	KeyPress (Keys.V);  	KeyUp (Keys.Control);  	break;  case StandardShortcut.SelectAll:  	KeyDown (Keys.Control);  	KeyPress (Keys.A);  	KeyUp (Keys.Control);  	break;  case StandardShortcut.Save:  	KeyDown (Keys.Control);  	KeyPress (Keys.S);  	KeyUp (Keys.Control);  	break;  case StandardShortcut.Open:  	KeyDown (Keys.Control);  	KeyPress (Keys.O);  	KeyUp (Keys.Control);  	break;  case StandardShortcut.New:  	KeyDown (Keys.Control);  	KeyPress (Keys.N);  	KeyUp (Keys.Control);  	break;  case StandardShortcut.Close:  	KeyDown (Keys.Alt);  	KeyPress (Keys.F4);  	KeyUp (Keys.Alt);  	break;  case StandardShortcut.Print:  	KeyDown (Keys.Control);  	KeyPress (Keys.P);  	KeyUp (Keys.Control);  	break;  }  
Missing Default,MouseKeyboardLibrary,MouseSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseSimulator.cs,MouseDown,The following switch statement is missing a default case: switch (button) {  case MouseButtons.Left:  	MouseDown (MouseButton.Left);  	break;  case MouseButtons.Middle:  	MouseDown (MouseButton.Middle);  	break;  case MouseButtons.Right:  	MouseDown (MouseButton.Right);  	break;  }  
Missing Default,MouseKeyboardLibrary,MouseSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseSimulator.cs,MouseUp,The following switch statement is missing a default case: switch (button) {  case MouseButtons.Left:  	MouseUp (MouseButton.Left);  	break;  case MouseButtons.Middle:  	MouseUp (MouseButton.Middle);  	break;  case MouseButtons.Right:  	MouseUp (MouseButton.Right);  	break;  }  
Missing Default,MouseKeyboardLibrary,MouseSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseSimulator.cs,Click,The following switch statement is missing a default case: switch (button) {  case MouseButtons.Left:  	Click (MouseButton.Left);  	break;  case MouseButtons.Middle:  	Click (MouseButton.Middle);  	break;  case MouseButtons.Right:  	Click (MouseButton.Right);  	break;  }  
Missing Default,MouseKeyboardLibrary,MouseSimulator,C:\repos\AbbasNaqvi_Projects\MouseKeyboardLibrary\Backup\MouseKeyboardLibrary\MouseSimulator.cs,DoubleClick,The following switch statement is missing a default case: switch (button) {  case MouseButtons.Left:  	DoubleClick (MouseButton.Left);  	break;  case MouseButtons.Middle:  	DoubleClick (MouseButton.Middle);  	break;  case MouseButtons.Right:  	DoubleClick (MouseButton.Right);  	break;  }  
