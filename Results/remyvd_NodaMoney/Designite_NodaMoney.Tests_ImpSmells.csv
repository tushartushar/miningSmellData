Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NodaMoney.Tests.CurrencySpec,GivenIWantToCompareCurrenciesToIsoXML,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenCurrenciesInISOList_ThenShouldBeDefinedInRegistry,The length of the statement  "            missingCurrencies.Should().HaveCount(0' $"expected defined currencies to contain {string.Join("' "' missingCurrencies.Select(a => a.Currency + " " + a.CurrencyName))}"); " is 169.
Long Statement,NodaMoney.Tests.CurrencySpec,GivenIWantToCompareCurrenciesToIsoXML,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenCurrenciesInRegistryAndCurrent_ThenTheyShouldAlsoBeDefinedInTheIsoList,The length of the statement  "            notDefinedCurrencies.Should().HaveCount(0' $"did not expect currencies to contain {string.Join("' "' notDefinedCurrencies.Select(a => a.Code))}"); " is 146.
Long Statement,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToConvertMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenConvertingWithExchangeRateWithDifferentCurrencies_ThenThrowException,The length of the statement  "            action.Should().Throw<ArgumentException>().WithMessage("Money should have the same currency as the base currency or the quote currency!*"); " is 139.
Long Statement,NodaMoney.Tests.MoneyFormattableSpec,GivenIWantMoneyAsString,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFormattableSpec.cs,WhenUsingToStringWithGFormat_ThenReturnsTheSameAsTheDefaultFormat,The length of the statement  "            // according to https://docs.microsoft.com/en-us/dotnet/api/system.iformattable.tostring?view=netframework-4.7.2#notes-to-implementers " is 134.
Long Statement,NodaMoney.Tests.MoneyFormattableSpec,GivenIWantMoneyAsString,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFormattableSpec.cs,WhenUsingToStringWithGFormatWithCulture_ThenReturnsTheSameAsTheDefaultFormatWithThatCulture,The length of the statement  "            _yen.ToString("G"' CultureInfo.GetCultureInfo("nl-NL")).Should().Be(_yen.ToString(null' CultureInfo.GetCultureInfo("nl-NL"))); " is 126.
Long Statement,NodaMoney.Tests.MoneyFormattableSpec,GivenIWantMoneyAsString,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFormattableSpec.cs,WhenUsingToStringWithGFormatWithCulture_ThenReturnsTheSameAsTheDefaultFormatWithThatCulture,The length of the statement  "            _yen.ToString("G"' CultureInfo.GetCultureInfo("fr-FR")).Should().Be(_yen.ToString(null' CultureInfo.GetCultureInfo("fr-FR"))); " is 126.
Long Statement,NodaMoney.Tests.Serialization.RavenDbSerializationSpec,GivenIWantToStoreInRavenDb,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\RavenDbSerializationSpec.cs,WhenObjectWithMoneyAttribute_ThenThisMustWork,The length of the statement  "            SampleData sample = new SampleData { Name = "Test"' Price = new Money(123.56' "EUR")' BaseCurrency = Currency.FromCode("USD") }; " is 128.
Magic Number,NodaMoney.Tests.CurrencyBuilderSpec,GivenIWantToCreateCustomCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencyBuilderSpec.cs,WhenRegisterBitCoinInIsoNamespace_ThenShouldBeAvailable,The following statement contains a magic number: var builder = new CurrencyBuilder("BTC"' "ISO-4217")              {                  EnglishName = "Bitcoin"'                  Symbol = "฿"'                  ISONumber = "123"' // iso number                  DecimalDigits = 8              };
Magic Number,NodaMoney.Tests.CurrencyBuilderSpec,GivenIWantToCreateCustomCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencyBuilderSpec.cs,WhenRegisterBitCoin_ThenShouldBeAvailableByExplicitNamespace,The following statement contains a magic number: var builder = new CurrencyBuilder("BTC1"' "virtual")              {                  EnglishName = "Bitcoin"'                  Symbol = "฿"'                  ISONumber = "123"' // iso number                  DecimalDigits = 8              };
Magic Number,NodaMoney.Tests.CurrencyBuilderSpec,GivenIWantToCreateCustomCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencyBuilderSpec.cs,WhenBuildBitCoin_ThenItShouldSucceedButNotBeRegistered,The following statement contains a magic number: var builder = new CurrencyBuilder("BTC2"' "virtual")              {                  EnglishName = "Bitcoin"'                  Symbol = "฿"'                  ISONumber = "123"' // iso number                  DecimalDigits = 8              };
Magic Number,NodaMoney.Tests.CurrencyBuilderSpec,GivenIWantToCreateCustomCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencyBuilderSpec.cs,WhenSymbolIsEmpty_ThenSymbolMustBeDefaultCurrencySign,The following statement contains a magic number: Currency result = new CurrencyBuilder("BTC5"' "ISO-4217")              {                  EnglishName = "Bitcoin"'                  //Symbol = "฿"'                  ISONumber = "123"' // iso number                  DecimalDigits = 8'              }.Register();
Magic Number,NodaMoney.Tests.CurrencyBuilderSpec,GivenIWantToUnregisterCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencyBuilderSpec.cs,WhenUnregisterCustomCurrency_ThenThisMustSucceed,The following statement contains a magic number: var builder = new CurrencyBuilder("XYZ"' "virtual")              {                  EnglishName = "Xyz"'                  Symbol = "฿"'                  ISONumber = "123"' // iso number                  DecimalDigits = 4              };
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToKnowAllCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenAskingForIt_ThenAllCurrenciesShouldBeReturned,The following statement contains a magic number: currencies.Count().Should().BeGreaterThan(100);
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToKnowMinorUnit,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenAskingForEuro_ThenMinorUnitShouldBeOneCent,The following statement contains a magic number: _eur.MinorUnit.Should().Be(0.01m);
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToKnowMinorUnit,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenAskingForEuro_ThenMinorUnitShouldBeOneCent,The following statement contains a magic number: _eur.DecimalDigits.Should().Be(2);
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToKnowMinorUnit,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenAskingForDinar_ThenMinorUnitShouldBeOneFils,The following statement contains a magic number: _din.MinorUnit.Should().Be(0.001m);
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToKnowMinorUnit,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenAskingForDinar_ThenMinorUnitShouldBeOneFils,The following statement contains a magic number: _din.DecimalDigits.Should().Be(3);
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToKnowMinorUnit,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenAskingForMalagasyAriary_ThenMinorUnitShouldBeOneFith,The following statement contains a magic number: _mga.MinorUnit.Should().Be(0.2m);
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToKnowMinorUnit,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenAskingForMalagasyAriary_ThenMinorUnitShouldBeOneFith,The following statement contains a magic number: _mga.DecimalDigits.Should().Be(0.69897000433601880478626110527551);
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToInitiateInternallyACurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenParamsAreCorrect_ThenCreatingShouldSucceed,The following statement contains a magic number: var eur = new Currency("EUR"' "978"' 2' "Euro"' "€");
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToInitiateInternallyACurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenParamsAreCorrect_ThenCreatingShouldSucceed,The following statement contains a magic number: eur.DecimalDigits.Should().Be(2);
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToInitiateInternallyACurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenCodeIsNull_ThenCreatingShouldThrow,The following statement contains a magic number: Action action = () => { var eur = new Currency(null' "978"' 2' "Euro"' "€"); };
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToInitiateInternallyACurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenNumberIsNull_ThenNumberShouldDefaultToEmpty,The following statement contains a magic number: var eur = new Currency("EUR"' null' 2' "Euro"' "€");
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToInitiateInternallyACurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenEnglishNameIsNull_ThenEnglishNameShouldDefaultToEmpty,The following statement contains a magic number: var eur = new Currency("EUR"' "978"' 2' null' "€");
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToInitiateInternallyACurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenSignIsNull_ThenSignShouldDefaultToGenericCurrencySign,The following statement contains a magic number: var eur = new Currency("EUR"' "978"' 2' "Euro"' null);
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToInitiateInternallyACurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenDecimalDigitIsLowerThenMinusOne_ThenCreatingShouldThrow,The following statement contains a magic number: Action action = () => { var eur = new Currency("EUR"' "978"' -2' "Euro"' "€"); };
Magic Number,NodaMoney.Tests.CurrencySpec,GiveIWantToUseALotOfCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenCreatingOneMillion_ThenItShouldBeWithinFourSeconds,The following statement contains a magic number: double max = 1000000;
Magic Number,NodaMoney.Tests.CurrencySpec,GiveIWantToUseALotOfCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenCreatingOneMillion_ThenItShouldBeWithinFourSeconds,The following statement contains a magic number: Action action = () =>                  {                      sw.Restart();                      for (int i = 0; i < max; i++)                      {                          if (i % 3 == 0)                              c = Currency.FromCode("EUR");                          else if (i % 2 == 0)                              c = Currency.FromCode("USD");                          else                              c = Currency.FromCode("JPY");                      }                      sw.Stop();                  };
Magic Number,NodaMoney.Tests.CurrencySpec,GiveIWantToUseALotOfCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenCreatingOneMillion_ThenItShouldBeWithinFourSeconds,The following statement contains a magic number: Action action = () =>                  {                      sw.Restart();                      for (int i = 0; i < max; i++)                      {                          if (i % 3 == 0)                              c = Currency.FromCode("EUR");                          else if (i % 2 == 0)                              c = Currency.FromCode("USD");                          else                              c = Currency.FromCode("JPY");                      }                      sw.Stop();                  };
Magic Number,NodaMoney.Tests.CurrencySpec,GiveIWantToUseALotOfCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenCreatingOneMillion_ThenItShouldBeWithinFourSeconds,The following statement contains a magic number: action.ExecutionTime().Should().BeLessOrEqualTo(new TimeSpan(0' 0' 4));
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidUntilACertainDate_ThenShouldBeValidStrictlyBeforeThatDate,The following statement contains a magic number: currency.ValidTo.Should().Be(new DateTime(2008' 1' 1));
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidUntilACertainDate_ThenShouldBeValidStrictlyBeforeThatDate,The following statement contains a magic number: currency.IsValidOn(new DateTime(2007' 12' 31)).Should().BeTrue();
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidUntilACertainDate_ThenShouldBeValidStrictlyBeforeThatDate,The following statement contains a magic number: currency.IsValidOn(new DateTime(2007' 12' 31)).Should().BeTrue();
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidUntilACertainDate_ThenShouldBeValidStrictlyBeforeThatDate,The following statement contains a magic number: currency.IsValidOn(new DateTime(2007' 12' 31)).Should().BeTrue();
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidUntilACertainDate_ThenShouldBeValidStrictlyBeforeThatDate,The following statement contains a magic number: currency.IsValidOn(new DateTime(2008' 1' 1)).Should().BeTrue("the until date is excluding");
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidFromACertainDate_ThenShouldBeValidFromThatDate,The following statement contains a magic number: currency.ValidFrom.Should().Be(new DateTime(2018' 8' 20));
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidFromACertainDate_ThenShouldBeValidFromThatDate,The following statement contains a magic number: currency.ValidFrom.Should().Be(new DateTime(2018' 8' 20));
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidFromACertainDate_ThenShouldBeValidFromThatDate,The following statement contains a magic number: currency.ValidFrom.Should().Be(new DateTime(2018' 8' 20));
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidFromACertainDate_ThenShouldBeValidFromThatDate,The following statement contains a magic number: currency.IsValidOn(new DateTime(2018' 8' 19)).Should().BeFalse();
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidFromACertainDate_ThenShouldBeValidFromThatDate,The following statement contains a magic number: currency.IsValidOn(new DateTime(2018' 8' 19)).Should().BeFalse();
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidFromACertainDate_ThenShouldBeValidFromThatDate,The following statement contains a magic number: currency.IsValidOn(new DateTime(2018' 8' 19)).Should().BeFalse();
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidFromACertainDate_ThenShouldBeValidFromThatDate,The following statement contains a magic number: currency.IsValidOn(new DateTime(2018' 8' 20)).Should().BeTrue();
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidFromACertainDate_ThenShouldBeValidFromThatDate,The following statement contains a magic number: currency.IsValidOn(new DateTime(2018' 8' 20)).Should().BeTrue();
Magic Number,NodaMoney.Tests.CurrencySpec,GivenIWantToValidateTheDateRange,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\CurrencySpec.cs,WhenValidatingACurrencyThatIsValidFromACertainDate_ThenShouldBeValidFromThatDate,The following statement contains a magic number: currency.IsValidOn(new DateTime(2018' 8' 20)).Should().BeTrue();
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToConvertMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenConvertingEurosToDollars_ThenConversionShouldBeCorrect,The following statement contains a magic number: var converted = _exchangeRate.Convert(Money.Euro(100.99M));
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToConvertMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenConvertingEurosToDollars_ThenConversionShouldBeCorrect,The following statement contains a magic number: converted.Amount.Should().Be(127.16M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToConvertMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenConvertingEurosToDollarsAndThenBack_ThenEndResultShouldBeTheSameAsInTheBeginning,The following statement contains a magic number: var converted = _exchangeRate.Convert(Money.Euro(100.99M));
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToConvertMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenConvertingEurosToDollarsAndThenBack_ThenEndResultShouldBeTheSameAsInTheBeginning,The following statement contains a magic number: revert.Amount.Should().Be(100.99M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToConvertMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenConvertingWithExchangeRateWithDifferentCurrencies_ThenThrowException,The following statement contains a magic number: Action action = () => _exchangeRate.Convert(Money.Yen(324));
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDoubleAndNoNumberRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedToSixDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euro' _dollar' 1.2591478D);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDoubleAndNoNumberRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedToSixDecimals,The following statement contains a magic number: fx.Value.Should().Be(1.259148M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDoubleAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euro' _dollar' 1.2591478D' 3);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDoubleAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euro' _dollar' 1.2591478D' 3);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDoubleAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: fx.Value.Should().Be(1.259M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: var fx = new ExchangeRate(_euro' _dollar' 1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: fx.Value.Should().Be(1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsFloatAndNoNumberRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedToSixDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euro' _dollar' 1.2591478F);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsFloatAndNoNumberRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedToSixDecimals,The following statement contains a magic number: fx.Value.Should().Be(1.259148M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsFloatAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euro' _dollar' 1.2591478F' 3);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsFloatAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euro' _dollar' 1.2591478F' 3);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsFloatAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: fx.Value.Should().Be(1.259M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenBaseAndQuoteCurrencyAreTheSame_ThenThrowException,The following statement contains a magic number: Action action = () => new ExchangeRate(_euro' _euro' 1.2591F);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsLessThenZero_ThenThrowException,The following statement contains a magic number: Action action = () => new ExchangeRate(_euro' _euro' -1.2F);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenBaseCurrencyIsNull_ThenThrowException,The following statement contains a magic number: Action action = () => new ExchangeRate(default(Currency)' _dollar' 1.2591);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrencies,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenQuoteCurrencyIsNull_ThenThrowException,The following statement contains a magic number: Action action = () => new ExchangeRate(_euro' default(Currency)' 1.2591);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDoubleAndNoNumberRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedToSixDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euroAsString' _dollarAsString' 1.2591478D);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDoubleAndNoNumberRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedToSixDecimals,The following statement contains a magic number: fx.Value.Should().Be(1.259148M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDoubleAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euroAsString' _dollarAsString' 1.2591478D' 3);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDoubleAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euroAsString' _dollarAsString' 1.2591478D' 3);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDoubleAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: fx.Value.Should().Be(1.259M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: var fx = new ExchangeRate(_euroAsString' _dollarAsString' 1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: fx.Value.Should().Be(1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsFloatAndNoNumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedToSixDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euroAsString' _dollarAsString' 1.2591478F);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsFloatAndNoNumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedToSixDecimals,The following statement contains a magic number: fx.Value.Should().Be(1.259148M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsFloatAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euroAsString' _dollarAsString' 1.2591478F' 3);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsFloatAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: var fx = new ExchangeRate(_euroAsString' _dollarAsString' 1.2591478F' 3);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenRateIsFloatAndANumberOfRoundingDecimalsIsGiven_ThenCreatingShouldSucceedWithValueRoundedThatNumberOfDecimals,The following statement contains a magic number: fx.Value.Should().Be(1.259M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToCreateAnExchangeRateWithCurrenciesAsStrings,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenBaseAndQuoteCurrencyAreTheSame_ThenCreatingShouldThrow,The following statement contains a magic number: Action action = () => new ExchangeRate(_euroAsString' _euroAsString' 1.2591F);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToParseACurrencyPair,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenCurrencyPairInUsCulture_ThenParsingShouldSucceed,The following statement contains a magic number: fx1.Value.Should().Be(1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToParseACurrencyPair,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenCurrencyPairInUsCulture_ThenParsingShouldSucceed,The following statement contains a magic number: fx2.Value.Should().Be(1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToParseACurrencyPair,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenCurrencyPairInNlCulture_ThenParsingShouldSucceed,The following statement contains a magic number: fx1.Value.Should().Be(1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToParseACurrencyPair,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenCurrencyPairInNlCulture_ThenParsingShouldSucceed,The following statement contains a magic number: fx2.Value.Should().Be(1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToTryParseACurrencyPair,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenCurrencyPairInUsCulture_ThenParsingShouldSucceed,The following statement contains a magic number: fx1.Value.Should().Be(1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToTryParseACurrencyPair,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenCurrencyPairInUsCulture_ThenParsingShouldSucceed,The following statement contains a magic number: fx2.Value.Should().Be(1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToTryParseACurrencyPair,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenCurrencyPairInNlCulture_ThenParsingShouldSucceed,The following statement contains a magic number: fx1.Value.Should().Be(1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToTryParseACurrencyPair,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenCurrencyPairInNlCulture_ThenParsingShouldSucceed,The following statement contains a magic number: fx2.Value.Should().Be(1.2591M);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToDeconstructExchangeRate,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenDeconstructing_ThenShouldSucceed,The following statement contains a magic number: var fx = new ExchangeRate(Currency.FromCode("EUR")' Currency.FromCode("USD")' 1.2591m);
Magic Number,NodaMoney.Tests.ExchangeRateSpec,GivenIWantToDeconstructExchangeRate,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\ExchangeRateSpec.cs,WhenDeconstructing_ThenShouldSucceed,The following statement contains a magic number: rate.Should().Be(1.2591m);
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing5CentsByTwo_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: var enumerable = _eurocent5.SafeDivide(2).ToList();
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing5CentsByTwo_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(2)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                           new Money(0.02m' "EUR")'                          new Money(0.03m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing5CentsByTwo_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(2)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                           new Money(0.02m' "EUR")'                          new Money(0.03m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing5CentsByTwo_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(2)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                           new Money(0.02m' "EUR")'                          new Money(0.03m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing5CentsByThree_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: var enumerable = _eurocent5.SafeDivide(3).ToList();
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing5CentsByThree_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(3)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                          new Money(0.02m' "EUR")'                          new Money(0.02m' "EUR")'                          new Money(0.01m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing5CentsByThree_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(3)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                          new Money(0.02m' "EUR")'                          new Money(0.02m' "EUR")'                          new Money(0.01m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing5CentsByThree_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(3)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                          new Money(0.02m' "EUR")'                          new Money(0.02m' "EUR")'                          new Money(0.01m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing5CentsByThree_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(3)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                          new Money(0.02m' "EUR")'                          new Money(0.02m' "EUR")'                          new Money(0.01m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatios_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: var enumerable = _euro1.SafeDivide(new[] { 2' 3' 3 }).ToList();
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatios_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: var enumerable = _euro1.SafeDivide(new[] { 2' 3' 3 }).ToList();
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatios_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: var enumerable = _euro1.SafeDivide(new[] { 2' 3' 3 }).ToList();
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatios_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(3)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                          new Money(0.25m' "EUR")'                          new Money(0.38m' "EUR")'                          new Money(0.37m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatios_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(3)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                          new Money(0.25m' "EUR")'                          new Money(0.38m' "EUR")'                          new Money(0.37m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatios_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(3)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                          new Money(0.25m' "EUR")'                          new Money(0.38m' "EUR")'                          new Money(0.37m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatios_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(3)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                          new Money(0.25m' "EUR")'                          new Money(0.38m' "EUR")'                          new Money(0.37m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatiosWhereOneIsVerySmall_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: var enumerable = _euro1.SafeDivide(new[] { 200' 300' 1 }).ToList();
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatiosWhereOneIsVerySmall_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: var enumerable = _euro1.SafeDivide(new[] { 200' 300' 1 }).ToList();
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatiosWhereOneIsVerySmall_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(3)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                          new Money(0.40m' "EUR")'                          new Money(0.60m' "EUR")'                          new Money(0.0m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatiosWhereOneIsVerySmall_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(3)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                          new Money(0.40m' "EUR")'                          new Money(0.60m' "EUR")'                          new Money(0.0m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividing1EuroByGivenRatiosWhereOneIsVerySmall_ThenDivisionShouldNotLoseCents,The following statement contains a magic number: enumerable.Should().NotBeNullOrEmpty()                      .And.HaveCount(3)                      .And.ContainItemsAssignableTo<Money>()                      .And.ContainInOrder(new[]                      {                          new Money(0.40m' "EUR")'                          new Money(0.60m' "EUR")'                          new Money(0.0m' "EUR")                      });
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividingByGivenRatiosWithMinus1_ThenAnExceptionShouldBeThrowed,The following statement contains a magic number: Action action = () => _euro1.SafeDivide(new[] { 2' -1' 3 }).ToList();
Magic Number,NodaMoney.Tests.Extensions,GivenIWantToSafelyDivideMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Extensions\MoneyExtensionsSafeDivideTests.cs,WhenDividingByGivenRatiosWithMinus1_ThenAnExceptionShouldBeThrowed,The following statement contains a magic number: Action action = () => _euro1.SafeDivide(new[] { 2' -1' 3 }).ToList();
Magic Number,NodaMoney.Tests.Helpers,RenderSpecs,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Helpers\RenderSpecs.cs,Render,The following statement contains a magic number: output.WriteLine(new string('-'' 50));
Magic Number,NodaMoney.Tests.MoneyCalculationsSpec,GivenIWantToDoCalculationsWithoutRoundingInBetween,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyCalculationsSpec.cs,When_Then,The following statement contains a magic number: Func<decimal' decimal> fx = amount =>              {                   executed = true;                  return amount / 3m;              };
Magic Number,NodaMoney.Tests.MoneyCalculationsSpec,GivenIWantToDoCalculationsWithoutRoundingInBetween,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyCalculationsSpec.cs,When_Then,The following statement contains a magic number: var subject= new Money(5m);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToConvertMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenConvertingToDecimal_ThenThisShouldSucceed,The following statement contains a magic number: result.Should().Be(765.43m);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToConvertMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenConvertingToDouble_ThenThisShouldSucceed,The following statement contains a magic number: result.Should().BeApproximately(765.43d' 0.001d);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToConvertMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenConvertingToDouble_ThenThisShouldSucceed,The following statement contains a magic number: result.Should().BeApproximately(765.43d' 0.001d);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToConvertMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenConvertingToSingle_ThenThisShouldSucceed,The following statement contains a magic number: result.Should().BeApproximately(765.43f' 0.001f);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToConvertMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenConvertingToSingle_ThenThisShouldSucceed,The following statement contains a magic number: result.Should().BeApproximately(765.43f' 0.001f);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToExplicitCastMoneyToNumericType,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenExplicitCastingToDecimal_ThenCastingShouldSucceed,The following statement contains a magic number: m.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToExplicitCastMoneyToNumericType,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenExplicitCastingToDouble_ThenCastingShouldSucceed,The following statement contains a magic number: d.Should().Be(10.00d);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToExplicitCastMoneyToNumericType,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenExplicitCastingToFloat_ThenCastingShouldSucceed,The following statement contains a magic number: f.Should().Be(10.00f);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToExplicitCastMoneyToNumericType,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenExplicitCastingToLong_ThenCastingShouldSucceed,The following statement contains a magic number: l.Should().Be(10L);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToExplicitCastMoneyToNumericType,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenExplicitCastingToByte_ThenCastingShouldSucceed,The following statement contains a magic number: b.Should().Be(10);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToExplicitCastMoneyToNumericType,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenExplicitCastingToShort_ThenCastingShouldSucceed,The following statement contains a magic number: s.Should().Be(10);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToExplicitCastMoneyToNumericType,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenExplicitCastingToInt_ThenCastingShouldSucceed,The following statement contains a magic number: i.Should().Be(10);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsByte_ThenCreatingShouldSucceed,The following statement contains a magic number: const byte byteValue = 50;
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsByte_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(50);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsSbyte_ThenCreatingShouldSucceed,The following statement contains a magic number: const sbyte sbyteValue = 75;
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsSbyte_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(75);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsInt16_ThenCreatingShouldSucceed,The following statement contains a magic number: const short int16Value = 100;
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsInt16_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(100);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsInt32_ThenCreatingShouldSucceed,The following statement contains a magic number: const int int32Value = 200;
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsInt32_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(200);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsInt64_ThenCreatingShouldSucceed,The following statement contains a magic number: const long int64Value = 300;
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsInt64_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(300);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsUint16_ThenCreatingShouldSucceed,The following statement contains a magic number: const ushort uInt16Value = 400;
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsUint16_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(400);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsUint32_ThenCreatingShouldSucceed,The following statement contains a magic number: const uint uInt32Value = 500;
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsUint32_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(500);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsUint64_ThenCreatingShouldSucceed,The following statement contains a magic number: const ulong uInt64Value = 600;
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsUint64_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(600);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsSingleAndExplicitCast_ThenCreatingShouldSucceed,The following statement contains a magic number: const float singleValue = 700;
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsSingleAndExplicitCast_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(700);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsDoubleAndExplicitCast_ThenCreatingShouldSucceed,The following statement contains a magic number: var money = (Money)25.00;
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsDoubleAndExplicitCast_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(25.00m);
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: Money money = 25.00m;
Magic Number,NodaMoney.Tests.MoneyConvertibleSpec,GivenIWantToCastNumericTypeToMoneyWithImplicitCurrencyFromTheCurrentCulture,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyConvertibleSpec.cs,WhenValueIsDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(25.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: var euros = Money.Euro(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: euros.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var euros1 = Money.Euro(10.005m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var euros2 = Money.Euro(10.005m' MidpointRounding.AwayFromZero);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: euros2.Amount.Should().Be(10.01m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: var euros = Money.Euro(10.00);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: euros.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var euros1 = Money.Euro(10.005);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var euros2 = Money.Euro(10.005' MidpointRounding.AwayFromZero);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: euros2.Amount.Should().Be(10.01m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenLong_ThenCreatingShouldSucceed,The following statement contains a magic number: var euros = Money.Euro(10L);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenLong_ThenCreatingShouldSucceed,The following statement contains a magic number: euros.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenULong_ThenCreatingShouldSucceed,The following statement contains a magic number: var euros = Money.Euro(10UL);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantEuros,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenULong_ThenCreatingShouldSucceed,The following statement contains a magic number: euros.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: var dollars = Money.USDollar(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: dollars.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var dollars1 = Money.USDollar(10.005m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var dollars2 = Money.USDollar(10.005m' MidpointRounding.AwayFromZero);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: dollars2.Amount.Should().Be(10.01m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: var dollars = Money.USDollar(10.00);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: dollars.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var dollars1 = Money.USDollar(10.005);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var dollars2 = Money.USDollar(10.005' MidpointRounding.AwayFromZero);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: dollars2.Amount.Should().Be(10.01m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenLong_ThenCreatingShouldSucceed,The following statement contains a magic number: var dollars = Money.USDollar(10L);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenLong_ThenCreatingShouldSucceed,The following statement contains a magic number: dollars.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenULong_ThenCreatingShouldSucceed,The following statement contains a magic number: var dollars = Money.USDollar(10UL);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantDollars,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenULong_ThenCreatingShouldSucceed,The following statement contains a magic number: dollars.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: var yens = Money.Yen(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: yens.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var yen1 = Money.Yen(10.5m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var yen2 = Money.Yen(10.5m' MidpointRounding.AwayFromZero);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: yen2.Amount.Should().Be(11m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: var yens = Money.Yen(10.00);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: yens.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var yen1 = Money.Yen(10.5);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var yen2 = Money.Yen(10.5' MidpointRounding.AwayFromZero);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: yen2.Amount.Should().Be(11m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenLong_ThenCreatingShouldSucceed,The following statement contains a magic number: var yens = Money.Yen(10L);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenLong_ThenCreatingShouldSucceed,The following statement contains a magic number: yens.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenULong_ThenCreatingShouldSucceed,The following statement contains a magic number: var yens = Money.Yen(10UL);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYens,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenULong_ThenCreatingShouldSucceed,The following statement contains a magic number: yens.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds = Money.PoundSterling(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds1 = Money.PoundSterling(10.005m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds2 = Money.PoundSterling(10.005m' MidpointRounding.AwayFromZero);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds2.Amount.Should().Be(10.01m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds = Money.PoundSterling(10.00);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds1 = Money.PoundSterling(10.005);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds2 = Money.PoundSterling(10.005' MidpointRounding.AwayFromZero);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds2.Amount.Should().Be(10.01m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenLong_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds = Money.PoundSterling(10L);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenLong_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenULong_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds = Money.PoundSterling(10UL);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantPonds,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenULong_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds = Money.Yuan(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds1 = Money.Yuan(10.005m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds2 = Money.Yuan(10.005m' MidpointRounding.AwayFromZero);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDecimalAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds2.Amount.Should().Be(10.01m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds = Money.Yuan(10.00);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds1 = Money.Yuan(10.005);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds2 = Money.Yuan(10.005' MidpointRounding.AwayFromZero);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenDoubleAndRoundingAwayFromZero_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds2.Amount.Should().Be(10.01m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenLong_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds = Money.Yuan(10L);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenLong_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenULong_ThenCreatingShouldSucceed,The following statement contains a magic number: var pounds = Money.Yuan(10UL);
Magic Number,NodaMoney.Tests.MoneyFiveMostUsedCurrenciesSpec,GivenIWantYuan,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyFiveMostUsedCurrenciesSpec.cs,WhenULong_ThenCreatingShouldSucceed,The following statement contains a magic number: pounds.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenInBelgiumDutchSpeaking_ThenThisShouldSucceed,The following statement contains a magic number: euro.Should().Be(new Money(765.43m' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenInBelgiumFrenchSpeaking_ThenThisShouldSucceed,The following statement contains a magic number: euro.Should().Be(new Money(765.43' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingNumberWithoutCurrency_ThenThisUseCurrencyOfCurrentCulture,The following statement contains a magic number: euro.Should().Be(new Money(765.43' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingYenYuanSymbolInJapan_ThenThisShouldReturnJapaneseYen,The following statement contains a magic number: yen.Should().Be(new Money(765m' "JPY"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingYenYuanSymbolInChina_ThenThisShouldReturnChineseYuan,The following statement contains a magic number: yuan.Should().Be(new Money(765m' "CNY"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingDollarSymbolInUSA_ThenThisShouldReturnUSDollar,The following statement contains a magic number: dollar.Should().Be(new Money(765.43m' "USD"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingDollarSymbolInArgentina_ThenThisShouldReturnArgentinePeso,The following statement contains a magic number: peso.Should().Be(new Money(765.43m' "ARS"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingEuroSymbolInUSA_ThenThisShouldReturnUSDollar,The following statement contains a magic number: euro.Should().Be(new Money(765.43m' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingYenInNetherlands_ThenThisShouldSucceed,The following statement contains a magic number: yen.Should().Be(new Money(765' "JPY"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingArgentinePesoInUSA_ThenThisShouldReturnArgentinePeso,The following statement contains a magic number: peso.Should().Be(new Money(765.43m' "ARS"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingUSDollarSymbolInArgentina_ThenThisShouldReturnUSDollar,The following statement contains a magic number: dollar.Should().Be(new Money(765.43m' "USD"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingUSDollarInNetherlands_ThenThisShouldSucceed,The following statement contains a magic number: dollar.Should().Be(new Money(765.43m' "USD"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenInBelgiumDutchSpeaking_ThenThisShouldSucceed,The following statement contains a magic number: euro.Should().Be(new Money(765.43m' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenInBelgiumFrenchSpeaking_ThenThisShouldSucceed,The following statement contains a magic number: euro.Should().Be(new Money(765.43' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingNumberWithoutCurrency_ThenThisShouldSucceed,The following statement contains a magic number: euro.Should().Be(new Money(765.43' "USD"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseNegativeMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenMinusSignBeforeDollarSign_ThenThisShouldSucceed,The following statement contains a magic number: dollar.Should().Be(new Money(-765.43' "USD"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseNegativeMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenMinusSignAfterDollarSign_ThenThisShouldSucceed,The following statement contains a magic number: dollar.Should().Be(new Money(-765.43' "USD"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseNegativeMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenDollarsWithParentheses_ThenThisShouldSucceed,The following statement contains a magic number: dollar.Should().Be(new Money(-765.43' "USD"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseNegativeMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenMinusSignBeforeEuroSign_ThenThisShouldSucceed,The following statement contains a magic number: dollar.Should().Be(new Money(-765.43' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseNegativeMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenMinusSignAfterEuroSign_ThenThisShouldSucceed,The following statement contains a magic number: dollar.Should().Be(new Money(-765.43' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseNegativeMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenEurosWithParentheses_ThenThisShouldSucceed,The following statement contains a magic number: dollar.Should().Be(new Money(-765.43' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseMoneyWithMoreDecimalPossibleForCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingJapaneseYen_ThenThisShouldBeRoundedDown,The following statement contains a magic number: yen.Should().Be(new Money(765m' "JPY"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToParseMoneyWithMoreDecimalPossibleForCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingJapaneseYen_ThenThisShouldBeRoundedUp,The following statement contains a magic number: yen.Should().Be(new Money(766m' "JPY"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenInBelgiumDutchSpeaking_ThenThisShouldSucceed,The following statement contains a magic number: euro.Should().Be(new Money(765.43m' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenInBelgiumFrenchSpeaking_ThenThisShouldSucceed,The following statement contains a magic number: euro.Should().Be(new Money(765.43' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingNumberWithoutCurrency_ThenThisUseCurrencyOfCurrentCulture,The following statement contains a magic number: euro.Should().Be(new Money(765.43' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingYenYuanSymbolInJapan_ThenThisShouldReturnJapaneseYen,The following statement contains a magic number: yen.Should().Be(new Money(765m' "JPY"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingYenYuanSymbolInChina_ThenThisShouldReturnChineseYuan,The following statement contains a magic number: yuan.Should().Be(new Money(765m' "CNY"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingDollarSymbolInUSA_ThenThisShouldReturnUSDollar,The following statement contains a magic number: dollar.Should().Be(new Money(765.43m' "USD"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseImplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingDollarSymbolInArgentina_ThenThisShouldReturnArgentinePeso,The following statement contains a magic number: peso.Should().Be(new Money(765.43m' "ARS"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingYenInNetherlands_ThenThisShouldSucceed,The following statement contains a magic number: yen.Should().Be(new Money(765' "JPY"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingArgentinePesoInUSA_ThenThisShouldReturnArgentinePeso,The following statement contains a magic number: peso.Should().Be(new Money(765.43m' "ARS"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingUSDollarSymbolInArgentina_ThenThisShouldReturnUSDollar,The following statement contains a magic number: dollar.Should().Be(new Money(765.43m' "USD"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingUSDollarInNetherlands_ThenThisShouldSucceed,The following statement contains a magic number: dollar.Should().Be(new Money(765.43m' "USD"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenInBelgiumDutchSpeaking_ThenThisShouldSucceed,The following statement contains a magic number: euro.Should().Be(new Money(765.43m' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenInBelgiumFrenchSpeaking_ThenThisShouldSucceed,The following statement contains a magic number: euro.Should().Be(new Money(765.43' "EUR"));
Magic Number,NodaMoney.Tests.MoneyParsableSpec,GivenIWantToTryParseExplicitCurrency,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyParsableSpec.cs,WhenParsingNumberWithoutCurrency_ThenThisShouldSucceed,The following statement contains a magic number: euro.Should().Be(new Money(765.43' "USD"));
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsByte_ThenCreatingShouldSucceed,The following statement contains a magic number: const byte byteValue = 50;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsByte_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(50m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsSbyte_ThenCreatingShouldSucceed,The following statement contains a magic number: const sbyte sbyteValue = 75;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsSbyte_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(75m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt16_ThenCreatingShouldSucceed,The following statement contains a magic number: const short int16Value = 100;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt16_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(100m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt32_ThenCreatingShouldSucceed,The following statement contains a magic number: const int int32Value = 200;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt32_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(200m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt64_ThenCreatingShouldSucceed,The following statement contains a magic number: const long int64Value = 300;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt64_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(300m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint16_ThenCreatingShouldSucceed,The following statement contains a magic number: const ushort uInt16Value = 400;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint16_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(400m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint32_ThenCreatingShouldSucceed,The following statement contains a magic number: const uint uInt32Value = 500;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint32_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(500m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint64_ThenCreatingShouldSucceed,The following statement contains a magic number: const ulong uInt64Value = 600;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint64_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(600m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsSingle_ThenCreatingShouldSucceed,The following statement contains a magic number: const float singleValue = 700;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsSingle_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(700m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: const double doubleValue = 800;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(800m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: const decimal decimalValue = 900;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitCurrencyObject,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(900m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsByte_ThenCreatingShouldSucceed,The following statement contains a magic number: const byte byteValue = 50;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsByte_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(50);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsSbyte_ThenCreatingShouldSucceed,The following statement contains a magic number: const sbyte sbyteValue = 75;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsSbyte_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(75);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt16_ThenCreatingShouldSucceed,The following statement contains a magic number: const short int16Value = 100;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt16_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(100);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt32_ThenCreatingShouldSucceed,The following statement contains a magic number: const int int32Value = 200;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt32_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(200);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt64_ThenCreatingShouldSucceed,The following statement contains a magic number: const long int64Value = 300;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsInt64_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(300);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint16_ThenCreatingShouldSucceed,The following statement contains a magic number: const ushort uInt16Value = 400;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint16_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(400);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint32_ThenCreatingShouldSucceed,The following statement contains a magic number: const uint uInt32Value = 500;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint32_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(500);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint64_ThenCreatingShouldSucceed,The following statement contains a magic number: const ulong uInt64Value = 600;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsUint64_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(600);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsSingle_ThenCreatingShouldSucceed,The following statement contains a magic number: const float singleValue = 700;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsSingle_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(700);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: const double doubleValue = 800;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsDouble_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(800);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: const decimal decimalValue = 900;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsDecimal_ThenCreatingShouldSucceed,The following statement contains a magic number: money.Amount.Should().Be(900);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyFromNumericTypeAndAnExplicitIsoCurrencyCode,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenUnknownIsoCurrencySymbol_ThenThrowEception,The following statement contains a magic number: Action action = () => new Money(123.25M' "XYZ");
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyWithDifferentRounding,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenOnlyAmount_ThenItShouldRoundUp,The following statement contains a magic number: decimal amount = 0.525m;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyWithDifferentRounding,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenOnlyAmount_ThenItShouldRoundUp,The following statement contains a magic number: defaultRounding.Amount.Should().Be(0.52m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyWithDifferentRounding,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenOnlyAmount_ThenItShouldRoundUp,The following statement contains a magic number: differentRounding.Amount.Should().Be(0.53m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyWithDifferentRounding,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenAmountAndCode_ThenItShouldRoundUp,The following statement contains a magic number: decimal amount = 0.525m;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyWithDifferentRounding,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenAmountAndCode_ThenItShouldRoundUp,The following statement contains a magic number: defaultRounding.Amount.Should().Be(0.52m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantMoneyWithDifferentRounding,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenAmountAndCode_ThenItShouldRoundUp,The following statement contains a magic number: differentRounding.Amount.Should().Be(0.53m);
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantToConvertDoubleToDecimal,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsNormalValue_ThenCreatingShouldSucceed,The following statement contains a magic number: decimal value = 251426433.75935m;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantToConvertDoubleToDecimal,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsNormalValue_ThenCreatingShouldSucceed,The following statement contains a magic number: double value1 = 251426433.75935;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantToConvertDoubleToDecimal,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsBigValue_ThenCreatingShouldSucceed,The following statement contains a magic number: decimal value = 7922816251426433.7593543950335m;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantToConvertDoubleToDecimal,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsBigValue_ThenCreatingShouldSucceed,The following statement contains a magic number: double value1 = 7922816251426433.7593543950335;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantToConvertDoubleToDecimal,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsVeryBigValue_ThenCreatingShouldSucceed,The following statement contains a magic number: decimal value = 79228162514264337593543.950335m;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantToConvertDoubleToDecimal,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsVeryBigValue_ThenCreatingShouldSucceed,The following statement contains a magic number: double value1 = 79228162514264337593543.950335;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantToConvertDoubleToDecimal,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsVerySmall_ThenCreatingShouldSucceed,The following statement contains a magic number: decimal value = 0.0079228162514264337593543950335m;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantToConvertDoubleToDecimal,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenValueIsVerySmall_ThenCreatingShouldSucceed,The following statement contains a magic number: double value1 = 0.0079228162514264337593543950335;
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantToDeconstructMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenDeconstructing_ThenShouldSucceed,The following statement contains a magic number: var money = new Money(10m' "EUR");
Magic Number,NodaMoney.Tests.MoneySpec,GivenIWantToDeconstructMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneySpec.cs,WhenDeconstructing_ThenShouldSucceed,The following statement contains a magic number: amount.Should().Be(10m);
Magic Number,NodaMoney.Tests,GivenIWantToIncrementMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenIncrementing_ThenAmountShouldIncrementWithMinorUnit,The following statement contains a magic number: yens.Amount.Should().Be(766m);
Magic Number,NodaMoney.Tests,GivenIWantToIncrementMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenIncrementing_ThenAmountShouldIncrementWithMinorUnit,The following statement contains a magic number: euros.Amount.Should().Be(765.44m);
Magic Number,NodaMoney.Tests,GivenIWantToIncrementMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenIncrementing_ThenAmountShouldIncrementWithMinorUnit,The following statement contains a magic number: dollars.Amount.Should().Be(765.44m);
Magic Number,NodaMoney.Tests,GivenIWantToIncrementMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenIncrementing_ThenAmountShouldIncrementWithMinorUnit,The following statement contains a magic number: dinars.Amount.Should().Be(765.433m);
Magic Number,NodaMoney.Tests,GivenIWantToDecrementMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenDecrementing_ThenAmountShouldDecrementWithMinorUnit,The following statement contains a magic number: yens.Amount.Should().Be(764m);
Magic Number,NodaMoney.Tests,GivenIWantToDecrementMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenDecrementing_ThenAmountShouldDecrementWithMinorUnit,The following statement contains a magic number: euros.Amount.Should().Be(765.42m);
Magic Number,NodaMoney.Tests,GivenIWantToDecrementMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenDecrementing_ThenAmountShouldDecrementWithMinorUnit,The following statement contains a magic number: dollars.Amount.Should().Be(765.42m);
Magic Number,NodaMoney.Tests,GivenIWantToDecrementMoney,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenDecrementing_ThenAmountShouldDecrementWithMinorUnit,The following statement contains a magic number: dinars.Amount.Should().Be(765.431m);
Magic Number,NodaMoney.Tests,GivenIWantToAddAndSubtractMoneyUnary,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenUsingUnaryPlusOperator_ThenThisSucceed,The following statement contains a magic number: r1.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Tests,GivenIWantToAddAndSubtractMoneyUnary,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenUsingUnaryPlusOperator_ThenThisSucceed,The following statement contains a magic number: r2.Amount.Should().Be(-10.00m);
Magic Number,NodaMoney.Tests,GivenIWantToAddAndSubtractMoneyUnary,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenUsingUnaryMinOperator_ThenThisSucceed,The following statement contains a magic number: r1.Amount.Should().Be(-10.00m);
Magic Number,NodaMoney.Tests,GivenIWantToAddAndSubtractMoneyUnary,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\MoneyUnaryOperatoresTests.cs,WhenUsingUnaryMinOperator_ThenThisSucceed,The following statement contains a magic number: r2.Amount.Should().Be(10.00m);
Magic Number,NodaMoney.Serialization.AspNet.Tests,GivenIWantToDeserializeMoneyWithJavaScriptSerializer,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\JavaScriptSerializableSpec.cs,WhenDeserializingWithValidJSON_ThenThisShouldSucceed,The following statement contains a magic number: var money = new Money(200' Currency.FromCode(CurrentCultureCode));
Magic Number,NodaMoney.Serialization.AspNet.Tests,GivenIWantToDeserializeMoneyWithJavaScriptSerializer,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\JavaScriptSerializableSpec.cs,WhenDeserializingWithInvalidJSON_ThenThisShouldFail,The following statement contains a magic number: var money = new Money(200' Currency.FromCode(CurrentCultureCode));
Magic Number,NodaMoney.Serialization.AspNet.Tests,GivenIWantToDeserializeMoneyWithJavaScriptSerializer,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\JavaScriptSerializableSpec.cs,WhenDeserializingWithNested_ThenThisShouldSucceed,The following statement contains a magic number: var money = new Money(200' Currency.FromCode(CurrentCultureCode));
Magic Number,NodaMoney.Serialization.AspNet.Tests,GivenIWantToDeserializeMoneyWithJavaScriptSerializer,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\JavaScriptSerializableSpec.cs,WhenDeserializingWithNestedNullable_ThenThisShouldSucceed,The following statement contains a magic number: var money = new Money(200' Currency.FromCode(CurrentCultureCode));
Magic Number,NodaMoney.Serialization.Tests.MoneySerializableSpec,GivenIWantToSerializeMoneyWithJsonNetSerializer,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\MoneySerializableSpec.cs,WhenSerializingArticle_ThenThisShouldSucceed,The following statement contains a magic number: var order = new Order              {                  Id = 123'                  Price = money'                  Name = "Foo"              };
Magic Number,NodaMoney.Serialization.Tests.MoneySerializableSpec,GivenIWantToSerializeMoneyWithDataContractSerializer,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\MoneySerializableSpec.cs,WhenSerializingArticle_ThenThisShouldSucceed,The following statement contains a magic number: var article = new Order              {                  Id = 123'                  Price = Money.Euro(27.15)'                  Name = "Foo"              };
Magic Number,NodaMoney.Serialization.Tests.MoneySerializableSpec,GivenIWantToSerializeMoneyWithDataContractSerializer,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\MoneySerializableSpec.cs,WhenSerializingArticle_ThenThisShouldSucceed,The following statement contains a magic number: var article = new Order              {                  Id = 123'                  Price = Money.Euro(27.15)'                  Name = "Foo"              };
Magic Number,NodaMoney.Serialization.Tests.MoneySerializableSpec,GivenIWantToSerializeMoneyWitXmlSerializer,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\MoneySerializableSpec.cs,WhenSerializingArticle_ThenThisShouldSucceed,The following statement contains a magic number: var article = new Order              {                  Id = 123'                  Price = Money.Euro(27.15)'                  Name = "Foo"              };
Magic Number,NodaMoney.Serialization.Tests.MoneySerializableSpec,GivenIWantToSerializeMoneyWitXmlSerializer,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\MoneySerializableSpec.cs,WhenSerializingArticle_ThenThisShouldSucceed,The following statement contains a magic number: var article = new Order              {                  Id = 123'                  Price = Money.Euro(27.15)'                  Name = "Foo"              };
Magic Number,NodaMoney.Serialization.Tests.MoneySerializableSpec,GivenIWantToSerializeMoneyWithBinaryFormatter,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\MoneySerializableSpec.cs,WhenSerializingArticle_ThenThisShouldSucceed,The following statement contains a magic number: var article = new Order              {                  Id = 123'                  Price = Money.Euro(27.15)'                  Name = "Foo"              };
Magic Number,NodaMoney.Serialization.Tests.MoneySerializableSpec,GivenIWantToSerializeMoneyWithBinaryFormatter,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\MoneySerializableSpec.cs,WhenSerializingArticle_ThenThisShouldSucceed,The following statement contains a magic number: var article = new Order              {                  Id = 123'                  Price = Money.Euro(27.15)'                  Name = "Foo"              };
Magic Number,NodaMoney.Tests.Serialization.RavenDbSerializationSpec,GivenIWantToStoreInRavenDb,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\RavenDbSerializationSpec.cs,WhenMoneyAsRoot_ThenThisMustWork,The following statement contains a magic number: Money euros = new Money(123.56' "EUR");
Magic Number,NodaMoney.Tests.Serialization.RavenDbSerializationSpec,GivenIWantToStoreInRavenDb,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\RavenDbSerializationSpec.cs,WhenObjectWithMoneyAttribute_ThenThisMustWork,The following statement contains a magic number: SampleData sample = new SampleData { Name = "Test"' Price = new Money(123.56' "EUR")' BaseCurrency = Currency.FromCode("USD") };
Magic Number,NodaMoney.Tests.Serialization,ValidJsonTestData,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\TestDataGenerator.cs,ValidJsonTestData,The following statement contains a magic number: var money = new Money(234.25m' Currency.FromCode("EUR"));
Magic Number,NodaMoney.Tests.Serialization,NestedJsonTestData,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\TestDataGenerator.cs,NestedJsonTestData,The following statement contains a magic number: var order = new Order              {                  Id = 123'                  Name = "Abc"'                  Price = new Money(234.25m' Currency.FromCode("EUR"))              };
Magic Number,NodaMoney.Tests.Serialization,NestedJsonTestData,C:\research\architectureSmells\repos\remyvd_NodaMoney\tests\NodaMoney.Tests\Serialization\TestDataGenerator.cs,NestedJsonTestData,The following statement contains a magic number: var order = new Order              {                  Id = 123'                  Name = "Abc"'                  Price = new Money(234.25m' Currency.FromCode("EUR"))              };
