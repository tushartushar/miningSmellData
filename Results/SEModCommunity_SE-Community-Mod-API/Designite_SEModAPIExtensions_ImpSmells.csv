Implementation smell,Namespace,Class,File,Method,Description
Long Method,SEModAPIExtensions.API,BasicUnitTestManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\BasicUnitTestManager.cs,RunCubeBlockReflectionTests,The method has 183 lines of code.
Long Method,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The method has 347 lines of code.
Long Method,SEModAPIExtensions.API,MultiblockStructure,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\MultiblockStructure.cs,IsDefinitionMatch,The method has 105 lines of code.
Complex Method,SEModAPIExtensions.API,BasicUnitTestManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\BasicUnitTestManager.cs,RunBaseReflectionUnitTests,Cyclomatic complexity of the method is 17
Complex Method,SEModAPIExtensions.API,BasicUnitTestManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\BasicUnitTestManager.cs,RunEntityReflectionUnitTests,Cyclomatic complexity of the method is 20
Complex Method,SEModAPIExtensions.API,BasicUnitTestManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\BasicUnitTestManager.cs,RunCubeBlockReflectionTests,Cyclomatic complexity of the method is 37
Complex Method,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,Cyclomatic complexity of the method is 13
Complex Method,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,ParseChatCommands,Cyclomatic complexity of the method is 9
Complex Method,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,Cyclomatic complexity of the method is 71
Complex Method,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_List,Cyclomatic complexity of the method is 8
Complex Method,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Off,Cyclomatic complexity of the method is 9
Complex Method,SEModAPIExtensions.API,MultiblockStructure,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\MultiblockStructure.cs,IsDefinitionMatch,Cyclomatic complexity of the method is 15
Complex Method,SEModAPIExtensions.API,PluginManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\PluginManager.cs,LoadPlugins,Cyclomatic complexity of the method is 12
Complex Method,SEModAPIExtensions.API,PluginManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\PluginManager.cs,Update,Cyclomatic complexity of the method is 12
Complex Method,SEModAPIExtensions.API,PluginManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\PluginManager.cs,DoUpdate,Cyclomatic complexity of the method is 8
Complex Method,SEModAPIExtensions.API,Server,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\Server.cs,ProcessCommandLineArgs,Cyclomatic complexity of the method is 11
Complex Method,SEModAPIExtensions.API.IPC,InternalService,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\IPC\Service.cs,GetInventoryItems,Cyclomatic complexity of the method is 11
Complex Method,SEModAPIExtensions.API.IPC,InternalService,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\IPC\Service.cs,UpdateEntity,Cyclomatic complexity of the method is 9
Complex Method,SEModAPIExtensions.API.IPC,InternalService,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\IPC\Service.cs,UpdateCubeBlock,Cyclomatic complexity of the method is 12
Long Statement,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,The length of the statement  "			Vector3 groupPosition = UtilityFunctions.GenerateRandomBorderPosition(new Vector3(-spawnSize' -spawnSize' -spawnSize)' new Vector3(spawnSize' spawnSize' spawnSize)); " is 165.
Long Statement,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,The length of the statement  "			Vector3 destinationPosition = UtilityFunctions.GenerateRandomBorderPosition(new Vector3(-destinationSize' -destinationSize' -destinationSize)' new Vector3(destinationSize' destinationSize' destinationSize)); " is 207.
Long Statement,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,The length of the statement  "				int randomShipIndex = Math.Max(0' Math.Min((int)Math.Round(randomChance * possibleGroups.Count' 0)' possibleGroups.Count - 1)); " is 127.
Long Statement,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,The length of the statement  "				ChatManager.Instance.SendPrivateChatMessage(remoteUserId' "Spawning cargo group '" + randomSpawnGroup.DisplayNameText.ToString() + "' ..."); " is 140.
Long Statement,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,The length of the statement  "				ChatManager.Instance.SendPrivateChatMessage(remoteUserId' "Cargo group '" + randomSpawnGroup.DisplayNameText.ToString() + "' spawned with " + randomSpawnGroup.Prefabs.Count.ToString() + " ships at " + startPosition.ToString()); " is 227.
Long Statement,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,CreateChatMessageStruct,The length of the statement  "			Type chatMessageStructType = SandboxGameAssemblyWrapper.Instance.GetAssemblyType(ChatMessageStructNamespace' ChatMessageStructClass); " is 133.
Long Statement,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Teleport,The length of the statement  "						SendPrivateChatMessage(remoteUserId' "Entity '" + entity.EntityId.ToString() + "' has been moved to '" + newPosition.ToString() + "'"); " is 135.
Long Statement,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Owner,The length of the statement  "						SendPrivateChatMessage(remoteUserId' "CubeGridEntity '" + cubeGrid.EntityId.ToString() + "' owner has been changed to '" + ownerId.ToString() + "'"); " is 149.
Long Statement,SEModAPIExtensions.API,MultiblockStructure,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\MultiblockStructure.cs,IsDefinitionMatch,The length of the statement  "						if (entry.orientation.Forward != posCubeBlock.BlockOrientation.Forward || entry.orientation.Up != posCubeBlock.BlockOrientation.Up) " is 131.
Long Statement,SEModAPIExtensions.API,MultiblockStructure,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\MultiblockStructure.cs,IsDefinitionMatch,The length of the statement  "				//LogManager.APILog.WriteLine("Found multiblock match in cube grid '" + cubeToCheck.Parent.Name + "' anchored at " + ((Vector3I)m_anchor.Min).ToString()); " is 154.
Long Statement,SEModAPIExtensions.API,PluginManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\PluginManager.cs,SetupSLWCFService,The length of the statement  "				selfHost = Server.CreateSLServiceHost(typeof(PluginService)' typeof(IPluginServiceContract)' "Plugin/"' "PluginService"); " is 121.
Long Statement,SEModAPIExtensions.API,PluginManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\PluginManager.cs,Update,The length of the statement  "						//TODO - Find a way to stall the event long enough for a linked character entity to exist - this is impossible because of cockpits and respawnships " is 147.
Long Statement,SEModAPIExtensions.API,PluginManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\PluginManager.cs,Update,The length of the statement  "						//TODO - Find a way to stall the event long enough for a linked character entity to exist - this is impossible because of cockpits and respawnships " is 147.
Long Statement,SEModAPIExtensions.API,Server,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\Server.cs,CreateServiceHost,The length of the statement  "				Uri baseAddress = new Uri("http://localhost:" + Server.Instance.WCFPort.ToString() + "/SEServerExtender/" + urlExtension); " is 122.
Long Statement,SEModAPIExtensions.API,Server,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\Server.cs,CreateSLServiceHost,The length of the statement  "				Uri baseAddress = new Uri("http://localhost:" + (Server.Instance.SLWCFPort).ToString() + "/SEServerExtender/" + urlExtension); " is 126.
Long Statement,SEModAPIExtensions.API,Server,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\Server.cs,RunServer,The length of the statement  "				bool result = m_serverWrapper.StartServer(m_commandLineArgs.instanceName' m_commandLineArgs.path' !m_commandLineArgs.noConsole); " is 128.
Long Statement,SEModAPIExtensions.API,Server,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\Server.cs,LoadServerConfig,The length of the statement  "					LogManager.APILog.WriteLineAndConsole("GameInstallationInfoException - " + ex.StateRepresentation[ex.ExceptionStateId] + " File: " + ex.AdditionnalInfo); " is 153.
Long Statement,SEModAPIExtensions.API,Server,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\Server.cs,LoadServerConfig,The length of the statement  "					LogManager.ErrorLog.WriteLine("GameInstallationInfoException - " + ex.StateRepresentation[ex.ExceptionStateId] + " File: " + ex.AdditionnalInfo); " is 145.
Long Statement,SEModAPIExtensions.API.IPC,InternalService,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\IPC\Service.cs,UpdateCubeBlock,The length of the statement  "			LogManager.APILog.WriteLineAndConsole("WCF Service - Received cube block entity '" + cubeBlock.Name + "' with id '" + cubeBlock.EntityId.ToString() + "'"); " is 155.
Empty Catch Block,SEModAPIExtensions.API.IPC,WebService,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\IPC\Service.cs,GetCubeBlocks,The method has an empty catch block.
Empty Catch Block,SEModAPIExtensions.API.IPC,InternalService,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\IPC\Service.cs,UpdateEntity,The method has an empty catch block.
Empty Catch Block,SEModAPIExtensions.API.IPC,InternalService,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\IPC\Service.cs,UpdateCubeBlock,The method has an empty catch block.
Magic Number,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,The following statement contains a magic number: if (spawnAtAsteroids)  			{  				float farthestAsteroidDistance = 0;  				float nearestAsteroidDistance = 999999;  				foreach (VoxelMap voxelMap in SectorObjectManager.Instance.GetTypedInternalData<VoxelMap>())  				{  					Vector3 asteroidPositon = voxelMap.Position;  					if (asteroidPositon.Length() > farthestAsteroidDistance)  						farthestAsteroidDistance = asteroidPositon.Length();  					if (asteroidPositon.Length() < nearestAsteroidDistance)  						nearestAsteroidDistance = asteroidPositon.Length();  				}    				spawnSize = farthestAsteroidDistance * 2 + 10000;  				destinationSize = nearestAsteroidDistance * 2 + 2000;  			}
Magic Number,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,The following statement contains a magic number: if (spawnAtAsteroids)  			{  				float farthestAsteroidDistance = 0;  				float nearestAsteroidDistance = 999999;  				foreach (VoxelMap voxelMap in SectorObjectManager.Instance.GetTypedInternalData<VoxelMap>())  				{  					Vector3 asteroidPositon = voxelMap.Position;  					if (asteroidPositon.Length() > farthestAsteroidDistance)  						farthestAsteroidDistance = asteroidPositon.Length();  					if (asteroidPositon.Length() < nearestAsteroidDistance)  						nearestAsteroidDistance = asteroidPositon.Length();  				}    				spawnSize = farthestAsteroidDistance * 2 + 10000;  				destinationSize = nearestAsteroidDistance * 2 + 2000;  			}
Magic Number,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,The following statement contains a magic number: if (spawnAtAsteroids)  			{  				float farthestAsteroidDistance = 0;  				float nearestAsteroidDistance = 999999;  				foreach (VoxelMap voxelMap in SectorObjectManager.Instance.GetTypedInternalData<VoxelMap>())  				{  					Vector3 asteroidPositon = voxelMap.Position;  					if (asteroidPositon.Length() > farthestAsteroidDistance)  						farthestAsteroidDistance = asteroidPositon.Length();  					if (asteroidPositon.Length() < nearestAsteroidDistance)  						nearestAsteroidDistance = asteroidPositon.Length();  				}    				spawnSize = farthestAsteroidDistance * 2 + 10000;  				destinationSize = nearestAsteroidDistance * 2 + 2000;  			}
Magic Number,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,The following statement contains a magic number: if (spawnAtAsteroids)  			{  				float farthestAsteroidDistance = 0;  				float nearestAsteroidDistance = 999999;  				foreach (VoxelMap voxelMap in SectorObjectManager.Instance.GetTypedInternalData<VoxelMap>())  				{  					Vector3 asteroidPositon = voxelMap.Position;  					if (asteroidPositon.Length() > farthestAsteroidDistance)  						farthestAsteroidDistance = asteroidPositon.Length();  					if (asteroidPositon.Length() < nearestAsteroidDistance)  						nearestAsteroidDistance = asteroidPositon.Length();  				}    				spawnSize = farthestAsteroidDistance * 2 + 10000;  				destinationSize = nearestAsteroidDistance * 2 + 2000;  			}
Magic Number,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,The following statement contains a magic number: if (spawnAtAsteroids)  			{  				float farthestAsteroidDistance = 0;  				float nearestAsteroidDistance = 999999;  				foreach (VoxelMap voxelMap in SectorObjectManager.Instance.GetTypedInternalData<VoxelMap>())  				{  					Vector3 asteroidPositon = voxelMap.Position;  					if (asteroidPositon.Length() > farthestAsteroidDistance)  						farthestAsteroidDistance = asteroidPositon.Length();  					if (asteroidPositon.Length() < nearestAsteroidDistance)  						nearestAsteroidDistance = asteroidPositon.Length();  				}    				spawnSize = farthestAsteroidDistance * 2 + 10000;  				destinationSize = nearestAsteroidDistance * 2 + 2000;  			}
Magic Number,SEModAPIExtensions.API,CargoShipManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\CargoShipManager.cs,SpawnCargoShipGroup,The following statement contains a magic number: try  			{  				//Calculate lowest and highest frequencies  				float lowestFrequency = 999999;  				float highestFrequency = 0;  				foreach (MySpawnGroupDefinition entry in MyDefinitionManager.Static.GetSpawnGroupDefinitions())  				{  					if (entry.Frequency < lowestFrequency)  						lowestFrequency = entry.Frequency;  					if (entry.Frequency > highestFrequency)  						highestFrequency = entry.Frequency;  				}  				if (lowestFrequency <= 0)  					lowestFrequency = 1;    				//Get a list of which groups *could* spawn  				Random random = new Random((int)DateTime.Now.ToBinary());  				double randomChance = random.NextDouble();  				randomChance = randomChance * (highestFrequency / lowestFrequency);  				List<MySpawnGroupDefinition> possibleGroups = new List<MySpawnGroupDefinition>();  				foreach (MySpawnGroupDefinition entry in MyDefinitionManager.Static.GetSpawnGroupDefinitions())  				{  					if (entry.Frequency >= randomChance)  					{  						possibleGroups.Add(entry);  					}  				}    				//Determine which group *will* spawn  				randomChance = random.NextDouble();  				int randomShipIndex = Math.Max(0' Math.Min((int)Math.Round(randomChance * possibleGroups.Count' 0)' possibleGroups.Count - 1));  				MySpawnGroupDefinition randomSpawnGroup = possibleGroups[randomShipIndex];    				ChatManager.Instance.SendPrivateChatMessage(remoteUserId' "Spawning cargo group '" + randomSpawnGroup.DisplayNameText.ToString() + "' ...");    				//Spawn the ships in the group  				Matrix orientation = Matrix.CreateLookAt(startPosition' stopPosition' new Vector3(0' 1' 0));  				foreach (MySpawnGroupDefinition.SpawnGroupPrefab entry in randomSpawnGroup.Prefabs)  				{  					MyPrefabDefinition matchedPrefab = null;  					foreach (var prefabEntry in MyDefinitionManager.Static.GetPrefabDefinitions())  					{  						MyPrefabDefinition prefabDefinition = prefabEntry.Value;  						if (prefabDefinition.Id.SubtypeId.ToString() == entry.SubtypeId)  						{  							matchedPrefab = prefabDefinition;  							break;  						}  					}  					if (matchedPrefab == null)  						continue;    					//TODO - Build this to iterate through all cube grids in the prefab  					MyObjectBuilder_CubeGrid objectBuilder = matchedPrefab.CubeGrids[0];    					//Create the ship  					CubeGridEntity cubeGrid = new CubeGridEntity(objectBuilder);    					//Set the ship position and orientation  					Vector3 shipPosition = Vector3.Transform(entry.Position' orientation) + startPosition;  					orientation.Translation = shipPosition;  					MyPositionAndOrientation newPositionOrientation = new MyPositionAndOrientation(orientation);  					cubeGrid.PositionAndOrientation = newPositionOrientation;    					//Set the ship velocity  					//Speed is clamped between 1.0f and the max cube grid speed  					Vector3 travelVector = stopPosition - startPosition;  					travelVector.Normalize();  					Vector3 shipVelocity = travelVector * (float)Math.Min(cubeGrid.MaxLinearVelocity' Math.Max(1.0f' entry.Speed));  					cubeGrid.LinearVelocity = shipVelocity;    					cubeGrid.IsDampenersEnabled = false;    					foreach (MyObjectBuilder_CubeBlock cubeBlock in cubeGrid.BaseCubeBlocks)  					{  						//Set the beacon names  						if (cubeBlock.TypeId == typeof(MyObjectBuilder_Beacon))  						{  							MyObjectBuilder_Beacon beacon = (MyObjectBuilder_Beacon)cubeBlock;  							beacon.CustomName = entry.BeaconText;  						}    						//Set the owner of every block  						//TODO - Find out if setting to an arbitrary non-zero works for this  						// TODO Fix the rest of the player manager methods  						//cubeBlock.Owner = PlayerMap.Instance.GetServerVirtualPlayerId();  						cubeBlock.ShareMode = MyOwnershipShareModeEnum.Faction;  					}    					//And add the ship to the world  					SectorObjectManager.Instance.AddEntity(cubeGrid);  				}    				ChatManager.Instance.SendPrivateChatMessage(remoteUserId' "Cargo group '" + randomSpawnGroup.DisplayNameText.ToString() + "' spawned with " + randomSpawnGroup.Prefabs.Count.ToString() + " ships at " + startPosition.ToString());  			}  			catch (Exception ex)  			{  				LogManager.ErrorLog.WriteLine(ex);  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("all"))  			{  				//All cube grids that have no beacon or only a beacon with no name  				if (commandParts[2].ToLower().Equals("nobeacon"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						while (entity.CubeBlocks.Count == 0)  						{  							Thread.Sleep(20);  						}  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						if (blocks.Count > 0)  						{  							bool foundBeacon = false;  							foreach (CubeBlockEntity cubeBlock in blocks)  							{  								if (cubeBlock is BeaconEntity)  								{  									foundBeacon = true;  									break;  								}  							}  							if (!foundBeacon)  							{  								entitiesToDispose.Add(entity);  							}  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						bool isLinkedShip = false;  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						foreach (CubeBlockEntity cubeBlock in blocks)  						{  							if (cubeBlock is MergeBlockEntity)  							{  								MergeBlockEntity block = (MergeBlockEntity)cubeBlock;  								if (block.IsAttached)  								{  									if (!entitiesToDispose.Contains(block.AttachedCubeGrid))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is PistonEntity)  							{  								PistonEntity block = (PistonEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is RotorEntity)  							{  								RotorEntity block = (RotorEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  						}  						if (isLinkedShip)  							continue;    						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				//All cube grids that have no power  				else if (commandParts[2].ToLower().Equals("nopower"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						if (entity.TotalPower <= 0)  						{  							entitiesToDispose.Add(entity);  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				else if (commandParts[2].ToLower().Equals("floatingobjects"))	//All floating objects  				{  					List<FloatingObject> entities = SectorObjectManager.Instance.GetTypedInternalData<FloatingObject>();  					int floatingObjectCount = entities.Count;  					foreach (FloatingObject entity in entities)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' floatingObjectCount.ToString() + " floating objects have been removed");  				}  				else  				{  					string entityName = commandParts[2];  					if (commandParts.Length > 3)  					{  						for (int i = 3; i < commandParts.Length; i++)  						{  							entityName += " " + commandParts[i];  						}  					}    					int matchingEntitiesCount = 0;  					List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  					foreach (BaseEntity entity in entities)  					{  						bool isMatch = Regex.IsMatch(entity.Name' entityName' RegexOptions.IgnoreCase);  						if (!isMatch)  							continue;    						entity.Dispose();    						matchingEntitiesCount++;  					}    					SendPrivateChatMessage(remoteUserId' matchingEntitiesCount.ToString() + " objects have been removed");  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("all"))  			{  				//All cube grids that have no beacon or only a beacon with no name  				if (commandParts[2].ToLower().Equals("nobeacon"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						while (entity.CubeBlocks.Count == 0)  						{  							Thread.Sleep(20);  						}  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						if (blocks.Count > 0)  						{  							bool foundBeacon = false;  							foreach (CubeBlockEntity cubeBlock in blocks)  							{  								if (cubeBlock is BeaconEntity)  								{  									foundBeacon = true;  									break;  								}  							}  							if (!foundBeacon)  							{  								entitiesToDispose.Add(entity);  							}  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						bool isLinkedShip = false;  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						foreach (CubeBlockEntity cubeBlock in blocks)  						{  							if (cubeBlock is MergeBlockEntity)  							{  								MergeBlockEntity block = (MergeBlockEntity)cubeBlock;  								if (block.IsAttached)  								{  									if (!entitiesToDispose.Contains(block.AttachedCubeGrid))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is PistonEntity)  							{  								PistonEntity block = (PistonEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is RotorEntity)  							{  								RotorEntity block = (RotorEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  						}  						if (isLinkedShip)  							continue;    						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				//All cube grids that have no power  				else if (commandParts[2].ToLower().Equals("nopower"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						if (entity.TotalPower <= 0)  						{  							entitiesToDispose.Add(entity);  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				else if (commandParts[2].ToLower().Equals("floatingobjects"))	//All floating objects  				{  					List<FloatingObject> entities = SectorObjectManager.Instance.GetTypedInternalData<FloatingObject>();  					int floatingObjectCount = entities.Count;  					foreach (FloatingObject entity in entities)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' floatingObjectCount.ToString() + " floating objects have been removed");  				}  				else  				{  					string entityName = commandParts[2];  					if (commandParts.Length > 3)  					{  						for (int i = 3; i < commandParts.Length; i++)  						{  							entityName += " " + commandParts[i];  						}  					}    					int matchingEntitiesCount = 0;  					List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  					foreach (BaseEntity entity in entities)  					{  						bool isMatch = Regex.IsMatch(entity.Name' entityName' RegexOptions.IgnoreCase);  						if (!isMatch)  							continue;    						entity.Dispose();    						matchingEntitiesCount++;  					}    					SendPrivateChatMessage(remoteUserId' matchingEntitiesCount.ToString() + " objects have been removed");  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("all"))  			{  				//All cube grids that have no beacon or only a beacon with no name  				if (commandParts[2].ToLower().Equals("nobeacon"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						while (entity.CubeBlocks.Count == 0)  						{  							Thread.Sleep(20);  						}  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						if (blocks.Count > 0)  						{  							bool foundBeacon = false;  							foreach (CubeBlockEntity cubeBlock in blocks)  							{  								if (cubeBlock is BeaconEntity)  								{  									foundBeacon = true;  									break;  								}  							}  							if (!foundBeacon)  							{  								entitiesToDispose.Add(entity);  							}  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						bool isLinkedShip = false;  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						foreach (CubeBlockEntity cubeBlock in blocks)  						{  							if (cubeBlock is MergeBlockEntity)  							{  								MergeBlockEntity block = (MergeBlockEntity)cubeBlock;  								if (block.IsAttached)  								{  									if (!entitiesToDispose.Contains(block.AttachedCubeGrid))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is PistonEntity)  							{  								PistonEntity block = (PistonEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is RotorEntity)  							{  								RotorEntity block = (RotorEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  						}  						if (isLinkedShip)  							continue;    						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				//All cube grids that have no power  				else if (commandParts[2].ToLower().Equals("nopower"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						if (entity.TotalPower <= 0)  						{  							entitiesToDispose.Add(entity);  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				else if (commandParts[2].ToLower().Equals("floatingobjects"))	//All floating objects  				{  					List<FloatingObject> entities = SectorObjectManager.Instance.GetTypedInternalData<FloatingObject>();  					int floatingObjectCount = entities.Count;  					foreach (FloatingObject entity in entities)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' floatingObjectCount.ToString() + " floating objects have been removed");  				}  				else  				{  					string entityName = commandParts[2];  					if (commandParts.Length > 3)  					{  						for (int i = 3; i < commandParts.Length; i++)  						{  							entityName += " " + commandParts[i];  						}  					}    					int matchingEntitiesCount = 0;  					List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  					foreach (BaseEntity entity in entities)  					{  						bool isMatch = Regex.IsMatch(entity.Name' entityName' RegexOptions.IgnoreCase);  						if (!isMatch)  							continue;    						entity.Dispose();    						matchingEntitiesCount++;  					}    					SendPrivateChatMessage(remoteUserId' matchingEntitiesCount.ToString() + " objects have been removed");  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("all"))  			{  				//All cube grids that have no beacon or only a beacon with no name  				if (commandParts[2].ToLower().Equals("nobeacon"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						while (entity.CubeBlocks.Count == 0)  						{  							Thread.Sleep(20);  						}  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						if (blocks.Count > 0)  						{  							bool foundBeacon = false;  							foreach (CubeBlockEntity cubeBlock in blocks)  							{  								if (cubeBlock is BeaconEntity)  								{  									foundBeacon = true;  									break;  								}  							}  							if (!foundBeacon)  							{  								entitiesToDispose.Add(entity);  							}  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						bool isLinkedShip = false;  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						foreach (CubeBlockEntity cubeBlock in blocks)  						{  							if (cubeBlock is MergeBlockEntity)  							{  								MergeBlockEntity block = (MergeBlockEntity)cubeBlock;  								if (block.IsAttached)  								{  									if (!entitiesToDispose.Contains(block.AttachedCubeGrid))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is PistonEntity)  							{  								PistonEntity block = (PistonEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is RotorEntity)  							{  								RotorEntity block = (RotorEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  						}  						if (isLinkedShip)  							continue;    						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				//All cube grids that have no power  				else if (commandParts[2].ToLower().Equals("nopower"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						if (entity.TotalPower <= 0)  						{  							entitiesToDispose.Add(entity);  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				else if (commandParts[2].ToLower().Equals("floatingobjects"))	//All floating objects  				{  					List<FloatingObject> entities = SectorObjectManager.Instance.GetTypedInternalData<FloatingObject>();  					int floatingObjectCount = entities.Count;  					foreach (FloatingObject entity in entities)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' floatingObjectCount.ToString() + " floating objects have been removed");  				}  				else  				{  					string entityName = commandParts[2];  					if (commandParts.Length > 3)  					{  						for (int i = 3; i < commandParts.Length; i++)  						{  							entityName += " " + commandParts[i];  						}  					}    					int matchingEntitiesCount = 0;  					List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  					foreach (BaseEntity entity in entities)  					{  						bool isMatch = Regex.IsMatch(entity.Name' entityName' RegexOptions.IgnoreCase);  						if (!isMatch)  							continue;    						entity.Dispose();    						matchingEntitiesCount++;  					}    					SendPrivateChatMessage(remoteUserId' matchingEntitiesCount.ToString() + " objects have been removed");  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("all"))  			{  				//All cube grids that have no beacon or only a beacon with no name  				if (commandParts[2].ToLower().Equals("nobeacon"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						while (entity.CubeBlocks.Count == 0)  						{  							Thread.Sleep(20);  						}  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						if (blocks.Count > 0)  						{  							bool foundBeacon = false;  							foreach (CubeBlockEntity cubeBlock in blocks)  							{  								if (cubeBlock is BeaconEntity)  								{  									foundBeacon = true;  									break;  								}  							}  							if (!foundBeacon)  							{  								entitiesToDispose.Add(entity);  							}  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						bool isLinkedShip = false;  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						foreach (CubeBlockEntity cubeBlock in blocks)  						{  							if (cubeBlock is MergeBlockEntity)  							{  								MergeBlockEntity block = (MergeBlockEntity)cubeBlock;  								if (block.IsAttached)  								{  									if (!entitiesToDispose.Contains(block.AttachedCubeGrid))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is PistonEntity)  							{  								PistonEntity block = (PistonEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is RotorEntity)  							{  								RotorEntity block = (RotorEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  						}  						if (isLinkedShip)  							continue;    						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				//All cube grids that have no power  				else if (commandParts[2].ToLower().Equals("nopower"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						if (entity.TotalPower <= 0)  						{  							entitiesToDispose.Add(entity);  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				else if (commandParts[2].ToLower().Equals("floatingobjects"))	//All floating objects  				{  					List<FloatingObject> entities = SectorObjectManager.Instance.GetTypedInternalData<FloatingObject>();  					int floatingObjectCount = entities.Count;  					foreach (FloatingObject entity in entities)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' floatingObjectCount.ToString() + " floating objects have been removed");  				}  				else  				{  					string entityName = commandParts[2];  					if (commandParts.Length > 3)  					{  						for (int i = 3; i < commandParts.Length; i++)  						{  							entityName += " " + commandParts[i];  						}  					}    					int matchingEntitiesCount = 0;  					List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  					foreach (BaseEntity entity in entities)  					{  						bool isMatch = Regex.IsMatch(entity.Name' entityName' RegexOptions.IgnoreCase);  						if (!isMatch)  							continue;    						entity.Dispose();    						matchingEntitiesCount++;  					}    					SendPrivateChatMessage(remoteUserId' matchingEntitiesCount.ToString() + " objects have been removed");  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("all"))  			{  				//All cube grids that have no beacon or only a beacon with no name  				if (commandParts[2].ToLower().Equals("nobeacon"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						while (entity.CubeBlocks.Count == 0)  						{  							Thread.Sleep(20);  						}  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						if (blocks.Count > 0)  						{  							bool foundBeacon = false;  							foreach (CubeBlockEntity cubeBlock in blocks)  							{  								if (cubeBlock is BeaconEntity)  								{  									foundBeacon = true;  									break;  								}  							}  							if (!foundBeacon)  							{  								entitiesToDispose.Add(entity);  							}  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						bool isLinkedShip = false;  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						foreach (CubeBlockEntity cubeBlock in blocks)  						{  							if (cubeBlock is MergeBlockEntity)  							{  								MergeBlockEntity block = (MergeBlockEntity)cubeBlock;  								if (block.IsAttached)  								{  									if (!entitiesToDispose.Contains(block.AttachedCubeGrid))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is PistonEntity)  							{  								PistonEntity block = (PistonEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is RotorEntity)  							{  								RotorEntity block = (RotorEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  						}  						if (isLinkedShip)  							continue;    						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				//All cube grids that have no power  				else if (commandParts[2].ToLower().Equals("nopower"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						if (entity.TotalPower <= 0)  						{  							entitiesToDispose.Add(entity);  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				else if (commandParts[2].ToLower().Equals("floatingobjects"))	//All floating objects  				{  					List<FloatingObject> entities = SectorObjectManager.Instance.GetTypedInternalData<FloatingObject>();  					int floatingObjectCount = entities.Count;  					foreach (FloatingObject entity in entities)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' floatingObjectCount.ToString() + " floating objects have been removed");  				}  				else  				{  					string entityName = commandParts[2];  					if (commandParts.Length > 3)  					{  						for (int i = 3; i < commandParts.Length; i++)  						{  							entityName += " " + commandParts[i];  						}  					}    					int matchingEntitiesCount = 0;  					List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  					foreach (BaseEntity entity in entities)  					{  						bool isMatch = Regex.IsMatch(entity.Name' entityName' RegexOptions.IgnoreCase);  						if (!isMatch)  							continue;    						entity.Dispose();    						matchingEntitiesCount++;  					}    					SendPrivateChatMessage(remoteUserId' matchingEntitiesCount.ToString() + " objects have been removed");  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("all"))  			{  				//All cube grids that have no beacon or only a beacon with no name  				if (commandParts[2].ToLower().Equals("nobeacon"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						while (entity.CubeBlocks.Count == 0)  						{  							Thread.Sleep(20);  						}  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						if (blocks.Count > 0)  						{  							bool foundBeacon = false;  							foreach (CubeBlockEntity cubeBlock in blocks)  							{  								if (cubeBlock is BeaconEntity)  								{  									foundBeacon = true;  									break;  								}  							}  							if (!foundBeacon)  							{  								entitiesToDispose.Add(entity);  							}  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						bool isLinkedShip = false;  						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						foreach (CubeBlockEntity cubeBlock in blocks)  						{  							if (cubeBlock is MergeBlockEntity)  							{  								MergeBlockEntity block = (MergeBlockEntity)cubeBlock;  								if (block.IsAttached)  								{  									if (!entitiesToDispose.Contains(block.AttachedCubeGrid))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is PistonEntity)  							{  								PistonEntity block = (PistonEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  							if (cubeBlock is RotorEntity)  							{  								RotorEntity block = (RotorEntity)cubeBlock;  								CubeBlockEntity topBlock = block.TopBlock;  								if (topBlock != null)  								{  									if (!entitiesToDispose.Contains(topBlock.Parent))  									{  										isLinkedShip = true;  										break;  									}  								}  							}  						}  						if (isLinkedShip)  							continue;    						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				//All cube grids that have no power  				else if (commandParts[2].ToLower().Equals("nopower"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						if (entity.TotalPower <= 0)  						{  							entitiesToDispose.Add(entity);  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " cube grids have been removed");  				}  				else if (commandParts[2].ToLower().Equals("floatingobjects"))	//All floating objects  				{  					List<FloatingObject> entities = SectorObjectManager.Instance.GetTypedInternalData<FloatingObject>();  					int floatingObjectCount = entities.Count;  					foreach (FloatingObject entity in entities)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' floatingObjectCount.ToString() + " floating objects have been removed");  				}  				else  				{  					string entityName = commandParts[2];  					if (commandParts.Length > 3)  					{  						for (int i = 3; i < commandParts.Length; i++)  						{  							entityName += " " + commandParts[i];  						}  					}    					int matchingEntitiesCount = 0;  					List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  					foreach (BaseEntity entity in entities)  					{  						bool isMatch = Regex.IsMatch(entity.Name' entityName' RegexOptions.IgnoreCase);  						if (!isMatch)  							continue;    						entity.Dispose();    						matchingEntitiesCount++;  					}    					SendPrivateChatMessage(remoteUserId' matchingEntitiesCount.ToString() + " objects have been removed");  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("ship"))  			{  				//That have no beacon or only a beacon with no name  				if (commandParts[2].ToLower().Equals("nobeacon"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						//Skip static cube grids  						if (((CubeGridEntity)entity).IsStatic)  							continue;    						if (entity.Name.Equals(entity.EntityId.ToString()))  						{  							entitiesToDispose.Add(entity);  							continue;  						}    						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						if (blocks.Count > 0)  						{  							bool foundBeacon = false;  							foreach (CubeBlockEntity cubeBlock in entity.CubeBlocks)  							{  								if (cubeBlock is BeaconEntity)  								{  									foundBeacon = true;  									break;  								}  							}  							if (!foundBeacon)  							{  								entitiesToDispose.Add(entity);  							}  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " ships have been removed");  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("station"))  			{  				//That have no beacon or only a beacon with no name  				if (commandParts[2].ToLower().Equals("nobeacon"))  				{  					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					List<CubeGridEntity> entitiesToDispose = new List<CubeGridEntity>();  					foreach (CubeGridEntity entity in entities)  					{  						//Skip non-static cube grids  						if (!((CubeGridEntity)entity).IsStatic)  							continue;    						if (entity.Name.Equals(entity.EntityId.ToString()))  						{  							entitiesToDispose.Add(entity);  							continue;  						}    						List<CubeBlockEntity> blocks = entity.CubeBlocks;  						if (blocks.Count > 0)  						{  							bool foundBeacon = false;  							foreach (CubeBlockEntity cubeBlock in entity.CubeBlocks)  							{  								if (cubeBlock is BeaconEntity)  								{  									foundBeacon = true;  									break;  								}  							}  							if (!foundBeacon)  							{  								entitiesToDispose.Add(entity);  							}  						}  					}    					foreach (CubeGridEntity entity in entitiesToDispose)  					{  						entity.Dispose();  					}    					SendPrivateChatMessage(remoteUserId' entitiesToDispose.Count.ToString() + " stations have been removed");  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("player"))  			{  				List<MyObjectBuilder_Checkpoint.PlayerItem> playersToRemove = new List<MyObjectBuilder_Checkpoint.PlayerItem>();  				int playersRemovedCount = 0;  				if (commandParts[2].ToLower().Equals("dead"))  				{  					List<long> playerIds = PlayerMap.Instance.GetPlayerIds();  					foreach (long playerId in playerIds)  					{  						MyObjectBuilder_Checkpoint.PlayerItem item = PlayerMap.Instance.GetPlayerItemFromPlayerId(playerId);  						if (item.IsDead)  							playersToRemove.Add(item);  					}    					//TODO - This is VERY slow. Need to find a much faster way to do this  					//TODO - Need to find a way to remove the player entries from the main list' not just from the blocks and factions  					foreach (var item in playersToRemove)  					{  						bool playerRemoved = false;    						//Check if any of the players we're about to remove own blocks  						//If so' set the owner to 0 and set the share mode to None  						foreach (var cubeGrid in SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>())  						{  							foreach (var cubeBlock in cubeGrid.CubeBlocks)  							{  								if (cubeBlock.Owner == item.PlayerId)  								{  									cubeBlock.Owner = 0;  									cubeBlock.ShareMode = MyOwnershipShareModeEnum.None;    									playerRemoved = true;  								}  							}  						}    						foreach (var entry in FactionsManager.Instance.Factions)  						{  							foreach (var member in entry.Members)  							{  								if (member.PlayerId == item.PlayerId)  								{  									entry.RemoveMember(member.PlayerId);    									playerRemoved = true;  								}  							}  						}    						if (playerRemoved)  							playersRemovedCount++;  					}  				}    				SendPrivateChatMessage(remoteUserId' "Deleted " + playersRemovedCount.ToString() + " player entries");  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("faction"))  			{  				List<Faction> factionsToRemove = new List<Faction>();  				if (commandParts[2].ToLower().Equals("empty"))  				{  					foreach(var entry in FactionsManager.Instance.Factions)  					{  						if (entry.Members.Count == 0)  							factionsToRemove.Add(entry);  					}  				}  				if (commandParts[2].ToLower().Equals("nofounder"))  				{  					foreach (var entry in FactionsManager.Instance.Factions)  					{  						bool founderMatch = false;    						foreach (var member in entry.Members)  						{  							if (member.IsFounder)  							{  								founderMatch = true;  								break;  							}  						}    						if (!founderMatch)  							factionsToRemove.Add(entry);  					}  				}  				if (commandParts[2].ToLower().Equals("noleader"))  				{  					foreach (var entry in FactionsManager.Instance.Factions)  					{  						bool founderMatch = false;    						foreach (var member in entry.Members)  						{  							if (member.IsFounder || member.IsLeader)  							{  								founderMatch = true;  								break;  							}  						}    						if (!founderMatch)  							factionsToRemove.Add(entry);  					}  				}    				foreach (var entry in factionsToRemove)  				{  					FactionsManager.Instance.RemoveFaction(entry.Id);  				}    				SendPrivateChatMessage(remoteUserId' "Deleted " + factionsToRemove.Count.ToString() + " factions");  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("faction"))  			{  				List<Faction> factionsToRemove = new List<Faction>();  				if (commandParts[2].ToLower().Equals("empty"))  				{  					foreach(var entry in FactionsManager.Instance.Factions)  					{  						if (entry.Members.Count == 0)  							factionsToRemove.Add(entry);  					}  				}  				if (commandParts[2].ToLower().Equals("nofounder"))  				{  					foreach (var entry in FactionsManager.Instance.Factions)  					{  						bool founderMatch = false;    						foreach (var member in entry.Members)  						{  							if (member.IsFounder)  							{  								founderMatch = true;  								break;  							}  						}    						if (!founderMatch)  							factionsToRemove.Add(entry);  					}  				}  				if (commandParts[2].ToLower().Equals("noleader"))  				{  					foreach (var entry in FactionsManager.Instance.Factions)  					{  						bool founderMatch = false;    						foreach (var member in entry.Members)  						{  							if (member.IsFounder || member.IsLeader)  							{  								founderMatch = true;  								break;  							}  						}    						if (!founderMatch)  							factionsToRemove.Add(entry);  					}  				}    				foreach (var entry in factionsToRemove)  				{  					FactionsManager.Instance.RemoveFaction(entry.Id);  				}    				SendPrivateChatMessage(remoteUserId' "Deleted " + factionsToRemove.Count.ToString() + " factions");  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("faction"))  			{  				List<Faction> factionsToRemove = new List<Faction>();  				if (commandParts[2].ToLower().Equals("empty"))  				{  					foreach(var entry in FactionsManager.Instance.Factions)  					{  						if (entry.Members.Count == 0)  							factionsToRemove.Add(entry);  					}  				}  				if (commandParts[2].ToLower().Equals("nofounder"))  				{  					foreach (var entry in FactionsManager.Instance.Factions)  					{  						bool founderMatch = false;    						foreach (var member in entry.Members)  						{  							if (member.IsFounder)  							{  								founderMatch = true;  								break;  							}  						}    						if (!founderMatch)  							factionsToRemove.Add(entry);  					}  				}  				if (commandParts[2].ToLower().Equals("noleader"))  				{  					foreach (var entry in FactionsManager.Instance.Factions)  					{  						bool founderMatch = false;    						foreach (var member in entry.Members)  						{  							if (member.IsFounder || member.IsLeader)  							{  								founderMatch = true;  								break;  							}  						}    						if (!founderMatch)  							factionsToRemove.Add(entry);  					}  				}    				foreach (var entry in factionsToRemove)  				{  					FactionsManager.Instance.RemoveFaction(entry.Id);  				}    				SendPrivateChatMessage(remoteUserId' "Deleted " + factionsToRemove.Count.ToString() + " factions");  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Teleport,The following statement contains a magic number: if (paramCount == 2)  			{  				string rawEntityId = commandParts[1];  				string rawPosition = commandParts[2];    				try  				{  					long entityId = long.Parse(rawEntityId);    					string[] rawCoordinateValues = rawPosition.Split(''');  					if (rawCoordinateValues.Length < 3)  						return;    					float x = float.Parse(rawCoordinateValues[0]);  					float y = float.Parse(rawCoordinateValues[1]);  					float z = float.Parse(rawCoordinateValues[2]);    					List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  					foreach (BaseEntity entity in entities)  					{  						if (entity.EntityId != entityId)  							continue;    						Vector3 newPosition = new Vector3(x' y' z);  						entity.Position = newPosition;    						SendPrivateChatMessage(remoteUserId' "Entity '" + entity.EntityId.ToString() + "' has been moved to '" + newPosition.ToString() + "'");  					}  				}  				catch (Exception ex)  				{  					LogManager.ErrorLog.WriteLine(ex);  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Teleport,The following statement contains a magic number: if (paramCount == 2)  			{  				string rawEntityId = commandParts[1];  				string rawPosition = commandParts[2];    				try  				{  					long entityId = long.Parse(rawEntityId);    					string[] rawCoordinateValues = rawPosition.Split(''');  					if (rawCoordinateValues.Length < 3)  						return;    					float x = float.Parse(rawCoordinateValues[0]);  					float y = float.Parse(rawCoordinateValues[1]);  					float z = float.Parse(rawCoordinateValues[2]);    					List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  					foreach (BaseEntity entity in entities)  					{  						if (entity.EntityId != entityId)  							continue;    						Vector3 newPosition = new Vector3(x' y' z);  						entity.Position = newPosition;    						SendPrivateChatMessage(remoteUserId' "Entity '" + entity.EntityId.ToString() + "' has been moved to '" + newPosition.ToString() + "'");  					}  				}  				catch (Exception ex)  				{  					LogManager.ErrorLog.WriteLine(ex);  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Teleport,The following statement contains a magic number: if (paramCount == 2)  			{  				string rawEntityId = commandParts[1];  				string rawPosition = commandParts[2];    				try  				{  					long entityId = long.Parse(rawEntityId);    					string[] rawCoordinateValues = rawPosition.Split(''');  					if (rawCoordinateValues.Length < 3)  						return;    					float x = float.Parse(rawCoordinateValues[0]);  					float y = float.Parse(rawCoordinateValues[1]);  					float z = float.Parse(rawCoordinateValues[2]);    					List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  					foreach (BaseEntity entity in entities)  					{  						if (entity.EntityId != entityId)  							continue;    						Vector3 newPosition = new Vector3(x' y' z);  						entity.Position = newPosition;    						SendPrivateChatMessage(remoteUserId' "Entity '" + entity.EntityId.ToString() + "' has been moved to '" + newPosition.ToString() + "'");  					}  				}  				catch (Exception ex)  				{  					LogManager.ErrorLog.WriteLine(ex);  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Teleport,The following statement contains a magic number: if (paramCount == 2)  			{  				string rawEntityId = commandParts[1];  				string rawPosition = commandParts[2];    				try  				{  					long entityId = long.Parse(rawEntityId);    					string[] rawCoordinateValues = rawPosition.Split(''');  					if (rawCoordinateValues.Length < 3)  						return;    					float x = float.Parse(rawCoordinateValues[0]);  					float y = float.Parse(rawCoordinateValues[1]);  					float z = float.Parse(rawCoordinateValues[2]);    					List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  					foreach (BaseEntity entity in entities)  					{  						if (entity.EntityId != entityId)  							continue;    						Vector3 newPosition = new Vector3(x' y' z);  						entity.Position = newPosition;    						SendPrivateChatMessage(remoteUserId' "Entity '" + entity.EntityId.ToString() + "' has been moved to '" + newPosition.ToString() + "'");  					}  				}  				catch (Exception ex)  				{  					LogManager.ErrorLog.WriteLine(ex);  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_GetId,The following statement contains a magic number: if (paramCount > 0)  			{  				string entityName = commandParts[1];  				if (commandParts.Length > 2)  				{  					for (int i = 2; i < commandParts.Length; i++)  					{  						entityName += " " + commandParts[i];  					}  				}    				List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  				foreach (BaseEntity entity in entities)  				{  					if (!entity.Name.ToLower().Equals(entityName.ToLower()))  						continue;    					SendPrivateChatMessage(remoteUserId' "Entity ID is '" + entity.EntityId.ToString() + "'");  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_GetId,The following statement contains a magic number: if (paramCount > 0)  			{  				string entityName = commandParts[1];  				if (commandParts.Length > 2)  				{  					for (int i = 2; i < commandParts.Length; i++)  					{  						entityName += " " + commandParts[i];  					}  				}    				List<BaseEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<BaseEntity>();  				foreach (BaseEntity entity in entities)  				{  					if (!entity.Name.ToLower().Equals(entityName.ToLower()))  						continue;    					SendPrivateChatMessage(remoteUserId' "Entity ID is '" + entity.EntityId.ToString() + "'");  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Owner,The following statement contains a magic number: if (paramCount == 2)  			{  				string rawEntityId = commandParts[1];  				string rawOwnerId = commandParts[2];    				try  				{  					long entityId = long.Parse(rawEntityId);  					long ownerId = long.Parse(rawOwnerId);    					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					foreach (CubeGridEntity cubeGrid in entities)  					{  						if (cubeGrid.EntityId != entityId)  							continue;    						//Update the owner of the blocks on the cube grid  						foreach (CubeBlockEntity cubeBlock in cubeGrid.CubeBlocks)  						{  							//Skip blocks that don't have an entity id  							if (cubeBlock.EntityId == 0)  								continue;    							cubeBlock.Owner = ownerId;  						}    						SendPrivateChatMessage(remoteUserId' "CubeGridEntity '" + cubeGrid.EntityId.ToString() + "' owner has been changed to '" + ownerId.ToString() + "'");  					}  				}  				catch (Exception ex)  				{  					LogManager.ErrorLog.WriteLine(ex);  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Owner,The following statement contains a magic number: if (paramCount == 2)  			{  				string rawEntityId = commandParts[1];  				string rawOwnerId = commandParts[2];    				try  				{  					long entityId = long.Parse(rawEntityId);  					long ownerId = long.Parse(rawOwnerId);    					List<CubeGridEntity> entities = SectorObjectManager.Instance.GetTypedInternalData<CubeGridEntity>();  					foreach (CubeGridEntity cubeGrid in entities)  					{  						if (cubeGrid.EntityId != entityId)  							continue;    						//Update the owner of the blocks on the cube grid  						foreach (CubeBlockEntity cubeBlock in cubeGrid.CubeBlocks)  						{  							//Skip blocks that don't have an entity id  							if (cubeBlock.EntityId == 0)  								continue;    							cubeBlock.Owner = ownerId;  						}    						SendPrivateChatMessage(remoteUserId' "CubeGridEntity '" + cubeGrid.EntityId.ToString() + "' owner has been changed to '" + ownerId.ToString() + "'");  					}  				}  				catch (Exception ex)  				{  					LogManager.ErrorLog.WriteLine(ex);  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Spawn,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("ship"))  			{  				if (commandParts[2].ToLower().Equals("all"))  				{  				}  				if (commandParts[2].ToLower().Equals("exports"))  				{  				}  				if (commandParts[2].ToLower().Equals("cargo"))  				{  					CargoShipManager.Instance.SpawnCargoShipGroup(remoteUserId);  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Spawn,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("ship"))  			{  				if (commandParts[2].ToLower().Equals("all"))  				{  				}  				if (commandParts[2].ToLower().Equals("exports"))  				{  				}  				if (commandParts[2].ToLower().Equals("cargo"))  				{  					CargoShipManager.Instance.SpawnCargoShipGroup(remoteUserId);  				}  			}
Magic Number,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Spawn,The following statement contains a magic number: if (paramCount > 1 && commandParts[1].ToLower().Equals("ship"))  			{  				if (commandParts[2].ToLower().Equals("all"))  				{  				}  				if (commandParts[2].ToLower().Equals("exports"))  				{  				}  				if (commandParts[2].ToLower().Equals("cargo"))  				{  					CargoShipManager.Instance.SpawnCargoShipGroup(remoteUserId);  				}  			}
Magic Number,SEModAPIExtensions.API,MultiblockStructure,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\MultiblockStructure.cs,IsDefinitionMatch,The following statement contains a magic number: if (recurseDepth < 0 || recurseDepth > 2)  				return false;
Magic Number,SEModAPIExtensions.API,PluginManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\PluginManager.cs,Update,The following statement contains a magic number: m_averageUpdateInterval = (m_averageUpdateTime + m_lastUpdateTime.TotalMilliseconds) / 2;
Magic Number,SEModAPIExtensions.API,PluginManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\PluginManager.cs,Update,The following statement contains a magic number: if (SandboxGameAssemblyWrapper.IsDebugging)  			{  				m_averageEvents = (m_averageEvents + (events.Count + chatEvents.Count)) / 2;    				TimeSpan updateTime = DateTime.Now - m_lastUpdate;  				m_averageUpdateTime = (m_averageUpdateTime + updateTime.TotalMilliseconds) / 2;    				TimeSpan timeSinceAverageOutput = DateTime.Now - m_lastAverageOutput;  				if (timeSinceAverageOutput.TotalSeconds > 30)  				{  					m_lastAverageOutput = DateTime.Now;    					LogManager.APILog.WriteLine("PluginManager - Update interval = " + m_averageUpdateInterval.ToString() + "ms");  					LogManager.APILog.WriteLine("PluginManager - Update time = " + m_averageUpdateTime.ToString() + "ms");  					LogManager.APILog.WriteLine("PluginManager - Events per update = " + m_averageEvents.ToString());  				}  			}
Magic Number,SEModAPIExtensions.API,PluginManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\PluginManager.cs,Update,The following statement contains a magic number: if (SandboxGameAssemblyWrapper.IsDebugging)  			{  				m_averageEvents = (m_averageEvents + (events.Count + chatEvents.Count)) / 2;    				TimeSpan updateTime = DateTime.Now - m_lastUpdate;  				m_averageUpdateTime = (m_averageUpdateTime + updateTime.TotalMilliseconds) / 2;    				TimeSpan timeSinceAverageOutput = DateTime.Now - m_lastAverageOutput;  				if (timeSinceAverageOutput.TotalSeconds > 30)  				{  					m_lastAverageOutput = DateTime.Now;    					LogManager.APILog.WriteLine("PluginManager - Update interval = " + m_averageUpdateInterval.ToString() + "ms");  					LogManager.APILog.WriteLine("PluginManager - Update time = " + m_averageUpdateTime.ToString() + "ms");  					LogManager.APILog.WriteLine("PluginManager - Events per update = " + m_averageEvents.ToString());  				}  			}
Magic Number,SEModAPIExtensions.API,PluginManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\PluginManager.cs,Update,The following statement contains a magic number: if (SandboxGameAssemblyWrapper.IsDebugging)  			{  				m_averageEvents = (m_averageEvents + (events.Count + chatEvents.Count)) / 2;    				TimeSpan updateTime = DateTime.Now - m_lastUpdate;  				m_averageUpdateTime = (m_averageUpdateTime + updateTime.TotalMilliseconds) / 2;    				TimeSpan timeSinceAverageOutput = DateTime.Now - m_lastAverageOutput;  				if (timeSinceAverageOutput.TotalSeconds > 30)  				{  					m_lastAverageOutput = DateTime.Now;    					LogManager.APILog.WriteLine("PluginManager - Update interval = " + m_averageUpdateInterval.ToString() + "ms");  					LogManager.APILog.WriteLine("PluginManager - Update time = " + m_averageUpdateTime.ToString() + "ms");  					LogManager.APILog.WriteLine("PluginManager - Events per update = " + m_averageEvents.ToString());  				}  			}
Magic Number,SEModAPIExtensions.API,Server,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\Server.cs,Server,The following statement contains a magic number: m_restartLimit = 3;
Magic Number,SEModAPIExtensions.API,Server,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\Server.cs,Server,The following statement contains a magic number: m_pluginMainLoop.Interval = 200;
Magic Number,SEModAPIExtensions.API,Server,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\Server.cs,Server,The following statement contains a magic number: m_autosaveTimer.Interval = 300000;
Magic Number,SEModAPIExtensions.API,Server,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\Server.cs,Init,The following statement contains a magic number: if (m_commandLineArgs.autosave > 0)  				m_autosaveTimer.Interval = m_commandLineArgs.autosave * 60000;
Duplicate Code,SEModAPIExtensions.API,ChatManager,C:\repos\SEModCommunity_SE-Community-Mod-API\SEModAPIExtensions\API\ChatManager.cs,Command_Delete,The method contains a code clone-set at the following line numbers (starting from the method definition): ((163' 194)' (211' 242))
