Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Avalonia.Input.Navigation,DirectionalNavigation,C:\repos\grokys_Perspex\src\Avalonia.Input\Navigation\DirectionalNavigation.cs,GetNextInContainer,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Input.Navigation,DirectionalNavigation,C:\repos\grokys_Perspex\src\Avalonia.Input\Navigation\DirectionalNavigation.cs,GetFirstInNextContainer,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Input.Navigation,TabNavigation,C:\repos\grokys_Perspex\src\Avalonia.Input\Navigation\TabNavigation.cs,GetNextInContainer,Cyclomatic complexity of the method is 9
Long Parameter List,Avalonia.Input,MouseDevice,C:\repos\grokys_Perspex\src\Avalonia.Input\MouseDevice.cs,MouseDown,The method has 6 parameters. Parameters: device' timestamp' root' p' button' inputModifiers
Long Parameter List,Avalonia.Input,MouseDevice,C:\repos\grokys_Perspex\src\Avalonia.Input\MouseDevice.cs,MouseUp,The method has 5 parameters. Parameters: device' root' p' button' inputModifiers
Long Parameter List,Avalonia.Input,MouseDevice,C:\repos\grokys_Perspex\src\Avalonia.Input\MouseDevice.cs,MouseWheel,The method has 5 parameters. Parameters: device' root' p' delta' inputModifiers
Long Parameter List,Avalonia.Input.Raw,RawKeyEventArgs,C:\repos\grokys_Perspex\src\Avalonia.Input\Raw\RawKeyEventArgs.cs,RawKeyEventArgs,The method has 5 parameters. Parameters: device' timestamp' type' key' modifiers
Long Parameter List,Avalonia.Input.Raw,RawMouseEventArgs,C:\repos\grokys_Perspex\src\Avalonia.Input\Raw\RawMouseEventArgs.cs,RawMouseEventArgs,The method has 6 parameters. Parameters: device' timestamp' root' type' position' inputModifiers
Long Parameter List,Avalonia.Input.Raw,RawMouseWheelEventArgs,C:\repos\grokys_Perspex\src\Avalonia.Input\Raw\RawMouseWheelEventArgs.cs,RawMouseWheelEventArgs,The method has 6 parameters. Parameters: device' timestamp' root' position' delta' inputModifiers
Magic Number,Avalonia.Input,Gestures,C:\repos\grokys_Perspex\src\Avalonia.Input\Gestures.cs,PointerPressed,The following statement contains a magic number: if (ev.Route == RoutingStrategies.Bubble)              {                  var e = (PointerPressedEventArgs)ev;                    if (e.ClickCount <= 1)                  {                      s_lastPress = new WeakReference(e.Source);                  }                  else if (s_lastPress?.IsAlive == true && e.ClickCount == 2 && s_lastPress.Target == e.Source)                  {                      e.Source.RaiseEvent(new RoutedEventArgs(DoubleTappedEvent));                  }              }
Magic Number,Avalonia.Input,KeyGesture,C:\repos\grokys_Perspex\src\Avalonia.Input\KeyGesture.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((int) Key*397) ^ (int) Modifiers;              }
Magic Number,Avalonia.Input,MouseDevice,C:\repos\grokys_Perspex\src\Avalonia.Input\MouseDevice.cs,MouseDown,The following statement contains a magic number: if (hit != null)              {                  IInteractive source = GetSource(hit);                    if (source != null)                  {                      var settings = AvaloniaLocator.Current.GetService<IPlatformSettings>();                      var doubleClickTime = settings.DoubleClickTime.TotalMilliseconds;                        if (!_lastClickRect.Contains(p) || timestamp - _lastClickTime > doubleClickTime)                      {                          _clickCount = 0;                      }                        ++_clickCount;                      _lastClickTime = timestamp;                      _lastClickRect = new Rect(p' new Size())                          .Inflate(new Thickness(settings.DoubleClickSize.Width / 2' settings.DoubleClickSize.Height / 2));                        var e = new PointerPressedEventArgs                      {                          Device = this'                          RoutedEvent = InputElement.PointerPressedEvent'                          Source = source'                          ClickCount = _clickCount'                          MouseButton = button'                          InputModifiers = inputModifiers                      };                        source.RaiseEvent(e);                      return e.Handled;                  }              }
Magic Number,Avalonia.Input,MouseDevice,C:\repos\grokys_Perspex\src\Avalonia.Input\MouseDevice.cs,MouseDown,The following statement contains a magic number: if (hit != null)              {                  IInteractive source = GetSource(hit);                    if (source != null)                  {                      var settings = AvaloniaLocator.Current.GetService<IPlatformSettings>();                      var doubleClickTime = settings.DoubleClickTime.TotalMilliseconds;                        if (!_lastClickRect.Contains(p) || timestamp - _lastClickTime > doubleClickTime)                      {                          _clickCount = 0;                      }                        ++_clickCount;                      _lastClickTime = timestamp;                      _lastClickRect = new Rect(p' new Size())                          .Inflate(new Thickness(settings.DoubleClickSize.Width / 2' settings.DoubleClickSize.Height / 2));                        var e = new PointerPressedEventArgs                      {                          Device = this'                          RoutedEvent = InputElement.PointerPressedEvent'                          Source = source'                          ClickCount = _clickCount'                          MouseButton = button'                          InputModifiers = inputModifiers                      };                        source.RaiseEvent(e);                      return e.Handled;                  }              }
Missing Default,Avalonia.Input,AccessKeyHandler,C:\repos\grokys_Perspex\src\Avalonia.Input\AccessKeyHandler.cs,OnPreviewKeyUp,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.LeftAlt:                      _altIsDown = false;                        if (_ignoreAltUp)                      {                          _ignoreAltUp = false;                      }                      else if (_showingAccessKeys && MainMenu != null)                      {                          MainMenu.Open();                          e.Handled = true;                      }                        break;                    case Key.F10:                      _owner.ShowAccessKeys = _showingAccessKeys = true;                      MainMenu.Open();                      e.Handled = true;                      break;              }
Missing Default,Avalonia.Input,KeyboardDevice,C:\repos\grokys_Perspex\src\Avalonia.Input\KeyboardDevice.cs,ProcessRawEvent,The following switch statement is missing a default case: switch (keyInput.Type)                      {                          case RawKeyEventType.KeyDown:                          case RawKeyEventType.KeyUp:                              var routedEvent = keyInput.Type == RawKeyEventType.KeyDown                                  ? InputElement.KeyDownEvent                                  : InputElement.KeyUpEvent;                                KeyEventArgs ev = new KeyEventArgs                              {                                  RoutedEvent = routedEvent'                                  Device = this'                                  Key = keyInput.Key'                                  Modifiers = keyInput.Modifiers'                                  Source = element'                              };                                IVisual currentHandler = element;                              while (currentHandler != null && !ev.Handled && keyInput.Type == RawKeyEventType.KeyDown)                              {                                  var bindings = (currentHandler as IInputElement)?.KeyBindings;                                  if(bindings!=null)                                      foreach (var binding in bindings)                                      {                                          if(ev.Handled)                                              break;                                          binding.TryHandle(ev);                                      }                                  currentHandler = currentHandler.VisualParent;                              }                                element.RaiseEvent(ev);                              e.Handled = ev.Handled;                              break;                      }
Missing Default,Avalonia.Input,KeyboardNavigationHandler,C:\repos\grokys_Perspex\src\Avalonia.Input\KeyboardNavigationHandler.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)                  {                      case Key.Tab:                          direction = (e.Modifiers & InputModifiers.Shift) == 0 ?                              NavigationDirection.Next : NavigationDirection.Previous;                          break;                      case Key.Up:                          direction = NavigationDirection.Up;                          break;                      case Key.Down:                          direction = NavigationDirection.Down;                          break;                      case Key.Left:                          direction = NavigationDirection.Left;                          break;                      case Key.Right:                          direction = NavigationDirection.Right;                          break;                      case Key.PageUp:                          direction = NavigationDirection.PageUp;                          break;                      case Key.PageDown:                          direction = NavigationDirection.PageDown;                          break;                      case Key.Home:                          direction = NavigationDirection.First;                          break;                      case Key.End:                          direction = NavigationDirection.Last;                          break;                  }
Missing Default,Avalonia.Input,MouseDevice,C:\repos\grokys_Perspex\src\Avalonia.Input\MouseDevice.cs,ProcessRawEvent,The following switch statement is missing a default case: switch (e.Type)              {                  case RawMouseEventType.LeaveWindow:                      LeaveWindow(mouse' e.Root);                      break;                  case RawMouseEventType.LeftButtonDown:                  case RawMouseEventType.RightButtonDown:                  case RawMouseEventType.MiddleButtonDown:                      e.Handled = MouseDown(mouse' e.Timestamp' e.Root' e.Position'                           e.Type == RawMouseEventType.LeftButtonDown                              ? MouseButton.Left                              : e.Type == RawMouseEventType.RightButtonDown ? MouseButton.Right : MouseButton.Middle'                          e.InputModifiers);                      break;                  case RawMouseEventType.LeftButtonUp:                  case RawMouseEventType.RightButtonUp:                  case RawMouseEventType.MiddleButtonUp:                      e.Handled = MouseUp(mouse' e.Root' e.Position'                          e.Type == RawMouseEventType.LeftButtonUp                              ? MouseButton.Left                              : e.Type == RawMouseEventType.RightButtonUp ? MouseButton.Right : MouseButton.Middle'                          e.InputModifiers);                      break;                  case RawMouseEventType.Move:                      e.Handled = MouseMove(mouse' e.Root' e.Position' e.InputModifiers);                      break;                  case RawMouseEventType.Wheel:                      e.Handled = MouseWheel(mouse' e.Root' e.Position' ((RawMouseWheelEventArgs)e).Delta' e.InputModifiers);                      break;              }
