Implementation smell,Namespace,Class,File,Method,Description
Long Method,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessSelection,The method has 101 lines of code.
Long Method,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,MeasureOverride,The method has 267 lines of code.
Long Method,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,EnsureMinSizeInDefinitionRange,The method has 151 lines of code.
Long Method,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,ResolveStarMaxDiscrepancy,The method has 260 lines of code.
Long Method,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,SetFinalSizeMaxDiscrepancy,The method has 400 lines of code.
Long Method,Avalonia.Controls,LayoutTransformControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\LayoutTransformControl.cs,ComputeLargestTransformedSize,The method has 128 lines of code.
Long Method,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,OnItemsSourceChanged,The method has 131 lines of code.
Long Method,Avalonia.Controls,TextBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TextBox.cs,OnKeyDown,The method has 224 lines of code.
Long Method,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,Cell_MouseLeftButtonDown,The method has 112 lines of code.
Long Method,Avalonia.Controls.Remote.Server,RemoteServerTopLevelImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\Server\RemoteServerTopLevelImpl.cs,OnMessage,The method has 137 lines of code.
Complex Method,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,OnKeyDown,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,TextUpdated,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,RefreshView,Cyclomatic complexity of the method is 10
Complex Method,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,ItemsCollectionChanged,Cyclomatic complexity of the method is 11
Complex Method,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,UpdateTextCompletion,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls,AutoCompleteSearch,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,GetFilter,Cyclomatic complexity of the method is 13
Complex Method,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,OnSelectedDateChanged,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,UnHighlightDays,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessSelection,Cyclomatic complexity of the method is 15
Complex Method,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessCalendarKey,Cyclomatic complexity of the method is 12
Complex Method,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,OnTemplateApplied,Cyclomatic complexity of the method is 15
Complex Method,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,SetSelectedDate,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls,ComboBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ComboBox.cs,OnKeyDown,Cyclomatic complexity of the method is 10
Complex Method,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,MeasureOverride,Cyclomatic complexity of the method is 14
Complex Method,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,EnsureMinSizeInDefinitionRange,Cyclomatic complexity of the method is 16
Complex Method,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,ResolveStarMaxDiscrepancy,Cyclomatic complexity of the method is 34
Complex Method,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,SetFinalSizeMaxDiscrepancy,Cyclomatic complexity of the method is 46
Complex Method,Avalonia.Controls,LayoutTransformControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\LayoutTransformControl.cs,ComputeLargestTransformedSize,Cyclomatic complexity of the method is 16
Complex Method,Avalonia.Controls,NumericUpDown,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\NumericUpDown\NumericUpDown.cs,SyncTextAndValueProperties,Cyclomatic complexity of the method is 11
Complex Method,Avalonia.Controls,NumericUpDown,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\NumericUpDown\NumericUpDown.cs,ConvertTextToValueCore,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls,ItemsRepeater,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ItemsRepeater.cs,OnDataSourcePropertyChanged,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,GetElement,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,OnItemsSourceChanged,Cyclomatic complexity of the method is 23
Complex Method,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,UpdateFocusedElement,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls,StackPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\StackPanel.cs,GetControlInDirection,Cyclomatic complexity of the method is 16
Complex Method,Avalonia.Controls,TextBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TextBox.cs,OnKeyDown,Cyclomatic complexity of the method is 36
Complex Method,Avalonia.Controls,TreeView,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TreeView.cs,SelectedItemsCollectionChanged,Cyclomatic complexity of the method is 16
Complex Method,Avalonia.Controls,TreeView,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TreeView.cs,UpdateSelectionFromContainer,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls,TreeView,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TreeView.cs,GetItemsInRange,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls,WrapPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\WrapPanel.cs,GetControl,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,PopulateGrids,Cyclomatic complexity of the method is 11
Complex Method,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,SetButtonState,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,SetCalendarDayButtons,Cyclomatic complexity of the method is 14
Complex Method,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,Cell_MouseLeftButtonDown,Cyclomatic complexity of the method is 16
Complex Method,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,Cell_MouseLeftButtonUp,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls.Primitives,SelectedDatesCollection,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\SelectedDatesCollection.cs,AddRange,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls.Primitives,SelectedDatesCollection,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\SelectedDatesCollection.cs,InsertItem,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls.Primitives,ScrollBar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\ScrollBar.cs,OnTemplateApplied,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,ItemsCollectionChanged,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,UpdateSelection,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,SelectedItemsCollectionChanged,Cyclomatic complexity of the method is 11
Complex Method,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,UpdateSelectedItem,Cyclomatic complexity of the method is 13
Complex Method,Avalonia.Controls.Primitives,Track,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\Track.cs,ArrangeOverride,Cyclomatic complexity of the method is 10
Complex Method,Avalonia.Controls.Primitives,UniformGrid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\UniformGrid.cs,UpdateRowsAndColumns,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls.Platform,DefaultMenuInteractionHandler,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Platform\DefaultMenuInteractionHandler.cs,KeyDown,Cyclomatic complexity of the method is 19
Complex Method,Avalonia.Controls.Platform,DefaultMenuInteractionHandler,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Platform\DefaultMenuInteractionHandler.cs,PointerEnter,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Platform,InProcessDragSource,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Platform\InProcessDragSource.cs,UpdateCursor,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Platform,InProcessDragSource,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Platform\InProcessDragSource.cs,ProcessMouseEvents,Cyclomatic complexity of the method is 10
Complex Method,Avalonia.Controls.Presenters,CarouselPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\CarouselPresenter.cs,ItemsChanged,Cyclomatic complexity of the method is 14
Complex Method,Avalonia.Controls.Presenters,CarouselPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\CarouselPresenter.cs,MoveToPage,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls.Presenters,ContentPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ContentPresenter.cs,ArrangeOverrideImpl,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls.Presenters,ItemContainerSync,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ItemContainerSync.cs,ItemsChanged,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls.Presenters,ItemVirtualizerSimple,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ItemVirtualizerSimple.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls.Presenters,ItemVirtualizerSimple,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ItemVirtualizerSimple.cs,ItemsChanged,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Controls.Presenters,ItemVirtualizerSimple,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ItemVirtualizerSimple.cs,GetControlInDirection,Cyclomatic complexity of the method is 13
Complex Method,Avalonia.Controls.Presenters,ItemVirtualizerSimple,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ItemVirtualizerSimple.cs,CreateAndRemoveContainers,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls.Presenters,ItemVirtualizerSimple,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ItemVirtualizerSimple.cs,ScrollIntoView,Cyclomatic complexity of the method is 10
Complex Method,Avalonia.Controls.Presenters,ScrollContentPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ScrollContentPresenter.cs,BringDescendantIntoView,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls.Presenters,ScrollContentPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ScrollContentPresenter.cs,OnScrollGesture,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls.Primitives.PopupPositioning,PopupPositionerExtensions,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\PopupPositioning\IPopupPositioner.cs,ConfigurePosition,Cyclomatic complexity of the method is 10
Complex Method,Avalonia.Controls.Primitives.PopupPositioning,ManagedPopupPositioner,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\PopupPositioning\ManagedPopupPositioner.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls.Remote.Server,RemoteServerTopLevelImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\Server\RemoteServerTopLevelImpl.cs,GetAvaloniaInputModifiers,Cyclomatic complexity of the method is 9
Complex Method,Avalonia.Controls.Remote.Server,RemoteServerTopLevelImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\Server\RemoteServerTopLevelImpl.cs,OnMessage,Cyclomatic complexity of the method is 13
Complex Method,Avalonia.Controls.Shapes,Shape,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Shapes\Shape.cs,CalculateSizeAndTransform,Cyclomatic complexity of the method is 13
Complex Method,Avalonia.Controls.Templates,DataTemplateExtensions,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Templates\DataTemplateExtensions.cs,FindDataTemplate,Cyclomatic complexity of the method is 10
Long Parameter List,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,MeasureCellsGroup,The method has 5 parameters. Parameters: cellsHead' referenceSize' ignoreDesiredSizeU' forceInfinityV' hasDesiredSizeUChanged
Long Parameter List,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,RegisterSpan,The method has 5 parameters. Parameters: store' start' count' u' value
Long Parameter List,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,EnsureMinSizeInDefinitionRange,The method has 5 parameters. Parameters: definitions' start' count' requestedSize' percentReferenceSize
Long Parameter List,Avalonia.Controls,GridLinesRenderer,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,DrawGridLine,The method has 5 parameters. Parameters: drawingContext' startX' startY' endX' endY
Long Parameter List,Avalonia.Controls,TreeView,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TreeView.cs,UpdateSelectionFromContainer,The method has 5 parameters. Parameters: container' select' rangeModifier' toggleModifier' rightButton
Long Parameter List,Avalonia.Controls,TreeView,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TreeView.cs,UpdateSelectionFromEventSource,The method has 5 parameters. Parameters: eventSource' select' rangeModifier' toggleModifier' rightButton
Long Parameter List,Avalonia.Controls,WrapPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\WrapPanel.cs,ArrangeLine,The method has 6 parameters. Parameters: v' lineV' start' end' useItemU' itemU
Long Parameter List,Avalonia.Controls.Primitives,IPopupHost,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\IPopupHost.cs,ConfigurePosition,The method has 5 parameters. Parameters: target' placement' offset' anchor' gravity
Long Parameter List,Avalonia.Controls.Primitives,IPopupHost,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\IPopupHost.cs,BindConstraints,The method has 8 parameters. Parameters: popup' widthProperty' minWidthProperty' maxWidthProperty' heightProperty' minHeightProperty' maxHeightProperty' topmostProperty
Long Parameter List,Avalonia.Controls.Primitives,OverlayPopupHost,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\OverlayPopupHost.cs,BindConstraints,The method has 8 parameters. Parameters: popup' widthProperty' minWidthProperty' maxWidthProperty' heightProperty' minHeightProperty' maxHeightProperty' topmostProperty
Long Parameter List,Avalonia.Controls.Primitives,OverlayPopupHost,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\OverlayPopupHost.cs,ConfigurePosition,The method has 5 parameters. Parameters: target' placement' offset' anchor' gravity
Long Parameter List,Avalonia.Controls.Primitives,PopupRoot,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\PopupRoot.cs,ConfigurePosition,The method has 5 parameters. Parameters: target' placement' offset' anchor' gravity
Long Parameter List,Avalonia.Controls.Primitives,PopupRoot,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\PopupRoot.cs,BindConstraints,The method has 8 parameters. Parameters: popup' widthProperty' minWidthProperty' maxWidthProperty' heightProperty' minHeightProperty' maxHeightProperty' topmostProperty
Long Parameter List,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,UpdateSelection,The method has 5 parameters. Parameters: index' select' rangeModifier' toggleModifier' rightButton
Long Parameter List,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,UpdateSelection,The method has 5 parameters. Parameters: container' select' rangeModifier' toggleModifier' rightButton
Long Parameter List,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,UpdateSelectionFromEventSource,The method has 5 parameters. Parameters: eventSource' select' rangeModifier' toggleModifier' rightButton
Long Parameter List,Avalonia.Controls.Primitives,Track,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\Track.cs,ComputeSliderLengths,The method has 5 parameters. Parameters: arrangeSize' isVertical' decreaseButtonLength' thumbLength' increaseButtonLength
Long Parameter List,Avalonia.Controls.Primitives,Track,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\Track.cs,ComputeScrollBarLengths,The method has 6 parameters. Parameters: arrangeSize' viewportSize' isVertical' decreaseButtonLength' thumbLength' increaseButtonLength
Long Parameter List,Avalonia.Controls.Generators,TreeItemContainerGenerator<T>,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Generators\TreeItemContainerGenerator.cs,TreeItemContainerGenerator,The method has 5 parameters. Parameters: owner' contentProperty' contentTemplateProperty' itemsProperty' isExpandedProperty
Long Parameter List,Avalonia.Controls.Notifications,Notification,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Notifications\Notification.cs,Notification,The method has 6 parameters. Parameters: title' message' type' expiration' onClick' onClose
Long Parameter List,Avalonia.Platform,ExportWindowingSubsystemAttribute,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Platform\ExportWindowingSubsystemAttribute.cs,ExportWindowingSubsystemAttribute,The method has 6 parameters. Parameters: requiredRuntimePlatform' priority' name' initializationType' initializationMethod' environmentChecker
Long Parameter List,Avalonia.Controls.Primitives.PopupPositioning,PopupPositionerExtensions,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\PopupPositioning\IPopupPositioner.cs,ConfigurePosition,The method has 7 parameters. Parameters: positionerParameters' topLevel' target' placement' offset' anchor' gravity
Long Parameter List,Avalonia.Controls.Primitives.PopupPositioning,ManagedPopupPositioner,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\PopupPositioning\ManagedPopupPositioner.cs,Update,The method has 7 parameters. Parameters: translatedSize' originalSize' anchorRect' anchor' gravity' constraintAdjustment' offset
Long Parameter List,Avalonia.Controls.Utils,BorderRenderHelper,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Utils\BorderRenderHelper.cs,Render,The method has 6 parameters. Parameters: context' size' borders' radii' background' borderBrush
Long Identifier,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,,The length of the parameter _populationCancellationTokenSource is 34.
Long Identifier,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,,The length of the parameter _itemTemplateIsFromValueMemberBinding is 37.
Long Identifier,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,,The length of the parameter _settingItemTemplateFromValueMemberBinding is 42.
Long Identifier,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,,The length of the parameter IsTextCompletionEnabledProperty is 31.
Long Identifier,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,,The length of the parameter _textBoxTextChangedSubscription is 31.
Long Identifier,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,,The length of the parameter _buttonPointerPressedSubscription is 33.
Long Identifier,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,,The length of the parameter CustomDateFormatStringProperty is 30.
Long Identifier,Avalonia.Controls,ContentControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ContentControl.cs,,The length of the parameter HorizontalContentAlignmentProperty is 34.
Long Identifier,Avalonia.Controls,ContentControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ContentControl.cs,,The length of the parameter VerticalContentAlignmentProperty is 32.
Long Identifier,Avalonia.Controls,DefinitionBase,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\DefinitionBase.cs,,The length of the parameter PrivateSharedSizeScopeProperty is 30.
Long Identifier,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,,The length of the parameter s_spanPreferredDistributionOrderComparer is 40.
Long Identifier,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,,The length of the parameter s_spanMaxDistributionOrderComparer is 34.
Long Identifier,Avalonia.Controls,ResizeData,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\GridSplitter.cs,,The length of the parameter OriginalDefinition1ActualLength is 31.
Long Identifier,Avalonia.Controls,ResizeData,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\GridSplitter.cs,,The length of the parameter OriginalDefinition2ActualLength is 31.
Long Identifier,Avalonia.Controls,ItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ItemsControl.cs,,The length of the parameter _itemsCollectionChangedSubscription is 35.
Long Identifier,Avalonia.Controls,NativeMenuBar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\NativeMenuBar.cs,,The length of the parameter EnableMenuItemClickForwardingProperty is 37.
Long Identifier,Avalonia.Controls,NumericUpDown,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\NumericUpDown\NumericUpDown.cs,ConvertTextToValueCore,The length of the parameter currentValueTextSpecialCharacters is 33.
Long Identifier,Avalonia.Controls,NumericUpDown,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\NumericUpDown\NumericUpDown.cs,,The length of the parameter _textBoxTextChangedSubscription is 31.
Long Identifier,Avalonia.Controls,NumericUpDown,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\NumericUpDown\NumericUpDown.cs,,The length of the parameter _isSyncingTextAndValueProperties is 32.
Long Identifier,Avalonia.Controls,ProgressBar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ProgressBar.cs,,The length of the parameter IndeterminateStartingOffsetProperty is 35.
Long Identifier,Avalonia.Controls,ProgressBar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ProgressBar.cs,,The length of the parameter IndeterminateEndingOffsetProperty is 33.
Long Identifier,Avalonia.Controls,ItemsRepeater,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ItemsRepeater.cs,ClearElementImpl,The length of the parameter isClearedDueToCollectionChange is 30.
Long Identifier,Avalonia.Controls,ItemsRepeater,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ItemsRepeater.cs,,The length of the parameter ClearedElementsArrangePosition is 30.
Long Identifier,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,ClearElement,The length of the parameter isClearedDueToCollectionChange is 30.
Long Identifier,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,GetElementIfAlreadyHeldByLayout,The length of the parameter isRequestedIndexInRealizedRange is 31.
Long Identifier,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,ClearElementToPinnedPool,The length of the parameter isClearedDueToCollectionChange is 30.
Long Identifier,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,,The length of the parameter FirstRealizedElementIndexDefault is 32.
Long Identifier,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,,The length of the parameter LastRealizedElementIndexDefault is 31.
Long Identifier,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,,The length of the parameter _isDataSourceStableResetPending is 31.
Long Identifier,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,,The length of the parameter _firstRealizedElementIndexHeldByLayout is 38.
Long Identifier,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,,The length of the parameter _lastRealizedElementIndexHeldByLayout is 37.
Long Identifier,Avalonia.Controls,ViewportManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewportManager.cs,OnOwnerArranged,The length of the parameter maximumHorizontalCacheBufferPerSide is 35.
Long Identifier,Avalonia.Controls,ViewportManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewportManager.cs,OnOwnerArranged,The length of the parameter maximumVerticalCacheBufferPerSide is 33.
Long Identifier,Avalonia.Controls,ViewportManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewportManager.cs,,The length of the parameter CacheBufferPerSideInflationPixelDelta is 37.
Long Identifier,Avalonia.Controls,ViewportManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewportManager.cs,,The length of the parameter _effectiveViewportChangedRevoker is 32.
Long Identifier,Avalonia.Controls,ScrollViewer,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ScrollViewer.cs,,The length of the parameter HorizontalScrollBarMaximumProperty is 34.
Long Identifier,Avalonia.Controls,ScrollViewer,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ScrollViewer.cs,,The length of the parameter HorizontalScrollBarValueProperty is 32.
Long Identifier,Avalonia.Controls,ScrollViewer,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ScrollViewer.cs,,The length of the parameter HorizontalScrollBarViewportSizeProperty is 39.
Long Identifier,Avalonia.Controls,ScrollViewer,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ScrollViewer.cs,,The length of the parameter HorizontalScrollBarVisibilityProperty is 37.
Long Identifier,Avalonia.Controls,ScrollViewer,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ScrollViewer.cs,,The length of the parameter VerticalScrollBarMaximumProperty is 32.
Long Identifier,Avalonia.Controls,ScrollViewer,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ScrollViewer.cs,,The length of the parameter VerticalScrollBarValueProperty is 30.
Long Identifier,Avalonia.Controls,ScrollViewer,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ScrollViewer.cs,,The length of the parameter VerticalScrollBarViewportSizeProperty is 37.
Long Identifier,Avalonia.Controls,ScrollViewer,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ScrollViewer.cs,,The length of the parameter VerticalScrollBarVisibilityProperty is 35.
Long Identifier,Avalonia.Controls,TabControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TabControl.cs,,The length of the parameter HorizontalContentAlignmentProperty is 34.
Long Identifier,Avalonia.Controls,TabControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TabControl.cs,,The length of the parameter VerticalContentAlignmentProperty is 32.
Long Identifier,Avalonia.Controls,TabControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TabControl.cs,,The length of the parameter SelectedContentTemplateProperty is 31.
Long Identifier,Avalonia.Controls,TextBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TextBox.cs,,The length of the parameter SelectionForegroundBrushProperty is 32.
Long Identifier,Avalonia.Controls,TreeView,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TreeView.cs,,The length of the parameter AutoScrollToSelectedItemProperty is 32.
Long Identifier,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,,The length of the parameter _isMouseLeftButtonDownYearView is 30.
Long Identifier,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,,The length of the parameter AutoScrollToSelectedItemProperty is 32.
Long Identifier,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,,The length of the parameter _ignoreContainerSelectionChanged is 32.
Long Identifier,Avalonia.Controls.Presenters,ContentPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ContentPresenter.cs,,The length of the parameter HorizontalContentAlignmentProperty is 34.
Long Identifier,Avalonia.Controls.Presenters,ContentPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ContentPresenter.cs,,The length of the parameter VerticalContentAlignmentProperty is 32.
Long Identifier,Avalonia.Controls.Presenters,TextPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\TextPresenter.cs,,The length of the parameter SelectionForegroundBrushProperty is 32.
Long Statement,Avalonia.Controls,AppBuilderBase<TAppBuilder>,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AppBuilderBase.cs,AfterPlatformServicesSetup,The length of the statement  "            AfterPlatformServicesSetupCallback = (Action<TAppBuilder>)Delegate.Combine(AfterPlatformServicesSetupCallback' callback); " is 121.
Long Statement,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,TextUpdated,The length of the statement  "            if (IsTextCompletionEnabled && TextBox != null && TextBoxSelectionLength > 0 && TextBoxSelectionStart != TextBox.Text.Length) " is 125.
Long Statement,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,ItemsCollectionChanged,The length of the statement  "            if ((e.Action == NotifyCollectionChangedAction.Remove || e.Action == NotifyCollectionChangedAction.Replace) && e.OldItems != null) " is 130.
Long Statement,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,UpdateTextCompletion,The length of the statement  "                        object top = FilterMode == AutoCompleteFilterMode.StartsWith || FilterMode == AutoCompleteFilterMode.StartsWithCaseSensitive " is 124.
Long Statement,Avalonia.Controls,ButtonSpinner,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ButtonSpinner.cs,OnPointerWheelChanged,The length of the statement  "                    var spinnerEventArgs = new SpinEventArgs(SpinEvent' (e.Delta.Y < 0) ? SpinDirection.Decrease : SpinDirection.Increase' true); " is 125.
Long Statement,Avalonia.Controls,ButtonSpinner,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ButtonSpinner.cs,SetButtonUsage,The length of the statement  "                IncreaseButton.IsEnabled = AllowSpin && ((ValidSpinDirection & ValidSpinDirections.Increase) == ValidSpinDirections.Increase); " is 126.
Long Statement,Avalonia.Controls,ButtonSpinner,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ButtonSpinner.cs,SetButtonUsage,The length of the statement  "                DecreaseButton.IsEnabled = AllowSpin && ((ValidSpinDirection & ValidSpinDirections.Decrease) == ValidSpinDirections.Decrease); " is 126.
Long Statement,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,SelectedDateMin,The length of the statement  "                Debug.Assert(DateTime.Compare(cal.SelectedDate.Value' selectedDateMin) == 0' "The SelectedDate should be the minimum selected date!"); " is 134.
Long Statement,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,SelectedDateMax,The length of the statement  "                Debug.Assert(DateTime.Compare(cal.SelectedDate.Value' selectedDateMax) == 0' "The SelectedDate should be the maximum SelectedDate!"); " is 133.
Long Statement,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,OnHeaderClick,The length of the statement  "            Debug.Assert(DisplayMode == CalendarMode.Year || DisplayMode == CalendarMode.Decade' "The DisplayMode should be Year or Decade"); " is 129.
Long Statement,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,IsValidKeyboardSelection,The length of the statement  "                    return (DateTime.Compare(value.Value' cal.DisplayDateRangeStart) >= 0 && DateTime.Compare(value.Value' cal.DisplayDateRangeEnd) <= 0); " is 134.
Long Statement,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessCalendarKey,The length of the statement  "                    if (DateTimeHelper.CompareYearMonth(LastSelectedDate.Value' DisplayDateInternal) != 0 && FocusButton != null && !FocusButton.IsInactive) " is 136.
Long Statement,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessShiftKeyUp,The length of the statement  "            if (_isShiftPressed && (SelectionMode == CalendarSelectionMode.SingleRange || SelectionMode == CalendarSelectionMode.MultipleRange)) " is 132.
Long Statement,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,SetCalendarDisplayDateStart,The length of the statement  "            if (_calendar.DisplayDateStart.HasValue && DisplayDateStart.HasValue && DateTime.Compare(_calendar.DisplayDateStart.Value' DisplayDateStart.Value) != 0) " is 152.
Long Statement,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,SetCalendarDisplayDateEnd,The length of the statement  "            if (_calendar.DisplayDateEnd.HasValue && DisplayDateEnd.HasValue && DateTime.Compare(_calendar.DisplayDateEnd.Value' DisplayDateEnd.Value) != 0) " is 144.
Long Statement,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,OnSelectedDateChanged,The length of the statement  "                if ((day.Month != DisplayDate.Month || day.Year != DisplayDate.Year) && (_calendar == null || !_calendar.DatePickerDisplayDateFlag)) " is 132.
Long Statement,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,Calendar_SelectedDatesChanged,The length of the statement  "            if (e.AddedItems.Count > 0 && SelectedDate.HasValue && DateTime.Compare((DateTime)e.AddedItems[0]' SelectedDate.Value) != 0) " is 124.
Long Statement,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,Calendar_KeyDown,The length of the statement  "            if (!e.Handled && (e.Key == Key.Enter || e.Key == Key.Space || e.Key == Key.Escape) && c.DisplayMode == CalendarMode.Month) " is 123.
Long Statement,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,ParseText,The length of the statement  "                    var dateValidationError = new DatePickerDateValidationErrorEventArgs(new ArgumentOutOfRangeException(nameof(text)' "SelectedDate value is not valid.")' text); " is 158.
Long Statement,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,MeasureCellsGroup,The length of the statement  "                        DefinitionsU[PrivateCells[i].ColumnIndex].UpdateMinSize(Math.Min(children[i].DesiredSize.Width' DefinitionsU[PrivateCells[i].ColumnIndex].UserMaxSize)); " is 152.
Long Statement,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,MeasureCellsGroup,The length of the statement  "                        DefinitionsV[PrivateCells[i].RowIndex].UpdateMinSize(Math.Min(children[i].DesiredSize.Height' DefinitionsV[PrivateCells[i].RowIndex].UserMaxSize)); " is 147.
Long Statement,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,ResolveStarMaxDiscrepancy,The length of the statement  "                    double resolvedSize = (def.MeasureSize > 0.0) ? Math.Max(availableSize - takenSize' 0.0) * (def.MeasureSize / def.SizeCache) : 0.0; " is 131.
Long Statement,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,SetFinalSizeMaxDiscrepancy,The length of the statement  "                    double resolvedSize = (def.MeasureSize > 0.0) ? Math.Max(finalSize - takenSize' 0.0) * (def.MeasureSize / def.SizeCache) : 0.0; " is 127.
Long Statement,Avalonia.Controls,LayoutTransformControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\LayoutTransformControl.cs,ArrangeOverride,The length of the statement  "            Rect transformedRect = new Rect(0' 0' finalSizeTransformed.Width' finalSizeTransformed.Height).TransformToAABB(_transformation); " is 128.
Long Statement,Avalonia.Controls,NumericUpDown,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\NumericUpDown\NumericUpDown.cs,ValidateMinMax,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(value)' string.Format("Value must be greater than Minimum value of {0}"' Minimum)); " is 128.
Long Statement,Avalonia.Controls,NumericUpDown,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\NumericUpDown\NumericUpDown.cs,ValidateMinMax,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(value)' string.Format("Value must be less than Maximum value of {0}"' Maximum)); " is 125.
Long Statement,Avalonia.Controls,ItemsRepeater,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ItemsRepeater.cs,OnItemsSourceViewChanged,The length of the statement  "                throw new InvalidOperationException("Changes in the data source are not allowed during another change in the data source."); " is 124.
Long Statement,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,OnItemsSourceChanged,The length of the statement  "                            throw new NotSupportedException("Replace notification with args.OldItemsCount value of 0 is not allowed. Use Insert action instead."); " is 134.
Long Statement,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,OnItemsSourceChanged,The length of the statement  "                            throw new NotSupportedException("Replace notification with args.NewItemCount value of 0 is not allowed. Use Remove action instead."); " is 133.
Long Statement,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,GetElementIfAlreadyHeldByLayout,The length of the statement  "            bool isRequestedIndexInRealizedRange = (_firstRealizedElementIndexHeldByLayout <= index && index <= _lastRealizedElementIndexHeldByLayout); " is 139.
Long Statement,Avalonia.Controls,ViewportManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewportManager.cs,OnBringIntoViewRequested,The length of the statement  "                ////    m_renderingToken = compositionTarget.Rendering(winrt::auto_revoke' { this' &ViewportManagerWithPlatformFeatures::OnCompositionTargetRendering }); " is 153.
Long Statement,Avalonia.Controls,ViewportManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewportManager.cs,GetImmediateChildOfRepeater,The length of the statement  "                throw new InvalidOperationException("OnBringIntoViewRequested called with args.target element not under the ItemsRepeater that recieved the call"); " is 147.
Long Statement,Avalonia.Controls,StackPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\StackPanel.cs,MeasureOverride,The length of the statement  "                    stackDesiredSize = stackDesiredSize.WithWidth(stackDesiredSize.Width + (isVisible ? spacing : 0) + childDesiredSize.Width); " is 123.
Long Statement,Avalonia.Controls,StackPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\StackPanel.cs,MeasureOverride,The length of the statement  "                    stackDesiredSize = stackDesiredSize.WithHeight(stackDesiredSize.Height + (isVisible ? spacing : 0) + childDesiredSize.Height); " is 126.
Long Statement,Avalonia.Controls,TextBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TextBox.cs,HandleTextInput,The length of the statement  "                if (!string.IsNullOrEmpty(input) && (MaxLength == 0 || input.Length + text.Length - (Math.Abs(SelectionStart - SelectionEnd)) <= MaxLength)) " is 140.
Long Statement,Avalonia.Controls,TextBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TextBox.cs,OnPointerMoved,The length of the statement  "                point = new Point(MathUtilities.Clamp(point.X' 0' _presenter.Bounds.Width - 1)' MathUtilities.Clamp(point.Y' 0' _presenter.Bounds.Height - 1)); " is 143.
Long Statement,Avalonia.Controls,WrapPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\WrapPanel.cs,MeasureOverride,The length of the statement  "                        if (MathUtilities.GreaterThan(sz.U' uvConstraint.U)) // The element is wider then the constraint - give it a separate line                     " is 122.
Long Statement,Avalonia.Controls,WrapPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\WrapPanel.cs,ArrangeOverride,The length of the statement  "                        if (MathUtilities.GreaterThan(sz.U' uvFinalSize.U)) // The element is wider then the constraint - give it a separate line                     " is 121.
Long Statement,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,SetDayTitles,The length of the statement  "                        daytitle.DataContext = DateTimeHelper.GetCurrentDateFormat().ShortestDayNames[(childIndex + (int)Owner.FirstDayOfWeek) % NumberOfDaysPerWeek]; " is 142.
Long Statement,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,SetDayTitles,The length of the statement  "                        daytitle.DataContext = DateTimeHelper.GetCurrentDateFormat().ShortestDayNames[(childIndex + (int)DateTimeHelper.GetCurrentDateFormat().FirstDayOfWeek) % NumberOfDaysPerWeek]; " is 174.
Long Statement,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,SetButtonState,The length of the statement  "                if (DateTimeHelper.CompareDays(dateToAdd' Owner.DisplayDateRangeStart) < 0 || DateTimeHelper.CompareDays(dateToAdd' Owner.DisplayDateRangeEnd) > 0) " is 147.
Long Statement,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,SetMonthButtonsForYearMode,The length of the statement  "                    if (DateTimeHelper.CompareYearMonth(day' Owner.DisplayDateRangeStart) < 0 || DateTimeHelper.CompareYearMonth(day' Owner.DisplayDateRangeEnd) > 0) " is 145.
Long Statement,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,SetDecadeModeHeaderButton,The length of the statement  "                HeaderButton.Content = decade.ToString(CultureInfo.CurrentCulture) + "-" + decadeEnd.ToString(CultureInfo.CurrentCulture); " is 122.
Long Statement,Avalonia.Controls.Primitives,SelectedDatesCollection,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\SelectedDatesCollection.cs,CheckSelectionMode,The length of the statement  "                throw new InvalidOperationException("The SelectedDates collection can be changed only in a multiple selection mode. Use the SelectedDate in a single selection mode."); " is 167.
Long Statement,Avalonia.Controls.Primitives,Track,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\Track.cs,ArrangeOverride,The length of the statement  "                if (!ComputeScrollBarLengths(arrangeSize' viewportSize' isVertical' out decreaseButtonLength' out thumbLength' out increaseButtonLength)) " is 137.
Long Statement,Avalonia.Controls.Converters,MarginMultiplierConverter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Converters\MarginMultiplierConverter.cs,Convert,The length of the statement  "            return new Thickness(Left ? Indent * depth : 0' Top ? Indent * depth : 0' Right ? Indent * depth : 0' Bottom ? Indent * depth : 0); " is 131.
Long Statement,Avalonia.Platform,InProcessDragSource,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Platform\InProcessDragSource.cs,GetPreferredEffect,The length of the statement  "            if (effect == DragDropEffects.Copy || effect == DragDropEffects.Move || effect == DragDropEffects.Link || effect == DragDropEffects.None) " is 137.
Long Statement,Avalonia.Platform,InProcessDragSource,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Platform\InProcessDragSource.cs,ProcessMouseEvents,The length of the statement  "                            RaiseEventAndUpdateCursor(RawDragEventType.DragLeave' _lastRoot' _lastRoot.PointToClient(e.Root.PointToScreen(e.Position))' e.InputModifiers); " is 142.
Long Statement,Avalonia.Controls.Remote.Server,RemoteServerTopLevelImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\Server\RemoteServerTopLevelImpl.cs,RenderFrame,The length of the statement  "                    _framebuffer = new LockedFramebuffer(handle.AddrOfPinnedObject()' new PixelSize(width' height)' width * bpp' _dpi' (PixelFormat)fmt' " is 132.
Long Statement,Avalonia.Controls.Utils,SelectingItemsControlSelectionAdapter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Utils\SelectingItemsControlSelectionAdapter.cs,SelectedIndexIncrement,The length of the statement  "                SelectorControl.SelectedIndex = SelectorControl.SelectedIndex + 1 >= SelectorControl.ItemCount ? -1 : SelectorControl.SelectedIndex + 1; " is 136.
Complex Conditional,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,UpdateTextValue,The conditional expression  "(userInitiated == null || userInitiated == false) && TextBox != null && TextBox.Text != value"  is complex.
Complex Conditional,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,TextUpdated,The conditional expression  "IsTextCompletionEnabled && TextBox != null && TextBoxSelectionLength > 0 && TextBoxSelectionStart != TextBox.Text.Length"  is complex.
Complex Conditional,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,TextUpdated,The conditional expression  "populateReady && MinimumPrefixLength == 0 && String.IsNullOrEmpty(newText) && String.IsNullOrEmpty(SearchText)"  is complex.
Complex Conditional,Avalonia.Controls,ButtonSpinner,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ButtonSpinner.cs,OnPointerReleased,The conditional expression  "mousePosition.X > 0 && mousePosition.X < IncreaseButton.Width &&                      mousePosition.Y > 0 && mousePosition.Y < IncreaseButton.Height"  is complex.
Complex Conditional,Avalonia.Controls,ButtonSpinner,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ButtonSpinner.cs,OnPointerReleased,The conditional expression  "mousePosition.X > 0 && mousePosition.X < DecreaseButton.Width &&                      mousePosition.Y > 0 && mousePosition.Y < DecreaseButton.Height"  is complex.
Complex Conditional,Avalonia.Controls,ButtonSpinner,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ButtonSpinner.cs,OnKeyDown,The conditional expression  "((IncreaseButton != null) && (IncreaseButton.IsFocused))                          || ((DecreaseButton != null) && DecreaseButton.IsFocused)"  is complex.
Complex Conditional,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,OnSelectedDateChanged,The conditional expression  "(day.Month != DisplayDate.Month || day.Year != DisplayDate.Year) && (_calendar == null || !_calendar.DatePickerDisplayDateFlag)"  is complex.
Complex Conditional,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,Calendar_KeyDown,The conditional expression  "!e.Handled && (e.Key == Key.Enter || e.Key == Key.Space || e.Key == Key.Escape) && c.DisplayMode == CalendarMode.Month"  is complex.
Complex Conditional,Avalonia.Controls,ComboBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ComboBox.cs,OnKeyDown,The conditional expression  "e.Key == Key.F4 ||                  ((e.Key == Key.Down || e.Key == Key.Up) && ((e.Modifiers & InputModifiers.Alt) != 0))"  is complex.
Complex Conditional,Avalonia.Controls,ComboBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ComboBox.cs,OnKeyDown,The conditional expression  "IsDropDownOpen && SelectedIndex < 0 && ItemCount > 0 &&                        (e.Key == Key.Up || e.Key == Key.Down)"  is complex.
Complex Conditional,Avalonia.Controls,DefinitionBase,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\DefinitionBase.cs,SharedSizeGroupPropertyValueValid,The conditional expression  "(i == 0 && isDigit)                          || !(isDigit                              || Char.IsLetter(id[i])                              || '_' == id[i])"  is complex.
Complex Conditional,Avalonia.Controls,ItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ItemsControl.cs,OnKeyDown,The conditional expression  "container == null ||                      focus.Current == null ||                      direction == null ||                      direction.Value.IsTab()"  is complex.
Complex Conditional,Avalonia.Controls,TextBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TextBox.cs,CoerceCaretIndex,The conditional expression  "value > 0 && text[value - 1] == '\r' && value < length && text[value] == '\n'"  is complex.
Complex Conditional,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,Cell_MouseEnter,The conditional expression  "_isMouseLeftButtonDown && sender is CalendarDayButton b && b.IsEnabled && !b.IsBlackout"  is complex.
Complex Conditional,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,OnKeyDown,The conditional expression  "ItemCount > 0 &&                      Match(keymap.SelectAll) &&                      (((SelectionMode & SelectionMode.Multiple) != 0) ||                        (SelectionMode & SelectionMode.Toggle) != 0)"  is complex.
Complex Conditional,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,ContainerSelectionChanged,The conditional expression  "control != null &&                      selectable != null &&                      control.LogicalParent == this &&                      ItemContainerGenerator?.IndexFromContainer(control) != -1"  is complex.
Complex Conditional,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,SelectedItemsCollectionChanged,The conditional expression  "(SelectedIndex != -1 && !_selection.Contains(SelectedIndex)) ||                      (SelectedIndex == -1 && _selection.HasItems)"  is complex.
Complex Conditional,Avalonia.Platform,InProcessDragSource,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Platform\InProcessDragSource.cs,GetPreferredEffect,The conditional expression  "effect == DragDropEffects.Copy || effect == DragDropEffects.Move || effect == DragDropEffects.Link || effect == DragDropEffects.None"  is complex.
Complex Conditional,Avalonia.Platform,InProcessDragSource,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Platform\InProcessDragSource.cs,ProcessKeyEvents,The conditional expression  "e.Key == Key.LeftCtrl || e.Key == Key.RightCtrl || e.Key == Key.LeftAlt || e.Key == Key.RightAlt"  is complex.
Complex Conditional,Avalonia.Controls.Primitives.PopupPositioning,PopupPositioningEdgeHelper,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\PopupPositioning\IPopupPositioner.cs,ValidateEdge,The conditional expression  "((edge & PopupPositioningEdge.Left) != 0 && (edge & PopupPositioningEdge.Right) != 0)                  ||                  ((edge & PopupPositioningEdge.Top) != 0 && (edge & PopupPositioningEdge.Bottom) != 0)"  is complex.
Empty Catch Block,Avalonia.Controls,AutoCompleteBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\AutoCompleteBox.cs,PopulateAsync,The method has an empty catch block.
Magic Number,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,OnIsTodayHighlightedChanged,The following statement contains a magic number: i > -2 && i < 2
Magic Number,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,OnIsTodayHighlightedChanged,The following statement contains a magic number: i > -2 && i < 2
Magic Number,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessEndKey,The following statement contains a magic number: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          if (DisplayDate != null)                          {                              DateTime? selectedDate = new DateTime(DisplayDateInternal.Year' DisplayDateInternal.Month' 1);                                if (DateTimeHelper.CompareYearMonth(DateTime.MaxValue' selectedDate.Value) > 0)                              {                                  // since DisplayDate is not equal to                                  // DateTime.MaxValue we are sure selectedDate is\                                  // not null                                  selectedDate = DateTimeHelper.AddMonths(selectedDate.Value' 1).Value;                                  selectedDate = DateTimeHelper.AddDays(selectedDate.Value' -1).Value;                              }                              else                              {                                  selectedDate = DateTime.MaxValue;                              }                              ProcessSelection(shift' selectedDate' null);                          }                          break;                      }                  case CalendarMode.Year:                      {                          DateTime selectedMonth = new DateTime(_selectedMonth.Year' 12' 1);                          OnSelectedMonthChanged(selectedMonth);                          break;                      }                  case CalendarMode.Decade:                      {                          DateTime? selectedYear = new DateTime(DateTimeHelper.EndOfDecade(SelectedYear)' 1' 1);                          OnSelectedYearChanged(selectedYear);                          break;                      }              }
Magic Number,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessPageDownKey,The following statement contains a magic number: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          DateTime? selectedDate = DateTimeHelper.AddMonths(LastSelectedDate.GetValueOrDefault(DateTime.Today)' 1);                          ProcessSelection(shift' selectedDate' null);                          break;                      }                  case CalendarMode.Year:                      {                          DateTime? selectedMonth = DateTimeHelper.AddYears(_selectedMonth' 1);                          OnSelectedMonthChanged(selectedMonth);                          break;                      }                  case CalendarMode.Decade:                      {                          DateTime? selectedYear = DateTimeHelper.AddYears(SelectedYear' 10);                          OnSelectedYearChanged(selectedYear);                          break;                      }              }
Magic Number,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessPageUpKey,The following statement contains a magic number: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          DateTime? selectedDate = DateTimeHelper.AddMonths(LastSelectedDate.GetValueOrDefault(DateTime.Today)' -1);                          ProcessSelection(shift' selectedDate' null);                          break;                      }                  case CalendarMode.Year:                      {                          DateTime? selectedMonth = DateTimeHelper.AddYears(_selectedMonth' -1);                          OnSelectedMonthChanged(selectedMonth);                          break;                      }                  case CalendarMode.Decade:                      {                          DateTime? selectedYear = DateTimeHelper.AddYears(SelectedYear' -10);                          OnSelectedYearChanged(selectedYear);                          break;                      }              }
Magic Number,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,Calendar_SelectedDatesChanged,The following statement contains a magic number: Debug.Assert(e.AddedItems.Count < 2' "There should be less than 2 AddedItems!");
Magic Number,Avalonia.Controls,DateTimeHelper,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DateTimeHelper.cs,CompareYearMonth,The following statement contains a magic number: return (dt1.Year - dt2.Year) * 12 + (dt1.Month - dt2.Month);
Magic Number,Avalonia.Controls,DateTimeHelper,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DateTimeHelper.cs,DecadeOfDate,The following statement contains a magic number: return date.Year - (date.Year % 10);
Magic Number,Avalonia.Controls,DateTimeHelper,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DateTimeHelper.cs,EndOfDecade,The following statement contains a magic number: return DecadeOfDate(date) + 9;
Magic Number,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,ResolveStarMaxDiscrepancy,The following statement contains a magic number: const double starFactor = 1.0 / 256.0;
Magic Number,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,SetFinalSizeMaxDiscrepancy,The following statement contains a magic number: const double starFactor = 1.0 / 256.0;
Magic Number,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,Choose,The following statement contains a magic number: double minPower = Math.Floor(Math.Log(minRatio' 2.0));
Magic Number,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,Choose,The following statement contains a magic number: double maxPower = Math.Floor(Math.Log(maxRatio' 2.0));
Magic Number,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,Choose,The following statement contains a magic number: double f = Math.Pow(2.0' Math.Floor((minPower + maxPower) / 2.0));
Magic Number,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,Choose,The following statement contains a magic number: double f = Math.Pow(2.0' Math.Floor((minPower + maxPower) / 2.0));
Magic Number,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,CompareNullRefs,The following statement contains a magic number: result = 2;
Magic Number,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,CompareNullRefs,The following statement contains a magic number: return (result != 2);
Magic Number,Avalonia.Controls,SpanKey,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,GetHashCode,The following statement contains a magic number: int hash = (_start ^ (_count << 2));
Magic Number,Avalonia.Controls,LayoutTransformControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\LayoutTransformControl.cs,ArrangeOverride,The following statement contains a magic number: Rect finalRect = new Rect(                  -transformedRect.X + ((finalSize.Width - transformedRect.Width) / 2)'                  -transformedRect.Y + ((finalSize.Height - transformedRect.Height) / 2)'                  finalSizeTransformed.Width'                  finalSizeTransformed.Height);
Magic Number,Avalonia.Controls,LayoutTransformControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\LayoutTransformControl.cs,ArrangeOverride,The following statement contains a magic number: Rect finalRect = new Rect(                  -transformedRect.X + ((finalSize.Width - transformedRect.Width) / 2)'                  -transformedRect.Y + ((finalSize.Height - transformedRect.Height) / 2)'                  finalSizeTransformed.Width'                  finalSizeTransformed.Height);
Magic Number,Avalonia.Controls,LayoutTransformControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\LayoutTransformControl.cs,ComputeLargestTransformedSize,The following statement contains a magic number: double idealWidthFromWidth = maxWidthFromWidth / 2;
Magic Number,Avalonia.Controls,LayoutTransformControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\LayoutTransformControl.cs,ComputeLargestTransformedSize,The following statement contains a magic number: double idealHeightFromWidth = maxHeightFromWidth / 2;
Magic Number,Avalonia.Controls,LayoutTransformControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\LayoutTransformControl.cs,ComputeLargestTransformedSize,The following statement contains a magic number: double idealWidthFromHeight = maxWidthFromHeight / 2;
Magic Number,Avalonia.Controls,LayoutTransformControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\LayoutTransformControl.cs,ComputeLargestTransformedSize,The following statement contains a magic number: double idealHeightFromHeight = maxHeightFromHeight / 2;
Magic Number,Avalonia.Controls,NumericUpDown,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\NumericUpDown\NumericUpDown.cs,ParsePercent,The following statement contains a magic number: result = result / 100;
Magic Number,Avalonia.Controls,ProgressBar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ProgressBar.cs,UpdateIndicator,The following statement contains a magic number: var width = bounds.Width / 5.0;
Magic Number,Avalonia.Controls,ViewportManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewportManager.cs,GetLayoutRealizationWindow,The following statement contains a magic number: realizationWindow = new Rect(                      realizationWindow.X - _horizontalCacheBufferPerSide'                      realizationWindow.Y - _verticalCacheBufferPerSide'                      realizationWindow.Width + _horizontalCacheBufferPerSide * 2.0'                      realizationWindow.Height + _verticalCacheBufferPerSide * 2.0);
Magic Number,Avalonia.Controls,ViewportManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewportManager.cs,GetLayoutRealizationWindow,The following statement contains a magic number: realizationWindow = new Rect(                      realizationWindow.X - _horizontalCacheBufferPerSide'                      realizationWindow.Y - _verticalCacheBufferPerSide'                      realizationWindow.Width + _horizontalCacheBufferPerSide * 2.0'                      realizationWindow.Height + _verticalCacheBufferPerSide * 2.0);
Magic Number,Avalonia.Controls,ViewportManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewportManager.cs,OnOwnerArranged,The following statement contains a magic number: double maximumHorizontalCacheBufferPerSide = _maximumHorizontalCacheLength * _visibleWindow.Width / 2.0;
Magic Number,Avalonia.Controls,ViewportManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewportManager.cs,OnOwnerArranged,The following statement contains a magic number: double maximumVerticalCacheBufferPerSide = _maximumVerticalCacheLength * _visibleWindow.Height / 2.0;
Magic Number,Avalonia.Controls,Slider,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Slider.cs,SnapToTick,The following statement contains a magic number: value = value > (previous + next) * 0.5 ? next : previous;
Magic Number,Avalonia.Controls,TextBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TextBox.cs,OnPointerPressed,The following statement contains a magic number: switch (e.ClickCount)                  {                      case 1:                          SelectionStart = SelectionEnd = index;                          break;                      case 2:                          if (!StringUtils.IsStartOfWord(text' index))                          {                              SelectionStart = StringUtils.PreviousWord(text' index);                          }                            SelectionEnd = StringUtils.NextWord(text' index);                          break;                      case 3:                          SelectionStart = 0;                          SelectionEnd = text.Length;                          break;                  }
Magic Number,Avalonia.Controls,TextBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TextBox.cs,OnPointerPressed,The following statement contains a magic number: switch (e.ClickCount)                  {                      case 1:                          SelectionStart = SelectionEnd = index;                          break;                      case 2:                          if (!StringUtils.IsStartOfWord(text' index))                          {                              SelectionStart = StringUtils.PreviousWord(text' index);                          }                            SelectionEnd = StringUtils.NextWord(text' index);                          break;                      case 3:                          SelectionStart = 0;                          SelectionEnd = text.Length;                          break;                  }
Magic Number,Avalonia.Controls,TextBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TextBox.cs,MoveHorizontal,The following statement contains a magic number: CaretIndex += (c == '\r' && index < text.Length - 1 && text[index + 1] == '\n') ? 2 : 1;
Magic Number,Avalonia.Controls,TextBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TextBox.cs,MoveVertical,The following statement contains a magic number: var point = new Point(rect.X' y + (count * (line.Height / 2)));
Magic Number,Avalonia.Controls.Primitives,SelectedDatesCollection,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\SelectedDatesCollection.cs,InsertItem,The following statement contains a magic number: monthDifference < 2 && monthDifference > -2
Magic Number,Avalonia.Controls.Primitives,SelectedDatesCollection,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\SelectedDatesCollection.cs,InsertItem,The following statement contains a magic number: monthDifference < 2 && monthDifference > -2
Magic Number,Avalonia.Controls.Primitives,AccessText,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\AccessText.cs,Render,The following statement contains a magic number: var offset = new Vector(0' -0.5);
Magic Number,Avalonia.Controls.Primitives,Track,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\Track.cs,ValueFromPoint,The following statement contains a magic number: val = Value + ValueFromDistance(point.X - ThumbCenterOffset' point.Y - (Bounds.Height * 0.5));
Magic Number,Avalonia.Controls.Primitives,Track,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\Track.cs,ArrangeOverride,The following statement contains a magic number: ThumbCenterOffset = offset.Y + (thumbLength * 0.5);
Magic Number,Avalonia.Controls.Primitives,Track,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\Track.cs,ComputeScrollBarLengths,The following statement contains a magic number: double thumbMinLength = 10;
Magic Number,Avalonia.Controls.Notifications,Notification,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Notifications\Notification.cs,Notification,The following statement contains a magic number: Expiration = expiration.HasValue ? expiration.Value : TimeSpan.FromSeconds(5);
Magic Number,Avalonia.Controls.Notifications,WindowNotificationManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Notifications\WindowNotificationManager.cs,Show,The following statement contains a magic number: await Task.Delay(notification?.Expiration ?? TimeSpan.FromSeconds(5));
Magic Number,Avalonia.Controls.Presenters,ContentPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ContentPresenter.cs,ArrangeOverrideImpl,The following statement contains a magic number: switch (horizontalContentAlignment)              {                  case HorizontalAlignment.Center:                      originX += (availableSize.Width - sizeForChild.Width) / 2;                      break;                  case HorizontalAlignment.Right:                      originX += availableSize.Width - sizeForChild.Width;                      break;              }
Magic Number,Avalonia.Controls.Presenters,ContentPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ContentPresenter.cs,ArrangeOverrideImpl,The following statement contains a magic number: switch (verticalContentAlignment)              {                  case VerticalAlignment.Center:                      originY += (availableSize.Height - sizeForChild.Height) / 2;                      break;                  case VerticalAlignment.Bottom:                      originY += availableSize.Height - sizeForChild.Height;                      break;              }
Magic Number,Avalonia.Controls.Presenters,ScrollContentPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ScrollContentPresenter.cs,OnPointerWheelChanged,The following statement contains a magic number: double height = isLogical ? scrollable.ScrollSize.Height : 50;
Magic Number,Avalonia.Controls.Presenters,ScrollContentPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ScrollContentPresenter.cs,OnPointerWheelChanged,The following statement contains a magic number: double width = isLogical ? scrollable.ScrollSize.Width : 50;
Magic Number,Avalonia.Controls.Presenters,TextPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\TextPresenter.cs,TextPresenter,The following statement contains a magic number: _caretTimer.Interval = TimeSpan.FromMilliseconds(500);
Magic Number,Avalonia.Controls.Presenters,TextPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\TextPresenter.cs,Render,The following statement contains a magic number: var x = Math.Floor(charPos.X) + 0.5;
Magic Number,Avalonia.Controls.Presenters,TextPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\TextPresenter.cs,Render,The following statement contains a magic number: var y = Math.Floor(charPos.Y) + 0.5;
Magic Number,Avalonia.Controls.Presenters,TextPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\TextPresenter.cs,Render,The following statement contains a magic number: var b = Math.Ceiling(charPos.Bottom) - 0.5;
Magic Number,Avalonia.Controls.Remote,RemoteWidget,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\RemoteWidget.cs,ArrangeCore,The following statement contains a magic number: _connection.Send(new ClientViewportAllocatedMessage                  {                      Width = finalRect.Width'                      Height = finalRect.Height'                      DpiX = 10 * 96'                      DpiY = 10 * 96 //TODO: Somehow detect the actual DPI                  });
Magic Number,Avalonia.Controls.Remote,RemoteWidget,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\RemoteWidget.cs,ArrangeCore,The following statement contains a magic number: _connection.Send(new ClientViewportAllocatedMessage                  {                      Width = finalRect.Width'                      Height = finalRect.Height'                      DpiX = 10 * 96'                      DpiY = 10 * 96 //TODO: Somehow detect the actual DPI                  });
Magic Number,Avalonia.Controls.Remote,RemoteWidget,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\RemoteWidget.cs,ArrangeCore,The following statement contains a magic number: _connection.Send(new ClientViewportAllocatedMessage                  {                      Width = finalRect.Width'                      Height = finalRect.Height'                      DpiX = 10 * 96'                      DpiY = 10 * 96 //TODO: Somehow detect the actual DPI                  });
Magic Number,Avalonia.Controls.Remote,RemoteWidget,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\RemoteWidget.cs,ArrangeCore,The following statement contains a magic number: _connection.Send(new ClientViewportAllocatedMessage                  {                      Width = finalRect.Width'                      Height = finalRect.Height'                      DpiX = 10 * 96'                      DpiY = 10 * 96 //TODO: Somehow detect the actual DPI                  });
Magic Number,Avalonia.Controls.Remote,RemoteWidget,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\RemoteWidget.cs,Render,The following statement contains a magic number: _bitmap = new WriteableBitmap(new PixelSize(_lastFrame.Width' _lastFrame.Height)' new Vector(96' 96)' fmt);
Magic Number,Avalonia.Controls.Remote,RemoteWidget,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\RemoteWidget.cs,Render,The following statement contains a magic number: _bitmap = new WriteableBitmap(new PixelSize(_lastFrame.Width' _lastFrame.Height)' new Vector(96' 96)' fmt);
Magic Number,Avalonia.Controls.Remote,RemoteWidget,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\RemoteWidget.cs,Render,The following statement contains a magic number: var lineLen = (fmt == PixelFormat.Rgb565 ? 2 : 4) * _lastFrame.Width;
Magic Number,Avalonia.Controls.Remote,RemoteWidget,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\RemoteWidget.cs,Render,The following statement contains a magic number: var lineLen = (fmt == PixelFormat.Rgb565 ? 2 : 4) * _lastFrame.Width;
Magic Number,Avalonia.Controls.Remote.Server,RemoteServerTopLevelImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\Server\RemoteServerTopLevelImpl.cs,RenderFrame,The following statement contains a magic number: var scalingX = _dpi.X / 96.0;
Magic Number,Avalonia.Controls.Remote.Server,RemoteServerTopLevelImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\Server\RemoteServerTopLevelImpl.cs,RenderFrame,The following statement contains a magic number: var scalingY = _dpi.Y / 96.0;
Magic Number,Avalonia.Controls.Remote.Server,RemoteServerTopLevelImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\Server\RemoteServerTopLevelImpl.cs,RenderFrame,The following statement contains a magic number: var bpp = fmt == ProtocolPixelFormat.Rgb565 ? 2 : 4;
Magic Number,Avalonia.Controls.Remote.Server,RemoteServerTopLevelImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\Server\RemoteServerTopLevelImpl.cs,RenderFrame,The following statement contains a magic number: var bpp = fmt == ProtocolPixelFormat.Rgb565 ? 2 : 4;
Magic Number,Avalonia.Controls.Shapes,Ellipse,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Shapes\Ellipse.cs,CreateDefiningGeometry,The following statement contains a magic number: var rect = new Rect(Bounds.Size).Deflate(StrokeThickness / 2);
Magic Number,Avalonia.Controls.Shapes,Rectangle,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Shapes\Rectangle.cs,CreateDefiningGeometry,The following statement contains a magic number: var rect = new Rect(Bounds.Size).Deflate(StrokeThickness / 2);
Magic Number,Avalonia.Controls.Utils,BorderGeometryKeypoints,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Utils\BorderRenderHelper.cs,BorderGeometryKeypoints,The following statement contains a magic number: var left = 0.5 * borderThickness.Left;
Magic Number,Avalonia.Controls.Utils,BorderGeometryKeypoints,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Utils\BorderRenderHelper.cs,BorderGeometryKeypoints,The following statement contains a magic number: var top = 0.5 * borderThickness.Top;
Magic Number,Avalonia.Controls.Utils,BorderGeometryKeypoints,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Utils\BorderRenderHelper.cs,BorderGeometryKeypoints,The following statement contains a magic number: var right = 0.5 * borderThickness.Right;
Magic Number,Avalonia.Controls.Utils,BorderGeometryKeypoints,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Utils\BorderRenderHelper.cs,BorderGeometryKeypoints,The following statement contains a magic number: var bottom = 0.5 * borderThickness.Bottom;
Magic Number,Avalonia.Controls.Utils,StringUtils,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Utils\StringUtils.cs,LineEnd,The following statement contains a magic number: cursor += 2;
Missing Default,Avalonia.Controls,ButtonSpinner,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ButtonSpinner.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Up:                  {                      if (AllowSpin)                      {                          OnSpin(new SpinEventArgs(SpinEvent' SpinDirection.Increase));                          e.Handled = true;                      }                      break;                  }                  case Key.Down:                  {                      if (AllowSpin)                      {                          OnSpin(new SpinEventArgs(SpinEvent' SpinDirection.Decrease));                          e.Handled = true;                      }                      break;                  }                  case Key.Enter:                  {                      //Do not Spin on enter Key when spinners have focus                      if (((IncreaseButton != null) && (IncreaseButton.IsFocused))                          || ((DecreaseButton != null) && DecreaseButton.IsFocused))                      {                          e.Handled = true;                      }                      break;                  }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,OnDisplayModePropertyChanged,The following switch statement is missing a default case: switch (oldMode)                  {                      case CalendarMode.Month:                          {                              SelectedYear = DisplayDateInternal;                              SelectedMonth = DisplayDateInternal;                              break;                          }                      case CalendarMode.Year:                          {                              DisplayDate = SelectedMonth;                              SelectedYear = SelectedMonth;                              break;                          }                      case CalendarMode.Decade:                          {                              DisplayDate = SelectedYear;                              SelectedMonth = SelectedYear;                              break;                          }                  }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,OnDisplayModePropertyChanged,The following switch statement is missing a default case: switch (mode)                  {                      case CalendarMode.Month:                          {                              OnMonthClick();                              break;                          }                      case CalendarMode.Year:                      case CalendarMode.Decade:                          {                              OnHeaderClick();                              break;                          }                  }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,UpdateMonths,The following switch statement is missing a default case: switch (DisplayMode)                  {                      case CalendarMode.Month:                          {                              monthControl.UpdateMonthMode();                              break;                          }                      case CalendarMode.Year:                          {                              monthControl.UpdateYearMode();                              break;                          }                      case CalendarMode.Decade:                          {                              monthControl.UpdateDecadeMode();                              break;                          }                  }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessCalendarKey,The following switch statement is missing a default case: switch (invariantKey)              {                  case Key.Up:                      {                          ProcessUpKey(ctrl' shift);                          return true;                      }                  case Key.Down:                      {                          ProcessDownKey(ctrl' shift);                          return true;                      }                  case Key.Left:                      {                          ProcessLeftKey(shift);                          return true;                      }                  case Key.Right:                      {                          ProcessRightKey(shift);                          return true;                      }                  case Key.PageDown:                      {                          ProcessPageDownKey(shift);                          return true;                      }                  case Key.PageUp:                      {                          ProcessPageUpKey(shift);                          return true;                      }                  case Key.Home:                      {                          ProcessHomeKey(shift);                          return true;                      }                  case Key.End:                      {                          ProcessEndKey(shift);                          return true;                      }                  case Key.Enter:                  case Key.Space:                      {                          return ProcessEnterKey();                      }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessUpKey,The following switch statement is missing a default case: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          if (ctrl)                          {                              SelectedMonth = DisplayDateInternal;                              DisplayMode = CalendarMode.Year;                          }                          else                          {                              DateTime? selectedDate = DateTimeHelper.AddDays(LastSelectedDate.GetValueOrDefault(DateTime.Today)' -ColumnsPerMonth);                              ProcessSelection(shift' selectedDate' -ColumnsPerMonth);                          }                          break;                      }                  case CalendarMode.Year:                      {                          if (ctrl)                          {                              SelectedYear = SelectedMonth;                              DisplayMode = CalendarMode.Decade;                          }                          else                          {                              DateTime? selectedMonth = DateTimeHelper.AddMonths(_selectedMonth' -ColumnsPerYear);                              OnSelectedMonthChanged(selectedMonth);                          }                          break;                      }                  case CalendarMode.Decade:                      {                          if (!ctrl)                          {                              DateTime? selectedYear = DateTimeHelper.AddYears(SelectedYear' -ColumnsPerYear);                              OnSelectedYearChanged(selectedYear);                          }                          break;                      }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessDownKey,The following switch statement is missing a default case: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          if (!ctrl || shift)                          {                              DateTime? selectedDate = DateTimeHelper.AddDays(LastSelectedDate.GetValueOrDefault(DateTime.Today)' ColumnsPerMonth);                              ProcessSelection(shift' selectedDate' ColumnsPerMonth);                          }                          break;                      }                  case CalendarMode.Year:                      {                          if (ctrl)                          {                              DisplayDate = SelectedMonth;                              DisplayMode = CalendarMode.Month;                          }                          else                          {                              DateTime? selectedMonth = DateTimeHelper.AddMonths(_selectedMonth' ColumnsPerYear);                              OnSelectedMonthChanged(selectedMonth);                          }                          break;                      }                  case CalendarMode.Decade:                      {                          if (ctrl)                          {                              SelectedMonth = SelectedYear;                              DisplayMode = CalendarMode.Year;                          }                          else                          {                              DateTime? selectedYear = DateTimeHelper.AddYears(SelectedYear' ColumnsPerYear);                              OnSelectedYearChanged(selectedYear);                          }                          break;                      }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessLeftKey,The following switch statement is missing a default case: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          DateTime? selectedDate = DateTimeHelper.AddDays(LastSelectedDate.GetValueOrDefault(DateTime.Today)' -1);                          ProcessSelection(shift' selectedDate' -1);                          break;                      }                  case CalendarMode.Year:                      {                          DateTime? selectedMonth = DateTimeHelper.AddMonths(_selectedMonth' -1);                          OnSelectedMonthChanged(selectedMonth);                          break;                      }                  case CalendarMode.Decade:                      {                          DateTime? selectedYear = DateTimeHelper.AddYears(SelectedYear' -1);                          OnSelectedYearChanged(selectedYear);                          break;                      }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessRightKey,The following switch statement is missing a default case: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          DateTime? selectedDate = DateTimeHelper.AddDays(LastSelectedDate.GetValueOrDefault(DateTime.Today)' 1);                          ProcessSelection(shift' selectedDate' 1);                          break;                      }                  case CalendarMode.Year:                      {                          DateTime? selectedMonth = DateTimeHelper.AddMonths(_selectedMonth' 1);                          OnSelectedMonthChanged(selectedMonth);                          break;                      }                  case CalendarMode.Decade:                      {                          DateTime? selectedYear = DateTimeHelper.AddYears(SelectedYear' 1);                          OnSelectedYearChanged(selectedYear);                          break;                      }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessEnterKey,The following switch statement is missing a default case: switch (DisplayMode)              {                  case CalendarMode.Year:                      {                          DisplayDate = SelectedMonth;                          DisplayMode = CalendarMode.Month;                          return true;                      }                  case CalendarMode.Decade:                      {                          SelectedMonth = SelectedYear;                          DisplayMode = CalendarMode.Year;                          return true;                      }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessHomeKey,The following switch statement is missing a default case: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          // REMOVE_RTM: Not all types of calendars start with Day1. If Non-Gregorian is supported check this:                          DateTime? selectedDate = new DateTime(DisplayDateInternal.Year' DisplayDateInternal.Month' 1);                          ProcessSelection(shift' selectedDate' null);                          break;                      }                  case CalendarMode.Year:                      {                          DateTime selectedMonth = new DateTime(_selectedMonth.Year' 1' 1);                          OnSelectedMonthChanged(selectedMonth);                          break;                      }                  case CalendarMode.Decade:                      {                          DateTime? selectedYear = new DateTime(DateTimeHelper.DecadeOfDate(SelectedYear)' 1' 1);                          OnSelectedYearChanged(selectedYear);                          break;                      }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessEndKey,The following switch statement is missing a default case: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          if (DisplayDate != null)                          {                              DateTime? selectedDate = new DateTime(DisplayDateInternal.Year' DisplayDateInternal.Month' 1);                                if (DateTimeHelper.CompareYearMonth(DateTime.MaxValue' selectedDate.Value) > 0)                              {                                  // since DisplayDate is not equal to                                  // DateTime.MaxValue we are sure selectedDate is\                                  // not null                                  selectedDate = DateTimeHelper.AddMonths(selectedDate.Value' 1).Value;                                  selectedDate = DateTimeHelper.AddDays(selectedDate.Value' -1).Value;                              }                              else                              {                                  selectedDate = DateTime.MaxValue;                              }                              ProcessSelection(shift' selectedDate' null);                          }                          break;                      }                  case CalendarMode.Year:                      {                          DateTime selectedMonth = new DateTime(_selectedMonth.Year' 12' 1);                          OnSelectedMonthChanged(selectedMonth);                          break;                      }                  case CalendarMode.Decade:                      {                          DateTime? selectedYear = new DateTime(DateTimeHelper.EndOfDecade(SelectedYear)' 1' 1);                          OnSelectedYearChanged(selectedYear);                          break;                      }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessPageDownKey,The following switch statement is missing a default case: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          DateTime? selectedDate = DateTimeHelper.AddMonths(LastSelectedDate.GetValueOrDefault(DateTime.Today)' 1);                          ProcessSelection(shift' selectedDate' null);                          break;                      }                  case CalendarMode.Year:                      {                          DateTime? selectedMonth = DateTimeHelper.AddYears(_selectedMonth' 1);                          OnSelectedMonthChanged(selectedMonth);                          break;                      }                  case CalendarMode.Decade:                      {                          DateTime? selectedYear = DateTimeHelper.AddYears(SelectedYear' 10);                          OnSelectedYearChanged(selectedYear);                          break;                      }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,ProcessPageUpKey,The following switch statement is missing a default case: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          DateTime? selectedDate = DateTimeHelper.AddMonths(LastSelectedDate.GetValueOrDefault(DateTime.Today)' -1);                          ProcessSelection(shift' selectedDate' null);                          break;                      }                  case CalendarMode.Year:                      {                          DateTime? selectedMonth = DateTimeHelper.AddYears(_selectedMonth' -1);                          OnSelectedMonthChanged(selectedMonth);                          break;                      }                  case CalendarMode.Decade:                      {                          DateTime? selectedYear = DateTimeHelper.AddYears(SelectedYear' -10);                          OnSelectedYearChanged(selectedYear);                          break;                      }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,OnGotFocus,The following switch statement is missing a default case: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          DateTime focusDate;                          if (LastSelectedDate.HasValue && DateTimeHelper.CompareYearMonth(DisplayDateInternal' LastSelectedDate.Value) == 0)                          {                              focusDate = LastSelectedDate.Value;                          }                          else                          {                              focusDate = DisplayDate;                              LastSelectedDate = DisplayDate;                          }                          Debug.Assert(focusDate != null' "focusDate should not be null!");                          FocusButton = FindDayButtonFromDay(focusDate);                            if (FocusButton != null)                          {                              FocusButton.IsCurrent = true;                          }                          break;                      }                  case CalendarMode.Year:                  case CalendarMode.Decade:                      {                          if (this.FocusCalendarButton != null)                          {                              FocusCalendarButton.IsCalendarButtonFocused = true;                          }                          break;                      }              }
Missing Default,Avalonia.Controls,Calendar,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\Calendar.cs,OnLostFocus,The following switch statement is missing a default case: switch (DisplayMode)              {                  case CalendarMode.Month:                      {                          if (FocusButton != null)                          {                              FocusButton.IsCurrent = false;                          }                          break;                      }                  case CalendarMode.Year:                  case CalendarMode.Decade:                      {                          if (FocusCalendarButton != null)                          {                              FocusCalendarButton.IsCalendarButtonFocused = false;                          }                          break;                      }              }
Missing Default,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,DateTimeToString,The following switch statement is missing a default case: switch (SelectedDateFormat)              {                  case DatePickerFormat.Short:                      return string.Format(CultureInfo.CurrentCulture' d.ToString(dtfi.ShortDatePattern' dtfi));                  case DatePickerFormat.Long:                      return string.Format(CultureInfo.CurrentCulture' d.ToString(dtfi.LongDatePattern' dtfi));                  case DatePickerFormat.Custom:                      return string.Format(CultureInfo.CurrentCulture' d.ToString(CustomDateFormatString' dtfi));              }
Missing Default,Avalonia.Controls,DatePicker,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\DatePicker.cs,ProcessDatePickerKey,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Enter:                      {                          SetSelectedDate();                          return true;                      }                  case Key.Down:                      {                           if ((e.Modifiers & InputModifiers.Control) == InputModifiers.Control)                          {                              HandlePopUp();                              return true;                          }                          break;                      }              }
Missing Default,Avalonia.Controls,DockPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\DockPanel.cs,MeasureOverride,The following switch statement is missing a default case: switch (DockPanel.GetDock((Control)child))                  {                      case Dock.Left:                      case Dock.Right:                          parentHeight = Math.Max(parentHeight' accumulatedHeight + childDesiredSize.Height);                          accumulatedWidth += childDesiredSize.Width;                          break;                        case Dock.Top:                      case Dock.Bottom:                          parentWidth = Math.Max(parentWidth' accumulatedWidth + childDesiredSize.Width);                          accumulatedHeight += childDesiredSize.Height;                          break;                  }
Missing Default,Avalonia.Controls,DockPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\DockPanel.cs,ArrangeOverride,The following switch statement is missing a default case: switch (DockPanel.GetDock((Control)child))                      {                          case Dock.Left:                              accumulatedLeft += childDesiredSize.Width;                              rcChild = rcChild.WithWidth(childDesiredSize.Width);                              break;                            case Dock.Right:                              accumulatedRight += childDesiredSize.Width;                              rcChild = rcChild.WithX(Math.Max(0.0' arrangeSize.Width - accumulatedRight));                              rcChild = rcChild.WithWidth(childDesiredSize.Width);                              break;                            case Dock.Top:                              accumulatedTop += childDesiredSize.Height;                              rcChild = rcChild.WithHeight(childDesiredSize.Height);                              break;                            case Dock.Bottom:                              accumulatedBottom += childDesiredSize.Height;                              rcChild = rcChild.WithY(Math.Max(0.0' arrangeSize.Height - accumulatedBottom));                              rcChild = rcChild.WithHeight(childDesiredSize.Height);                              break;                      }
Missing Default,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,ResolveStarMaxDiscrepancy,The following switch statement is missing a default case: switch (def.SizeType)                      {                          case (LayoutTimeSizeType.Auto):                              takenSize += definitions[i].MinSize;                              break;                          case (LayoutTimeSizeType.Pixel):                              takenSize += def.MeasureSize;                              break;                          case (LayoutTimeSizeType.Star):                              if (def.MeasureSize < 0.0)                              {                                  takenSize += -def.MeasureSize;  // already resolved                              }                              else                              {                                  double starWeight = StarWeight(def' scale);                                  totalStarWeight += starWeight;                                    if (def.MinSize > 0.0)                                  {                                      // store ratio w/min in MeasureSize (for now)                                      tempDefinitions[minCount++] = def;                                      def.MeasureSize = starWeight / def.MinSize;                                  }                                    double effectiveMaxSize = Math.Max(def.MinSize' def.UserMaxSize);                                  if (!Double.IsPositiveInfinity(effectiveMaxSize))                                  {                                      // store ratio w/max in SizeCache (for now)                                      tempDefinitions[defCount + maxCount++] = def;                                      def.SizeCache = starWeight / effectiveMaxSize;                                  }                              }                              break;                      }
Missing Default,Avalonia.Controls,Grid,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Grid.cs,SetFinalSizeMaxDiscrepancy,The following switch statement is missing a default case: switch (def.UserSize.GridUnitType)                          {                              case (GridUnitType.Pixel):                                  userSize = def.UserSize.Value;                                  break;                                case (GridUnitType.Auto):                                  userSize = def.MinSizeForArrange;                                  break;                          }
Missing Default,Avalonia.Controls,GridSplitter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\GridSplitter.cs,OnPointerEnter,The following switch statement is missing a default case: switch (direction)              {                  case GridResizeDirection.Columns:                      Cursor = s_columnSplitterCursor;                      break;                  case GridResizeDirection.Rows:                      Cursor = s_rowSplitterCursor;                      break;              }
Missing Default,Avalonia.Controls,GridSplitter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\GridSplitter.cs,OnKeyDown,The following switch statement is missing a default case: switch (key)              {                  case Key.Escape:                      if (_resizeData != null)                      {                          CancelResize();                          e.Handled = true;                      }                        break;                    case Key.Left:                      e.Handled = KeyboardMoveSplitter(-KeyboardIncrement' 0);                      break;                  case Key.Right:                      e.Handled = KeyboardMoveSplitter(KeyboardIncrement' 0);                      break;                  case Key.Up:                      e.Handled = KeyboardMoveSplitter(0' -KeyboardIncrement);                      break;                  case Key.Down:                      e.Handled = KeyboardMoveSplitter(0' KeyboardIncrement);                      break;              }
Missing Default,Avalonia.Controls,ItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\ItemsControl.cs,ItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      AddControlItemsToLogicalChildren(e.NewItems);                      break;                    case NotifyCollectionChangedAction.Remove:                      RemoveControlItemsFromLogicalChildren(e.OldItems);                      break;              }
Missing Default,Avalonia.Controls,NumericUpDown,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\NumericUpDown\NumericUpDown.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Enter:                      var commitSuccess = CommitInput();                      e.Handled = !commitSuccess;                      break;              }
Missing Default,Avalonia.Controls,Panel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Panel.cs,ChildrenChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      controls = e.NewItems.OfType<Control>().ToList();                      LogicalChildren.InsertRange(e.NewStartingIndex' controls);                      VisualChildren.InsertRange(e.NewStartingIndex' e.NewItems.OfType<Visual>());                      break;                    case NotifyCollectionChangedAction.Move:                      LogicalChildren.MoveRange(e.OldStartingIndex' e.OldItems.Count' e.NewStartingIndex);                      VisualChildren.MoveRange(e.OldStartingIndex' e.OldItems.Count' e.NewStartingIndex);                      break;                    case NotifyCollectionChangedAction.Remove:                      controls = e.OldItems.OfType<Control>().ToList();                      LogicalChildren.RemoveAll(controls);                      VisualChildren.RemoveAll(e.OldItems.OfType<Visual>());                      break;                    case NotifyCollectionChangedAction.Replace:                      for (var i = 0; i < e.OldItems.Count; ++i)                      {                          var index = i + e.OldStartingIndex;                          var child = (IControl)e.NewItems[i];                          LogicalChildren[index] = child;                          VisualChildren[index] = child;                      }                      break;                    case NotifyCollectionChangedAction.Reset:                      throw new NotSupportedException();              }
Missing Default,Avalonia.Controls,ViewManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Repeater\ViewManager.cs,OnItemsSourceChanged,The following switch statement is missing a default case: switch (args.Action)              {                  case NotifyCollectionChangedAction.Add:                      {                          var newIndex = args.NewStartingIndex;                          var newCount = args.NewItems.Count;                          EnsureFirstLastRealizedIndices();                          if (newIndex <= _lastRealizedElementIndexHeldByLayout)                          {                              _lastRealizedElementIndexHeldByLayout += newCount;                              foreach (var element in _owner.Children)                              {                                  var virtInfo = ItemsRepeater.GetVirtualizationInfo(element);                                  var dataIndex = virtInfo.Index;                                    if (virtInfo.IsRealized && dataIndex >= newIndex)                                  {                                      UpdateElementIndex(element' virtInfo' dataIndex + newCount);                                  }                              }                          }                          else                          {                              // Indices held by layout are not affected                              // We could still have items in the pinned elements that need updates. This is usually a very small vector.                              for (var i = 0; i < _pinnedPool.Count; ++i)                              {                                  var elementInfo = _pinnedPool[i];                                  var virtInfo = elementInfo.VirtualizationInfo;                                  var dataIndex = virtInfo.Index;                                    if (virtInfo.IsRealized && dataIndex >= newIndex)                                  {                                      var element = elementInfo.PinnedElement;                                      UpdateElementIndex(element' virtInfo' dataIndex + newCount);                                  }                              }                          }                          break;                      }                    case NotifyCollectionChangedAction.Replace:                      {                          // Requirement: oldStartIndex == newStartIndex. It is not a replace if this is not true.                          // Two cases here                          // case 1: oldCount == newCount                           //         indices are not affected. nothing to do here.                            // case 2: oldCount != newCount                          //         Replaced with less or more items. This is like an insert or remove                          //         depending on the counts.                          var oldStartIndex = args.OldStartingIndex;                          var newStartingIndex = args.NewStartingIndex;                          var oldCount = args.OldItems.Count;                          var newCount = args.NewItems.Count;                          if (oldStartIndex != newStartingIndex)                          {                              throw new NotSupportedException("Replace is only allowed with OldStartingIndex equals to NewStartingIndex.");                          }                            if (oldCount == 0)                          {                              throw new NotSupportedException("Replace notification with args.OldItemsCount value of 0 is not allowed. Use Insert action instead.");                          }                            if (newCount == 0)                          {                              throw new NotSupportedException("Replace notification with args.NewItemCount value of 0 is not allowed. Use Remove action instead.");                          }                            int countChange = newCount - oldCount;                          if (countChange != 0)                          {                              // countChange > 0 : countChange items were added                              // countChange < 0 : -countChange  items were removed                              foreach (var element in _owner.Children)                              {                                  var virtInfo = ItemsRepeater.GetVirtualizationInfo(element);                                  var dataIndex = virtInfo.Index;                                    if (virtInfo.IsRealized)                                  {                                      if (dataIndex >= oldStartIndex + oldCount)                                      {                                          UpdateElementIndex(element' virtInfo' dataIndex + countChange);                                      }                                  }                              }                                EnsureFirstLastRealizedIndices();                              _lastRealizedElementIndexHeldByLayout += countChange;                          }                          break;                      }                    case NotifyCollectionChangedAction.Remove:                      {                          var oldStartIndex = args.OldStartingIndex;                          var oldCount = args.OldItems.Count;                          foreach (var element in _owner.Children)                          {                              var virtInfo = ItemsRepeater.GetVirtualizationInfo(element);                              var dataIndex = virtInfo.Index;                                if (virtInfo.IsRealized)                              {                                  if (virtInfo.AutoRecycleCandidate && oldStartIndex <= dataIndex && dataIndex < oldStartIndex + oldCount)                                  {                                      // If we are doing the mapping' remove the element who's data was removed.                                      _owner.ClearElementImpl(element);                                  }                                  else if (dataIndex >= (oldStartIndex + oldCount))                                  {                                      UpdateElementIndex(element' virtInfo' dataIndex - oldCount);                                  }                              }                          }                            InvalidateRealizedIndicesHeldByLayout();                          break;                      }                    case NotifyCollectionChangedAction.Reset:                      if (_owner.ItemsSourceView.HasKeyIndexMapping)                      {                          _isDataSourceStableResetPending = true;                      }                        // Walk through all the elements and make sure they are cleared' they will go into                      // the stable id reset pool.                      foreach (var element in _owner.Children)                      {                          var virtInfo = ItemsRepeater.GetVirtualizationInfo(element);                          if (virtInfo.IsRealized && virtInfo.AutoRecycleCandidate)                          {                              _owner.ClearElementImpl(element);                          }                      }                        InvalidateRealizedIndicesHeldByLayout();                      break;              }
Missing Default,Avalonia.Controls,StackPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\StackPanel.cs,GetControl,The following switch statement is missing a default case: switch (direction)                      {                          case NavigationDirection.Up:                          case NavigationDirection.Previous:                          case NavigationDirection.PageUp:                              result = GetControlInDirection(NavigationDirection.Last' null);                              break;                          case NavigationDirection.Down:                          case NavigationDirection.Next:                          case NavigationDirection.PageDown:                              result = GetControlInDirection(NavigationDirection.First' null);                              break;                      }
Missing Default,Avalonia.Controls,StackPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\StackPanel.cs,GetControl,The following switch statement is missing a default case: switch (direction)                      {                          case NavigationDirection.Left:                          case NavigationDirection.Previous:                          case NavigationDirection.PageUp:                              result = GetControlInDirection(NavigationDirection.Last' null);                              break;                          case NavigationDirection.Right:                          case NavigationDirection.Next:                          case NavigationDirection.PageDown:                              result = GetControlInDirection(NavigationDirection.First' null);                              break;                      }
Missing Default,Avalonia.Controls,TextBox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TextBox.cs,OnPointerPressed,The following switch statement is missing a default case: switch (e.ClickCount)                  {                      case 1:                          SelectionStart = SelectionEnd = index;                          break;                      case 2:                          if (!StringUtils.IsStartOfWord(text' index))                          {                              SelectionStart = StringUtils.PreviousWord(text' index);                          }                            SelectionEnd = StringUtils.NextWord(text' index);                          break;                      case 3:                          SelectionStart = 0;                          SelectionEnd = text.Length;                          break;                  }
Missing Default,Avalonia.Controls,TreeView,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TreeView.cs,SelectedItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                        SelectedItemsAdded(e.NewItems.Cast<object>().ToArray());                        if (AutoScrollToSelectedItem)                      {                          var container = (TreeViewItem)ItemContainerGenerator.Index.ContainerFromItem(e.NewItems[0]);                            container?.BringIntoView();                      }                        added = e.NewItems;                        break;                  case NotifyCollectionChangedAction.Remove:                        if (!_syncingSelectedItems)                      {                          if (SelectedItems.Count == 0)                          {                              SelectedItem = null;                          }                          else                          {                              var selectedIndex = SelectedItems.IndexOf(_selectedItem);                                if (selectedIndex == -1)                              {                                  var old = _selectedItem;                                  _selectedItem = SelectedItems[0];                                    RaisePropertyChanged(SelectedItemProperty' old' _selectedItem);                              }                          }                      }                        foreach (var item in e.OldItems)                      {                          MarkItemSelected(item' false);                      }                        removed = e.OldItems;                        break;                  case NotifyCollectionChangedAction.Reset:                        foreach (IControl container in ItemContainerGenerator.Index.Containers)                      {                          MarkContainerSelected(container' false);                      }                        if (SelectedItems.Count > 0)                      {                          SelectedItemsAdded(SelectedItems);                            added = SelectedItems;                      }                      else if (!_syncingSelectedItems)                      {                          SelectedItem = null;                      }                        break;                  case NotifyCollectionChangedAction.Replace:                        foreach (var item in e.OldItems)                      {                          MarkItemSelected(item' false);                      }                        foreach (var item in e.NewItems)                      {                          MarkItemSelected(item' true);                      }                        if (SelectedItem != SelectedItems[0] && !_syncingSelectedItems)                      {                          var oldItem = SelectedItem;                          var item = SelectedItems[0];                          _selectedItem = item;                          RaisePropertyChanged(SelectedItemProperty' oldItem' item);                      }                        added = e.NewItems;                      removed = e.OldItems;                        break;              }
Missing Default,Avalonia.Controls,TreeView,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TreeView.cs,GetContainerInDirection,The following switch statement is missing a default case: switch (direction)              {                  case NavigationDirection.Up:                      if (index > 0)                      {                          var previous = (TreeViewItem)parentGenerator.ContainerFromIndex(index - 1);                          result = previous.IsExpanded && previous.ItemCount > 0 ?                              (TreeViewItem)previous.ItemContainerGenerator.ContainerFromIndex(previous.ItemCount - 1) :                              previous;                      }                      else                      {                          result = from.Parent as TreeViewItem;                      }                        break;                    case NavigationDirection.Down:                      if (from.IsExpanded && intoChildren && from.ItemCount > 0)                      {                          result = (TreeViewItem)from.ItemContainerGenerator.ContainerFromIndex(0);                      }                      else if (index < parent?.ItemCount - 1)                      {                          result = (TreeViewItem)parentGenerator.ContainerFromIndex(index + 1);                      }                      else if (parent is TreeViewItem parentItem)                      {                          return GetContainerInDirection(parentItem' direction' false);                      }                        break;              }
Missing Default,Avalonia.Controls,TreeViewItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\TreeViewItem.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)                  {                      case Key.Right:                          if (Items != null && Items.Cast<object>().Any())                          {                              IsExpanded = true;                          }                            e.Handled = true;                          break;                        case Key.Left:                          IsExpanded = false;                          e.Handled = true;                          break;                  }
Missing Default,Avalonia.Controls,Viewbox,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Viewbox.cs,GetScale,The following switch statement is missing a default case: switch (stretch)                      {                          case Stretch.Uniform:                              scaleX = scaleY = Math.Min(scaleX' scaleY);                              break;                            case Stretch.UniformToFill:                              scaleX = scaleY = Math.Max(scaleX' scaleY);                              break;                      }
Missing Default,Avalonia.Controls,VirtualizingStackPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\VirtualizingStackPanel.cs,ChildrenChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      foreach (IControl control in e.NewItems)                      {                          UpdateAdd(control);                      }                        break;                    case NotifyCollectionChangedAction.Remove:                      foreach (IControl control in e.OldItems)                      {                          UpdateRemove(control);                      }                        break;              }
Missing Default,Avalonia.Controls,WrapPanel,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\WrapPanel.cs,GetControl,The following switch statement is missing a default case: switch (direction)              {                  case NavigationDirection.First:                      index = 0;                      break;                  case NavigationDirection.Last:                      index = children.Count - 1;                      break;                  case NavigationDirection.Next:                      ++index;                      break;                  case NavigationDirection.Previous:                      --index;                      break;                  case NavigationDirection.Left:                      index = horiz ? index - 1 : -1;                      break;                  case NavigationDirection.Right:                      index = horiz ? index + 1 : -1;                      break;                  case NavigationDirection.Up:                      index = horiz ? -1 : index - 1;                      break;                  case NavigationDirection.Down:                      index = horiz ? -1 : index + 1;                      break;              }
Missing Default,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,Cell_MouseEnter,The following switch statement is missing a default case: switch (Owner.SelectionMode)                      {                          case CalendarSelectionMode.SingleDate:                              {                                  DateTime selectedDate = (DateTime)b.DataContext;                                  Owner.DatePickerDisplayDateFlag = true;                                  if (Owner.SelectedDates.Count == 0)                                  {                                      Owner.SelectedDates.Add(selectedDate);                                  }                                  else                                  {                                      Owner.SelectedDates[0] = selectedDate;                                  }                                  return;                              }                          case CalendarSelectionMode.SingleRange:                          case CalendarSelectionMode.MultipleRange:                              {                                  Debug.Assert(b.DataContext != null' "The DataContext should not be null!");                                  Owner.UnHighlightDays();                                  Owner.HoverEndIndex = b.Index;                                  Owner.HoverEnd = (DateTime?)b.DataContext;                                  // Update the States of the buttons                                  Owner.HighlightDays();                                  return;                              }                      }
Missing Default,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,Cell_MouseLeftButtonDown,The following switch statement is missing a default case: switch (Owner.SelectionMode)                          {                              case CalendarSelectionMode.None:                                  {                                      return;                                  }                              case CalendarSelectionMode.SingleDate:                                  {                                      Owner.DatePickerDisplayDateFlag = true;                                      if (Owner.SelectedDates.Count == 0)                                      {                                          Owner.SelectedDates.Add(selectedDate);                                      }                                      else                                      {                                          Owner.SelectedDates[0] = selectedDate;                                      }                                      return;                                  }                              case CalendarSelectionMode.SingleRange:                                  {                                      // Set the start or end of the selection                                      // range                                      if (shift)                                      {                                          Owner.UnHighlightDays();                                          Owner.HoverEnd = selectedDate;                                          Owner.HoverEndIndex = b.Index;                                          Owner.HighlightDays();                                      }                                      else                                      {                                          Owner.UnHighlightDays();                                          Owner.HoverStart = selectedDate;                                          Owner.HoverStartIndex = b.Index;                                      }                                      return;                                  }                              case CalendarSelectionMode.MultipleRange:                                  {                                      if (shift)                                      {                                          if (!ctrl)                                          {                                              // clear the list' set the states to                                              // default                                              foreach (DateTime item in Owner.SelectedDates)                                              {                                                  Owner.RemovedItems.Add(item);                                              }                                              Owner.SelectedDates.ClearInternal();                                          }                                          Owner.HoverEnd = selectedDate;                                          Owner.HoverEndIndex = b.Index;                                          Owner.HighlightDays();                                      }                                      else                                      {                                          if (!ctrl)                                          {                                              // clear the list' set the states to                                              // default                                              foreach (DateTime item in Owner.SelectedDates)                                              {                                                  Owner.RemovedItems.Add(item);                                              }                                              Owner.SelectedDates.ClearInternal();                                              Owner.UnHighlightDays();                                          }                                          Owner.HoverStart = selectedDate;                                          Owner.HoverStartIndex = b.Index;                                      }                                      return;                                  }                          }
Missing Default,Avalonia.Controls.Primitives,CalendarItem,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Calendar\CalendarItem.cs,Cell_MouseLeftButtonUp,The following switch statement is missing a default case: switch (Owner.SelectionMode)                          {                              case CalendarSelectionMode.SingleRange:                                  {                                      // Update SelectedDates                                      foreach (DateTime item in Owner.SelectedDates)                                      {                                          Owner.RemovedItems.Add(item);                                      }                                      Owner.SelectedDates.ClearInternal();                                      AddSelection(b);                                      return;                                  }                              case CalendarSelectionMode.MultipleRange:                                  {                                      // add the selection (either single day or                                      // SingleRange day)                                      AddSelection(b);                                      return;                                  }                          }
Missing Default,Avalonia.Controls.Primitives,AdornerLayer,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\AdornerLayer.cs,ChildrenCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      foreach (Visual i in e.NewItems)                      {                          UpdateAdornedElement(i' i.GetValue(AdornedElementProperty));                      }                        break;              }
Missing Default,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,ItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      _selection.ItemsInserted(e.NewStartingIndex' e.NewItems.Count);                      break;                  case NotifyCollectionChangedAction.Remove:                      _selection.ItemsRemoved(e.OldStartingIndex' e.OldItems.Count);                      break;              }
Missing Default,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,ItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      if (AlwaysSelected && SelectedIndex == -1)                      {                          SelectedIndex = 0;                      }                      else                      {                          UpdateSelectedItem(_selection.First()' false);                      }                        break;                    case NotifyCollectionChangedAction.Remove:                      UpdateSelectedItem(_selection.First()' false);                      ResetSelectedItems();                      break;                    case NotifyCollectionChangedAction.Replace:                      UpdateSelectedItem(SelectedIndex' false);                      ResetSelectedItems();                      break;                    case NotifyCollectionChangedAction.Move:                  case NotifyCollectionChangedAction.Reset:                      SelectedIndex = IndexOf(Items' SelectedItem);                        if (AlwaysSelected && SelectedIndex == -1 && ItemCount > 0)                      {                          SelectedIndex = 0;                      }                      break;              }
Missing Default,Avalonia.Controls.Primitives,SelectingItemsControl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Primitives\SelectingItemsControl.cs,SelectedItemsCollectionChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      {                          Add(e.NewItems);                          UpdateSelection();                          added = e.NewItems;                      }                        break;                    case NotifyCollectionChangedAction.Remove:                      if (SelectedItems.Count == 0)                      {                          SelectedIndex = -1;                      }                        foreach (var item in e.OldItems)                      {                          var index = MarkItemSelected(item' false);                          _selection.Remove(index);                      }                        removed = e.OldItems;                      break;                    case NotifyCollectionChangedAction.Replace:                      throw new NotSupportedException("Replacing items in a SelectedItems collection is not supported.");                    case NotifyCollectionChangedAction.Move:                      throw new NotSupportedException("Moving items in a SelectedItems collection is not supported.");                    case NotifyCollectionChangedAction.Reset:                      {                          removed = new List<object>();                          added = new List<object>();                            foreach (var index in _selection.ToList())                          {                              var item = ElementAt(Items' index);                                if (!SelectedItems.Contains(item))                              {                                  MarkItemSelected(index' false);                                  removed.Add(item);                                  _selection.Remove(index);                              }                          }                            Add(SelectedItems' added);                          UpdateSelection();                      }                        break;              }
Missing Default,Avalonia.Controls.Notifications,NotificationCard,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Notifications\NotificationCard.cs,NotificationCard,The following switch statement is missing a default case: switch (x.Type)                      {                          case NotificationType.Error:                              PseudoClasses.Add(":error");                              break;                            case NotificationType.Information:                              PseudoClasses.Add(":information");                              break;                            case NotificationType.Success:                              PseudoClasses.Add(":success");                              break;                            case NotificationType.Warning:                              PseudoClasses.Add(":warning");                              break;                      }
Missing Default,Avalonia.Platform,InProcessDragSource,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Platform\InProcessDragSource.cs,ProcessMouseEvents,The following switch statement is missing a default case: switch (e.Type)              {                  case RawPointerEventType.LeftButtonDown:                  case RawPointerEventType.RightButtonDown:                  case RawPointerEventType.MiddleButtonDown:                  case RawPointerEventType.NonClientLeftButtonDown:                      CancelDragging();                      e.Handled = true;                      return;                  case RawPointerEventType.LeaveWindow:                      RaiseEventAndUpdateCursor(RawDragEventType.DragLeave' e.Root' e.Position'  e.InputModifiers); break;                  case RawPointerEventType.LeftButtonUp:                      CheckDraggingAccepted(RawInputModifiers.LeftMouseButton); break;                  case RawPointerEventType.MiddleButtonUp:                      CheckDraggingAccepted(RawInputModifiers.MiddleMouseButton); break;                  case RawPointerEventType.RightButtonUp:                      CheckDraggingAccepted(RawInputModifiers.RightMouseButton); break;                  case RawPointerEventType.Move:                      var mods = e.InputModifiers & MOUSE_INPUTMODIFIERS;                      if (_initialInputModifiers.Value != mods)                      {                          CancelDragging();                          e.Handled = true;                          return;                      }                        if (e.Root != _lastRoot)                      {                          if (_lastRoot != null)                              RaiseEventAndUpdateCursor(RawDragEventType.DragLeave' _lastRoot' _lastRoot.PointToClient(e.Root.PointToScreen(e.Position))' e.InputModifiers);                          RaiseEventAndUpdateCursor(RawDragEventType.DragEnter' e.Root' e.Position' e.InputModifiers);                      }                      else                          RaiseEventAndUpdateCursor(RawDragEventType.DragOver' e.Root' e.Position' e.InputModifiers);                      break;              }
Missing Default,Avalonia.Controls.Presenters,CarouselPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\CarouselPresenter.cs,ItemsChanged,The following switch statement is missing a default case: switch (e.Action)                  {                      case NotifyCollectionChangedAction.Add:                          if (e.NewStartingIndex > SelectedIndex)                          {                              return;                          }                          break;                      case NotifyCollectionChangedAction.Remove:                          if (e.OldStartingIndex > SelectedIndex)                          {                              return;                          }                          break;                      case NotifyCollectionChangedAction.Replace:                          if (e.OldStartingIndex > SelectedIndex ||                              e.OldStartingIndex + e.OldItems.Count - 1 < SelectedIndex)                          {                              return;                          }                          break;                      case NotifyCollectionChangedAction.Move:                          if (e.OldStartingIndex > SelectedIndex &&                              e.NewStartingIndex > SelectedIndex)                          {                              return;                          }                          break;                  }
Missing Default,Avalonia.Controls.Presenters,ContentPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ContentPresenter.cs,ArrangeOverrideImpl,The following switch statement is missing a default case: switch (horizontalContentAlignment)              {                  case HorizontalAlignment.Center:                      originX += (availableSize.Width - sizeForChild.Width) / 2;                      break;                  case HorizontalAlignment.Right:                      originX += availableSize.Width - sizeForChild.Width;                      break;              }
Missing Default,Avalonia.Controls.Presenters,ContentPresenter,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ContentPresenter.cs,ArrangeOverrideImpl,The following switch statement is missing a default case: switch (verticalContentAlignment)              {                  case VerticalAlignment.Center:                      originY += (availableSize.Height - sizeForChild.Height) / 2;                      break;                  case VerticalAlignment.Bottom:                      originY += availableSize.Height - sizeForChild.Height;                      break;              }
Missing Default,Avalonia.Controls.Presenters,ItemContainerSync,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ItemContainerSync.cs,ItemsChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      Add();                      break;                    case NotifyCollectionChangedAction.Remove:                      Remove();                      break;                    case NotifyCollectionChangedAction.Replace:                      RemoveContainers(panel' generator.Dematerialize(e.OldStartingIndex' e.OldItems.Count));                      var containers = AddContainers(owner' e.NewStartingIndex' e.NewItems);                        var i = e.NewStartingIndex;                        foreach (var container in containers)                      {                          panel.Children[i++] = container.ContainerControl;                      }                        break;                    case NotifyCollectionChangedAction.Move:                      Remove();                      Add();                      break;                    case NotifyCollectionChangedAction.Reset:                      RemoveContainers(panel' generator.Clear());                        if (items != null)                      {                          AddContainers(owner' 0' items);                      }                        break;              }
Missing Default,Avalonia.Controls.Presenters,ItemVirtualizer,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ItemVirtualizer.cs,Create,The following switch statement is missing a default case: switch (owner.VirtualizationMode)                  {                      case ItemVirtualizationMode.Simple:                          result = new ItemVirtualizerSimple(owner);                          break;                  }
Missing Default,Avalonia.Controls.Presenters,ItemVirtualizerSimple,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ItemVirtualizerSimple.cs,ItemsChanged,The following switch statement is missing a default case: switch (e.Action)                  {                      case NotifyCollectionChangedAction.Add:                          CreateAndRemoveContainers();                            if (e.NewStartingIndex < NextIndex)                          {                              RecycleContainers();                          }                            panel.ForceInvalidateMeasure();                          break;                        case NotifyCollectionChangedAction.Remove:                          if (e.OldStartingIndex >= FirstIndex &&                              e.OldStartingIndex < NextIndex)                          {                              RecycleContainersOnRemove();                          }                            panel.ForceInvalidateMeasure();                          break;                        case NotifyCollectionChangedAction.Move:                      case NotifyCollectionChangedAction.Replace:                          RecycleContainers();                          break;                        case NotifyCollectionChangedAction.Reset:                          RecycleContainersOnRemove();                          CreateAndRemoveContainers();                          panel.ForceInvalidateMeasure();                          break;                  }
Missing Default,Avalonia.Controls.Presenters,ItemVirtualizerSimple,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Presenters\ItemVirtualizerSimple.cs,GetControlInDirection,The following switch statement is missing a default case: switch (direction)              {                  case NavigationDirection.First:                      newItemIndex = 0;                      break;                    case NavigationDirection.Last:                      newItemIndex = ItemCount - 1;                      break;                    case NavigationDirection.Up:                      if (vertical)                      {                          newItemIndex = itemIndex - 1;                      }                        break;                  case NavigationDirection.Down:                      if (vertical)                      {                          newItemIndex = itemIndex + 1;                      }                        break;                    case NavigationDirection.Left:                      if (!vertical)                      {                          newItemIndex = itemIndex - 1;                      }                      break;                    case NavigationDirection.Right:                      if (!vertical)                      {                          newItemIndex = itemIndex + 1;                      }                      break;                    case NavigationDirection.PageUp:                      newItemIndex = Math.Max(0' itemIndex - (int)ViewportValue);                      break;                    case NavigationDirection.PageDown:                      newItemIndex = Math.Min(ItemCount - 1' itemIndex + (int)ViewportValue);                      break;              }
Missing Default,Avalonia.Controls.Remote.Server,RemoteServerTopLevelImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Avalonia.Controls\Remote\Server\RemoteServerTopLevelImpl.cs,GetAvaloniaInputModifiers,The following switch statement is missing a default case: switch (modifier)                  {                      case Avalonia.Remote.Protocol.Input.InputModifiers.Control:                          result |= RawInputModifiers.Control;                          break;                        case Avalonia.Remote.Protocol.Input.InputModifiers.Alt:                          result |= RawInputModifiers.Alt;                          break;                        case Avalonia.Remote.Protocol.Input.InputModifiers.Shift:                          result |= RawInputModifiers.Shift;                          break;                        case Avalonia.Remote.Protocol.Input.InputModifiers.Windows:                          result |= RawInputModifiers.Meta;                          break;                        case Avalonia.Remote.Protocol.Input.InputModifiers.LeftMouseButton:                          result |= RawInputModifiers.LeftMouseButton;                          break;                        case Avalonia.Remote.Protocol.Input.InputModifiers.MiddleMouseButton:                          result |= RawInputModifiers.MiddleMouseButton;                          break;                        case Avalonia.Remote.Protocol.Input.InputModifiers.RightMouseButton:                          result |= RawInputModifiers.RightMouseButton;                          break;                  }
