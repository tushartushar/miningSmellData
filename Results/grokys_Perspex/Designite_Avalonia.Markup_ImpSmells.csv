Implementation smell,Namespace,Class,File,Method,Description
Long Method,Avalonia.Data,Binding,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Data\Binding.cs,Initiate,The method has 102 lines of code.
Complex Method,Avalonia.Data,Binding,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Data\Binding.cs,Initiate,Cyclomatic complexity of the method is 12
Complex Method,Avalonia.Markup.Parsers,ExpressionParser,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\ExpressionParser.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Avalonia.Markup.Parsers,ExpressionParser,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\ExpressionParser.cs,ParseStart,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Markup.Parsers,SelectorGrammar,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\SelectorGrammar.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,Avalonia.Markup.Parsers,SelectorGrammar,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\SelectorGrammar.cs,ParseMiddle,Cyclomatic complexity of the method is 8
Complex Method,Avalonia.Markup.Parsers,SelectorParser,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\SelectorParser.cs,Create,Cyclomatic complexity of the method is 18
Complex Method,Avalonia.Markup.Parsers.Nodes,StringIndexerNode,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\Nodes\StringIndexerNode.cs,SetTargetValueCore,Cyclomatic complexity of the method is 11
Complex Method,Avalonia.Markup.Parsers.Nodes,StringIndexerNode,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\Nodes\StringIndexerNode.cs,GetValue,Cyclomatic complexity of the method is 11
Long Parameter List,Avalonia.Markup.Parsers,ExpressionObserverBuilder,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\ExpressionObserverBuilder.cs,Build,The method has 5 parameters. Parameters: root' expression' enableDataValidation' description' typeResolver
Long Parameter List,Avalonia.Markup.Parsers,ExpressionObserverBuilder,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\ExpressionObserverBuilder.cs,Build,The method has 5 parameters. Parameters: rootObservable' expression' enableDataValidation' description' typeResolver
Long Parameter List,Avalonia.Markup.Parsers,ExpressionObserverBuilder,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\ExpressionObserverBuilder.cs,Build,The method has 6 parameters. Parameters: rootGetter' expression' update' enableDataValidation' description' typeResolver
Long Statement,Avalonia.Data,Binding,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Data\Binding.cs,Initiate,The length of the statement  "                    throw new InvalidOperationException("AncestorType must be set for RelativeSourceMode.FindAncestor when searching the visual tree."); " is 132.
Long Statement,Avalonia.Markup.Parsers,ExpressionParser,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\ExpressionParser.cs,ParseAttachedProperty,The length of the statement  "                throw new InvalidOperationException("Cannot parse a binding path with an attached property without a type resolver. Maybe you can use a LINQ Expression binding path instead?"); " is 176.
Long Statement,Avalonia.Markup.Parsers,ExpressionParser,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\ExpressionParser.cs,ParseAttachedProperty,The length of the statement  "            var property = AvaloniaPropertyRegistry.Instance.FindRegistered(_typeResolver(ns.ToString()' owner.ToString())' name.ToString()); " is 129.
Long Statement,Avalonia.Markup.Parsers.Nodes,StringIndexerNode,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\Nodes\StringIndexerNode.cs,SetTargetValueCore,The length of the statement  "                    if (!TypeUtilities.TryConvert(indexerParameters[i].ParameterType' Arguments[i]' CultureInfo.InvariantCulture' out temp)) " is 120.
Long Statement,Avalonia.Markup.Parsers.Nodes,StringIndexerNode,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\Nodes\StringIndexerNode.cs,GetValue,The length of the statement  "                    if (!TypeUtilities.TryConvert(indexerParameters[i].ParameterType' Arguments[i]' CultureInfo.InvariantCulture' out temp)) " is 120.
Complex Conditional,Avalonia.Markup.Parsers,SelectorGrammar,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\SelectorGrammar.cs,Parse,The conditional expression  "state != State.Start && state != State.Middle && state != State.End && state != State.CanHaveType"  is complex.
Missing Default,Avalonia.Markup.Parsers,ExpressionParser,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\ExpressionParser.cs,Parse,The following switch statement is missing a default case: switch (state)                  {                      case State.Start:                          state = ParseStart(ref r' nodes);                          break;                        case State.AfterMember:                          state = ParseAfterMember(ref r' nodes);                          break;                        case State.BeforeMember:                          state = ParseBeforeMember(ref r' nodes);                          break;                        case State.AttachedProperty:                          state = ParseAttachedProperty(ref r' nodes);                          break;                        case State.Indexer:                          state = ParseIndexer(ref r' nodes);                          break;                        case State.ElementName:                          state = ParseElementName(ref r' nodes);                          mode = SourceMode.Control;                          break;                        case State.RelativeSource:                          state = ParseRelativeSource(ref r' nodes);                          mode = SourceMode.Control;                          break;                  }
Missing Default,Avalonia.Markup.Parsers,SelectorGrammar,D:\research\architectureSmells\repos\grokys_Perspex\src\Markup\Avalonia.Markup\Markup\Parsers\SelectorGrammar.cs,Parse,The following switch statement is missing a default case: switch (state)                  {                      case State.Start:                          state = ParseStart(ref r);                          break;                      case State.Middle:                          (state' syntax) = ParseMiddle(ref r' end);                          break;                      case State.CanHaveType:                          state = ParseCanHaveType(ref r);                          break;                      case State.Colon:                          (state' syntax) = ParseColon(ref r);                          break;                      case State.Class:                          (state' syntax) = ParseClass(ref r);                          break;                      case State.Traversal:                          (state' syntax) = ParseTraversal(ref r);                          break;                      case State.TypeName:                          (state' syntax) = ParseTypeName(ref r);                          break;                      case State.Property:                          (state' syntax) = ParseProperty(ref r);                          break;                      case State.Template:                          (state' syntax) = ParseTemplate(ref r);                          break;                      case State.Name:                          (state' syntax) = ParseName(ref r);                          break;                  }
