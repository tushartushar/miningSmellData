Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Avalonia.Utilities,TypeUtilities,C:\repos\grokys_Perspex\src\Avalonia.Base\Utilities\TypeUtilities.cs,TryConvert,Cyclomatic complexity of the method is 13
Long Parameter List,Avalonia,AvaloniaProperty,C:\repos\grokys_Perspex\src\Avalonia.Base\AvaloniaProperty.cs,AvaloniaProperty,The method has 5 parameters. Parameters: name' valueType' ownerType' metadata' notifying
Long Parameter List,Avalonia,AvaloniaProperty,C:\repos\grokys_Perspex\src\Avalonia.Base\AvaloniaProperty.cs,Register,The method has 6 parameters. Parameters: name' defaultValue' inherits' defaultBindingMode' validate' notifying
Long Parameter List,Avalonia,AvaloniaProperty,C:\repos\grokys_Perspex\src\Avalonia.Base\AvaloniaProperty.cs,RegisterAttached,The method has 5 parameters. Parameters: name' defaultValue' inherits' defaultBindingMode' validate
Long Parameter List,Avalonia,AvaloniaProperty,C:\repos\grokys_Perspex\src\Avalonia.Base\AvaloniaProperty.cs,RegisterAttached,The method has 6 parameters. Parameters: name' ownerType' defaultValue' inherits' defaultBindingMode' validate
Long Parameter List,Avalonia,AvaloniaProperty,C:\repos\grokys_Perspex\src\Avalonia.Base\AvaloniaProperty.cs,RegisterDirect,The method has 6 parameters. Parameters: name' getter' setter' unsetValue' defaultBindingMode' enableDataValidation
Long Parameter List,Avalonia,AvaloniaPropertyChangedEventArgs,C:\repos\grokys_Perspex\src\Avalonia.Base\AvaloniaPropertyChangedEventArgs.cs,AvaloniaPropertyChangedEventArgs,The method has 5 parameters. Parameters: sender' property' oldValue' newValue' priority
Long Parameter List,Avalonia,DirectProperty<TOwner;TValue>,C:\repos\grokys_Perspex\src\Avalonia.Base\DirectProperty.cs,AddOwner,The method has 5 parameters. Parameters: getter' setter' unsetValue' defaultBindingMode' enableDataValidation
Long Parameter List,Avalonia,StyledProperty<TValue>,C:\repos\grokys_Perspex\src\Avalonia.Base\StyledProperty.cs,StyledProperty,The method has 5 parameters. Parameters: name' ownerType' metadata' inherits' notifying
Long Parameter List,Avalonia,StyledPropertyBase<TValue>,C:\repos\grokys_Perspex\src\Avalonia.Base\StyledPropertyBase.cs,StyledPropertyBase,The method has 5 parameters. Parameters: name' ownerType' metadata' inherits' notifying
Long Parameter List,Avalonia.Logging,ILogSink,C:\repos\grokys_Perspex\src\Avalonia.Base\Logging\ILogSink.cs,Log,The method has 5 parameters. Parameters: level' area' source' messageTemplate' propertyValues
Long Parameter List,Avalonia.Logging,Logger,C:\repos\grokys_Perspex\src\Avalonia.Base\Logging\Logger.cs,Log,The method has 5 parameters. Parameters: level' area' source' messageTemplate' propertyValues
Magic Number,Avalonia,AvaloniaPropertyRegistry,C:\repos\grokys_Perspex\src\Avalonia.Base\AvaloniaPropertyRegistry.cs,FindRegistered,The following statement contains a magic number: if (parts.Length < 1 || parts.Length > 2)              {                  throw new ArgumentException("Invalid property name.");              }
Magic Number,Avalonia.Threading,AvaloniaScheduler,C:\repos\grokys_Perspex\src\Avalonia.Base\Threading\AvaloniaScheduler.cs,Schedule,The following statement contains a magic number: var composite = new CompositeDisposable(2);
Magic Number,Avalonia.Utilities,Subscription<T>,C:\repos\grokys_Perspex\src\Avalonia.Base\Utilities\WeakSubscriptionManager.cs,Add,The following statement contains a magic number: if (_count == _data.Length)                  {                      //Extend capacity                      var ndata = new WeakReference<IWeakSubscriber<T>>[_data.Length*2];                      Array.Copy(_data' ndata' _data.Length);                      _data = ndata;                  }
Missing Default,Avalonia.Collections,AvaloniaListExtensions,C:\repos\grokys_Perspex\src\Avalonia.Base\Collections\AvaloniaListExtensions.cs,ForEachItem,The following switch statement is missing a default case: switch (e.Action)                  {                      case NotifyCollectionChangedAction.Add:                          Add(e.NewStartingIndex' e.NewItems);                          break;                        case NotifyCollectionChangedAction.Move:                      case NotifyCollectionChangedAction.Replace:                          Remove(e.OldStartingIndex' e.OldItems);                          Add(e.NewStartingIndex' e.NewItems);                          break;                        case NotifyCollectionChangedAction.Remove:                          Remove(e.OldStartingIndex' e.OldItems);                          break;                        case NotifyCollectionChangedAction.Reset:                          if (reset == null)                          {                              throw new InvalidOperationException(                                  "Reset called on collection without reset handler.");                          }                            reset();                          Add(0' (IList)collection);                          break;                  }
