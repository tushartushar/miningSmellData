Implementation smell,Namespace,Class,File,Method,Description
Long Method,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The method has 289 lines of code.
Complex Method,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,Cyclomatic complexity of the method is 46
Long Parameter List,Avalonia.Win32,WindowFramebuffer,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowFramebuffer.cs,DrawToDevice,The method has 7 parameters. Parameters: hDC' destX' destY' srcX' srcY' width' height
Long Parameter List,Avalonia.Win32,WindowFramebuffer,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowFramebuffer.cs,DrawToWindow,The method has 7 parameters. Parameters: hWnd' destX' destY' srcX' srcY' width' height
Long Parameter List,Avalonia.Win32,WinScreen,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WinScreen.cs,WinScreen,The method has 5 parameters. Parameters: pixelDensity' bounds' workingArea' primary' hMonitor
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,SetDIBitsToDevice,The method has 12 parameters. Parameters: hdc' XDest' YDest' dwWidth' dwHeight' XSrc' YSrc' uStartScan' cScanLines' lpvBits' lpbmi' fuColorUse
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,CreateWindowEx,The method has 12 parameters. Parameters: dwExStyle' lpClassName' lpWindowName' dwStyle' x' y' nWidth' nHeight' hWndParent' hMenu' hInstance' lpParam
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,PeekMessage,The method has 5 parameters. Parameters: lpMsg' hWnd' wMsgFilterMin' wMsgFilterMax' wRemoveMsg
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,MoveWindow,The method has 6 parameters. Parameters: hWnd' X' Y' nWidth' nHeight' bRepaint
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' uFlags
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,CreateTimerQueueTimer,The method has 7 parameters. Parameters: phNewTimer' TimerQueue' Callback' Parameter' DueTime' Period' Flags
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,ToUnicode,The method has 6 parameters. Parameters: virtualKeyCode' scanCode' keyboardState' receivingBuffer' bufferSize' flags
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,CoCreateInstance,The method has 5 parameters. Parameters: clsid' ignore1' ignore2' iid' pUnkOuter
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,SetDIBitsToDevice,The method has 12 parameters. Parameters: hdc' XDest' YDest' dwWidth' dwHeight' XSrc' YSrc' uStartScan' cScanLines' lpvBits' lpbmi' fuColorUse
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,CreateDIBSection,The method has 6 parameters. Parameters: hDC' pBitmapInfo' un' lplpVoid' handle' dw
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,CreateFileMapping,The method has 6 parameters. Parameters: hFile' lpFileMappingAttributes' flProtect' dwMaximumSizeHigh' dwMaximumSizeLow' lpName
Long Identifier,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,,The length of the parameter DPI_AWARENESS_CONTEXT_SYSTEM_AWARE is 34.
Long Identifier,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,,The length of the parameter DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE is 39.
Long Identifier,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,,The length of the parameter DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 is 42.
Long Statement,Avalonia.Win32,SystemDialogImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\SystemDialogImpl.cs,ShowFileDialogAsync,The length of the statement  "                Guid clsid = dialog is OpenFileDialog ? UnmanagedMethods.ShellIds.OpenFileDialog : UnmanagedMethods.ShellIds.SaveFileDialog; " is 124.
Long Statement,Avalonia.Win32,SystemDialogImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\SystemDialogImpl.cs,ShowFileDialogAsync,The length of the statement  "                    if (UnmanagedMethods.SHCreateItemFromParsingName(dialog.InitialDirectory' IntPtr.Zero' ref riid' out directoryShellItem) == (uint)UnmanagedMethods.HRESULT.S_OK) " is 160.
Long Statement,Avalonia.Win32,SystemDialogImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\SystemDialogImpl.cs,ShowFolderDialogAsync,The length of the statement  "                    if (UnmanagedMethods.SHCreateItemFromParsingName(dialog.InitialDirectory' IntPtr.Zero' ref riid' out directoryShellItem) == (uint)UnmanagedMethods.HRESULT.S_OK) " is 160.
Long Statement,Avalonia.Win32,SystemDialogImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\SystemDialogImpl.cs,ShowFolderDialogAsync,The length of the statement  "                    if (UnmanagedMethods.SHCreateItemFromParsingName(dialog.DefaultDirectory' IntPtr.Zero' ref riid' out directoryShellItem) == (uint)UnmanagedMethods.HRESULT.S_OK) " is 160.
Long Statement,Avalonia.Win32,Win32Platform,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Win32Platform.cs,WndProc,The length of the statement  "            if (msg == (int) UnmanagedMethods.WindowsMessage.WM_DISPATCH_WORK_ITEM && wParam.ToInt64() == SignalW && lParam.ToInt64() == SignalL) " is 133.
Long Statement,Avalonia.Win32,Win32Platform,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Win32Platform.cs,CreateMessageWindow,The length of the statement  "            _hwnd = UnmanagedMethods.CreateWindowEx(0' atom' null' 0' 0' 0' 0' 0' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero); " is 122.
Long Statement,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,CreateWindow,The length of the statement  "                style = (int)(ClassStyles.CS_OWNDC | ClassStyles.CS_HREDRAW | ClassStyles.CS_VREDRAW)' // Unique DC helps with performance when using Gpu based rendering " is 153.
Long Statement,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,ShowTaskbarIcon,The length of the statement  "            var style = (UnmanagedMethods.WindowStyles)UnmanagedMethods.GetWindowLong(_hwnd' (int)UnmanagedMethods.WindowLongParam.GWL_EXSTYLE); " is 132.
Complex Conditional,Avalonia.Win32,FramebufferManager,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\FramebufferManager.cs,Lock,The conditional expression  "(_fb == null || _fb.Size.Width != width || _fb.Size.Height != height) && width > 0 && height > 0"  is complex.
Magic Number,Avalonia.Win32,ClipboardImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\ClipboardImpl.cs,OpenClipboard,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Avalonia.Win32,CursorFactory,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\CursorFactory.cs,CursorFactory,The following statement contains a magic number: LoadModuleCursor(StandardCursorType.DragMove' "ole32.dll"' 2);
Magic Number,Avalonia.Win32,CursorFactory,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\CursorFactory.cs,CursorFactory,The following statement contains a magic number: LoadModuleCursor(StandardCursorType.DragCopy' "ole32.dll"' 3);
Magic Number,Avalonia.Win32,CursorFactory,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\CursorFactory.cs,CursorFactory,The following statement contains a magic number: LoadModuleCursor(StandardCursorType.DragLink' "ole32.dll"' 4);
Magic Number,Avalonia.Win32,EmbeddedWindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\EmbeddedWindowImpl.cs,CreateWindowOverride,The following statement contains a magic number: var hWnd = UnmanagedMethods.CreateWindowEx(                  0'                  atom'                  null'                  (int)UnmanagedMethods.WindowStyles.WS_CHILD'                  0'                  0'                  640'                  480'                  DefaultParentWindow'                  IntPtr.Zero'                  IntPtr.Zero'                  IntPtr.Zero);
Magic Number,Avalonia.Win32,EmbeddedWindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\EmbeddedWindowImpl.cs,CreateWindowOverride,The following statement contains a magic number: var hWnd = UnmanagedMethods.CreateWindowEx(                  0'                  atom'                  null'                  (int)UnmanagedMethods.WindowStyles.WS_CHILD'                  0'                  0'                  640'                  480'                  DefaultParentWindow'                  IntPtr.Zero'                  IntPtr.Zero'                  IntPtr.Zero);
Magic Number,Avalonia.Win32,OleDragSource,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\OleDragSource.cs,QueryContinueDrag,The following statement contains a magic number: pressedMouseButtons >= 2
Magic Number,Avalonia.Win32,OleDropTarget,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\OleDropTarget.cs,GetDragLocation,The following statement contains a magic number: int y = (int)(dragPoint >> 32);
Magic Number,Avalonia.Win32,Win32Platform,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Win32Platform.cs,Initialize,The following statement contains a magic number: AvaloniaLocator.CurrentMutable                  .Bind<IClipboard>().ToSingleton<ClipboardImpl>()                  .Bind<IStandardCursorFactory>().ToConstant(CursorFactory.Instance)                  .Bind<IKeyboardDevice>().ToConstant(WindowsKeyboardDevice.Instance)                  .Bind<IPlatformSettings>().ToConstant(s_instance)                  .Bind<IPlatformThreadingInterface>().ToConstant(s_instance)                  .Bind<IRenderLoop>().ToConstant(new RenderLoop())                  .Bind<IRenderTimer>().ToConstant(new DefaultRenderTimer(60))                  .Bind<ISystemDialogImpl>().ToSingleton<SystemDialogImpl>()                  .Bind<IWindowingPlatform>().ToConstant(s_instance)                  .Bind<PlatformHotkeyConfiguration>().ToSingleton<PlatformHotkeyConfiguration>()                  .Bind<IPlatformIconLoader>().ToConstant(s_instance)                  .Bind<IMountedVolumeInfoProvider>().ToConstant(new WindowsMountedVolumeInfoProvider());
Magic Number,Avalonia.Win32,WindowFramebuffer,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowFramebuffer.cs,WindowFramebuffer,The following statement contains a magic number: _bmpInfo.biBitCount = 32;
Magic Number,Avalonia.Win32,WindowFramebuffer,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowFramebuffer.cs,WindowFramebuffer,The following statement contains a magic number: _bitmapBlob = AvaloniaLocator.Current.GetService<IRuntimePlatform>().AllocBlob(size.Width * size.Height * 4);
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: const double wheelDelta = 120.0;
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case WindowsMessage.WM_NCCALCSIZE:                      if (ToInt32(wParam) == 1 && !_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_CLOSE:                      bool? preventClosing = Closing?.Invoke();                      if (preventClosing == true)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      if (_parent != null)                      {                          _parent._disabledBy.Remove(this);                          _parent.UpdateEnabled();                      }                      _mouseDevice.Dispose();                      _touchDevice?.Dispose();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      SetWindowPos(hWnd'                          IntPtr.Zero'                          newDisplayRect.left'                          newDisplayRect.top'                          newDisplayRect.right - newDisplayRect.left'                          newDisplayRect.bottom - newDisplayRect.top'                          SetWindowPosFlags.SWP_NOZORDER | SetWindowPosFlags.SWP_NOACTIVATE);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_MENUCHAR:                      // mute the system beep                      return (IntPtr)((Int32)UnmanagedMethods.MenuCharParam.MNC_CLOSE << 16);                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp' _owner'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawPointerEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawPointerEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawPointerEventType.RightButtonUp                                  : RawPointerEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.LeaveWindow'                          new Point(-1'-1)' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawPointerEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          PointToClient(PointFromLParam(lParam))' GetMouseModifiers(wParam));                      break;                  case WindowsMessage.WM_TOUCH:                      var touchInputCount = wParam.ToInt32();                        var pTouchInputs = stackalloc TOUCHINPUT[touchInputCount];                      var touchInputs = new Span<TOUCHINPUT>(pTouchInputs' touchInputCount);                        if (GetTouchInputInfo(lParam' (uint)touchInputCount' pTouchInputs' Marshal.SizeOf<TOUCHINPUT>()))                      {                          foreach (var touchInput in touchInputs)                          {                              Input?.Invoke(new RawTouchEventArgs(_touchDevice' touchInput.Time'                                  _owner'                                  touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_UP) ?                                      RawPointerEventType.TouchEnd :                                      touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_DOWN) ?                                          RawPointerEventType.TouchBegin :                                          RawPointerEventType.TouchUpdate'                                  PointToClient(new PixelPoint(touchInput.X / 100' touchInput.Y / 100))'                                  WindowsKeyboardDevice.Instance.Modifiers'                                  touchInput.Id));                          }                          CloseTouchInputHandle(lParam);                          return IntPtr.Zero;                      }                                            break;                  case WindowsMessage.WM_NCPAINT:                      if (!_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case WindowsMessage.WM_NCACTIVATE:                      if (!_decorated)                      {                          return new IntPtr(1);                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      using (_rendererLock.Lock())                      {                          UnmanagedMethods.PAINTSTRUCT ps;                          if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                          {                              var f = Scaling;                              var r = ps.rcPaint;                              Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f'                                  (r.bottom - r.top) / f));                              UnmanagedMethods.EndPaint(_hwnd' ref ps);                          }                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      using (_rendererLock.Lock())                      {                          // Do nothing here' just block until the pending frame render is completed on the render thread                      }                      var size = (UnmanagedMethods.SizeCommand)wParam;                        if (Resized != null &&                          (size == UnmanagedMethods.SizeCommand.Restored ||                           size == UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        var windowState = size == SizeCommand.Maximized ? WindowState.Maximized                          : (size == SizeCommand.Minimized ? WindowState.Minimized : WindowState.Normal);                        if (windowState != _lastWindowState)                      {                          _lastWindowState = windowState;                          WindowStateChanged?.Invoke(windowState);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_GETMINMAXINFO:                        MINMAXINFO mmi = Marshal.PtrToStructure<UnmanagedMethods.MINMAXINFO>(lParam);                        if (_minSize.Width > 0)                          mmi.ptMinTrackSize.X = (int)((_minSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (_minSize.Height > 0)                          mmi.ptMinTrackSize.Y = (int)((_minSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        if (!Double.IsInfinity(_maxSize.Width) && _maxSize.Width > 0)                          mmi.ptMaxTrackSize.X = (int)((_maxSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (!Double.IsInfinity(_maxSize.Height) && _maxSize.Height > 0)                          mmi.ptMaxTrackSize.Y = (int)((_maxSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        Marshal.StructureToPtr(mmi' lParam' true);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case WindowsMessage.WM_NCCALCSIZE:                      if (ToInt32(wParam) == 1 && !_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_CLOSE:                      bool? preventClosing = Closing?.Invoke();                      if (preventClosing == true)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      if (_parent != null)                      {                          _parent._disabledBy.Remove(this);                          _parent.UpdateEnabled();                      }                      _mouseDevice.Dispose();                      _touchDevice?.Dispose();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      SetWindowPos(hWnd'                          IntPtr.Zero'                          newDisplayRect.left'                          newDisplayRect.top'                          newDisplayRect.right - newDisplayRect.left'                          newDisplayRect.bottom - newDisplayRect.top'                          SetWindowPosFlags.SWP_NOZORDER | SetWindowPosFlags.SWP_NOACTIVATE);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_MENUCHAR:                      // mute the system beep                      return (IntPtr)((Int32)UnmanagedMethods.MenuCharParam.MNC_CLOSE << 16);                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp' _owner'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawPointerEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawPointerEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawPointerEventType.RightButtonUp                                  : RawPointerEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.LeaveWindow'                          new Point(-1'-1)' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawPointerEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          PointToClient(PointFromLParam(lParam))' GetMouseModifiers(wParam));                      break;                  case WindowsMessage.WM_TOUCH:                      var touchInputCount = wParam.ToInt32();                        var pTouchInputs = stackalloc TOUCHINPUT[touchInputCount];                      var touchInputs = new Span<TOUCHINPUT>(pTouchInputs' touchInputCount);                        if (GetTouchInputInfo(lParam' (uint)touchInputCount' pTouchInputs' Marshal.SizeOf<TOUCHINPUT>()))                      {                          foreach (var touchInput in touchInputs)                          {                              Input?.Invoke(new RawTouchEventArgs(_touchDevice' touchInput.Time'                                  _owner'                                  touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_UP) ?                                      RawPointerEventType.TouchEnd :                                      touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_DOWN) ?                                          RawPointerEventType.TouchBegin :                                          RawPointerEventType.TouchUpdate'                                  PointToClient(new PixelPoint(touchInput.X / 100' touchInput.Y / 100))'                                  WindowsKeyboardDevice.Instance.Modifiers'                                  touchInput.Id));                          }                          CloseTouchInputHandle(lParam);                          return IntPtr.Zero;                      }                                            break;                  case WindowsMessage.WM_NCPAINT:                      if (!_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case WindowsMessage.WM_NCACTIVATE:                      if (!_decorated)                      {                          return new IntPtr(1);                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      using (_rendererLock.Lock())                      {                          UnmanagedMethods.PAINTSTRUCT ps;                          if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                          {                              var f = Scaling;                              var r = ps.rcPaint;                              Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f'                                  (r.bottom - r.top) / f));                              UnmanagedMethods.EndPaint(_hwnd' ref ps);                          }                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      using (_rendererLock.Lock())                      {                          // Do nothing here' just block until the pending frame render is completed on the render thread                      }                      var size = (UnmanagedMethods.SizeCommand)wParam;                        if (Resized != null &&                          (size == UnmanagedMethods.SizeCommand.Restored ||                           size == UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        var windowState = size == SizeCommand.Maximized ? WindowState.Maximized                          : (size == SizeCommand.Minimized ? WindowState.Minimized : WindowState.Normal);                        if (windowState != _lastWindowState)                      {                          _lastWindowState = windowState;                          WindowStateChanged?.Invoke(windowState);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_GETMINMAXINFO:                        MINMAXINFO mmi = Marshal.PtrToStructure<UnmanagedMethods.MINMAXINFO>(lParam);                        if (_minSize.Width > 0)                          mmi.ptMinTrackSize.X = (int)((_minSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (_minSize.Height > 0)                          mmi.ptMinTrackSize.Y = (int)((_minSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        if (!Double.IsInfinity(_maxSize.Width) && _maxSize.Width > 0)                          mmi.ptMaxTrackSize.X = (int)((_maxSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (!Double.IsInfinity(_maxSize.Height) && _maxSize.Height > 0)                          mmi.ptMaxTrackSize.Y = (int)((_maxSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        Marshal.StructureToPtr(mmi' lParam' true);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case WindowsMessage.WM_NCCALCSIZE:                      if (ToInt32(wParam) == 1 && !_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_CLOSE:                      bool? preventClosing = Closing?.Invoke();                      if (preventClosing == true)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      if (_parent != null)                      {                          _parent._disabledBy.Remove(this);                          _parent.UpdateEnabled();                      }                      _mouseDevice.Dispose();                      _touchDevice?.Dispose();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      SetWindowPos(hWnd'                          IntPtr.Zero'                          newDisplayRect.left'                          newDisplayRect.top'                          newDisplayRect.right - newDisplayRect.left'                          newDisplayRect.bottom - newDisplayRect.top'                          SetWindowPosFlags.SWP_NOZORDER | SetWindowPosFlags.SWP_NOACTIVATE);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_MENUCHAR:                      // mute the system beep                      return (IntPtr)((Int32)UnmanagedMethods.MenuCharParam.MNC_CLOSE << 16);                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp' _owner'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawPointerEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawPointerEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawPointerEventType.RightButtonUp                                  : RawPointerEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.LeaveWindow'                          new Point(-1'-1)' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawPointerEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          PointToClient(PointFromLParam(lParam))' GetMouseModifiers(wParam));                      break;                  case WindowsMessage.WM_TOUCH:                      var touchInputCount = wParam.ToInt32();                        var pTouchInputs = stackalloc TOUCHINPUT[touchInputCount];                      var touchInputs = new Span<TOUCHINPUT>(pTouchInputs' touchInputCount);                        if (GetTouchInputInfo(lParam' (uint)touchInputCount' pTouchInputs' Marshal.SizeOf<TOUCHINPUT>()))                      {                          foreach (var touchInput in touchInputs)                          {                              Input?.Invoke(new RawTouchEventArgs(_touchDevice' touchInput.Time'                                  _owner'                                  touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_UP) ?                                      RawPointerEventType.TouchEnd :                                      touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_DOWN) ?                                          RawPointerEventType.TouchBegin :                                          RawPointerEventType.TouchUpdate'                                  PointToClient(new PixelPoint(touchInput.X / 100' touchInput.Y / 100))'                                  WindowsKeyboardDevice.Instance.Modifiers'                                  touchInput.Id));                          }                          CloseTouchInputHandle(lParam);                          return IntPtr.Zero;                      }                                            break;                  case WindowsMessage.WM_NCPAINT:                      if (!_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case WindowsMessage.WM_NCACTIVATE:                      if (!_decorated)                      {                          return new IntPtr(1);                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      using (_rendererLock.Lock())                      {                          UnmanagedMethods.PAINTSTRUCT ps;                          if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                          {                              var f = Scaling;                              var r = ps.rcPaint;                              Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f'                                  (r.bottom - r.top) / f));                              UnmanagedMethods.EndPaint(_hwnd' ref ps);                          }                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      using (_rendererLock.Lock())                      {                          // Do nothing here' just block until the pending frame render is completed on the render thread                      }                      var size = (UnmanagedMethods.SizeCommand)wParam;                        if (Resized != null &&                          (size == UnmanagedMethods.SizeCommand.Restored ||                           size == UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        var windowState = size == SizeCommand.Maximized ? WindowState.Maximized                          : (size == SizeCommand.Minimized ? WindowState.Minimized : WindowState.Normal);                        if (windowState != _lastWindowState)                      {                          _lastWindowState = windowState;                          WindowStateChanged?.Invoke(windowState);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_GETMINMAXINFO:                        MINMAXINFO mmi = Marshal.PtrToStructure<UnmanagedMethods.MINMAXINFO>(lParam);                        if (_minSize.Width > 0)                          mmi.ptMinTrackSize.X = (int)((_minSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (_minSize.Height > 0)                          mmi.ptMinTrackSize.Y = (int)((_minSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        if (!Double.IsInfinity(_maxSize.Width) && _maxSize.Width > 0)                          mmi.ptMaxTrackSize.X = (int)((_maxSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (!Double.IsInfinity(_maxSize.Height) && _maxSize.Height > 0)                          mmi.ptMaxTrackSize.Y = (int)((_maxSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        Marshal.StructureToPtr(mmi' lParam' true);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case WindowsMessage.WM_NCCALCSIZE:                      if (ToInt32(wParam) == 1 && !_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_CLOSE:                      bool? preventClosing = Closing?.Invoke();                      if (preventClosing == true)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      if (_parent != null)                      {                          _parent._disabledBy.Remove(this);                          _parent.UpdateEnabled();                      }                      _mouseDevice.Dispose();                      _touchDevice?.Dispose();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      SetWindowPos(hWnd'                          IntPtr.Zero'                          newDisplayRect.left'                          newDisplayRect.top'                          newDisplayRect.right - newDisplayRect.left'                          newDisplayRect.bottom - newDisplayRect.top'                          SetWindowPosFlags.SWP_NOZORDER | SetWindowPosFlags.SWP_NOACTIVATE);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_MENUCHAR:                      // mute the system beep                      return (IntPtr)((Int32)UnmanagedMethods.MenuCharParam.MNC_CLOSE << 16);                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp' _owner'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawPointerEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawPointerEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawPointerEventType.RightButtonUp                                  : RawPointerEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.LeaveWindow'                          new Point(-1'-1)' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawPointerEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          PointToClient(PointFromLParam(lParam))' GetMouseModifiers(wParam));                      break;                  case WindowsMessage.WM_TOUCH:                      var touchInputCount = wParam.ToInt32();                        var pTouchInputs = stackalloc TOUCHINPUT[touchInputCount];                      var touchInputs = new Span<TOUCHINPUT>(pTouchInputs' touchInputCount);                        if (GetTouchInputInfo(lParam' (uint)touchInputCount' pTouchInputs' Marshal.SizeOf<TOUCHINPUT>()))                      {                          foreach (var touchInput in touchInputs)                          {                              Input?.Invoke(new RawTouchEventArgs(_touchDevice' touchInput.Time'                                  _owner'                                  touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_UP) ?                                      RawPointerEventType.TouchEnd :                                      touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_DOWN) ?                                          RawPointerEventType.TouchBegin :                                          RawPointerEventType.TouchUpdate'                                  PointToClient(new PixelPoint(touchInput.X / 100' touchInput.Y / 100))'                                  WindowsKeyboardDevice.Instance.Modifiers'                                  touchInput.Id));                          }                          CloseTouchInputHandle(lParam);                          return IntPtr.Zero;                      }                                            break;                  case WindowsMessage.WM_NCPAINT:                      if (!_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case WindowsMessage.WM_NCACTIVATE:                      if (!_decorated)                      {                          return new IntPtr(1);                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      using (_rendererLock.Lock())                      {                          UnmanagedMethods.PAINTSTRUCT ps;                          if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                          {                              var f = Scaling;                              var r = ps.rcPaint;                              Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f'                                  (r.bottom - r.top) / f));                              UnmanagedMethods.EndPaint(_hwnd' ref ps);                          }                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      using (_rendererLock.Lock())                      {                          // Do nothing here' just block until the pending frame render is completed on the render thread                      }                      var size = (UnmanagedMethods.SizeCommand)wParam;                        if (Resized != null &&                          (size == UnmanagedMethods.SizeCommand.Restored ||                           size == UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        var windowState = size == SizeCommand.Maximized ? WindowState.Maximized                          : (size == SizeCommand.Minimized ? WindowState.Minimized : WindowState.Normal);                        if (windowState != _lastWindowState)                      {                          _lastWindowState = windowState;                          WindowStateChanged?.Invoke(windowState);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_GETMINMAXINFO:                        MINMAXINFO mmi = Marshal.PtrToStructure<UnmanagedMethods.MINMAXINFO>(lParam);                        if (_minSize.Width > 0)                          mmi.ptMinTrackSize.X = (int)((_minSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (_minSize.Height > 0)                          mmi.ptMinTrackSize.Y = (int)((_minSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        if (!Double.IsInfinity(_maxSize.Width) && _maxSize.Width > 0)                          mmi.ptMaxTrackSize.X = (int)((_maxSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (!Double.IsInfinity(_maxSize.Height) && _maxSize.Height > 0)                          mmi.ptMaxTrackSize.Y = (int)((_maxSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        Marshal.StructureToPtr(mmi' lParam' true);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case WindowsMessage.WM_NCCALCSIZE:                      if (ToInt32(wParam) == 1 && !_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_CLOSE:                      bool? preventClosing = Closing?.Invoke();                      if (preventClosing == true)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      if (_parent != null)                      {                          _parent._disabledBy.Remove(this);                          _parent.UpdateEnabled();                      }                      _mouseDevice.Dispose();                      _touchDevice?.Dispose();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      SetWindowPos(hWnd'                          IntPtr.Zero'                          newDisplayRect.left'                          newDisplayRect.top'                          newDisplayRect.right - newDisplayRect.left'                          newDisplayRect.bottom - newDisplayRect.top'                          SetWindowPosFlags.SWP_NOZORDER | SetWindowPosFlags.SWP_NOACTIVATE);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_MENUCHAR:                      // mute the system beep                      return (IntPtr)((Int32)UnmanagedMethods.MenuCharParam.MNC_CLOSE << 16);                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp' _owner'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawPointerEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawPointerEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawPointerEventType.RightButtonUp                                  : RawPointerEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.LeaveWindow'                          new Point(-1'-1)' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawPointerEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          PointToClient(PointFromLParam(lParam))' GetMouseModifiers(wParam));                      break;                  case WindowsMessage.WM_TOUCH:                      var touchInputCount = wParam.ToInt32();                        var pTouchInputs = stackalloc TOUCHINPUT[touchInputCount];                      var touchInputs = new Span<TOUCHINPUT>(pTouchInputs' touchInputCount);                        if (GetTouchInputInfo(lParam' (uint)touchInputCount' pTouchInputs' Marshal.SizeOf<TOUCHINPUT>()))                      {                          foreach (var touchInput in touchInputs)                          {                              Input?.Invoke(new RawTouchEventArgs(_touchDevice' touchInput.Time'                                  _owner'                                  touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_UP) ?                                      RawPointerEventType.TouchEnd :                                      touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_DOWN) ?                                          RawPointerEventType.TouchBegin :                                          RawPointerEventType.TouchUpdate'                                  PointToClient(new PixelPoint(touchInput.X / 100' touchInput.Y / 100))'                                  WindowsKeyboardDevice.Instance.Modifiers'                                  touchInput.Id));                          }                          CloseTouchInputHandle(lParam);                          return IntPtr.Zero;                      }                                            break;                  case WindowsMessage.WM_NCPAINT:                      if (!_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case WindowsMessage.WM_NCACTIVATE:                      if (!_decorated)                      {                          return new IntPtr(1);                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      using (_rendererLock.Lock())                      {                          UnmanagedMethods.PAINTSTRUCT ps;                          if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                          {                              var f = Scaling;                              var r = ps.rcPaint;                              Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f'                                  (r.bottom - r.top) / f));                              UnmanagedMethods.EndPaint(_hwnd' ref ps);                          }                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      using (_rendererLock.Lock())                      {                          // Do nothing here' just block until the pending frame render is completed on the render thread                      }                      var size = (UnmanagedMethods.SizeCommand)wParam;                        if (Resized != null &&                          (size == UnmanagedMethods.SizeCommand.Restored ||                           size == UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        var windowState = size == SizeCommand.Maximized ? WindowState.Maximized                          : (size == SizeCommand.Minimized ? WindowState.Minimized : WindowState.Normal);                        if (windowState != _lastWindowState)                      {                          _lastWindowState = windowState;                          WindowStateChanged?.Invoke(windowState);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_GETMINMAXINFO:                        MINMAXINFO mmi = Marshal.PtrToStructure<UnmanagedMethods.MINMAXINFO>(lParam);                        if (_minSize.Width > 0)                          mmi.ptMinTrackSize.X = (int)((_minSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (_minSize.Height > 0)                          mmi.ptMinTrackSize.Y = (int)((_minSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        if (!Double.IsInfinity(_maxSize.Width) && _maxSize.Width > 0)                          mmi.ptMaxTrackSize.X = (int)((_maxSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (!Double.IsInfinity(_maxSize.Height) && _maxSize.Height > 0)                          mmi.ptMaxTrackSize.Y = (int)((_maxSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        Marshal.StructureToPtr(mmi' lParam' true);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case WindowsMessage.WM_NCCALCSIZE:                      if (ToInt32(wParam) == 1 && !_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_CLOSE:                      bool? preventClosing = Closing?.Invoke();                      if (preventClosing == true)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      if (_parent != null)                      {                          _parent._disabledBy.Remove(this);                          _parent.UpdateEnabled();                      }                      _mouseDevice.Dispose();                      _touchDevice?.Dispose();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      SetWindowPos(hWnd'                          IntPtr.Zero'                          newDisplayRect.left'                          newDisplayRect.top'                          newDisplayRect.right - newDisplayRect.left'                          newDisplayRect.bottom - newDisplayRect.top'                          SetWindowPosFlags.SWP_NOZORDER | SetWindowPosFlags.SWP_NOACTIVATE);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_MENUCHAR:                      // mute the system beep                      return (IntPtr)((Int32)UnmanagedMethods.MenuCharParam.MNC_CLOSE << 16);                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp' _owner'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawPointerEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawPointerEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawPointerEventType.RightButtonUp                                  : RawPointerEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.LeaveWindow'                          new Point(-1'-1)' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawPointerEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          PointToClient(PointFromLParam(lParam))' GetMouseModifiers(wParam));                      break;                  case WindowsMessage.WM_TOUCH:                      var touchInputCount = wParam.ToInt32();                        var pTouchInputs = stackalloc TOUCHINPUT[touchInputCount];                      var touchInputs = new Span<TOUCHINPUT>(pTouchInputs' touchInputCount);                        if (GetTouchInputInfo(lParam' (uint)touchInputCount' pTouchInputs' Marshal.SizeOf<TOUCHINPUT>()))                      {                          foreach (var touchInput in touchInputs)                          {                              Input?.Invoke(new RawTouchEventArgs(_touchDevice' touchInput.Time'                                  _owner'                                  touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_UP) ?                                      RawPointerEventType.TouchEnd :                                      touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_DOWN) ?                                          RawPointerEventType.TouchBegin :                                          RawPointerEventType.TouchUpdate'                                  PointToClient(new PixelPoint(touchInput.X / 100' touchInput.Y / 100))'                                  WindowsKeyboardDevice.Instance.Modifiers'                                  touchInput.Id));                          }                          CloseTouchInputHandle(lParam);                          return IntPtr.Zero;                      }                                            break;                  case WindowsMessage.WM_NCPAINT:                      if (!_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case WindowsMessage.WM_NCACTIVATE:                      if (!_decorated)                      {                          return new IntPtr(1);                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      using (_rendererLock.Lock())                      {                          UnmanagedMethods.PAINTSTRUCT ps;                          if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                          {                              var f = Scaling;                              var r = ps.rcPaint;                              Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f'                                  (r.bottom - r.top) / f));                              UnmanagedMethods.EndPaint(_hwnd' ref ps);                          }                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      using (_rendererLock.Lock())                      {                          // Do nothing here' just block until the pending frame render is completed on the render thread                      }                      var size = (UnmanagedMethods.SizeCommand)wParam;                        if (Resized != null &&                          (size == UnmanagedMethods.SizeCommand.Restored ||                           size == UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        var windowState = size == SizeCommand.Maximized ? WindowState.Maximized                          : (size == SizeCommand.Minimized ? WindowState.Minimized : WindowState.Normal);                        if (windowState != _lastWindowState)                      {                          _lastWindowState = windowState;                          WindowStateChanged?.Invoke(windowState);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_GETMINMAXINFO:                        MINMAXINFO mmi = Marshal.PtrToStructure<UnmanagedMethods.MINMAXINFO>(lParam);                        if (_minSize.Width > 0)                          mmi.ptMinTrackSize.X = (int)((_minSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (_minSize.Height > 0)                          mmi.ptMinTrackSize.Y = (int)((_minSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        if (!Double.IsInfinity(_maxSize.Width) && _maxSize.Width > 0)                          mmi.ptMaxTrackSize.X = (int)((_maxSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (!Double.IsInfinity(_maxSize.Height) && _maxSize.Height > 0)                          mmi.ptMaxTrackSize.Y = (int)((_maxSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        Marshal.StructureToPtr(mmi' lParam' true);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case WindowsMessage.WM_NCCALCSIZE:                      if (ToInt32(wParam) == 1 && !_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_CLOSE:                      bool? preventClosing = Closing?.Invoke();                      if (preventClosing == true)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      if (_parent != null)                      {                          _parent._disabledBy.Remove(this);                          _parent.UpdateEnabled();                      }                      _mouseDevice.Dispose();                      _touchDevice?.Dispose();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      SetWindowPos(hWnd'                          IntPtr.Zero'                          newDisplayRect.left'                          newDisplayRect.top'                          newDisplayRect.right - newDisplayRect.left'                          newDisplayRect.bottom - newDisplayRect.top'                          SetWindowPosFlags.SWP_NOZORDER | SetWindowPosFlags.SWP_NOACTIVATE);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_MENUCHAR:                      // mute the system beep                      return (IntPtr)((Int32)UnmanagedMethods.MenuCharParam.MNC_CLOSE << 16);                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp' _owner'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawPointerEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawPointerEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawPointerEventType.RightButtonUp                                  : RawPointerEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.LeaveWindow'                          new Point(-1'-1)' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawPointerEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          PointToClient(PointFromLParam(lParam))' GetMouseModifiers(wParam));                      break;                  case WindowsMessage.WM_TOUCH:                      var touchInputCount = wParam.ToInt32();                        var pTouchInputs = stackalloc TOUCHINPUT[touchInputCount];                      var touchInputs = new Span<TOUCHINPUT>(pTouchInputs' touchInputCount);                        if (GetTouchInputInfo(lParam' (uint)touchInputCount' pTouchInputs' Marshal.SizeOf<TOUCHINPUT>()))                      {                          foreach (var touchInput in touchInputs)                          {                              Input?.Invoke(new RawTouchEventArgs(_touchDevice' touchInput.Time'                                  _owner'                                  touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_UP) ?                                      RawPointerEventType.TouchEnd :                                      touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_DOWN) ?                                          RawPointerEventType.TouchBegin :                                          RawPointerEventType.TouchUpdate'                                  PointToClient(new PixelPoint(touchInput.X / 100' touchInput.Y / 100))'                                  WindowsKeyboardDevice.Instance.Modifiers'                                  touchInput.Id));                          }                          CloseTouchInputHandle(lParam);                          return IntPtr.Zero;                      }                                            break;                  case WindowsMessage.WM_NCPAINT:                      if (!_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case WindowsMessage.WM_NCACTIVATE:                      if (!_decorated)                      {                          return new IntPtr(1);                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      using (_rendererLock.Lock())                      {                          UnmanagedMethods.PAINTSTRUCT ps;                          if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                          {                              var f = Scaling;                              var r = ps.rcPaint;                              Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f'                                  (r.bottom - r.top) / f));                              UnmanagedMethods.EndPaint(_hwnd' ref ps);                          }                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      using (_rendererLock.Lock())                      {                          // Do nothing here' just block until the pending frame render is completed on the render thread                      }                      var size = (UnmanagedMethods.SizeCommand)wParam;                        if (Resized != null &&                          (size == UnmanagedMethods.SizeCommand.Restored ||                           size == UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        var windowState = size == SizeCommand.Maximized ? WindowState.Maximized                          : (size == SizeCommand.Minimized ? WindowState.Minimized : WindowState.Normal);                        if (windowState != _lastWindowState)                      {                          _lastWindowState = windowState;                          WindowStateChanged?.Invoke(windowState);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_GETMINMAXINFO:                        MINMAXINFO mmi = Marshal.PtrToStructure<UnmanagedMethods.MINMAXINFO>(lParam);                        if (_minSize.Width > 0)                          mmi.ptMinTrackSize.X = (int)((_minSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (_minSize.Height > 0)                          mmi.ptMinTrackSize.Y = (int)((_minSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        if (!Double.IsInfinity(_maxSize.Width) && _maxSize.Width > 0)                          mmi.ptMaxTrackSize.X = (int)((_maxSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (!Double.IsInfinity(_maxSize.Height) && _maxSize.Height > 0)                          mmi.ptMaxTrackSize.Y = (int)((_maxSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        Marshal.StructureToPtr(mmi' lParam' true);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case WindowsMessage.WM_NCCALCSIZE:                      if (ToInt32(wParam) == 1 && !_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_CLOSE:                      bool? preventClosing = Closing?.Invoke();                      if (preventClosing == true)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      if (_parent != null)                      {                          _parent._disabledBy.Remove(this);                          _parent.UpdateEnabled();                      }                      _mouseDevice.Dispose();                      _touchDevice?.Dispose();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      SetWindowPos(hWnd'                          IntPtr.Zero'                          newDisplayRect.left'                          newDisplayRect.top'                          newDisplayRect.right - newDisplayRect.left'                          newDisplayRect.bottom - newDisplayRect.top'                          SetWindowPosFlags.SWP_NOZORDER | SetWindowPosFlags.SWP_NOACTIVATE);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_MENUCHAR:                      // mute the system beep                      return (IntPtr)((Int32)UnmanagedMethods.MenuCharParam.MNC_CLOSE << 16);                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp' _owner'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawPointerEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawPointerEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawPointerEventType.RightButtonUp                                  : RawPointerEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.LeaveWindow'                          new Point(-1'-1)' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawPointerEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          PointToClient(PointFromLParam(lParam))' GetMouseModifiers(wParam));                      break;                  case WindowsMessage.WM_TOUCH:                      var touchInputCount = wParam.ToInt32();                        var pTouchInputs = stackalloc TOUCHINPUT[touchInputCount];                      var touchInputs = new Span<TOUCHINPUT>(pTouchInputs' touchInputCount);                        if (GetTouchInputInfo(lParam' (uint)touchInputCount' pTouchInputs' Marshal.SizeOf<TOUCHINPUT>()))                      {                          foreach (var touchInput in touchInputs)                          {                              Input?.Invoke(new RawTouchEventArgs(_touchDevice' touchInput.Time'                                  _owner'                                  touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_UP) ?                                      RawPointerEventType.TouchEnd :                                      touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_DOWN) ?                                          RawPointerEventType.TouchBegin :                                          RawPointerEventType.TouchUpdate'                                  PointToClient(new PixelPoint(touchInput.X / 100' touchInput.Y / 100))'                                  WindowsKeyboardDevice.Instance.Modifiers'                                  touchInput.Id));                          }                          CloseTouchInputHandle(lParam);                          return IntPtr.Zero;                      }                                            break;                  case WindowsMessage.WM_NCPAINT:                      if (!_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case WindowsMessage.WM_NCACTIVATE:                      if (!_decorated)                      {                          return new IntPtr(1);                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      using (_rendererLock.Lock())                      {                          UnmanagedMethods.PAINTSTRUCT ps;                          if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                          {                              var f = Scaling;                              var r = ps.rcPaint;                              Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f'                                  (r.bottom - r.top) / f));                              UnmanagedMethods.EndPaint(_hwnd' ref ps);                          }                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      using (_rendererLock.Lock())                      {                          // Do nothing here' just block until the pending frame render is completed on the render thread                      }                      var size = (UnmanagedMethods.SizeCommand)wParam;                        if (Resized != null &&                          (size == UnmanagedMethods.SizeCommand.Restored ||                           size == UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        var windowState = size == SizeCommand.Maximized ? WindowState.Maximized                          : (size == SizeCommand.Minimized ? WindowState.Minimized : WindowState.Normal);                        if (windowState != _lastWindowState)                      {                          _lastWindowState = windowState;                          WindowStateChanged?.Invoke(windowState);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_GETMINMAXINFO:                        MINMAXINFO mmi = Marshal.PtrToStructure<UnmanagedMethods.MINMAXINFO>(lParam);                        if (_minSize.Width > 0)                          mmi.ptMinTrackSize.X = (int)((_minSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (_minSize.Height > 0)                          mmi.ptMinTrackSize.Y = (int)((_minSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        if (!Double.IsInfinity(_maxSize.Width) && _maxSize.Width > 0)                          mmi.ptMaxTrackSize.X = (int)((_maxSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (!Double.IsInfinity(_maxSize.Height) && _maxSize.Height > 0)                          mmi.ptMaxTrackSize.Y = (int)((_maxSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        Marshal.StructureToPtr(mmi' lParam' true);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case WindowsMessage.WM_NCCALCSIZE:                      if (ToInt32(wParam) == 1 && !_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_CLOSE:                      bool? preventClosing = Closing?.Invoke();                      if (preventClosing == true)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      if (_parent != null)                      {                          _parent._disabledBy.Remove(this);                          _parent.UpdateEnabled();                      }                      _mouseDevice.Dispose();                      _touchDevice?.Dispose();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      SetWindowPos(hWnd'                          IntPtr.Zero'                          newDisplayRect.left'                          newDisplayRect.top'                          newDisplayRect.right - newDisplayRect.left'                          newDisplayRect.bottom - newDisplayRect.top'                          SetWindowPosFlags.SWP_NOZORDER | SetWindowPosFlags.SWP_NOACTIVATE);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_MENUCHAR:                      // mute the system beep                      return (IntPtr)((Int32)UnmanagedMethods.MenuCharParam.MNC_CLOSE << 16);                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp' _owner'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawPointerEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawPointerEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawPointerEventType.RightButtonUp                                  : RawPointerEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.LeaveWindow'                          new Point(-1'-1)' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawPointerEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          PointToClient(PointFromLParam(lParam))' GetMouseModifiers(wParam));                      break;                  case WindowsMessage.WM_TOUCH:                      var touchInputCount = wParam.ToInt32();                        var pTouchInputs = stackalloc TOUCHINPUT[touchInputCount];                      var touchInputs = new Span<TOUCHINPUT>(pTouchInputs' touchInputCount);                        if (GetTouchInputInfo(lParam' (uint)touchInputCount' pTouchInputs' Marshal.SizeOf<TOUCHINPUT>()))                      {                          foreach (var touchInput in touchInputs)                          {                              Input?.Invoke(new RawTouchEventArgs(_touchDevice' touchInput.Time'                                  _owner'                                  touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_UP) ?                                      RawPointerEventType.TouchEnd :                                      touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_DOWN) ?                                          RawPointerEventType.TouchBegin :                                          RawPointerEventType.TouchUpdate'                                  PointToClient(new PixelPoint(touchInput.X / 100' touchInput.Y / 100))'                                  WindowsKeyboardDevice.Instance.Modifiers'                                  touchInput.Id));                          }                          CloseTouchInputHandle(lParam);                          return IntPtr.Zero;                      }                                            break;                  case WindowsMessage.WM_NCPAINT:                      if (!_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case WindowsMessage.WM_NCACTIVATE:                      if (!_decorated)                      {                          return new IntPtr(1);                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      using (_rendererLock.Lock())                      {                          UnmanagedMethods.PAINTSTRUCT ps;                          if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                          {                              var f = Scaling;                              var r = ps.rcPaint;                              Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f'                                  (r.bottom - r.top) / f));                              UnmanagedMethods.EndPaint(_hwnd' ref ps);                          }                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      using (_rendererLock.Lock())                      {                          // Do nothing here' just block until the pending frame render is completed on the render thread                      }                      var size = (UnmanagedMethods.SizeCommand)wParam;                        if (Resized != null &&                          (size == UnmanagedMethods.SizeCommand.Restored ||                           size == UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        var windowState = size == SizeCommand.Maximized ? WindowState.Maximized                          : (size == SizeCommand.Minimized ? WindowState.Minimized : WindowState.Normal);                        if (windowState != _lastWindowState)                      {                          _lastWindowState = windowState;                          WindowStateChanged?.Invoke(windowState);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_GETMINMAXINFO:                        MINMAXINFO mmi = Marshal.PtrToStructure<UnmanagedMethods.MINMAXINFO>(lParam);                        if (_minSize.Width > 0)                          mmi.ptMinTrackSize.X = (int)((_minSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (_minSize.Height > 0)                          mmi.ptMinTrackSize.Y = (int)((_minSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        if (!Double.IsInfinity(_maxSize.Width) && _maxSize.Width > 0)                          mmi.ptMaxTrackSize.X = (int)((_maxSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (!Double.IsInfinity(_maxSize.Height) && _maxSize.Height > 0)                          mmi.ptMaxTrackSize.Y = (int)((_maxSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        Marshal.StructureToPtr(mmi' lParam' true);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case WindowsMessage.WM_NCCALCSIZE:                      if (ToInt32(wParam) == 1 && !_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_CLOSE:                      bool? preventClosing = Closing?.Invoke();                      if (preventClosing == true)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      if (_parent != null)                      {                          _parent._disabledBy.Remove(this);                          _parent.UpdateEnabled();                      }                      _mouseDevice.Dispose();                      _touchDevice?.Dispose();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      SetWindowPos(hWnd'                          IntPtr.Zero'                          newDisplayRect.left'                          newDisplayRect.top'                          newDisplayRect.right - newDisplayRect.left'                          newDisplayRect.bottom - newDisplayRect.top'                          SetWindowPosFlags.SWP_NOZORDER | SetWindowPosFlags.SWP_NOACTIVATE);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_MENUCHAR:                      // mute the system beep                      return (IntPtr)((Int32)UnmanagedMethods.MenuCharParam.MNC_CLOSE << 16);                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp' _owner'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawPointerEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawPointerEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawPointerEventType.RightButtonUp                                  : RawPointerEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.LeaveWindow'                          new Point(-1'-1)' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawPointerEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          PointToClient(PointFromLParam(lParam))' GetMouseModifiers(wParam));                      break;                  case WindowsMessage.WM_TOUCH:                      var touchInputCount = wParam.ToInt32();                        var pTouchInputs = stackalloc TOUCHINPUT[touchInputCount];                      var touchInputs = new Span<TOUCHINPUT>(pTouchInputs' touchInputCount);                        if (GetTouchInputInfo(lParam' (uint)touchInputCount' pTouchInputs' Marshal.SizeOf<TOUCHINPUT>()))                      {                          foreach (var touchInput in touchInputs)                          {                              Input?.Invoke(new RawTouchEventArgs(_touchDevice' touchInput.Time'                                  _owner'                                  touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_UP) ?                                      RawPointerEventType.TouchEnd :                                      touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_DOWN) ?                                          RawPointerEventType.TouchBegin :                                          RawPointerEventType.TouchUpdate'                                  PointToClient(new PixelPoint(touchInput.X / 100' touchInput.Y / 100))'                                  WindowsKeyboardDevice.Instance.Modifiers'                                  touchInput.Id));                          }                          CloseTouchInputHandle(lParam);                          return IntPtr.Zero;                      }                                            break;                  case WindowsMessage.WM_NCPAINT:                      if (!_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case WindowsMessage.WM_NCACTIVATE:                      if (!_decorated)                      {                          return new IntPtr(1);                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      using (_rendererLock.Lock())                      {                          UnmanagedMethods.PAINTSTRUCT ps;                          if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                          {                              var f = Scaling;                              var r = ps.rcPaint;                              Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f'                                  (r.bottom - r.top) / f));                              UnmanagedMethods.EndPaint(_hwnd' ref ps);                          }                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      using (_rendererLock.Lock())                      {                          // Do nothing here' just block until the pending frame render is completed on the render thread                      }                      var size = (UnmanagedMethods.SizeCommand)wParam;                        if (Resized != null &&                          (size == UnmanagedMethods.SizeCommand.Restored ||                           size == UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        var windowState = size == SizeCommand.Maximized ? WindowState.Maximized                          : (size == SizeCommand.Minimized ? WindowState.Minimized : WindowState.Normal);                        if (windowState != _lastWindowState)                      {                          _lastWindowState = windowState;                          WindowStateChanged?.Invoke(windowState);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_GETMINMAXINFO:                        MINMAXINFO mmi = Marshal.PtrToStructure<UnmanagedMethods.MINMAXINFO>(lParam);                        if (_minSize.Width > 0)                          mmi.ptMinTrackSize.X = (int)((_minSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (_minSize.Height > 0)                          mmi.ptMinTrackSize.Y = (int)((_minSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        if (!Double.IsInfinity(_maxSize.Width) && _maxSize.Width > 0)                          mmi.ptMaxTrackSize.X = (int)((_maxSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (!Double.IsInfinity(_maxSize.Height) && _maxSize.Height > 0)                          mmi.ptMaxTrackSize.Y = (int)((_maxSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        Marshal.StructureToPtr(mmi' lParam' true);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,CreateWindow,The following statement contains a magic number: _scaling = dpix / 96.0;
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,DipFromLParam,The following statement contains a magic number: return new Point((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)) / Scaling;
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,PointFromLParam,The following statement contains a magic number: return new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16));
Magic Number,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,ToInt32,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,Avalonia.Win32.Input,WindowsKeyboardDevice,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Input\WindowsKeyboardDevice.cs,StringFromVirtualKey,The following statement contains a magic number: StringBuilder result = new StringBuilder(256);
Magic Number,Avalonia.Win32.Input,WindowsKeyboardDevice,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Input\WindowsKeyboardDevice.cs,StringFromVirtualKey,The following statement contains a magic number: int length = UnmanagedMethods.ToUnicode(                  virtualKey'                  0'                  _keyStates'                  result'                  256'                  0);
Magic Number,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,GetWindowLong,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,SetWindowLong,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,SetWindowLongPtr,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,SetClassLong,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,Avalonia.Win32.Interop,UnmanagedMethods,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,GetClassLongPtr,The following statement contains a magic number: IntPtr.Size > 4
Missing Default,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following switch statement is missing a default case: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case WindowsMessage.WM_NCCALCSIZE:                      if (ToInt32(wParam) == 1 && !_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_CLOSE:                      bool? preventClosing = Closing?.Invoke();                      if (preventClosing == true)                      {                          return IntPtr.Zero;                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      if (_parent != null)                      {                          _parent._disabledBy.Remove(this);                          _parent.UpdateEnabled();                      }                      _mouseDevice.Dispose();                      _touchDevice?.Dispose();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      SetWindowPos(hWnd'                          IntPtr.Zero'                          newDisplayRect.left'                          newDisplayRect.top'                          newDisplayRect.right - newDisplayRect.left'                          newDisplayRect.bottom - newDisplayRect.top'                          SetWindowPosFlags.SWP_NOZORDER | SetWindowPosFlags.SWP_NOACTIVATE);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_MENUCHAR:                      // mute the system beep                      return (IntPtr)((Int32)UnmanagedMethods.MenuCharParam.MNC_CLOSE << 16);                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              _owner'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp' _owner'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawPointerEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawPointerEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawPointerEventType.RightButtonUp                                  : RawPointerEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if(ShouldIgnoreTouchEmulatedMessage())                          break;                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          RawPointerEventType.LeaveWindow'                          new Point(-1'-1)' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawPointerEventArgs(                          _mouseDevice'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawPointerEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawPointerEventType.RightButtonDown                                  : RawPointerEventType.MiddleButtonDown'                          PointToClient(PointFromLParam(lParam))' GetMouseModifiers(wParam));                      break;                  case WindowsMessage.WM_TOUCH:                      var touchInputCount = wParam.ToInt32();                        var pTouchInputs = stackalloc TOUCHINPUT[touchInputCount];                      var touchInputs = new Span<TOUCHINPUT>(pTouchInputs' touchInputCount);                        if (GetTouchInputInfo(lParam' (uint)touchInputCount' pTouchInputs' Marshal.SizeOf<TOUCHINPUT>()))                      {                          foreach (var touchInput in touchInputs)                          {                              Input?.Invoke(new RawTouchEventArgs(_touchDevice' touchInput.Time'                                  _owner'                                  touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_UP) ?                                      RawPointerEventType.TouchEnd :                                      touchInput.Flags.HasFlagCustom(TouchInputFlags.TOUCHEVENTF_DOWN) ?                                          RawPointerEventType.TouchBegin :                                          RawPointerEventType.TouchUpdate'                                  PointToClient(new PixelPoint(touchInput.X / 100' touchInput.Y / 100))'                                  WindowsKeyboardDevice.Instance.Modifiers'                                  touchInput.Id));                          }                          CloseTouchInputHandle(lParam);                          return IntPtr.Zero;                      }                                            break;                  case WindowsMessage.WM_NCPAINT:                      if (!_decorated)                      {                          return IntPtr.Zero;                      }                      break;                    case WindowsMessage.WM_NCACTIVATE:                      if (!_decorated)                      {                          return new IntPtr(1);                      }                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      using (_rendererLock.Lock())                      {                          UnmanagedMethods.PAINTSTRUCT ps;                          if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                          {                              var f = Scaling;                              var r = ps.rcPaint;                              Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f'                                  (r.bottom - r.top) / f));                              UnmanagedMethods.EndPaint(_hwnd' ref ps);                          }                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      using (_rendererLock.Lock())                      {                          // Do nothing here' just block until the pending frame render is completed on the render thread                      }                      var size = (UnmanagedMethods.SizeCommand)wParam;                        if (Resized != null &&                          (size == UnmanagedMethods.SizeCommand.Restored ||                           size == UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        var windowState = size == SizeCommand.Maximized ? WindowState.Maximized                          : (size == SizeCommand.Minimized ? WindowState.Minimized : WindowState.Normal);                        if (windowState != _lastWindowState)                      {                          _lastWindowState = windowState;                          WindowStateChanged?.Invoke(windowState);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new PixelPoint((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_GETMINMAXINFO:                        MINMAXINFO mmi = Marshal.PtrToStructure<UnmanagedMethods.MINMAXINFO>(lParam);                        if (_minSize.Width > 0)                          mmi.ptMinTrackSize.X = (int)((_minSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (_minSize.Height > 0)                          mmi.ptMinTrackSize.Y = (int)((_minSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        if (!Double.IsInfinity(_maxSize.Width) && _maxSize.Width > 0)                          mmi.ptMaxTrackSize.X = (int)((_maxSize.Width * Scaling) + BorderThickness.Left + BorderThickness.Right);                        if (!Double.IsInfinity(_maxSize.Height) && _maxSize.Height > 0)                          mmi.ptMaxTrackSize.Y = (int)((_maxSize.Height * Scaling) + BorderThickness.Top + BorderThickness.Bottom);                        Marshal.StructureToPtr(mmi' lParam' true);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Missing Default,Avalonia.Win32,WindowImpl,D:\research\architectureSmells\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following switch statement is missing a default case: switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }
