Implementation smell,Namespace,Class,File,Method,Description
Long Method,Avalonia.Win32,SystemDialogImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\SystemDialogImpl.cs,ShowFileDialogAsync,The method has 107 lines of code.
Long Method,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The method has 188 lines of code.
Long Parameter List,Avalonia.Win32,WindowFramebuffer,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowFramebuffer.cs,DrawToDevice,The method has 7 parameters. Parameters: hDC' destX' destY' srcX' srcY' width' height
Long Parameter List,Avalonia.Win32,WindowFramebuffer,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowFramebuffer.cs,DrawToWindow,The method has 7 parameters. Parameters: hWnd' destX' destY' srcX' srcY' width' height
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,SetDIBitsToDevice,The method has 12 parameters. Parameters: hdc' XDest' YDest' dwWidth' dwHeight' XSrc' YSrc' uStartScan' cScanLines' lpvBits' lpbmi' fuColorUse
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,CreateWindowEx,The method has 12 parameters. Parameters: dwExStyle' lpClassName' lpWindowName' dwStyle' x' y' nWidth' nHeight' hWndParent' hMenu' hInstance' lpParam
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,PeekMessage,The method has 5 parameters. Parameters: lpMsg' hWnd' wMsgFilterMin' wMsgFilterMax' wRemoveMsg
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,MoveWindow,The method has 6 parameters. Parameters: hWnd' X' Y' nWidth' nHeight' bRepaint
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' uFlags
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,timeSetEvent,The method has 5 parameters. Parameters: uDelay' uResolution' lpTimeProc' dwUser' fuEvent
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,ToUnicode,The method has 6 parameters. Parameters: virtualKeyCode' scanCode' keyboardState' receivingBuffer' bufferSize' flags
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,CoCreateInstance,The method has 5 parameters. Parameters: clsid' ignore1' ignore2' iid' pUnkOuter
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,SetDIBitsToDevice,The method has 12 parameters. Parameters: hdc' XDest' YDest' dwWidth' dwHeight' XSrc' YSrc' uStartScan' cScanLines' lpvBits' lpbmi' fuColorUse
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,CreateDIBSection,The method has 6 parameters. Parameters: hDC' pBitmapInfo' un' lplpVoid' handle' dw
Long Parameter List,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,CreateFileMapping,The method has 6 parameters. Parameters: hFile' lpFileMappingAttributes' flProtect' dwMaximumSizeHigh' dwMaximumSizeLow' lpName
Long Statement,Avalonia.Win32,Win32Platform,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WinFormsWin32Platform.cs,WndProc,The length of the statement  "            if (msg == (int) UnmanagedMethods.WindowsMessage.WM_DISPATCH_WORK_ITEM && wParam.ToInt64() == SignalW && lParam.ToInt64() == SignalL) " is 133.
Long Statement,Avalonia.Win32,Win32Platform,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WinFormsWin32Platform.cs,CreateMessageWindow,The length of the statement  "            _hwnd = UnmanagedMethods.CreateWindowEx(0' atom' null' 0' 0' 0' 0' 0' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero); " is 122.
Long Statement,Avalonia.Win32,SystemDialogImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\SystemDialogImpl.cs,ShowFolderDialogAsync,The length of the statement  "                options |= (uint)(UnmanagedMethods.FOS.FOS_PICKFOLDERS | UnmanagedMethods.FOS.FOS_FORCEFILESYSTEM | UnmanagedMethods.FOS.FOS_NOVALIDATE | UnmanagedMethods.FOS.FOS_NOTESTFILECREATE | UnmanagedMethods.FOS.FOS_DONTADDTORECENT); " is 224.
Long Statement,Avalonia.Win32,SystemDialogImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\SystemDialogImpl.cs,ShowFolderDialogAsync,The length of the statement  "                    if (UnmanagedMethods.SHCreateItemFromParsingName(dialog.InitialDirectory' IntPtr.Zero' ref riid' out directoryShellItem) == (uint)UnmanagedMethods.HRESULT.S_OK) " is 160.
Long Statement,Avalonia.Win32,SystemDialogImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\SystemDialogImpl.cs,ShowFolderDialogAsync,The length of the statement  "                    if (UnmanagedMethods.SHCreateItemFromParsingName(dialog.DefaultDirectory' IntPtr.Zero' ref riid' out directoryShellItem) == (uint)UnmanagedMethods.HRESULT.S_OK) " is 160.
Long Statement,Avalonia,Win32Platform,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Win32Platform.cs,WndProc,The length of the statement  "            if (msg == (int) UnmanagedMethods.WindowsMessage.WM_DISPATCH_WORK_ITEM && wParam.ToInt64() == SignalW && lParam.ToInt64() == SignalL) " is 133.
Long Statement,Avalonia,Win32Platform,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Win32Platform.cs,CreateMessageWindow,The length of the statement  "            _hwnd = UnmanagedMethods.CreateWindowEx(0' atom' null' 0' 0' 0' 0' 0' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero); " is 122.
Complex Conditional,Avalonia.Win32,FramebufferManager,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\FramebufferManager.cs,Lock,The conditional expression  "(_fb == null || _fb.Width != width || _fb.Height != height) && width > 0 && height > 0"  is complex.
Magic Number,Avalonia.Win32,EmbeddedWindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Embedding\EmbeddedWindowImpl.cs,CreateWindowOverride,The following statement contains a magic number: var hWnd = UnmanagedMethods.CreateWindowEx(                  0'                  atom'                  null'                  (int)UnmanagedMethods.WindowStyles.WS_CHILD'                  0'                  0'                  640'                  480'                  DefaultParentWindow'                  IntPtr.Zero'                  IntPtr.Zero'                  IntPtr.Zero);
Magic Number,Avalonia.Win32,EmbeddedWindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Embedding\EmbeddedWindowImpl.cs,CreateWindowOverride,The following statement contains a magic number: var hWnd = UnmanagedMethods.CreateWindowEx(                  0'                  atom'                  null'                  (int)UnmanagedMethods.WindowStyles.WS_CHILD'                  0'                  0'                  640'                  480'                  DefaultParentWindow'                  IntPtr.Zero'                  IntPtr.Zero'                  IntPtr.Zero);
Magic Number,Avalonia.Win32,Win32Platform,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WinFormsWin32Platform.cs,Initialize,The following statement contains a magic number: AvaloniaLocator.CurrentMutable                  .Bind<IClipboard>().ToSingleton<ClipboardImpl>()                  .Bind<IStandardCursorFactory>().ToConstant(CursorFactory.Instance)                  .Bind<IKeyboardDevice>().ToConstant(WindowsKeyboardDevice.Instance)                  .Bind<IPlatformSettings>().ToConstant(s_instance)                  .Bind<IPlatformThreadingInterface>().ToConstant(s_instance)                  .Bind<IRenderLoop>().ToConstant(new RenderLoop(60))                  .Bind<ISystemDialogImpl>().ToSingleton<SystemDialogImpl>()                  .Bind<IWindowingPlatform>().ToConstant(s_instance)                  .Bind<IPlatformIconLoader>().ToConstant(s_instance);
Magic Number,Avalonia.Win32,ClipboardImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\ClipboardImpl.cs,OpenClipboard,The following statement contains a magic number: while (!UnmanagedMethods.OpenClipboard(IntPtr.Zero))              {                  await Task.Delay(100);              }
Magic Number,Avalonia.Win32,RenderLoop,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\RenderLoop.cs,StartCore,The following statement contains a magic number: var handle = UnmanagedMethods.timeSetEvent(                  (uint)(1000 / FramesPerSecond)'                  0'                  timerDelegate'                  UIntPtr.Zero'                  1);
Magic Number,Avalonia.Win32,SystemDialogImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\SystemDialogImpl.cs,ShowFileDialogAsync,The following statement contains a magic number: return Task.Factory.StartNew(() =>              {                  var filters = new StringBuilder();                  foreach (var filter in dialog.Filters)                  {                      var extMask = string.Join(";"' filter.Extensions.Select(e => "*." + e));                      filters.Append(filter.Name);                      filters.Append(" (");                      filters.Append(extMask);                      filters.Append(")");                      filters.Append('\0');                      filters.Append(extMask);                      filters.Append('\0');                  }                  if (filters.Length == 0)                      filters.Append("All files\0*.*\0");                  filters.Append('\0');                    var filterBuffer = new char[filters.Length];                  filters.CopyTo(0' filterBuffer' 0' filterBuffer.Length);                    var defExt = ToChars((dialog as SaveFileDialog)?.DefaultExtension);                  var fileBuffer = new char[256];                  dialog.InitialFileName?.CopyTo(0' fileBuffer' 0' dialog.InitialFileName.Length);                    string userSelectedExt = null;                      var title = ToChars(dialog.Title);                  var initialDir = ToChars(dialog.InitialDirectory);                    fixed (char* pFileBuffer = fileBuffer)                  fixed (char* pFilterBuffer = filterBuffer)                  fixed (char* pDefExt = defExt)                  fixed (char* pInitDir = initialDir)                  fixed (char* pTitle = title)                  {                      var ofn = new UnmanagedMethods.OpenFileName()                      {                          hwndOwner = hWnd'                          hInstance = IntPtr.Zero'                          lCustData = IntPtr.Zero'                          nFilterIndex = 0'                          Flags =                              UnmanagedMethods.OpenFileNameFlags.OFN_EXPLORER |                              UnmanagedMethods.OpenFileNameFlags.OFN_HIDEREADONLY'                          nMaxCustFilter = 0'                          nMaxFile = fileBuffer.Length - 1'                          nMaxFileTitle = 0'                          lpTemplateName = IntPtr.Zero'                          lpfnHook = IntPtr.Zero'                          lpstrCustomFilter = IntPtr.Zero'                          lpstrDefExt = new IntPtr(pDefExt)'                          lpstrFile = new IntPtr(pFileBuffer)'                          lpstrFileTitle = IntPtr.Zero'                          lpstrFilter = new IntPtr(pFilterBuffer)'                          lpstrInitialDir = new IntPtr(pInitDir)'                          lpstrTitle = new IntPtr(pTitle)'                        };                      ofn.lStructSize = Marshal.SizeOf(ofn);                      if ((dialog as OpenFileDialog)?.AllowMultiple == true)                          ofn.Flags |= UnmanagedMethods.OpenFileNameFlags.OFN_ALLOWMULTISELECT;                        if (dialog is SaveFileDialog)                          ofn.Flags |= UnmanagedMethods.OpenFileNameFlags.OFN_NOREADONLYRETURN |                                       UnmanagedMethods.OpenFileNameFlags.OFN_OVERWRITEPROMPT;                        var pofn = &ofn;                        // We should save the current directory to restore it later.                      var currentDirectory = Environment.CurrentDirectory;                        var res = dialog is OpenFileDialog                          ? UnmanagedMethods.GetOpenFileName(new IntPtr(pofn))                          : UnmanagedMethods.GetSaveFileName(new IntPtr(pofn));                        // Restore the old current directory' since GetOpenFileName and GetSaveFileName change it after they're called                      Environment.CurrentDirectory = currentDirectory;                        if (!res)                          return null;                      if (dialog?.Filters.Count > 0)                          userSelectedExt = dialog.Filters[ofn.nFilterIndex - 1].Extensions.FirstOrDefault();                  }                  var cStart = 0;                  string dir = null;                  var files = new List<string>();                  for (var c = 0; c < fileBuffer.Length; c++)                  {                      if (fileBuffer[c] == 0)                      {                          //Encountered double zero char                          if (cStart == c)                              break;                            var s = new string(fileBuffer' cStart' c - cStart);                          if (dir == null)                              dir = s;                          else                              files.Add(s);                          cStart = c + 1;                      }                  }                  if (files.Count == 0)                  {                      if (dialog is SaveFileDialog)                      {                          if (string.IsNullOrWhiteSpace(Path.GetExtension(dir)) &&                              !string.IsNullOrWhiteSpace(userSelectedExt) &&                              !userSelectedExt.Contains("*"))                              dir = Path.ChangeExtension(dir' userSelectedExt);                      }                        return new[] { dir };                  }                    return files.Select(f => Path.Combine(dir' f)).ToArray();              });
Magic Number,Avalonia.Win32,WindowFramebuffer,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowFramebuffer.cs,WindowFramebuffer,The following statement contains a magic number: _bmpInfo.biBitCount = 32;
Magic Number,Avalonia.Win32,WindowFramebuffer,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowFramebuffer.cs,WindowFramebuffer,The following statement contains a magic number: _pBitmap = Marshal.AllocHGlobal(width * height * 4);
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,SetSystemDecorations,The following statement contains a magic number: var style = (UnmanagedMethods.WindowStyles)UnmanagedMethods.GetWindowLong(_hwnd' -16);
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,SetSystemDecorations,The following statement contains a magic number: UnmanagedMethods.SetWindowLong(_hwnd' -16' (uint)style);
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: const double wheelDelta = 120.0;
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      Position = new Point(newDisplayRect.left' newDisplayRect.top);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawMouseEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawMouseEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawMouseEventType.RightButtonUp                                  : RawMouseEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.LeaveWindow'                          new Point()' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawMouseEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          new Point(0' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      UnmanagedMethods.PAINTSTRUCT ps;                        if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                      {                          var f = Scaling;                          var r = ps.rcPaint;                          Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f' (r.bottom - r.top) / f));                          UnmanagedMethods.EndPaint(_hwnd' ref ps);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      if (Resized != null &&                          (wParam == (IntPtr)UnmanagedMethods.SizeCommand.Restored ||                           wParam == (IntPtr)UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new Point((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                                        case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      Position = new Point(newDisplayRect.left' newDisplayRect.top);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawMouseEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawMouseEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawMouseEventType.RightButtonUp                                  : RawMouseEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.LeaveWindow'                          new Point()' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawMouseEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          new Point(0' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      UnmanagedMethods.PAINTSTRUCT ps;                        if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                      {                          var f = Scaling;                          var r = ps.rcPaint;                          Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f' (r.bottom - r.top) / f));                          UnmanagedMethods.EndPaint(_hwnd' ref ps);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      if (Resized != null &&                          (wParam == (IntPtr)UnmanagedMethods.SizeCommand.Restored ||                           wParam == (IntPtr)UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new Point((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                                        case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      Position = new Point(newDisplayRect.left' newDisplayRect.top);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawMouseEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawMouseEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawMouseEventType.RightButtonUp                                  : RawMouseEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.LeaveWindow'                          new Point()' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawMouseEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          new Point(0' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      UnmanagedMethods.PAINTSTRUCT ps;                        if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                      {                          var f = Scaling;                          var r = ps.rcPaint;                          Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f' (r.bottom - r.top) / f));                          UnmanagedMethods.EndPaint(_hwnd' ref ps);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      if (Resized != null &&                          (wParam == (IntPtr)UnmanagedMethods.SizeCommand.Restored ||                           wParam == (IntPtr)UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new Point((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                                        case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      Position = new Point(newDisplayRect.left' newDisplayRect.top);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawMouseEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawMouseEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawMouseEventType.RightButtonUp                                  : RawMouseEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.LeaveWindow'                          new Point()' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawMouseEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          new Point(0' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      UnmanagedMethods.PAINTSTRUCT ps;                        if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                      {                          var f = Scaling;                          var r = ps.rcPaint;                          Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f' (r.bottom - r.top) / f));                          UnmanagedMethods.EndPaint(_hwnd' ref ps);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      if (Resized != null &&                          (wParam == (IntPtr)UnmanagedMethods.SizeCommand.Restored ||                           wParam == (IntPtr)UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new Point((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                                        case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      Position = new Point(newDisplayRect.left' newDisplayRect.top);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawMouseEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawMouseEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawMouseEventType.RightButtonUp                                  : RawMouseEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.LeaveWindow'                          new Point()' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawMouseEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          new Point(0' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      UnmanagedMethods.PAINTSTRUCT ps;                        if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                      {                          var f = Scaling;                          var r = ps.rcPaint;                          Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f' (r.bottom - r.top) / f));                          UnmanagedMethods.EndPaint(_hwnd' ref ps);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      if (Resized != null &&                          (wParam == (IntPtr)UnmanagedMethods.SizeCommand.Restored ||                           wParam == (IntPtr)UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new Point((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                                        case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      Position = new Point(newDisplayRect.left' newDisplayRect.top);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawMouseEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawMouseEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawMouseEventType.RightButtonUp                                  : RawMouseEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.LeaveWindow'                          new Point()' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawMouseEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          new Point(0' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      UnmanagedMethods.PAINTSTRUCT ps;                        if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                      {                          var f = Scaling;                          var r = ps.rcPaint;                          Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f' (r.bottom - r.top) / f));                          UnmanagedMethods.EndPaint(_hwnd' ref ps);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      if (Resized != null &&                          (wParam == (IntPtr)UnmanagedMethods.SizeCommand.Restored ||                           wParam == (IntPtr)UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new Point((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                                        case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following statement contains a magic number: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      Position = new Point(newDisplayRect.left' newDisplayRect.top);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawMouseEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawMouseEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawMouseEventType.RightButtonUp                                  : RawMouseEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.LeaveWindow'                          new Point()' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawMouseEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          new Point(0' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      UnmanagedMethods.PAINTSTRUCT ps;                        if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                      {                          var f = Scaling;                          var r = ps.rcPaint;                          Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f' (r.bottom - r.top) / f));                          UnmanagedMethods.EndPaint(_hwnd' ref ps);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      if (Resized != null &&                          (wParam == (IntPtr)UnmanagedMethods.SizeCommand.Restored ||                           wParam == (IntPtr)UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new Point((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                                        case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,CreateWindow,The following statement contains a magic number: if (UnmanagedMethods.ShCoreAvailable)              {                  uint dpix' dpiy;                    var monitor = UnmanagedMethods.MonitorFromWindow(                      _hwnd'                      UnmanagedMethods.MONITOR.MONITOR_DEFAULTTONEAREST);                    if (UnmanagedMethods.GetDpiForMonitor(                          monitor'                          UnmanagedMethods.MONITOR_DPI_TYPE.MDT_EFFECTIVE_DPI'                          out dpix'                          out dpiy) == 0)                  {                      _scaling = dpix / 96.0;                  }              }
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,DipFromLParam,The following statement contains a magic number: return new Point((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)) / Scaling;
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,PointFromLParam,The following statement contains a magic number: return new Point((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16));
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,MaximizeWithoutCoveringTaskbar,The following statement contains a magic number: if (monitor != IntPtr.Zero)              {                  MONITORINFO monitorInfo = new MONITORINFO();                    if (GetMonitorInfo(monitor' monitorInfo))                  {                      RECT rcMonitorArea = monitorInfo.rcMonitor;                        var x = monitorInfo.rcWork.left;                      var y = monitorInfo.rcWork.top;                      var cx = Math.Abs(monitorInfo.rcWork.right - x);                      var cy = Math.Abs(monitorInfo.rcWork.bottom - y);                        SetWindowPos(_hwnd' new IntPtr(-2)' x' y' cx' cy' SetWindowPosFlags.SWP_SHOWWINDOW);                  }              }
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,ToInt32,The following statement contains a magic number: if (IntPtr.Size == 4) return ptr.ToInt32();
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,ShowTaskbarIcon,The following statement contains a magic number: var style = (UnmanagedMethods.WindowStyles)UnmanagedMethods.GetWindowLong(_hwnd' -20);
Magic Number,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,ShowTaskbarIcon,The following statement contains a magic number: if (UnmanagedMethods.GetWindowPlacement(_hwnd' ref windowPlacement))              {                  //Toggle to make the styles stick                  UnmanagedMethods.ShowWindow(_hwnd' ShowWindowCommand.Hide);                  UnmanagedMethods.SetWindowLong(_hwnd' -20' (uint)style);                  UnmanagedMethods.ShowWindow(_hwnd' windowPlacement.ShowCmd);              }
Magic Number,Avalonia.Win32.Input,WindowsKeyboardDevice,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Input\WindowsKeyboardDevice.cs,StringFromVirtualKey,The following statement contains a magic number: StringBuilder result = new StringBuilder(256);
Magic Number,Avalonia.Win32.Input,WindowsKeyboardDevice,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Input\WindowsKeyboardDevice.cs,StringFromVirtualKey,The following statement contains a magic number: int length = UnmanagedMethods.ToUnicode(                  virtualKey'                  0'                  _keyStates'                  result'                  256'                  0);
Magic Number,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,GetWindowLong,The following statement contains a magic number: if(IntPtr.Size == 4)              {                  return GetWindowLong32b(hWnd' nIndex);              }              else              {                  return GetWindowLongPtr(hWnd' nIndex);              }
Magic Number,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,SetWindowLong,The following statement contains a magic number: if (IntPtr.Size == 4)              {                  return SetWindowLong32b(hWnd' nIndex' value);              }              else              {                  return SetWindowLongPtr(hWnd' nIndex' value);              }
Magic Number,Avalonia.Win32.Interop,UnmanagedMethods,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Interop\UnmanagedMethods.cs,SetClassLong,The following statement contains a magic number: if (IntPtr.Size == 4)              {                  return SetClassLong32(hWnd' nIndex' dwNewLong);              }
Magic Number,Avalonia,Win32Platform,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\Win32Platform.cs,Initialize,The following statement contains a magic number: AvaloniaLocator.CurrentMutable                  .Bind<IClipboard>().ToSingleton<ClipboardImpl>()                  .Bind<IStandardCursorFactory>().ToConstant(CursorFactory.Instance)                  .Bind<IKeyboardDevice>().ToConstant(WindowsKeyboardDevice.Instance)                  .Bind<IPlatformSettings>().ToConstant(s_instance)                  .Bind<IPlatformThreadingInterface>().ToConstant(s_instance)                  .Bind<IRenderLoop>().ToConstant(new RenderLoop(60))                  .Bind<ISystemDialogImpl>().ToSingleton<SystemDialogImpl>()                  .Bind<IWindowingPlatform>().ToConstant(s_instance)                  .Bind<IPlatformIconLoader>().ToConstant(s_instance);
Missing Default,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following switch statement is missing a default case: switch ((UnmanagedMethods.WindowsMessage)msg)              {                  case UnmanagedMethods.WindowsMessage.WM_ACTIVATE:                      var wa = (UnmanagedMethods.WindowActivate)(ToInt32(wParam) & 0xffff);                        switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DESTROY:                      //Window doesn't exist anymore                      _hwnd = IntPtr.Zero;                      //Remove root reference to this class' so unmanaged delegate can be collected                      s_instances.Remove(this);                      Closed?.Invoke();                      //Free other resources                      Dispose();                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_DPICHANGED:                      var dpi = ToInt32(wParam) & 0xffff;                      var newDisplayRect = Marshal.PtrToStructure<UnmanagedMethods.RECT>(lParam);                      Position = new Point(newDisplayRect.left' newDisplayRect.top);                      _scaling = dpi / 96.0;                      ScalingChanged?.Invoke(_scaling);                      return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_KEYDOWN:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYDOWN:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyDown'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_KEYUP:                  case UnmanagedMethods.WindowsMessage.WM_SYSKEYUP:                      e = new RawKeyEventArgs(                              WindowsKeyboardDevice.Instance'                              timestamp'                              RawKeyEventType.KeyUp'                              KeyInterop.KeyFromVirtualKey(ToInt32(wParam))' WindowsKeyboardDevice.Instance.Modifiers);                      break;                  case UnmanagedMethods.WindowsMessage.WM_CHAR:                      // Ignore control chars                      if (ToInt32(wParam) >= 32)                      {                          e = new RawTextInputEventArgs(WindowsKeyboardDevice.Instance' timestamp'                              new string((char)ToInt32(wParam)' 1));                      }                        break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONDOWN                              ? RawMouseEventType.LeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_LBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_RBUTTONUP:                  case UnmanagedMethods.WindowsMessage.WM_MBUTTONUP:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_LBUTTONUP                              ? RawMouseEventType.LeftButtonUp                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_RBUTTONUP                                  ? RawMouseEventType.RightButtonUp                                  : RawMouseEventType.MiddleButtonUp'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEMOVE:                      if (!_trackingMouse)                      {                          var tm = new UnmanagedMethods.TRACKMOUSEEVENT                          {                              cbSize = Marshal.SizeOf<UnmanagedMethods.TRACKMOUSEEVENT>()'                              dwFlags = 2'                              hwndTrack = _hwnd'                              dwHoverTime = 0'                          };                            UnmanagedMethods.TrackMouseEvent(ref tm);                      }                        e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.Move'                          DipFromLParam(lParam)' GetMouseModifiers(wParam));                        break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(0' (ToInt32(wParam) >> 16) / wheelDelta)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSEHWHEEL:                      e = new RawMouseWheelEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          PointToClient(PointFromLParam(lParam))'                          new Vector(-(ToInt32(wParam) >> 16) / wheelDelta' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_MOUSELEAVE:                      _trackingMouse = false;                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          RawMouseEventType.LeaveWindow'                          new Point()' WindowsKeyboardDevice.Instance.Modifiers);                      break;                    case UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN:                  case UnmanagedMethods.WindowsMessage.WM_NCMBUTTONDOWN:                      e = new RawMouseEventArgs(                          WindowsMouseDevice.Instance'                          timestamp'                          _owner'                          msg == (int)UnmanagedMethods.WindowsMessage.WM_NCLBUTTONDOWN                              ? RawMouseEventType.NonClientLeftButtonDown                              : msg == (int)UnmanagedMethods.WindowsMessage.WM_NCRBUTTONDOWN                                  ? RawMouseEventType.RightButtonDown                                  : RawMouseEventType.MiddleButtonDown'                          new Point(0' 0)' GetMouseModifiers(wParam));                      break;                    case UnmanagedMethods.WindowsMessage.WM_PAINT:                      UnmanagedMethods.PAINTSTRUCT ps;                        if (UnmanagedMethods.BeginPaint(_hwnd' out ps) != IntPtr.Zero)                      {                          var f = Scaling;                          var r = ps.rcPaint;                          Paint?.Invoke(new Rect(r.left / f' r.top / f' (r.right - r.left) / f' (r.bottom - r.top) / f));                          UnmanagedMethods.EndPaint(_hwnd' ref ps);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_SIZE:                      if (Resized != null &&                          (wParam == (IntPtr)UnmanagedMethods.SizeCommand.Restored ||                           wParam == (IntPtr)UnmanagedMethods.SizeCommand.Maximized))                      {                          var clientSize = new Size(ToInt32(lParam) & 0xffff' ToInt32(lParam) >> 16);                          Resized(clientSize / Scaling);                      }                        return IntPtr.Zero;                    case UnmanagedMethods.WindowsMessage.WM_MOVE:                      PositionChanged?.Invoke(new Point((short)(ToInt32(lParam) & 0xffff)' (short)(ToInt32(lParam) >> 16)));                      return IntPtr.Zero;                                        case UnmanagedMethods.WindowsMessage.WM_DISPLAYCHANGE:                      (Screen as ScreenImpl)?.InvalidateScreensCache();                      return IntPtr.Zero;              }
Missing Default,Avalonia.Win32,WindowImpl,C:\repos\grokys_Perspex\src\Windows\Avalonia.Win32\WindowImpl.cs,WndProc,The following switch statement is missing a default case: switch (wa)                      {                          case UnmanagedMethods.WindowActivate.WA_ACTIVE:                          case UnmanagedMethods.WindowActivate.WA_CLICKACTIVE:                              Activated?.Invoke();                              break;                            case UnmanagedMethods.WindowActivate.WA_INACTIVE:                              Deactivated?.Invoke();                              break;                      }
