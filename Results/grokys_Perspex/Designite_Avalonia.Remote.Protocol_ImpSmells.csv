Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,BaseWrapper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,CreateWrapperFromType,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,Cyclomatic complexity of the method is 16
Complex Method,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,GenerateTime,The length of the statement  "            var nowtime = new DateTime(Helper.Epoch.Year' Helper.Epoch.Month' Helper.Epoch.Day' now.Hour' now.Minute' now.Second' now.Millisecond); " is 135.
Long Statement,Metsys.Bson.Configuration,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson.Configuration,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson.Configuration,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson.Configuration,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson.Configuration,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                        if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) " is 135.
Long Statement,Metsys.Bson.Configuration,TypeHelper,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,FindProperty,The length of the statement  "                            throw new ArgumentException(string.Format("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 135.
Long Statement,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Long Statement,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The length of the statement  "                    throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 131.
Long Statement,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadDictionary,The length of the statement  "            var container = existingContainer == null ? ListHelper.CreateDictionary(listType' ListHelper.GetDictionarKeyType(listType)' valueType) : (IDictionary)existingContainer; " is 168.
Empty Catch Block,Avalonia.Remote.Protocol,TcpTransportBase,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\TcpTransportBase.cs,Listen,The method has an empty catch block.
Empty Catch Block,Avalonia.Remote.Protocol,DisposableServer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\TcpTransportBase.cs,Dispose,The method has an empty catch block.
Magic Number,Avalonia.Remote.Protocol,BsonStreamTransportConnection,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\BsonStreamTransport.cs,Reader,The following statement contains a magic number: try              {                  while (true)                  {                      var infoBlock = new byte[20];                      await ReadExact(infoBlock).ConfigureAwait(false);                      var length = BitConverter.ToInt32(infoBlock' 0);                      var guidBytes = new byte[16];                      Buffer.BlockCopy(infoBlock' 4' guidBytes' 0' 16);                      var guid = new Guid(guidBytes);                      var buffer = new byte[length];                      await ReadExact(buffer).ConfigureAwait(false);                      var message = Deserializer.Deserialize(new BinaryReader(new MemoryStream(buffer))'                          _resolver.GetByGuid(guid));                      OnMessage?.Invoke(this' message);                  }              }              catch (Exception e)              {                  FireException(e);              }
Magic Number,Avalonia.Remote.Protocol,BsonStreamTransportConnection,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\BsonStreamTransport.cs,Reader,The following statement contains a magic number: try              {                  while (true)                  {                      var infoBlock = new byte[20];                      await ReadExact(infoBlock).ConfigureAwait(false);                      var length = BitConverter.ToInt32(infoBlock' 0);                      var guidBytes = new byte[16];                      Buffer.BlockCopy(infoBlock' 4' guidBytes' 0' 16);                      var guid = new Guid(guidBytes);                      var buffer = new byte[length];                      await ReadExact(buffer).ConfigureAwait(false);                      var message = Deserializer.Deserialize(new BinaryReader(new MemoryStream(buffer))'                          _resolver.GetByGuid(guid));                      OnMessage?.Invoke(this' message);                  }              }              catch (Exception e)              {                  FireException(e);              }
Magic Number,Avalonia.Remote.Protocol,BsonStreamTransportConnection,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\BsonStreamTransport.cs,Reader,The following statement contains a magic number: try              {                  while (true)                  {                      var infoBlock = new byte[20];                      await ReadExact(infoBlock).ConfigureAwait(false);                      var length = BitConverter.ToInt32(infoBlock' 0);                      var guidBytes = new byte[16];                      Buffer.BlockCopy(infoBlock' 4' guidBytes' 0' 16);                      var guid = new Guid(guidBytes);                      var buffer = new byte[length];                      await ReadExact(buffer).ConfigureAwait(false);                      var message = Deserializer.Deserialize(new BinaryReader(new MemoryStream(buffer))'                          _resolver.GetByGuid(guid));                      OnMessage?.Invoke(this' message);                  }              }              catch (Exception e)              {                  FireException(e);              }
Magic Number,Avalonia.Remote.Protocol,BsonStreamTransportConnection,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\BsonStreamTransport.cs,Reader,The following statement contains a magic number: try              {                  while (true)                  {                      var infoBlock = new byte[20];                      await ReadExact(infoBlock).ConfigureAwait(false);                      var length = BitConverter.ToInt32(infoBlock' 0);                      var guidBytes = new byte[16];                      Buffer.BlockCopy(infoBlock' 4' guidBytes' 0' 16);                      var guid = new Guid(guidBytes);                      var buffer = new byte[length];                      await ReadExact(buffer).ConfigureAwait(false);                      var message = Deserializer.Deserialize(new BinaryReader(new MemoryStream(buffer))'                          _resolver.GetByGuid(guid));                      OnMessage?.Invoke(this' message);                  }              }              catch (Exception e)              {                  FireException(e);              }
Magic Number,Avalonia.Remote.Protocol,BsonStreamTransportConnection,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\BsonStreamTransport.cs,Send,The following statement contains a magic number: try              {                  var guid = _resolver.GetGuid(data.GetType()).ToByteArray();                  _outputBlock.Seek(0' SeekOrigin.Begin);                  _outputBlock.SetLength(0);                  _outputBlock.Write(ZeroLength' 0' 4);                  _outputBlock.Write(guid' 0' guid.Length);                  var serialized = Serializer.Serialize(data);                  _outputBlock.Write(serialized' 0' serialized.Length);                  _outputBlock.Seek(0' SeekOrigin.Begin);                  var length = BitConverter.GetBytes((int)_outputBlock.Length - 20);                  _outputBlock.Write(length' 0' length.Length);                  _outputBlock.Seek(0' SeekOrigin.Begin);                    try                  {                      await _outputBlock.CopyToAsync(_outputStream' 0x1000' _cancel).ConfigureAwait(false);                  }                  catch (Exception e) //We are only catching "network"-related exceptions here                  {                      lock (_lock)                      {                          _writerIsBroken = true;                      }                      FireException(e);                  }              }              finally              {                  lock (_lock)                  {                      _writeOperationPending = false;                  }              }
Magic Number,Avalonia.Remote.Protocol,BsonStreamTransportConnection,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\BsonStreamTransport.cs,Send,The following statement contains a magic number: try              {                  var guid = _resolver.GetGuid(data.GetType()).ToByteArray();                  _outputBlock.Seek(0' SeekOrigin.Begin);                  _outputBlock.SetLength(0);                  _outputBlock.Write(ZeroLength' 0' 4);                  _outputBlock.Write(guid' 0' guid.Length);                  var serialized = Serializer.Serialize(data);                  _outputBlock.Write(serialized' 0' serialized.Length);                  _outputBlock.Seek(0' SeekOrigin.Begin);                  var length = BitConverter.GetBytes((int)_outputBlock.Length - 20);                  _outputBlock.Write(length' 0' length.Length);                  _outputBlock.Seek(0' SeekOrigin.Begin);                    try                  {                      await _outputBlock.CopyToAsync(_outputStream' 0x1000' _cancel).ConfigureAwait(false);                  }                  catch (Exception e) //We are only catching "network"-related exceptions here                  {                      lock (_lock)                      {                          _writerIsBroken = true;                      }                      FireException(e);                  }              }              finally              {                  lock (_lock)                  {                      _writeOperationPending = false;                  }              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream(250))              using (var writer = new BinaryWriter(ms))              {                  new Serializer(writer).WriteDocument(document);                  return ms.ToArray();              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,WriteBinnary,The following statement contains a magic number: if (value is byte[])              {                  var bytes = (byte[])value;                  var length = bytes.Length;                  _writer.Write(length + 4);                  _writer.Write((byte)2);                  _writer.Write(length);                  _writer.Write(bytes);                  Written(9 + length);              }              else if (value is Guid)              {                  var guid = (Guid)value;                  var bytes = guid.ToByteArray();                  _writer.Write(bytes.Length);                  _writer.Write((byte)3);                  _writer.Write(bytes);                  Written(5 + bytes.Length);              }
Magic Number,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_machineHash' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(_processId' 0' oid' copyidx' 2);
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Metsys.Bson.Configuration,ObjectIdGenerator,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24)              {                  return false;              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,ObjectId,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2)              {                  bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(float))              {                  Read(8);                  return (float)_reader.ReadDouble();              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(ObjectId))              {                  Read(12);                  return new ObjectId(_reader.ReadBytes(12));              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,DeserializeValue,The following statement contains a magic number: if (type == typeof(double))              {                  Read(8);                  return _reader.ReadDouble();              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadObject,The following statement contains a magic number: while (true)              {                  var storageType = ReadType();                  var name = ReadName();                  var isNull = false;                  if (storageType == Types.Object)                  {                      var length = _reader.ReadInt32();                      if (length == 5)                      {                          _reader.ReadByte(); //eoo                          Read(5);                          isNull = true;                      }                      else                      {                          NewDocument(length);                      }                  }                  object container = null;                  var property = typeHelper.FindProperty(name);                  var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object);                  if (property == null && typeHelper.Expando == null)                  {                      throw new BsonException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));                  }                  if (property != null && property.Setter == null)                  {                      container = property.Getter(instance);                  }                  var value = isNull ? null : DeserializeValue(propertyType' storageType' container' options);                  if (property == null)                  {                      ((IDictionary<string' object>)typeHelper.Expando.Getter(instance))[name] = value;                  }                  else if (container == null && value != null && !property.Ignored)                  {                      property.Setter(instance' value);                  }                  if (IsDone())                  {                      break;                  }              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 2)              {                  return _reader.ReadBytes(_reader.ReadInt32());              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadBinary,The following statement contains a magic number: if (subType == 3)              {                  return new Guid(_reader.ReadBytes(length));              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case Types.Int32:                      Read(4);                      return _reader.ReadInt32();                  case Types.Int64:                      Read(8);                      return _reader.ReadInt64();                  case Types.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new BsonException("Could not create an int64 from " + storedType);              }
Magic Number,Metsys.Bson.Configuration,Deserializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Metsys.Bson.Configuration,Serializer,C:\repos\grokys_Perspex\src\Avalonia.Remote.Protocol\MetsysBson.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case Types.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case Types.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case Types.String:                      Write((string)value);                      return;                  case Types.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case Types.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case Types.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime().Subtract(Helper.Epoch).TotalMilliseconds);                      return;                  case Types.Binary:                      WriteBinnary(value);                      return;                  case Types.ScopedCode:                      Write((ScopedCode)value);                      return;                  case Types.ObjectId:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case Types.Regex:                      Write((Regex)value);                      break;              }
