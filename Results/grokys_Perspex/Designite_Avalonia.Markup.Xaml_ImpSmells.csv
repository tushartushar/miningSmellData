Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Avalonia.Markup.Xaml.Converters,SetterValueTypeConverter,C:\repos\grokys_Perspex\src\Markup\Avalonia.Markup.Xaml\Converters\SetterValueTypeConverter.cs,ConvertSetterValue,The method has 5 parameters. Parameters: dcontext' context' info' setter' value
Long Parameter List,Avalonia.Markup.Xaml.Data,Binding,C:\repos\grokys_Perspex\src\Markup\Avalonia.Markup.Xaml\Data\Binding.cs,CreateDataContexObserver,The method has 5 parameters. Parameters: target' path' targetIsDataContext' anchor' enableDataValidation
Long Parameter List,Avalonia.Markup.Xaml.PortableXaml,AvaloniaPropertyXamlMember,C:\repos\grokys_Perspex\src\Markup\Avalonia.Markup.Xaml\PortableXaml\AvaloniaXamlType.cs,AvaloniaPropertyXamlMember,The method has 5 parameters. Parameters: property' attachablePropertyName' getter' setter' schemaContext
Long Parameter List,Avalonia.Markup.Xaml.PortableXaml,AvaloniaAttachedPropertyXamlMember,C:\repos\grokys_Perspex\src\Markup\Avalonia.Markup.Xaml\PortableXaml\AvaloniaXamlType.cs,AvaloniaAttachedPropertyXamlMember,The method has 5 parameters. Parameters: property' attachablePropertyName' getter' setter' schemaContext
Long Statement,Avalonia.Markup.Xaml.Data,Binding,C:\repos\grokys_Perspex\src\Markup\Avalonia.Markup.Xaml\Data\Binding.cs,Initiate,The length of the statement  "                    throw new InvalidOperationException("AncestorType must be set for RelativeSourceMode.FindAncestor when searching the visual tree."); " is 132.
Complex Conditional,Avalonia.Markup.Xaml.MarkupExtensions,BindingExtension,C:\repos\grokys_Perspex\src\Markup\Avalonia.Markup.Xaml\MarkupExtensions\BindingExtension.cs,ValidateState,The conditional expression  "(pathInfo.ElementName != null || ElementName != null) &&                  (pathInfo.RelativeSource != null || RelativeSource != null)"  is complex.
Magic Number,Avalonia.Markup.Xaml.Converters,AvaloniaPropertyTypeConverter,C:\repos\grokys_Perspex\src\Markup\Avalonia.Markup.Xaml\Converters\AvaloniaPropertyTypeConverter.cs,ParseProperty,The following statement contains a magic number: if (split.Length == 1)              {                  typeName = null;                  propertyName = split[0];              }              else if (split.Length == 2)              {                  typeName = split[0];                  propertyName = split[1];              }              else              {                  throw new Exception($"Invalid property name: '{s}'.");              }
Magic Number,Avalonia.Markup.Xaml.MarkupExtensions,BindingExtension,C:\repos\grokys_Perspex\src\Markup\Avalonia.Markup.Xaml\MarkupExtensions\BindingExtension.cs,ParsePath,The following statement contains a magic number: if (string.IsNullOrWhiteSpace(path) || path == ".")              {                  result.Path = string.Empty;              }              else if (path.StartsWith("#"))              {                  var dot = path.IndexOf('.');                    if (dot != -1)                  {                      result.Path = path.Substring(dot + 1);                      result.ElementName = path.Substring(1' dot - 1);                  }                  else                  {                      result.Path = string.Empty;                      result.ElementName = path.Substring(1);                  }              }              else if (path.StartsWith("$"))              {                  var relativeSource = new RelativeSource                  {                      Tree = TreeType.Logical                  };                  result.RelativeSource = relativeSource;                  var dot = path.IndexOf('.');                  string relativeSourceMode;                  if (dot != -1)                  {                      result.Path = path.Substring(dot + 1);                      relativeSourceMode = path.Substring(1' dot - 1);                  }                  else                  {                      result.Path = string.Empty;                      relativeSourceMode = path.Substring(1);                  }                    if (relativeSourceMode == "self")                  {                      relativeSource.Mode = RelativeSourceMode.Self;                  }                  else if (relativeSourceMode == "parent")                  {                      relativeSource.Mode = RelativeSourceMode.FindAncestor;                      relativeSource.AncestorLevel = 1;                  }                  else if (relativeSourceMode.StartsWith("parent["))                  {                      relativeSource.Mode = RelativeSourceMode.FindAncestor;                      var parentConfigStart = relativeSourceMode.IndexOf('[');                      if (!relativeSourceMode.EndsWith("]"))                      {                          throw new InvalidOperationException("Invalid RelativeSource binding syntax. Expected matching ']' for '['.");                      }                      var parentConfigParams = relativeSourceMode.Substring(parentConfigStart + 1).TrimEnd(']').Split(';');                      if (parentConfigParams.Length > 2 || parentConfigParams.Length == 0)                      {                          throw new InvalidOperationException("Expected either 1 or 2 parameters for RelativeSource binding syntax");                      }                      else if (parentConfigParams.Length == 1)                      {                          if (int.TryParse(parentConfigParams[0]' out int level))                          {                              relativeSource.AncestorType = null;                              relativeSource.AncestorLevel = level + 1;                          }                          else                          {                              relativeSource.AncestorType = LookupAncestorType(parentConfigParams[0]' context);                          }                      }                      else                      {                          relativeSource.AncestorType = LookupAncestorType(parentConfigParams[0]' context);                          relativeSource.AncestorLevel = int.Parse(parentConfigParams[1]) + 1;                      }                  }                  else                  {                      throw new InvalidOperationException($"Invalid RelativeSource binding syntax: {relativeSourceMode}");                  }              }              else              {                  result.Path = path;              }
Magic Number,Avalonia.Markup.Xaml.MarkupExtensions,BindingExtension,C:\repos\grokys_Perspex\src\Markup\Avalonia.Markup.Xaml\MarkupExtensions\BindingExtension.cs,LookupAncestorType,The following statement contains a magic number: if (parts.Length == 0 || parts.Length > 2)              {                  throw new InvalidOperationException("Invalid type name");              }
