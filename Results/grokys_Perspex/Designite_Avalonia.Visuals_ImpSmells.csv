Implementation smell,Namespace,Class,File,Method,Description
Long Method,Avalonia.Media,Brushes,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Brushes.cs,Brushes,The method has 143 lines of code.
Long Method,Avalonia.Media,PathMarkupParser,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\PathMarkupParser.cs,Parse,The method has 131 lines of code.
Complex Method,Avalonia.Rendering.SceneGraph,Scene,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\SceneGraph\Scene.cs,HitTest,Cyclomatic complexity of the method is 8
Long Parameter List,Avalonia,Matrix,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Matrix.cs,Matrix,The method has 6 parameters. Parameters: m11' m12' m21' m22' offsetX' offsetY
Long Parameter List,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,RelativeRect,The method has 5 parameters. Parameters: x' y' width' height' unit
Long Parameter List,Avalonia.Media,Pen,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Pen.cs,Pen,The method has 8 parameters. Parameters: brush' thickness' dashStyle' dashCap' startLineCap' endLineCap' lineJoin' miterLimit
Long Parameter List,Avalonia.Media,Pen,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Pen.cs,Pen,The method has 8 parameters. Parameters: color' thickness' dashStyle' dashCap' startLineCap' endLineCap' lineJoin' miterLimit
Long Parameter List,Avalonia.Media,StreamGeometryContext,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\StreamGeometryContext.cs,ArcTo,The method has 5 parameters. Parameters: point' size' rotationAngle' isLargeArc' sweepDirection
Long Parameter List,Avalonia.Media.Imaging,Bitmap,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Imaging\Bitmap.cs,Bitmap,The method has 5 parameters. Parameters: format' data' width' height' stride
Long Parameter List,Avalonia.Media.Immutable,ImmutableImageBrush,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Immutable\ImmutableImageBrush.cs,ImmutableImageBrush,The method has 8 parameters. Parameters: source' alignmentX' alignmentY' destinationRect' opacity' sourceRect' stretch' tileMode
Long Parameter List,Avalonia.Media.Immutable,ImmutableLinearGradientBrush,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Immutable\ImmutableLinearGradientBrush.cs,ImmutableLinearGradientBrush,The method has 5 parameters. Parameters: gradientStops' opacity' spreadMethod' startPoint' endPoint
Long Parameter List,Avalonia.Media.Immutable,ImmutableRadialGradientBrush,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Immutable\ImmutableRadialGradientBrush.cs,ImmutableRadialGradientBrush,The method has 6 parameters. Parameters: gradientStops' opacity' spreadMethod' center' gradientOrigin' radius
Long Parameter List,Avalonia.Media.Immutable,ImmutableTileBrush,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Immutable\ImmutableTileBrush.cs,ImmutableTileBrush,The method has 7 parameters. Parameters: alignmentX' alignmentY' destinationRect' opacity' sourceRect' stretch' tileMode
Long Parameter List,Avalonia.Media.Immutable,ImmutableVisualBrush,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Immutable\ImmutableVisualBrush.cs,ImmutableVisualBrush,The method has 8 parameters. Parameters: visual' alignmentX' alignmentY' destinationRect' opacity' sourceRect' stretch' tileMode
Long Parameter List,Avalonia.Platform,ExportRenderingSubsystemAttribute,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Platform\ExportRenderingSubsystemAttribute.cs,ExportRenderingSubsystemAttribute,The method has 6 parameters. Parameters: requiredOS' priority' name' initializationType' initializationMethod' environmentChecker
Long Parameter List,Avalonia.Platform,IPlatformRenderInterface,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Platform\IPlatformRenderInterface.cs,CreateFormattedText,The method has 6 parameters. Parameters: text' typeface' textAlignment' wrapping' constraint' spans
Long Parameter List,Avalonia.Platform,IPlatformRenderInterface,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Platform\IPlatformRenderInterface.cs,LoadBitmap,The method has 5 parameters. Parameters: format' data' width' height' stride
Long Parameter List,Avalonia.Platform,IStreamGeometryContextImpl,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Platform\IStreamGeometryContextImpl.cs,ArcTo,The method has 5 parameters. Parameters: point' size' rotationAngle' isLargeArc' sweepDirection
Long Parameter List,Avalonia.Platform,LockedFramebuffer,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Platform\LockedFramebuffer.cs,LockedFramebuffer,The method has 7 parameters. Parameters: address' width' height' rowBytes' dpi' format' onDispose
Long Parameter List,Avalonia.Rendering.SceneGraph,GeometryNode,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\SceneGraph\GeometryNode.cs,GeometryNode,The method has 5 parameters. Parameters: transform' brush' pen' geometry' childScenes
Long Parameter List,Avalonia.Rendering.SceneGraph,ImageNode,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\SceneGraph\ImageNode.cs,ImageNode,The method has 5 parameters. Parameters: transform' source' opacity' sourceRect' destRect
Long Parameter List,Avalonia.Rendering.SceneGraph,ImageNode,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\SceneGraph\ImageNode.cs,Equals,The method has 5 parameters. Parameters: transform' source' opacity' sourceRect' destRect
Long Parameter List,Avalonia.Rendering.SceneGraph,LineNode,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\SceneGraph\LineNode.cs,LineNode,The method has 5 parameters. Parameters: transform' pen' p1' p2' childScenes
Long Parameter List,Avalonia.Rendering.SceneGraph,RectangleNode,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\SceneGraph\RectangleNode.cs,RectangleNode,The method has 6 parameters. Parameters: transform' brush' pen' rect' cornerRadius' childScenes
Long Parameter List,Avalonia.Rendering.SceneGraph,RectangleNode,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\SceneGraph\RectangleNode.cs,Equals,The method has 5 parameters. Parameters: transform' brush' pen' rect' cornerRadius
Long Parameter List,Avalonia.Rendering.SceneGraph,SceneBuilder,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\SceneGraph\SceneBuilder.cs,Update,The method has 5 parameters. Parameters: context' scene' node' clip' forceRecurse
Long Parameter List,Avalonia.Rendering.SceneGraph,TextNode,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\SceneGraph\TextNode.cs,TextNode,The method has 5 parameters. Parameters: transform' foreground' origin' text' childScenes
Long Parameter List,Avalonia.Rendering.Utilities,TileBrushCalculator,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\Utilities\TileBrushCalculator.cs,TileBrushCalculator,The method has 8 parameters. Parameters: tileMode' stretch' alignmentX' alignmentY' sourceRect' destinationRect' contentSize' targetSize
Long Parameter List,Avalonia.Rendering.Utilities,TileBrushCalculator,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\Utilities\TileBrushCalculator.cs,CalculateTranslate,The method has 5 parameters. Parameters: alignmentX' alignmentY' sourceRect' destinationRect' scale
Long Parameter List,Avalonia.Rendering.Utilities,TileBrushCalculator,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\Utilities\TileBrushCalculator.cs,CalculateIntermediateTransform,The method has 6 parameters. Parameters: tileMode' sourceRect' destinationRect' scale' translate' drawRect
Long Statement,Avalonia.Animation,PageSlide,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Animation\PageSlide.cs,Start,The length of the statement  "            var translateProperty = Orientation == SlideAxis.Horizontal ? TranslateTransform.XProperty : TranslateTransform.YProperty; " is 122.
Long Statement,Avalonia.Rendering,ImmediateRenderer,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\ImmediateRenderer.cs,Render,The length of the statement  "                using (visual.OpacityMask != null ? context.PushOpacityMask(visual.OpacityMask' bounds) : default(DrawingContext.PushedState)) " is 126.
Complex Conditional,Avalonia.Media,PathMarkupParser,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\PathMarkupParser.cs,ReadCommand,The conditional expression  "(char.IsDigit(c) || c == '.' || c == '+' || c == '-') &&                          (command != Command.None)"  is complex.
Complex Conditional,Avalonia.Media,PathMarkupParser,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\PathMarkupParser.cs,ReadDouble,The conditional expression  "((c == '+' || c == '-') && !readSign) ||                      (c == '.' && !readPoint) ||                      (c == 'E' && !readExponent) ||                      char.IsDigit(c)"  is complex.
Empty Catch Block,Avalonia.Rendering,DeferredRenderer,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\DeferredRenderer.cs,OnRenderLoopTick,The method has an empty catch block.
Empty Catch Block,Avalonia.Rendering.SceneGraph,SceneBuilder,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\SceneGraph\SceneBuilder.cs,Update,The method has an empty catch block.
Magic Number,Avalonia,Matrix,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Matrix.cs,ToRadians,The following statement contains a magic number: return angle * 0.0174532925;
Magic Number,Avalonia,Matrix,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Matrix.cs,Parse,The following statement contains a magic number: if (parts.Length == 6)              {                  return new Matrix(                      double.Parse(parts[0]' culture)'                       double.Parse(parts[1]' culture)'                       double.Parse(parts[2]' culture)'                       double.Parse(parts[3]' culture)'                       double.Parse(parts[4]' culture)'                       double.Parse(parts[5]' culture));              }              else              {                  throw new FormatException("Invalid Matrix.");              }
Magic Number,Avalonia,Matrix,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Matrix.cs,Parse,The following statement contains a magic number: if (parts.Length == 6)              {                  return new Matrix(                      double.Parse(parts[0]' culture)'                       double.Parse(parts[1]' culture)'                       double.Parse(parts[2]' culture)'                       double.Parse(parts[3]' culture)'                       double.Parse(parts[4]' culture)'                       double.Parse(parts[5]' culture));              }              else              {                  throw new FormatException("Invalid Matrix.");              }
Magic Number,Avalonia,Matrix,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Matrix.cs,Parse,The following statement contains a magic number: if (parts.Length == 6)              {                  return new Matrix(                      double.Parse(parts[0]' culture)'                       double.Parse(parts[1]' culture)'                       double.Parse(parts[2]' culture)'                       double.Parse(parts[3]' culture)'                       double.Parse(parts[4]' culture)'                       double.Parse(parts[5]' culture));              }              else              {                  throw new FormatException("Invalid Matrix.");              }
Magic Number,Avalonia,Matrix,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Matrix.cs,Parse,The following statement contains a magic number: if (parts.Length == 6)              {                  return new Matrix(                      double.Parse(parts[0]' culture)'                       double.Parse(parts[1]' culture)'                       double.Parse(parts[2]' culture)'                       double.Parse(parts[3]' culture)'                       double.Parse(parts[4]' culture)'                       double.Parse(parts[5]' culture));              }              else              {                  throw new FormatException("Invalid Matrix.");              }
Magic Number,Avalonia,Matrix,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Matrix.cs,Parse,The following statement contains a magic number: if (parts.Length == 6)              {                  return new Matrix(                      double.Parse(parts[0]' culture)'                       double.Parse(parts[1]' culture)'                       double.Parse(parts[2]' culture)'                       double.Parse(parts[3]' culture)'                       double.Parse(parts[4]' culture)'                       double.Parse(parts[5]' culture));              }              else              {                  throw new FormatException("Invalid Matrix.");              }
Magic Number,Avalonia,Point,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Point.cs,Parse,The following statement contains a magic number: if (parts.Count == 2)              {                  return new Point(double.Parse(parts[0]' culture)' double.Parse(parts[1]' culture));              }              else              {                  throw new FormatException("Invalid Point.");              }
Magic Number,Avalonia,Point,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Point.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + _x.GetHashCode();                  hash = (hash * 23) + _y.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Point,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Point.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + _x.GetHashCode();                  hash = (hash * 23) + _y.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Point,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Point.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + _x.GetHashCode();                  hash = (hash * 23) + _y.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Rect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rect.cs,CenterRect,The following statement contains a magic number: return new Rect(                  _x + ((_width - rect._width) / 2)'                  _y + ((_height - rect._height) / 2)'                  rect._width'                  rect._height);
Magic Number,Avalonia,Rect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rect.cs,CenterRect,The following statement contains a magic number: return new Rect(                  _x + ((_width - rect._width) / 2)'                  _y + ((_height - rect._height) / 2)'                  rect._width'                  rect._height);
Magic Number,Avalonia,Rect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rect.cs,Deflate,The following statement contains a magic number: return Deflate(new Thickness(thickness / 2));
Magic Number,Avalonia,Rect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rect.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + X.GetHashCode();                  hash = (hash * 23) + Y.GetHashCode();                  hash = (hash * 23) + Width.GetHashCode();                  hash = (hash * 23) + Height.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Rect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rect.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + X.GetHashCode();                  hash = (hash * 23) + Y.GetHashCode();                  hash = (hash * 23) + Width.GetHashCode();                  hash = (hash * 23) + Height.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Rect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rect.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + X.GetHashCode();                  hash = (hash * 23) + Y.GetHashCode();                  hash = (hash * 23) + Width.GetHashCode();                  hash = (hash * 23) + Height.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Rect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rect.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + X.GetHashCode();                  hash = (hash * 23) + Y.GetHashCode();                  hash = (hash * 23) + Width.GetHashCode();                  hash = (hash * 23) + Height.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Rect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rect.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + X.GetHashCode();                  hash = (hash * 23) + Y.GetHashCode();                  hash = (hash * 23) + Width.GetHashCode();                  hash = (hash * 23) + Height.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Rect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  return new Rect(                      double.Parse(parts[0]' culture)'                      double.Parse(parts[1]' culture)'                      double.Parse(parts[2]' culture)'                      double.Parse(parts[3]' culture));              }              else              {                  throw new FormatException("Invalid Rect.");              }
Magic Number,Avalonia,Rect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  return new Rect(                      double.Parse(parts[0]' culture)'                      double.Parse(parts[1]' culture)'                      double.Parse(parts[2]' culture)'                      double.Parse(parts[3]' culture));              }              else              {                  throw new FormatException("Invalid Rect.");              }
Magic Number,Avalonia,Rect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  return new Rect(                      double.Parse(parts[0]' culture)'                      double.Parse(parts[1]' culture)'                      double.Parse(parts[2]' culture)'                      double.Parse(parts[3]' culture));              }              else              {                  throw new FormatException("Invalid Rect.");              }
Magic Number,Avalonia,RelativePoint,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativePoint.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Unit.GetHashCode();                  hash = (hash * 23) + Point.GetHashCode();                  return hash;              }
Magic Number,Avalonia,RelativePoint,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativePoint.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Unit.GetHashCode();                  hash = (hash * 23) + Point.GetHashCode();                  return hash;              }
Magic Number,Avalonia,RelativePoint,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativePoint.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Unit.GetHashCode();                  hash = (hash * 23) + Point.GetHashCode();                  return hash;              }
Magic Number,Avalonia,RelativePoint,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativePoint.cs,Parse,The following statement contains a magic number: if (parts.Count == 2)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' both must be.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativePoint(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid Point.");              }
Magic Number,Avalonia,RelativePoint,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativePoint.cs,Parse,The following statement contains a magic number: if (parts.Count == 2)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' both must be.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativePoint(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid Point.");              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Unit.GetHashCode();                  hash = (hash * 23) + Rect.GetHashCode();                  return hash;              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Unit.GetHashCode();                  hash = (hash * 23) + Rect.GetHashCode();                  return hash;              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Unit.GetHashCode();                  hash = (hash * 23) + Rect.GetHashCode();                  return hash;              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%")                           || !parts[2].EndsWith("%")                          || !parts[3].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' all other must be too.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      parts[2] = parts[2].TrimEnd('%');                      parts[3] = parts[3].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativeRect(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      double.Parse(parts[2]' culture) * scale'                      double.Parse(parts[3]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid RelativeRect.");              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%")                           || !parts[2].EndsWith("%")                          || !parts[3].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' all other must be too.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      parts[2] = parts[2].TrimEnd('%');                      parts[3] = parts[3].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativeRect(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      double.Parse(parts[2]' culture) * scale'                      double.Parse(parts[3]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid RelativeRect.");              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%")                           || !parts[2].EndsWith("%")                          || !parts[3].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' all other must be too.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      parts[2] = parts[2].TrimEnd('%');                      parts[3] = parts[3].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativeRect(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      double.Parse(parts[2]' culture) * scale'                      double.Parse(parts[3]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid RelativeRect.");              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%")                           || !parts[2].EndsWith("%")                          || !parts[3].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' all other must be too.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      parts[2] = parts[2].TrimEnd('%');                      parts[3] = parts[3].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativeRect(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      double.Parse(parts[2]' culture) * scale'                      double.Parse(parts[3]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid RelativeRect.");              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%")                           || !parts[2].EndsWith("%")                          || !parts[3].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' all other must be too.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      parts[2] = parts[2].TrimEnd('%');                      parts[3] = parts[3].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativeRect(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      double.Parse(parts[2]' culture) * scale'                      double.Parse(parts[3]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid RelativeRect.");              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%")                           || !parts[2].EndsWith("%")                          || !parts[3].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' all other must be too.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      parts[2] = parts[2].TrimEnd('%');                      parts[3] = parts[3].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativeRect(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      double.Parse(parts[2]' culture) * scale'                      double.Parse(parts[3]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid RelativeRect.");              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%")                           || !parts[2].EndsWith("%")                          || !parts[3].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' all other must be too.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      parts[2] = parts[2].TrimEnd('%');                      parts[3] = parts[3].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativeRect(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      double.Parse(parts[2]' culture) * scale'                      double.Parse(parts[3]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid RelativeRect.");              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%")                           || !parts[2].EndsWith("%")                          || !parts[3].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' all other must be too.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      parts[2] = parts[2].TrimEnd('%');                      parts[3] = parts[3].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativeRect(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      double.Parse(parts[2]' culture) * scale'                      double.Parse(parts[3]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid RelativeRect.");              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%")                           || !parts[2].EndsWith("%")                          || !parts[3].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' all other must be too.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      parts[2] = parts[2].TrimEnd('%');                      parts[3] = parts[3].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativeRect(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      double.Parse(parts[2]' culture) * scale'                      double.Parse(parts[3]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid RelativeRect.");              }
Magic Number,Avalonia,RelativeRect,C:\repos\grokys_Perspex\src\Avalonia.Visuals\RelativeRect.cs,Parse,The following statement contains a magic number: if (parts.Count == 4)              {                  var unit = RelativeUnit.Absolute;                  var scale = 1.0;                    if (parts[0].EndsWith("%"))                  {                      if (!parts[1].EndsWith("%")                           || !parts[2].EndsWith("%")                          || !parts[3].EndsWith("%"))                      {                          throw new FormatException("If one coordinate is relative' all other must be too.");                      }                        parts[0] = parts[0].TrimEnd('%');                      parts[1] = parts[1].TrimEnd('%');                      parts[2] = parts[2].TrimEnd('%');                      parts[3] = parts[3].TrimEnd('%');                      unit = RelativeUnit.Relative;                      scale = 0.01;                  }                    return new RelativeRect(                      double.Parse(parts[0]' culture) * scale'                      double.Parse(parts[1]' culture) * scale'                      double.Parse(parts[2]' culture) * scale'                      double.Parse(parts[3]' culture) * scale'                      unit);              }              else              {                  throw new FormatException("Invalid RelativeRect.");              }
Magic Number,Avalonia,Size,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Size.cs,Parse,The following statement contains a magic number: if (parts.Count == 2)              {                  return new Size(double.Parse(parts[0]' culture)' double.Parse(parts[1]' culture));              }              else              {                  throw new FormatException("Invalid Size.");              }
Magic Number,Avalonia,Size,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Size.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Width.GetHashCode();                  hash = (hash * 23) + Height.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Size,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Size.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Width.GetHashCode();                  hash = (hash * 23) + Height.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Size,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Size.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Width.GetHashCode();                  hash = (hash * 23) + Height.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Thickness,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Thickness.cs,Parse,The following statement contains a magic number: switch (parts.Count)              {                  case 1:                      var uniform = double.Parse(parts[0]' culture);                      return new Thickness(uniform);                  case 2:                      var horizontal = double.Parse(parts[0]' culture);                      var vertical = double.Parse(parts[1]' culture);                      return new Thickness(horizontal' vertical);                  case 4:                      var left = double.Parse(parts[0]' culture);                      var top = double.Parse(parts[1]' culture);                      var right = double.Parse(parts[2]' culture);                      var bottom = double.Parse(parts[3]' culture);                      return new Thickness(left' top' right' bottom);              }
Magic Number,Avalonia,Thickness,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Thickness.cs,Parse,The following statement contains a magic number: switch (parts.Count)              {                  case 1:                      var uniform = double.Parse(parts[0]' culture);                      return new Thickness(uniform);                  case 2:                      var horizontal = double.Parse(parts[0]' culture);                      var vertical = double.Parse(parts[1]' culture);                      return new Thickness(horizontal' vertical);                  case 4:                      var left = double.Parse(parts[0]' culture);                      var top = double.Parse(parts[1]' culture);                      var right = double.Parse(parts[2]' culture);                      var bottom = double.Parse(parts[3]' culture);                      return new Thickness(left' top' right' bottom);              }
Magic Number,Avalonia,Thickness,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Thickness.cs,Parse,The following statement contains a magic number: switch (parts.Count)              {                  case 1:                      var uniform = double.Parse(parts[0]' culture);                      return new Thickness(uniform);                  case 2:                      var horizontal = double.Parse(parts[0]' culture);                      var vertical = double.Parse(parts[1]' culture);                      return new Thickness(horizontal' vertical);                  case 4:                      var left = double.Parse(parts[0]' culture);                      var top = double.Parse(parts[1]' culture);                      var right = double.Parse(parts[2]' culture);                      var bottom = double.Parse(parts[3]' culture);                      return new Thickness(left' top' right' bottom);              }
Magic Number,Avalonia,Thickness,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Thickness.cs,Parse,The following statement contains a magic number: switch (parts.Count)              {                  case 1:                      var uniform = double.Parse(parts[0]' culture);                      return new Thickness(uniform);                  case 2:                      var horizontal = double.Parse(parts[0]' culture);                      var vertical = double.Parse(parts[1]' culture);                      return new Thickness(horizontal' vertical);                  case 4:                      var left = double.Parse(parts[0]' culture);                      var top = double.Parse(parts[1]' culture);                      var right = double.Parse(parts[2]' culture);                      var bottom = double.Parse(parts[3]' culture);                      return new Thickness(left' top' right' bottom);              }
Magic Number,Avalonia,Thickness,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Thickness.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Left.GetHashCode();                  hash = (hash * 23) + Top.GetHashCode();                  hash = (hash * 23) + Right.GetHashCode();                  hash = (hash * 23) + Bottom.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Thickness,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Thickness.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Left.GetHashCode();                  hash = (hash * 23) + Top.GetHashCode();                  hash = (hash * 23) + Right.GetHashCode();                  hash = (hash * 23) + Bottom.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Thickness,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Thickness.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Left.GetHashCode();                  hash = (hash * 23) + Top.GetHashCode();                  hash = (hash * 23) + Right.GetHashCode();                  hash = (hash * 23) + Bottom.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Thickness,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Thickness.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Left.GetHashCode();                  hash = (hash * 23) + Top.GetHashCode();                  hash = (hash * 23) + Right.GetHashCode();                  hash = (hash * 23) + Bottom.GetHashCode();                  return hash;              }
Magic Number,Avalonia,Thickness,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Thickness.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 23) + Left.GetHashCode();                  hash = (hash * 23) + Top.GetHashCode();                  hash = (hash * 23) + Right.GetHashCode();                  hash = (hash * 23) + Bottom.GetHashCode();                  return hash;              }
Magic Number,Avalonia.Media,Color,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Color.cs,FromUInt32,The following statement contains a magic number: return new Color(                  (byte)((value >> 24) & 0xff)'                  (byte)((value >> 16) & 0xff)'                  (byte)((value >> 8) & 0xff)'                  (byte)(value & 0xff)              );
Magic Number,Avalonia.Media,Color,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Color.cs,FromUInt32,The following statement contains a magic number: return new Color(                  (byte)((value >> 24) & 0xff)'                  (byte)((value >> 16) & 0xff)'                  (byte)((value >> 8) & 0xff)'                  (byte)(value & 0xff)              );
Magic Number,Avalonia.Media,Color,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Color.cs,FromUInt32,The following statement contains a magic number: return new Color(                  (byte)((value >> 24) & 0xff)'                  (byte)((value >> 16) & 0xff)'                  (byte)((value >> 8) & 0xff)'                  (byte)(value & 0xff)              );
Magic Number,Avalonia.Media,Color,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Color.cs,Parse,The following statement contains a magic number: if (s[0] == '#')              {                  var or = 0u;                    if (s.Length == 7)                  {                      or = 0xff000000;                  }                  else if (s.Length != 9)                  {                      throw new FormatException($"Invalid color string: '{s}'.");                  }                    return FromUInt32(uint.Parse(s.Substring(1)' NumberStyles.HexNumber' CultureInfo.InvariantCulture) | or);              }              else              {                  var upper = s.ToUpperInvariant();                  var member = typeof(Colors).GetTypeInfo().DeclaredProperties                      .FirstOrDefault(x => x.Name.ToUpperInvariant() == upper);                    if (member != null)                  {                      return (Color)member.GetValue(null);                  }                  else                  {                      throw new FormatException($"Invalid color string: '{s}'.");                  }              }
Magic Number,Avalonia.Media,Color,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Color.cs,Parse,The following statement contains a magic number: if (s[0] == '#')              {                  var or = 0u;                    if (s.Length == 7)                  {                      or = 0xff000000;                  }                  else if (s.Length != 9)                  {                      throw new FormatException($"Invalid color string: '{s}'.");                  }                    return FromUInt32(uint.Parse(s.Substring(1)' NumberStyles.HexNumber' CultureInfo.InvariantCulture) | or);              }              else              {                  var upper = s.ToUpperInvariant();                  var member = typeof(Colors).GetTypeInfo().DeclaredProperties                      .FirstOrDefault(x => x.Name.ToUpperInvariant() == upper);                    if (member != null)                  {                      return (Color)member.GetValue(null);                  }                  else                  {                      throw new FormatException($"Invalid color string: '{s}'.");                  }              }
Magic Number,Avalonia.Media,Color,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Color.cs,ToString,The following statement contains a magic number: uint rgb = ((uint)A << 24) | ((uint)R << 16) | ((uint)G << 8) | (uint)B;
Magic Number,Avalonia.Media,Color,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Color.cs,ToString,The following statement contains a magic number: uint rgb = ((uint)A << 24) | ((uint)R << 16) | ((uint)G << 8) | (uint)B;
Magic Number,Avalonia.Media,Color,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Color.cs,ToString,The following statement contains a magic number: uint rgb = ((uint)A << 24) | ((uint)R << 16) | ((uint)G << 8) | (uint)B;
Magic Number,Avalonia.Media,Color,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Color.cs,ToUint32,The following statement contains a magic number: return ((uint)A << 24) | ((uint)R << 16) | ((uint)G << 8) | (uint)B;
Magic Number,Avalonia.Media,Color,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Color.cs,ToUint32,The following statement contains a magic number: return ((uint)A << 24) | ((uint)R << 16) | ((uint)G << 8) | (uint)B;
Magic Number,Avalonia.Media,Color,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\Color.cs,ToUint32,The following statement contains a magic number: return ((uint)A << 24) | ((uint)R << 16) | ((uint)G << 8) | (uint)B;
Magic Number,Avalonia.Media,EllipseGeometry,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\EllipseGeometry.cs,RectChanged,The following statement contains a magic number: using (var ctx = ((IStreamGeometryImpl)PlatformImpl).Open())              {                  double controlPointRatio = (Math.Sqrt(2) - 1) * 4 / 3;                  var center = rect.Center;                  var radius = new Vector(rect.Width / 2' rect.Height / 2);                    var x0 = center.X - radius.X;                  var x1 = center.X - (radius.X * controlPointRatio);                  var x2 = center.X;                  var x3 = center.X + (radius.X * controlPointRatio);                  var x4 = center.X + radius.X;                    var y0 = center.Y - radius.Y;                  var y1 = center.Y - (radius.Y * controlPointRatio);                  var y2 = center.Y;                  var y3 = center.Y + (radius.Y * controlPointRatio);                  var y4 = center.Y + radius.Y;                    ctx.BeginFigure(new Point(x2' y0)' true);                  ctx.CubicBezierTo(new Point(x3' y0)' new Point(x4' y1)' new Point(x4' y2));                  ctx.CubicBezierTo(new Point(x4' y3)' new Point(x3' y4)' new Point(x2' y4));                  ctx.CubicBezierTo(new Point(x1' y4)' new Point(x0' y3)' new Point(x0' y2));                  ctx.CubicBezierTo(new Point(x0' y1)' new Point(x1' y0)' new Point(x2' y0));                  ctx.EndFigure(true);              }
Magic Number,Avalonia.Media,EllipseGeometry,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\EllipseGeometry.cs,RectChanged,The following statement contains a magic number: using (var ctx = ((IStreamGeometryImpl)PlatformImpl).Open())              {                  double controlPointRatio = (Math.Sqrt(2) - 1) * 4 / 3;                  var center = rect.Center;                  var radius = new Vector(rect.Width / 2' rect.Height / 2);                    var x0 = center.X - radius.X;                  var x1 = center.X - (radius.X * controlPointRatio);                  var x2 = center.X;                  var x3 = center.X + (radius.X * controlPointRatio);                  var x4 = center.X + radius.X;                    var y0 = center.Y - radius.Y;                  var y1 = center.Y - (radius.Y * controlPointRatio);                  var y2 = center.Y;                  var y3 = center.Y + (radius.Y * controlPointRatio);                  var y4 = center.Y + radius.Y;                    ctx.BeginFigure(new Point(x2' y0)' true);                  ctx.CubicBezierTo(new Point(x3' y0)' new Point(x4' y1)' new Point(x4' y2));                  ctx.CubicBezierTo(new Point(x4' y3)' new Point(x3' y4)' new Point(x2' y4));                  ctx.CubicBezierTo(new Point(x1' y4)' new Point(x0' y3)' new Point(x0' y2));                  ctx.CubicBezierTo(new Point(x0' y1)' new Point(x1' y0)' new Point(x2' y0));                  ctx.EndFigure(true);              }
Magic Number,Avalonia.Media,EllipseGeometry,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\EllipseGeometry.cs,RectChanged,The following statement contains a magic number: using (var ctx = ((IStreamGeometryImpl)PlatformImpl).Open())              {                  double controlPointRatio = (Math.Sqrt(2) - 1) * 4 / 3;                  var center = rect.Center;                  var radius = new Vector(rect.Width / 2' rect.Height / 2);                    var x0 = center.X - radius.X;                  var x1 = center.X - (radius.X * controlPointRatio);                  var x2 = center.X;                  var x3 = center.X + (radius.X * controlPointRatio);                  var x4 = center.X + radius.X;                    var y0 = center.Y - radius.Y;                  var y1 = center.Y - (radius.Y * controlPointRatio);                  var y2 = center.Y;                  var y3 = center.Y + (radius.Y * controlPointRatio);                  var y4 = center.Y + radius.Y;                    ctx.BeginFigure(new Point(x2' y0)' true);                  ctx.CubicBezierTo(new Point(x3' y0)' new Point(x4' y1)' new Point(x4' y2));                  ctx.CubicBezierTo(new Point(x4' y3)' new Point(x3' y4)' new Point(x2' y4));                  ctx.CubicBezierTo(new Point(x1' y4)' new Point(x0' y3)' new Point(x0' y2));                  ctx.CubicBezierTo(new Point(x0' y1)' new Point(x1' y0)' new Point(x2' y0));                  ctx.EndFigure(true);              }
Magic Number,Avalonia.Media,EllipseGeometry,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\EllipseGeometry.cs,RectChanged,The following statement contains a magic number: using (var ctx = ((IStreamGeometryImpl)PlatformImpl).Open())              {                  double controlPointRatio = (Math.Sqrt(2) - 1) * 4 / 3;                  var center = rect.Center;                  var radius = new Vector(rect.Width / 2' rect.Height / 2);                    var x0 = center.X - radius.X;                  var x1 = center.X - (radius.X * controlPointRatio);                  var x2 = center.X;                  var x3 = center.X + (radius.X * controlPointRatio);                  var x4 = center.X + radius.X;                    var y0 = center.Y - radius.Y;                  var y1 = center.Y - (radius.Y * controlPointRatio);                  var y2 = center.Y;                  var y3 = center.Y + (radius.Y * controlPointRatio);                  var y4 = center.Y + radius.Y;                    ctx.BeginFigure(new Point(x2' y0)' true);                  ctx.CubicBezierTo(new Point(x3' y0)' new Point(x4' y1)' new Point(x4' y2));                  ctx.CubicBezierTo(new Point(x4' y3)' new Point(x3' y4)' new Point(x2' y4));                  ctx.CubicBezierTo(new Point(x1' y4)' new Point(x0' y3)' new Point(x0' y2));                  ctx.CubicBezierTo(new Point(x0' y1)' new Point(x1' y0)' new Point(x2' y0));                  ctx.EndFigure(true);              }
Magic Number,Avalonia.Media,EllipseGeometry,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\EllipseGeometry.cs,RectChanged,The following statement contains a magic number: using (var ctx = ((IStreamGeometryImpl)PlatformImpl).Open())              {                  double controlPointRatio = (Math.Sqrt(2) - 1) * 4 / 3;                  var center = rect.Center;                  var radius = new Vector(rect.Width / 2' rect.Height / 2);                    var x0 = center.X - radius.X;                  var x1 = center.X - (radius.X * controlPointRatio);                  var x2 = center.X;                  var x3 = center.X + (radius.X * controlPointRatio);                  var x4 = center.X + radius.X;                    var y0 = center.Y - radius.Y;                  var y1 = center.Y - (radius.Y * controlPointRatio);                  var y2 = center.Y;                  var y3 = center.Y + (radius.Y * controlPointRatio);                  var y4 = center.Y + radius.Y;                    ctx.BeginFigure(new Point(x2' y0)' true);                  ctx.CubicBezierTo(new Point(x3' y0)' new Point(x4' y1)' new Point(x4' y2));                  ctx.CubicBezierTo(new Point(x4' y3)' new Point(x3' y4)' new Point(x2' y4));                  ctx.CubicBezierTo(new Point(x1' y4)' new Point(x0' y3)' new Point(x0' y2));                  ctx.CubicBezierTo(new Point(x0' y1)' new Point(x1' y0)' new Point(x2' y0));                  ctx.EndFigure(true);              }
Magic Number,Avalonia.Rendering,DeferredRenderer,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\DeferredRenderer.cs,RenderComposite,The following statement contains a magic number: if (_overlay != null)              {                  var sourceRect = new Rect(0' 0' _overlay.PixelWidth' _overlay.PixelHeight);                  context.DrawImage(_overlay' 0.5' sourceRect' clientRect);              }
Magic Number,Avalonia.Rendering,RendererBase,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\RendererBase.cs,RendererBase,The following statement contains a magic number: _fpsText = new FormattedText              {                  Typeface = new Typeface(null' 18)'              };
Magic Number,Avalonia.Rendering.SceneGraph,DrawOperation,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\SceneGraph\DrawOperation.cs,DrawOperation,The following statement contains a magic number: bounds = bounds.Inflate((pen?.Thickness ?? 0) / 2).TransformToAABB(transform);
Magic Number,Avalonia.Rendering.Utilities,TileBrushCalculator,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\Utilities\TileBrushCalculator.cs,CalculateTranslate,The following statement contains a magic number: switch (alignmentX)              {                  case AlignmentX.Center:                      x += (destinationRect.Width - size.Width) / 2;                      break;                  case AlignmentX.Right:                      x += destinationRect.Width - size.Width;                      break;              }
Magic Number,Avalonia.Rendering.Utilities,TileBrushCalculator,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\Utilities\TileBrushCalculator.cs,CalculateTranslate,The following statement contains a magic number: switch (alignmentY)              {                  case AlignmentY.Center:                      y += (destinationRect.Height - size.Height) / 2;                      break;                  case AlignmentY.Bottom:                      y += destinationRect.Height - size.Height;                      break;              }
Missing Default,Avalonia,Thickness,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Thickness.cs,Parse,The following switch statement is missing a default case: switch (parts.Count)              {                  case 1:                      var uniform = double.Parse(parts[0]' culture);                      return new Thickness(uniform);                  case 2:                      var horizontal = double.Parse(parts[0]' culture);                      var vertical = double.Parse(parts[1]' culture);                      return new Thickness(horizontal' vertical);                  case 4:                      var left = double.Parse(parts[0]' culture);                      var top = double.Parse(parts[1]' culture);                      var right = double.Parse(parts[2]' culture);                      var bottom = double.Parse(parts[3]' culture);                      return new Thickness(left' top' right' bottom);              }
Missing Default,Avalonia,Visual,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Visual.cs,VisualChildrenChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      foreach (Visual v in e.NewItems)                      {                          v.SetVisualParent(this);                      }                        break;                    case NotifyCollectionChangedAction.Remove:                      foreach (Visual v in e.OldItems)                      {                          v.SetVisualParent(null);                      }                        break;                    case NotifyCollectionChangedAction.Replace:                      foreach (Visual v in e.OldItems)                      {                          v.SetVisualParent(null);                      }                        foreach (Visual v in e.NewItems)                      {                          v.SetVisualParent(this);                      }                        break;              }
Missing Default,Avalonia.Media,MediaExtensions,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Media\MediaExtensions.cs,CalculateScaling,The following switch statement is missing a default case: switch (stretch)                  {                      case Stretch.Uniform:                          scaleX = scaleY = Math.Min(scaleX' scaleY);                          break;                      case Stretch.UniformToFill:                          scaleX = scaleY = Math.Max(scaleX' scaleY);                          break;                  }
Missing Default,Avalonia.Rendering.Utilities,TileBrushCalculator,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\Utilities\TileBrushCalculator.cs,CalculateTranslate,The following switch statement is missing a default case: switch (alignmentX)              {                  case AlignmentX.Center:                      x += (destinationRect.Width - size.Width) / 2;                      break;                  case AlignmentX.Right:                      x += destinationRect.Width - size.Width;                      break;              }
Missing Default,Avalonia.Rendering.Utilities,TileBrushCalculator,C:\repos\grokys_Perspex\src\Avalonia.Visuals\Rendering\Utilities\TileBrushCalculator.cs,CalculateTranslate,The following switch statement is missing a default case: switch (alignmentY)              {                  case AlignmentY.Center:                      y += (destinationRect.Height - size.Height) / 2;                      break;                  case AlignmentY.Bottom:                      y += destinationRect.Height - size.Height;                      break;              }
