Implementation smell,Namespace,Class,File,Method,Description
Long Method,NLog.Conditions,ConditionTokenizer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Conditions\ConditionTokenizer.cs,GetNextToken,The method has 143 lines of code.
Long Method,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,WriteToFile,The method has 108 lines of code.
Complex Method,NLog.Common,InternalLogger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Common\InternalLogger.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,NLog.Conditions,ConditionParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Conditions\ConditionParser.cs,ParseLiteralExpression,Cyclomatic complexity of the method is 17
Complex Method,NLog.Conditions,ConditionRelationalExpression,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Conditions\ConditionRelationalExpression.cs,PromoteTypes,Cyclomatic complexity of the method is 11
Complex Method,NLog.Conditions,ConditionTokenizer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Conditions\ConditionTokenizer.cs,GetNextToken,Cyclomatic complexity of the method is 22
Complex Method,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,ParseLoggerElement,Cyclomatic complexity of the method is 8
Complex Method,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,ParseTargetElement,Cyclomatic complexity of the method is 15
Complex Method,NLog,LogEventInfo,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogEventInfo.cs,NeedToPreformatMessage,Cyclomatic complexity of the method is 8
Complex Method,NLog,LogFactory,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogFactory.cs,GetTargetsByLevelForLogger,Cyclomatic complexity of the method is 10
Complex Method,NLog,LogLevel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogLevel.cs,FromString,Cyclomatic complexity of the method is 9
Complex Method,NLog,NLogTraceListener,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\NLogTraceListener.cs,ProcessLogEventInfo,Cyclomatic complexity of the method is 8
Complex Method,NLog.Internal,ObjectGraphScanner,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\ObjectGraphScanner.cs,ScanProperties,Cyclomatic complexity of the method is 11
Complex Method,NLog.Internal.NetworkSenders,NetworkSenderFactory,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\NetworkSenders\NetworkSenderFactory.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,NLog.LayoutRenderers,CallSiteLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\CallSiteLayoutRenderer.cs,Append,Cyclomatic complexity of the method is 11
Complex Method,NLog.Layouts,CsvLayout,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Layouts\CsvLayout.cs,GetFormattedMessage,Cyclomatic complexity of the method is 8
Complex Method,NLog.Layouts,LayoutParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Layouts\LayoutParser.cs,ParseLayoutRenderer,Cyclomatic complexity of the method is 8
Complex Method,NLog.Targets,ColoredConsoleTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\ColoredConsoleTarget.cs,ColorizeEscapeSequences,Cyclomatic complexity of the method is 13
Complex Method,NLog.Targets,ColoredConsoleTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\ColoredConsoleTarget.cs,Output,Cyclomatic complexity of the method is 11
Complex Method,NLog.Targets,DatabaseTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\DatabaseTarget.cs,InitializeTarget,Cyclomatic complexity of the method is 8
Complex Method,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,ShouldAutoArchive,Cyclomatic complexity of the method is 8
Complex Method,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,WriteToFile,Cyclomatic complexity of the method is 15
Complex Method,NLog.Targets,LogReceiverWebServiceTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\LogReceiverWebServiceTarget.cs,TranslateLogEvents,Cyclomatic complexity of the method is 9
Long Parameter List,NLog,LogEventInfo,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogEventInfo.cs,LogEventInfo,The method has 5 parameters. Parameters: level' loggerName' formatProvider' message' parameters
Long Parameter List,NLog,LogEventInfo,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogEventInfo.cs,LogEventInfo,The method has 6 parameters. Parameters: level' loggerName' formatProvider' message' parameters' exception
Long Parameter List,NLog,LogEventInfo,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogEventInfo.cs,Create,The method has 5 parameters. Parameters: logLevel' loggerName' formatProvider' message' parameters
Long Parameter List,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,Log,The method has 5 parameters. Parameters: level' formatProvider' message' argument1' argument2
Long Parameter List,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,Log,The method has 6 parameters. Parameters: level' formatProvider' message' argument1' argument2' argument3
Long Parameter List,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,Log,The method has 5 parameters. Parameters: level' message' argument1' argument2' argument3
Long Parameter List,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,Trace,The method has 5 parameters. Parameters: formatProvider' message' argument1' argument2' argument3
Long Parameter List,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,Debug,The method has 5 parameters. Parameters: formatProvider' message' argument1' argument2' argument3
Long Parameter List,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,Info,The method has 5 parameters. Parameters: formatProvider' message' argument1' argument2' argument3
Long Parameter List,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,Warn,The method has 5 parameters. Parameters: formatProvider' message' argument1' argument2' argument3
Long Parameter List,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,Error,The method has 5 parameters. Parameters: formatProvider' message' argument1' argument2' argument3
Long Parameter List,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,Fatal,The method has 5 parameters. Parameters: formatProvider' message' argument1' argument2' argument3
Long Parameter List,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,Log,The method has 5 parameters. Parameters: level' message' arg1' arg2' arg3
Long Parameter List,NLog,NLogTraceListener,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\NLogTraceListener.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,NLog,NLogTraceListener,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\NLogTraceListener.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,NLog,NLogTraceListener,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\NLogTraceListener.cs,TraceEvent,The method has 6 parameters. Parameters: eventCache' source' eventType' id' format' args
Long Parameter List,NLog,NLogTraceListener,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\NLogTraceListener.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Parameter List,NLog,NLogTraceListener,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\NLogTraceListener.cs,TraceTransfer,The method has 5 parameters. Parameters: eventCache' source' id' message' relatedActivityId
Long Parameter List,NLog,NLogTraceListener,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\NLogTraceListener.cs,ProcessLogEventInfo,The method has 5 parameters. Parameters: logLevel' loggerName' message' arguments' eventId
Long Parameter List,NLog.Internal,NativeMethods,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\NativeMethods.cs,LogonUser,The method has 6 parameters. Parameters: pszUsername' pszDomain' pszPassword' dwLogonType' dwLogonProvider' phToken
Long Parameter List,NLog.Internal,Win32FileNativeMethods,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\Win32FileNativeMethods.cs,CreateFile,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' lpSecurityAttributes' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Identifier,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,ParseTargetsElement,The length of the parameter typeNameToDefaultTargetParameters is 33.
Long Identifier,NLog,LogFactory,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogFactory.cs,,The length of the parameter ReconfigAfterFileChangedTimeout is 31.
Long Identifier,NLog.Targets,ColoredConsoleTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\ColoredConsoleTarget.cs,,The length of the parameter defaultConsoleRowHighlightingRules is 34.
Long Statement,NLog.Conditions,ConditionParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Conditions\ConditionParser.cs,ParseLiteralExpression,The length of the statement  "                ConditionExpression e = new ConditionLayoutExpression(Layout.FromString(this.tokenizer.StringTokenValue' this.configurationItemFactory)); " is 137.
Long Statement,NLog.Conditions,ConditionRelationalExpression,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Conditions\ConditionRelationalExpression.cs,PromoteTypes,The length of the statement  "            throw new ConditionEvaluationException("Cannot find common type for '" + val1.GetType().Name + "' and '" + val2.GetType().Name + "'."); " is 135.
Long Statement,NLog.Conditions,ConditionTokenizer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Conditions\ConditionTokenizer.cs,Expect,The length of the statement  "                throw new ConditionParseException("Expected token of type: " + tokenType + "' got " + this.TokenType + " (" + this.TokenValue + ")."); " is 134.
Long Statement,NLog.Config,ConfigurationItemFactory,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\ConfigurationItemFactory.cs,RegisterExtendedItems,The length of the statement  "                this.targets.RegisterNamedType("AspNetBufferingWrapper"' targetsNamespace + ".Wrappers.AspNetBufferingTargetWrapper" + suffix); " is 127.
Long Statement,NLog.Config,ConfigurationItemFactory,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\ConfigurationItemFactory.cs,RegisterExtendedItems,The length of the statement  "                this.layoutRenderers.RegisterNamedType("aspnet-application"' layoutRenderersNamespace + ".AspNetApplicationValueLayoutRenderer" + suffix); " is 138.
Long Statement,NLog.Config,ConfigurationItemFactory,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\ConfigurationItemFactory.cs,RegisterExtendedItems,The length of the statement  "                this.layoutRenderers.RegisterNamedType("aspnet-request"' layoutRenderersNamespace + ".AspNetRequestValueLayoutRenderer" + suffix); " is 130.
Long Statement,NLog.Config,ConfigurationItemFactory,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\ConfigurationItemFactory.cs,RegisterExtendedItems,The length of the statement  "                this.layoutRenderers.RegisterNamedType("aspnet-sessionid"' layoutRenderersNamespace + ".AspNetSessionIDLayoutRenderer" + suffix); " is 129.
Long Statement,NLog.Config,ConfigurationItemFactory,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\ConfigurationItemFactory.cs,RegisterExtendedItems,The length of the statement  "                this.layoutRenderers.RegisterNamedType("aspnet-session"' layoutRenderersNamespace + ".AspNetSessionValueLayoutRenderer" + suffix); " is 130.
Long Statement,NLog.Config,ConfigurationItemFactory,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\ConfigurationItemFactory.cs,RegisterExtendedItems,The length of the statement  "                this.layoutRenderers.RegisterNamedType("aspnet-user-authtype"' layoutRenderersNamespace + ".AspNetUserAuthTypeLayoutRenderer" + suffix); " is 136.
Long Statement,NLog.Config,ConfigurationItemFactory,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\ConfigurationItemFactory.cs,RegisterExtendedItems,The length of the statement  "                this.layoutRenderers.RegisterNamedType("aspnet-user-identity"' layoutRenderersNamespace + ".AspNetUserIdentityLayoutRenderer" + suffix); " is 136.
Long Statement,NLog.Config,Factory<TBaseType;TAttributeType>,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\Factory.cs,ScanAssembly,The length of the statement  "                InternalLogger.Debug("ScanAssembly('{0}'''{1}'''{2}')"' theAssembly.FullName' typeof(TAttributeType)' typeof(TBaseType)); " is 121.
Long Statement,NLog.Config,LoggingRule,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\LoggingRule.cs,ToString,The length of the statement  "            sb.AppendFormat(CultureInfo.InvariantCulture' "logNamePattern: ({0}:{1})"' this.loggerNameMatchArgument' this.loggerNameMatchMode); " is 131.
Long Statement,NLog.Config,MethodFactory<TClassAttributeType;TMethodAttributeType>,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\MethodFactory.cs,ScanAssembly,The length of the statement  "                InternalLogger.Debug("ScanAssembly('{0}'''{1}'''{2}')"' theAssembly.FullName' typeof(TClassAttributeType)' typeof(TMethodAttributeType)); " is 137.
Long Statement,NLog.Config,NLogXmlElement,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\NLogXmlElement.cs,AssertName,The length of the statement  "            throw new InvalidOperationException("Assertion failed. Expected element name '" + string.Join("|"' allowedNames) + "'' actual: '" + this.LocalName + "'."); " is 155.
Long Statement,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,WrapWithAsyncTargetWrapper,The length of the statement  "            InternalLogger.Debug("Wrapping target '{0}' with AsyncTargetWrapper and renaming to '{1}"' asyncTargetWrapper.Name' target.Name); " is 129.
Long Statement,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,ParseNLogElement,The length of the statement  "            InternalLogger.LogToConsole = nlogElement.GetOptionalBooleanAttribute("internalLogToConsole"' InternalLogger.LogToConsole); " is 123.
Long Statement,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,ParseNLogElement,The length of the statement  "            InternalLogger.LogToConsoleError = nlogElement.GetOptionalBooleanAttribute("internalLogToConsoleError"' InternalLogger.LogToConsoleError); " is 138.
Long Statement,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,ParseNLogElement,The length of the statement  "            InternalLogger.LogLevel = LogLevel.FromString(nlogElement.GetOptionalAttribute("internalLogLevel"' InternalLogger.LogLevel.Name)); " is 130.
Long Statement,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,ParseNLogElement,The length of the statement  "            LogManager.GlobalThreshold = LogLevel.FromString(nlogElement.GetOptionalAttribute("globalThreshold"' LogManager.GlobalThreshold.Name)); " is 135.
Long Statement,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,SetPropertyFromElement,The length of the statement  "            PropertyHelper.SetPropertyFromString(o' element.LocalName' this.ExpandVariables(element.Value)' this.configurationItemFactory); " is 127.
Long Statement,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,ConfigureObjectFromAttributes,The length of the statement  "                PropertyHelper.SetPropertyFromString(targetObject' childName' this.ExpandVariables(childValue)' this.configurationItemFactory); " is 127.
Long Statement,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,WrapWithDefaultWrapper,The length of the statement  "            InternalLogger.Debug("Wrapping target '{0}' with '{1}' and renaming to '{2}"' wrapperTargetInstance.Name' wrapperTargetInstance.GetType().Name' t.Name); " is 152.
Long Statement,NLog,LogEventInfo,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogEventInfo.cs,ToString,The length of the statement  "            return "Log Event: Logger='" + this.LoggerName + "' Level=" + this.Level + " Message='" + this.FormattedMessage + "' SequenceID=" + this.SequenceID; " is 148.
Long Statement,NLog,LogEventInfo,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogEventInfo.cs,CalcFormattedMessage,The length of the statement  "                    this.formattedMessage = string.Format(this.FormatProvider ?? CultureInfo.CurrentCulture' this.Message' this.Parameters); " is 120.
Long Statement,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,WriteToTargets,The length of the statement  "            LoggerImpl.Write(this.loggerType' this.GetTargetsForLevel(level)' LogEventInfo.Create(level' this.Name' formatProvider' message' args)' this.Factory); " is 150.
Long Statement,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,WriteToTargets,The length of the statement  "            LoggerImpl.Write(this.loggerType' this.GetTargetsForLevel(level)' LogEventInfo.Create(level' this.Name' formatProvider' value)' this.Factory); " is 142.
Long Statement,NLog,Logger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Logger.cs,WriteToTargets,The length of the statement  "            LoggerImpl.Write(this.loggerType' this.GetTargetsForLevel(level)' LogEventInfo.Create(level' this.Name' message' ex)' this.Factory); " is 132.
Long Statement,NLog.Internal,AspHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\AspHelper.cs,GetComDefaultProperty,The length of the statement  "            return o.GetType().InvokeMember(string.Empty' BindingFlags.GetProperty' null' o' new object[] { }' CultureInfo.InvariantCulture); " is 129.
Long Statement,NLog.Internal,FactoryHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FactoryHelper.cs,CreateInstance,The length of the statement  "                throw new NLogConfigurationException("Cannot access the constructor of type: " + t.FullName + ". Is the required permission granted?"); " is 135.
Long Statement,NLog.Internal,MultiFileWatcher,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\MultiFileWatcher.cs,Watch,The length of the statement  "                NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.CreationTime | NotifyFilters.Size | NotifyFilters.Security | NotifyFilters.Attributes " is 140.
Long Statement,NLog.Internal,PropertyHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\PropertyHelper.cs,SetPropertyFromString,The length of the statement  "                    throw new NotSupportedException("Parameter " + name + " of " + o.GetType().Name + " is an array and cannot be assigned a scalar value."); " is 137.
Long Statement,NLog.Internal,PropertyHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\PropertyHelper.cs,TryGetPropertyInfo,The length of the statement  "            PropertyInfo propInfo = o.GetType().GetProperty(propertyName' BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance); " is 133.
Long Statement,NLog.Internal,PropertyHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\PropertyHelper.cs,GetArrayItemType,The length of the statement  "            var arrayParameterAttribute = (ArrayParameterAttribute)Attribute.GetCustomAttribute(propInfo' typeof(ArrayParameterAttribute)); " is 127.
Long Statement,NLog.Internal,PropertyHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\PropertyHelper.cs,TryImplicitConversion,The length of the statement  "            MethodInfo operatorImplicitMethod = resultType.GetMethod("op_Implicit"' BindingFlags.Public | BindingFlags.Static' null' new Type[] { typeof(string) }' null); " is 158.
Long Statement,NLog.Internal,PropertyHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\PropertyHelper.cs,TryGetEnumValue,The length of the statement  "                    FieldInfo enumField = resultType.GetField(v.Trim()' BindingFlags.IgnoreCase | BindingFlags.Static | BindingFlags.FlattenHierarchy | BindingFlags.Public); " is 153.
Long Statement,NLog.Internal,PropertyHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\PropertyHelper.cs,TryGetEnumValue,The length of the statement  "                FieldInfo enumField = resultType.GetField(value' BindingFlags.IgnoreCase | BindingFlags.Static | BindingFlags.FlattenHierarchy | BindingFlags.Public); " is 150.
Long Statement,NLog.Internal,PropertyHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\PropertyHelper.cs,TryGetPropertyInfo,The length of the statement  "                PropertyInfo propInfo = targetType.GetProperty(propertyName' BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance); " is 132.
Long Statement,NLog.Internal,PropertyHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\PropertyHelper.cs,BuildPropertyInfoDictionary,The length of the statement  "                var arrayParameterAttribute = (ArrayParameterAttribute)Attribute.GetCustomAttribute(propInfo' typeof(ArrayParameterAttribute)); " is 127.
Long Statement,NLog.Internal.FileAppenders,BaseFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\BaseFileAppender.cs,CreateFileStream,The length of the statement  "                    if (!this.CreateFileParameters.ConcurrentWrites || !allowConcurrentWrite || i + 1 == this.CreateFileParameters.ConcurrentWriteAttempts) " is 135.
Long Statement,NLog.Internal.FileAppenders,MutexMultiProcessFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\MutexMultiProcessFileAppender.cs,GetFileInfo,The length of the statement  "            return FileInfoHelper.Helper.GetFileInfo(FileName' this.file.SafeFileHandle.DangerousGetHandle()' out lastWriteTime' out fileLength); " is 133.
Long Statement,NLog.LayoutRenderers,Log4JXmlEventLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\Log4JXmlEventLayoutRenderer.cs,Append,The length of the statement  "                xtw.WriteAttributeString("timestamp"' Convert.ToString((long)(logEvent.TimeStamp.ToUniversalTime() - log4jDateBase).TotalMilliseconds' CultureInfo.InvariantCulture)); " is 166.
Long Statement,NLog.LayoutRenderers,Log4JXmlEventLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\Log4JXmlEventLayoutRenderer.cs,Append,The length of the statement  "                xtw.WriteAttributeString("thread"' System.Threading.Thread.CurrentThread.ManagedThreadId.ToString(CultureInfo.InvariantCulture)); " is 129.
Long Statement,NLog.LayoutRenderers,Log4JXmlEventLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\Log4JXmlEventLayoutRenderer.cs,Append,The length of the statement  "                    xtw.WriteElementString("log4j"' "NDC"' dummyNamespace' string.Join(this.NdcItemSeparator' NestedDiagnosticsContext.GetAllMessages())); " is 134.
Long Statement,NLog.LayoutRenderers,Log4JXmlEventLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\Log4JXmlEventLayoutRenderer.cs,Append,The length of the statement  "                        xtw.WriteElementString("nlog"' "eventSequenceNumber"' dummyNLogNamespace' logEvent.SequenceID.ToString(CultureInfo.InvariantCulture)); " is 134.
Long Statement,NLog.LogReceiverService,NLogEvent,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogReceiverService\NLogEvent.cs,ToEventInfo,The length of the statement  "            var result = new LogEventInfo(LogLevel.FromOrdinal(this.LevelOrdinal)' loggerNamePrefix + context.Strings[this.LoggerOrdinal]' context.Strings[this.MessageOrdinal]); " is 165.
Long Statement,NLog.Targets,ColoredConsoleTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\ColoredConsoleTarget.cs,Output,The length of the statement  "                ColorizeEscapeSequences(this.ErrorStream ? Console.Error : Console.Out' message' new ColorPair(Console.ForegroundColor' Console.BackgroundColor)' new ColorPair(oldForegroundColor' oldBackgroundColor)); " is 201.
Long Statement,NLog.Targets,DatabaseTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\DatabaseTarget.cs,InitializeTarget,The length of the statement  "                    throw new NLogConfigurationException("Connection string '" + this.ConnectionStringName + "' is not declared in <connectionStrings /> section."); " is 144.
Long Statement,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,ReplaceNumber,The length of the statement  "            return pattern.Substring(0' firstPart) + Convert.ToString(value' 10).PadLeft(numDigits' '0') + pattern.Substring(lastPart); " is 123.
Long Statement,NLog.Targets,MailTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\MailTarget.cs,ProcessSingleMailMessage,The length of the statement  "                        InternalLogger.Debug("Sending mail to {0} using {1}:{2} (ssl={3})"' msg.To' client.Host' client.Port' client.EnableSsl); " is 120.
Long Statement,NLog.Targets,MailTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\MailTarget.cs,ProcessSingleMailMessage,The length of the statement  "                            InternalLogger.Trace("  Using basic authentication: Username='{0}' Password='{1}'"' username' new string('*'' password.Length)); " is 128.
Long Statement,NLog.Targets,NetworkTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\NetworkTarget.cs,ChunkedSend,The length of the statement  "                            continuation(new OverflowException("Attempted to send a message larger than MaxMessageSize (" + this.MaxMessageSize + "). Actual size was: " + buffer.Length + ". Adjust OnOverflow and MaxMessageSize parameters accordingly.")); " is 226.
Long Statement,NLog.Targets,PerformanceCounterTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\PerformanceCounterTarget.cs,Install,The length of the statement  "            var countersByCategory = this.LoggingConfiguration.AllTargets.OfType<PerformanceCounterTarget>().BucketSort(c => c.CategoryName); " is 129.
Long Statement,NLog.Targets,PerformanceCounterTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\PerformanceCounterTarget.cs,Install,The length of the statement  "                CounterCreationDataCollection ccds = GetCounterCreationDataCollection(countersByCategory[this.CategoryName]' out categoryType); " is 127.
Long Statement,NLog.Targets,PerformanceCounterTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\PerformanceCounterTarget.cs,Install,The length of the statement  "                installationContext.Debug("Creating category '{0}' with {1} counter(s) (Type: {2})"' categoryName' ccds.Count' categoryType); " is 125.
Long Statement,NLog.Targets,PerformanceCounterTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\PerformanceCounterTarget.cs,EnsureInitialized,The length of the statement  "                    InternalLogger.Error("Cannot open performance counter {0}/{1}/{2}: {3}"' this.CategoryName' this.CounterName' this.InstanceName' exception); " is 140.
Long Statement,NLog.Targets,Target,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\Target.cs,WriteAsyncLogEvents,The length of the statement  "                    wrappedEvents[i] = logEvents[i].LogEvent.WithContinuation(AsyncHelpers.PreventMultipleCalls(logEvents[i].Continuation)); " is 120.
Long Statement,NLog.Targets.Wrappers,AutoFlushTargetWrapper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\Wrappers\AutoFlushTargetWrapper.cs,Write,The length of the statement  "            this.WrappedTarget.WriteAsyncLogEvent(logEvent.LogEvent.WithContinuation(AsyncHelpers.PrecededBy(logEvent.Continuation' this.WrappedTarget.Flush))); " is 148.
Long Statement,NLog.Targets.Wrappers,FallbackGroupTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\Wrappers\FallbackGroupTarget.cs,Write,The length of the statement  "                                    InternalLogger.Debug("Fallback: target '{0}' succeeded. Returning to the first one."' this.Targets[this.currentTarget]); " is 120.
Long Statement,NLog.Targets.Wrappers,FallbackGroupTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\Wrappers\FallbackGroupTarget.cs,Write,The length of the statement  "                        InternalLogger.Warn("Fallback: target '{0}' failed. Proceeding to the next one. Error was: {1}"' this.Targets[this.currentTarget]' ex); " is 135.
Long Statement,NLog.Targets.Wrappers,RepeatingTargetWrapper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\Wrappers\RepeatingTargetWrapper.cs,Write,The length of the statement  "            AsyncHelpers.Repeat(this.RepeatCount' logEvent.Continuation' cont => this.WrappedTarget.WriteAsyncLogEvent(logEvent.LogEvent.WithContinuation(cont))); " is 150.
Long Statement,NLog.Targets.Wrappers,RetryingTargetWrapper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\Wrappers\RetryingTargetWrapper.cs,Write,The length of the statement  "                    InternalLogger.Warn("Error while writing to '{0}': {1}. Try {2}/{3}"' this.WrappedTarget' ex' retryNumber' this.RetryCount); " is 124.
Long Statement,NLog.Targets.Wrappers,SplitGroupTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\Wrappers\SplitGroupTarget.cs,Write,The length of the statement  "            AsyncHelpers.ForEachItemSequentially(this.Targets' logEvent.Continuation' (t' cont) => t.WriteAsyncLogEvent(logEvent.LogEvent.WithContinuation(cont))); " is 151.
Complex Conditional,NLog.Common,InternalLogger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Common\InternalLogger.cs,Write,The conditional expression  "String.IsNullOrEmpty(LogFile) && !LogToConsole && !LogToConsoleError && LogWriter == null"  is complex.
Complex Conditional,NLog.LayoutRenderers.Wrappers,FileSystemNormalizeLayoutRendererWrapper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\Wrappers\FileSystemNormalizeLayoutRendererWrapper.cs,IsSafeCharacter,The conditional expression  "char.IsLetterOrDigit(c) || c == '_' || c == '-' || c == '.' || c == ' '"  is complex.
Complex Conditional,NLog.Layouts,LayoutParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Layouts\LayoutParser.cs,ParseParameterName,The conditional expression  "(ch == '=' || ch == '}' || ch == ':') && nestLevel == 0"  is complex.
Magic Number,NLog.Common,InternalLogger,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Common\InternalLogger.cs,Write,The following statement contains a magic number: try              {                  string formattedMessage = message;                  if (args != null)                  {                      formattedMessage = string.Format(CultureInfo.InvariantCulture' message' args);                  }                    var builder = new StringBuilder(message.Length + 32);                  if (IncludeTimestamp)                  {                      builder.Append(CurrentTimeGetter.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"' CultureInfo.InvariantCulture));                      builder.Append(" ");                  }                    builder.Append(level.ToString());                  builder.Append(" ");                  builder.Append(formattedMessage);                  string msg = builder.ToString();                    // log to file                  var logFile = LogFile;                  if (!string.IsNullOrEmpty(logFile))                  {                      using (var textWriter = File.AppendText(logFile))                      {                          textWriter.WriteLine(msg);                      }                  }                    // log to LogWriter                  var writer = LogWriter;                  if (writer != null)                  {                      lock (lockObject)                      {                          writer.WriteLine(msg);                      }                  }                    // log to console                  if (LogToConsole)                  {                      Console.WriteLine(msg);                  }                    // log to console error                  if (LogToConsoleError)                  {                      Console.Error.WriteLine(msg);                  }              }              catch (Exception exception)              {                  if (exception.MustBeRethrown())                  {                      throw;                  }                    // we have no place to log the message to so we ignore it              }
Magic Number,NLog.Common,LogEventInfoBuffer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Common\LogEventInfoBuffer.cs,Append,The following statement contains a magic number: lock (this)              {                  // make room for additional item                  if (this.count >= this.buffer.Length)                  {                      if (this.growAsNeeded && this.buffer.Length < this.growLimit)                      {                          // create a new buffer' copy data from current                          int newLength = this.buffer.Length * 2;                          if (newLength >= this.growLimit)                          {                              newLength = this.growLimit;                          }                            // InternalLogger.Trace("Enlarging LogEventInfoBuffer from {0} to {1}"' this.buffer.Length' this.buffer.Length * 2);                          var newBuffer = new AsyncLogEventInfo[newLength];                          Array.Copy(this.buffer' 0' newBuffer' 0' this.buffer.Length);                          this.buffer = newBuffer;                      }                      else                      {                          // lose the oldest item                          this.getPointer = this.getPointer + 1;                      }                  }                    // put the item                  this.putPointer = this.putPointer % this.buffer.Length;                  this.buffer[this.putPointer] = eventInfo;                  this.putPointer = this.putPointer + 1;                  this.count++;                  if (this.count >= this.buffer.Length)                  {                      this.count = this.buffer.Length;                  }                    return this.count;              }
Magic Number,NLog.Conditions,ConditionTokenizer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch >= 32 && ch < 128)              {                  ConditionTokenType tt = charIndexToTokenType[ch];                    if (tt != ConditionTokenType.Invalid)                  {                      this.TokenType = tt;                      this.TokenValue = new string(ch' 1);                      this.ReadChar();                      return;                  }                    throw new ConditionParseException("Invalid punctuation: " + ch);              }
Magic Number,NLog.Conditions,ConditionTokenizer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch >= 32 && ch < 128)              {                  ConditionTokenType tt = charIndexToTokenType[ch];                    if (tt != ConditionTokenType.Invalid)                  {                      this.TokenType = tt;                      this.TokenValue = new string(ch' 1);                      this.ReadChar();                      return;                  }                    throw new ConditionParseException("Invalid punctuation: " + ch);              }
Magic Number,NLog.Conditions,ConditionTokenizer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Conditions\ConditionTokenizer.cs,BuildCharIndexToTokenType,The following statement contains a magic number: var result = new ConditionTokenType[128];
Magic Number,NLog.Conditions,ConditionTokenizer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Conditions\ConditionTokenizer.cs,BuildCharIndexToTokenType,The following statement contains a magic number: for (int i = 0; i < 128; ++i)              {                  result[i] = ConditionTokenType.Invalid;              }
Magic Number,NLog,LogEventInfo,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogEventInfo.cs,NeedToPreformatMessage,The following statement contains a magic number: if (parameters.Length > 3)              {                  // too many parameters' too costly to check                  return true;              }
Magic Number,NLog,LogEventInfo,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogEventInfo.cs,NeedToPreformatMessage,The following statement contains a magic number: if (parameters.Length >= 2)              {                  if (!IsSafeToDeferFormatting(parameters[1]))                  {                      return true;                  }              }
Magic Number,NLog,LogEventInfo,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogEventInfo.cs,NeedToPreformatMessage,The following statement contains a magic number: if (parameters.Length >= 3)              {                  if (!IsSafeToDeferFormatting(parameters[2]))                  {                      return true;                  }              }
Magic Number,NLog,LogEventInfo,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogEventInfo.cs,NeedToPreformatMessage,The following statement contains a magic number: if (parameters.Length >= 3)              {                  if (!IsSafeToDeferFormatting(parameters[2]))                  {                      return true;                  }              }
Magic Number,NLog,LogLevel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogLevel.cs,FromOrdinal,The following statement contains a magic number: switch (ordinal)              {                  case 0:                      return Trace;                  case 1:                      return Debug;                  case 2:                      return Info;                  case 3:                      return Warn;                  case 4:                      return Error;                  case 5:                      return Fatal;                  case 6:                      return Off;                    default:                      throw new ArgumentException("Invalid ordinal.");              }
Magic Number,NLog,LogLevel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogLevel.cs,FromOrdinal,The following statement contains a magic number: switch (ordinal)              {                  case 0:                      return Trace;                  case 1:                      return Debug;                  case 2:                      return Info;                  case 3:                      return Warn;                  case 4:                      return Error;                  case 5:                      return Fatal;                  case 6:                      return Off;                    default:                      throw new ArgumentException("Invalid ordinal.");              }
Magic Number,NLog,LogLevel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogLevel.cs,FromOrdinal,The following statement contains a magic number: switch (ordinal)              {                  case 0:                      return Trace;                  case 1:                      return Debug;                  case 2:                      return Info;                  case 3:                      return Warn;                  case 4:                      return Error;                  case 5:                      return Fatal;                  case 6:                      return Off;                    default:                      throw new ArgumentException("Invalid ordinal.");              }
Magic Number,NLog,LogLevel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogLevel.cs,FromOrdinal,The following statement contains a magic number: switch (ordinal)              {                  case 0:                      return Trace;                  case 1:                      return Debug;                  case 2:                      return Info;                  case 3:                      return Warn;                  case 4:                      return Error;                  case 5:                      return Fatal;                  case 6:                      return Off;                    default:                      throw new ArgumentException("Invalid ordinal.");              }
Magic Number,NLog,LogLevel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LogLevel.cs,FromOrdinal,The following statement contains a magic number: switch (ordinal)              {                  case 0:                      return Trace;                  case 1:                      return Debug;                  case 2:                      return Info;                  case 3:                      return Warn;                  case 4:                      return Error;                  case 5:                      return Fatal;                  case 6:                      return Off;                    default:                      throw new ArgumentException("Invalid ordinal.");              }
Magic Number,NLog.Internal,PlatformDetector,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\PlatformDetector.cs,GetCurrentRuntimeOS,The following statement contains a magic number: if ((int)platformID == 4 || (int)platformID == 128)              {                  return RuntimeOS.Unix;              }
Magic Number,NLog.Internal,PlatformDetector,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\PlatformDetector.cs,GetCurrentRuntimeOS,The following statement contains a magic number: if ((int)platformID == 4 || (int)platformID == 128)              {                  return RuntimeOS.Unix;              }
Magic Number,NLog.Internal,PlatformDetector,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\PlatformDetector.cs,GetCurrentRuntimeOS,The following statement contains a magic number: if ((int)platformID == 3)              {                  return RuntimeOS.WindowsCE;              }
Magic Number,NLog.Internal,UrlHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\UrlHelper.cs,UrlEncode,The following statement contains a magic number: StringBuilder result = new StringBuilder(str.Length + 20);
Magic Number,NLog.Internal,UrlHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\UrlHelper.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < str.Length; ++i)              {                  char ch = str[i];                    if (ch == ' ' && spaceAsPlus)                  {                      result.Append('+');                  }                  else if (IsSafeUrlCharacter(ch))                  {                      result.Append(ch);                  }                  else if (ch < 256)                  {                      result.Append('%');                      result.Append(hexChars[(ch >> 4) & 0xF]);                      result.Append(hexChars[(ch >> 0) & 0xF]);                  }                  else                  {                      result.Append('%');                      result.Append('u');                      result.Append(hexChars[(ch >> 12) & 0xF]);                      result.Append(hexChars[(ch >> 8) & 0xF]);                      result.Append(hexChars[(ch >> 4) & 0xF]);                      result.Append(hexChars[(ch >> 0) & 0xF]);                  }              }
Magic Number,NLog.Internal,UrlHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\UrlHelper.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < str.Length; ++i)              {                  char ch = str[i];                    if (ch == ' ' && spaceAsPlus)                  {                      result.Append('+');                  }                  else if (IsSafeUrlCharacter(ch))                  {                      result.Append(ch);                  }                  else if (ch < 256)                  {                      result.Append('%');                      result.Append(hexChars[(ch >> 4) & 0xF]);                      result.Append(hexChars[(ch >> 0) & 0xF]);                  }                  else                  {                      result.Append('%');                      result.Append('u');                      result.Append(hexChars[(ch >> 12) & 0xF]);                      result.Append(hexChars[(ch >> 8) & 0xF]);                      result.Append(hexChars[(ch >> 4) & 0xF]);                      result.Append(hexChars[(ch >> 0) & 0xF]);                  }              }
Magic Number,NLog.Internal,UrlHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\UrlHelper.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < str.Length; ++i)              {                  char ch = str[i];                    if (ch == ' ' && spaceAsPlus)                  {                      result.Append('+');                  }                  else if (IsSafeUrlCharacter(ch))                  {                      result.Append(ch);                  }                  else if (ch < 256)                  {                      result.Append('%');                      result.Append(hexChars[(ch >> 4) & 0xF]);                      result.Append(hexChars[(ch >> 0) & 0xF]);                  }                  else                  {                      result.Append('%');                      result.Append('u');                      result.Append(hexChars[(ch >> 12) & 0xF]);                      result.Append(hexChars[(ch >> 8) & 0xF]);                      result.Append(hexChars[(ch >> 4) & 0xF]);                      result.Append(hexChars[(ch >> 0) & 0xF]);                  }              }
Magic Number,NLog.Internal,UrlHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\UrlHelper.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < str.Length; ++i)              {                  char ch = str[i];                    if (ch == ' ' && spaceAsPlus)                  {                      result.Append('+');                  }                  else if (IsSafeUrlCharacter(ch))                  {                      result.Append(ch);                  }                  else if (ch < 256)                  {                      result.Append('%');                      result.Append(hexChars[(ch >> 4) & 0xF]);                      result.Append(hexChars[(ch >> 0) & 0xF]);                  }                  else                  {                      result.Append('%');                      result.Append('u');                      result.Append(hexChars[(ch >> 12) & 0xF]);                      result.Append(hexChars[(ch >> 8) & 0xF]);                      result.Append(hexChars[(ch >> 4) & 0xF]);                      result.Append(hexChars[(ch >> 0) & 0xF]);                  }              }
Magic Number,NLog.Internal,UrlHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\UrlHelper.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < str.Length; ++i)              {                  char ch = str[i];                    if (ch == ' ' && spaceAsPlus)                  {                      result.Append('+');                  }                  else if (IsSafeUrlCharacter(ch))                  {                      result.Append(ch);                  }                  else if (ch < 256)                  {                      result.Append('%');                      result.Append(hexChars[(ch >> 4) & 0xF]);                      result.Append(hexChars[(ch >> 0) & 0xF]);                  }                  else                  {                      result.Append('%');                      result.Append('u');                      result.Append(hexChars[(ch >> 12) & 0xF]);                      result.Append(hexChars[(ch >> 8) & 0xF]);                      result.Append(hexChars[(ch >> 4) & 0xF]);                      result.Append(hexChars[(ch >> 0) & 0xF]);                  }              }
Magic Number,NLog.Internal,Win32FileInfoHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\Win32FileInfoHelper.cs,GetFileInfo,The following statement contains a magic number: if (Win32FileNativeMethods.GetFileInformationByHandle(fileHandle' out fi))              {                  lastWriteTime = DateTime.FromFileTime(fi.ftLastWriteTime);                  fileLength = fi.nFileSizeLow + (((long)fi.nFileSizeHigh) << 32);                  return true;              }              else              {                  lastWriteTime = DateTime.MinValue;                  fileLength = -1;                  return false;              }
Magic Number,NLog.Internal,Win32ThreadIDHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\Win32ThreadIDHelper.cs,Win32ThreadIDHelper,The following statement contains a magic number: var sb = new StringBuilder(512);
Magic Number,NLog.Internal.FileAppenders,BaseFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\BaseFileAppender.cs,CreateFileStream,The following statement contains a magic number: for (int i = 0; i < this.CreateFileParameters.ConcurrentWriteAttempts; ++i)              {                  try                  {                      try                      {                          return this.TryCreateFileStream(allowConcurrentWrite);                      }                      catch (DirectoryNotFoundException)                      {                          if (!this.CreateFileParameters.CreateDirs)                          {                              throw;                          }                            Directory.CreateDirectory(Path.GetDirectoryName(this.FileName));                          return this.TryCreateFileStream(allowConcurrentWrite);                      }                  }                  catch (IOException)                  {                      if (!this.CreateFileParameters.ConcurrentWrites || !allowConcurrentWrite || i + 1 == this.CreateFileParameters.ConcurrentWriteAttempts)                      {                          throw; // rethrow                      }                        int actualDelay = this.random.Next(currentDelay);                      InternalLogger.Warn("Attempt #{0} to open {1} failed. Sleeping for {2}ms"' i' this.FileName' actualDelay);                      currentDelay *= 2;                      System.Threading.Thread.Sleep(actualDelay);                  }              }
Magic Number,NLog.Internal.FileAppenders,UnixMultiProcessFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\UnixMultiProcessFileAppender.cs,UnixMultiProcessFileAppender,The following statement contains a magic number: int fd = Syscall.open(fileName' OpenFlags.O_CREAT | OpenFlags.O_WRONLY | OpenFlags.O_APPEND' (FilePermissions)(6 | (6 << 3) | (6 << 6)));
Magic Number,NLog.Internal.FileAppenders,UnixMultiProcessFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\UnixMultiProcessFileAppender.cs,UnixMultiProcessFileAppender,The following statement contains a magic number: int fd = Syscall.open(fileName' OpenFlags.O_CREAT | OpenFlags.O_WRONLY | OpenFlags.O_APPEND' (FilePermissions)(6 | (6 << 3) | (6 << 6)));
Magic Number,NLog.Internal.FileAppenders,UnixMultiProcessFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\UnixMultiProcessFileAppender.cs,UnixMultiProcessFileAppender,The following statement contains a magic number: int fd = Syscall.open(fileName' OpenFlags.O_CREAT | OpenFlags.O_WRONLY | OpenFlags.O_APPEND' (FilePermissions)(6 | (6 << 3) | (6 << 6)));
Magic Number,NLog.Internal.FileAppenders,UnixMultiProcessFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\UnixMultiProcessFileAppender.cs,UnixMultiProcessFileAppender,The following statement contains a magic number: int fd = Syscall.open(fileName' OpenFlags.O_CREAT | OpenFlags.O_WRONLY | OpenFlags.O_APPEND' (FilePermissions)(6 | (6 << 3) | (6 << 6)));
Magic Number,NLog.Internal.FileAppenders,UnixMultiProcessFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\UnixMultiProcessFileAppender.cs,UnixMultiProcessFileAppender,The following statement contains a magic number: int fd = Syscall.open(fileName' OpenFlags.O_CREAT | OpenFlags.O_WRONLY | OpenFlags.O_APPEND' (FilePermissions)(6 | (6 << 3) | (6 << 6)));
Magic Number,NLog.Internal.FileAppenders,UnixMultiProcessFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\UnixMultiProcessFileAppender.cs,UnixMultiProcessFileAppender,The following statement contains a magic number: if (fd == -1)              {                  if (Stdlib.GetLastError() == Errno.ENOENT && parameters.CreateDirs)                  {                      string dirName = Path.GetDirectoryName(fileName);                      if (!Directory.Exists(dirName) && parameters.CreateDirs)                          Directory.CreateDirectory(dirName);                                            fd = Syscall.open(fileName' OpenFlags.O_CREAT | OpenFlags.O_WRONLY | OpenFlags.O_APPEND' (FilePermissions)(6 | (6 << 3) | (6 << 6)));                  }              }
Magic Number,NLog.Internal.FileAppenders,UnixMultiProcessFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\UnixMultiProcessFileAppender.cs,UnixMultiProcessFileAppender,The following statement contains a magic number: if (fd == -1)              {                  if (Stdlib.GetLastError() == Errno.ENOENT && parameters.CreateDirs)                  {                      string dirName = Path.GetDirectoryName(fileName);                      if (!Directory.Exists(dirName) && parameters.CreateDirs)                          Directory.CreateDirectory(dirName);                                            fd = Syscall.open(fileName' OpenFlags.O_CREAT | OpenFlags.O_WRONLY | OpenFlags.O_APPEND' (FilePermissions)(6 | (6 << 3) | (6 << 6)));                  }              }
Magic Number,NLog.Internal.FileAppenders,UnixMultiProcessFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\UnixMultiProcessFileAppender.cs,UnixMultiProcessFileAppender,The following statement contains a magic number: if (fd == -1)              {                  if (Stdlib.GetLastError() == Errno.ENOENT && parameters.CreateDirs)                  {                      string dirName = Path.GetDirectoryName(fileName);                      if (!Directory.Exists(dirName) && parameters.CreateDirs)                          Directory.CreateDirectory(dirName);                                            fd = Syscall.open(fileName' OpenFlags.O_CREAT | OpenFlags.O_WRONLY | OpenFlags.O_APPEND' (FilePermissions)(6 | (6 << 3) | (6 << 6)));                  }              }
Magic Number,NLog.Internal.FileAppenders,UnixMultiProcessFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\UnixMultiProcessFileAppender.cs,UnixMultiProcessFileAppender,The following statement contains a magic number: if (fd == -1)              {                  if (Stdlib.GetLastError() == Errno.ENOENT && parameters.CreateDirs)                  {                      string dirName = Path.GetDirectoryName(fileName);                      if (!Directory.Exists(dirName) && parameters.CreateDirs)                          Directory.CreateDirectory(dirName);                                            fd = Syscall.open(fileName' OpenFlags.O_CREAT | OpenFlags.O_WRONLY | OpenFlags.O_APPEND' (FilePermissions)(6 | (6 << 3) | (6 << 6)));                  }              }
Magic Number,NLog.Internal.FileAppenders,UnixMultiProcessFileAppender,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Internal\FileAppenders\UnixMultiProcessFileAppender.cs,UnixMultiProcessFileAppender,The following statement contains a magic number: if (fd == -1)              {                  if (Stdlib.GetLastError() == Errno.ENOENT && parameters.CreateDirs)                  {                      string dirName = Path.GetDirectoryName(fileName);                      if (!Directory.Exists(dirName) && parameters.CreateDirs)                          Directory.CreateDirectory(dirName);                                            fd = Syscall.open(fileName' OpenFlags.O_CREAT | OpenFlags.O_WRONLY | OpenFlags.O_APPEND' (FilePermissions)(6 | (6 << 3) | (6 << 6)));                  }              }
Magic Number,NLog.LayoutRenderers,ExceptionLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\ExceptionLayoutRenderer.cs,Append,The following statement contains a magic number: if (logEvent.Exception != null)              {                  var sb2 = new StringBuilder(128);                  string separator = string.Empty;                    foreach (ExceptionDataTarget targetRenderFunc in this.exceptionDataTargets)                  {                      sb2.Append(separator);                      targetRenderFunc(sb2' logEvent.Exception);                      separator = this.Separator;                  }                    Exception currentException = logEvent.Exception.InnerException;                  int currentLevel = 0;                  while (currentException != null && currentLevel < this.MaxInnerExceptionLevel)                  {                      // separate inner exceptions                      sb2.Append(this.InnerExceptionSeparator);                        separator = string.Empty;                      foreach (ExceptionDataTarget targetRenderFunc in this.innerExceptionDataTargets ?? this.exceptionDataTargets)                      {                          sb2.Append(separator);                          targetRenderFunc(sb2' currentException);                          separator = this.Separator;                      }                        currentException = currentException.InnerException;                      currentLevel++;                  }                    builder.Append(sb2.ToString());              }
Magic Number,NLog.LayoutRenderers,LongDateLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\LongDateLayoutRenderer.cs,Append,The following statement contains a magic number: Append4DigitsZeroPadded(builder' (int)(dt.Ticks % 10000000) / 1000);
Magic Number,NLog.LayoutRenderers,LongDateLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\LongDateLayoutRenderer.cs,Append,The following statement contains a magic number: Append4DigitsZeroPadded(builder' (int)(dt.Ticks % 10000000) / 1000);
Magic Number,NLog.LayoutRenderers,LongDateLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\LongDateLayoutRenderer.cs,Append2DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)((number / 10) + '0'));
Magic Number,NLog.LayoutRenderers,LongDateLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\LongDateLayoutRenderer.cs,Append2DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)((number % 10) + '0'));
Magic Number,NLog.LayoutRenderers,LongDateLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\LongDateLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 1000) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,LongDateLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\LongDateLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 1000) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,LongDateLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\LongDateLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 100) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,LongDateLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\LongDateLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 100) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,LongDateLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\LongDateLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 10) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,LongDateLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\LongDateLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 10) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,LongDateLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\LongDateLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 1) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,ProcessTimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\ProcessTimeLayoutRenderer.cs,Append,The following statement contains a magic number: if (ts.Hours < 10)              {                  builder.Append('0');              }
Magic Number,NLog.LayoutRenderers,ProcessTimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\ProcessTimeLayoutRenderer.cs,Append,The following statement contains a magic number: if (ts.Minutes < 10)              {                  builder.Append('0');              }
Magic Number,NLog.LayoutRenderers,ProcessTimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\ProcessTimeLayoutRenderer.cs,Append,The following statement contains a magic number: if (ts.Seconds < 10)              {                  builder.Append('0');              }
Magic Number,NLog.LayoutRenderers,ProcessTimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\ProcessTimeLayoutRenderer.cs,Append,The following statement contains a magic number: if (ts.Milliseconds < 1000)              {                  builder.Append('0');              }
Magic Number,NLog.LayoutRenderers,ProcessTimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\ProcessTimeLayoutRenderer.cs,Append,The following statement contains a magic number: if (ts.Milliseconds < 100)              {                  builder.Append('0');              }
Magic Number,NLog.LayoutRenderers,ProcessTimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\ProcessTimeLayoutRenderer.cs,Append,The following statement contains a magic number: if (ts.Milliseconds < 10)              {                  builder.Append('0');              }
Magic Number,NLog.LayoutRenderers,QueryPerformanceCounterLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\QueryPerformanceCounterLayoutRenderer.cs,QueryPerformanceCounterLayoutRenderer,The following statement contains a magic number: this.Precision = 4;
Magic Number,NLog.LayoutRenderers,StackTraceLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\StackTraceLayoutRenderer.cs,StackTraceLayoutRenderer,The following statement contains a magic number: this.TopFrames = 3;
Magic Number,NLog.LayoutRenderers,TimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\TimeLayoutRenderer.cs,Append,The following statement contains a magic number: Append4DigitsZeroPadded(builder' (int)(dt.Ticks % 10000000) / 1000);
Magic Number,NLog.LayoutRenderers,TimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\TimeLayoutRenderer.cs,Append,The following statement contains a magic number: Append4DigitsZeroPadded(builder' (int)(dt.Ticks % 10000000) / 1000);
Magic Number,NLog.LayoutRenderers,TimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\TimeLayoutRenderer.cs,Append2DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)((number / 10) + '0'));
Magic Number,NLog.LayoutRenderers,TimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\TimeLayoutRenderer.cs,Append2DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)((number % 10) + '0'));
Magic Number,NLog.LayoutRenderers,TimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\TimeLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 1000) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,TimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\TimeLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 1000) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,TimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\TimeLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 100) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,TimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\TimeLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 100) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,TimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\TimeLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 10) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,TimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\TimeLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 10) % 10) + '0'));
Magic Number,NLog.LayoutRenderers,TimeLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\TimeLayoutRenderer.cs,Append4DigitsZeroPadded,The following statement contains a magic number: builder.Append((char)(((number / 1) % 10) + '0'));
Magic Number,NLog.Targets,ColoredConsoleTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\ColoredConsoleTarget.cs,ColorizeEscapeSequences,The following statement contains a magic number: while (p0 < message.Length)              {                  int p1 = p0;                  while (p1 < message.Length && message[p1] >= 32)                  {                      p1++;                  }                    // text                  if (p1 != p0)                  {                      output.Write(message.Substring(p0' p1 - p0));                  }                    if (p1 >= message.Length)                  {                      p0 = p1;                      break;                  }                    // control characters                  char c1 = message[p1];                  char c2 = (char)0;                    if (p1 + 1 < message.Length)                  {                      c2 = message[p1 + 1];                  }                    if (c1 == '\a' && c2 == '\a')                  {                      output.Write('\a');                      p0 = p1 + 2;                      continue;                  }                    if (c1 == '\r' || c1 == '\n')                  {                      Console.ForegroundColor = defaultColor.ForegroundColor;                      Console.BackgroundColor = defaultColor.BackgroundColor;                      output.Write(c1);                      Console.ForegroundColor = colorStack.Peek().ForegroundColor;                      Console.BackgroundColor = colorStack.Peek().BackgroundColor;                      p0 = p1 + 1;                      continue;                  }                    if (c1 == '\a')                  {                      if (c2 == 'X')                      {                          colorStack.Pop();                          Console.ForegroundColor = colorStack.Peek().ForegroundColor;                          Console.BackgroundColor = colorStack.Peek().BackgroundColor;                          p0 = p1 + 2;                          continue;                      }                        var foreground = (ConsoleOutputColor)(c2 - 'A');                      var background = (ConsoleOutputColor)(message[p1 + 2] - 'A');                        if (foreground != ConsoleOutputColor.NoChange)                      {                          Console.ForegroundColor = (ConsoleColor)foreground;                      }                        if (background != ConsoleOutputColor.NoChange)                      {                          Console.BackgroundColor = (ConsoleColor)background;                      }                        colorStack.Push(new ColorPair(Console.ForegroundColor' Console.BackgroundColor));                      p0 = p1 + 3;                      continue;                  }                    output.Write(c1);                  p0 = p1 + 1;              }
Magic Number,NLog.Targets,ColoredConsoleTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\ColoredConsoleTarget.cs,ColorizeEscapeSequences,The following statement contains a magic number: while (p0 < message.Length)              {                  int p1 = p0;                  while (p1 < message.Length && message[p1] >= 32)                  {                      p1++;                  }                    // text                  if (p1 != p0)                  {                      output.Write(message.Substring(p0' p1 - p0));                  }                    if (p1 >= message.Length)                  {                      p0 = p1;                      break;                  }                    // control characters                  char c1 = message[p1];                  char c2 = (char)0;                    if (p1 + 1 < message.Length)                  {                      c2 = message[p1 + 1];                  }                    if (c1 == '\a' && c2 == '\a')                  {                      output.Write('\a');                      p0 = p1 + 2;                      continue;                  }                    if (c1 == '\r' || c1 == '\n')                  {                      Console.ForegroundColor = defaultColor.ForegroundColor;                      Console.BackgroundColor = defaultColor.BackgroundColor;                      output.Write(c1);                      Console.ForegroundColor = colorStack.Peek().ForegroundColor;                      Console.BackgroundColor = colorStack.Peek().BackgroundColor;                      p0 = p1 + 1;                      continue;                  }                    if (c1 == '\a')                  {                      if (c2 == 'X')                      {                          colorStack.Pop();                          Console.ForegroundColor = colorStack.Peek().ForegroundColor;                          Console.BackgroundColor = colorStack.Peek().BackgroundColor;                          p0 = p1 + 2;                          continue;                      }                        var foreground = (ConsoleOutputColor)(c2 - 'A');                      var background = (ConsoleOutputColor)(message[p1 + 2] - 'A');                        if (foreground != ConsoleOutputColor.NoChange)                      {                          Console.ForegroundColor = (ConsoleColor)foreground;                      }                        if (background != ConsoleOutputColor.NoChange)                      {                          Console.BackgroundColor = (ConsoleColor)background;                      }                        colorStack.Push(new ColorPair(Console.ForegroundColor' Console.BackgroundColor));                      p0 = p1 + 3;                      continue;                  }                    output.Write(c1);                  p0 = p1 + 1;              }
Magic Number,NLog.Targets,ColoredConsoleTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\ColoredConsoleTarget.cs,ColorizeEscapeSequences,The following statement contains a magic number: while (p0 < message.Length)              {                  int p1 = p0;                  while (p1 < message.Length && message[p1] >= 32)                  {                      p1++;                  }                    // text                  if (p1 != p0)                  {                      output.Write(message.Substring(p0' p1 - p0));                  }                    if (p1 >= message.Length)                  {                      p0 = p1;                      break;                  }                    // control characters                  char c1 = message[p1];                  char c2 = (char)0;                    if (p1 + 1 < message.Length)                  {                      c2 = message[p1 + 1];                  }                    if (c1 == '\a' && c2 == '\a')                  {                      output.Write('\a');                      p0 = p1 + 2;                      continue;                  }                    if (c1 == '\r' || c1 == '\n')                  {                      Console.ForegroundColor = defaultColor.ForegroundColor;                      Console.BackgroundColor = defaultColor.BackgroundColor;                      output.Write(c1);                      Console.ForegroundColor = colorStack.Peek().ForegroundColor;                      Console.BackgroundColor = colorStack.Peek().BackgroundColor;                      p0 = p1 + 1;                      continue;                  }                    if (c1 == '\a')                  {                      if (c2 == 'X')                      {                          colorStack.Pop();                          Console.ForegroundColor = colorStack.Peek().ForegroundColor;                          Console.BackgroundColor = colorStack.Peek().BackgroundColor;                          p0 = p1 + 2;                          continue;                      }                        var foreground = (ConsoleOutputColor)(c2 - 'A');                      var background = (ConsoleOutputColor)(message[p1 + 2] - 'A');                        if (foreground != ConsoleOutputColor.NoChange)                      {                          Console.ForegroundColor = (ConsoleColor)foreground;                      }                        if (background != ConsoleOutputColor.NoChange)                      {                          Console.BackgroundColor = (ConsoleColor)background;                      }                        colorStack.Push(new ColorPair(Console.ForegroundColor' Console.BackgroundColor));                      p0 = p1 + 3;                      continue;                  }                    output.Write(c1);                  p0 = p1 + 1;              }
Magic Number,NLog.Targets,ColoredConsoleTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\ColoredConsoleTarget.cs,ColorizeEscapeSequences,The following statement contains a magic number: while (p0 < message.Length)              {                  int p1 = p0;                  while (p1 < message.Length && message[p1] >= 32)                  {                      p1++;                  }                    // text                  if (p1 != p0)                  {                      output.Write(message.Substring(p0' p1 - p0));                  }                    if (p1 >= message.Length)                  {                      p0 = p1;                      break;                  }                    // control characters                  char c1 = message[p1];                  char c2 = (char)0;                    if (p1 + 1 < message.Length)                  {                      c2 = message[p1 + 1];                  }                    if (c1 == '\a' && c2 == '\a')                  {                      output.Write('\a');                      p0 = p1 + 2;                      continue;                  }                    if (c1 == '\r' || c1 == '\n')                  {                      Console.ForegroundColor = defaultColor.ForegroundColor;                      Console.BackgroundColor = defaultColor.BackgroundColor;                      output.Write(c1);                      Console.ForegroundColor = colorStack.Peek().ForegroundColor;                      Console.BackgroundColor = colorStack.Peek().BackgroundColor;                      p0 = p1 + 1;                      continue;                  }                    if (c1 == '\a')                  {                      if (c2 == 'X')                      {                          colorStack.Pop();                          Console.ForegroundColor = colorStack.Peek().ForegroundColor;                          Console.BackgroundColor = colorStack.Peek().BackgroundColor;                          p0 = p1 + 2;                          continue;                      }                        var foreground = (ConsoleOutputColor)(c2 - 'A');                      var background = (ConsoleOutputColor)(message[p1 + 2] - 'A');                        if (foreground != ConsoleOutputColor.NoChange)                      {                          Console.ForegroundColor = (ConsoleColor)foreground;                      }                        if (background != ConsoleOutputColor.NoChange)                      {                          Console.BackgroundColor = (ConsoleColor)background;                      }                        colorStack.Push(new ColorPair(Console.ForegroundColor' Console.BackgroundColor));                      p0 = p1 + 3;                      continue;                  }                    output.Write(c1);                  p0 = p1 + 1;              }
Magic Number,NLog.Targets,ColoredConsoleTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\ColoredConsoleTarget.cs,ColorizeEscapeSequences,The following statement contains a magic number: while (p0 < message.Length)              {                  int p1 = p0;                  while (p1 < message.Length && message[p1] >= 32)                  {                      p1++;                  }                    // text                  if (p1 != p0)                  {                      output.Write(message.Substring(p0' p1 - p0));                  }                    if (p1 >= message.Length)                  {                      p0 = p1;                      break;                  }                    // control characters                  char c1 = message[p1];                  char c2 = (char)0;                    if (p1 + 1 < message.Length)                  {                      c2 = message[p1 + 1];                  }                    if (c1 == '\a' && c2 == '\a')                  {                      output.Write('\a');                      p0 = p1 + 2;                      continue;                  }                    if (c1 == '\r' || c1 == '\n')                  {                      Console.ForegroundColor = defaultColor.ForegroundColor;                      Console.BackgroundColor = defaultColor.BackgroundColor;                      output.Write(c1);                      Console.ForegroundColor = colorStack.Peek().ForegroundColor;                      Console.BackgroundColor = colorStack.Peek().BackgroundColor;                      p0 = p1 + 1;                      continue;                  }                    if (c1 == '\a')                  {                      if (c2 == 'X')                      {                          colorStack.Pop();                          Console.ForegroundColor = colorStack.Peek().ForegroundColor;                          Console.BackgroundColor = colorStack.Peek().BackgroundColor;                          p0 = p1 + 2;                          continue;                      }                        var foreground = (ConsoleOutputColor)(c2 - 'A');                      var background = (ConsoleOutputColor)(message[p1 + 2] - 'A');                        if (foreground != ConsoleOutputColor.NoChange)                      {                          Console.ForegroundColor = (ConsoleColor)foreground;                      }                        if (background != ConsoleOutputColor.NoChange)                      {                          Console.BackgroundColor = (ConsoleColor)background;                      }                        colorStack.Push(new ColorPair(Console.ForegroundColor' Console.BackgroundColor));                      p0 = p1 + 3;                      continue;                  }                    output.Write(c1);                  p0 = p1 + 1;              }
Magic Number,NLog.Targets,EventLogTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\EventLogTarget.cs,Write,The following statement contains a magic number: if (message.Length > 16384)              {                  // limitation of EventLog API                  message = message.Substring(0' 16384);              }
Magic Number,NLog.Targets,EventLogTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\EventLogTarget.cs,Write,The following statement contains a magic number: if (message.Length > 16384)              {                  // limitation of EventLog API                  message = message.Substring(0' 16384);              }
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,FileTarget,The following statement contains a magic number: this.MaxArchiveFiles = 9;
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,FileTarget,The following statement contains a magic number: this.ConcurrentWriteAttempts = 10;
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,FileTarget,The following statement contains a magic number: this.BufferSize = 32768;
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,FileTarget,The following statement contains a magic number: this.OpenFileCacheSize = 5;
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,CleanupInitializedFiles,The following statement contains a magic number: this.CleanupInitializedFiles(DateTime.Now.AddDays(-2));
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,InitializeTarget,The following statement contains a magic number: if ((this.OpenFileCacheSize > 0 || this.EnableFileDelete) && this.OpenFileCacheTimeout > 0)              {                  this.autoClosingTimer = new Timer(                      this.AutoClosingTimerCallback'                      null'                      this.OpenFileCacheTimeout * 1000'                      this.OpenFileCacheTimeout * 1000);              }
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,InitializeTarget,The following statement contains a magic number: if ((this.OpenFileCacheSize > 0 || this.EnableFileDelete) && this.OpenFileCacheTimeout > 0)              {                  this.autoClosingTimer = new Timer(                      this.AutoClosingTimerCallback'                      null'                      this.OpenFileCacheTimeout * 1000'                      this.OpenFileCacheTimeout * 1000);              }
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,ReplaceNumber,The following statement contains a magic number: int lastPart = pattern.IndexOf("#}"' StringComparison.Ordinal) + 2;
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,ReplaceNumber,The following statement contains a magic number: int numDigits = lastPart - firstPart - 2;
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,ReplaceNumber,The following statement contains a magic number: return pattern.Substring(0' firstPart) + Convert.ToString(value' 10).PadLeft(numDigits' '0') + pattern.Substring(lastPart);
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,SequentialArchive,The following statement contains a magic number: int lastPart = baseNamePattern.IndexOf("#}"' StringComparison.Ordinal) + 2;
Magic Number,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,WriteToFile,The following statement contains a magic number: if (!justData)              {                  if (!this.initializedFiles.ContainsKey(fileName))                  {                      if (this.DeleteOldFileOnStartup)                      {                          try                          {                              File.Delete(fileName);                          }                          catch (Exception exception)                          {                              if (exception.MustBeRethrown())                              {                                  throw;                              }                                InternalLogger.Warn("Unable to delete old log file '{0}': {1}"' fileName' exception);                          }                      }                        this.initializedFiles[fileName] = DateTime.Now;                      this.initializedFilesCounter++;                      writeHeader = true;                        if (this.initializedFilesCounter >= 100)                      {                          this.initializedFilesCounter = 0;                          this.CleanupInitializedFiles();                      }                  }                    this.initializedFiles[fileName] = DateTime.Now;              }
Magic Number,NLog.Targets,MailTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\MailTarget.cs,MailTarget,The following statement contains a magic number: this.SmtpPort = 25;
Magic Number,NLog.Targets,NetworkTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\NetworkTarget.cs,NetworkTarget,The following statement contains a magic number: this.MaxMessageSize = 65000;
Magic Number,NLog.Targets,NetworkTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\NetworkTarget.cs,NetworkTarget,The following statement contains a magic number: this.ConnectionCacheSize = 5;
Magic Number,NLog.Targets.Wrappers,AsyncTargetWrapper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\Wrappers\AsyncTargetWrapper.cs,AsyncTargetWrapper,The following statement contains a magic number: this.RequestQueue = new AsyncRequestQueue(10000' AsyncTargetWrapperOverflowAction.Discard);
Magic Number,NLog.Targets.Wrappers,AsyncTargetWrapper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\Wrappers\AsyncTargetWrapper.cs,AsyncTargetWrapper,The following statement contains a magic number: this.TimeToSleepBetweenBatches = 50;
Magic Number,NLog.Targets.Wrappers,AsyncTargetWrapper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\Wrappers\AsyncTargetWrapper.cs,AsyncTargetWrapper,The following statement contains a magic number: this.BatchSize = 100;
Duplicate Code,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,InitializeTarget,The method contains a code clone-set at the following line numbers (starting from the method definition): ((11' 37)' (42' 68))
Missing Default,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,ParseTopLevel,The following switch statement is missing a default case: switch (content.LocalName.ToUpper(CultureInfo.InvariantCulture))              {                  case "CONFIGURATION":                      this.ParseConfigurationElement(content' baseDirectory);                      break;                    case "NLOG":                      this.ParseNLogElement(content' baseDirectory);                      break;              }
Missing Default,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,ParseLoggerElement,The following switch statement is missing a default case: switch (child.LocalName.ToUpper(CultureInfo.InvariantCulture))                  {                      case "FILTERS":                          this.ParseFilters(rule' child);                          break;                        case "LOGGER":                          this.ParseLoggerElement(child' rule.ChildRules);                          break;                  }
Missing Default,NLog.Config,XmlLoggingConfiguration,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Config\XmlLoggingConfiguration.cs,ParseTargetsElement,The following switch statement is missing a default case: switch (name.ToUpper(CultureInfo.InvariantCulture))                  {                      case "DEFAULT-WRAPPER":                          defaultWrapperElement = targetElement;                          break;                        case "DEFAULT-TARGET-PARAMETERS":                          if (type == null)                          {                              throw new NLogConfigurationException("Missing 'type' attribute on <" + name + "/>.");                          }                            typeNameToDefaultTargetParameters[type] = targetElement;                          break;                        case "TARGET":                      case "APPENDER":                      case "WRAPPER":                      case "WRAPPER-TARGET":                      case "COMPOUND-TARGET":                          if (type == null)                          {                              throw new NLogConfigurationException("Missing 'type' attribute on <" + name + "/>.");                          }                            Target newTarget = this.configurationItemFactory.Targets.CreateInstance(type);                            NLogXmlElement defaults;                          if (typeNameToDefaultTargetParameters.TryGetValue(type' out defaults))                          {                              this.ParseTargetElement(newTarget' defaults);                          }                            this.ParseTargetElement(newTarget' targetElement);                            if (asyncWrap)                          {                              newTarget = WrapWithAsyncTargetWrapper(newTarget);                          }                            if (defaultWrapperElement != null)                          {                              newTarget = this.WrapWithDefaultWrapper(newTarget' defaultWrapperElement);                          }                            InternalLogger.Info("Adding target {0}"' newTarget);                          AddTarget(newTarget.Name' newTarget);                          break;                  }
Missing Default,NLog,NLogTraceListener,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\NLogTraceListener.cs,InitAttributes,The following switch statement is missing a default case: switch (key.ToUpperInvariant())                      {                          case "DEFAULTLOGLEVEL":                              this.defaultLogLevel = LogLevel.FromString(value);                              break;                            case "FORCELOGLEVEL":                              this.forceLogLevel = LogLevel.FromString(value);                              break;                            case "AUTOLOGGERNAME":                              this.AutoLoggerName = XmlConvert.ToBoolean(value);                              break;                      }
Missing Default,NLog.LayoutRenderers,StackTraceLayoutRenderer,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\LayoutRenderers\StackTraceLayoutRenderer.cs,Append,The following switch statement is missing a default case: switch (this.Format)              {                  case StackTraceFormat.Raw:                      for (int i = startingFrame; i >= logEvent.UserStackFrameNumber; --i)                      {                          StackFrame f = logEvent.StackTrace.GetFrame(i);                          builder.Append(f.ToString());                      }                        break;                    case StackTraceFormat.Flat:                      for (int i = startingFrame; i >= logEvent.UserStackFrameNumber; --i)                      {                          StackFrame f = logEvent.StackTrace.GetFrame(i);                          if (!first)                          {                              builder.Append(this.Separator);                          }                            var type = f.GetMethod().DeclaringType;                            if (type != null)                          {                              builder.Append(type.Name);                          }                          else                          {                              builder.Append("<no type>");                          }                            builder.Append(".");                          builder.Append(f.GetMethod().Name);                          first = false;                      }                        break;                    case StackTraceFormat.DetailedFlat:                      for (int i = startingFrame; i >= logEvent.UserStackFrameNumber; --i)                      {                          StackFrame f = logEvent.StackTrace.GetFrame(i);                          if (!first)                          {                              builder.Append(this.Separator);                          }                            builder.Append("[");                          builder.Append(f.GetMethod());                          builder.Append("]");                          first = false;                      }                        break;              }
Missing Default,NLog.Layouts,CsvLayout,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Layouts\CsvLayout.cs,InitializeLayout,The following switch statement is missing a default case: switch (this.Delimiter)              {                  case CsvColumnDelimiterMode.Auto:                      this.actualColumnDelimiter = CultureInfo.CurrentCulture.TextInfo.ListSeparator;                      break;                    case CsvColumnDelimiterMode.Comma:                      this.actualColumnDelimiter = "'";                      break;                    case CsvColumnDelimiterMode.Semicolon:                      this.actualColumnDelimiter = ";";                      break;                    case CsvColumnDelimiterMode.Pipe:                      this.actualColumnDelimiter = "|";                      break;                    case CsvColumnDelimiterMode.Tab:                      this.actualColumnDelimiter = "\t";                      break;                    case CsvColumnDelimiterMode.Space:                      this.actualColumnDelimiter = " ";                      break;                    case CsvColumnDelimiterMode.Custom:                      this.actualColumnDelimiter = this.CustomColumnDelimiter;                      break;              }
Missing Default,NLog.Targets,FileTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\FileTarget.cs,DoAutoArchive,The following switch statement is missing a default case: switch (this.ArchiveNumbering)              {                  case ArchiveNumberingMode.Rolling:                      this.RecursiveRollingRename(fi.FullName' fileNamePattern' 0);                      break;                    case ArchiveNumberingMode.Sequence:                      this.SequentialArchive(fi.FullName' fileNamePattern);                      break;              }
Missing Default,NLog.Targets,WebServiceTarget,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\WebServiceTarget.cs,DoInvoke,The following switch statement is missing a default case: switch (this.Protocol)              {                  case WebServiceProtocol.Soap11:                      postPayload = this.PrepareSoap11Request(request' parameters);                      break;                    case WebServiceProtocol.Soap12:                      postPayload = this.PrepareSoap12Request(request' parameters);                      break;                    case WebServiceProtocol.HttpGet:                      throw new NotSupportedException();                    case WebServiceProtocol.HttpPost:                      postPayload = this.PreparePostRequest(request' parameters);                      break;              }
Missing Default,NLog.Targets.Wrappers,AsyncRequestQueue,C:\repos\Emudofus_BehaviorIsManaged\Librairies\NLog\Targets\Wrappers\AsyncRequestQueue-T.cs,Enqueue,The following switch statement is missing a default case: switch (this.OnOverflow)                      {                          case AsyncTargetWrapperOverflowAction.Discard:                              // dequeue and discard one element                              this.logEventInfoQueue.Dequeue();                              break;                            case AsyncTargetWrapperOverflowAction.Grow:                              break;    #if !NET_CF                          case AsyncTargetWrapperOverflowAction.Block:                              while (this.logEventInfoQueue.Count >= this.RequestLimit)                              {                                  InternalLogger.Trace("Blocking...");                                  System.Threading.Monitor.Wait(this);                                  InternalLogger.Trace("Entered critical section.");                              }                                InternalLogger.Trace("Limit ok.");                              break;  #endif                      }
