Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BiM.Core.Config,Config,C:\repos\Emudofus_BehaviorIsManaged\Core\Config\Config.cs,RegisterAttributes,Cyclomatic complexity of the method is 8
Complex Method,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,ProcessDispatching,Cyclomatic complexity of the method is 8
Complex Method,BiM.Core.Network,MessagePart,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,Cyclomatic complexity of the method is 12
Complex Method,BiM.Core.Threading,SelfRunningTaskQueue,C:\repos\Emudofus_BehaviorIsManaged\Core\Threading\SelfRunningTaskQueue.cs,Tick,Cyclomatic complexity of the method is 11
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,Iterate,The method has 6 parameters. Parameters: factory' source' state' cancellationToken' creationOptions' scheduler
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,Iterate,The method has 5 parameters. Parameters: factory' source' cancellationToken' creationOptions' scheduler
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 6 parameters. Parameters: factory' millisecondsDelay' action' cancellationToken' creationOptions' scheduler
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 5 parameters. Parameters: factory' millisecondsDelay' action' state' creationOptions
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 5 parameters. Parameters: factory' millisecondsDelay' action' state' cancellationToken
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 7 parameters. Parameters: factory' millisecondsDelay' action' state' cancellationToken' creationOptions' scheduler
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 6 parameters. Parameters: factory' millisecondsDelay' function' cancellationToken' creationOptions' scheduler
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 5 parameters. Parameters: factory' millisecondsDelay' function' state' cancellationToken
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 5 parameters. Parameters: factory' millisecondsDelay' function' state' creationOptions
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 7 parameters. Parameters: factory' millisecondsDelay' function' state' cancellationToken' creationOptions' scheduler
Long Parameter List,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The method has 6 parameters. Parameters: messageType' containerType' attribute' action' tokenType' container
Long Parameter List,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The method has 6 parameters. Parameters: messageType' containerType' attribute' action' tokenType' container
Long Parameter List,BiM.Core.Messages,MessageHandler,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,MessageHandler,The method has 6 parameters. Parameters: container' containerType' messageType' handlerAttribute' action' tokenType
Long Parameter List,BiM.Core.Network,IPHlpApi32Wrapper,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\IPHlpApi32Wrapper.cs,GetExtendedTcpTable,The method has 6 parameters. Parameters: pTcpTable' dwOutBufLen' sort' ipVersion' tblClass' reserved
Long Statement,BiM.Core.Config,Config,C:\repos\Emudofus_BehaviorIsManaged\Core\Config\Config.cs,Load,The length of the statement  "            foreach (XPathNavigator iterator in navigator.Select("//" + ConfigNode.NodeName + "[@" + ConfigNode.AttributeName + "]")) " is 121.
Long Statement,BiM.Core.Extensions,ReflectionExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\ReflectionExtensions.cs,CreateDelegate,The length of the statement  "            var dynamicMethod = new DynamicMethod(string.Empty' null' new[] { typeof(object) }.Concat(delegParams).ToArray()' true); " is 120.
Long Statement,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The length of the statement  "                throw new ArgumentException(string.Format("Method handler {0} has incorrect parameters. Right definition is Handler(object' Message)"' method)); " is 144.
Long Statement,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The length of the statement  "                throw new ArgumentException(string.Format("Method handler {0} has incorrect parameters. Right definition is Handler(object Message)"' method)); " is 143.
Long Statement,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The length of the statement  "                RegisterShared(attribute.MessageType' method.DeclaringType' attribute' handlerDelegate' parameters[0].ParameterType' method.IsStatic ? null : container); " is 153.
Long Statement,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The length of the statement  "            m_handlers[assembly][messageType].Add(new MessageHandler(container' containerType' messageType' attribute' action' tokenType)); " is 127.
Long Statement,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The length of the statement  "                throw new ArgumentException(string.Format("Method handler {0} has incorrect parameters. Right definition is Handler(object' Message)"' method)); " is 144.
Long Statement,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The length of the statement  "                throw new ArgumentException(string.Format("Method handler {0} has incorrect parameters. Right definition is Handler(object Message)"' method)); " is 143.
Long Statement,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The length of the statement  "                RegisterNonShared(attribute.MessageType' method.DeclaringType' attribute' handlerDelegate' parameters[0].ParameterType' method.IsStatic ? null : container); " is 156.
Long Statement,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The length of the statement  "            m_nonSharedHandlers[assembly][messageType].Add(new MessageHandler(container' containerType' messageType' attribute' action' tokenType)); " is 136.
Long Statement,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,HasNonSharedContainer,The length of the statement  "            return m_nonSharedHandlers.Any(assembly => assembly.Value.Any(x => x.Value.Any(handler => handler.ContainerType == type))); " is 123.
Long Statement,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,GetHandlers,The length of the statement  "      foreach (var list in m_nonSharedHandlers.Values.Concat(m_handlers.Values).ToArray()) // ToArray : to avoid error if handler are added in the same time " is 150.
Long Statement,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,Dispatch,The length of the statement  "        foreach (var handler in GetHandlers(message.GetType()' token).ToArray()) // have to transform it into a collection if we want to add/remove handler " is 147.
Long Statement,BiM.Core.Network,MessagePart,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,The length of the statement  "                    throw new Exception("Malformated Message Header' invalid bytes number to read message length (inferior to 0 or superior to 3)"); " is 128.
Long Statement,BiM.Core.Network,ClientManager<T>,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\ClientManager.cs,ProcessAccept,The length of the statement  "                // if the event is not raised we first check new connections before parsing message that can blocks the connection queue " is 120.
Long Statement,BiM.Core.Reflection,ObjectDumper,C:\repos\Emudofus_BehaviorIsManaged\Core\Reflection\ObjectDumper.cs,InternalDump,The length of the statement  "                                Write("{0}: {1}"' stringBuilder' level' field.Name' typeof(IEnumerable).IsAssignableFrom(field.FieldType) ? "..." : "{ }"); " is 123.
Long Statement,BiM.Core.Reflection,ObjectDumper,C:\repos\Emudofus_BehaviorIsManaged\Core\Reflection\ObjectDumper.cs,InternalDump,The length of the statement  "                                Write("{0}: {1}"' stringBuilder' level' property.Name' typeof(IEnumerable).IsAssignableFrom(property.PropertyType) ? "..." : "{ }"); " is 132.
Complex Conditional,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The conditional expression  "!method.IsStatic && container == null || method.IsStatic && container != null"  is complex.
Complex Conditional,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The conditional expression  "!method.IsStatic && container == null || method.IsStatic && container != null"  is complex.
Virtual Method Call from Constructor,BiM.Core.Config,ConfigNode,C:\repos\Emudofus_BehaviorIsManaged\Core\Config\ConfigNode.cs,ConfigNode,The constructor "ConfigNode" calls a virtual method "Load".
Empty Catch Block,BiM.Core.Network,ClientManager<T>,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\ClientManager.cs,OnReceiveCompleted,The method has an empty catch block.
Magic Number,BiM.Core.Collections,PriorityQueueB<T>,C:\repos\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Push,The following statement contains a magic number: do              {                  if (p == 0)                      break;                  p2 = (p - 1)/2;                  if (OnCompare(p' p2) < 0)                  {                      SwitchElements(p' p2);                      p = p2;                  }                  else                      break;              } while (true);
Magic Number,BiM.Core.Collections,PriorityQueueB<T>,C:\repos\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Pop,The following statement contains a magic number: do              {                  pn = p;                  p1 = 2*p + 1;                  p2 = 2*p + 2;                  if (InnerList.Count > p1 && OnCompare(p' p1) > 0)                      p = p1;                  if (InnerList.Count > p2 && OnCompare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                  SwitchElements(p' pn);              } while (true);
Magic Number,BiM.Core.Collections,PriorityQueueB<T>,C:\repos\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Pop,The following statement contains a magic number: do              {                  pn = p;                  p1 = 2*p + 1;                  p2 = 2*p + 2;                  if (InnerList.Count > p1 && OnCompare(p' p1) > 0)                      p = p1;                  if (InnerList.Count > p2 && OnCompare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                  SwitchElements(p' pn);              } while (true);
Magic Number,BiM.Core.Collections,PriorityQueueB<T>,C:\repos\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Pop,The following statement contains a magic number: do              {                  pn = p;                  p1 = 2*p + 1;                  p2 = 2*p + 2;                  if (InnerList.Count > p1 && OnCompare(p' p1) > 0)                      p = p1;                  if (InnerList.Count > p2 && OnCompare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                  SwitchElements(p' pn);              } while (true);
Magic Number,BiM.Core.Collections,PriorityQueueB<T>,C:\repos\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: do              {                  if (p == 0)                      break;                  p2 = (p - 1)/2;                  if (OnCompare(p' p2) < 0)                  {                      SwitchElements(p' p2);                      p = p2;                  }                  else                      break;              } while (true);
Magic Number,BiM.Core.Collections,PriorityQueueB<T>,C:\repos\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: do              {                  pn = p;                  p1 = 2*p + 1;                  p2 = 2*p + 2;                  if (InnerList.Count > p1 && OnCompare(p' p1) > 0)                      p = p1;                  if (InnerList.Count > p2 && OnCompare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                  SwitchElements(p' pn);              } while (true);
Magic Number,BiM.Core.Collections,PriorityQueueB<T>,C:\repos\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: do              {                  pn = p;                  p1 = 2*p + 1;                  p2 = 2*p + 2;                  if (InnerList.Count > p1 && OnCompare(p' p1) > 0)                      p = p1;                  if (InnerList.Count > p2 && OnCompare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                  SwitchElements(p' pn);              } while (true);
Magic Number,BiM.Core.Collections,PriorityQueueB<T>,C:\repos\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: do              {                  pn = p;                  p1 = 2*p + 1;                  p2 = 2*p + 2;                  if (InnerList.Count > p1 && OnCompare(p' p1) > 0)                      p = p1;                  if (InnerList.Count > p2 && OnCompare(p' p2) > 0)                      p = p2;                    if (p == pn)                      break;                  SwitchElements(p' pn);              } while (true);
Magic Number,BiM.Core.Database,RedisServerHost,C:\repos\Emudofus_BehaviorIsManaged\Core\Database\RedisServerHost.cs,StartOrFindProcess,The following statement contains a magic number: if (!CanReachServer())              {                  if (string.IsNullOrEmpty(ExecutablePath) || !File.Exists(ExecutablePath))                      throw new Exception(string.Format("Redis server not started and executable {0} not found"' ExecutablePath));                    ServerProcess = new Process();                  ServerProcess.StartInfo = new ProcessStartInfo(ExecutablePath)                  {                      CreateNoWindow = true'                      RedirectStandardOutput = true'                      UseShellExecute = false'                    };                  ServerProcess.EnableRaisingEvents = true;                    ServerProcess.Start();                  ServerProcess.BeginOutputReadLine();                    logger.Info("Starting {0}..."' Path.GetFileName(ExecutablePath));                    // wait enough time                  if (!CanReachServer(5000))                      throw new Exception(string.Format("Redis Server hasn't been launch correctly (Timeout:{0})"' 5000));                    logger.Info("{0} started..."' Path.GetFileName(ExecutablePath));              }              else              {                  var processes = Process.GetProcessesByName("redis-server");                    if (processes.Length == 1)                      ServerProcess = processes[0];                  else if (processes.Length <= 0)                      throw new Exception("Process redis-server not found");                  else                  {                      var client = new RedisClient("localhost");                      var connections = IPHlpApi32Wrapper.GetAllTcpConnections();                      var matching = connections.SingleOrDefault(x => x.LocalPort == ((IPEndPoint)client.Socket.LocalEndPoint).Port);                        if (matching.Equals(default(MIB_TCPROW_OWNER_PID)))                          throw new Exception("Process redis-server not found");                        ServerProcess = Process.GetProcessById(matching.owningPid);                  }                      logger.Info("Redis process found (pid:{0})"' ServerProcess.Id);              }
Magic Number,BiM.Core.Database,RedisServerHost,C:\repos\Emudofus_BehaviorIsManaged\Core\Database\RedisServerHost.cs,StartOrFindProcess,The following statement contains a magic number: if (!CanReachServer())              {                  if (string.IsNullOrEmpty(ExecutablePath) || !File.Exists(ExecutablePath))                      throw new Exception(string.Format("Redis server not started and executable {0} not found"' ExecutablePath));                    ServerProcess = new Process();                  ServerProcess.StartInfo = new ProcessStartInfo(ExecutablePath)                  {                      CreateNoWindow = true'                      RedirectStandardOutput = true'                      UseShellExecute = false'                    };                  ServerProcess.EnableRaisingEvents = true;                    ServerProcess.Start();                  ServerProcess.BeginOutputReadLine();                    logger.Info("Starting {0}..."' Path.GetFileName(ExecutablePath));                    // wait enough time                  if (!CanReachServer(5000))                      throw new Exception(string.Format("Redis Server hasn't been launch correctly (Timeout:{0})"' 5000));                    logger.Info("{0} started..."' Path.GetFileName(ExecutablePath));              }              else              {                  var processes = Process.GetProcessesByName("redis-server");                    if (processes.Length == 1)                      ServerProcess = processes[0];                  else if (processes.Length <= 0)                      throw new Exception("Process redis-server not found");                  else                  {                      var client = new RedisClient("localhost");                      var connections = IPHlpApi32Wrapper.GetAllTcpConnections();                      var matching = connections.SingleOrDefault(x => x.LocalPort == ((IPEndPoint)client.Socket.LocalEndPoint).Port);                        if (matching.Equals(default(MIB_TCPROW_OWNER_PID)))                          throw new Exception("Process redis-server not found");                        ServerProcess = Process.GetProcessById(matching.owningPid);                  }                      logger.Info("Redis process found (pid:{0})"' ServerProcess.Id);              }
Magic Number,BiM.Core.Extensions,DateExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\DateExtensions.cs,DateTimeToUnixTimestamp,The following statement contains a magic number: return ( dateTime - new DateTime(1970' 1' 1).ToLocalTime() ).TotalMilliseconds;
Magic Number,BiM.Core.Extensions,DateExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\DateExtensions.cs,DateTimeToUnixTimestampSeconds,The following statement contains a magic number: return (int) ( dateTime - new DateTime(1970' 1' 1).ToLocalTime() ).TotalSeconds;
Magic Number,BiM.Core.Extensions,DateExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\DateExtensions.cs,UnixTimestampToDateTime,The following statement contains a magic number: var dtDateTime = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,BiM.Core.Extensions,DateExtensions,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\DateExtensions.cs,UnixTimestampToDateTime,The following statement contains a magic number: var dtDateTime = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadShort,The following statement contains a magic number: m_position += 2;
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadShort,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  return (short) ((*pbyte << 8) | (*(pbyte + 1)));              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: m_position += 4;
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  return ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  return ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  return ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  return ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  return ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: m_position += 8;
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte << 24 ) | ( *( pbyte + 1 ) << 16 ) | ( *( pbyte + 2 ) << 8 ) | ( *( pbyte + 3 ) );                  int i2  = ( *( pbyte + 4 ) << 24 ) | ( *( pbyte + 5 ) << 16 ) | ( *( pbyte + 6 ) << 8 ) | ( *( pbyte + 7 ) );                  return (uint)i2 | ( (long)i1 << 32 );              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer[m_position]' pDst = dst)              {                  byte* ps = pSrc;                  byte* pd = pDst;                    // Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:                  for (int i = 0; i < n / 4; i++)                  {                      *( (int*)pd ) = *( (int*)ps );                      pd += 4;                      ps += 4;                  }                    // Complete the copy by moving any bytes that weren't moved in blocks of 4:                  for (int i = 0; i < n % 4; i++)                  {                      *pd = *ps;                      pd++;                      ps++;                  }              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer[m_position]' pDst = dst)              {                  byte* ps = pSrc;                  byte* pd = pDst;                    // Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:                  for (int i = 0; i < n / 4; i++)                  {                      *( (int*)pd ) = *( (int*)ps );                      pd += 4;                      ps += 4;                  }                    // Complete the copy by moving any bytes that weren't moved in blocks of 4:                  for (int i = 0; i < n % 4; i++)                  {                      *pd = *ps;                      pd++;                      ps++;                  }              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer[m_position]' pDst = dst)              {                  byte* ps = pSrc;                  byte* pd = pDst;                    // Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:                  for (int i = 0; i < n / 4; i++)                  {                      *( (int*)pd ) = *( (int*)ps );                      pd += 4;                      ps += 4;                  }                    // Complete the copy by moving any bytes that weren't moved in blocks of 4:                  for (int i = 0; i < n % 4; i++)                  {                      *pd = *ps;                      pd++;                      ps++;                  }              }
Magic Number,BiM.Core.IO,FastBigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer[m_position]' pDst = dst)              {                  byte* ps = pSrc;                  byte* pd = pDst;                    // Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:                  for (int i = 0; i < n / 4; i++)                  {                      *( (int*)pd ) = *( (int*)ps );                      pd += 4;                      ps += 4;                  }                    // Complete the copy by moving any bytes that weren't moved in blocks of 4:                  for (int i = 0; i < n % 4; i++)                  {                      *pd = *ps;                      pd++;                      ps++;                  }              }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadShort,The following statement contains a magic number: m_position += 2;
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadShort,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                      return (short)((*pbyte) | (*(pbyte + 1) << 8)) ;               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: m_position += 4;
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  return ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );              }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  return ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );              }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  return ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );              }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  return ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );              }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  return ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );              }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: m_position += 8;
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer[position])              {                  int i1 = ( *pbyte ) | ( *( pbyte + 1 ) << 8 ) | ( *( pbyte + 2 ) << 16 ) | ( *( pbyte + 3 ) << 24 );                  int i2  = ( *( pbyte + 4 ) ) | ( *( pbyte + 5 ) << 8 ) | ( *( pbyte + 6 ) << 16 ) | ( *( pbyte + 7 ) << 24 );                  return (uint)i1 | ( (long)i2 << 32 );               }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer[m_position]' pDst = dst)              {                  byte* ps = pSrc;                  byte* pd = pDst;                    // Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:                  for (int i = 0; i < n / 4; i++)                  {                      *( (int*)pd ) = *( (int*)ps );                      pd += 4;                      ps += 4;                  }                    // Complete the copy by moving any bytes that weren't moved in blocks of 4:                  for (int i = 0; i < n % 4; i++)                  {                      *pd = *ps;                      pd++;                      ps++;                  }              }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer[m_position]' pDst = dst)              {                  byte* ps = pSrc;                  byte* pd = pDst;                    // Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:                  for (int i = 0; i < n / 4; i++)                  {                      *( (int*)pd ) = *( (int*)ps );                      pd += 4;                      ps += 4;                  }                    // Complete the copy by moving any bytes that weren't moved in blocks of 4:                  for (int i = 0; i < n % 4; i++)                  {                      *pd = *ps;                      pd++;                      ps++;                  }              }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer[m_position]' pDst = dst)              {                  byte* ps = pSrc;                  byte* pd = pDst;                    // Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:                  for (int i = 0; i < n / 4; i++)                  {                      *( (int*)pd ) = *( (int*)ps );                      pd += 4;                      ps += 4;                  }                    // Complete the copy by moving any bytes that weren't moved in blocks of 4:                  for (int i = 0; i < n % 4; i++)                  {                      *pd = *ps;                      pd++;                      ps++;                  }              }
Magic Number,BiM.Core.IO,FastLittleEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer[m_position]' pDst = dst)              {                  byte* ps = pSrc;                  byte* pd = pDst;                    // Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:                  for (int i = 0; i < n / 4; i++)                  {                      *( (int*)pd ) = *( (int*)ps );                      pd += 4;                      ps += 4;                  }                    // Complete the copy by moving any bytes that weren't moved in blocks of 4:                  for (int i = 0; i < n % 4; i++)                  {                      *pd = *ps;                      pd++;                      ps++;                  }              }
Magic Number,BiM.Core.IO,BigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadShort,The following statement contains a magic number: return BitConverter.ToInt16(ReadBigEndianBytes(2)' 0);
Magic Number,BiM.Core.IO,BigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadInt,The following statement contains a magic number: return BitConverter.ToInt32(ReadBigEndianBytes(4)' 0);
Magic Number,BiM.Core.IO,BigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadLong,The following statement contains a magic number: return BitConverter.ToInt64(ReadBigEndianBytes(8)' 0);
Magic Number,BiM.Core.IO,BigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadFloat,The following statement contains a magic number: return BitConverter.ToSingle(ReadBigEndianBytes(4)' 0);
Magic Number,BiM.Core.IO,BigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadUShort,The following statement contains a magic number: return BitConverter.ToUInt16(ReadBigEndianBytes(2)' 0);
Magic Number,BiM.Core.IO,BigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadUInt,The following statement contains a magic number: return BitConverter.ToUInt32(ReadBigEndianBytes(4)' 0);
Magic Number,BiM.Core.IO,BigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadULong,The following statement contains a magic number: return BitConverter.ToUInt64(ReadBigEndianBytes(8)' 0);
Magic Number,BiM.Core.IO,BigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadDouble,The following statement contains a magic number: return BitConverter.ToDouble(ReadBigEndianBytes(8)' 0);
Magic Number,BiM.Core.IO,BigEndianReader,C:\repos\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadSingle,The following statement contains a magic number: return BitConverter.ToSingle(ReadBigEndianBytes(4)' 0);
Magic Number,BiM.Core.Machine,OSInfo,C:\repos\Emudofus_BehaviorIsManaged\Core\Machine\OSInfo.cs,Is64Architecture,The following statement contains a magic number: return IntPtr.Size == 8 || !String.IsNullOrEmpty(Environment.GetEnvironmentVariable("PROCESSOR_ARCHITEW6432"));
Magic Number,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The following statement contains a magic number: if ((parameters.Length != 2 || !parameters[1].ParameterType.IsSubclassOf(typeof(Message))))              {                  throw new ArgumentException(string.Format("Method handler {0} has incorrect parameters. Right definition is Handler(object' Message)"' method));              }
Magic Number,BiM.Core.Messages,MessageDispatcher,C:\repos\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The following statement contains a magic number: if (parameters.Length != 2 ||                  !parameters[1].ParameterType.IsSubclassOf(typeof(Message)))              {                  throw new ArgumentException(string.Format("Method handler {0} has incorrect parameters. Right definition is Handler(object' Message)"' method));              }
Magic Number,BiM.Core.Network,IPHlpApi32Wrapper,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\IPHlpApi32Wrapper.cs,GetAllTcpConnections,The following statement contains a magic number: int AF_INET = 2;
Magic Number,BiM.Core.Network,ServerConnection,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\ServerConnection.cs,ReceiveLoop,The following statement contains a magic number: lock (this)              {                  if (!IsConnected)                      return;                    var args = new SocketAsyncEventArgs();                  args.Completed += OnReceiveCompleted;                  args.SetBuffer(_buffer' 0' 8192);                    if (!Socket.ReceiveAsync(args))                  {                      ProcessReceiveCompleted(args);                  }              }
Magic Number,BiM.Core.Network,MessagePart,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,The following statement contains a magic number: if (reader.BytesAvailable >= 2 && !Header.HasValue)              {                  Header = reader.ReadShort();              }
Magic Number,BiM.Core.Network,MessagePart,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,The following statement contains a magic number: if (LengthBytesCount.HasValue &&                  reader.BytesAvailable >= LengthBytesCount && !Length.HasValue)              {                  if (LengthBytesCount < 0 || LengthBytesCount > 3)                      throw new Exception("Malformated Message Header' invalid bytes number to read message length (inferior to 0 or superior to 3)");                    Length = 0;                                    // 3..0 or 2..0 or 1..0                  for (int i = LengthBytesCount.Value - 1; i >= 0; i--)                  {                      Length |= reader.ReadByte() << (i * 8);                  }              }
Magic Number,BiM.Core.Network,MessagePart,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,The following statement contains a magic number: if (LengthBytesCount.HasValue &&                  reader.BytesAvailable >= LengthBytesCount && !Length.HasValue)              {                  if (LengthBytesCount < 0 || LengthBytesCount > 3)                      throw new Exception("Malformated Message Header' invalid bytes number to read message length (inferior to 0 or superior to 3)");                    Length = 0;                                    // 3..0 or 2..0 or 1..0                  for (int i = LengthBytesCount.Value - 1; i >= 0; i--)                  {                      Length |= reader.ReadByte() << (i * 8);                  }              }
Magic Number,BiM.Core.Network,NetworkMessage,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: switch (typeLen)              {                  case 0:                      break;                  case 1:                      writer.WriteByte((byte) packet.Length);                      break;                  case 2:                      writer.WriteShort((short) packet.Length);                      break;                  case 3:                      writer.WriteByte((byte) (packet.Length >> 16 & 255));                      writer.WriteShort((short) (packet.Length & 65535));                      break;                  default:                        throw new Exception("Packet's length can't be encoded on 4 or more bytes");              }
Magic Number,BiM.Core.Network,NetworkMessage,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: switch (typeLen)              {                  case 0:                      break;                  case 1:                      writer.WriteByte((byte) packet.Length);                      break;                  case 2:                      writer.WriteShort((short) packet.Length);                      break;                  case 3:                      writer.WriteByte((byte) (packet.Length >> 16 & 255));                      writer.WriteShort((short) (packet.Length & 65535));                      break;                  default:                        throw new Exception("Packet's length can't be encoded on 4 or more bytes");              }
Magic Number,BiM.Core.Network,NetworkMessage,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: switch (typeLen)              {                  case 0:                      break;                  case 1:                      writer.WriteByte((byte) packet.Length);                      break;                  case 2:                      writer.WriteShort((short) packet.Length);                      break;                  case 3:                      writer.WriteByte((byte) (packet.Length >> 16 & 255));                      writer.WriteShort((short) (packet.Length & 65535));                      break;                  default:                        throw new Exception("Packet's length can't be encoded on 4 or more bytes");              }
Magic Number,BiM.Core.Network,NetworkMessage,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: switch (typeLen)              {                  case 0:                      break;                  case 1:                      writer.WriteByte((byte) packet.Length);                      break;                  case 2:                      writer.WriteShort((short) packet.Length);                      break;                  case 3:                      writer.WriteByte((byte) (packet.Length >> 16 & 255));                      writer.WriteShort((short) (packet.Length & 65535));                      break;                  default:                        throw new Exception("Packet's length can't be encoded on 4 or more bytes");              }
Magic Number,BiM.Core.Network,NetworkMessage,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: switch (typeLen)              {                  case 0:                      break;                  case 1:                      writer.WriteByte((byte) packet.Length);                      break;                  case 2:                      writer.WriteShort((short) packet.Length);                      break;                  case 3:                      writer.WriteByte((byte) (packet.Length >> 16 & 255));                      writer.WriteShort((short) (packet.Length & 65535));                      break;                  default:                        throw new Exception("Packet's length can't be encoded on 4 or more bytes");              }
Magic Number,BiM.Core.Network,NetworkMessage,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,ComputeTypeLen,The following statement contains a magic number: if (param1 > 65535)                  return 3;
Magic Number,BiM.Core.Network,NetworkMessage,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,ComputeTypeLen,The following statement contains a magic number: if (param1 > 65535)                  return 3;
Magic Number,BiM.Core.Network,NetworkMessage,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,ComputeTypeLen,The following statement contains a magic number: if (param1 > 255)                  return 2;
Magic Number,BiM.Core.Network,NetworkMessage,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,ComputeTypeLen,The following statement contains a magic number: if (param1 > 255)                  return 2;
Magic Number,BiM.Core.Threading,SimplerTimer,C:\repos\Emudofus_BehaviorIsManaged\Core\Threading\SimplerTimer.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var result = m_intervalMillis * 397 ^ ( m_action != null ? m_action.GetHashCode() : 0 );                  return result;              }
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: int hi = Convert.ToInt32(Math.Floor(hue / 60)) % 6;
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: double f = hue / 60 - Math.Floor(hue / 60);
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: double f = hue / 60 - Math.Floor(hue / 60);
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: value = value * 255;
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)                  return Color.FromArgb(255' v' t' p);              else if (hi == 1)                  return Color.FromArgb(255' q' v' p);              else if (hi == 2)                  return Color.FromArgb(255' p' v' t);              else if (hi == 3)                  return Color.FromArgb(255' p' q' v);              else if (hi == 4)                  return Color.FromArgb(255' t' p' v);              else                  return Color.FromArgb(255' v' p' q);
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)                  return Color.FromArgb(255' v' t' p);              else if (hi == 1)                  return Color.FromArgb(255' q' v' p);              else if (hi == 2)                  return Color.FromArgb(255' p' v' t);              else if (hi == 3)                  return Color.FromArgb(255' p' q' v);              else if (hi == 4)                  return Color.FromArgb(255' t' p' v);              else                  return Color.FromArgb(255' v' p' q);
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)                  return Color.FromArgb(255' v' t' p);              else if (hi == 1)                  return Color.FromArgb(255' q' v' p);              else if (hi == 2)                  return Color.FromArgb(255' p' v' t);              else if (hi == 3)                  return Color.FromArgb(255' p' q' v);              else if (hi == 4)                  return Color.FromArgb(255' t' p' v);              else                  return Color.FromArgb(255' v' p' q);
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)                  return Color.FromArgb(255' v' t' p);              else if (hi == 1)                  return Color.FromArgb(255' q' v' p);              else if (hi == 2)                  return Color.FromArgb(255' p' v' t);              else if (hi == 3)                  return Color.FromArgb(255' p' q' v);              else if (hi == 4)                  return Color.FromArgb(255' t' p' v);              else                  return Color.FromArgb(255' v' p' q);
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)                  return Color.FromArgb(255' v' t' p);              else if (hi == 1)                  return Color.FromArgb(255' q' v' p);              else if (hi == 2)                  return Color.FromArgb(255' p' v' t);              else if (hi == 3)                  return Color.FromArgb(255' p' q' v);              else if (hi == 4)                  return Color.FromArgb(255' t' p' v);              else                  return Color.FromArgb(255' v' p' q);
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)                  return Color.FromArgb(255' v' t' p);              else if (hi == 1)                  return Color.FromArgb(255' q' v' p);              else if (hi == 2)                  return Color.FromArgb(255' p' v' t);              else if (hi == 3)                  return Color.FromArgb(255' p' q' v);              else if (hi == 4)                  return Color.FromArgb(255' t' p' v);              else                  return Color.FromArgb(255' v' p' q);
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)                  return Color.FromArgb(255' v' t' p);              else if (hi == 1)                  return Color.FromArgb(255' q' v' p);              else if (hi == 2)                  return Color.FromArgb(255' p' v' t);              else if (hi == 3)                  return Color.FromArgb(255' p' q' v);              else if (hi == 4)                  return Color.FromArgb(255' t' p' v);              else                  return Color.FromArgb(255' v' p' q);
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)                  return Color.FromArgb(255' v' t' p);              else if (hi == 1)                  return Color.FromArgb(255' q' v' p);              else if (hi == 2)                  return Color.FromArgb(255' p' v' t);              else if (hi == 3)                  return Color.FromArgb(255' p' q' v);              else if (hi == 4)                  return Color.FromArgb(255' t' p' v);              else                  return Color.FromArgb(255' v' p' q);
Magic Number,BiM.Core.UI,HSVColorConverter,C:\repos\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)                  return Color.FromArgb(255' v' t' p);              else if (hi == 1)                  return Color.FromArgb(255' q' v' p);              else if (hi == 2)                  return Color.FromArgb(255' p' v' t);              else if (hi == 3)                  return Color.FromArgb(255' p' q' v);              else if (hi == 4)                  return Color.FromArgb(255' t' p' v);              else                  return Color.FromArgb(255' v' p' q);
Missing Default,BiM.Core.Extensions,TaskObservable<TResult>,C:\repos\Emudofus_BehaviorIsManaged\Core\Extensions\TaskExtensions.cs,Subscribe,The following switch statement is missing a default case: switch (t.Status)                      {                          case TaskStatus.RanToCompletion:                              observer.OnNext(Task.Result);                              observer.OnCompleted();                              break;                            case TaskStatus.Faulted:                              observer.OnError(Task.Exception);                              break;                            case TaskStatus.Canceled:                              observer.OnError(new TaskCanceledException(t));                              break;                      }
Missing Default,BiM.Core.Network,ServerConnection,C:\repos\Emudofus_BehaviorIsManaged\Core\Network\ServerConnection.cs,OnReceiveCompleted,The following switch statement is missing a default case: switch (args.LastOperation)              {                  case SocketAsyncOperation.Receive:                      ProcessReceiveCompleted(args);                      break;                  case SocketAsyncOperation.Disconnect:                      Disconnect();                      break;              }
