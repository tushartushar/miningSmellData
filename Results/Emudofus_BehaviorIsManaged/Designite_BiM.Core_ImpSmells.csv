Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,BiM.Core.Config,Config,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Config\Config.cs,RegisterAttributes,Cyclomatic complexity of the method is 8
Complex Method,BiM.Core.Extensions,TaskCompletionSourceExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskCompletionSourceExtensions.cs,SetFromTask,Cyclomatic complexity of the method is 11
Complex Method,BiM.Core.Network,MessagePart,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,Cyclomatic complexity of the method is 13
Complex Method,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,Cyclomatic complexity of the method is 14
Complex Method,BiM.Core.Network,ClientManager,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\ClientManager.cs,OnReceiveCompleted,Cyclomatic complexity of the method is 9
Complex Method,BiM.Core.Reflection,ObjectDumper,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Reflection\ObjectDumper.cs,InternalDump,Cyclomatic complexity of the method is 16
Complex Method,BiM.Core.Threading,SelfRunningTaskQueue,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Threading\SelfRunningTaskQueue.cs,Tick,Cyclomatic complexity of the method is 13
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,Iterate,The method has 6 parameters.
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,Iterate,The method has 5 parameters.
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 6 parameters.
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 5 parameters.
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 5 parameters.
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 7 parameters.
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 6 parameters.
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 5 parameters.
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 5 parameters.
Long Parameter List,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The method has 7 parameters.
Long Parameter List,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The method has 6 parameters.
Long Parameter List,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The method has 6 parameters.
Long Parameter List,BiM.Core.Network,IPHlpApi32Wrapper,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\IPHlpApi32Wrapper.cs,GetExtendedTcpTable,The method has 6 parameters.
Long Statement,BiM.Core.Config,Config,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Config\Config.cs,Load,The length of the statement  "	foreach (XPathNavigator iterator in navigator.Select ("//" + ConfigNode.NodeName + "[@" + ConfigNode.AttributeName + "]")) { " is 124.
Long Statement,BiM.Core.Config,ConfigVariable,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Config\ConfigVariable.cs,SetValue,The length of the statement  "			throw new Exception (string.Format ("Cannot assign a non-static field ({0}) in a static context (variable={1})"' Field.Name' Attribute.Name)); " is 142.
Long Statement,BiM.Core.Config,ConfigVariable,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Config\ConfigVariable.cs,SetValue,The length of the statement  "			throw new Exception (string.Format ("Cannot assign a non-static property ({0}) in a static context (variable={1})"' Property.Name' Attribute.Name)); " is 148.
Long Statement,BiM.Core.Config,ConfigVariable,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Config\ConfigVariable.cs,GetValue,The length of the statement  "			throw new Exception (string.Format ("Cannot get a non-static field ({0}) in a static context (variable={1})"' Field.Name' Attribute.Name)); " is 139.
Long Statement,BiM.Core.Config,ConfigVariable,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Config\ConfigVariable.cs,GetValue,The length of the statement  "			throw new Exception (string.Format ("Cannot get a non-static property ({0}) in a static context (variable={1})"' Property.Name' Attribute.Name)); " is 145.
Long Statement,BiM.Core.Config,ConfigVariable,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Config\ConfigVariable.cs,SetValue,The length of the statement  "			throw new Exception (string.Format ("Cannot assign a static field ({0}) in a non-static context (variable={1})"' Field.Name' Attribute.Name)); " is 142.
Long Statement,BiM.Core.Config,ConfigVariable,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Config\ConfigVariable.cs,SetValue,The length of the statement  "			throw new Exception (string.Format ("Cannot assign a static property ({0}) in a non-static context (variable={1})"' Property.Name' Attribute.Name)); " is 148.
Long Statement,BiM.Core.Config,ConfigVariable,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Config\ConfigVariable.cs,GetValue,The length of the statement  "			throw new Exception (string.Format ("Cannot get a static field ({0}) in a non-static context (variable={1})"' Field.Name' Attribute.Name)); " is 139.
Long Statement,BiM.Core.Config,ConfigVariable,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Config\ConfigVariable.cs,GetValue,The length of the statement  "			throw new Exception (string.Format ("Cannot get a static property ({0}) in a non-static context (variable={1})"' Property.Name' Attribute.Name)); " is 145.
Long Statement,BiM.Core.Extensions,TaskExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskExtensions.cs,ContinueWith,The length of the statement  "	return task.ContinueWith (continuationAction' factory.CancellationToken' factory.ContinuationOptions' factory.Scheduler); " is 121.
Long Statement,BiM.Core.Extensions,TaskExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskExtensions.cs,ContinueWith,The length of the statement  "	return task.ContinueWith (continuationFunction' factory.CancellationToken' factory.ContinuationOptions' factory.Scheduler); " is 123.
Long Statement,BiM.Core.Extensions,TaskExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskExtensions.cs,ContinueWith,The length of the statement  "	return task.ContinueWith (continuationAction' factory.CancellationToken' factory.ContinuationOptions' factory.Scheduler); " is 121.
Long Statement,BiM.Core.Extensions,TaskExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskExtensions.cs,ContinueWith,The length of the statement  "	return task.ContinueWith (continuationFunction' factory.CancellationToken' factory.ContinuationOptions' factory.Scheduler); " is 123.
Long Statement,BiM.Core.Extensions,TaskExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskExtensions.cs,IgnoreExceptions,The length of the statement  "	}' CancellationToken.None' TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnFaulted' TaskScheduler.Default); " is 136.
Long Statement,BiM.Core.Extensions,TaskExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskExtensions.cs,FailFastOnException,The length of the statement  "	task.ContinueWith (t => Environment.FailFast ("A task faulted."' t.Exception)' CancellationToken.None' TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnFaulted' TaskScheduler.Default); " is 212.
Long Statement,BiM.Core.Extensions,TaskExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskExtensions.cs,AttachToParent,The length of the statement  "	task.ContinueWith (t => t.Wait ()' CancellationToken.None' TaskContinuationOptions.AttachedToParent | TaskContinuationOptions.ExecuteSynchronously' TaskScheduler.Default); " is 171.
Long Statement,BiM.Core.Extensions,TaskExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskExtensions.cs,WithTimeout,The length of the statement  "	var timer = new Timer (state => ((TaskCompletionSource<object>)state).TrySetCanceled ()' result' timeout' TimeSpan.FromMilliseconds (-1)); " is 138.
Long Statement,BiM.Core.Extensions,TaskExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskExtensions.cs,WithTimeout,The length of the statement  "	var timer = new Timer (state => ((TaskCompletionSource<TResult>)state).TrySetCanceled ()' result' timeout' TimeSpan.FromMilliseconds (-1)); " is 139.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,ToGeneric,The length of the statement  "	return new TaskFactory<TResult> (factory.CancellationToken' factory.CreationOptions' factory.ContinuationOptions' factory.Scheduler); " is 133.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,ToNonGeneric,The length of the statement  "	return new TaskFactory (factory.CancellationToken' factory.CreationOptions' factory.ContinuationOptions' factory.Scheduler); " is 124.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,ContinuationOptionsFromCreationOptions,The length of the statement  "	return (TaskContinuationOptions)((creationOptions & TaskCreationOptions.AttachedToParent) | (creationOptions & TaskCreationOptions.PreferFairness) | (creationOptions & TaskCreationOptions.LongRunning)); " is 202.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,Iterate,The length of the statement  "	return Iterate (factory' source' state' factory.CancellationToken' factory.CreationOptions' factory.GetTargetScheduler ()); " is 123.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,Iterate,The length of the statement  "	trs.Task.ContinueWith (_ => enumerator.Dispose ()' CancellationToken.None' TaskContinuationOptions.ExecuteSynchronously' TaskScheduler.Default); " is 144.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,Iterate,The length of the statement  "						Task.Factory.StartNew (() => body (null)' CancellationToken.None' TaskCreationOptions.None' (TaskScheduler)nextItem).IgnoreExceptions (); " is 137.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,Iterate,The length of the statement  "	factory.StartNew (() => recursiveBody (null)' CancellationToken.None' TaskCreationOptions.None' scheduler).IgnoreExceptions (); " is 127.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,Iterate,The length of the statement  "	return Iterate (factory' source' null' factory.CancellationToken' factory.CreationOptions' factory.GetTargetScheduler ()); " is 122.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' action' factory.CancellationToken' factory.CreationOptions' factory.GetTargetScheduler ()); " is 143.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' action' factory.CancellationToken' creationOptions' factory.GetTargetScheduler ()); " is 135.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' action' cancellationToken' factory.CreationOptions' factory.GetTargetScheduler ()); " is 135.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return factory.StartNewDelayed (millisecondsDelay' cancellationToken).ContinueWith (_ => action ()' cancellationToken' TaskContinuationOptions.OnlyOnRanToCompletion' scheduler); " is 177.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' action' state' factory.CancellationToken' factory.CreationOptions' factory.GetTargetScheduler ()); " is 150.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' action' state' factory.CancellationToken' creationOptions' factory.GetTargetScheduler ()); " is 142.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' action' state' cancellationToken' factory.CreationOptions' factory.GetTargetScheduler ()); " is 142.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' function' factory.CancellationToken' factory.CreationOptions' factory.GetTargetScheduler ()); " is 145.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' function' factory.CancellationToken' creationOptions' factory.GetTargetScheduler ()); " is 137.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' function' cancellationToken' factory.CreationOptions' factory.GetTargetScheduler ()); " is 137.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	var timer = new Timer (obj => ((TaskCompletionSource<object>)obj).SetResult (null)' tcs' millisecondsDelay' Timeout.Infinite); " is 126.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' function' state' factory.CancellationToken' factory.CreationOptions' factory.GetTargetScheduler ()); " is 152.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' function' state' cancellationToken' factory.CreationOptions' factory.GetTargetScheduler ()); " is 144.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	return StartNewDelayed (factory' millisecondsDelay' function' state' factory.CancellationToken' creationOptions' factory.GetTargetScheduler ()); " is 144.
Long Statement,BiM.Core.Extensions,TaskFactoryExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\TaskFactoryExtensions.cs,StartNewDelayed,The length of the statement  "	}' cancellationToken' ContinuationOptionsFromCreationOptions (creationOptions) | TaskContinuationOptions.ExecuteSynchronously' scheduler); " is 138.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterSharedContainer,The length of the statement  "	var methods = type.GetMethods (BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 123.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The length of the statement  "		throw new ArgumentException (string.Format ("Method handler {0} has incorrect parameters. Right definition is Handler(object' Message)"' method)); " is 146.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The length of the statement  "		throw new ArgumentException (string.Format ("Method handler {0} has incorrect parameters. Right definition is Handler(object Message)"' method)); " is 145.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The length of the statement  "		RegisterShared (attribute.MessageType' method.DeclaringType' attribute' handlerDelegate' parameters [0].ParameterType' method.IsStatic ? null : container); " is 155.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The length of the statement  "	m_handlers [assembly] [messageType].Add (new MessageHandler (container' containerType' messageType' attribute' action' tokenType)); " is 131.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The length of the statement  "	var methods = type.GetMethods (BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 123.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The length of the statement  "		throw new ArgumentException (string.Format ("Method handler {0} has incorrect parameters. Right definition is Handler(object' Message)"' method)); " is 146.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The length of the statement  "		throw new ArgumentException (string.Format ("Method handler {0} has incorrect parameters. Right definition is Handler(object Message)"' method)); " is 145.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The length of the statement  "		RegisterNonShared (attribute.MessageType' method.DeclaringType' attribute' handlerDelegate' parameters [0].ParameterType' method.IsStatic ? null : container); " is 158.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The length of the statement  "	m_nonSharedHandlers [assembly] [messageType].Add (new MessageHandler (container' containerType' messageType' attribute' action' tokenType)); " is 140.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,HasNonSharedContainer,The length of the statement  "	return m_nonSharedHandlers.Any (assembly => assembly.Value.Any (x => x.Value.Any (handler => handler.ContainerType == type))); " is 126.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,GetHandlers,The length of the statement  "	foreach (var list in m_nonSharedHandlers.Values.Concat (m_handlers.Values).ToArray ())// ToArray : to avoid error if handler are added in the same time " is 151.
Long Statement,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,Dispatch,The length of the statement  "		foreach (var handler in GetHandlers (message.GetType ()' token).ToArray ())// have to transform it into a collection if we want to add/remove handler " is 149.
Long Statement,BiM.Core.Network,MessagePart,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,The length of the statement  "			throw new Exception ("Malformated Message Header' invalid bytes number to read message length (inferior to 0 or superior to 3)"); " is 129.
Long Statement,BiM.Core.Network,ClientManager,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\ClientManager.cs,ProcessAccept,The length of the statement  "		// if the event is not raised we first check new connections before parsing message that can blocks the connection queue " is 120.
Long Statement,BiM.Core.Reflection,ObjectDumper,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Reflection\ObjectDumper.cs,InternalDump,The length of the statement  "						Write ("{0}: {1}"' stringBuilder' level' field.Name' typeof(IEnumerable).IsAssignableFrom (field.FieldType) ? "..." : "{ }"); " is 125.
Long Statement,BiM.Core.Reflection,ObjectDumper,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Reflection\ObjectDumper.cs,InternalDump,The length of the statement  "						Write ("{0}: {1}"' stringBuilder' level' property.Name' typeof(IEnumerable).IsAssignableFrom (property.PropertyType) ? "..." : "{ }"); " is 134.
Complex Conditional,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The conditional expression  "!method.IsStatic && container == null || method.IsStatic && container != null"  is complex.
Complex Conditional,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The conditional expression  "!method.IsStatic && container == null || method.IsStatic && container != null"  is complex.
Virtual Method Call from Constructor,BiM.Core.Config,ConfigNode,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Config\ConfigNode.cs,ConfigNode,The constructor "ConfigNode" calls a virtual method "Load".
Empty Catch Block,BiM.Core.Network,ClientManager,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\ClientManager.cs,OnReceiveCompleted,The method has an empty catch block.
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Push,The following statement contains a magic number: do {  	if (p == 0)  		break;  	p2 = (p - 1) / 2;  	if (OnCompare (p' p2) < 0) {  		SwitchElements (p' p2);  		p = p2;  	} else  		break;  } while (true);  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Push,The following statement contains a magic number: p2 = (p - 1) / 2;  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Pop,The following statement contains a magic number: do {  	pn = p;  	p1 = 2 * p + 1;  	p2 = 2 * p + 2;  	if (InnerList.Count > p1 && OnCompare (p' p1) > 0)  		p = p1;  	if (InnerList.Count > p2 && OnCompare (p' p2) > 0)  		p = p2;  	if (p == pn)  		break;  	SwitchElements (p' pn);  } while (true);  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Pop,The following statement contains a magic number: do {  	pn = p;  	p1 = 2 * p + 1;  	p2 = 2 * p + 2;  	if (InnerList.Count > p1 && OnCompare (p' p1) > 0)  		p = p1;  	if (InnerList.Count > p2 && OnCompare (p' p2) > 0)  		p = p2;  	if (p == pn)  		break;  	SwitchElements (p' pn);  } while (true);  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Pop,The following statement contains a magic number: do {  	pn = p;  	p1 = 2 * p + 1;  	p2 = 2 * p + 2;  	if (InnerList.Count > p1 && OnCompare (p' p1) > 0)  		p = p1;  	if (InnerList.Count > p2 && OnCompare (p' p2) > 0)  		p = p2;  	if (p == pn)  		break;  	SwitchElements (p' pn);  } while (true);  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Pop,The following statement contains a magic number: p1 = 2 * p + 1;  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Pop,The following statement contains a magic number: p2 = 2 * p + 2;  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Pop,The following statement contains a magic number: p2 = 2 * p + 2;  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: do {  	if (p == 0)  		break;  	p2 = (p - 1) / 2;  	if (OnCompare (p' p2) < 0) {  		SwitchElements (p' p2);  		p = p2;  	} else  		break;  } while (true);  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: p2 = (p - 1) / 2;  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: do {  	pn = p;  	p1 = 2 * p + 1;  	p2 = 2 * p + 2;  	if (InnerList.Count > p1 && OnCompare (p' p1) > 0)  		p = p1;  	if (InnerList.Count > p2 && OnCompare (p' p2) > 0)  		p = p2;  	if (p == pn)  		break;  	SwitchElements (p' pn);  } while (true);  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: do {  	pn = p;  	p1 = 2 * p + 1;  	p2 = 2 * p + 2;  	if (InnerList.Count > p1 && OnCompare (p' p1) > 0)  		p = p1;  	if (InnerList.Count > p2 && OnCompare (p' p2) > 0)  		p = p2;  	if (p == pn)  		break;  	SwitchElements (p' pn);  } while (true);  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: do {  	pn = p;  	p1 = 2 * p + 1;  	p2 = 2 * p + 2;  	if (InnerList.Count > p1 && OnCompare (p' p1) > 0)  		p = p1;  	if (InnerList.Count > p2 && OnCompare (p' p2) > 0)  		p = p2;  	if (p == pn)  		break;  	SwitchElements (p' pn);  } while (true);  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: p1 = 2 * p + 1;  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: p2 = 2 * p + 2;  
Magic Number,BiM.Core.Collections,PriorityQueueB,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Collections\PriorityQueueB.cs,Update,The following statement contains a magic number: p2 = 2 * p + 2;  
Magic Number,BiM.Core.Database,RedisServerHost,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Database\RedisServerHost.cs,StartOrFindProcess,The following statement contains a magic number: if (!CanReachServer ()) {  	if (string.IsNullOrEmpty (ExecutablePath) || !File.Exists (ExecutablePath))  		throw new Exception (string.Format ("Redis server not started and executable {0} not found"' ExecutablePath));  	ServerProcess = new Process ();  	ServerProcess.StartInfo = new ProcessStartInfo (ExecutablePath) {  		CreateNoWindow = true'  		RedirectStandardOutput = true'  		UseShellExecute = false'  	};  	ServerProcess.EnableRaisingEvents = true;  	ServerProcess.Start ();  	ServerProcess.BeginOutputReadLine ();  	logger.Info ("Starting {0}..."' Path.GetFileName (ExecutablePath));  	// wait enough time  	if (!CanReachServer (5000))  		throw new Exception (string.Format ("Redis Server hasn't been launch correctly (Timeout:{0})"' 5000));  	logger.Info ("{0} started..."' Path.GetFileName (ExecutablePath));  } else {  	var processes = Process.GetProcessesByName ("redis-server");  	if (processes.Length == 1)  		ServerProcess = processes [0];  	else if (processes.Length <= 0)  		throw new Exception ("Process redis-server not found");  	else {  		var client = new RedisClient ("localhost");  		var connections = IPHlpApi32Wrapper.GetAllTcpConnections ();  		var matching = connections.SingleOrDefault (x => x.LocalPort == ((IPEndPoint)client.Socket.LocalEndPoint).Port);  		if (matching.Equals (default(MIB_TCPROW_OWNER_PID)))  			throw new Exception ("Process redis-server not found");  		ServerProcess = Process.GetProcessById (matching.owningPid);  	}  	logger.Info ("Redis process found (pid:{0})"' ServerProcess.Id);  }  
Magic Number,BiM.Core.Database,RedisServerHost,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Database\RedisServerHost.cs,StartOrFindProcess,The following statement contains a magic number: if (!CanReachServer ()) {  	if (string.IsNullOrEmpty (ExecutablePath) || !File.Exists (ExecutablePath))  		throw new Exception (string.Format ("Redis server not started and executable {0} not found"' ExecutablePath));  	ServerProcess = new Process ();  	ServerProcess.StartInfo = new ProcessStartInfo (ExecutablePath) {  		CreateNoWindow = true'  		RedirectStandardOutput = true'  		UseShellExecute = false'  	};  	ServerProcess.EnableRaisingEvents = true;  	ServerProcess.Start ();  	ServerProcess.BeginOutputReadLine ();  	logger.Info ("Starting {0}..."' Path.GetFileName (ExecutablePath));  	// wait enough time  	if (!CanReachServer (5000))  		throw new Exception (string.Format ("Redis Server hasn't been launch correctly (Timeout:{0})"' 5000));  	logger.Info ("{0} started..."' Path.GetFileName (ExecutablePath));  } else {  	var processes = Process.GetProcessesByName ("redis-server");  	if (processes.Length == 1)  		ServerProcess = processes [0];  	else if (processes.Length <= 0)  		throw new Exception ("Process redis-server not found");  	else {  		var client = new RedisClient ("localhost");  		var connections = IPHlpApi32Wrapper.GetAllTcpConnections ();  		var matching = connections.SingleOrDefault (x => x.LocalPort == ((IPEndPoint)client.Socket.LocalEndPoint).Port);  		if (matching.Equals (default(MIB_TCPROW_OWNER_PID)))  			throw new Exception ("Process redis-server not found");  		ServerProcess = Process.GetProcessById (matching.owningPid);  	}  	logger.Info ("Redis process found (pid:{0})"' ServerProcess.Id);  }  
Magic Number,BiM.Core.Database,RedisServerHost,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Database\RedisServerHost.cs,StartOrFindProcess,The following statement contains a magic number: if (!CanReachServer (5000))  	throw new Exception (string.Format ("Redis Server hasn't been launch correctly (Timeout:{0})"' 5000));  
Magic Number,BiM.Core.Database,RedisServerHost,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Database\RedisServerHost.cs,StartOrFindProcess,The following statement contains a magic number: if (!CanReachServer (5000))  	throw new Exception (string.Format ("Redis Server hasn't been launch correctly (Timeout:{0})"' 5000));  
Magic Number,BiM.Core.Database,RedisServerHost,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Database\RedisServerHost.cs,StartOrFindProcess,The following statement contains a magic number: throw new Exception (string.Format ("Redis Server hasn't been launch correctly (Timeout:{0})"' 5000));  
Magic Number,BiM.Core.Extensions,DateExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\DateExtensions.cs,DateTimeToUnixTimestamp,The following statement contains a magic number: return (dateTime - new DateTime (1970' 1' 1).ToLocalTime ()).TotalMilliseconds;  
Magic Number,BiM.Core.Extensions,DateExtensions,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Extensions\DateExtensions.cs,DateTimeToUnixTimestampSeconds,The following statement contains a magic number: return (int)(dateTime - new DateTime (1970' 1' 1).ToLocalTime ()).TotalSeconds;  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadShort,The following statement contains a magic number: m_position += 2;  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadShort,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (short)((*pbyte << 8) | (*(pbyte + 1)));  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadShort,The following statement contains a magic number: return (short)((*pbyte << 8) | (*(pbyte + 1)));  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: m_position += 4;  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadInt,The following statement contains a magic number: return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: m_position += 8;  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));  	int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));  	return (uint)i2 | ((long)i1 << 32);  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadLong,The following statement contains a magic number: return (uint)i2 | ((long)i1 << 32);  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer [m_position]' pDst = dst) {  	byte* ps = pSrc;  	byte* pd = pDst;  	// Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:  	for (int i = 0; i < n / 4; i++) {  		*((int*)pd) = *((int*)ps);  		pd += 4;  		ps += 4;  	}  	// Complete the copy by moving any bytes that weren't moved in blocks of 4:  	for (int i = 0; i < n % 4; i++) {  		*pd = *ps;  		pd++;  		ps++;  	}  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer [m_position]' pDst = dst) {  	byte* ps = pSrc;  	byte* pd = pDst;  	// Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:  	for (int i = 0; i < n / 4; i++) {  		*((int*)pd) = *((int*)ps);  		pd += 4;  		ps += 4;  	}  	// Complete the copy by moving any bytes that weren't moved in blocks of 4:  	for (int i = 0; i < n % 4; i++) {  		*pd = *ps;  		pd++;  		ps++;  	}  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer [m_position]' pDst = dst) {  	byte* ps = pSrc;  	byte* pd = pDst;  	// Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:  	for (int i = 0; i < n / 4; i++) {  		*((int*)pd) = *((int*)ps);  		pd += 4;  		ps += 4;  	}  	// Complete the copy by moving any bytes that weren't moved in blocks of 4:  	for (int i = 0; i < n % 4; i++) {  		*pd = *ps;  		pd++;  		ps++;  	}  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer [m_position]' pDst = dst) {  	byte* ps = pSrc;  	byte* pd = pDst;  	// Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:  	for (int i = 0; i < n / 4; i++) {  		*((int*)pd) = *((int*)ps);  		pd += 4;  		ps += 4;  	}  	// Complete the copy by moving any bytes that weren't moved in blocks of 4:  	for (int i = 0; i < n % 4; i++) {  		*pd = *ps;  		pd++;  		ps++;  	}  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: for (int i = 0; i < n / 4; i++) {  	*((int*)pd) = *((int*)ps);  	pd += 4;  	ps += 4;  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: for (int i = 0; i < n / 4; i++) {  	*((int*)pd) = *((int*)ps);  	pd += 4;  	ps += 4;  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: for (int i = 0; i < n / 4; i++) {  	*((int*)pd) = *((int*)ps);  	pd += 4;  	ps += 4;  }  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: pd += 4;  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: ps += 4;  
Magic Number,BiM.Core.IO,FastBigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastBigEndianReader.cs,ReadBytes,The following statement contains a magic number: for (int i = 0; i < n % 4; i++) {  	*pd = *ps;  	pd++;  	ps++;  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadShort,The following statement contains a magic number: m_position += 2;  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadShort,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (short)((*pbyte) | (*(pbyte + 1) << 8));  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadShort,The following statement contains a magic number: return (short)((*pbyte) | (*(pbyte + 1) << 8));  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: m_position += 4;  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadInt,The following statement contains a magic number: return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: m_position += 8;  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: fixed (byte* pbyte = &m_buffer [position]) {  	int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);  	int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);  	return (uint)i1 | ((long)i2 << 32);  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadLong,The following statement contains a magic number: return (uint)i1 | ((long)i2 << 32);  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer [m_position]' pDst = dst) {  	byte* ps = pSrc;  	byte* pd = pDst;  	// Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:  	for (int i = 0; i < n / 4; i++) {  		*((int*)pd) = *((int*)ps);  		pd += 4;  		ps += 4;  	}  	// Complete the copy by moving any bytes that weren't moved in blocks of 4:  	for (int i = 0; i < n % 4; i++) {  		*pd = *ps;  		pd++;  		ps++;  	}  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer [m_position]' pDst = dst) {  	byte* ps = pSrc;  	byte* pd = pDst;  	// Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:  	for (int i = 0; i < n / 4; i++) {  		*((int*)pd) = *((int*)ps);  		pd += 4;  		ps += 4;  	}  	// Complete the copy by moving any bytes that weren't moved in blocks of 4:  	for (int i = 0; i < n % 4; i++) {  		*pd = *ps;  		pd++;  		ps++;  	}  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer [m_position]' pDst = dst) {  	byte* ps = pSrc;  	byte* pd = pDst;  	// Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:  	for (int i = 0; i < n / 4; i++) {  		*((int*)pd) = *((int*)ps);  		pd += 4;  		ps += 4;  	}  	// Complete the copy by moving any bytes that weren't moved in blocks of 4:  	for (int i = 0; i < n % 4; i++) {  		*pd = *ps;  		pd++;  		ps++;  	}  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: fixed (byte* pSrc = &m_buffer [m_position]' pDst = dst) {  	byte* ps = pSrc;  	byte* pd = pDst;  	// Loop over the count in blocks of 4 bytes' copying an integer (4 bytes) at a time:  	for (int i = 0; i < n / 4; i++) {  		*((int*)pd) = *((int*)ps);  		pd += 4;  		ps += 4;  	}  	// Complete the copy by moving any bytes that weren't moved in blocks of 4:  	for (int i = 0; i < n % 4; i++) {  		*pd = *ps;  		pd++;  		ps++;  	}  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: for (int i = 0; i < n / 4; i++) {  	*((int*)pd) = *((int*)ps);  	pd += 4;  	ps += 4;  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: for (int i = 0; i < n / 4; i++) {  	*((int*)pd) = *((int*)ps);  	pd += 4;  	ps += 4;  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: for (int i = 0; i < n / 4; i++) {  	*((int*)pd) = *((int*)ps);  	pd += 4;  	ps += 4;  }  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: pd += 4;  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: ps += 4;  
Magic Number,BiM.Core.IO,FastLittleEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\FastLittleEndianReader.cs,ReadBytes,The following statement contains a magic number: for (int i = 0; i < n % 4; i++) {  	*pd = *ps;  	pd++;  	ps++;  }  
Magic Number,BiM.Core.IO,BigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadShort,The following statement contains a magic number: return BitConverter.ToInt16 (ReadBigEndianBytes (2)' 0);  
Magic Number,BiM.Core.IO,BigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadInt,The following statement contains a magic number: return BitConverter.ToInt32 (ReadBigEndianBytes (4)' 0);  
Magic Number,BiM.Core.IO,BigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadLong,The following statement contains a magic number: return BitConverter.ToInt64 (ReadBigEndianBytes (8)' 0);  
Magic Number,BiM.Core.IO,BigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadFloat,The following statement contains a magic number: return BitConverter.ToSingle (ReadBigEndianBytes (4)' 0);  
Magic Number,BiM.Core.IO,BigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadUShort,The following statement contains a magic number: return BitConverter.ToUInt16 (ReadBigEndianBytes (2)' 0);  
Magic Number,BiM.Core.IO,BigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadUInt,The following statement contains a magic number: return BitConverter.ToUInt32 (ReadBigEndianBytes (4)' 0);  
Magic Number,BiM.Core.IO,BigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadULong,The following statement contains a magic number: return BitConverter.ToUInt64 (ReadBigEndianBytes (8)' 0);  
Magic Number,BiM.Core.IO,BigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadDouble,The following statement contains a magic number: return BitConverter.ToDouble (ReadBigEndianBytes (8)' 0);  
Magic Number,BiM.Core.IO,BigEndianReader,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\IO\BigEndianReader.cs,ReadSingle,The following statement contains a magic number: return BitConverter.ToSingle (ReadBigEndianBytes (4)' 0);  
Magic Number,BiM.Core.Machine,OSInfo,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Machine\OSInfo.cs,Is64Architecture,The following statement contains a magic number: return IntPtr.Size == 8 || !String.IsNullOrEmpty (Environment.GetEnvironmentVariable ("PROCESSOR_ARCHITEW6432"));  
Magic Number,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterShared,The following statement contains a magic number: if ((parameters.Length != 2 || !parameters [1].ParameterType.IsSubclassOf (typeof(Message)))) {  	throw new ArgumentException (string.Format ("Method handler {0} has incorrect parameters. Right definition is Handler(object' Message)"' method));  }  
Magic Number,BiM.Core.Messages,MessageDispatcher,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Messages\MessageDispatcher.cs,RegisterNonShared,The following statement contains a magic number: if (parameters.Length != 2 || !parameters [1].ParameterType.IsSubclassOf (typeof(Message))) {  	throw new ArgumentException (string.Format ("Method handler {0} has incorrect parameters. Right definition is Handler(object' Message)"' method));  }  
Magic Number,BiM.Core.Network,ServerConnection,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\ServerConnection.cs,ReceiveLoop,The following statement contains a magic number: lock (this) {  	if (!IsConnected)  		return;  	var args = new SocketAsyncEventArgs ();  	args.Completed += OnReceiveCompleted;  	args.SetBuffer (_buffer' 0' 8192);  	if (!Socket.ReceiveAsync (args)) {  		ProcessReceiveCompleted (args);  	}  }  
Magic Number,BiM.Core.Network,ServerConnection,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\ServerConnection.cs,ReceiveLoop,The following statement contains a magic number: args.SetBuffer (_buffer' 0' 8192);  
Magic Number,BiM.Core.Network,MessagePart,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,The following statement contains a magic number: if (reader.BytesAvailable >= 2 && !Header.HasValue) {  	Header = reader.ReadShort ();  }  
Magic Number,BiM.Core.Network,MessagePart,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,The following statement contains a magic number: if (LengthBytesCount.HasValue && reader.BytesAvailable >= LengthBytesCount && !Length.HasValue) {  	if (LengthBytesCount < 0 || LengthBytesCount > 3)  		throw new Exception ("Malformated Message Header' invalid bytes number to read message length (inferior to 0 or superior to 3)");  	Length = 0;  	// 3..0 or 2..0 or 1..0  	for (int i = LengthBytesCount.Value - 1; i >= 0; i--) {  		Length |= reader.ReadByte () << (i * 8);  	}  }  
Magic Number,BiM.Core.Network,MessagePart,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,The following statement contains a magic number: if (LengthBytesCount.HasValue && reader.BytesAvailable >= LengthBytesCount && !Length.HasValue) {  	if (LengthBytesCount < 0 || LengthBytesCount > 3)  		throw new Exception ("Malformated Message Header' invalid bytes number to read message length (inferior to 0 or superior to 3)");  	Length = 0;  	// 3..0 or 2..0 or 1..0  	for (int i = LengthBytesCount.Value - 1; i >= 0; i--) {  		Length |= reader.ReadByte () << (i * 8);  	}  }  
Magic Number,BiM.Core.Network,MessagePart,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,The following statement contains a magic number: if (LengthBytesCount < 0 || LengthBytesCount > 3)  	throw new Exception ("Malformated Message Header' invalid bytes number to read message length (inferior to 0 or superior to 3)");  
Magic Number,BiM.Core.Network,MessagePart,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,The following statement contains a magic number: for (int i = LengthBytesCount.Value - 1; i >= 0; i--) {  	Length |= reader.ReadByte () << (i * 8);  }  
Magic Number,BiM.Core.Network,MessagePart,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\MessagePart.cs,Build,The following statement contains a magic number: Length |= reader.ReadByte () << (i * 8);  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: switch (typeLen) {  case 0:  	break;  case 1:  	writer.WriteByte ((byte)packet.Length);  	break;  case 2:  	writer.WriteShort ((short)packet.Length);  	break;  case 3:  	writer.WriteByte ((byte)(packet.Length >> 16 & 255));  	writer.WriteShort ((short)(packet.Length & 65535));  	break;  default:  	throw new Exception ("Packet's length can't be encoded on 4 or more bytes");  }  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: switch (typeLen) {  case 0:  	break;  case 1:  	writer.WriteByte ((byte)packet.Length);  	break;  case 2:  	writer.WriteShort ((short)packet.Length);  	break;  case 3:  	writer.WriteByte ((byte)(packet.Length >> 16 & 255));  	writer.WriteShort ((short)(packet.Length & 65535));  	break;  default:  	throw new Exception ("Packet's length can't be encoded on 4 or more bytes");  }  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: switch (typeLen) {  case 0:  	break;  case 1:  	writer.WriteByte ((byte)packet.Length);  	break;  case 2:  	writer.WriteShort ((short)packet.Length);  	break;  case 3:  	writer.WriteByte ((byte)(packet.Length >> 16 & 255));  	writer.WriteShort ((short)(packet.Length & 65535));  	break;  default:  	throw new Exception ("Packet's length can't be encoded on 4 or more bytes");  }  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: switch (typeLen) {  case 0:  	break;  case 1:  	writer.WriteByte ((byte)packet.Length);  	break;  case 2:  	writer.WriteShort ((short)packet.Length);  	break;  case 3:  	writer.WriteByte ((byte)(packet.Length >> 16 & 255));  	writer.WriteShort ((short)(packet.Length & 65535));  	break;  default:  	throw new Exception ("Packet's length can't be encoded on 4 or more bytes");  }  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: switch (typeLen) {  case 0:  	break;  case 1:  	writer.WriteByte ((byte)packet.Length);  	break;  case 2:  	writer.WriteShort ((short)packet.Length);  	break;  case 3:  	writer.WriteByte ((byte)(packet.Length >> 16 & 255));  	writer.WriteShort ((short)(packet.Length & 65535));  	break;  default:  	throw new Exception ("Packet's length can't be encoded on 4 or more bytes");  }  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: writer.WriteByte ((byte)(packet.Length >> 16 & 255));  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: writer.WriteByte ((byte)(packet.Length >> 16 & 255));  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,WritePacket,The following statement contains a magic number: writer.WriteShort ((short)(packet.Length & 65535));  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,ComputeTypeLen,The following statement contains a magic number: if (param1 > 65535)  	return 3;  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,ComputeTypeLen,The following statement contains a magic number: if (param1 > 65535)  	return 3;  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,ComputeTypeLen,The following statement contains a magic number: return 3;  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,ComputeTypeLen,The following statement contains a magic number: if (param1 > 255)  	return 2;  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,ComputeTypeLen,The following statement contains a magic number: if (param1 > 255)  	return 2;  
Magic Number,BiM.Core.Network,NetworkMessage,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\NetworkMessage.cs,ComputeTypeLen,The following statement contains a magic number: return 2;  
Magic Number,BiM.Core.Threading,SimplerTimer,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Threading\SimplerTimer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var result = m_intervalMillis * 397 ^ (m_action != null ? m_action.GetHashCode () : 0);  	return result;  }  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: value = value * 255;  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  	return Color.FromArgb (255' v' t' p);  else if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  	return Color.FromArgb (255' v' t' p);  else if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  	return Color.FromArgb (255' v' t' p);  else if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  	return Color.FromArgb (255' v' t' p);  else if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  	return Color.FromArgb (255' v' t' p);  else if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  	return Color.FromArgb (255' v' t' p);  else if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  	return Color.FromArgb (255' v' t' p);  else if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  	return Color.FromArgb (255' v' t' p);  else if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 0)  	return Color.FromArgb (255' v' t' p);  else if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: return Color.FromArgb (255' v' t' p);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 1)  	return Color.FromArgb (255' q' v' p);  else if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: return Color.FromArgb (255' q' v' p);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 2)  	return Color.FromArgb (255' p' v' t);  else if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: return Color.FromArgb (255' p' v' t);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 3)  	return Color.FromArgb (255' p' q' v);  else if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: return Color.FromArgb (255' p' q' v);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: if (hi == 4)  	return Color.FromArgb (255' t' p' v);  else  	return Color.FromArgb (255' v' p' q);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: return Color.FromArgb (255' t' p' v);  
Magic Number,BiM.Core.UI,HSVColorConverter,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\UI\HSVColorConverter.cs,ColorFromHSV,The following statement contains a magic number: return Color.FromArgb (255' v' p' q);  
Missing Default,BiM.Core.Network,ServerConnection,F:\newReposMay17\Emudofus_BehaviorIsManaged\Core\Network\ServerConnection.cs,OnReceiveCompleted,The following switch statement is missing a default case: switch (args.LastOperation) {  case SocketAsyncOperation.Receive:  	ProcessReceiveCompleted (args);  	break;  case SocketAsyncOperation.Disconnect:  	Disconnect ();  	break;  }  
