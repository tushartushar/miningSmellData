Implementation smell,Namespace,Class,File,Method,Description
Long Method,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The method has 114 lines of code.
Complex Method,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,Cyclomatic complexity of the method is 29
Complex Conditional,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The conditional expression  "Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' )"  is complex.
Complex Conditional,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The conditional expression  "Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' )"  is complex.
Complex Conditional,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The conditional expression  "Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                ( c >= 'A' && c <= 'F' )"  is complex.
Complex Conditional,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The conditional expression  "Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                        ( c >= 'A' && c <= 'F' )"  is complex.
Magic Number,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,HandleChatMessage,The following statement contains a magic number: splits.Length != 3
Magic Number,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,HandleChatMessage,The following statement contains a magic number: !int.TryParse(splits[2]' out delay)
Magic Number,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The following statement contains a magic number: switch (source[pos])                      {                          // --- Simple character escapes                          case '\'': c = '\''; break;                          case '\"': c = '\"'; break;                          case '\\': c = '\\'; break;                          case '0': c = '\0'; break;                          case 'a': c = '\a'; break;                          case 'b': c = '\b'; break;                          case 'f': c = '\f'; break;                          case 'n': c = ' '; break;                          case 'r': c = ' '; break;                          case 't': c = '\t'; break;                          case 'v': c = '\v'; break;                          case 'x':                              // --- Hexa escape (1-4 digits)                              StringBuilder hexa = new StringBuilder(10);                              pos++;                              if (pos >= source.Length)                                  throw new ArgumentException("Missing escape sequence");                              c = source[pos];                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                              {                                  hexa.Append(c);                                  pos++;                                  if (pos < source.Length)                                  {                                      c = source[pos];                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                                      {                                          hexa.Append(c);                                          pos++;                                          if (pos < source.Length)                                          {                                              c = source[pos];                                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                ( c >= 'A' && c <= 'F' ))                                              {                                                  hexa.Append(c);                                                  pos++;                                                  if (pos < source.Length)                                                  {                                                      c = source[pos];                                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                        ( c >= 'A' && c <= 'F' ))                                                      {                                                          hexa.Append(c);                                                          pos++;                                                      }                                                  }                                              }                                          }                                      }                                  }                              }                              c = (char)Int32.Parse(hexa.ToString()' NumberStyles.HexNumber);                              pos--;                              break;                          case 'u':                              // Unicode hexa escape (exactly 4 digits)                              pos++;                              if (pos + 3 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 4)'                                    NumberStyles.HexNumber);                                  c = (char)charValue;                                  pos += 3;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          case 'U':                              // Unicode hexa escape (exactly 8 digits' first four must be 0000)                              pos++;                              if (pos + 7 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 8)'                                    NumberStyles.HexNumber);                                  if (charValue > 0xffff)                                      throw new ArgumentException("Unrecognized escape sequence");                                  c = (char)charValue;                                  pos += 7;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          default:                              throw new ArgumentException("Unrecognized escape sequence");                      }
Magic Number,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The following statement contains a magic number: switch (source[pos])                      {                          // --- Simple character escapes                          case '\'': c = '\''; break;                          case '\"': c = '\"'; break;                          case '\\': c = '\\'; break;                          case '0': c = '\0'; break;                          case 'a': c = '\a'; break;                          case 'b': c = '\b'; break;                          case 'f': c = '\f'; break;                          case 'n': c = ' '; break;                          case 'r': c = ' '; break;                          case 't': c = '\t'; break;                          case 'v': c = '\v'; break;                          case 'x':                              // --- Hexa escape (1-4 digits)                              StringBuilder hexa = new StringBuilder(10);                              pos++;                              if (pos >= source.Length)                                  throw new ArgumentException("Missing escape sequence");                              c = source[pos];                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                              {                                  hexa.Append(c);                                  pos++;                                  if (pos < source.Length)                                  {                                      c = source[pos];                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                                      {                                          hexa.Append(c);                                          pos++;                                          if (pos < source.Length)                                          {                                              c = source[pos];                                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                ( c >= 'A' && c <= 'F' ))                                              {                                                  hexa.Append(c);                                                  pos++;                                                  if (pos < source.Length)                                                  {                                                      c = source[pos];                                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                        ( c >= 'A' && c <= 'F' ))                                                      {                                                          hexa.Append(c);                                                          pos++;                                                      }                                                  }                                              }                                          }                                      }                                  }                              }                              c = (char)Int32.Parse(hexa.ToString()' NumberStyles.HexNumber);                              pos--;                              break;                          case 'u':                              // Unicode hexa escape (exactly 4 digits)                              pos++;                              if (pos + 3 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 4)'                                    NumberStyles.HexNumber);                                  c = (char)charValue;                                  pos += 3;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          case 'U':                              // Unicode hexa escape (exactly 8 digits' first four must be 0000)                              pos++;                              if (pos + 7 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 8)'                                    NumberStyles.HexNumber);                                  if (charValue > 0xffff)                                      throw new ArgumentException("Unrecognized escape sequence");                                  c = (char)charValue;                                  pos += 7;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          default:                              throw new ArgumentException("Unrecognized escape sequence");                      }
Magic Number,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The following statement contains a magic number: switch (source[pos])                      {                          // --- Simple character escapes                          case '\'': c = '\''; break;                          case '\"': c = '\"'; break;                          case '\\': c = '\\'; break;                          case '0': c = '\0'; break;                          case 'a': c = '\a'; break;                          case 'b': c = '\b'; break;                          case 'f': c = '\f'; break;                          case 'n': c = ' '; break;                          case 'r': c = ' '; break;                          case 't': c = '\t'; break;                          case 'v': c = '\v'; break;                          case 'x':                              // --- Hexa escape (1-4 digits)                              StringBuilder hexa = new StringBuilder(10);                              pos++;                              if (pos >= source.Length)                                  throw new ArgumentException("Missing escape sequence");                              c = source[pos];                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                              {                                  hexa.Append(c);                                  pos++;                                  if (pos < source.Length)                                  {                                      c = source[pos];                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                                      {                                          hexa.Append(c);                                          pos++;                                          if (pos < source.Length)                                          {                                              c = source[pos];                                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                ( c >= 'A' && c <= 'F' ))                                              {                                                  hexa.Append(c);                                                  pos++;                                                  if (pos < source.Length)                                                  {                                                      c = source[pos];                                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                        ( c >= 'A' && c <= 'F' ))                                                      {                                                          hexa.Append(c);                                                          pos++;                                                      }                                                  }                                              }                                          }                                      }                                  }                              }                              c = (char)Int32.Parse(hexa.ToString()' NumberStyles.HexNumber);                              pos--;                              break;                          case 'u':                              // Unicode hexa escape (exactly 4 digits)                              pos++;                              if (pos + 3 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 4)'                                    NumberStyles.HexNumber);                                  c = (char)charValue;                                  pos += 3;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          case 'U':                              // Unicode hexa escape (exactly 8 digits' first four must be 0000)                              pos++;                              if (pos + 7 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 8)'                                    NumberStyles.HexNumber);                                  if (charValue > 0xffff)                                      throw new ArgumentException("Unrecognized escape sequence");                                  c = (char)charValue;                                  pos += 7;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          default:                              throw new ArgumentException("Unrecognized escape sequence");                      }
Magic Number,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The following statement contains a magic number: switch (source[pos])                      {                          // --- Simple character escapes                          case '\'': c = '\''; break;                          case '\"': c = '\"'; break;                          case '\\': c = '\\'; break;                          case '0': c = '\0'; break;                          case 'a': c = '\a'; break;                          case 'b': c = '\b'; break;                          case 'f': c = '\f'; break;                          case 'n': c = ' '; break;                          case 'r': c = ' '; break;                          case 't': c = '\t'; break;                          case 'v': c = '\v'; break;                          case 'x':                              // --- Hexa escape (1-4 digits)                              StringBuilder hexa = new StringBuilder(10);                              pos++;                              if (pos >= source.Length)                                  throw new ArgumentException("Missing escape sequence");                              c = source[pos];                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                              {                                  hexa.Append(c);                                  pos++;                                  if (pos < source.Length)                                  {                                      c = source[pos];                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                                      {                                          hexa.Append(c);                                          pos++;                                          if (pos < source.Length)                                          {                                              c = source[pos];                                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                ( c >= 'A' && c <= 'F' ))                                              {                                                  hexa.Append(c);                                                  pos++;                                                  if (pos < source.Length)                                                  {                                                      c = source[pos];                                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                        ( c >= 'A' && c <= 'F' ))                                                      {                                                          hexa.Append(c);                                                          pos++;                                                      }                                                  }                                              }                                          }                                      }                                  }                              }                              c = (char)Int32.Parse(hexa.ToString()' NumberStyles.HexNumber);                              pos--;                              break;                          case 'u':                              // Unicode hexa escape (exactly 4 digits)                              pos++;                              if (pos + 3 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 4)'                                    NumberStyles.HexNumber);                                  c = (char)charValue;                                  pos += 3;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          case 'U':                              // Unicode hexa escape (exactly 8 digits' first four must be 0000)                              pos++;                              if (pos + 7 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 8)'                                    NumberStyles.HexNumber);                                  if (charValue > 0xffff)                                      throw new ArgumentException("Unrecognized escape sequence");                                  c = (char)charValue;                                  pos += 7;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          default:                              throw new ArgumentException("Unrecognized escape sequence");                      }
Magic Number,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The following statement contains a magic number: switch (source[pos])                      {                          // --- Simple character escapes                          case '\'': c = '\''; break;                          case '\"': c = '\"'; break;                          case '\\': c = '\\'; break;                          case '0': c = '\0'; break;                          case 'a': c = '\a'; break;                          case 'b': c = '\b'; break;                          case 'f': c = '\f'; break;                          case 'n': c = ' '; break;                          case 'r': c = ' '; break;                          case 't': c = '\t'; break;                          case 'v': c = '\v'; break;                          case 'x':                              // --- Hexa escape (1-4 digits)                              StringBuilder hexa = new StringBuilder(10);                              pos++;                              if (pos >= source.Length)                                  throw new ArgumentException("Missing escape sequence");                              c = source[pos];                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                              {                                  hexa.Append(c);                                  pos++;                                  if (pos < source.Length)                                  {                                      c = source[pos];                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                                      {                                          hexa.Append(c);                                          pos++;                                          if (pos < source.Length)                                          {                                              c = source[pos];                                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                ( c >= 'A' && c <= 'F' ))                                              {                                                  hexa.Append(c);                                                  pos++;                                                  if (pos < source.Length)                                                  {                                                      c = source[pos];                                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                        ( c >= 'A' && c <= 'F' ))                                                      {                                                          hexa.Append(c);                                                          pos++;                                                      }                                                  }                                              }                                          }                                      }                                  }                              }                              c = (char)Int32.Parse(hexa.ToString()' NumberStyles.HexNumber);                              pos--;                              break;                          case 'u':                              // Unicode hexa escape (exactly 4 digits)                              pos++;                              if (pos + 3 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 4)'                                    NumberStyles.HexNumber);                                  c = (char)charValue;                                  pos += 3;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          case 'U':                              // Unicode hexa escape (exactly 8 digits' first four must be 0000)                              pos++;                              if (pos + 7 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 8)'                                    NumberStyles.HexNumber);                                  if (charValue > 0xffff)                                      throw new ArgumentException("Unrecognized escape sequence");                                  c = (char)charValue;                                  pos += 7;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          default:                              throw new ArgumentException("Unrecognized escape sequence");                      }
Magic Number,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The following statement contains a magic number: switch (source[pos])                      {                          // --- Simple character escapes                          case '\'': c = '\''; break;                          case '\"': c = '\"'; break;                          case '\\': c = '\\'; break;                          case '0': c = '\0'; break;                          case 'a': c = '\a'; break;                          case 'b': c = '\b'; break;                          case 'f': c = '\f'; break;                          case 'n': c = ' '; break;                          case 'r': c = ' '; break;                          case 't': c = '\t'; break;                          case 'v': c = '\v'; break;                          case 'x':                              // --- Hexa escape (1-4 digits)                              StringBuilder hexa = new StringBuilder(10);                              pos++;                              if (pos >= source.Length)                                  throw new ArgumentException("Missing escape sequence");                              c = source[pos];                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                              {                                  hexa.Append(c);                                  pos++;                                  if (pos < source.Length)                                  {                                      c = source[pos];                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                                      {                                          hexa.Append(c);                                          pos++;                                          if (pos < source.Length)                                          {                                              c = source[pos];                                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                ( c >= 'A' && c <= 'F' ))                                              {                                                  hexa.Append(c);                                                  pos++;                                                  if (pos < source.Length)                                                  {                                                      c = source[pos];                                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                        ( c >= 'A' && c <= 'F' ))                                                      {                                                          hexa.Append(c);                                                          pos++;                                                      }                                                  }                                              }                                          }                                      }                                  }                              }                              c = (char)Int32.Parse(hexa.ToString()' NumberStyles.HexNumber);                              pos--;                              break;                          case 'u':                              // Unicode hexa escape (exactly 4 digits)                              pos++;                              if (pos + 3 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 4)'                                    NumberStyles.HexNumber);                                  c = (char)charValue;                                  pos += 3;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          case 'U':                              // Unicode hexa escape (exactly 8 digits' first four must be 0000)                              pos++;                              if (pos + 7 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 8)'                                    NumberStyles.HexNumber);                                  if (charValue > 0xffff)                                      throw new ArgumentException("Unrecognized escape sequence");                                  c = (char)charValue;                                  pos += 7;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          default:                              throw new ArgumentException("Unrecognized escape sequence");                      }
Magic Number,WindowManager,KeySenderTest,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\WindowManager\KeySenderTest.cs,StringFromCSharpLiteral,The following statement contains a magic number: switch (source[pos])                      {                          // --- Simple character escapes                          case '\'': c = '\''; break;                          case '\"': c = '\"'; break;                          case '\\': c = '\\'; break;                          case '0': c = '\0'; break;                          case 'a': c = '\a'; break;                          case 'b': c = '\b'; break;                          case 'f': c = '\f'; break;                          case 'n': c = ' '; break;                          case 'r': c = ' '; break;                          case 't': c = '\t'; break;                          case 'v': c = '\v'; break;                          case 'x':                              // --- Hexa escape (1-4 digits)                              StringBuilder hexa = new StringBuilder(10);                              pos++;                              if (pos >= source.Length)                                  throw new ArgumentException("Missing escape sequence");                              c = source[pos];                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                              {                                  hexa.Append(c);                                  pos++;                                  if (pos < source.Length)                                  {                                      c = source[pos];                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ))                                      {                                          hexa.Append(c);                                          pos++;                                          if (pos < source.Length)                                          {                                              c = source[pos];                                              if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                ( c >= 'A' && c <= 'F' ))                                              {                                                  hexa.Append(c);                                                  pos++;                                                  if (pos < source.Length)                                                  {                                                      c = source[pos];                                                      if (Char.IsDigit(c) || ( c >= 'a' && c <= 'f' ) ||                                                        ( c >= 'A' && c <= 'F' ))                                                      {                                                          hexa.Append(c);                                                          pos++;                                                      }                                                  }                                              }                                          }                                      }                                  }                              }                              c = (char)Int32.Parse(hexa.ToString()' NumberStyles.HexNumber);                              pos--;                              break;                          case 'u':                              // Unicode hexa escape (exactly 4 digits)                              pos++;                              if (pos + 3 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 4)'                                    NumberStyles.HexNumber);                                  c = (char)charValue;                                  pos += 3;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          case 'U':                              // Unicode hexa escape (exactly 8 digits' first four must be 0000)                              pos++;                              if (pos + 7 >= source.Length)                                  throw new ArgumentException("Unrecognized escape sequence");                              try                              {                                  uint charValue = UInt32.Parse(source.Substring(pos' 8)'                                    NumberStyles.HexNumber);                                  if (charValue > 0xffff)                                      throw new ArgumentException("Unrecognized escape sequence");                                  c = (char)charValue;                                  pos += 7;                              }                              catch (SystemException)                              {                                  throw new ArgumentException("Unrecognized escape sequence");                              }                              break;                          default:                              throw new ArgumentException("Unrecognized escape sequence");                      }
