Implementation smell,Namespace,Class,File,Method,Description
Long Method,DofusProtocolBuilder.XmlPatterns,XmlMessageBuilder,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\XmlPatterns\XmlMessageBuilder.cs,WriteToXml,The method has 190 lines of code.
Long Method,DofusProtocolBuilder.XmlPatterns,XmlTypesBuilder,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\XmlPatterns\XmlTypesBuilder.cs,WriteToXml,The method has 189 lines of code.
Complex Method,DofusProtocolBuilder,Program,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Program.cs,Main,Cyclomatic complexity of the method is 12
Complex Method,DofusProtocolBuilder.Parsing.Elements,InvokeExpression,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Parsing\Elements\InvokeExpression.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,DofusProtocolBuilder.XmlPatterns,XmlMessageBuilder,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\XmlPatterns\XmlMessageBuilder.cs,WriteToXml,Cyclomatic complexity of the method is 18
Complex Method,DofusProtocolBuilder.XmlPatterns,XmlTypesBuilder,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\XmlPatterns\XmlTypesBuilder.cs,WriteToXml,Cyclomatic complexity of the method is 18
Long Statement,DofusProtocolBuilder.Parsing,Parser,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Parsing\Parser.cs,ParseFile,The length of the statement  "			m_fileLines = File.ReadAllLines(Filename).Where(entry => !IsLineIgnored(entry)).Select(entry => ApplyRules(BeforeParsingRules' entry.Trim())).ToArray(); " is 152.
Long Statement,DofusProtocolBuilder.Parsing.Elements,AssignationStatement,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Parsing\Elements\AssignationStatement.cs,Parse,The length of the statement  "                    Match variableMatch = Regex.Match(match.Groups["variable"].Value' @"^(?<target>[^\.]+\.)*(?<name>.+)"' RegexOptions.Multiline); " is 127.
Long Statement,DofusProtocolBuilder.Profiles,EnumsProfile,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Profiles\EnumsProfile.cs,ExecuteProfile,The length of the statement  "            string file = Path.Combine(Program.Configuration.Output' OutPutPath' GetRelativePath(parser.Filename)' Path.GetFileNameWithoutExtension(parser.Filename)); " is 154.
Long Statement,DofusProtocolBuilder.Profiles,MessagesProfile,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Profiles\MessagesProfile.cs,ExecuteProfile,The length of the statement  "            string file = Path.Combine(Program.Configuration.Output' OutPutPath' GetRelativePath(parser.Filename)' Path.GetFileNameWithoutExtension(parser.Filename)); " is 154.
Long Statement,DofusProtocolBuilder.Profiles,MessagesProfile,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Profiles\MessagesProfile.cs,ExecuteProfile,The length of the statement  "            var xmlMessage = Program.Configuration.XmlMessagesProfile.SearchXmlPattern(Path.GetFileNameWithoutExtension(parser.Filename)); " is 126.
Long Statement,DofusProtocolBuilder.Profiles,ParsingProfile,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Profiles\ParsingProfile.cs,GetRelativePath,The length of the statement  "            string[] foldersSplitted = folder.Split(new[] {SourcePath.Replace("/"' "\\")}' StringSplitOptions.RemoveEmptyEntries); // cut the source path and the "rest" of the path " is 168.
Long Statement,DofusProtocolBuilder.Profiles,TypesProfile,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Profiles\TypesProfile.cs,ExecuteProfile,The length of the statement  "            string file = Path.Combine(Program.Configuration.Output' OutPutPath' relativePath' Path.GetFileNameWithoutExtension(parser.Filename)); " is 134.
Long Statement,DofusProtocolBuilder.Profiles,TypesProfile,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Profiles\TypesProfile.cs,ExecuteProfile,The length of the statement  "            var xmlType = Program.Configuration.XmlTypesProfile.SearchXmlPattern(Path.GetFileNameWithoutExtension(parser.Filename)); " is 120.
Long Statement,DofusProtocolBuilder.Profiles,XmlMessagesProfile,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Profiles\XmlMessagesProfile.cs,SearchXmlPattern,The length of the statement  "            string[] results = Directory.GetFiles(Path.Combine(Program.Configuration.Output' OutPutPath)' classname + ".xml"' SearchOption.AllDirectories); " is 143.
Long Statement,DofusProtocolBuilder.Profiles,XmlMessagesProfile,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Profiles\XmlMessagesProfile.cs,ExecuteProfile,The length of the statement  "            string xmlfile = Path.Combine(Program.Configuration.Output' OutPutPath' relativePath' Path.GetFileNameWithoutExtension(parser.Filename)) + ".xml"; " is 146.
Long Statement,DofusProtocolBuilder.Profiles,XmlTypesProfile,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Profiles\XmlTypesProfile.cs,SearchXmlPattern,The length of the statement  "            string[] results = Directory.GetFiles(Path.Combine(Program.Configuration.Output' OutPutPath)' classname + ".xml"' SearchOption.AllDirectories); " is 143.
Long Statement,DofusProtocolBuilder.Profiles,XmlTypesProfile,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Profiles\XmlTypesProfile.cs,ExecuteProfile,The length of the statement  "            string xmlfile = Path.Combine(Program.Configuration.Output' OutPutPath' relativePath' Path.GetFileNameWithoutExtension(parser.Filename)) + ".xml"; " is 146.
Magic Number,DofusProtocolBuilder,Program,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < args.Length; i++)              {                  switch (args[i].ToLower())                  {                      case "-config":                          if (args.Length < i + 2)                              Shutdown("Value of -config is not defined like : -config {configPath}");                            configPath = args[i + 1];                          break;                      case "-createconfig":                          var writer = XmlWriter.Create(configPath' new XmlWriterSettings()                          {                              Indent = true                          });                          serializer.Serialize(writer' Configuration);                          writer.Close();                          Shutdown("Config created. Please restart");                          break;                  }              }
Duplicate Code,DofusProtocolBuilder.XmlPatterns,XmlMessageBuilder,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\XmlPatterns\XmlMessageBuilder.cs,WriteToXml,The method contains a code clone-set at the following line numbers (starting from the method definition): ((25' 45)' (108' 128))
Duplicate Code,DofusProtocolBuilder.XmlPatterns,XmlMessageBuilder,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\XmlPatterns\XmlMessageBuilder.cs,WriteToXml,The method contains a code clone-set at the following line numbers (starting from the method definition): ((49' 68)' (134' 153))
Duplicate Code,DofusProtocolBuilder.XmlPatterns,XmlTypesBuilder,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\XmlPatterns\XmlTypesBuilder.cs,WriteToXml,The method contains a code clone-set at the following line numbers (starting from the method definition): ((50' 69)' (135' 154))
Missing Default,DofusProtocolBuilder,Program,C:\repos\Emudofus_BehaviorIsManaged\DofusProtocolBuilder\Program.cs,Main,The following switch statement is missing a default case: switch (args[i].ToLower())                  {                      case "-config":                          if (args.Length < i + 2)                              Shutdown("Value of -config is not defined like : -config {configPath}");                            configPath = args[i + 1];                          break;                      case "-createconfig":                          var writer = XmlWriter.Create(configPath' new XmlWriterSettings()                          {                              Indent = true                          });                          serializer.Serialize(writer' Configuration);                          writer.Close();                          Shutdown("Config created. Please restart");                          break;                  }
