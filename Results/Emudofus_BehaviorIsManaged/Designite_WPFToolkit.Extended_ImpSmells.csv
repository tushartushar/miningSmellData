Implementation smell,Namespace,Class,File,Method,Description
Long Method,Xceed.Wpf.Toolkit,DateTimeUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeUpDown.cs,InitializeDateTimeInfoList,The method has 221 lines of code.
Long Method,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,MeasureOverride,The method has 117 lines of code.
Long Method,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,LayoutItems,The method has 470 lines of code.
Complex Method,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,MeasureOverride,Cyclomatic complexity of the method is 15
Complex Method,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,LayoutItems,Cyclomatic complexity of the method is 9
Complex Method,Xceed.Wpf.Toolkit.PropertyGrid,PropertyGrid,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyGrid.cs,GetObjectProperties,Cyclomatic complexity of the method is 8
Long Parameter List,Xceed.Wpf.Toolkit,DateTimeParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeParser.cs,TryParse,The method has 5 parameters. Parameters: value' format' currentDate' cultureInfo' result
Long Parameter List,Xceed.Wpf.Toolkit,MessageBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MessageBox\Implementation\MessageBox.cs,Show,The method has 5 parameters. Parameters: owner' messageText' caption' button' icon
Long Parameter List,Xceed.Wpf.Toolkit,MessageBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MessageBox\Implementation\MessageBox.cs,Show,The method has 5 parameters. Parameters: messageText' caption' button' icon' defaultResult
Long Parameter List,Xceed.Wpf.Toolkit,MessageBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MessageBox\Implementation\MessageBox.cs,Show,The method has 6 parameters. Parameters: owner' messageText' caption' button' icon' defaultResult
Long Parameter List,Xceed.Wpf.Toolkit,MessageBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MessageBox\Implementation\MessageBox.cs,InitializeMessageBox,The method has 6 parameters. Parameters: owner' text' caption' button' image' defaultResult
Long Parameter List,Xceed.Wpf.Toolkit,MessageBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MessageBox\Implementation\MessageBox.cs,ShowCore,The method has 6 parameters. Parameters: owner' messageText' caption' button' icon' defaultResult
Long Parameter List,Xceed.Wpf.Toolkit.PropertyGrid,PropertyGridUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyGridUtilities.cs,CreatePropertyItem,The method has 5 parameters. Parameters: property' instance' grid' bindingPath' level
Long Identifier,Xceed.Wpf.Toolkit,MaskedTextBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MaskedTextBox\Implementation\MaskedTextBox.cs,,The length of the parameter _isSyncingTextAndValueProperties is 32.
Long Identifier,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,,The length of the parameter KeepOriginalOrderForOverlapProperty is 35.
Long Identifier,Xceed.Wpf.Toolkit,WizardPage,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Wizard\Implementation\WizardPage.cs,,The length of the parameter CancelButtonVisibilityProperty is 30.
Long Identifier,Xceed.Wpf.Toolkit,WizardPage,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Wizard\Implementation\WizardPage.cs,,The length of the parameter ExteriorPanelBackgroundProperty is 31.
Long Identifier,Xceed.Wpf.Toolkit,WizardPage,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Wizard\Implementation\WizardPage.cs,,The length of the parameter FinishButtonVisibilityProperty is 30.
Long Identifier,Xceed.Wpf.Toolkit,Wizard,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Wizard\Implementation\Wizard.cs,,The length of the parameter CancelButtonClosesWindowProperty is 32.
Long Identifier,Xceed.Wpf.Toolkit,Wizard,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Wizard\Implementation\Wizard.cs,,The length of the parameter CancelButtonVisibilityProperty is 30.
Long Identifier,Xceed.Wpf.Toolkit,Wizard,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Wizard\Implementation\Wizard.cs,,The length of the parameter FinishButtonClosesWindowProperty is 32.
Long Identifier,Xceed.Wpf.Toolkit,Wizard,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Wizard\Implementation\Wizard.cs,,The length of the parameter FinishButtonVisibilityProperty is 30.
Long Identifier,Xceed.Wpf.Toolkit.Primitives,UpDownBase<T>,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Primitives\UpDownBase.cs,,The length of the parameter _isSyncingTextAndValueProperties is 32.
Long Identifier,Xceed.Wpf.Toolkit.Primitives,UpDownBase<T>,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Primitives\UpDownBase.cs,,The length of the parameter MouseWheelActiveOnFocusProperty is 31.
Long Identifier,Xceed.Wpf.Toolkit.Core.Utilities,ContextMenuUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ContextMenuUtilities.cs,,The length of the parameter OpenOnMouseLeftButtonClickProperty is 34.
Long Identifier,Xceed.Wpf.Toolkit.PropertyGrid,PropertyGrid,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyGrid.cs,,The length of the parameter AutoGeneratePropertiesProperty is 30.
Long Identifier,Xceed.Wpf.Toolkit.PropertyGrid,PropertyGrid,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyGrid.cs,,The length of the parameter SelectedObjectTypeNameProperty is 30.
Long Identifier,Xceed.Wpf.Toolkit.PropertyGrid,PropertyGrid,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyGrid.cs,,The length of the parameter SelectedPropertyItemChangedEvent is 32.
Long Statement,Xceed.Wpf.Toolkit,BusyIndicator,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\BusyIndicator\Implementation\BusyIndicator.cs,ChangeVisualState,The length of the statement  "      VisualStateManager.GoToState( this' IsContentVisible ? VisualStates.StateVisible : VisualStates.StateHidden' useTransitions ); " is 126.
Long Statement,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,OnWindowStatePropertyChanged,The length of the statement  "        Visibility = DesignerWindowState == Xceed.Wpf.Toolkit.WindowState.Open ? Visibility.Visible : System.Windows.Visibility.Collapsed; " is 130.
Long Statement,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,OnApplyTemplate,The length of the statement  "        _dragWidget.RemoveHandler( UIElement.MouseLeftButtonDownEvent' new MouseButtonEventHandler( HeaderLeftMouseButtonDown ) ); " is 122.
Long Statement,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,OnApplyTemplate,The length of the statement  "        _dragWidget.AddHandler( UIElement.MouseLeftButtonDownEvent' new MouseButtonEventHandler( HeaderLeftMouseButtonDown )' true ); " is 125.
Long Statement,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,OnApplyTemplate,The length of the statement  "        _dragWidget.AddHandler( UIElement.MouseLeftButtonUpEvent' new MouseButtonEventHandler( HeaderMouseLeftButtonUp )' true ); " is 121.
Long Statement,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,OnApplyTemplate,The length of the statement  "      //this is for XBAP applications only. When inside an XBAP the parent container has no height or width until it has loaded. Therefore " is 132.
Long Statement,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,HeaderMouseMove,The length of the statement  "        if( dragWidgetPosition.X < 0 || dragWidgetPosition.X > _dragWidget.ActualWidth || dragWidgetPosition.Y < 0 || dragWidgetPosition.Y > _dragWidget.ActualHeight ) " is 159.
Long Statement,Xceed.Wpf.Toolkit,Spinner,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ButtonSpinner\Implementation\Spinner.cs,OnSpin,The length of the statement  "      ValidSpinDirections valid = e.Direction == SpinDirection.Increase ? ValidSpinDirections.Increase : ValidSpinDirections.Decrease; " is 128.
Long Statement,Xceed.Wpf.Toolkit,CollectionEditor,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\CollectionEditors\Implementation\CollectionEditor.cs,CopyValues,The length of the statement  "      FieldInfo[] myObjectFields = source.GetType().GetFields( BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance ); " is 128.
Long Statement,Xceed.Wpf.Toolkit,CheckComboBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\CheckComboBox\Implementation\CheckComboBox.cs,UpdateText,The length of the statement  "      string newValue = String.Join( Delimiter' SelectedItems.Cast<object>().Select( x => GetItemDisplayValue( x ).ToString() ).ToArray() );  " is 134.
Long Statement,Xceed.Wpf.Toolkit,DateTimePicker,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimePicker\Implementation\DateTimePicker.cs,OnPreviewKeyDown,The length of the statement  "      //if the calendar is open then we don't want to modify the behavior of navigating the calendar control with the Up/Down keys. " is 125.
Long Statement,Xceed.Wpf.Toolkit,DateTimeUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeUpDown.cs,OnPreviewKeyDown,The length of the statement  "              BindingExpression binding = BindingOperations.GetBindingExpression( TextBox' System.Windows.Controls.TextBox.TextProperty ); " is 124.
Long Statement,Xceed.Wpf.Toolkit,DateTimeUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeUpDown.cs,OnTextChanged,The length of the statement  "      DateTime current = Value.HasValue ? Value.Value : DateTime.Parse( DateTime.Now.ToString()' CultureInfo.DateTimeFormat ); " is 120.
Long Statement,Xceed.Wpf.Toolkit,DateTimeUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeUpDown.cs,OnValueChanged,The length of the statement  "      //whenever the value changes we need to parse out the value into out DateTimeInfo segments so we can keep track of the individual pieces " is 136.
Long Statement,Xceed.Wpf.Toolkit,DateTimeUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeUpDown.cs,PerformMouseSelection,The length of the statement  "        if( ( info.StartPosition <= TextBox.SelectionStart ) && ( TextBox.SelectionStart < ( info.StartPosition + info.Length ) ) ) " is 123.
Long Statement,Xceed.Wpf.Toolkit,DateTimeParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeParser.cs,ResolveDateTimeString,The length of the statement  "      string[] timeParts = new string[ 3 ] { currentDate.Hour.ToString()' currentDate.Minute.ToString()' currentDate.Second.ToString() }; " is 131.
Long Statement,Xceed.Wpf.Toolkit,DateTimeParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeParser.cs,ResolveDateTimeString,The length of the statement  "      string[] dateTimeSeparators = new string[] { "'"' " "' "-"' "."' "/"' cultureInfo.DateTimeFormat.DateSeparator' cultureInfo.DateTimeFormat.TimeSeparator }; " is 155.
Long Statement,Xceed.Wpf.Toolkit,DateTimeParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeParser.cs,GetDateParts,The length of the statement  "      var dateFormatParts = cultureInfo.DateTimeFormat.ShortDatePattern.Split( new string[] { cultureInfo.DateTimeFormat.DateSeparator }' StringSplitOptions.RemoveEmptyEntries ).ToList(); " is 181.
Long Statement,Xceed.Wpf.Toolkit,DoubleUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\NumericUpDown\Implementation\DoubleUpDown.cs,ConvertTextToValue,The length of the statement  "        result = FormatString.Contains( "P" ) ? Decimal.ToDouble( ParsePercent( text' CultureInfo ) ) : ParseDouble( text' CultureInfo ); " is 129.
Long Statement,Xceed.Wpf.Toolkit,IntegerUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\NumericUpDown\Implementation\IntegerUpDown.cs,ConvertTextToValue,The length of the statement  "        result = FormatString.Contains( "P" ) ? Decimal.ToInt32( ParsePercent( text' CultureInfo ) ) : ParseInt( text' CultureInfo ); " is 125.
Long Statement,Xceed.Wpf.Toolkit,Magnifier,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Magnifier\Implementation\Magnifier.cs,ResolveViewBox,The length of the statement  "      double correction = ( BorderThickness.Bottom + BorderThickness.Left + BorderThickness.Right + BorderThickness.Top == 0 ) ? 1 : 0; " is 129.
Long Statement,Xceed.Wpf.Toolkit,MaskedTextBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MaskedTextBox\Implementation\MaskedTextBox.cs,ResolveMaskProvider,The length of the statement  "      //do not create a mask provider if the Mask is empty' which can occur if the IncludePrompt and IncludeLiterals properties " is 121.
Long Statement,Xceed.Wpf.Toolkit,MessageBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MessageBox\Implementation\MessageBox.cs,SetImageSource,The length of the statement  "      ImageSource = ( ImageSource )new ImageSourceConverter().ConvertFromString( String.Format( "pack://application:'''/WPFToolkit.Extended;component/MessageBox/Icons/{0}"' iconName ) ); " is 180.
Long Statement,Xceed.Wpf.Toolkit,CollectionEditorDialog,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\CollectionEditors\Implementation\CollectionEditorDialog.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolkit.Extended;component/collectioneditors/implementation/collectioneditord" + " is 129.
Long Statement,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,UpdateItemCheckedState,The length of the statement  "      button.IsChecked = ( currentValue == DependencyProperty.UnsetValue ) ? false : currentValue != null && currentValue.Equals( expectedValue ); " is 140.
Long Statement,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,UpdateFontColor,The length of the statement  "      Color currentColor = ( Color )( ( value == DependencyProperty.UnsetValue ) ? Colors.Black : ( ( SolidColorBrush )value ).Color ); " is 129.
Long Statement,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,UpdateFontBackgroundColor,The length of the statement  "      Color currentColor = ( Color )( ( value == null || value == DependencyProperty.UnsetValue ) ? Colors.Transparent : ( ( SolidColorBrush )value ).Color ); " is 152.
Long Statement,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,UpdateSelectionListType,The length of the statement  "      if( startParagraph != null && endParagraph != null && ( startParagraph.Parent is ListItem ) && ( endParagraph.Parent is ListItem ) && object.ReferenceEquals( ( ( ListItem )startParagraph.Parent ).List' ( ( ListItem )endParagraph.Parent ).List ) ) " is 246.
Long Statement,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolkit.Extended;component/richtextboxformatbar/richtextboxformatbar.xaml"' System.UriKind.Relative); " is 150.
Long Statement,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The length of the statement  "            this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged); " is 133.
Long Statement,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The length of the statement  "            this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged); " is 128.
Long Statement,Xceed.Wpf.Toolkit,RichTextBoxFormatBarManager,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBarManager.cs,RichTextBox_TextChanged,The length of the statement  "      //this fixes the bug when applying text transformations the text would lose it's highlight.  That was because the RichTextBox was losing focus " is 142.
Long Statement,Xceed.Wpf.Toolkit,RichTextBoxFormatBarManager,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBarManager.cs,AttachFormatBarToRichtextBox,The length of the statement  "      //we cannot use the MouseLeftButtonUp event because it is handled by the RichTextBox and does not bubble up to here' so we must " is 127.
Long Statement,Xceed.Wpf.Toolkit,RichTextBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBox\RichTextBox.cs,OnTextPropertyChanged,The length of the statement  "        //to help with performance this is placed on the dispatcher for processing. For some reason when this is done the TextChanged event is fired multiple times " is 155.
Long Statement,Xceed.Wpf.Toolkit,RichTextBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBox\RichTextBox.cs,OnTextPropertyChanged,The length of the statement  "        //forcing the UpdateText method to be called multiple times and the setter of the source property to be set multiple times. To fix this' we simply set the _surpressGetText " is 171.
Long Statement,Xceed.Wpf.Toolkit,RichTextBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBox\RichTextBox.cs,OnTextPropertyChanged,The length of the statement  "        //member to true before the operation and set it to false when the operation completes. This will prevent the Text property from being set multiple times. " is 154.
Long Statement,Xceed.Wpf.Toolkit,RichTextBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBox\RichTextBox.cs,RichTextBox_Loaded,The length of the statement  "        if( binding.UpdateSourceTrigger == UpdateSourceTrigger.Default || binding.UpdateSourceTrigger == UpdateSourceTrigger.LostFocus ) " is 128.
Long Statement,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,MeasureOverride,The length of the statement  "              childSize.Width = CalculateTimelineOffset( dateEnd' availableSize.Width ) - CalculateTimelineOffset( date' availableSize.Width ); " is 129.
Long Statement,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,MeasureOverride,The length of the statement  "              childSize.Height = CalculateTimelineOffset( dateEnd' availableSize.Height ) - CalculateTimelineOffset( date' availableSize.Height ); " is 132.
Long Statement,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,LayoutItems,The length of the statement  "            child.PlacementRectangle.Height = CalculateTimelineOffset( dateEnd' availableSize.Height ) - CalculateTimelineOffset( date' availableSize.Height ); " is 147.
Long Statement,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,LayoutItems,The length of the statement  "                  width = Math.Min( availableSize.Width / ( overlappingElements.Count + 1 )' overlappingElements[ 0 ].PlacementRectangle.Width ); " is 127.
Long Statement,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,LayoutItems,The length of the statement  "            child.PlacementRectangle.Width = CalculateTimelineOffset( dateEnd' availableSize.Width ) - CalculateTimelineOffset( date' availableSize.Width ); " is 144.
Long Statement,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,LayoutItems,The length of the statement  "                  height = Math.Min( availableSize.Height / ( overlappingElements.Count + 1 )' overlappingElements[ 0 ].PlacementRectangle.Height ); " is 130.
Long Statement,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,MouseWheelDown,The length of the statement  "      SetVerticalOffset( VerticalOffset + ( SystemParameters.WheelScrollLines * ( ( Orientation == Orientation.Vertical ) ? 1d : 16d ) ) ); " is 133.
Long Statement,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,MouseWheelUp,The length of the statement  "      SetVerticalOffset( VerticalOffset - ( SystemParameters.WheelScrollLines * ( ( Orientation == Orientation.Vertical ) ? 1d : 16d ) ) ); " is 133.
Long Statement,Xceed.Wpf.Toolkit,TimePicker,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimePicker\Implementation\TimePicker.cs,GenerateTimeListItemsSource,The length of the statement  "          yield return new TimeItem( DateTime.MinValue.Add( time ).ToString( GetTimeFormat()' CultureInfo.CurrentCulture )' time ); " is 121.
Long Statement,Xceed.Wpf.Toolkit,TokenizedTextBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TokenizedTextBox\Implementation\TokenizedTextBox.cs,RichTextBox_PreviewKeyDown,The length of the statement  "        //if a token item is selected' we need to move the caret position to the left of the element so we can grab the InlineUIContainer " is 129.
Long Statement,Xceed.Wpf.Toolkit,TokenizedTextBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TokenizedTextBox\Implementation\TokenizedTextBox.cs,DeleteToken,The length of the statement  "      Inline inlineToRemove = para.Inlines.Where( inline => inline is InlineUIContainer && ( ( inline as InlineUIContainer ).Child as TokenItem ).TokenKey.Equals( e.Parameter ) ).FirstOrDefault(); " is 190.
Long Statement,Xceed.Wpf.Toolkit,Wizard,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Wizard\Implementation\Wizard.cs,CloseParentWindow,The length of the statement  "        //we can only set the DialogResult if the window was opened as modal with the ShowDialog() method. Otherwise an exception would occur " is 133.
Long Statement,Xceed.Wpf.Toolkit.Primitives,Selector,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Primitives\Selector.cs,UpdateSelectedValue,The length of the statement  "      string newValue = String.Join( Delimiter' SelectedItems.Cast<object>().Select( x => GetItemValue( x ).ToString() ).ToArray() ); " is 127.
Long Statement,Xceed.Wpf.Toolkit.Primitives,UpDownBase<T>,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Primitives\UpDownBase.cs,OnMouseWheel,The length of the statement  "      if( !e.Handled && AllowSpin && !IsReadOnly && ( ( TextBox.IsFocused && MouseWheelActiveOnFocus ) || !MouseWheelActiveOnFocus ) ) " is 128.
Long Statement,Xceed.Wpf.Toolkit.Core.Utilities,CalculatorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\CalculatorUtilities.cs,GetCalculatorButtonTypeFromText,The length of the statement  "      //the check for the decimal is not in the switch statement. To help localize we check against the current culture's decimal seperator " is 133.
Long Statement,Xceed.Wpf.Toolkit.PropertyGrid.Editors,CollectionEditor,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\Editors\CollectionEditor.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolkit.Extended;component/propertygrid/implementation/editors/collectionedit" + " is 129.
Long Statement,Xceed.Wpf.Toolkit.PropertyGrid,PropertyGrid,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyGrid.cs,OnSelectedObjectTypeChanged,The length of the statement  "        DisplayNameAttribute displayNameAttribute = newValue.GetCustomAttributes( false ).OfType<DisplayNameAttribute>().FirstOrDefault(); " is 130.
Long Statement,Xceed.Wpf.Toolkit.PropertyGrid,PropertyItem,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyItem.cs,OnValueChanged,The length of the statement  "        PropertyGrid.RaiseEvent( new PropertyValueChangedEventArgs( PropertyGrid.PropertyValueChangedEvent' this' oldValue' newValue ) ); " is 129.
Long Statement,Xceed.Wpf.Toolkit.PropertyGrid,PropertyItem,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyItem.cs,GetChildProperties,The length of the statement  "            propertyItems.Add( PropertyGridUtilities.CreatePropertyItem( descriptor' Instance' PropertyGrid' String.Format( "{0}.{1}"' BindingPath' descriptor.Name )' Level + 1 ) ); " is 169.
Long Statement,Xceed.Wpf.Toolkit.PropertyGrid,PropertyGridUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyGridUtilities.cs,CreateDefaultEditor,The length of the statement  "      else if( propertyItem.PropertyType == typeof( FontFamily ) || propertyItem.PropertyType == typeof( FontWeight ) || propertyItem.PropertyType == typeof( FontStyle ) || propertyItem.PropertyType == typeof( FontStretch ) ) " is 219.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Xceed.Wpf.Toolkit,ButtonSpinner,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ButtonSpinner\Implementation\ButtonSpinner.cs,OnMouseLeftButtonUp,The conditional expression  "mousePosition.X > 0 && mousePosition.X < IncreaseButton.ActualWidth &&              mousePosition.Y > 0 && mousePosition.Y < IncreaseButton.ActualHeight"  is complex.
Complex Conditional,Xceed.Wpf.Toolkit,ButtonSpinner,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ButtonSpinner\Implementation\ButtonSpinner.cs,OnMouseLeftButtonUp,The conditional expression  "mousePosition.X > 0 && mousePosition.X < DecreaseButton.ActualWidth &&              mousePosition.Y > 0 && mousePosition.Y < DecreaseButton.ActualHeight"  is complex.
Complex Conditional,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,HeaderMouseMove,The conditional expression  "dragWidgetPosition.X < 0 || dragWidgetPosition.X > _dragWidget.ActualWidth || dragWidgetPosition.Y < 0 || dragWidgetPosition.Y > _dragWidget.ActualHeight"  is complex.
Complex Conditional,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,UpdateSelectionListType,The conditional expression  "startParagraph != null && endParagraph != null && ( startParagraph.Parent is ListItem ) && ( endParagraph.Parent is ListItem ) && object.ReferenceEquals( ( ( ListItem )startParagraph.Parent ).List' ( ( ListItem )endParagraph.Parent ).List )"  is complex.
Complex Conditional,Xceed.Wpf.Toolkit,RichTextBoxFormatBarManager,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBarManager.cs,RichTextBox_PreviewMouseMove,The conditional expression  "p.X <= 5.0 || p.X >= _richTextBox.ActualWidth - 5 || p.Y <= 3.0 || p.Y >= _richTextBox.ActualHeight - 3"  is complex.
Complex Conditional,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,MeasureOverride,The conditional expression  "( Orientation == Orientation.Vertical && double.IsPositiveInfinity( newAvailableSize.Height ) ) ||            ( Orientation == Orientation.Horizontal && double.IsPositiveInfinity( newAvailableSize.Width ) )"  is complex.
Complex Conditional,Xceed.Wpf.Toolkit,TimePicker,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimePicker\Implementation\TimePicker.cs,GenerateTimeListItemsSource,The conditional expression  "time != null && endTime != null && timeInterval != null && timeInterval.Ticks > 0"  is complex.
Complex Conditional,Xceed.Wpf.Toolkit.Primitives,UpDownBase<T>,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Primitives\UpDownBase.cs,OnMouseWheel,The conditional expression  "!e.Handled && AllowSpin && !IsReadOnly && ( ( TextBox.IsFocused && MouseWheelActiveOnFocus ) || !MouseWheelActiveOnFocus )"  is complex.
Complex Conditional,Xceed.Wpf.Toolkit.PropertyGrid,PropertyGridUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyGridUtilities.cs,CreateDefaultEditor,The conditional expression  "propertyItem.PropertyType == typeof( FontFamily ) || propertyItem.PropertyType == typeof( FontWeight ) || propertyItem.PropertyType == typeof( FontStyle ) || propertyItem.PropertyType == typeof( FontStretch )"  is complex.
Empty Catch Block,Xceed.Wpf.Toolkit,DateTimeUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeUpDown.cs,UpdateDateTime,The method has an empty catch block.
Empty Catch Block,Xceed.Wpf.Toolkit.PropertyGrid,PropertyGrid,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyGrid.cs,GetObjectProperties,The method has an empty catch block.
Empty Catch Block,Xceed.Wpf.Toolkit.PropertyGrid,PropertyItem,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyItem.cs,GetChildProperties,The method has an empty catch block.
Magic Number,Xceed.Wpf.Toolkit,Calculator,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Calculator\Implementation\Calculator.cs,ProcessBackKey,The following statement contains a magic number: if( DisplayText.Length > 1 && !( DisplayText.Length == 2 && DisplayText[ 0 ] == '-' ) )        {          displayText = DisplayText.Remove( DisplayText.Length - 1' 1 );        }        else        {          displayText = "0";          _showNewNumber = true;        }
Magic Number,Xceed.Wpf.Toolkit,Calculator,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Calculator\Implementation\Calculator.cs,SimulateCalculatorButtonClick,The following statement contains a magic number: if( button != null )        {          VisualStateManager.GoToState( button' "Pressed"' true );          DispatcherTimer timer;          if( _timers.ContainsKey( button ) )          {            timer = _timers[ button ];            timer.Stop();          }          else          {            timer = new DispatcherTimer();            timer.Interval = TimeSpan.FromMilliseconds( 100 );            timer.Tick += Timer_Tick;            _timers.Add( button' timer );          }            timer.Start();        }
Magic Number,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,BringToFront,The following statement contains a magic number: if( IsModal )          Canvas.SetZIndex( _modalLayerPanel' index - 2 );
Magic Number,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,CenterChildWindow,The following statement contains a magic number: if( _parentContainer != null )        {          Left = ( _parentContainer.ActualWidth - WindowRoot.ActualWidth ) / 2.0;          Top = ( _parentContainer.ActualHeight - WindowRoot.ActualHeight ) / 2.0;        }
Magic Number,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,CenterChildWindow,The following statement contains a magic number: if( _parentContainer != null )        {          Left = ( _parentContainer.ActualWidth - WindowRoot.ActualWidth ) / 2.0;          Top = ( _parentContainer.ActualHeight - WindowRoot.ActualHeight ) / 2.0;        }
Magic Number,Xceed.Wpf.Toolkit,ColorCanvas,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ColorCanvas\Implementation\ColorCanvas.cs,UpdateColorShadeSelectorPositionAndCalculateColor,The following statement contains a magic number: _colorShadeSelectorTransform.X = p.X - ( _colorShadeSelector.Width / 2 );
Magic Number,Xceed.Wpf.Toolkit,ColorCanvas,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ColorCanvas\Implementation\ColorCanvas.cs,UpdateColorShadeSelectorPositionAndCalculateColor,The following statement contains a magic number: _colorShadeSelectorTransform.Y = p.Y - ( _colorShadeSelector.Height / 2 );
Magic Number,Xceed.Wpf.Toolkit,ColorCanvas,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ColorCanvas\Implementation\ColorCanvas.cs,UpdateColorShadeSelectorPosition,The following statement contains a magic number: _colorShadeSelectorTransform.X = ( p.X * _colorShadingCanvas.Width ) - 5;
Magic Number,Xceed.Wpf.Toolkit,ColorCanvas,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ColorCanvas\Implementation\ColorCanvas.cs,UpdateColorShadeSelectorPosition,The following statement contains a magic number: _colorShadeSelectorTransform.Y = ( p.Y * _colorShadingCanvas.Height ) - 5;
Magic Number,Xceed.Wpf.Toolkit,ColorCanvas,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ColorCanvas\Implementation\ColorCanvas.cs,CalculateColor,The following statement contains a magic number: HsvColor hsv = new HsvColor( 360 - _spectrumSlider.Value' 1' 1 )        {          S = p.X'          V = 1 - p.Y        };
Magic Number,Xceed.Wpf.Toolkit,ColorPicker,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ColorPicker\Implementation\ColorPicker.cs,UpdateRecentColors,The following statement contains a magic number: if( RecentColors.Count > 10 ) //don't allow more than ten' maybe make a property that can be set by the user.          RecentColors.RemoveAt( 0 );
Magic Number,Xceed.Wpf.Toolkit,ColorSpectrumSlider,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ColorCanvas\Implementation\ColorSpectrumSlider.cs,OnValueChanged,The following statement contains a magic number: Color color = ColorUtilities.ConvertHsvToRgb( 360 - newValue' 1' 1 );
Magic Number,Xceed.Wpf.Toolkit,ColorSpectrumSlider,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ColorCanvas\Implementation\ColorSpectrumSlider.cs,CreateSpectrum,The following statement contains a magic number: _pickerBrush.StartPoint = new Point( 0.5' 0 );
Magic Number,Xceed.Wpf.Toolkit,ColorSpectrumSlider,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ColorCanvas\Implementation\ColorSpectrumSlider.cs,CreateSpectrum,The following statement contains a magic number: _pickerBrush.EndPoint = new Point( 0.5' 1 );
Magic Number,Xceed.Wpf.Toolkit,DateTimeUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeUpDown.cs,InitializeDateTimeInfoList,The following statement contains a magic number: while( format.Length > 0 )        {          int elementLength = GetElementLengthByFormat( format );          DateTimeInfo info = null;            switch( format[ 0 ] )          {            case '"':            case '\'':              {                int closingQuotePosition = format.IndexOf( format[ 0 ]' 1 );                info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.Other'                  Length = 1'                  Content = format.Substring( 1' Math.Max( 1' closingQuotePosition - 1 ) )                };                elementLength = Math.Max( 1' closingQuotePosition + 1 );                break;              }            case 'D':            case 'd':              {                string d = format.Substring( 0' elementLength );                if( elementLength == 1 )                  d = "%" + d;                  if( elementLength > 2 )                  info = new DateTimeInfo                  {                    IsReadOnly = true'                    Type = DateTimePart.DayName'                    Format = d                  };                else                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.Day'                    Format = d                  };                break;              }            case 'F':            case 'f':              {                string f = format.Substring( 0' elementLength );                if( elementLength == 1 )                  f = "%" + f;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Millisecond'                  Format = f                };                break;              }            case 'h':              {                string h = format.Substring( 0' elementLength );                if( elementLength == 1 )                  h = "%" + h;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Hour12'                  Format = h                };                break;              }            case 'H':              {                string H = format.Substring( 0' elementLength );                if( elementLength == 1 )                  H = "%" + H;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Hour24'                  Format = H                };                break;              }            case 'M':              {                string M = format.Substring( 0' elementLength );                if( elementLength == 1 )                  M = "%" + M;                  if( elementLength >= 3 )                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.MonthName'                    Format = M                  };                else                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.Month'                    Format = M                  };                break;              }            case 'S':            case 's':              {                string s = format.Substring( 0' elementLength );                if( elementLength == 1 )                  s = "%" + s;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Second'                  Format = s                };                break;              }            case 'T':            case 't':              {                string t = format.Substring( 0' elementLength );                if( elementLength == 1 )                  t = "%" + t;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.AmPmDesignator'                  Format = t                };                break;              }            case 'Y':            case 'y':              {                string y = format.Substring( 0' elementLength );                if( elementLength == 1 )                  y = "%" + y;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Year'                  Format = y                };                break;              }            case '\\':              {                if( format.Length >= 2 )                {                  info = new DateTimeInfo                  {                    IsReadOnly = true'                    Content = format.Substring( 1' 1 )'                    Length = 1'                    Type = DateTimePart.Other                  };                  elementLength = 2;                }                break;              }            case 'g':              {                string g = format.Substring( 0' elementLength );                if( elementLength == 1 )                  g = "%" + g;                  info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.Period'                  Format = format.Substring( 0' elementLength )                };                break;              }            case 'm':              {                string m = format.Substring( 0' elementLength );                if( elementLength == 1 )                  m = "%" + m;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Minute'                  Format = m                };                break;              }            case 'z':              {                string z = format.Substring( 0' elementLength );                if( elementLength == 1 )                  z = "%" + z;                  info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.TimeZone'                  Format = z                };                break;              }            default:              {                elementLength = 1;                info = new DateTimeInfo                {                  IsReadOnly = true'                  Length = 1'                  Content = format[ 0 ].ToString()'                  Type = DateTimePart.Other                };                break;              }          }            _dateTimeInfoList.Add( info );          format = format.Substring( elementLength );        }
Magic Number,Xceed.Wpf.Toolkit,DateTimeUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeUpDown.cs,InitializeDateTimeInfoList,The following statement contains a magic number: while( format.Length > 0 )        {          int elementLength = GetElementLengthByFormat( format );          DateTimeInfo info = null;            switch( format[ 0 ] )          {            case '"':            case '\'':              {                int closingQuotePosition = format.IndexOf( format[ 0 ]' 1 );                info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.Other'                  Length = 1'                  Content = format.Substring( 1' Math.Max( 1' closingQuotePosition - 1 ) )                };                elementLength = Math.Max( 1' closingQuotePosition + 1 );                break;              }            case 'D':            case 'd':              {                string d = format.Substring( 0' elementLength );                if( elementLength == 1 )                  d = "%" + d;                  if( elementLength > 2 )                  info = new DateTimeInfo                  {                    IsReadOnly = true'                    Type = DateTimePart.DayName'                    Format = d                  };                else                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.Day'                    Format = d                  };                break;              }            case 'F':            case 'f':              {                string f = format.Substring( 0' elementLength );                if( elementLength == 1 )                  f = "%" + f;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Millisecond'                  Format = f                };                break;              }            case 'h':              {                string h = format.Substring( 0' elementLength );                if( elementLength == 1 )                  h = "%" + h;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Hour12'                  Format = h                };                break;              }            case 'H':              {                string H = format.Substring( 0' elementLength );                if( elementLength == 1 )                  H = "%" + H;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Hour24'                  Format = H                };                break;              }            case 'M':              {                string M = format.Substring( 0' elementLength );                if( elementLength == 1 )                  M = "%" + M;                  if( elementLength >= 3 )                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.MonthName'                    Format = M                  };                else                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.Month'                    Format = M                  };                break;              }            case 'S':            case 's':              {                string s = format.Substring( 0' elementLength );                if( elementLength == 1 )                  s = "%" + s;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Second'                  Format = s                };                break;              }            case 'T':            case 't':              {                string t = format.Substring( 0' elementLength );                if( elementLength == 1 )                  t = "%" + t;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.AmPmDesignator'                  Format = t                };                break;              }            case 'Y':            case 'y':              {                string y = format.Substring( 0' elementLength );                if( elementLength == 1 )                  y = "%" + y;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Year'                  Format = y                };                break;              }            case '\\':              {                if( format.Length >= 2 )                {                  info = new DateTimeInfo                  {                    IsReadOnly = true'                    Content = format.Substring( 1' 1 )'                    Length = 1'                    Type = DateTimePart.Other                  };                  elementLength = 2;                }                break;              }            case 'g':              {                string g = format.Substring( 0' elementLength );                if( elementLength == 1 )                  g = "%" + g;                  info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.Period'                  Format = format.Substring( 0' elementLength )                };                break;              }            case 'm':              {                string m = format.Substring( 0' elementLength );                if( elementLength == 1 )                  m = "%" + m;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Minute'                  Format = m                };                break;              }            case 'z':              {                string z = format.Substring( 0' elementLength );                if( elementLength == 1 )                  z = "%" + z;                  info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.TimeZone'                  Format = z                };                break;              }            default:              {                elementLength = 1;                info = new DateTimeInfo                {                  IsReadOnly = true'                  Length = 1'                  Content = format[ 0 ].ToString()'                  Type = DateTimePart.Other                };                break;              }          }            _dateTimeInfoList.Add( info );          format = format.Substring( elementLength );        }
Magic Number,Xceed.Wpf.Toolkit,DateTimeUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeUpDown.cs,InitializeDateTimeInfoList,The following statement contains a magic number: while( format.Length > 0 )        {          int elementLength = GetElementLengthByFormat( format );          DateTimeInfo info = null;            switch( format[ 0 ] )          {            case '"':            case '\'':              {                int closingQuotePosition = format.IndexOf( format[ 0 ]' 1 );                info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.Other'                  Length = 1'                  Content = format.Substring( 1' Math.Max( 1' closingQuotePosition - 1 ) )                };                elementLength = Math.Max( 1' closingQuotePosition + 1 );                break;              }            case 'D':            case 'd':              {                string d = format.Substring( 0' elementLength );                if( elementLength == 1 )                  d = "%" + d;                  if( elementLength > 2 )                  info = new DateTimeInfo                  {                    IsReadOnly = true'                    Type = DateTimePart.DayName'                    Format = d                  };                else                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.Day'                    Format = d                  };                break;              }            case 'F':            case 'f':              {                string f = format.Substring( 0' elementLength );                if( elementLength == 1 )                  f = "%" + f;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Millisecond'                  Format = f                };                break;              }            case 'h':              {                string h = format.Substring( 0' elementLength );                if( elementLength == 1 )                  h = "%" + h;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Hour12'                  Format = h                };                break;              }            case 'H':              {                string H = format.Substring( 0' elementLength );                if( elementLength == 1 )                  H = "%" + H;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Hour24'                  Format = H                };                break;              }            case 'M':              {                string M = format.Substring( 0' elementLength );                if( elementLength == 1 )                  M = "%" + M;                  if( elementLength >= 3 )                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.MonthName'                    Format = M                  };                else                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.Month'                    Format = M                  };                break;              }            case 'S':            case 's':              {                string s = format.Substring( 0' elementLength );                if( elementLength == 1 )                  s = "%" + s;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Second'                  Format = s                };                break;              }            case 'T':            case 't':              {                string t = format.Substring( 0' elementLength );                if( elementLength == 1 )                  t = "%" + t;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.AmPmDesignator'                  Format = t                };                break;              }            case 'Y':            case 'y':              {                string y = format.Substring( 0' elementLength );                if( elementLength == 1 )                  y = "%" + y;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Year'                  Format = y                };                break;              }            case '\\':              {                if( format.Length >= 2 )                {                  info = new DateTimeInfo                  {                    IsReadOnly = true'                    Content = format.Substring( 1' 1 )'                    Length = 1'                    Type = DateTimePart.Other                  };                  elementLength = 2;                }                break;              }            case 'g':              {                string g = format.Substring( 0' elementLength );                if( elementLength == 1 )                  g = "%" + g;                  info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.Period'                  Format = format.Substring( 0' elementLength )                };                break;              }            case 'm':              {                string m = format.Substring( 0' elementLength );                if( elementLength == 1 )                  m = "%" + m;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Minute'                  Format = m                };                break;              }            case 'z':              {                string z = format.Substring( 0' elementLength );                if( elementLength == 1 )                  z = "%" + z;                  info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.TimeZone'                  Format = z                };                break;              }            default:              {                elementLength = 1;                info = new DateTimeInfo                {                  IsReadOnly = true'                  Length = 1'                  Content = format[ 0 ].ToString()'                  Type = DateTimePart.Other                };                break;              }          }            _dateTimeInfoList.Add( info );          format = format.Substring( elementLength );        }
Magic Number,Xceed.Wpf.Toolkit,DateTimeUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeUpDown.cs,InitializeDateTimeInfoList,The following statement contains a magic number: while( format.Length > 0 )        {          int elementLength = GetElementLengthByFormat( format );          DateTimeInfo info = null;            switch( format[ 0 ] )          {            case '"':            case '\'':              {                int closingQuotePosition = format.IndexOf( format[ 0 ]' 1 );                info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.Other'                  Length = 1'                  Content = format.Substring( 1' Math.Max( 1' closingQuotePosition - 1 ) )                };                elementLength = Math.Max( 1' closingQuotePosition + 1 );                break;              }            case 'D':            case 'd':              {                string d = format.Substring( 0' elementLength );                if( elementLength == 1 )                  d = "%" + d;                  if( elementLength > 2 )                  info = new DateTimeInfo                  {                    IsReadOnly = true'                    Type = DateTimePart.DayName'                    Format = d                  };                else                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.Day'                    Format = d                  };                break;              }            case 'F':            case 'f':              {                string f = format.Substring( 0' elementLength );                if( elementLength == 1 )                  f = "%" + f;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Millisecond'                  Format = f                };                break;              }            case 'h':              {                string h = format.Substring( 0' elementLength );                if( elementLength == 1 )                  h = "%" + h;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Hour12'                  Format = h                };                break;              }            case 'H':              {                string H = format.Substring( 0' elementLength );                if( elementLength == 1 )                  H = "%" + H;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Hour24'                  Format = H                };                break;              }            case 'M':              {                string M = format.Substring( 0' elementLength );                if( elementLength == 1 )                  M = "%" + M;                  if( elementLength >= 3 )                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.MonthName'                    Format = M                  };                else                  info = new DateTimeInfo                  {                    IsReadOnly = false'                    Type = DateTimePart.Month'                    Format = M                  };                break;              }            case 'S':            case 's':              {                string s = format.Substring( 0' elementLength );                if( elementLength == 1 )                  s = "%" + s;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Second'                  Format = s                };                break;              }            case 'T':            case 't':              {                string t = format.Substring( 0' elementLength );                if( elementLength == 1 )                  t = "%" + t;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.AmPmDesignator'                  Format = t                };                break;              }            case 'Y':            case 'y':              {                string y = format.Substring( 0' elementLength );                if( elementLength == 1 )                  y = "%" + y;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Year'                  Format = y                };                break;              }            case '\\':              {                if( format.Length >= 2 )                {                  info = new DateTimeInfo                  {                    IsReadOnly = true'                    Content = format.Substring( 1' 1 )'                    Length = 1'                    Type = DateTimePart.Other                  };                  elementLength = 2;                }                break;              }            case 'g':              {                string g = format.Substring( 0' elementLength );                if( elementLength == 1 )                  g = "%" + g;                  info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.Period'                  Format = format.Substring( 0' elementLength )                };                break;              }            case 'm':              {                string m = format.Substring( 0' elementLength );                if( elementLength == 1 )                  m = "%" + m;                  info = new DateTimeInfo                {                  IsReadOnly = false'                  Type = DateTimePart.Minute'                  Format = m                };                break;              }            case 'z':              {                string z = format.Substring( 0' elementLength );                if( elementLength == 1 )                  z = "%" + z;                  info = new DateTimeInfo                {                  IsReadOnly = true'                  Type = DateTimePart.TimeZone'                  Format = z                };                break;              }            default:              {                elementLength = 1;                info = new DateTimeInfo                {                  IsReadOnly = true'                  Length = 1'                  Content = format[ 0 ].ToString()'                  Type = DateTimePart.Other                };                break;              }          }            _dateTimeInfoList.Add( info );          format = format.Substring( elementLength );        }
Magic Number,Xceed.Wpf.Toolkit,DateTimeUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeUpDown.cs,UpdateDateTime,The following statement contains a magic number: try        {          switch( info.Type )          {            case DateTimePart.Year:              {                Value = ( ( DateTime )Value ).AddYears( value );                break;              }            case DateTimePart.Month:            case DateTimePart.MonthName:              {                Value = ( ( DateTime )Value ).AddMonths( value );                break;              }            case DateTimePart.Day:            case DateTimePart.DayName:              {                Value = ( ( DateTime )Value ).AddDays( value );                break;              }            case DateTimePart.Hour12:            case DateTimePart.Hour24:              {                Value = ( ( DateTime )Value ).AddHours( value );                break;              }            case DateTimePart.Minute:              {                Value = ( ( DateTime )Value ).AddMinutes( value );                break;              }            case DateTimePart.Second:              {                Value = ( ( DateTime )Value ).AddSeconds( value );                break;              }            case DateTimePart.Millisecond:              {                Value = ( ( DateTime )Value ).AddMilliseconds( value );                break;              }            case DateTimePart.AmPmDesignator:              {                Value = ( ( DateTime )Value ).AddHours( value * 12 );                break;              }            default:              {                break;              }          }        }        catch        {          //this can occur if the date/time = 1/1/0001 12:00:00 AM which is the smallest date allowed.          //I could write code that would validate the date each and everytime but I think that it would be more          //efficient if I just handle the edge case and allow an exeption to occur and swallow it instead.        }
Magic Number,Xceed.Wpf.Toolkit,DateTimeParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeParser.cs,ResolveDateTimeString,The following statement contains a magic number: string[] timeParts = new string[ 3 ] { currentDate.Hour.ToString()' currentDate.Minute.ToString()' currentDate.Second.ToString() };
Magic Number,Xceed.Wpf.Toolkit,DateTimeParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeParser.cs,ResolveDateTimeString,The following statement contains a magic number: for( int i = 0; i < formats.Count; i++ )        {          var f = formats[ i ];          if( !f.Contains( "ddd" ) && !f.Contains( "GMT" ) )          {            if( f.Contains( "M" ) )              dateParts[ "Month" ] = dateTimeParts[ i ];            else if( f.Contains( "d" ) )              dateParts[ "Day" ] = dateTimeParts[ i ];            else if( f.Contains( "y" ) )            {              dateParts[ "Year" ] = dateTimeParts[ i ];                if( dateParts[ "Year" ].Length == 2 )                dateParts[ "Year" ] = string.Format( "{0}{1}"' currentDate.Year / 100' dateParts[ "Year" ] );            }            else if( f.Contains( "h" ) || f.Contains( "H" ) )              timeParts[ 0 ] = dateTimeParts[ i ];            else if( f.Contains( "m" ) )              timeParts[ 1 ] = dateTimeParts[ i ];            else if( f.Contains( "s" ) )              timeParts[ 2 ] = dateTimeParts[ i ];            else if( f.Contains( "t" ) )              designator = dateTimeParts[ i ];          }        }
Magic Number,Xceed.Wpf.Toolkit,DateTimeParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeParser.cs,ResolveDateTimeString,The following statement contains a magic number: for( int i = 0; i < formats.Count; i++ )        {          var f = formats[ i ];          if( !f.Contains( "ddd" ) && !f.Contains( "GMT" ) )          {            if( f.Contains( "M" ) )              dateParts[ "Month" ] = dateTimeParts[ i ];            else if( f.Contains( "d" ) )              dateParts[ "Day" ] = dateTimeParts[ i ];            else if( f.Contains( "y" ) )            {              dateParts[ "Year" ] = dateTimeParts[ i ];                if( dateParts[ "Year" ].Length == 2 )                dateParts[ "Year" ] = string.Format( "{0}{1}"' currentDate.Year / 100' dateParts[ "Year" ] );            }            else if( f.Contains( "h" ) || f.Contains( "H" ) )              timeParts[ 0 ] = dateTimeParts[ i ];            else if( f.Contains( "m" ) )              timeParts[ 1 ] = dateTimeParts[ i ];            else if( f.Contains( "s" ) )              timeParts[ 2 ] = dateTimeParts[ i ];            else if( f.Contains( "t" ) )              designator = dateTimeParts[ i ];          }        }
Magic Number,Xceed.Wpf.Toolkit,DateTimeParser,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimeUpDown\Implementation\DateTimeParser.cs,ResolveDateTimeString,The following statement contains a magic number: for( int i = 0; i < formats.Count; i++ )        {          var f = formats[ i ];          if( !f.Contains( "ddd" ) && !f.Contains( "GMT" ) )          {            if( f.Contains( "M" ) )              dateParts[ "Month" ] = dateTimeParts[ i ];            else if( f.Contains( "d" ) )              dateParts[ "Day" ] = dateTimeParts[ i ];            else if( f.Contains( "y" ) )            {              dateParts[ "Year" ] = dateTimeParts[ i ];                if( dateParts[ "Year" ].Length == 2 )                dateParts[ "Year" ] = string.Format( "{0}{1}"' currentDate.Year / 100' dateParts[ "Year" ] );            }            else if( f.Contains( "h" ) || f.Contains( "H" ) )              timeParts[ 0 ] = dateTimeParts[ i ];            else if( f.Contains( "m" ) )              timeParts[ 1 ] = dateTimeParts[ i ];            else if( f.Contains( "s" ) )              timeParts[ 2 ] = dateTimeParts[ i ];            else if( f.Contains( "t" ) )              designator = dateTimeParts[ i ];          }        }
Magic Number,Xceed.Wpf.Toolkit,Magnifier,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Magnifier\Implementation\Magnifier.cs,Magnifier,The following statement contains a magic number: HeightProperty.OverrideMetadata( typeof( Magnifier )' new FrameworkPropertyMetadata( 100.0 ) );
Magic Number,Xceed.Wpf.Toolkit,Magnifier,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Magnifier\Implementation\Magnifier.cs,Magnifier,The following statement contains a magic number: WidthProperty.OverrideMetadata( typeof( Magnifier )' new FrameworkPropertyMetadata( 100.0 ) );
Magic Number,Xceed.Wpf.Toolkit,MagnifierAdorner,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Magnifier\Implementation\MagnifierAdorner.cs,CalculateViewBoxLocation,The following statement contains a magic number: double left = _currentMousePosition.X - ( ( _magnifier.ViewBox.Width / 2 ) + offsetX );
Magic Number,Xceed.Wpf.Toolkit,MagnifierAdorner,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Magnifier\Implementation\MagnifierAdorner.cs,CalculateViewBoxLocation,The following statement contains a magic number: double top = _currentMousePosition.Y - ( ( _magnifier.ViewBox.Height / 2 ) + offsetY );
Magic Number,Xceed.Wpf.Toolkit,MagnifierAdorner,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Magnifier\Implementation\MagnifierAdorner.cs,ArrangeOverride,The following statement contains a magic number: double x = _currentMousePosition.X - ( _magnifier.DefaultSize.Width / 2 );
Magic Number,Xceed.Wpf.Toolkit,MagnifierAdorner,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Magnifier\Implementation\MagnifierAdorner.cs,ArrangeOverride,The following statement contains a magic number: double y = _currentMousePosition.Y - ( _magnifier.DefaultSize.Height / 2 );
Magic Number,Xceed.Wpf.Toolkit,NumericUpDown<T>,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\NumericUpDown\Implementation\NumericUpDown.cs,ParsePercent,The following statement contains a magic number: result = result / 100;
Magic Number,Xceed.Wpf.Toolkit,CollectionEditorDialog,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\CollectionEditors\Implementation\CollectionEditorDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._propertyGrid = ((Xceed.Wpf.Toolkit.CollectionEditor)(target));              return;              case 2:                            #line 40 "..\..\..\..\CollectionEditors\Implementation\CollectionEditorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkButton_Click);                            #line default              #line hidden              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBarManager,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBarManager.cs,RichTextBox_PreviewMouseMove,The following statement contains a magic number: if( p.X <= 5.0 || p.X >= _richTextBox.ActualWidth - 5 || p.Y <= 3.0 || p.Y >= _richTextBox.ActualHeight - 3 )          HideAdorner();
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBarManager,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBarManager.cs,RichTextBox_PreviewMouseMove,The following statement contains a magic number: if( p.X <= 5.0 || p.X >= _richTextBox.ActualWidth - 5 || p.Y <= 3.0 || p.Y >= _richTextBox.ActualHeight - 3 )          HideAdorner();
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBarManager,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBarManager.cs,RichTextBox_PreviewMouseMove,The following statement contains a magic number: if( p.X <= 5.0 || p.X >= _richTextBox.ActualWidth - 5 || p.Y <= 3.0 || p.Y >= _richTextBox.ActualHeight - 3 )          HideAdorner();
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBarManager,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBarManager.cs,RichTextBox_PreviewMouseMove,The following statement contains a magic number: if( p.X <= 5.0 || p.X >= _richTextBox.ActualWidth - 5 || p.Y <= 3.0 || p.Y >= _richTextBox.ActualHeight - 3 )          HideAdorner();
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBarManager,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBarManager.cs,PositionFormatBar,The following statement contains a magic number: double top = ( mousePosition.Y - 15 ) - adorningEditor.ActualHeight;
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBarManager,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBarManager.cs,PositionFormatBar,The following statement contains a magic number: if( top < 0 )        {          top = mousePosition.Y + 10;        }
Magic Number,Xceed.Wpf.Toolkit,RichTextBoxFormatBarManager,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBarManager.cs,PositionFormatBar,The following statement contains a magic number: if( left + adorningEditor.ActualWidth > _richTextBox.ActualWidth - 20 )        {          left = left - ( adorningEditor.ActualWidth - ( _richTextBox.ActualWidth - left ) );        }
Magic Number,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,AreVirtuallyEqual,The following statement contains a magic number: double d = ( Math.Abs( d1 ) + Math.Abs( d2 ) + 10 ) * 1.0e-15;
Magic Number,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,AreVirtuallyEqual,The following statement contains a magic number: double d = ( Math.Abs( d1 ) + Math.Abs( d2 ) + 10 ) * 1.0e-15;
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,CalculatorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\CalculatorUtilities.cs,GetCalculatorButtonTypeFromText,The following statement contains a magic number: if( text == ( ( char )27 ).ToString() )          return Calculator.CalculatorButtonType.Clear;
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertRgbToHsv,The following statement contains a magic number: if( s == 0 )          h = 0.0;          else        {          if( r == v )            h = ( g - b ) / delta;          else if( g == v )            h = 2 + ( b - r ) / delta;          else if( b == v )            h = 4 + ( r - g ) / delta;            h *= 60;          if( h < 0.0 )            h = h + 360;          }
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertRgbToHsv,The following statement contains a magic number: if( s == 0 )          h = 0.0;          else        {          if( r == v )            h = ( g - b ) / delta;          else if( g == v )            h = 2 + ( b - r ) / delta;          else if( b == v )            h = 4 + ( r - g ) / delta;            h *= 60;          if( h < 0.0 )            h = h + 360;          }
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertRgbToHsv,The following statement contains a magic number: if( s == 0 )          h = 0.0;          else        {          if( r == v )            h = ( g - b ) / delta;          else if( g == v )            h = 2 + ( b - r ) / delta;          else if( b == v )            h = 4 + ( r - g ) / delta;            h *= 60;          if( h < 0.0 )            h = h + 360;          }
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertRgbToHsv,The following statement contains a magic number: if( s == 0 )          h = 0.0;          else        {          if( r == v )            h = ( g - b ) / delta;          else if( g == v )            h = 2 + ( b - r ) / delta;          else if( b == v )            h = 4 + ( r - g ) / delta;            h *= 60;          if( h < 0.0 )            h = h + 360;          }
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertRgbToHsv,The following statement contains a magic number: return new HsvColor        {          H = h'          S = s'          V = v / 255        };
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertHsvToRgb,The following statement contains a magic number: if( s == 0 )        {          r = v;          g = v;          b = v;        }        else        {          int i;          double f' p' q' t;            if( h == 360 )            h = 0;          else            h = h / 60;            i = ( int )Math.Truncate( h );          f = h - i;            p = v * ( 1.0 - s );          q = v * ( 1.0 - ( s * f ) );          t = v * ( 1.0 - ( s * ( 1.0 - f ) ) );            switch( i )          {            case 0:              {                r = v;                g = t;                b = p;                break;              }            case 1:              {                r = q;                g = v;                b = p;                break;              }            case 2:              {                r = p;                g = v;                b = t;                break;              }            case 3:              {                r = p;                g = q;                b = v;                break;              }            case 4:              {                r = t;                g = p;                b = v;                break;              }            default:              {                r = v;                g = p;                b = q;                break;              }          }          }
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertHsvToRgb,The following statement contains a magic number: if( s == 0 )        {          r = v;          g = v;          b = v;        }        else        {          int i;          double f' p' q' t;            if( h == 360 )            h = 0;          else            h = h / 60;            i = ( int )Math.Truncate( h );          f = h - i;            p = v * ( 1.0 - s );          q = v * ( 1.0 - ( s * f ) );          t = v * ( 1.0 - ( s * ( 1.0 - f ) ) );            switch( i )          {            case 0:              {                r = v;                g = t;                b = p;                break;              }            case 1:              {                r = q;                g = v;                b = p;                break;              }            case 2:              {                r = p;                g = v;                b = t;                break;              }            case 3:              {                r = p;                g = q;                b = v;                break;              }            case 4:              {                r = t;                g = p;                b = v;                break;              }            default:              {                r = v;                g = p;                b = q;                break;              }          }          }
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertHsvToRgb,The following statement contains a magic number: if( s == 0 )        {          r = v;          g = v;          b = v;        }        else        {          int i;          double f' p' q' t;            if( h == 360 )            h = 0;          else            h = h / 60;            i = ( int )Math.Truncate( h );          f = h - i;            p = v * ( 1.0 - s );          q = v * ( 1.0 - ( s * f ) );          t = v * ( 1.0 - ( s * ( 1.0 - f ) ) );            switch( i )          {            case 0:              {                r = v;                g = t;                b = p;                break;              }            case 1:              {                r = q;                g = v;                b = p;                break;              }            case 2:              {                r = p;                g = v;                b = t;                break;              }            case 3:              {                r = p;                g = q;                b = v;                break;              }            case 4:              {                r = t;                g = p;                b = v;                break;              }            default:              {                r = v;                g = p;                b = q;                break;              }          }          }
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertHsvToRgb,The following statement contains a magic number: if( s == 0 )        {          r = v;          g = v;          b = v;        }        else        {          int i;          double f' p' q' t;            if( h == 360 )            h = 0;          else            h = h / 60;            i = ( int )Math.Truncate( h );          f = h - i;            p = v * ( 1.0 - s );          q = v * ( 1.0 - ( s * f ) );          t = v * ( 1.0 - ( s * ( 1.0 - f ) ) );            switch( i )          {            case 0:              {                r = v;                g = t;                b = p;                break;              }            case 1:              {                r = q;                g = v;                b = p;                break;              }            case 2:              {                r = p;                g = v;                b = t;                break;              }            case 3:              {                r = p;                g = q;                b = v;                break;              }            case 4:              {                r = t;                g = p;                b = v;                break;              }            default:              {                r = v;                g = p;                b = q;                break;              }          }          }
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertHsvToRgb,The following statement contains a magic number: if( s == 0 )        {          r = v;          g = v;          b = v;        }        else        {          int i;          double f' p' q' t;            if( h == 360 )            h = 0;          else            h = h / 60;            i = ( int )Math.Truncate( h );          f = h - i;            p = v * ( 1.0 - s );          q = v * ( 1.0 - ( s * f ) );          t = v * ( 1.0 - ( s * ( 1.0 - f ) ) );            switch( i )          {            case 0:              {                r = v;                g = t;                b = p;                break;              }            case 1:              {                r = q;                g = v;                b = p;                break;              }            case 2:              {                r = p;                g = v;                b = t;                break;              }            case 3:              {                r = p;                g = q;                b = v;                break;              }            case 4:              {                r = t;                g = p;                b = v;                break;              }            default:              {                r = v;                g = p;                b = q;                break;              }          }          }
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertHsvToRgb,The following statement contains a magic number: return Color.FromArgb( 255' ( byte )( r * 255 )' ( byte )( g * 255 )' ( byte )( b * 255 ) );
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertHsvToRgb,The following statement contains a magic number: return Color.FromArgb( 255' ( byte )( r * 255 )' ( byte )( g * 255 )' ( byte )( b * 255 ) );
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertHsvToRgb,The following statement contains a magic number: return Color.FromArgb( 255' ( byte )( r * 255 )' ( byte )( g * 255 )' ( byte )( b * 255 ) );
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,ConvertHsvToRgb,The following statement contains a magic number: return Color.FromArgb( 255' ( byte )( r * 255 )' ( byte )( g * 255 )' ( byte )( b * 255 ) );
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,GenerateHsvSpectrum,The following statement contains a magic number: List<Color> colorsList = new List<Color>( 8 );
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,GenerateHsvSpectrum,The following statement contains a magic number: for( int i = 0; i < 29; i++ )        {          colorsList.Add( ColorUtilities.ConvertHsvToRgb( i * 12' 1' 1 ) );        }
Magic Number,Xceed.Wpf.Toolkit.Core.Utilities,ColorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\ColorUtilities.cs,GenerateHsvSpectrum,The following statement contains a magic number: for( int i = 0; i < 29; i++ )        {          colorsList.Add( ColorUtilities.ConvertHsvToRgb( i * 12' 1' 1 ) );        }
Magic Number,Xceed.Wpf.Toolkit.Mag.Converters,BorderThicknessToStrokeThicknessConverter,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Magnifier\Implementation\Converters\BorderThicknessToStrokeThicknessConverter.cs,Convert,The following statement contains a magic number: return ( thickness.Bottom + thickness.Left + thickness.Right + thickness.Top ) / 4;
Magic Number,Xceed.Wpf.Toolkit.Mag.Converters,RadiusConverter,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Magnifier\Implementation\Converters\RadiusConverter.cs,Convert,The following statement contains a magic number: return ( double )value * 2;
Magic Number,Xceed.Wpf.Toolkit.PropertyGrid.Converters,ExpandableObjectMarginConverter,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\Converters\ExpandableObjectMarginConverter.cs,Convert,The following statement contains a magic number: return new Thickness( childLevel * 15' 0' 0' 0 );
Magic Number,Xceed.Wpf.Toolkit.PropertyGrid.Editors,CheckBoxEditor,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\Editors\CheckBoxEditor.cs,SetControlProperties,The following statement contains a magic number: Editor.Margin = new Thickness( 5' 0' 0' 0 );
Magic Number,Xceed.Wpf.Toolkit.PropertyGrid.Editors,TextBlockEditor,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\Editors\TextBlockEditor.cs,SetControlProperties,The following statement contains a magic number: Editor.Margin = new System.Windows.Thickness( 5' 0' 0' 0 );
Magic Number,Xceed.Wpf.Toolkit.PropertyGrid,PropertyGrid,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\PropertyGrid.cs,SetDragThumbMargin,The following statement contains a magic number: if( isCategorized )          _dragThumb.Margin = new Thickness( 6' 0' 0' 0 );        else          _dragThumb.Margin = new Thickness( -1' 0' 0' 0 );
Duplicate Code,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,LayoutItems,The method contains a code clone-set at the following line numbers (starting from the method definition): ((130' 154)' (417' 441))
Duplicate Code,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,LayoutItems,The method contains a code clone-set at the following line numbers (starting from the method definition): ((144' 165)' (259' 280))
Duplicate Code,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,LayoutItems,The method contains a code clone-set at the following line numbers (starting from the method definition): ((431' 452)' (546' 567))
Missing Default,Xceed.Wpf.Toolkit,CalculatorUpDown,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\CalculatorUpDown\Implementation\CalculatorUpDown.cs,OnKeyDown,The following switch statement is missing a default case: switch( e.Key )        {          case Key.Enter:            {              if( EnterClosesCalculator && IsOpen )                CloseCalculatorUpDown();              break;            }          case Key.Escape:            {              CloseCalculatorUpDown();              e.Handled = true;              break;            }          case Key.Tab:            {              CloseCalculatorUpDown();              break;            }        }
Missing Default,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,OnKeyDown,The following switch statement is missing a default case: switch( e.Key )          {            case Key.Left:              this.Left -= _horizaontalOffset;              e.Handled = true;              break;              case Key.Right:              this.Left += _horizaontalOffset;              e.Handled = true;              break;              case Key.Down:              this.Top += _verticalOffset;              e.Handled = true;              break;              case Key.Up:              this.Top -= _verticalOffset;              e.Handled = true;              break;          }
Missing Default,Xceed.Wpf.Toolkit,ChildWindow,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ChildWindow\Implementation\ChildWindow.cs,SetWindowState,The following switch statement is missing a default case: switch( state )        {          case WindowState.Closed:            {              ExecuteClose();              break;            }          case WindowState.Open:            {              ExecuteOpen();              break;            }        }
Missing Default,Xceed.Wpf.Toolkit,ColorPicker,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\ColorPicker\Implementation\ColorPicker.cs,OnKeyDown,The following switch statement is missing a default case: switch( e.Key )        {          case Key.Escape:          case Key.Tab:            {              CloseColorPicker();              break;            }        }
Missing Default,Xceed.Wpf.Toolkit,DateTimePicker,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DateTimePicker\Implementation\DateTimePicker.cs,OnKeyDown,The following switch statement is missing a default case: switch( e.Key )        {          case Key.Escape:          case Key.Tab:            {              CloseDateTimePicker();              break;            }        }
Missing Default,Xceed.Wpf.Toolkit,DropDownButton,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\DropDownButton\Implementation\DropDownButton.cs,OnKeyDown,The following switch statement is missing a default case: switch( e.Key )        {          case Key.Escape:            {              CloseDropDown();              break;            }        }
Missing Default,Xceed.Wpf.Toolkit,MultiLineTextEditor,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MultiLineTextEditor\Implementation\MultiLineTextEditor.cs,OnKeyDown,The following switch statement is missing a default case: switch( e.Key )        {          case Key.Escape:          case Key.Tab:            {              CloseEditor();              break;            }        }
Missing Default,Xceed.Wpf.Toolkit,MessageBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MessageBox\Implementation\MessageBox.cs,GetDefaultButtonFromDefaultResult,The following switch statement is missing a default case: switch( _defaultResult )        {          case MessageBoxResult.Cancel:            defaultButton = GetMessageBoxButton( "PART_CancelButton" );            break;          case MessageBoxResult.No:            defaultButton = GetMessageBoxButton( "PART_NoButton" );            break;          case MessageBoxResult.OK:            defaultButton = GetMessageBoxButton( "PART_OkButton" );            break;          case MessageBoxResult.Yes:            defaultButton = GetMessageBoxButton( "PART_YesButton" );            break;          case MessageBoxResult.None:            defaultButton = GetDefaultButton();            break;        }
Missing Default,Xceed.Wpf.Toolkit,MessageBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MessageBox\Implementation\MessageBox.cs,GetDefaultButton,The following switch statement is missing a default case: switch( _button )        {          case MessageBoxButton.OK:          case MessageBoxButton.OKCancel:            defaultButton = GetMessageBoxButton( "PART_OkButton" );            break;          case MessageBoxButton.YesNo:          case MessageBoxButton.YesNoCancel:            defaultButton = GetMessageBoxButton( "PART_YesButton" );            break;        }
Missing Default,Xceed.Wpf.Toolkit,MessageBox,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\MessageBox\Implementation\MessageBox.cs,Button_Click,The following switch statement is missing a default case: switch( button.Name )        {          case "PART_NoButton":            MessageBoxResult = MessageBoxResult.No;            break;          case "PART_YesButton":            MessageBoxResult = MessageBoxResult.Yes;            break;          case "PART_CloseButton":          case "PART_CancelButton":            MessageBoxResult = MessageBoxResult.Cancel;            break;          case "PART_OkButton":            MessageBoxResult = MessageBoxResult.OK;            break;        }
Missing Default,Xceed.Wpf.Toolkit,CollectionEditorDialog,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\CollectionEditors\Implementation\CollectionEditorDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this._propertyGrid = ((Xceed.Wpf.Toolkit.CollectionEditor)(target));              return;              case 2:                            #line 40 "..\..\..\..\CollectionEditors\Implementation\CollectionEditorDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkButton_Click);                            #line default              #line hidden              return;              }
Missing Default,Xceed.Wpf.Toolkit,RichTextBoxFormatBar,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this._window = ((Xceed.Wpf.Toolkit.RichTextBoxFormatBar)(target));              return;              case 2:              this._dragWidget = ((System.Windows.Controls.Primitives.Thumb)(target));                            #line 373 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._dragWidget.DragDelta += new System.Windows.Controls.Primitives.DragDeltaEventHandler(this.DragWidget_DragDelta);                            #line default              #line hidden              return;              case 3:              this._cmbFontFamilies = ((System.Windows.Controls.ComboBox)(target));                            #line 380 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontFamilies.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontFamily_SelectionChanged);                            #line default              #line hidden              return;              case 4:              this._cmbFontSizes = ((System.Windows.Controls.ComboBox)(target));                            #line 386 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._cmbFontSizes.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.FontSize_SelectionChanged);                            #line default              #line hidden              return;              case 5:              this._btnBullets = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 395 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnBullets.Click += new System.Windows.RoutedEventHandler(this.Bullets_Clicked);                            #line default              #line hidden              return;              case 6:              this._btnNumbers = ((System.Windows.Controls.Primitives.ToggleButton)(target));                            #line 404 "..\..\..\RichTextBoxFormatBar\RichTextBoxFormatBar.xaml"              this._btnNumbers.Click += new System.Windows.RoutedEventHandler(this.Numbers_Clicked);                            #line default              #line hidden              return;              case 7:              this._btnBold = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 8:              this._btnItalic = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 9:              this._btnUnderline = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 10:              this._btnAlignLeft = ((System.Windows.Controls.RadioButton)(target));              return;              case 11:              this._btnAlignCenter = ((System.Windows.Controls.RadioButton)(target));              return;              case 12:              this._btnAlignRight = ((System.Windows.Controls.RadioButton)(target));              return;              case 13:              this._cmbFontBackgroundColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              case 14:              this._cmbFontColor = ((Xceed.Wpf.Toolkit.ColorPicker)(target));              return;              }
Missing Default,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,LayoutItems,The following switch statement is missing a default case: switch( OverlapBehavior )            {                //---------------------------------------------------------------------              //              // OverlapBehavior == None (Vertical)              //              //---------------------------------------------------------------------                case OverlapBehavior.None:                  #region OverlapBehavior == None (Vertical)                  child.PlacementRectangle.X = 0;                child.PlacementRectangle.Width = child.Element.DesiredSize.Width;                  break;                  #endregion                //---------------------------------------------------------------------              //              // OverlapBehavior == Hide (Vertical)              //              //---------------------------------------------------------------------                case OverlapBehavior.Hide:                  #region OverlapBehavior = Hide                  overlappingElements.Clear();                  foreach( DateElement compare in _visibleElements )                {                  if( child == compare )                    break;                    Rect childRect = child.PlacementRectangle;                  Rect compareRect = compare.PlacementRectangle;                    if( childRect.Top >= compareRect.Top && childRect.Top < compareRect.Bottom )                  {                    overlappingElements.Add( compare );                  }                }                  if( overlappingElements.Count > 0 )                {                  child.PlacementRectangle.X = 0;                  child.PlacementRectangle.Y = 0;                  child.PlacementRectangle.Width = 0;                  child.PlacementRectangle.Height = 0;                }                else                {                  child.PlacementRectangle.X = 0;                  child.PlacementRectangle.Width = child.Element.DesiredSize.Width;                }                  break;                  #endregion                //---------------------------------------------------------------------              //              // OverlapBehavior == Stretch (Vertical)              //              //---------------------------------------------------------------------                case OverlapBehavior.Stretch:                  #region OverlapBehavior = Stretch                  // find the first gap at the desired vertical (Y) location (note that in doing this' we                 // only need to look for elements that intersect at the "top" of the item that is being                // placed because the _VisibleElements collection has been sorted so that the first                 // items come first--this means there won't be anything "below" the current item that                // isn't also below the current item                  // find all overlapping elements                  overlappingElements.Clear();                  foreach( DateElement compare in _visibleElements )                {                  if( child == compare )                    break;                    Rect childRect = child.PlacementRectangle;                  Rect compareRect = compare.PlacementRectangle;                    if( childRect.Top >= compareRect.Top && childRect.Top < compareRect.Bottom )                  {                    overlappingElements.Add( compare );                  }                }                  // sort the elements according to their "left" value so that as we search through                // the list we are able to identiy gaps                  overlappingElements.Sort( CompareElementsByLeft );                  // initialize left and width such that the item will be stretch to fill the available                 // space and if there are no overlapping items' skip to the end                  double left = 0;                double width = availableSize.Width;                  if( overlappingElements.Count > 0 )                {                    bool foundGap = false;                    // now' look for a gap (there is a good chance that there won't be one' but if there is                   // then we will place the item in it)                    for( int i = 0; i < overlappingElements.Count; i++ )                  {                    Rect r = overlappingElements[ i ].PlacementRectangle;                      // if this is the first overlapping element' then look for a gap at the beginning                    if( i == 0 )                    {                      if( r.Left > 0 )                      {                        left = 0;                        width = r.Left;                        foundGap = true;                        break;                      }                    }                      // if this is the last overlapping element                    if( i == overlappingElements.Count - 1 )                    {                      //left = r.Right;                      break;                    }                      // if this is an element somewhere in the middle' then                     else                    {                      Rect n = overlappingElements[ i + 1 ].PlacementRectangle;                      if( ( n.Left - r.Right ) > 0 )                      {                        left = r.Right;                        width = n.Left - r.Right;                        foundGap = true;                        break;                      }                    }                    }                    // if we didn't find a gap' we need to make one by scooting the overlapping elements                   // over and then placing the item at the end                    if( !foundGap )                  {                    width = Math.Min( availableSize.Width / ( overlappingElements.Count + 1 )' overlappingElements[ 0 ].PlacementRectangle.Width );                    left = 0;                      foreach( DateElement e in overlappingElements )                    {                      e.PlacementRectangle.Width = width;                      e.PlacementRectangle.X = left;                      left += width;                    }                  }                }                  child.PlacementRectangle.X = left;                  if( double.IsPositiveInfinity( width ) )                {                  child.PlacementRectangle.Width = child.Element.DesiredSize.Width;                }                else                {                  child.PlacementRectangle.Width = width;                }                  break;                  #endregion                //---------------------------------------------------------------------              //              // OverlapBehavior == Stack (Vertical)              //              //---------------------------------------------------------------------                case OverlapBehavior.Stack:                  #region OverlapBehavior = Stack;                  overlappingElements.Clear();                  foreach( DateElement compare in _visibleElements )                {                  if( child == compare )                    break;                    Rect childRect = child.PlacementRectangle;                  Rect compareRect = compare.PlacementRectangle;                    if( childRect.Top >= compareRect.Top && childRect.Top < compareRect.Bottom )                  {                    overlappingElements.Add( compare );                  }                }                  // sort the elements according to their "left" value so that as we search through                // the list we are able to identiy gaps                  overlappingElements.Sort( CompareElementsByLeft );                  // initialize left and width values' width will always be it's desired size                  left = 0;                child.PlacementRectangle.Width = child.Element.DesiredSize.Width;                  // find the first gap that is big enough to accomodate the current item                  for( int i = 0; i < overlappingElements.Count; i++ )                {                  Rect r = overlappingElements[ i ].PlacementRectangle;                    if( i == 0 )                  {                    if( r.Left >= child.PlacementRectangle.Width )                    {                      left = 0;                      break;                    }                  }                    if( i == overlappingElements.Count - 1 )                  {                    left = r.Right;                    break;                  }                  else                  {                    Rect n = overlappingElements[ i + 1 ].PlacementRectangle;                    if( ( n.Left - r.Right ) >= child.PlacementRectangle.Width )                    {                      left = r.Right;                      break;                    }                  }                }                  child.PlacementRectangle.X = left;                  break;                  #endregion            }
Missing Default,Xceed.Wpf.Toolkit,TimelinePanel,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimelinePanel\Implementation\TimelinePanel.cs,LayoutItems,The following switch statement is missing a default case: switch( OverlapBehavior )            {                //---------------------------------------------------------------------              //              // OverlapBehavior == None (Horizontal)              //              //---------------------------------------------------------------------                case OverlapBehavior.None:                  #region OverlapBehavior == None (Horizontal)                  child.PlacementRectangle.Y = 0;                child.PlacementRectangle.Height = child.Element.DesiredSize.Height;                  break;                  #endregion                //---------------------------------------------------------------------              //              // OverlapBehavior == Hide (Horizontal)              //              //---------------------------------------------------------------------                case OverlapBehavior.Hide:                  #region OverlapBehavior = Hide (Horizontal)                  overlappingElements.Clear();                  foreach( DateElement compare in _visibleElements )                {                  if( child == compare )                    break;                    Rect childRect = child.PlacementRectangle;                  Rect compareRect = compare.PlacementRectangle;                    if( childRect.Left >= compareRect.Left && childRect.Left < compareRect.Right )                  {                    overlappingElements.Add( compare );                  }                }                  if( overlappingElements.Count > 0 )                {                  child.PlacementRectangle.X = 0;                  child.PlacementRectangle.Y = 0;                  child.PlacementRectangle.Width = 0;                  child.PlacementRectangle.Height = 0;                }                else                {                  child.PlacementRectangle.Y = 0;                  child.PlacementRectangle.Height = child.Element.DesiredSize.Height;                }                  break;                  #endregion                //---------------------------------------------------------------------              //              // OverlapBehavior == Stretch (Horizontal)              //              //---------------------------------------------------------------------                case OverlapBehavior.Stretch:                  #region OverlapBehavior = Stretch                  // find the first gap at the desired vertical (Y) location (note that in doing this' we                 // only need to look for elements that intersect at the "top" of the item that is being                // placed because the _VisibleElements collection has been sorted so that the first                 // items come first--this means there won't be anything "below" the current item that                // isn't also below the current item                  // find all overlapping elements                  overlappingElements.Clear();                  foreach( DateElement compare in _visibleElements )                {                  if( child == compare )                    break;                    Rect childRect = child.PlacementRectangle;                  Rect compareRect = compare.PlacementRectangle;                    if( childRect.Left >= compareRect.Left && childRect.Left < compareRect.Right )                  {                    overlappingElements.Add( compare );                  }                }                  // sort the elements according to their "left" value so that as we search through                // the list we are able to identiy gaps                  overlappingElements.Sort( CompareElementsByTop );                  // initialize left and width such that the item will be stretch to fill the available                 // space and if there are no overlapping items' skip to the end                  double top = 0;                double height = availableSize.Height;                  if( overlappingElements.Count > 0 )                {                    bool foundGap = false;                    // now' look for a gap (there is a good chance that there won't be one' but if there is                   // then we will place the item in it)                    for( int i = 0; i < overlappingElements.Count; i++ )                  {                    Rect r = overlappingElements[ i ].PlacementRectangle;                      // if this is the first overlapping element' then look for a gap at the beginning                    if( i == 0 )                    {                      if( r.Top > 0 )                      {                        top = 0;                        height = r.Top;                        foundGap = true;                        break;                      }                    }                      // if this is the last overlapping element                    if( i == overlappingElements.Count - 1 )                    {                      //left = r.Right;                      break;                    }                      // if this is an element somewhere in the middle' then                     else                    {                      Rect n = overlappingElements[ i + 1 ].PlacementRectangle;                      if( ( n.Top - r.Bottom ) > 0 )                      {                        top = r.Bottom;                        height = n.Top - r.Bottom;                        foundGap = true;                        break;                      }                    }                    }                    // if we didn't find a gap' we need to make one by scooting the overlapping elements                   // over and then placing the item at the end                    if( !foundGap )                  {                    height = Math.Min( availableSize.Height / ( overlappingElements.Count + 1 )' overlappingElements[ 0 ].PlacementRectangle.Height );                    top = 0;                      foreach( DateElement e in overlappingElements )                    {                      e.PlacementRectangle.Height = height;                      e.PlacementRectangle.Y = top;                      top += height;                    }                  }                }                  child.PlacementRectangle.Y = top;                  if( double.IsPositiveInfinity( height ) )                {                  child.PlacementRectangle.Height = child.Element.DesiredSize.Height;                }                else                {                  child.PlacementRectangle.Height = height;                }                  break;                  #endregion                //---------------------------------------------------------------------              //              // OverlapBehavior == Stack (Horizontal)              //              //---------------------------------------------------------------------                case OverlapBehavior.Stack:                  #region OverlapBehavior = Stack;                  overlappingElements.Clear();                  foreach( DateElement compare in _visibleElements )                {                  if( child == compare )                    break;                    Rect childRect = child.PlacementRectangle;                  Rect compareRect = compare.PlacementRectangle;                    if( childRect.Left >= compareRect.Left && childRect.Left < compareRect.Right )                  {                    overlappingElements.Add( compare );                  }                }                  // sort the elements according to their "left" value so that as we search through                // the list we are able to identiy gaps                  overlappingElements.Sort( CompareElementsByTop );                  // initialize left and width values' width will always be it's desired size                  top = 0;                child.PlacementRectangle.Height = child.Element.DesiredSize.Height;                  // find the first gap that is big enough to accomodate the current item                  for( int i = 0; i < overlappingElements.Count; i++ )                {                  Rect r = overlappingElements[ i ].PlacementRectangle;                    if( i == 0 )                  {                    if( r.Top >= child.PlacementRectangle.Height )                    {                      top = 0;                      break;                    }                  }                    if( i == overlappingElements.Count - 1 )                  {                    top = r.Bottom;                    break;                  }                  else                  {                    Rect n = overlappingElements[ i + 1 ].PlacementRectangle;                    if( ( n.Top - r.Bottom ) >= child.PlacementRectangle.Height )                    {                      top = r.Bottom;                      break;                    }                  }                }                  child.PlacementRectangle.Y = top;                  break;                  #endregion            }
Missing Default,Xceed.Wpf.Toolkit,TimePicker,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\TimePicker\Implementation\TimePicker.cs,OnKeyDown,The following switch statement is missing a default case: switch( e.Key )        {          case Key.Escape:          case Key.Tab:            {              CloseTimePicker();              break;            }        }
Missing Default,Xceed.Wpf.Toolkit.Core.Converters,WizardPageButtonVisibilityConverter,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Converters\WizardPageButtonVisibilityConverter.cs,Convert,The following switch statement is missing a default case: switch( wizardPageVisibility )        {          case WizardPageButtonVisibility.Inherit:            visibility = wizardVisibility;            break;          case WizardPageButtonVisibility.Collapsed:            visibility = Visibility.Collapsed;            break;          case WizardPageButtonVisibility.Hidden:            visibility = Visibility.Hidden;            break;          case WizardPageButtonVisibility.Visible:            visibility = Visibility.Visible;            break;        }
Missing Default,Xceed.Wpf.Toolkit.Primitives,UpDownBase<T>,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Primitives\UpDownBase.cs,OnPreviewKeyDown,The following switch statement is missing a default case: switch( e.Key )        {          case Key.Up:            {              if( AllowSpin && !IsReadOnly )                DoIncrement();              e.Handled = true;              break;            }          case Key.Down:            {              if( AllowSpin && !IsReadOnly )                DoDecrement();              e.Handled = true;              break;            }          case Key.Enter:            {              if( !IsReadOnly )              {                var binding = BindingOperations.GetBindingExpression( TextBox' System.Windows.Controls.TextBox.TextProperty );                binding.UpdateSource();              }              break;            }        }
Missing Default,Xceed.Wpf.Toolkit.Core.Utilities,CalculatorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\CalculatorUtilities.cs,GetCalculatorButtonTypeFromText,The following switch statement is missing a default case: switch( text )        {          case "0":            return Calculator.CalculatorButtonType.Zero;          case "1":            return Calculator.CalculatorButtonType.One;          case "2":            return Calculator.CalculatorButtonType.Two;          case "3":            return Calculator.CalculatorButtonType.Three;          case "4":            return Calculator.CalculatorButtonType.Four;          case "5":            return Calculator.CalculatorButtonType.Five;          case "6":            return Calculator.CalculatorButtonType.Six;          case "7":            return Calculator.CalculatorButtonType.Seven;          case "8":            return Calculator.CalculatorButtonType.Eight;          case "9":            return Calculator.CalculatorButtonType.Nine;          case "+":            return Calculator.CalculatorButtonType.Add;          case "-":            return Calculator.CalculatorButtonType.Subtract;          case "*":            return Calculator.CalculatorButtonType.Multiply;          case "/":            return Calculator.CalculatorButtonType.Divide;          case "%":            return Calculator.CalculatorButtonType.Percent;          case "\b":            return Calculator.CalculatorButtonType.Back;          case "\r":          case "=":            return Calculator.CalculatorButtonType.Equal;        }
Missing Default,Xceed.Wpf.Toolkit.Core.Utilities,CalculatorUtilities,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\Core\Utilities\CalculatorUtilities.cs,GetCalculatorButtonContent,The following switch statement is missing a default case: switch( type )        {          case Calculator.CalculatorButtonType.Add:            content = "+";            break;          case Calculator.CalculatorButtonType.Back:            content = "Back";            break;          case Calculator.CalculatorButtonType.Cancel:            content = "CE";            break;          case Calculator.CalculatorButtonType.Clear:            content = "C";            break;          case Calculator.CalculatorButtonType.Decimal:            content = CultureInfo.CurrentCulture.NumberFormat.CurrencyDecimalSeparator;            break;          case Calculator.CalculatorButtonType.Divide:            content = "/";            break;          case Calculator.CalculatorButtonType.Eight:            content = "8";            break;          case Calculator.CalculatorButtonType.Equal:            content = "=";            break;          case Calculator.CalculatorButtonType.Five:            content = "5";            break;          case Calculator.CalculatorButtonType.Four:            content = "4";            break;          case Calculator.CalculatorButtonType.Fraction:            content = "1/x";            break;          case Calculator.CalculatorButtonType.MAdd:            content = "M+";            break;          case Calculator.CalculatorButtonType.MC:            content = "MC";            break;          case Calculator.CalculatorButtonType.MR:            content = "MR";            break;          case Calculator.CalculatorButtonType.MS:            content = "MS";            break;          case Calculator.CalculatorButtonType.MSub:            content = "M-";            break;          case Calculator.CalculatorButtonType.Multiply:            content = "*";            break;          case Calculator.CalculatorButtonType.Nine:            content = "9";            break;          case Calculator.CalculatorButtonType.None:            break;          case Calculator.CalculatorButtonType.One:            content = "1";            break;          case Calculator.CalculatorButtonType.Percent:            content = "%";            break;          case Calculator.CalculatorButtonType.Seven:            content = "7";            break;          case Calculator.CalculatorButtonType.Negate:            content = "+/-";            break;          case Calculator.CalculatorButtonType.Six:            content = "6";            break;          case Calculator.CalculatorButtonType.Sqrt:            content = "Sqrt";            break;          case Calculator.CalculatorButtonType.Subtract:            content = "-";            break;          case Calculator.CalculatorButtonType.Three:            content = "3";            break;          case Calculator.CalculatorButtonType.Two:            content = "2";            break;          case Calculator.CalculatorButtonType.Zero:            content = "0";            break;        }
Missing Default,Xceed.Wpf.Toolkit.PropertyGrid.Converters,ValueSourceToImagePathConverter,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\Converters\ValueSourceToImagePathConverter.cs,Convert,The following switch statement is missing a default case: switch( bvs )        {          case BaseValueSource.Inherited:          case BaseValueSource.DefaultStyle:          case BaseValueSource.ImplicitStyleReference:            imageName = "Inheritance11";            break;          case BaseValueSource.DefaultStyleTrigger:            break;          case BaseValueSource.Style:            imageName = "Style11";            break;            case BaseValueSource.Local:            imageName = "Local11";            break;        }
Missing Default,Xceed.Wpf.Toolkit.PropertyGrid.Converters,ValueSourceToToolTipConverter,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\Converters\ValueSourceToToolTipConverter.cs,Convert,The following switch statement is missing a default case: switch( bvs )        {          case BaseValueSource.Inherited:          case BaseValueSource.DefaultStyle:          case BaseValueSource.ImplicitStyleReference:            toolTip = "Inheritance";            break;          case BaseValueSource.Style:            toolTip = "Style Setter";            break;            case BaseValueSource.Local:            toolTip = "Local";            break;        }
Missing Default,Xceed.Wpf.Toolkit.PropertyGrid.Editors,CollectionEditor,C:\repos\Emudofus_BehaviorIsManaged\Librairies\WPFToolkit.Extended\PropertyGrid\Implementation\Editors\CollectionEditor.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 74 "..\..\..\..\..\PropertyGrid\Implementation\Editors\CollectionEditor.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
