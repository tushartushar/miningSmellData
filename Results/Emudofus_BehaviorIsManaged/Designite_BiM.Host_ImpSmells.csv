Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BiM.Host,Host,C:\repos\Emudofus_BehaviorIsManaged\Host\Host.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,BiM.Host.Plugins,PluginManager,C:\repos\Emudofus_BehaviorIsManaged\Host\Plugins\PluginManager.cs,LoadPlugin,Cyclomatic complexity of the method is 8
Long Parameter List,BiM.Host.UI.Helpers,ActiveGroupingCollectionView,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\ActiveGroupingCollectionView.cs,FindGroup,The method has 6 parameters. Parameters: name' groupDescriptionIndex' collection' parentGroup' item' itemsAlreadySorted
Long Identifier,BiM.Host.UI.Helpers,ActiveGroupingCollectionView,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\ActiveGroupingCollectionView.cs,,The length of the parameter _validateCollectionChangedAction is 32.
Long Statement,BiM.Host,SettingsLoader,C:\repos\Emudofus_BehaviorIsManaged\Host\SettingsLoader.cs,HandleCharacterSelectedSuccessMessage,The length of the statement  "                throw new Exception(string.Format("Configurable entry 'SettingsFile' must contains {0} and {1} to differentiate bot settings"' " is 126.
Long Statement,BiM.Host,Host,C:\repos\Emudofus_BehaviorIsManaged\Host\Host.cs,ExecuteProgress,The length of the statement  "                    logger.Debug("{0} : {1:0.0}/{2} Mem:{3}MB"' progression.Text' progression.Value' progression.Total' GC.GetTotalMemory(false)/(1024*1024)); " is 138.
Long Statement,BiM.Host.UI,UIManager,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\UIManager.cs,GetBotViewModel,The length of the statement  "                var document = DocumentPane.Children.FirstOrDefault(x => x.Content is BotControl && ( x.Content as BotControl ).ViewModel.Bot == bot); " is 134.
Long Statement,BiM.Host.UI.Helpers,ActiveGroupingCollectionView,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\ActiveGroupingCollectionView.cs,ProcessRemove,The length of the statement  "                OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove' item.SourceCollectionItem' itemIndex)); " is 134.
Long Statement,BiM.Host.UI.Helpers,ActiveGroupingCollectionView,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\ActiveGroupingCollectionView.cs,ProcessReplace,The length of the statement  "                    args = new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace' newItem' oldItem' _items.IndexOf(item)); " is 123.
Long Statement,BiM.Host.UI.Helpers,ActiveGroupingCollectionView,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\ActiveGroupingCollectionView.cs,ProcessReplace,The length of the statement  "                    args = new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove' item.SourceCollectionItem' currentIndex); " is 123.
Long Statement,BiM.Host.UI.Helpers,ActiveGroupingCollectionView,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\ActiveGroupingCollectionView.cs,SetGroupValuesBinding,The length of the statement  "                    throw new NotSupportedException(String.Format(Culture' "Only {0} are supported at this time."' typeof (PropertyGroupDescription))); " is 131.
Long Statement,BiM.Host.UI.Helpers,SortDescriptionCollectionComparer,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\ActiveGroupingCollectionView.cs,Evaluate,The length of the statement  "                BindingOperations.SetBinding(dependencyObject' _valueProperty' new Binding(propertyPath) {Source = item' Mode = BindingMode.OneTime}); " is 134.
Long Statement,BiM.Host.UI.Helpers,DockContainer<T>,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\DockContainer.cs,AddDocument,The length of the statement  "                View.Dispatcher.Invoke(new Func<LayoutDocument>(() => document = AddDocumentInternal(modelView' viewCreator' assembly))); " is 121.
Long Statement,BiM.Host.UI.ViewModels,GeneralTabViewModel,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\ViewModels\GeneralTabViewModel.cs,OnLog,The length of the statement  "            View.Dispatcher.BeginInvoke(new Action(() => View.AppendText(string.Format("[{0}] {1} : {2}\n"' DateTime.Now.ToString("hh:mm:ss")' caller' message)' color))); " is 158.
Magic Number,BiM.Host,Host,C:\repos\Emudofus_BehaviorIsManaged\Host\Host.cs,ExecuteProgress,The following statement contains a magic number: while (!progression.IsEnded)              {                  Thread.Sleep(refreshRate);                  if (Math.Abs(lastValue - progression.Value) > 0.1)                  {                      logger.Debug("{0} : {1:0.0}/{2} Mem:{3}MB"' progression.Text' progression.Value' progression.Total' GC.GetTotalMemory(false)/(1024*1024));                      UIManager.Instance.SetBusyProgress(progression.Value' progression.Total);                  }                    lastValue = progression.Value;              }
Magic Number,BiM.Host,Host,C:\repos\Emudofus_BehaviorIsManaged\Host\Host.cs,ExecuteProgress,The following statement contains a magic number: while (!progression.IsEnded)              {                  Thread.Sleep(refreshRate);                  if (Math.Abs(lastValue - progression.Value) > 0.1)                  {                      logger.Debug("{0} : {1:0.0}/{2} Mem:{3}MB"' progression.Text' progression.Value' progression.Total' GC.GetTotalMemory(false)/(1024*1024));                      UIManager.Instance.SetBusyProgress(progression.Value' progression.Total);                  }                    lastValue = progression.Value;              }
Magic Number,BiM.Host,Host,C:\repos\Emudofus_BehaviorIsManaged\Host\Host.cs,ExecuteProgress,The following statement contains a magic number: while (!progression.IsEnded)              {                  Thread.Sleep(refreshRate);                  if (Math.Abs(lastValue - progression.Value) > 0.1)                  {                      logger.Debug("{0} : {1:0.0}/{2} Mem:{3}MB"' progression.Text' progression.Value' progression.Total' GC.GetTotalMemory(false)/(1024*1024));                      UIManager.Instance.SetBusyProgress(progression.Value' progression.Total);                  }                    lastValue = progression.Value;              }
Magic Number,BiM.Host.UI,UIManager,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\UIManager.cs,SetBusyProgress,The following statement contains a magic number: IsBusyCounterDisplayed = Math.Abs(current - max) > 0.1;
Magic Number,BiM.Host.UI.Helpers,ActiveGroupingCollectionView,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\ActiveGroupingCollectionView.cs,ProcessAdd,The following statement contains a magic number: lock (SyncRoot)              {                  // Move indices down if not inserted at tail end.                  if (sourceCollectionIndex != (SourceCollection.Count - 1))                  {                      for (int index = SourceCollection.Count - 2; index >= sourceCollectionIndex; index--)                      {                          if (_items.TryGetItem(index' out item))                          {                              ChangeItemKey(item' index + 1);                          }                      }                  }                  if (PassesFilter(newItem))                  {                      insertionIndex = InsertItem(item = new ActiveGroupingCollectionViewItem                                                             {                                                                 SourceCollectionIndex = sourceCollectionIndex'                                                                 SourceCollectionItem = SourceCollection[sourceCollectionIndex]                                                             });                      if (_isGrouping)                      {                          SetGroupValuesBinding(item);                          Group(item' false);                      }                  }                  else                  {                      insertionIndex = -1;                  }              }
Missing Default,BiM.Host.UI.Converters,ComparisonConverter,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Converters\ComparisonBinding.cs,Convert,The following switch statement is missing a default case: switch (_styleBinding.Operator)              {                  case ComparisonOperators.GT:                      return ReturnHelper(comparison > 0);                    case ComparisonOperators.GTE:                      return ReturnHelper(comparison >= 0);                    case ComparisonOperators.LT:                      return ReturnHelper(comparison < 0);                    case ComparisonOperators.LTE:                      return ReturnHelper(comparison <= 0);              }
Missing Default,BiM.Host.UI.Helpers,ActiveGroupingCollectionView,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\ActiveGroupingCollectionView.cs,GetStringComparer,The following switch statement is missing a default case: switch (comparison)              {                  case StringComparison.CurrentCulture:                      return StringComparer.CurrentCulture;                  case StringComparison.CurrentCultureIgnoreCase:                      return StringComparer.CurrentCultureIgnoreCase;                  case StringComparison.InvariantCulture:                      return StringComparer.InvariantCulture;                  case StringComparison.InvariantCultureIgnoreCase:                      return StringComparer.InvariantCultureIgnoreCase;                  case StringComparison.OrdinalIgnoreCase:                      return StringComparer.OrdinalIgnoreCase;              }
Missing Default,BiM.Host.UI.Helpers,ActiveGroupingCollectionView,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\ActiveGroupingCollectionView.cs,ProcessCollectionChanged,The following switch statement is missing a default case: switch (args.Action)                  {                      case NotifyCollectionChangedAction.Add:                          processChange = ProcessAdd(args.NewStartingIndex' args.NewItems[0]);                          break;                      case NotifyCollectionChangedAction.Remove:                          processChange = ProcessRemove(args.OldStartingIndex);                          break;                      case NotifyCollectionChangedAction.Replace:                          processChange = ProcessReplace(args.NewStartingIndex' args.NewItems[0]);                          break;                      case NotifyCollectionChangedAction.Move:                          ProcessMove(args.NewStartingIndex' args.OldStartingIndex);                          break;                  }
Missing Default,BiM.Host.UI.Helpers,SortDescriptionCollectionComparer,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Helpers\ActiveGroupingCollectionView.cs,Compare,The following switch statement is missing a default case: switch (_sortDescriptions[i].Direction)                      {                          case ListSortDirection.Ascending:                              comparison = Comparer.Default.Compare(xData' yData);                              break;                          case ListSortDirection.Descending:                              comparison = Comparer.Default.Compare(yData' xData);                              break;                      }
Missing Default,BiM.Host.UI.Views,GeneralTab,C:\repos\Emudofus_BehaviorIsManaged\Host\UI\Views\GeneralTab.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.RichTextBox = ((System.Windows.Controls.RichTextBox)(target));              return;              }
