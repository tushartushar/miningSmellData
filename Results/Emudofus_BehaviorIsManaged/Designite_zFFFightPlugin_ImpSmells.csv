Implementation smell,Namespace,Class,File,Method,Description
Long Method,zFFFightPlugin,WelcomeMessageRegister,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The method has 129 lines of code.
Long Method,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The method has 129 lines of code.
Complex Method,zFFFightPlugin,WelcomeMessageRegister,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,Cyclomatic complexity of the method is 23
Complex Method,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,Cyclomatic complexity of the method is 13
Complex Method,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,Cyclomatic complexity of the method is 25
Complex Method,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnAcknowledgement,Cyclomatic complexity of the method is 13
Complex Method,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,PlaceAtDistanceFromWeakestEnemy,Cyclomatic complexity of the method is 11
Complex Method,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,Cyclomatic complexity of the method is 23
Complex Method,zFFFightPlugin,FFSettings,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFSettings.cs,Init,Cyclomatic complexity of the method is 16
Long Parameter List,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,GetCellAtSpellRange,The method has 8 parameters. Parameters: fighter' minRange' maxDistanceWished' inLine' inDiagonal' needLOSCheck' cautious' getOnlyExactResult
Long Statement,zFFFightPlugin,WelcomeMessageRegister,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The length of the statement  "        bot.Character.SendInformation("message <Level> => Filters the messages received from the bot to the Dofus client. <Level> is a bit field (4 bits' so values range from 0 to 7)"); " is 177.
Long Statement,zFFFightPlugin,WelcomeMessageRegister,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The length of the statement  "            bot.Character.SendInformation("Experimental AI fight started for all played characters (set to follower mode for non-leaders of parties)"); " is 139.
Long Statement,zFFFightPlugin,WelcomeMessageRegister,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The length of the statement  "          else if (message.content.StartsWith(".FF auto"' StringComparison.InvariantCultureIgnoreCase) || message.content.StartsWith(".FF on"' StringComparison.InvariantCultureIgnoreCase)) " is 178.
Long Statement,zFFFightPlugin,WelcomeMessageRegister,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The length of the statement  "          else if (message.content.StartsWith(".FF man"' StringComparison.InvariantCultureIgnoreCase) || message.content.StartsWith(".FF off"' StringComparison.InvariantCultureIgnoreCase)) " is 178.
Long Statement,zFFFightPlugin,WelcomeMessageRegister,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The length of the statement  "        PC.SendInformation(String.Format("Position : NF{0} - F{1}"' PC.Cell' PC.Fighter != null ? PC.Fighter.Cell.ToString() : "N/A")); " is 127.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,GetOtherFFights,The length of the statement  "                    if (subBot != Bot && subBot.Character != null && subBot.ClientInformations.SelectedServer.id == Bot.ClientInformations.SelectedServer.id && subBot.Character.Id != CharacterId) " is 175.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The length of the statement  "            Character.SendInformation("Leader : waiting for over 1 minute for other members of the party {0} => come back on previous map"' string.Join("'"' Party.Where(member => !Character.Map.Actors.Any(actor => actor.Id == member.id)).Select(member => string.Format("{0} ({1}/{2})"' member.name' member.lifePoints' member.maxLifePoints)))); " is 331.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The length of the statement  "            Character.SendInformation("Leader : waiting for other members of the party {0}"' string.Join("'"' Party.Where(member => !Character.Map.Actors.Any(actor => actor.Id == member.id)).Select(member => string.Format("{0} ({1}/{2})"' member.name' member.lifePoints' member.maxLifePoints)))); " is 284.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The length of the statement  "        //Bot.Character.SendMessage(String.Format("Trying to start a fight with group lv {0}' stCell {1}' leader {2} lv {3}"' monster.Level' monster.Cell' monster.Leader.Name' monster.Leader.Grade.grade)); " is 197.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ComeOnMyMap,The length of the statement  "            Character.SendInformation("Leader call me on the map {0}' through cell {1}. I'm on cell {2} in map {3}"' dstMap' destCell' Character.Cell' Character.Map); " is 154.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,The length of the statement  "      _currentTarget = GetNearestEnemy(); // Better nearest here than weakest. Even if the weakest should be the nearest' it's not a sure thing.  " is 138.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,The length of the statement  "            Character.SendDebug("StartAI AP:{0}' MP:{1}' Pos:{2}"' Character.Stats.CurrentAP' Character.Stats.CurrentMP' Fighter.Cell); " is 123.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,The length of the statement  "            if (settings.IsInvoker && Fighter.Fight.BlueTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT && Fighter.Fight.RedTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT) " is 196.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,The length of the statement  "            if (settings.FavoredBoostSpells != null && settings.FavoredBoostSpells.Count > 0 && Cast(settings.FavoredBoostSpells)) return; " is 126.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,The length of the statement  "                    case 6: // If no spell is at range' then try to come closer (best spell distance) and try again. No need to be cautious here : we can't cast anything else " is 154.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,TryCast,The length of the statement  "      if (spellTarget == null || spellTarget.Spell == null || spellTarget.FromCell == null || spellTarget.TargetCell == null || spellTarget.Efficiency <= 0 || spellTarget.cast == true) " is 178.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ComeAtSpellRangeThenCast,The length of the statement  "      if (spellTarget == null || spellTarget.Spell == null || spellTarget.FromCell == null || spellTarget.TargetCell == null || spellTarget.cast == true) " is 147.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ComeAtSpellRangeThenCast,The length of the statement  "                Character.SendError("ComeAtSpellRangeThenCast <{0}> can't be used : spellTarget is not properly initialized (or already cast) => PassTurn"' _explain); " is 150.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ComeAtSpellRangeThenCast,The length of the statement  "                Character.SendError("Failed to move from {0} to {1} to cast {2} => pass"' Fighter.Cell' spellTarget.FromCell' spellTarget.Spell); " is 129.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ComeAtSpellRangeThenCast,The length of the statement  "                    Character.SendDebug("Moving to cast {0} : pos {1} => {2} [{3}]"' spellTarget.Spell' Fighter.Cell' spellTarget.FromCell' Fighter.Movement.MovementPath.ToString()); " is 162.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CastSpell,The length of the statement  "                Character.SendInformation("Casting {0} Spell {1} (cat {2}) on [{3}] {4} (search time : {5}ms)"' _explain' spellTarget.Spell' spellTarget.Spell.Categories' string.Join<Fighter>("'"' Fighter.Fight.GetActorsOnCell(spellTarget.TargetCell))' spellTarget.TargetCell' spellTarget.TimeSpan.TotalMilliseconds); " is 301.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CastSpell,The length of the statement  "            Character.SendError("Failed to cast {0} Spell {1} (cat {2}) on [{3}] {4}"' _explain' spellTarget.Spell' spellTarget.Spell.Categories' string.Join<Fighter>("'"' Fighter.Fight.GetActorsOnCell(spellTarget.TargetCell))' spellTarget.TargetCell); " is 240.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,GetRandomSurroundingFreeCell,The length of the statement  "      //Bot.Character.SendWarning("Fight.AliveActors:{0} - Fighter.Map.Actors:{1}"' string.Join("'"' Fighter.Fight.Map.Actors)' string.Join("'"' Fighter.Map.Actors)); " is 160.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,GetRandomSurroundingFreeCell,The length of the statement  "      IEnumerable<Cell> cells = shape.GetCells(center' Fighter.Map)/*.Except(Fighter.Fight.AliveActorsCells)*/.Where(cell => cell.Walkable && !cell.NonWalkableDuringFight && !Fighter.Fight.IsActorOnCell(cell)); " is 204.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,GetRandomSurroundingFreeCell,The length of the statement  "        cells = cells.Where(cell => spell.LevelTemplate.castInLine && (center.X == cell.X || center.Y == cell.Y) || spell.LevelTemplate.castInDiagonal && (Math.Abs(center.X - cell.X) == Math.Abs(center.Y - cell.Y))); " is 208.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CastInvocation,The length of the statement  "                    Cell whereToMove = Fighter.GetPossibleMoves(true' false' _pathFinder).FirstOrDefault(cell => GetRandomSurroundingFreeCell(cell' _currentTarget == null ? null : _currentTarget.Cell' spell) != null); " is 197.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnAcknowledgement,The length of the statement  "                Character.SendWarning("OnAcknowledgement before any action on the turn => ignored. AP:{0}' MP:{1}. LastAction: {2}' Actors {3} on Cells {4}. Last path {5}"' Character.Stats.CurrentAP' Character.Stats.CurrentMP' _lastActionDesc' string.Join("'"' Fighter.Fight.Actors)' string.Join("'"' Fighter.Fight.Actors.Select(actor => actor.Cell))' _lastPathDetail); " is 353.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnAcknowledgement,The length of the statement  "                    Character.SendError("OnAcknowledgement [{6} - {7}] : Failed' but it is neither a move or a spell ! - {2} FAILED. AP:{0}' MP:{1}. Actors {3} on Cells {4}. Last path {5}"' Character.Stats.CurrentAP' Character.Stats.CurrentMP' _lastActionDesc' string.Join("'"' Fighter.Fight.Actors)' string.Join("'"' Fighter.Fight.Actors.Select(actor => actor.Cell))' _lastPathDetail' Id' Character); " is 381.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnAcknowledgement,The length of the statement  "                        Character.SendError("OnAcknowledgement [{6} - {7}] : {2} FAILED. AP:{0}' MP:{1}. Actors {3} on Cells {4}. Last path {5}"' Character.Stats.CurrentAP' Character.Stats.CurrentMP' _lastActionDesc' string.Join("'"' Fighter.Fight.Actors)' string.Join("'"' Fighter.Fight.Actors.Select(actor => actor.Cell))' _lastPathDetail' Id' Character); " is 333.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnAcknowledgement,The length of the statement  "                        Character.SendError("OnAcknowledgement [{9}{10}] : {2} FAILED. AP : {0}' MP : {1}. {3} casted on {4} on cell {5} : {6} -  Actors {7} on Cells {8}"' Character.Stats.CurrentAP' Character.Stats.CurrentMP' " is 201.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnAcknowledgement,The length of the statement  "                                _lastActionDesc' spellTarget.Spell' string.Join<Fighter>("'"' targets)' cellTarget' spellTarget.Spell.AvailabilityExplainString(targets.Select(fighter => fighter.Id).FirstOrDefault())' string.Join("'"' Fighter.Fight.Actors)' string.Join("'"' Fighter.Fight.Actors.Select(actor => actor.Cell))' Id' Character); " is 308.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnAcknowledgement,The length of the statement  "                    Character.SendError("OnAcknowledgement [{6} - {7}] : Succeeded' but it is neither a move or a spell ! - {2} SUCCESS. AP:{0}' MP:{1}. Actors {3} on Cells {4}. Last path {5}"' Character.Stats.CurrentAP' Character.Stats.CurrentMP' _lastActionDesc' string.Join("'"' Fighter.Fight.Actors)' string.Join("'"' Fighter.Fight.Actors.Select(actor => actor.Cell))' _lastPathDetail' Id' Character); " is 385.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnAcknowledgement,The length of the statement  "                        Character.SendDebug("Success on Moving \"{2}\"  - OnAcknowledgement AP:{0}' MP:{1}"' Character.Stats.CurrentAP' Character.Stats.CurrentMP' _lastActionDesc); " is 156.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnAcknowledgement,The length of the statement  "                        Character.SendDebug("Success on Cast \"{2}\"  - OnAcknowledgement AP:{0}' MP:{1}"' Character.Stats.CurrentAP' Character.Stats.CurrentMP' _lastActionDesc); " is 154.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnAcknowledgement,The length of the statement  "        //    Bot.Character.SendDebug("Availability of {0} after casted : {1}"' _lastSpellCasted' _lastSpellCasted.AvailabilityExplainString(_lastSpellTarget)); " is 152.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,FindFarPlacement,The length of the statement  "        Cell farCell = fighterCells.OrderBy(placementCell => enemyCells.Min(cell => cell.ManhattanDistanceTo(placementCell))).LastOrDefault(); " is 134.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,FindOptimalPlacement,The length of the statement  "                spellTarget = Character.SpellsBook.FindBestUsage(Fighter' Spell.SpellCategory.Damages' true' fighterCells.OrderByDescending(cell => enemyCells.Min(ennemyCell => cell.ManhattanDistanceTo(ennemyCell)))); " is 201.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,FindOptimalPlacement,The length of the statement  "          Character.SendDebug("FindOptimalPlacement : bestSpell: {0}' efficiency : {1}' posCell {2}' targetCell {3}"' spellTarget.Spell' spellTarget.Efficiency' spellTarget.FromCell' spellTarget.TargetCell); " is 197.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,JoinFight,The length of the statement  "        Character.SendWarning("Can't join {4}'s fight' as I'm not on the same map ({0} vs {1} [{2}'{3}]) ! Trying again later."' Character.Map' message.fightMap.mapId' message.fightMap.worldX' message.fightMap.worldY' message.memberName); " is 230.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,PlaceCloseToFriendsButFarFromEnemies,The length of the statement  "        Cell bestPos = Fighter.AvailablePlacementCells.OrderBy(pos => (5 * friendCells.Sum(friendCell => friendCell.ManhattanDistanceTo(pos))) / (friendCells.Length + 1) - enemyCells.Sum(enemyCell => enemyCell.ManhattanDistanceTo(pos)) / (enemyCells.Length + 1)).FirstOrDefault(); " is 272.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,PlaceAtDistanceFromWeakestEnemy,The length of the statement  "      Cell[] startingSet = Fighter.AvailablePlacementCells.Where(cell => ((cell.ManhattanDistanceTo(weakestEnemy.Cell) <= distance) && (!InLine || cell.X == weakestEnemy.Cell.X || cell.Y == weakestEnemy.Cell.Y))).ToArray(); " is 217.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,PlaceAtDistanceFromWeakestEnemy,The length of the statement  "      logger.Debug("Placement of {0} vs {1} (cell {2}) - max Distance {4} - InLine {5} - choices : {3}"' Fighter.Name' weakestEnemy.ToString()' weakestEnemy.Cell' string.Join<Cell>("'"' startingSet)' distance' InLine); " is 212.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,PlaceAtDistanceFromWeakestEnemy,The length of the statement  "            finalSet = finalSet.Where(x => x.ManhattanDistanceTo(otherEnnemy.Cell) >= x.ManhattanDistanceTo(weakestEnemy.Cell)).ToArray(); " is 126.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,GetCellAtSpellRange,The length of the statement  "        bestSelectedMoves = bestSelectedMoves.Where(cell => inLine && (fighter.Cell.X == cell.X || fighter.Cell.Y == cell.Y) || inDiagonal && (Math.Abs(fighter.Cell.X - cell.X) == Math.Abs(fighter.Cell.Y - cell.Y))); " is 208.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,GetCellAtSpellRange,The length of the statement  "      bestSelectedMoves = bestSelectedMoves.Where(cell => cell.ManhattanDistanceTo(fighter.Cell) <= maxDistanceWished && cell.ManhattanDistanceTo(fighter.Cell) >= minRange); " is 167.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,GetCellAtSpellRange,The length of the statement  "      BiM.Behaviors.Game.World.Pathfinding.Path path = ((IAdvancedPathFinder)_pathFinder).FindPath(Fighter.Cell' fighter.Cell' false' Fighter.Stats.CurrentMP); " is 153.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,MoveNear,The length of the statement  "      //Fighter fighter' uint minRange' int maxDistanceWished' bool inLine' bool inDiagonal' bool needLOSCheck' bool cautious; " is 120.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,MoveNear,The length of the statement  "      //Bot.Character.SendMessage(String.Format("MoveNear {0} : mp = {1}' distanceWished = {2}' inLine = {3}' inDiagonal = {4}' LOS = {5}"' fighter' mp' maxDistanceWished' inLine' inDiagonal' needLOSCheck)' Color.Pink); " is 213.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,MoveNear,The length of the statement  "      Cell dest = GetCellAtSpellRange(fighter' bestAttackSpell.LevelTemplate.minRange' bestDistance' bestAttackSpell.LevelTemplate.castInLine' bestAttackSpell.LevelTemplate.castInDiagonal' bestAttackSpell.LevelTemplate.castTestLos' false' false); " is 240.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,MoveFar,The length of the statement  "        /*Cell dest = GetPossibleMoves().Where(stCell => Fighter.Fight.IsCellWalkable(stCell' false' Fighter.Cell)).OrderByDescending(stCell => enemies.Min(ennCell => stCell.ManhattanDistanceTo(ennCell.Cell))).FirstOrDefault(); " is 219.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,MoveFar,The length of the statement  "        if (enemies.Min(ennCell => dest.ManhattanDistanceTo(ennCell.Cell)) < enemies.Min(ennCell => Fighter.Cell.ManhattanDistanceTo(ennCell.Cell))) " is 140.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,MoveFar,The length of the statement  "            cell => enemyCells.Min(ennCell => (int)cell.Cell.ManhattanDistanceTo(ennCell))' Fighter.Stats.CurrentMP)' Color.Yellow); " is 120.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,MoveFar,The length of the statement  "            cell => enemyCells.Min(ennCell => (int)cell.Cell.ManhattanDistanceTo(ennCell))' Fighter.Stats.CurrentMP).LastOrDefault(); " is 121.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,MoveFar,The length of the statement  "        Debug.Assert((enemyCells.Min(ennCell => dest.ManhattanDistanceTo(ennCell)) > ActualDistanceFromEnnemies)' "This move do not take the character away from monsters !"); " is 166.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,MoveFar,The length of the statement  "                    Character.SendError("Failed to move far from {0} to {1}' away from {2} => pass"' Fighter.Cell' dest' String.Join("'"' enemyCells)); " is 131.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,MoveFar,The length of the statement  "                    Character.SendDebug("Moving away from ({0}) : pos {1}({2}) => {3}({4}) => pass"' String.Join("'"' enemyCells)' Fighter.Cell' ActualDistanceFromEnnemies' dest' enemyCells.Min(ennCell => dest.ManhattanDistanceTo(ennCell))); " is 221.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,Dump,The length of the statement  "            Character.SendInformation("HP : {0}' AP : {1}' MP : {2}"' Character.Stats.Health' Character.Stats.CurrentAP' Character.Stats.CurrentMP); " is 136.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,Dump,The length of the statement  "            Character.SendInformation("Sitting : {0}' Moving : {1}' Fighting : {2}"' _sit' Fighter != null ? Fighter.IsMoving() : Character.IsMoving()' Character.IsFighting()); " is 164.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,Dump,The length of the statement  "            Character.SendInformation("MapID : {0}' Cell : {1}"' Fighter != null ? Fighter.Map.Id : Character.Map.Id' Fighter != null ? Fighter.Cell : Character.Cell); " is 155.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The length of the statement  "        bot.Character.SendInformation("message <Level> => Filters the messages received from the bot to the Dofus client. <Level> is a bit field (4 bits' so values range from 0 to 7)"); " is 177.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The length of the statement  "            bot.Character.SendInformation("Experimental AI fight started for all played characters (set to follower mode for non-leaders of parties)"); " is 139.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The length of the statement  "          else if (message.content.StartsWith(".FF auto"' StringComparison.InvariantCultureIgnoreCase) || message.content.StartsWith(".FF on"' StringComparison.InvariantCultureIgnoreCase)) " is 178.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The length of the statement  "          else if (message.content.StartsWith(".FF man"' StringComparison.InvariantCultureIgnoreCase) || message.content.StartsWith(".FF off"' StringComparison.InvariantCultureIgnoreCase)) " is 178.
Long Statement,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,HandleChatMessage,The length of the statement  "        PC.SendInformation(String.Format("Position : NF{0} - F{1}"' PC.Cell' PC.Fighter != null ? PC.Fighter.Cell.ToString() : "N/A")); " is 127.
Complex Conditional,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,GetOtherFFights,The conditional expression  "subBot != Bot && subBot.Character != null && subBot.ClientInformations.SelectedServer.id == Bot.ClientInformations.SelectedServer.id && subBot.Character.Id != CharacterId"  is complex.
Complex Conditional,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ChangeMap,The conditional expression  "otherFFights != null && Character != null && Character.Movement != null && choosenNeighbour != MapNeighbour.None"  is complex.
Complex Conditional,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,TryCast,The conditional expression  "spellTarget == null || spellTarget.Spell == null || spellTarget.FromCell == null || spellTarget.TargetCell == null || spellTarget.Efficiency <= 0 || spellTarget.cast == true"  is complex.
Complex Conditional,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ComeAtSpellRangeThenCast,The conditional expression  "spellTarget == null || spellTarget.Spell == null || spellTarget.FromCell == null || spellTarget.TargetCell == null || spellTarget.cast == true"  is complex.
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,FFight,The following statement contains a magic number: bot.CallDelayed(5000' () => File.WriteAllText("spells/" + Character.Name + ".spells.txt"' Character.SpellsBook.GetFullDetail()));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnMapJoined,The following statement contains a magic number: _checkTimer = Bot.CallPeriodically(4 * 1000' CheckMonsters);
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnMapJoined,The following statement contains a magic number: _checkTimer = Bot.CallPeriodically(4 * 1000' CheckMonsters);
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StandUp,The following statement contains a magic number: settings.BotHealingElapsedSeconds += (int)(sitTimer.ElapsedMilliseconds / 1000);
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: settings.BotElapsedSeconds = startingElapsSecondes + (int)(botTimer.ElapsedMilliseconds / 1000);
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: Bot.CallDelayed(500' Sit);
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: Character.Stats.Health * 10 < Character.Stats.MaxHealth * 9
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: Character.Stats.Health * 10 < Character.Stats.MaxHealth * 9
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: settings.MaxPower = 0.99;
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: settings.MaxPower < 0.1
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: Character.ChangeMap(Character.Map.Id' Character.Cell.Id' Character.PreviousMap.Value' 10);
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: waitingOtherTimer.ElapsedMilliseconds > 60000
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: int levelMax = Math.Max(Math.Min(level + 10' level * 2)' (int)(level * 1.2));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: int levelMax = Math.Max(Math.Min(level + 10' level * 2)' (int)(level * 1.2));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: int levelMax = Math.Max(Math.Min(level + 10' level * 2)' (int)(level * 1.2));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: int levelMin = level / 2;
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,CheckMonsters,The following statement contains a magic number: monster != null && MapMoveFailedCount < 5
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ComeOnMyMap,The following statement contains a magic number: Bot.CallDelayed(1000 + 500 * Id' () => Character.ChangeMap(srcMap' destCell' dstMap' 10));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ComeOnMyMap,The following statement contains a magic number: Bot.CallDelayed(1000 + 500 * Id' () => Character.ChangeMap(srcMap' destCell' dstMap' 10));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ComeOnMyMap,The following statement contains a magic number: Bot.CallDelayed(1000 + 500 * Id' () => Character.ChangeMap(srcMap' destCell' dstMap' 10));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnStateChanged,The following statement contains a magic number: Bot.CallDelayed(2000' Placement);
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,Placement,The following statement contains a magic number: int delay = 50;
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,Placement,The following statement contains a magic number: delay = 6000;
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,Placement,The following statement contains a magic number: delay = 2000;
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnFightLeft,The following statement contains a magic number: settings.BotFightingElapsedSecond += (int)(fightTimer.ElapsedMilliseconds / 1000);
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnTurnStarted,The following statement contains a magic number: Bot.CallDelayed(500' StartAI);
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,The following statement contains a magic number: switch (_IAStep++)          {            case 0:              if (settings.IsInvoker && Fighter.Fight.BlueTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT && Fighter.Fight.RedTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT)              {                if (Fighter.CanSummon())                {                  Fighter.Character.SendDebug("Trying to cast an invoc {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                  if (CastInvocation())                  {                    return;                  }                }                Fighter.Character.SendDebug("Can't invoc a creature yet. {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                /*if (_IAStep == 1 && Cast(Spell.SpellCategory.Buff))                {                    _IAStep = 2;                    return; // trying to improve invoc count                                }*/              }              //else              //    if (settings.IsHealer)              //        if (Cast(Spell.SpellCategory.Healing))              //            return;              break;            case 1:              if (settings.FavoredBoostSpells != null && settings.FavoredBoostSpells.Count > 0 && Cast(settings.FavoredBoostSpells)) return;              break;            case 2:                          if (_currentTarget == null) // no enemy can be seen                          {                              if (Cast(Spell.SpellCategory.Buff | Spell.SpellCategory.Healing))                                  return;                          }                          else              if (Cast(Spell.SpellCategory.All ^ Spell.SpellCategory.Invocation))              {                if (spellTarget != null && spellTarget.Spell != null)                  if ((spellTarget.Spell.Categories & Spell.SpellCategory.Damages) > 0) _attackDone = true;                return;              }              break;            case 3:                          if (!settings.IsInvoker && Fighter.CanSummon() && CastInvocation()) return;              break;                      case 4: // No spell can be cast              if (Fighter.Stats.CurrentMP <= 0)              {                Bot.CallDelayed(250' PassTurn);                return;              }              break;                      case 5: // No other spells can be cast (out of AP) and at least one attack succeeded => move away and pass the turn              if (settings.IsInvoker || _attackDone)              {                              Character.SendDebug("StartAI No spell castable' moving away {0}pm"' Fighter.Stats.CurrentMP);                              if (_currentTarget != null)                MoveFar(false);                return;              }              break;                      case 6: // If no spell is at range' then try to come closer (best spell distance) and try again. No need to be cautious here : we can't cast anything else                          if (_currentTarget != null)              MoveNear();              return;            default:              return;          }
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,The following statement contains a magic number: switch (_IAStep++)          {            case 0:              if (settings.IsInvoker && Fighter.Fight.BlueTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT && Fighter.Fight.RedTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT)              {                if (Fighter.CanSummon())                {                  Fighter.Character.SendDebug("Trying to cast an invoc {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                  if (CastInvocation())                  {                    return;                  }                }                Fighter.Character.SendDebug("Can't invoc a creature yet. {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                /*if (_IAStep == 1 && Cast(Spell.SpellCategory.Buff))                {                    _IAStep = 2;                    return; // trying to improve invoc count                                }*/              }              //else              //    if (settings.IsHealer)              //        if (Cast(Spell.SpellCategory.Healing))              //            return;              break;            case 1:              if (settings.FavoredBoostSpells != null && settings.FavoredBoostSpells.Count > 0 && Cast(settings.FavoredBoostSpells)) return;              break;            case 2:                          if (_currentTarget == null) // no enemy can be seen                          {                              if (Cast(Spell.SpellCategory.Buff | Spell.SpellCategory.Healing))                                  return;                          }                          else              if (Cast(Spell.SpellCategory.All ^ Spell.SpellCategory.Invocation))              {                if (spellTarget != null && spellTarget.Spell != null)                  if ((spellTarget.Spell.Categories & Spell.SpellCategory.Damages) > 0) _attackDone = true;                return;              }              break;            case 3:                          if (!settings.IsInvoker && Fighter.CanSummon() && CastInvocation()) return;              break;                      case 4: // No spell can be cast              if (Fighter.Stats.CurrentMP <= 0)              {                Bot.CallDelayed(250' PassTurn);                return;              }              break;                      case 5: // No other spells can be cast (out of AP) and at least one attack succeeded => move away and pass the turn              if (settings.IsInvoker || _attackDone)              {                              Character.SendDebug("StartAI No spell castable' moving away {0}pm"' Fighter.Stats.CurrentMP);                              if (_currentTarget != null)                MoveFar(false);                return;              }              break;                      case 6: // If no spell is at range' then try to come closer (best spell distance) and try again. No need to be cautious here : we can't cast anything else                          if (_currentTarget != null)              MoveNear();              return;            default:              return;          }
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,The following statement contains a magic number: switch (_IAStep++)          {            case 0:              if (settings.IsInvoker && Fighter.Fight.BlueTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT && Fighter.Fight.RedTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT)              {                if (Fighter.CanSummon())                {                  Fighter.Character.SendDebug("Trying to cast an invoc {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                  if (CastInvocation())                  {                    return;                  }                }                Fighter.Character.SendDebug("Can't invoc a creature yet. {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                /*if (_IAStep == 1 && Cast(Spell.SpellCategory.Buff))                {                    _IAStep = 2;                    return; // trying to improve invoc count                                }*/              }              //else              //    if (settings.IsHealer)              //        if (Cast(Spell.SpellCategory.Healing))              //            return;              break;            case 1:              if (settings.FavoredBoostSpells != null && settings.FavoredBoostSpells.Count > 0 && Cast(settings.FavoredBoostSpells)) return;              break;            case 2:                          if (_currentTarget == null) // no enemy can be seen                          {                              if (Cast(Spell.SpellCategory.Buff | Spell.SpellCategory.Healing))                                  return;                          }                          else              if (Cast(Spell.SpellCategory.All ^ Spell.SpellCategory.Invocation))              {                if (spellTarget != null && spellTarget.Spell != null)                  if ((spellTarget.Spell.Categories & Spell.SpellCategory.Damages) > 0) _attackDone = true;                return;              }              break;            case 3:                          if (!settings.IsInvoker && Fighter.CanSummon() && CastInvocation()) return;              break;                      case 4: // No spell can be cast              if (Fighter.Stats.CurrentMP <= 0)              {                Bot.CallDelayed(250' PassTurn);                return;              }              break;                      case 5: // No other spells can be cast (out of AP) and at least one attack succeeded => move away and pass the turn              if (settings.IsInvoker || _attackDone)              {                              Character.SendDebug("StartAI No spell castable' moving away {0}pm"' Fighter.Stats.CurrentMP);                              if (_currentTarget != null)                MoveFar(false);                return;              }              break;                      case 6: // If no spell is at range' then try to come closer (best spell distance) and try again. No need to be cautious here : we can't cast anything else                          if (_currentTarget != null)              MoveNear();              return;            default:              return;          }
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,The following statement contains a magic number: switch (_IAStep++)          {            case 0:              if (settings.IsInvoker && Fighter.Fight.BlueTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT && Fighter.Fight.RedTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT)              {                if (Fighter.CanSummon())                {                  Fighter.Character.SendDebug("Trying to cast an invoc {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                  if (CastInvocation())                  {                    return;                  }                }                Fighter.Character.SendDebug("Can't invoc a creature yet. {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                /*if (_IAStep == 1 && Cast(Spell.SpellCategory.Buff))                {                    _IAStep = 2;                    return; // trying to improve invoc count                                }*/              }              //else              //    if (settings.IsHealer)              //        if (Cast(Spell.SpellCategory.Healing))              //            return;              break;            case 1:              if (settings.FavoredBoostSpells != null && settings.FavoredBoostSpells.Count > 0 && Cast(settings.FavoredBoostSpells)) return;              break;            case 2:                          if (_currentTarget == null) // no enemy can be seen                          {                              if (Cast(Spell.SpellCategory.Buff | Spell.SpellCategory.Healing))                                  return;                          }                          else              if (Cast(Spell.SpellCategory.All ^ Spell.SpellCategory.Invocation))              {                if (spellTarget != null && spellTarget.Spell != null)                  if ((spellTarget.Spell.Categories & Spell.SpellCategory.Damages) > 0) _attackDone = true;                return;              }              break;            case 3:                          if (!settings.IsInvoker && Fighter.CanSummon() && CastInvocation()) return;              break;                      case 4: // No spell can be cast              if (Fighter.Stats.CurrentMP <= 0)              {                Bot.CallDelayed(250' PassTurn);                return;              }              break;                      case 5: // No other spells can be cast (out of AP) and at least one attack succeeded => move away and pass the turn              if (settings.IsInvoker || _attackDone)              {                              Character.SendDebug("StartAI No spell castable' moving away {0}pm"' Fighter.Stats.CurrentMP);                              if (_currentTarget != null)                MoveFar(false);                return;              }              break;                      case 6: // If no spell is at range' then try to come closer (best spell distance) and try again. No need to be cautious here : we can't cast anything else                          if (_currentTarget != null)              MoveNear();              return;            default:              return;          }
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,The following statement contains a magic number: switch (_IAStep++)          {            case 0:              if (settings.IsInvoker && Fighter.Fight.BlueTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT && Fighter.Fight.RedTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT)              {                if (Fighter.CanSummon())                {                  Fighter.Character.SendDebug("Trying to cast an invoc {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                  if (CastInvocation())                  {                    return;                  }                }                Fighter.Character.SendDebug("Can't invoc a creature yet. {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                /*if (_IAStep == 1 && Cast(Spell.SpellCategory.Buff))                {                    _IAStep = 2;                    return; // trying to improve invoc count                                }*/              }              //else              //    if (settings.IsHealer)              //        if (Cast(Spell.SpellCategory.Healing))              //            return;              break;            case 1:              if (settings.FavoredBoostSpells != null && settings.FavoredBoostSpells.Count > 0 && Cast(settings.FavoredBoostSpells)) return;              break;            case 2:                          if (_currentTarget == null) // no enemy can be seen                          {                              if (Cast(Spell.SpellCategory.Buff | Spell.SpellCategory.Healing))                                  return;                          }                          else              if (Cast(Spell.SpellCategory.All ^ Spell.SpellCategory.Invocation))              {                if (spellTarget != null && spellTarget.Spell != null)                  if ((spellTarget.Spell.Categories & Spell.SpellCategory.Damages) > 0) _attackDone = true;                return;              }              break;            case 3:                          if (!settings.IsInvoker && Fighter.CanSummon() && CastInvocation()) return;              break;                      case 4: // No spell can be cast              if (Fighter.Stats.CurrentMP <= 0)              {                Bot.CallDelayed(250' PassTurn);                return;              }              break;                      case 5: // No other spells can be cast (out of AP) and at least one attack succeeded => move away and pass the turn              if (settings.IsInvoker || _attackDone)              {                              Character.SendDebug("StartAI No spell castable' moving away {0}pm"' Fighter.Stats.CurrentMP);                              if (_currentTarget != null)                MoveFar(false);                return;              }              break;                      case 6: // If no spell is at range' then try to come closer (best spell distance) and try again. No need to be cautious here : we can't cast anything else                          if (_currentTarget != null)              MoveNear();              return;            default:              return;          }
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,StartAI,The following statement contains a magic number: switch (_IAStep++)          {            case 0:              if (settings.IsInvoker && Fighter.Fight.BlueTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT && Fighter.Fight.RedTeam.TeamType != BiM.Protocol.Enums.TeamTypeEnum.TEAM_TYPE_MUTANT)              {                if (Fighter.CanSummon())                {                  Fighter.Character.SendDebug("Trying to cast an invoc {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                  if (CastInvocation())                  {                    return;                  }                }                Fighter.Character.SendDebug("Can't invoc a creature yet. {0}/{1}"' Fighter.SummonedCount' Fighter.PCStats.SummonLimit);                /*if (_IAStep == 1 && Cast(Spell.SpellCategory.Buff))                {                    _IAStep = 2;                    return; // trying to improve invoc count                                }*/              }              //else              //    if (settings.IsHealer)              //        if (Cast(Spell.SpellCategory.Healing))              //            return;              break;            case 1:              if (settings.FavoredBoostSpells != null && settings.FavoredBoostSpells.Count > 0 && Cast(settings.FavoredBoostSpells)) return;              break;            case 2:                          if (_currentTarget == null) // no enemy can be seen                          {                              if (Cast(Spell.SpellCategory.Buff | Spell.SpellCategory.Healing))                                  return;                          }                          else              if (Cast(Spell.SpellCategory.All ^ Spell.SpellCategory.Invocation))              {                if (spellTarget != null && spellTarget.Spell != null)                  if ((spellTarget.Spell.Categories & Spell.SpellCategory.Damages) > 0) _attackDone = true;                return;              }              break;            case 3:                          if (!settings.IsInvoker && Fighter.CanSummon() && CastInvocation()) return;              break;                      case 4: // No spell can be cast              if (Fighter.Stats.CurrentMP <= 0)              {                Bot.CallDelayed(250' PassTurn);                return;              }              break;                      case 5: // No other spells can be cast (out of AP) and at least one attack succeeded => move away and pass the turn              if (settings.IsInvoker || _attackDone)              {                              Character.SendDebug("StartAI No spell castable' moving away {0}pm"' Fighter.Stats.CurrentMP);                              if (_currentTarget != null)                MoveFar(false);                return;              }              break;                      case 6: // If no spell is at range' then try to come closer (best spell distance) and try again. No need to be cautious here : we can't cast anything else                          if (_currentTarget != null)              MoveNear();              return;            default:              return;          }
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,OnAcknowledgement,The following statement contains a magic number: Bot.CallDelayed(300' ComeAtSpellRangeThenCast);
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ReadyToStartFight,The following statement contains a magic number: Bot.CallDelayed(500' ReadyToStartFight);
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,ReadyToStartFight,The following statement contains a magic number: Bot.CallDelayed(500' () => Bot.SendToServer(new GameFightReadyMessage(true)));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,JoinFight,The following statement contains a magic number: Bot.CallDelayed(4000' () => JoinFight(message' nbTry - 2));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,JoinFight,The following statement contains a magic number: Bot.CallDelayed(4000' () => JoinFight(message' nbTry - 2));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,JoinFight,The following statement contains a magic number: Bot.CallDelayed(2000' () => JoinFight(message' nbTry - 1));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,JoinFight,The following statement contains a magic number: Bot.CallDelayed(2500' () => Bot.SendToServer(new GameFightJoinRequestMessage(message.memberId' message.fightId)));
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,JoinFight,The following statement contains a magic number: nbTry == 14
Magic Number,zFFFightPlugin,FFight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFight.cs,PlaceCloseToFriendsButFarFromEnemies,The following statement contains a magic number: Cell bestPos = Fighter.AvailablePlacementCells.OrderBy(pos => (5 * friendCells.Sum(friendCell => friendCell.ManhattanDistanceTo(pos))) / (friendCells.Length + 1) - enemyCells.Sum(enemyCell => enemyCell.ManhattanDistanceTo(pos)) / (enemyCells.Length + 1)).FirstOrDefault();
Magic Number,zFFFightPlugin,FFSettings,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFSettings.cs,Init,The following statement contains a magic number: switch ((BreedEnum)character.Breed.Id)        {          case BreedEnum.Cra:            break;          case BreedEnum.Ecaflip:            break;          case BreedEnum.Eniripsa:            IsHealer = true;            MaxPower = 0.8;            FavoredBoostSpells = new List<int>() { 126 }; // Mot stimulant                               break;          case BreedEnum.Enutrof:            break;          case BreedEnum.Feca:            break;          case BreedEnum.Iop:            MaxPower = 1.5;            break;          case BreedEnum.Osamodas:            FavoredBoostSpells = new List<int>() { 26 }; // Bénédiction animale            IsInvoker = true;            break;          case BreedEnum.Pandawa:            break;          case BreedEnum.Roublard:            break;          case BreedEnum.Sacrieur:            break;          case BreedEnum.Sadida:            break;          case BreedEnum.Sram:            break;          case BreedEnum.Steamer:            break;          case BreedEnum.Xelor:            break;          case BreedEnum.Zobal:            break;          default:            break;        }
Magic Number,zFFFightPlugin,FFSettings,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFSettings.cs,Init,The following statement contains a magic number: switch ((BreedEnum)character.Breed.Id)        {          case BreedEnum.Cra:            break;          case BreedEnum.Ecaflip:            break;          case BreedEnum.Eniripsa:            IsHealer = true;            MaxPower = 0.8;            FavoredBoostSpells = new List<int>() { 126 }; // Mot stimulant                               break;          case BreedEnum.Enutrof:            break;          case BreedEnum.Feca:            break;          case BreedEnum.Iop:            MaxPower = 1.5;            break;          case BreedEnum.Osamodas:            FavoredBoostSpells = new List<int>() { 26 }; // Bénédiction animale            IsInvoker = true;            break;          case BreedEnum.Pandawa:            break;          case BreedEnum.Roublard:            break;          case BreedEnum.Sacrieur:            break;          case BreedEnum.Sadida:            break;          case BreedEnum.Sram:            break;          case BreedEnum.Steamer:            break;          case BreedEnum.Xelor:            break;          case BreedEnum.Zobal:            break;          default:            break;        }
Magic Number,zFFFightPlugin,FFSettings,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFSettings.cs,Init,The following statement contains a magic number: switch ((BreedEnum)character.Breed.Id)        {          case BreedEnum.Cra:            break;          case BreedEnum.Ecaflip:            break;          case BreedEnum.Eniripsa:            IsHealer = true;            MaxPower = 0.8;            FavoredBoostSpells = new List<int>() { 126 }; // Mot stimulant                               break;          case BreedEnum.Enutrof:            break;          case BreedEnum.Feca:            break;          case BreedEnum.Iop:            MaxPower = 1.5;            break;          case BreedEnum.Osamodas:            FavoredBoostSpells = new List<int>() { 26 }; // Bénédiction animale            IsInvoker = true;            break;          case BreedEnum.Pandawa:            break;          case BreedEnum.Roublard:            break;          case BreedEnum.Sacrieur:            break;          case BreedEnum.Sadida:            break;          case BreedEnum.Sram:            break;          case BreedEnum.Steamer:            break;          case BreedEnum.Xelor:            break;          case BreedEnum.Zobal:            break;          default:            break;        }
Magic Number,zFFFightPlugin,FFSettings,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Plugins\FFFightPlugin\FFSettings.cs,Init,The following statement contains a magic number: switch ((BreedEnum)character.Breed.Id)        {          case BreedEnum.Cra:            break;          case BreedEnum.Ecaflip:            break;          case BreedEnum.Eniripsa:            IsHealer = true;            MaxPower = 0.8;            FavoredBoostSpells = new List<int>() { 126 }; // Mot stimulant                               break;          case BreedEnum.Enutrof:            break;          case BreedEnum.Feca:            break;          case BreedEnum.Iop:            MaxPower = 1.5;            break;          case BreedEnum.Osamodas:            FavoredBoostSpells = new List<int>() { 26 }; // Bénédiction animale            IsInvoker = true;            break;          case BreedEnum.Pandawa:            break;          case BreedEnum.Roublard:            break;          case BreedEnum.Sacrieur:            break;          case BreedEnum.Sadida:            break;          case BreedEnum.Sram:            break;          case BreedEnum.Steamer:            break;          case BreedEnum.Xelor:            break;          case BreedEnum.Zobal:            break;          default:            break;        }
