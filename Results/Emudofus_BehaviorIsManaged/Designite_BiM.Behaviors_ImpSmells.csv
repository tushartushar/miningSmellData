Implementation smell,Namespace,Class,File,Method,Description
Long Method,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetEffectCategories,The method has 163 lines of code.
Long Method,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The method has 138 lines of code.
Long Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The method has 221 lines of code.
Long Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,WorldPathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\WorldPathFinder.cs,FindPath,The method has 100 lines of code.
Long Method,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,FindPath,The method has 124 lines of code.
Complex Method,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,Update,Cyclomatic complexity of the method is 14
Complex Method,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,InternalChangeMap,Cyclomatic complexity of the method is 8
Complex Method,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,CheckCriteria,Cyclomatic complexity of the method is 17
Complex Method,BiM.Behaviors.Game.Effects,EffectBase,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectBase.AI.cs,CreateInstance,Cyclomatic complexity of the method is 10
Complex Method,BiM.Behaviors.Game.Effects,EffectBase,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectBase.AI.cs,CreateInstance,Cyclomatic complexity of the method is 10
Complex Method,BiM.Behaviors.Game.Fights,TimeLine,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\TimeLine.cs,RefreshTimeLine,Cyclomatic complexity of the method is 8
Complex Method,BiM.Behaviors.Game.Items,Inventory,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Items\Inventory.AI.cs,EquipBestWeaponIfNeeded,Cyclomatic complexity of the method is 8
Complex Method,BiM.Behaviors.Game.Spells.Shapes,Cone,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Shapes\Cone.cs,GetCells,Cyclomatic complexity of the method is 18
Complex Method,BiM.Behaviors.Game.Spells.Shapes,Cross,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Shapes\Cross.cs,GetCells,Cyclomatic complexity of the method is 18
Complex Method,BiM.Behaviors.Game.Spells.Shapes,Line,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Shapes\Line.cs,GetCells,Cyclomatic complexity of the method is 9
Complex Method,BiM.Behaviors.Game.Spells.Shapes,Zone,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Shapes\Zone.cs,InitializeShape,Cyclomatic complexity of the method is 18
Complex Method,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetEffectCategories,Cyclomatic complexity of the method is 16
Complex Method,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,Cyclomatic complexity of the method is 10
Complex Method,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,Cyclomatic complexity of the method is 38
Complex Method,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetFullAreaEffect,Cyclomatic complexity of the method is 12
Complex Method,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,FindBestTarget,Cyclomatic complexity of the method is 21
Complex Method,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,IsAvailable,Cyclomatic complexity of the method is 9
Complex Method,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,OrientationToAdjacent,Cyclomatic complexity of the method is 9
Complex Method,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,GetCellInDirection,Cyclomatic complexity of the method is 10
Complex Method,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,GetAdjacentCells,Cyclomatic complexity of the method is 10
Complex Method,BiM.Behaviors.Game.World,Map,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Map.cs,CreateRolePlayActor,Cyclomatic complexity of the method is 11
Complex Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,CellInfo,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\CellInfo.cs,getValue,Cyclomatic complexity of the method is 11
Complex Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,MapMovement,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\MapMovement.cs,GetOrientation,Cyclomatic complexity of the method is 9
Complex Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,ClearLogic,Cyclomatic complexity of the method is 11
Complex Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,Cyclomatic complexity of the method is 46
Complex Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,ValidMoves,Cyclomatic complexity of the method is 10
Complex Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindCellsAround,Cyclomatic complexity of the method is 8
Complex Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindCellsInLine,Cyclomatic complexity of the method is 10
Complex Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindFishingSpot,Cyclomatic complexity of the method is 9
Complex Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,Neighbours,Cyclomatic complexity of the method is 11
Complex Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,SubMapProcessor,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\SubMapProcessor.cs,ValidMoves,Cyclomatic complexity of the method is 10
Complex Method,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,WorldPathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\WorldPathFinder.cs,FindPath,Cyclomatic complexity of the method is 21
Complex Method,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,FindPath,Cyclomatic complexity of the method is 27
Complex Method,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,CreateAndOptimisePath,Cyclomatic complexity of the method is 9
Complex Method,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,GetCellCost,Cyclomatic complexity of the method is 9
Long Parameter List,BiM.Behaviors.Game.Actors.Fighters,PlayedFighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\PlayedFighter.AI.cs,Move,The method has 5 parameters. Parameters: cell' mp' pathFinder' minDistance' cautious
Long Parameter List,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,MoveIfNeededThenAction,The method has 6 parameters. Parameters: cellId' actionAfterMove' delayBeforeMove' minDistance' cautious' cancelMove
Long Parameter List,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,Move,The method has 5 parameters. Parameters: cellId' pathFinder' minDistance' cautious' cancelMove
Long Parameter List,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,Move,The method has 5 parameters. Parameters: cell' pathFinder' minDistance' cautious' cancelMove
Long Parameter List,BiM.Behaviors.Game.Effects,EffectBase,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectBase.AI.cs,EffectBase,The method has 12 parameters. Parameters: id' targetId' duration' delay' random' group' modificator' trigger' hidden' zoneSize' zoneShape' zoneMinSize
Long Parameter List,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,EffectDate,The method has 7 parameters. Parameters: id' year' month' day' hour' minute' effect
Long Parameter List,BiM.Behaviors.Game.Effects,EffectDice,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDice.cs,EffectDice,The method has 5 parameters. Parameters: id' value' dicenum' diceface' effect
Long Parameter List,BiM.Behaviors.Game.Effects,EffectDuration,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDuration.cs,EffectDuration,The method has 5 parameters. Parameters: id' days' hours' minutes' effect
Long Parameter List,BiM.Behaviors.Game.Effects,EffectMount,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectMount.cs,EffectMount,The method has 5 parameters. Parameters: id' mountid' date' modelid' effect
Long Parameter List,BiM.Behaviors.Game.Movements,TimedPath,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Movements\TimedPath.cs,Create,The method has 5 parameters. Parameters: path' hVelocity' vVelocity' lVelocity' referenceDate
Long Parameter List,BiM.Behaviors.Game.Movements,TimedPathElement,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Movements\TimedPathElement.cs,TimedPathElement,The method has 6 parameters. Parameters: currentCell' nextCell' startTime' endTime' velocity' direction
Long Parameter List,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,The method has 10 parameters. Parameters: damages' damage1' damage2' category' chanceToHappen' addDamage' addDamagePercent' reduceDamage' reduceDamagePercent' negativ
Long Parameter List,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The method has 5 parameters. Parameters: effect' spellImpact' caster' target' spell
Long Parameter List,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetFullAreaEffect,The method has 6 parameters. Parameters: pc' source' dest' actors' category' comment
Long Parameter List,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,FindBestTarget,The method has 5 parameters. Parameters: pc' source' destCells' actors' category
Long Parameter List,BiM.Behaviors.Game.World,MapContext<T>,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\MapContext.cs,TooCloseFromSegment,The method has 6 parameters. Parameters: cx' cy' ax' ay' bx' by
Long Parameter List,BiM.Behaviors.Game.World.MapTraveling,SubMapBinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\MapTraveling\SubMapBinder.cs,SubMapBinder,The method has 5 parameters. Parameters: mapId' subMapId' x' y' neighbours
Long Parameter List,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindConnectedCells,The method has 6 parameters. Parameters: startingCell' inFight' cautious' filter' sorter' maxDistance
Long Parameter List,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The method has 5 parameters. Parameters: startingCells' exitCells' selectFartherCells' firstStepOnly' maxDistanceParam
Long Parameter List,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The method has 6 parameters. Parameters: startCells' endCells' outsideFight' mp' minDistance' cautiousMode
Long Parameter List,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The method has 6 parameters. Parameters: startCell' endCells' outsideFight' mp' minDistance' cautiousMode
Long Parameter List,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The method has 6 parameters. Parameters: startCell' endCell' outsideFight' mp' minDistance' cautiousMode
Long Parameter List,BiM.Behaviors.Game.World.Pathfinding,IAdvancedPathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\IAdvancedPathFinder.cs,FindPath,The method has 6 parameters. Parameters: startCells' endCells' outsideFight' mp' minDistance' cautiousMode
Long Parameter List,BiM.Behaviors.Game.World.Pathfinding,IAdvancedPathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\IAdvancedPathFinder.cs,FindPath,The method has 6 parameters. Parameters: startCell' endCells' outsideFight' mp' minDistance' cautiousMode
Long Parameter List,BiM.Behaviors.Game.World.Pathfinding,IAdvancedPathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\IAdvancedPathFinder.cs,FindPath,The method has 6 parameters. Parameters: startCell' endCell' outsideFight' mp' MinDistance' cautiousMode
Long Identifier,BiM.Behaviors.Game.Actors.RolePlay,Mutant,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\Mutant.cs,Mutant,The length of the parameter gameRolePlayMutantInformations is 30.
Long Identifier,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,AddEffect,The length of the parameter abstractFightDispellableEffect is 30.
Long Statement,BiM.Behaviors,Bot,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Bot.cs,Send,The length of the statement  "                logger.Warn("Warning' enqueue {0} but the bot is stopped' the message will be processed once the bot {1} restart"' message' this); " is 130.
Long Statement,BiM.Behaviors,Bot,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Bot.cs,SendLocal,The length of the statement  "                logger.Warn("Warning' enqueue {0} but the bot is stopped' the message will be processed once the bot {1} restart"' message' this); " is 130.
Long Statement,BiM.Behaviors.Data.D2O,XmlDumper,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\D2O\XmlDumper.cs,cleanXML,The length of the statement  "                    string result = new StringBuilder(contents).Replace(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""' "").Replace(" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\""' "").ToString(); " is 190.
Long Statement,BiM.Behaviors.Data.D2O,XmlDumper,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\D2O\XmlDumper.cs,cleanXML,The length of the statement  "                                        pattern1' match => "<description>" + I18NDataManager.Instance.ReadText(int.Parse(match.Groups[1].Value)) + "</description>")' " is 125.
Long Statement,BiM.Behaviors.Data.D2O,XmlDumper,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\D2O\XmlDumper.cs,cleanXML,The length of the statement  "                                        pattern8' match => "<shortName>" + I18NDataManager.Instance.ReadText(int.Parse(match.Groups[1].Value)) + "</shortName>")' " is 121.
Long Statement,BiM.Behaviors.Data.D2O,XmlDumper,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\D2O\XmlDumper.cs,cleanXML,The length of the statement  "                                    pattern5' match => "<rawZone>" + string.Format("{0} ({1} cells)"' match.Groups[1].Value' new Zone(match.Groups[1].Value).Surface) + "</rawZone>")' " is 146.
Long Statement,BiM.Behaviors.Data.D2O,XmlDumper,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\D2O\XmlDumper.cs,cleanXML,The length of the statement  "                                            return "<effectId>" + ((EffectsEnum)effectId).ToString() + "</effectId>" + " <description>" + I18NDataManager.Instance.ReadText(template.descriptionId) + "</description>"; " is 171.
Long Statement,BiM.Behaviors.Data.D2O,XmlDumper,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\D2O\XmlDumper.cs,SimpleDumper,The length of the statement  "                Type[] types = { typeof(EffectInstanceDice) };// asm.GetTypes().Where(entry => entry.Namespace != null && entry.GetConstructor(System.Type.EmptyTypes) != null && entry.Namespace.StartsWith("BiM.Protocol.Data")).ToArray<Type>(); " is 227.
Long Statement,BiM.Behaviors.Data.D2O,XmlDumper,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\D2O\XmlDumper.cs,SpellsDumper,The length of the statement  "                    Type[] types = { typeof(SpellLevel)' typeof(EffectInstanceDice) };// asm.GetTypes().Where(entry => entry.Namespace != null && entry.GetConstructor(System.Type.EmptyTypes) != null && entry.Namespace.StartsWith("BiM.Protocol.Data")).ToArray<Type>(); " is 247.
Long Statement,BiM.Behaviors.Data.I18N,I18NDataManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\I18N\I18NDataManager.cs,EnsureLanguageIsLoaded,The length of the statement  "            foreach (var d2iFile in Directory.EnumerateFiles(m_d2IPath).Where(entry => entry.EndsWith(".d2i")).Where(path => GetLanguageOfFile(path) == language)) " is 150.
Long Statement,BiM.Behaviors.Data.I18N,I18NDataManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\I18N\I18NDataManager.cs,EnsureLanguageIsLoaded,The length of the statement  "                throw new Exception(string.Format("Language {0} not found in the d2i files' check the path of these files and that the file exist ({1})"' language' m_d2IPath)); " is 160.
Long Statement,BiM.Behaviors.Data.Maps,MapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\MapsManager.cs,Initialize,The length of the statement  "                logger.Info("{0} outdated (file version :{1}' expected version {2})"' MapsDataFile' m_fileVersion' CurrentMapsFileVersion); " is 123.
Long Statement,BiM.Behaviors.Data.Maps,MapsPositionManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\MapsPositionManager.cs,FindMapNeighbour,The length of the statement  "            int? bySubArea = map.SubAreaId != null ? m_subAreaMaps.GetBestMap(map.SubAreaId.Value' map.X + deltaX' map.Y + deltaY) : null; " is 126.
Long Statement,BiM.Behaviors.Data.Maps,MapsPositionManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\MapsPositionManager.cs,FindMapNeighbour,The length of the statement  "            int? bySuperArea = map.SuperAreaId != null ? m_superAreaChildrens.GetBestMap(map.SuperAreaId.Value' map.X + deltaX' map.Y + deltaY) : null; " is 139.
Long Statement,BiM.Behaviors.Data.Maps,MapsPositionManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\MapsPositionManager.cs,FindMapNeighbour,The length of the statement  "            int? byWorldMap = map.WorldMapId != null ? m_worldMapsChildrens.GetBestMap(map.WorldMapId.Value' map.X + deltaX' map.Y + deltaY) : null; " is 136.
Long Statement,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The length of the statement  "                                                    submap.SubMap.Neighbours.Add(new SubMapNeighbour(neighbourSubmap.SubMap.GlobalId' new MovementTransition(neighbour' links))); " is 125.
Long Statement,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The length of the statement  "                typedClient1.SetRangeInHash(typedClient1.GetHash<long>(REDIS_KEY)' m_submaps.Values.SelectMany(x => x).ToDictionary(x => x.SubMap.GlobalId' x => x.SubMap)); " is 156.
Long Statement,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The length of the statement  "                typedClient2.SetRangeInHash(typedClient2.GetHash<int>(REDIS_MAPS)' m_submaps.ToDictionary(x => x.Key' x => x.Value.Select(y => y.SubMap.GlobalId).ToArray())); " is 158.
Long Statement,BiM.Behaviors.Game.Actors,ContextActor,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\ContextActor.cs,NotifyStartMoving,The length of the statement  "                logger.Warn("Actor start cell incorrect for this moving path Position={0}' StartPath={1}' Path={2}"' Cell' Movement.StartCell' String.Join<World.Cell>("'"' Movement.MovementPath.Cells)); " is 186.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,Update,The length of the statement  "          //  (this as PlayedFighter).Character.SendMessage(String.Format("{3} => AP of {0} : {1} => {2}"' Name' Stats.CurrentAP' Stats.CurrentAP + message.delta' (ActionIdEnum)(message.actionId))); " is 188.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,Update,The length of the statement  "          //  (this as PlayedFighter).Character.SendMessage(String.Format("{3} => MP of {0} : {1} => {2}"' Name' Stats.CurrentMP' Stats.CurrentMP + message.delta' (ActionIdEnum)(message.actionId))); " is 188.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,GetAllEffects,The length of the statement  "      return Fight.Effects.Values.SelectMany(effectList => effectList.Where(effectT => effectT.Item1.targetId == Id && (actionId == null || effectT.Item2 == actionId)).Select(effectT => effectT.Item1)); " is 196.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,GetAllBoostEffects,The length of the statement  "        return GetAllEffects(actionId).Where(effect => effect is FightTemporaryBoostEffect).Select(effect => effect as FightTemporaryBoostEffect); " is 138.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,GetFightTriggeredEffects,The length of the statement  "        return GetAllEffects(actionId).Where(effect => effect is FightTriggeredEffect).Select(effect => effect as FightTriggeredEffect); " is 128.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,GetSpellImmunityEffects,The length of the statement  "        return GetAllEffects(actionId).Where(effect => effect is FightTemporarySpellImmunityEffect).Select(effect => effect as FightTemporarySpellImmunityEffect); " is 154.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,GetSpellBoostEffects,The length of the statement  "        return GetAllEffects(actionId).Where(effect => effect is FightTemporarySpellBoostEffect).Select(effect => effect as FightTemporarySpellBoostEffect); " is 148.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,GetBoostStateEffects,The length of the statement  "        return GetAllEffects(actionId).Where(effect => effect is FightTemporaryBoostStateEffect).Select(effect => effect as FightTemporaryBoostStateEffect); " is 148.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,GetBoostWeaponDamagesEffects,The length of the statement  "        return GetAllEffects(actionId).Where(effect => effect is FightTemporaryBoostWeaponDamagesEffect).Select(effect => effect as FightTemporaryBoostWeaponDamagesEffect); " is 164.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,PlayedFighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\PlayedFighter.AI.cs,GetOrderListOfInvocationSpells,The length of the statement  "            IEnumerable<Spells.Spell> spells = Character.SpellsBook.Spells.Where(spell => (Stats.CurrentAP >= spell.LevelTemplate.apCost) && spell.IsAvailable(null' BiM.Behaviors.Game.Spells.Spell.SpellCategory.Invocation) && CanCastSpell(spell' (Cell)null' true) && spell.LevelTemplate.needFreeCell).OrderByDescending(spell => spell.Level).ThenByDescending(spell => spell.LevelTemplate.minPlayerLevel); " is 391.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,PlayedFighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\PlayedFighter.AI.cs,FindMostEfficientAttackSpell,The length of the statement  "                return Character.SpellsBook.Spells.Where(spell => ((spell.Categories & BiM.Behaviors.Game.Spells.Spell.SpellCategory.Damages) != 0) && spell.IsAvailable(null' null)).OrderByDescending(spell => spell.Level).ThenByDescending(spell => spell.LevelTemplate.minPlayerLevel).FirstOrDefault(); " is 285.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,PlayedFighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\PlayedFighter.AI.cs,GetStates,The length of the statement  "            return GetBoostStateEffects().Select(effect => ObjectDataManager.Instance.Get<Protocol.Data.SpellState>(effect.stateId)); " is 121.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,PlayedFighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\PlayedFighter.AI.cs,Move,The length of the statement  "            path = pathFinder.FindPath(Cell' cell' false' Stats.CurrentMP < mp ? Stats.CurrentMP : mp' minDistance' true); // Try in cautious way first " is 139.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,PlayedFighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\PlayedFighter.AI.cs,Move,The length of the statement  "                path = pathFinder.FindPath(Cell' cell' false' Stats.CurrentMP < mp ? Stats.CurrentMP : mp' minDistance' false); // If failed' then uncautious " is 141.
Long Statement,BiM.Behaviors.Game.Actors.Fighters,PlayedFighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\PlayedFighter.AI.cs,Move,The length of the statement  "            //Character.SendMessage(String.Format("Move {0} => {1} ({3} PM): {2}"' Cell' cell' String.Join<Cell>("'"' path.Cells)' mp)); " is 124.
Long Statement,BiM.Behaviors.Game.Actors.RolePlay,Humanoid,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\Humanoid.cs,HandleOption,The length of the statement  "                m_followingCharactersLook = new ObservableCollectionMT<IndexedEntityLook>(( (HumanOptionFollowers)option ).followingCharactersLook); " is 132.
Long Statement,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,UpdateRegen,The length of the statement  "                if (regainedLife <= 0) return; // Avoids significative errors when UpdateRegen is called too often when regenRate is low. " is 121.
Long Statement,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,InternalChangeMap,The length of the statement  "                            Cell destCell = pathFinder.FindConnectedCells(Cell' false' true' cell => (cell.Cell.MapChangeData & Map.MapChangeDatas[neighbour]) != 0).GetRandom(); " is 149.
Long Statement,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,InternalChangeMap,The length of the statement  "                                SendWarning("InternalChangeMap  : Can't join the leader' no try left. Can't even find any alternate path to go {0}"' neighbour); " is 128.
Long Statement,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,InternalChangeMap,The length of the statement  "                                SendWarning("InternalChangeMap : Can't join the leader' no try left. Trying alternative path to go {0} : cell {1}"' neighbour' destCell); " is 137.
Long Statement,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,InternalChangeMap,The length of the statement  "                SendWarning("InternalChangeMap : Move from {0} to {1} succeeded. When move is complete' should go from map {2} to map {3}. "' Cell' Map.Cells[_pivotLeaderCell]' Map.ToString()' new Map(_dstLeaderMap)); " is 201.
Long Statement,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,ChangeMap,The length of the statement  "            Cell destCell = pathFinder.FindConnectedCells(Cell' false' true' cell => (cell.Cell.MapChangeData & Map.MapChangeDatas[neighbour]) != 0).GetRandom(); " is 149.
Long Statement,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,ChangeMap,The length of the statement  "                Cell destCell = pathFinder.FindConnectedCells(Cell' false' true' cell => (cell.Cell.MapChangeData & Map.MapChangeDatas[neighbour]) != 0 && cellSelector(cell)).GetRandom(); " is 171.
Long Statement,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,GetBoostAmountWithPoints,The length of the statement  "                if (nextThreshold != null && (pointsToSpend / (double)threshold.PointsPerBoost) > (nextThreshold.PointsThreshold - currentPoints)) " is 130.
Long Statement,BiM.Behaviors.Game.Chat,BotChatMessageServer,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Chat\BotChatMessageServer.cs,TryGetSender,The length of the statement  "            return context.Actors.FirstOrDefault(entry => ( entry is INamed && ( entry as INamed ).Name == SenderName ) || entry.Id == SenderId); " is 133.
Long Statement,BiM.Behaviors.Game.Effects,EffectBase,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectBase.AI.cs,canAffectTarget,The length of the statement  "            if (spell.LevelTemplate.spellBreed == (uint)BreedEnum.Eniripsa && spell.Categories == Spell.SpellCategory.Healing && caster.HasState(76)) return false; " is 151.
Long Statement,BiM.Behaviors.Game.Effects,EffectDice,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDice.cs,ToString,The length of the statement  "            return String.Format("{0} {1}-{2}' Targets: {3}' Area:{4} - {5}"' (EffectsEnum)Id' DiceNum' DiceFace' Targets' AreaDesc()' Description); " is 136.
Long Statement,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,SetTrap,The length of the statement  "            SortedSet<short> newSet = new SortedSet<short>(Cells[CellId].GetAllCellsInRange(0' radius' false' null).Select(cell => cell.Id)); " is 129.
Long Statement,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,EndSequence,The length of the statement  "            //    throw new InvalidOperationException(string.Format("EndSequence authorId {0} is not current Player {1}"' message.authorId' fighter.Id)); " is 141.
Long Statement,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,EndSequence,The length of the statement  "            //    (CurrentPlayer as PlayedFighter).Character.SendMessage(String.Format("EndSequence : of fighter {0}' CurrentPlayer {1}' TimeLine.CurrentPlayer {2}"' fighter' CurrentPlayer' TimeLine.CurrentPlayer)' Color.Gray); " is 215.
Long Statement,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,AddEffect,The length of the statement  "                    Effects[TimeLine.CurrentPlayer].Add(new Tuple<AbstractFightDispellableEffect' short>(abstractFightDispellableEffect' actionId)); " is 128.
Long Statement,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,AddEffect,The length of the statement  "                    Effects[TimeLine.CurrentPlayer] = new List<Tuple<AbstractFightDispellableEffect' short>>() { new Tuple<AbstractFightDispellableEffect' short>(abstractFightDispellableEffect' actionId) }; " is 186.
Long Statement,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,DispelEffect,The length of the statement  "                            playedFighter.Character.SendInformation("Effect {0} from spell {1} dispeled (dispelable : {2})"' (EffectsEnum)effectT.Item1.TypeId' spell.Name' effectT.Item1.dispelable); " is 170.
Long Statement,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,DispelTarget,The length of the statement  "                                playedFighter.Character.SendInformation("Effect {0} from spell {1} dispeled (dispelable : {2})"' (EffectsEnum)effectT.Item1.TypeId' spell.Name' effectT.Item1.dispelable); " is 170.
Long Statement,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,DispelSpell,The length of the statement  "                            playedFighter.Character.SendInformation("Effect {0} from spell {1} dispeled (dispelable : {2})"' (EffectsEnum)effectT.Item1.TypeId' spell.Name' effectT.Item1.dispelable); " is 170.
Long Statement,BiM.Behaviors.Game.Interactives,InteractiveObject,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Interactives\InteractiveObject.cs,NotifyInteractiveUsed,The length of the statement  "            var skill = EnabledSkills.Concat(DisabledSkills).FirstOrDefault(x => x.JobSkill != null && x.JobSkill.id == message.skillId); " is 125.
Long Statement,BiM.Behaviors.Game.Interactives,InteractiveObject,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Interactives\InteractiveObject.cs,IsForJob,The length of the statement  "            return m_disabledSkills.Any(skill => skill.JobSkill.parentJobId == jobId) || m_enabledSkills.Any(skill => skill.JobSkill.parentJobId == jobId); " is 143.
Long Statement,BiM.Behaviors.Game.Interactives,InteractiveObject,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Interactives\InteractiveObject.cs,IsFish,The length of the statement  "            return m_disabledSkills.Any(skill => skill.JobSkill.parentJobId == 36) || m_enabledSkills.Any(skill => skill.JobSkill.parentJobId == 36); " is 137.
Long Statement,BiM.Behaviors.Game.Interactives,InteractiveObject,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Interactives\InteractiveObject.cs,GetAdjacentCells,The length of the statement  "                return Cell.GetCellsInDirections(new DirectionsEnum[] { DirectionsEnum.DIRECTION_NORTH_EAST' DirectionsEnum.DIRECTION_NORTH_WEST' DirectionsEnum.DIRECTION_SOUTH_WEST' DirectionsEnum.DIRECTION_SOUTH_EAST }' 1' 3) " is 211.
Long Statement,BiM.Behaviors.Game.Interactives,InteractiveObject,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Interactives\InteractiveObject.cs,IsAdjacentTo,The length of the statement  "                return Map.CanStopOnCell(cell) && cell.ManhattanDistanceTo(Cell) < 4 && cell.X == Cell.X && cell.Y == Cell.Y && Map.CanStopOnCell(cell); " is 136.
Long Statement,BiM.Behaviors.Game.Items,Inventory,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Items\Inventory.AI.cs,FixInventoryOverloadIfNeeded,The length of the statement  "                foreach (Item item in Items.Where(item => item.IsAutomaticallyDeletable).OrderBy(item => item.Template.price / item.UnityWeight)) " is 129.
Long Statement,BiM.Behaviors.Game.Items,Inventory,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Items\Inventory.AI.cs,EquipBestWeaponIfNeeded,The length of the statement  "            BiM.Behaviors.Game.Items.Item equipped = GetEquippedItem(BiM.Protocol.Enums.CharacterInventoryPositionEnum.ACCESSORY_POSITION_WEAPON); " is 134.
Long Statement,BiM.Behaviors.Game.Items,Inventory,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Items\Inventory.AI.cs,EquipBestWeaponIfNeeded,The length of the statement  "            foreach (BiM.Behaviors.Game.Items.Item item in GetItems(ItemSuperTypeEnum.SUPERTYPE_WEAPON).Union(GetItems(ItemSuperTypeEnum.SUPERTYPE_WEAPON_7)).OrderByDescending(item => item.Level * 10 + item.PowerRate)) " is 206.
Long Statement,BiM.Behaviors.Game.Items,Inventory,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Items\Inventory.AI.cs,GetEquippedWeapon,The length of the statement  "            BiM.Behaviors.Game.Items.Item item = Items.FirstOrDefault(x => x.Position == CharacterInventoryPositionEnum.ACCESSORY_POSITION_WEAPON); " is 135.
Long Statement,BiM.Behaviors.Game.Items,Inventory,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Items\Inventory.AI.cs,CanMove,The length of the statement  "                //logger.Error("Cannot move item {0} because the moved quantity ({1}) is greater than the actual item quantity"' item.Name' quantity' item.Quantity); " is 149.
Long Statement,BiM.Behaviors.Game.Items,Inventory,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Items\Inventory.AI.cs,CanMove,The length of the statement  "            if (position != CharacterInventoryPositionEnum.INVENTORY_POSITION_NOT_EQUIPED && m_itemsPositioningRules.ContainsKey(item.SuperType) && !m_itemsPositioningRules[item.SuperType].Contains(position)) " is 196.
Long Statement,BiM.Behaviors.Game.Items,Inventory,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Items\Inventory.AI.cs,CanMove,The length of the statement  "                //logger.Error("Cannot equip item {0} to {1} because the excepted position is {2}"' item.Name' position' m_itemsPositioningRules[item.SuperType][0]); " is 149.
Long Statement,BiM.Behaviors.Game.Items,Inventory,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Items\Inventory.AI.cs,Equip,The length of the statement  "            var position = availablePositions.Length == 0 ? m_itemsPositioningRules[item.SuperType].First() : availablePositions.First(); " is 125.
Long Statement,BiM.Behaviors.Game.Movements,TimedPath,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Movements\TimedPath.cs,Create,The length of the statement  "                result.Add(new TimedPathElement(cells[i]' i + 1 < cells.Length ? cells[i + 1] : null' lastCellTime' end' velocity' (DirectionsEnum)direction)); " is 143.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,InitAI,The length of the statement  "                if (eff.zoneShape == (uint)SpellShapeEnum.L || eff.zoneShape == (uint)SpellShapeEnum.T || eff.zoneShape == (uint)SpellShapeEnum.D || eff.zoneShape == (uint)SpellShapeEnum.V || eff.zoneShape == (uint)SpellShapeEnum.slash || eff.zoneShape == (uint)SpellShapeEnum.U) " is 263.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,The length of the statement  "            minDamage = (DamageType)(((minDamage * (1 + (addDamagePercent / 100.0)) + addDamage) - reduceDamage) * (1 - (reduceDamagePercent / 100.0)) * chanceToHappen); " is 157.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,The length of the statement  "            maxDamage = (DamageType)(((maxDamage * (1 + (addDamagePercent / 100.0)) + addDamage) - reduceDamage) * (1 - (reduceDamagePercent / 100.0)) * chanceToHappen); " is 157.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "            // When chances to happen is under 100%' then we reduce spellImpact accordingly' for simplicity' but after having apply damage bonus & reduction.  " is 145.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                chanceToHappen /= 2; // It's much better to hit non-summoned foes => effect on summons (except allies summon for Osa) is divided by 2.  " is 134.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                AdjustDamage(result' spellException != null ? spellException.MinNeutral : effect.diceNum' spellException != null ? spellException.MaxNeutral : effect.diceSide' SpellCategory.DamagesNeutral' chanceToHappen' " is 205.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                    GetSafetotal(caster' Stats.PlayerField.NeutralDamageBonus) + GetSafetotal(caster' Stats.PlayerField.DamageBonus) + GetSafetotal(caster' Stats.PlayerField.PhysicalDamage)' " is 170.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                AdjustDamage(result' spellException != null ? spellException.MinFire : effect.diceNum' spellException != null ? spellException.MaxFire : effect.diceSide' SpellCategory.DamagesFire' chanceToHappen' " is 196.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                    GetSafetotal(caster' Stats.PlayerField.FireDamageBonus) + GetSafetotal(caster' Stats.PlayerField.DamageBonus) + GetSafetotal(caster' Stats.PlayerField.MagicDamage)' " is 164.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                AdjustDamage(result' spellException != null ? spellException.MinAir : effect.diceNum' spellException != null ? spellException.MaxAir : effect.diceSide' SpellCategory.DamagesAir' chanceToHappen' " is 193.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                    GetSafetotal(caster' Stats.PlayerField.AirDamageBonus) + GetSafetotal(caster' Stats.PlayerField.DamageBonus) + GetSafetotal(caster' Stats.PlayerField.MagicDamage)' " is 163.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                AdjustDamage(result' spellException != null ? spellException.MinWater : effect.diceNum' spellException != null ? spellException.MaxWater : effect.diceSide' SpellCategory.DamagesWater' chanceToHappen' " is 199.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                    GetSafetotal(caster' Stats.PlayerField.WaterDamageBonus) + GetSafetotal(caster' Stats.PlayerField.DamageBonus) + GetSafetotal(caster' Stats.PlayerField.MagicDamage)' " is 165.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                AdjustDamage(result' spellException != null ? spellException.MinEarth : effect.diceNum' spellException != null ? spellException.MaxEarth : effect.diceSide' SpellCategory.DamagesEarth' chanceToHappen' " is 199.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                    GetSafetotal(caster' Stats.PlayerField.EarthDamageBonus) + GetSafetotal(caster' Stats.PlayerField.DamageBonus) + GetSafetotal(caster' Stats.PlayerField.MagicDamage)' " is 165.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                        if (hptoHeal < target.Stats.Health || hptoHeal < 400) skip = true; // Only heal targets with under 50% of health and at least 400 hp to heal " is 140.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                        AdjustDamage(result' Math.Min(effect.diceNum' hptoHeal)' Math.Min(effect.diceSide' hptoHeal)' SpellCategory.Healing' chanceToHappen' " is 132.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "                if (effect.effectId == (int)EffectsEnum.Effect_SkipTurn) // Let say this effect counts as 2 damage per level of the target " is 122.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The length of the statement  "            if (!isFriend && ((category & SpellCategory.Damages) > 0) && result.MinDamage > target.Stats.Health) // Enough damage to kill the target => affect an arbitrary 50% of max heal (with at least current health)' so strong spells are not favored anymore.  " is 249.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetFullAreaEffect,The length of the statement  "                    //    pc.Character.SendWarning("Spell {0} : {1} targets affected for {2} damage - {3}"' this' nbAffectedTargets' spellImpact.Damage' comment); " is 142.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetFullAreaEffect,The length of the statement  "                comment += string.Format(" - special \"Mot d'altruisme\" processing : hpLeftOnFoes = {0}' efficiency = {1}"' hpLeftOnFoes' (int)spellImpact.Damage); " is 148.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetCellsAtSpellRange,The length of the statement  "                    if (!(LevelTemplate.castInLine && (casterCell.X == cell.X || casterCell.Y == cell.Y) || LevelTemplate.castInDiagonal && (Math.Abs(casterCell.X - cell.X) == Math.Abs(casterCell.Y - cell.Y)))) return false; " is 204.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetCellsAtSpellRange,The length of the statement  "                    if (!(cell.Walkable && !cell.NonWalkableDuringFight && cell != casterCell && !actors.Any(actor => actor.Cell != null && actor.Cell.Id == cell.Id))) return false; " is 161.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,FindBestTarget,The length of the statement  "                    pc.Character.SendWarning("Spell {0} skipped : statesForbidden {1}"' this' string.Join("'"' LevelTemplate.statesForbidden)); " is 123.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,FindBestTarget,The length of the statement  "                    pc.Character.SendWarning("Spell {0} skipped : statesRequired {1}"' this' string.Join("'"' LevelTemplate.statesForbidden)); " is 122.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,FindBestTarget,The length of the statement  "                            destCells = destCells.Intersect(targets.Select(fighter => fighter.Cell)); // for spells that have an area of effect of 1' just find enemies or friends as targets. No need to scan all the range.                     " is 193.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,FindBestTarget,The length of the statement  "                        if (surface >= 560) break; // if spell covers all map' and we have some hit' then no need to continue (first source cells are nearest) " is 134.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetLevelTemplate,The length of the statement  "                lv.effects[0].targetId = (int)(SpellTargetType.ALLIES_NON_SUMMON | SpellTargetType.ENEMIES_NON_SUMMON | SpellTargetType.SELF); " is 126.
Long Statement,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetFullDescription,The length of the statement  "            string result = String.Format("{0}#{1} ({2})#{3} - cat {4} - {5}\r\n"' Name' Template.id' Level' LevelTemplate.id' Categories' Description); " is 140.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FightStart,The length of the statement  "                //Character.SendMessage(String.Format("Spell {0} : initialCooldown {1}' maxCastPerTurn {2}' maxCastPerTarget {3}' maxStack {4}' GlobalCoolDown {5}' minCastInterval {6}"' spell' spell.LevelTemplate.initialCooldown' spell.LevelTemplate.maxCastPerTurn' spell.LevelTemplate.maxCastPerTarget' spell.LevelTemplate.maxStack' spell.LevelTemplate.globalCooldown' spell.LevelTemplate.minCastInterval)' Color.Aquamarine);  " is 410.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,CastAt,The length of the statement  "                throw new ArgumentException(String.Format("Spell Id {0} do not exists in the SpellsBook of {1}' with {2} entries"' msg.spellId' Character.Name' m_spells.Count)); " is 161.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,CastAt,The length of the statement  "            //Character.SendMessage(string.Format("Spell {0} cast at actor Id {1}. Still available : {2}"' spell' msg.targetId' spell.IsAvailable(msg.targetId))); " is 150.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FindBestUsage,The length of the statement  "            IEnumerable<Cell> sourceCells = possiblePlacement == null ? pc.GetPossibleMoves(true' true' pathFinder) : possiblePlacement; " is 124.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FindBestUsage,The length of the statement  "                    if (spell.IsAvailable(null) && ((spellId != 0 && pc.CanCastSpells) || (spellId == 0 && pc.CanFight)) && spell.LevelTemplate.apCost <= pc.Stats.CurrentAP && pc.CanCastSpell(spellId)) " is 181.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FindBestUsage,The length of the statement  "            IEnumerable<Cell> sourceCells = possiblePlacement == null ? pc.GetPossibleMoves(true' true' pathFinder) : possiblePlacement; " is 124.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FindBestUsage,The length of the statement  "            //logger.Debug("***FindBestUsage {0}' {1} spells in book. {2} PA. {3}/{4} HP ***"' category' spells.Count' pc.PCStats.CurrentAP' pc.PCStats.Health' pc.PCStats.MaxHealth); " is 170.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FindBestUsage,The length of the statement  "                    if (spell.IsAvailable(null) && ((spellId != 0 && pc.CanCastSpells) || (spellId == 0 && pc.CanFight)) && spell.LevelTemplate.apCost <= pc.Stats.CurrentAP && pc.CanCastSpell(spellId)) " is 181.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FindBestUsage,The length of the statement  "                            //    logger.Debug("efficiency {0} = {1} ({2})"' lastSpellTarget.Spell' lastSpellTarget.Efficiency' lastSpellTarget.Comment); " is 125.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FindBestUsage,The length of the statement  " //                                  logger.Debug("efficiency {0} = {1} ({2})"' lastSpellTarget.Spell' lastSpellTarget.Efficiency' lastSpellTarget.Comment); " is 155.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FindBestUsage,The length of the statement  "  //                          logger.Info("{0} skipped : available={1} ({6})' canUse={2}' ApCost={3}' CanCast({4})={5}"' spell' spell.IsAvailable(null)' ((spellId != 0 && pc.CanCastSpells) || (spellId == 0 && pc.CanFight))' spell.LevelTemplate.apCost <= pc.Stats.CurrentAP' spellId' pc.CanCastSpell(spellId)' spell.AvailabilityExplainString(null)); " is 346.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FindBestUsage,The length of the statement  "            //pc.Character.SendInformation("Spell {0} selected - efficientcy : {1} - comment = {2}"' spellTarget.Spell' spellTarget.Efficiency' spellTarget.Comment); " is 153.
Long Statement,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FullDump,The length of the statement  "                    logger.Error("       Effect {0} : {1} - {2} {3:P}"' effect.Description' effectdice.diceNum <= effectdice.diceSide ? effectdice.diceNum : effectdice.diceSide' effectdice.diceNum > effectdice.diceSide ? effectdice.diceNum : effectdice.diceSide' effectdice.random == 0 ? 1.0 : effectdice.random / 100.0); " is 301.
Long Statement,BiM.Behaviors.Game.Spells,WeaponSpell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\WeaponSpell.cs,GetLevelTemplate,The length of the statement  "      // We only take effects with a duration or damage or healing effect into considération. Others are probably constant effects on the caster when holding the weapon.  " is 163.
Long Statement,BiM.Behaviors.Game.Spells,WeaponSpell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\WeaponSpell.cs,GetLevelTemplate,The length of the statement  "      LevelTemplate.effects = _weapon.possibleEffects.OfType<EffectInstanceDice>().Where(effect => (effect.duration != 0) || ((GetEffectCategories(effect.effectId' 0) & (SpellCategory.Damages | SpellCategory.Healing)) > 0)).ToList(); " is 227.
Long Statement,BiM.Behaviors.Game.World,Map,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Map.cs,GetFilteredInteractives,The length of the statement  "                    (skills == null || (activeSkills != true && interactive.DisabledSkills.Select(skill => (short)skill.JobSkill.id).Intersect(skills).Any()) || (activeSkills != false && interactive.EnabledSkills.Select(skill => (short)skill.JobSkill.id).Intersect(skills).Any()))).ToArray(); " is 272.
Long Statement,BiM.Behaviors.Game.World,Map,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Map.cs,GetFilteredInteractives,The length of the statement  "                    interactive.DisabledSkills.Any(skill => skill.JobSkill.parentJobId == jobId) || interactive.EnabledSkills.Any(skill => skill.JobSkill.parentJobId == jobId) && " is 158.
Long Statement,BiM.Behaviors.Game.World,MapContext<T>,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\MapContext.cs,TooCloseFromSegment,The length of the statement  "            // Distance computing is inspired by Philip Nicoletti algorithm - http://forums.codeguru.com/printthread.php?t=194400&pp=15&page=2      " is 130.
Long Statement,BiM.Behaviors.Game.World,MapContext<T>,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\MapContext.cs,TooCloseFromSegment,The length of the statement  "            return (distanceLineSquared <= MIN_DISTANCE_SQUARED); // if distance to line is frankly over sqrt(2)/2' it won't block LOS.  " is 123.
Long Statement,BiM.Behaviors.Game.World.MapTraveling,SubMapBuilder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\MapTraveling\SubMapBuilder.cs,GenerateBinders,The length of the statement  "                results.Add(new AdjacentSubMap(new SubMapBinder(map.Id' ++submapid' map.X' map.Y' new List<SubMapNeighbour>())' borderCells)); " is 126.
Long Statement,BiM.Behaviors.Game.World.MapTraveling,SubMapBuilder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\MapTraveling\SubMapBuilder.cs,GetConnectedCells,The length of the statement  "            foreach (var adjacent in GetAdjacentCells(cell' map.Cells' x => !m_treatedCells.Contains(x.Value)' x => IsCellWalkable(map' x' cell))) " is 134.
Long Statement,BiM.Behaviors.Game.World.MapTraveling.Transitions,MovementTransition,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\MapTraveling\Transitions\MovementTransition.cs,BeginTransition,The length of the statement  "            if (!character.ChangeMap(MapNeighbour' cell => Cells == null || Cells.Length == 0 || Array.IndexOf(Cells' cell.CellId) != -1)) " is 126.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,MapExtensions,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\MapExtensions.cs,GetClosestTransitionCell,The length of the statement  "            return map.Cells.Where(cell => (cell.MapChangeData & MapChangeMask) != 0).OrderBy(cell => cell.DistanceTo(startingCell)).FirstOrDefault(); " is 138.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,MapMovement,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\MapMovement.cs,PackPath,The length of the statement  "                if (NoCell == 1 || (Orientation != PreviousOrientation) || NoCell == (path.Length - 1)) // Odd' but first step is always packed " is 127.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,ClearLogic,The length of the statement  "                    foreach (var cellid in enemyCells.Where(cell => cell != null).SelectMany(cell => cell.GetAdjacentCells()).Select(cell => cell.Id)) " is 130.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindConnectedCells,The length of the statement  "            return _cells.Where(cell => cell != null && cell.DistanceSteps <= maxDistance && (filter == null || filter(cell)) && /*(_map.IsTrapped(startingCell.Id) || */!_map.IsTrapped(cell.CellId)/*)*/).OrderBy(cell => (sorter == null ? cell.DistanceSteps : sorter(cell)) /*+ (_map.IsTrapped(cell.CellId)?100:0)*/).Select(cell => cell.Cell); " is 330.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The length of the statement  "            if (!firstStepOnly && (exitCells == null || exitCells.Length == 0)) return false; // We need at least one exit stCell for step 2 " is 128.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The length of the statement  "            bool optimizerActiv = !firstStepOnly && !selectFartherCells; // This strong optimization may fail to find a path. In that case' the non-optimized algorithm is run  " is 162.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The length of the statement  "                    if ((selectFartherCells && _cells[cell].DistanceSteps > MinDist) || (!selectFartherCells && _cells[cell].DistanceSteps < MinDist)) " is 130.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The length of the statement  "                if (optimizerActiv == false || MinDist < CellInfo.DEFAULT_DISTANCE) break; // No need to run a second unoptimized algorithm " is 123.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The length of the statement  "            //Debug.WriteLine("PathFinding from {0} ({1}) to {2} ({3})"' _cells[startingCells[0]].cell' _cells[startingCells[0]].distanceSteps' _cells[ExitCell].cell' _cells[ExitCell].distanceSteps); " is 187.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The length of the statement  "                    if (newCell == null || (newCell.IsCloseToEnemy && _isCautious && newCell.DistanceSteps != 0)) continue; // In cautious mode' don't come close to an enemy " is 153.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The length of the statement  "                        Debug.Assert(false' "Distance shouldn't be higher than DEFAULT_DISTANCE"' "Distance = {0} > Max = {1}"' distance' CellInfo.DEFAULT_DISTANCE); " is 141.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The length of the statement  "                //Debug.Assert(_cells[lowestPoint].IsInPath == false' "Point already in path"' "CurrentCell : {0}' Lowest : {1} - distance : {2}' path : {3}"' _cells[CurrentCell].Cell' _cells[lowestPoint].Cell' lowest' string.Join("'"' _cells.Where(stCell => stCell.IsInPath))); " is 262.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,SquareOpen,The length of the statement  "                    cell.IsOpen = cell.IsCombatWalkable && _map.IsCellWalkable(cell.Cell' false' originCell == null ? null : originCell.Cell)/* && !cell.IsCloseToEnemy*/; " is 150.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,SquareOpen,The length of the statement  "                    cell.IsOpen = _map.IsCellWalkable(cell.Cell' !_isCautious' originCell == null ? null : originCell.Cell)/* && (!_isCautious || !cell.IsCloseToEnemy)*/; " is 150.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The length of the statement  "            if (!FindPath(startCells.Select(cell => cell.Id).ToArray()' endCells.Select(cell => cell.Id).ToArray()' false)) //startCell.Id' endCell.Id)) " is 140.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,SubMapProcessor,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\SubMapProcessor.cs,SubMapFiller,The length of the statement  "                        if (newCell.SubMapId != RegionNb && _map.IsCellWalkable(newCell.Cell' true' null) && (!_isInFight || newCell.IsCombatWalkable)) " is 127.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,WorldMap,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\WorldMap.cs,GetWorldMapConnections,The length of the statement  "      //MapDataManager mapDataManager = new MapDataManager(pathToMapsData' StoredInMap); // Gets only Headers' except if checking cell content is needed " is 146.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,WorldPathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\WorldPathFinder.cs,GetNextSubMapIdToReachTheDestination,The length of the statement  "                    if ((cells[NextSubMap].distanceSteps == BestChoiceDistance) && (RandomPath) && (rnd.Next(2) == 0)) // If 2 possible cells have same value' choose randomly " is 154.
Long Statement,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,WorldPathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\WorldPathFinder.cs,FindPath,The length of the statement  "            if (!FirstStepOnly && (ExitSubMapIds == null || ExitSubMapIds.Length == 0)) return false; // We need at least one exit cell for step 2 " is 134.
Long Statement,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,FindPath,The length of the statement  "            IOpenList openList = m_useLogNodeSearch ? (IOpenList)new LogOpenList(new ComparePfNodeMatrix(matrix)) : new LinearOpenList(new ComparePfNodeMatrix(matrix)); " is 156.
Long Statement,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,FindPath,The length of the statement  "                            newLocation.X + newLocation.Y != startCell.X + startCell.Y && newLocation.X - newLocation.Y != startCell.X - startCell.Y) " is 121.
Long Statement,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,CreateAndOptimisePath,The length of the statement  "                    else if (cell.X == nextCell.X && cell.X != middleCell.X && GetCellCost(middleCell2X' true) < 2 && m_context.IsCellWalkable(middleCell2X' false' cell)) " is 150.
Long Statement,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,CreateAndOptimisePath,The length of the statement  "                    else if (cell.Y == nextCell.Y && cell.Y != middleCell.Y && GetCellCost(middleCell2Y' true) < 2 && m_context.IsCellWalkable(middleCell2Y' false' cell)) " is 150.
Long Statement,BiM.Behaviors.Handlers.Context,FightHandler,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Handlers\Context\FightHandler.cs,HandleGameActionFightLifePointsLostMessage,The length of the statement  "                logger.Error("Fighter {0} has lost {2} HP cast but doesn't exist' or is it {1} ?"' message.targetId' message.sourceId' message.loss); " is 133.
Long Statement,BiM.Behaviors.Handlers.Context,FightHandler,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Handlers\Context\FightHandler.cs,HandleGameActionFightLifePointsGainMessage,The length of the statement  "                logger.Error("Fighter {0} has gain {2} HP cast but doesn't exist' or is it {1} ?"' message.targetId' message.sourceId' message.delta); " is 134.
Long Statement,BiM.Behaviors.Handlers.Context,FightHandler,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Handlers\Context\FightHandler.cs,HandleGameActionFightPointsVariationMessage,The length of the statement  "                logger.Error("Fighter {0} has lost {2} ?P points but doesn't exist' or is it {1} ?"' message.sourceId' message.targetId' -message.delta); " is 137.
Long Statement,BiM.Behaviors.Handlers.Context,MapMovementHandler,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Handlers\Context\MapMovementHandler.cs,HandleGameMapMovementCancelMessage,The length of the statement  "        TimedPathElement clientCell = bot.Character.Movement.TimedPath.Elements.First(entry => entry.CurrentCell.Id == message.cellId); " is 127.
Long Statement,BiM.Behaviors.Handlers.Context,MapMovementHandler,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Handlers\Context\MapMovementHandler.cs,HandleGameMapMovementCancelMessage,The length of the statement  "        // the difference is the time elapsed until the client analyse the path and start moving (~160ms) it depends also on computer hardware " is 134.
Long Statement,BiM.Behaviors.Handlers.Context,MapMovementHandler,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Handlers\Context\MapMovementHandler.cs,HandleGameMapMovementCancelMessage,The length of the statement  "                    "Estimated difference : {2}ms"' message.cellId' attemptElement.CurrentCell.Id' (attemptElement.EndTime - clientCell.EndTime).TotalMilliseconds); " is 144.
Long Statement,BiM.Behaviors.Handlers.Context,MapMovementHandler,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Handlers\Context\MapMovementHandler.cs,HandleGameMapMovementMessage,The length of the statement  "        logger.Error("Actor {0} not found (known : {1})"' message.actorId' String.Join("'"' fightActor ? bot.Character.Fight.Actors : bot.Character.Context.Actors)); // only a log for the moment until context are fully handled " is 218.
Long Statement,BiM.Behaviors.Handlers.Context,MapMovementHandler,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Handlers\Context\MapMovementHandler.cs,HandleGameMapMovementMessage,The length of the statement  "      // just to update the position. If in fight' better update immediately to be sure that the next action take the mouvement into account " is 134.
Long Statement,BiM.Behaviors.Settings,BotSettings,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Settings\BotSettings.cs,GetOrAddEntry,The length of the statement  "                throw new Exception(string.Format("Found {0} settings entries of type {1}' 1 or 0 expected"' entries.Length' typeof(T))); " is 121.
Complex Conditional,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,InitAI,The conditional expression  "eff.zoneShape == (uint)SpellShapeEnum.L || eff.zoneShape == (uint)SpellShapeEnum.T || eff.zoneShape == (uint)SpellShapeEnum.D || eff.zoneShape == (uint)SpellShapeEnum.V || eff.zoneShape == (uint)SpellShapeEnum.slash || eff.zoneShape == (uint)SpellShapeEnum.U"  is complex.
Complex Conditional,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetCellsAtSpellRange,The conditional expression  "!(LevelTemplate.castInLine && (casterCell.X == cell.X || casterCell.Y == cell.Y) || LevelTemplate.castInDiagonal && (Math.Abs(casterCell.X - cell.X) == Math.Abs(casterCell.Y - cell.Y)))"  is complex.
Complex Conditional,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetCellsAtSpellRange,The conditional expression  "!(cell.Walkable && !cell.NonWalkableDuringFight && cell != casterCell && !actors.Any(actor => actor.Cell != null && actor.Cell.Id == cell.Id))"  is complex.
Complex Conditional,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FindBestUsage,The conditional expression  "spell.IsAvailable(null) && ((spellId != 0 && pc.CanCastSpells) || (spellId == 0 && pc.CanFight)) && spell.LevelTemplate.apCost <= pc.Stats.CurrentAP && pc.CanCastSpell(spellId)"  is complex.
Complex Conditional,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FindBestUsage,The conditional expression  "spell.IsAvailable(null) && ((spellId != 0 && pc.CanCastSpells) || (spellId == 0 && pc.CanFight)) && spell.LevelTemplate.apCost <= pc.Stats.CurrentAP && pc.CanCastSpell(spellId)"  is complex.
Complex Conditional,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,GetAllCellsInRectangle,The conditional expression  "!skipStartAndEndCells || (!(x == X && y == Y) && !(x == oppositeCell.X && y == oppositeCell.Y))"  is complex.
Complex Conditional,BiM.Behaviors.Game.World,MapContext<T>,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\MapContext.cs,IsCellWalkable,The conditional expression  "cell.MoveZone != previousCell.MoveZone ||                      cell.MoveZone == previousCell.MoveZone && cell.MoveZone == 0 && floorDiff > Map.ElevationTolerance"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.MapTraveling,SubMapBuilder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\MapTraveling\SubMapBuilder.cs,IsCellWalkable,The conditional expression  "cell.MoveZone != previousCell.MoveZone ||                       cell.MoveZone == previousCell.MoveZone && cell.MoveZone == 0 && floorDiff > World.Map.ElevationTolerance"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The conditional expression  "!firstStepOnly && !selectFartherCells && newPass < maxDistance && exitCells.Any(id => newCell.CellId == id)"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The conditional expression  "!firstStepOnly && !selectFartherCells && newPass < maxDistance && exitCells.Any(id => newCell.CellId == id)"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The conditional expression  "(selectFartherCells && _cells[cell].DistanceSteps > MinDist) || (!selectFartherCells && _cells[cell].DistanceSteps < MinDist)"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The conditional expression  "newCell == null || (newCell.IsCloseToEnemy && _isCautious && newCell.DistanceSteps != 0)"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,SubMapProcessor,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\SubMapProcessor.cs,SubMapFiller,The conditional expression  "(startingCell == null) ||                   !_map.IsCellWalkable(startingCell.Cell' true' null) || !(!_isInFight || startingCell.IsCombatWalkable) ||                   (startingCell.SubMapId == RegionNb)"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,SubMapProcessor,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\SubMapProcessor.cs,SubMapFiller,The conditional expression  "newCell.SubMapId != RegionNb && _map.IsCellWalkable(newCell.Cell' true' null) && (!_isInFight || newCell.IsCombatWalkable)"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,FindPath,The conditional expression  "newLocation.X + newLocation.Y != endCell.X + endCell.Y && newLocation.X - newLocation.Y != endCell.X - endCell.Y ||                              newLocation.X + newLocation.Y != startCell.X + startCell.Y && newLocation.X - newLocation.Y != startCell.X - startCell.Y"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,CreateAndOptimisePath,The conditional expression  "i + 2 < len && cell.ManhattanDistanceTo(nodes[i + 2].Cell) == 1 &&                      !cell.IsChangeZone(nodes[i + 1].Cell) &&                      !nodes[i + 1].Cell.IsChangeZone(nodes[i + 2].Cell)"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,CreateAndOptimisePath,The conditional expression  "((cell.X + cell.Y == nextCell.X + nextCell.Y && cell.X - cell.Y != middleCell.X - middleCell.Y) ||                          (cell.X - cell.Y == nextCell.X - nextCell.Y && cell.X - cell.Y != middleCell.X - middleCell.Y )) &&                           !cell.IsChangeZone(middleCell) &&                           !middleCell.IsChangeZone(nextCell)"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,CreateAndOptimisePath,The conditional expression  "cell.X == nextCell.X && cell.X != middleCell.X && GetCellCost(middleCell2X' true) < 2 && m_context.IsCellWalkable(middleCell2X' false' cell)"  is complex.
Complex Conditional,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,CreateAndOptimisePath,The conditional expression  "cell.Y == nextCell.Y && cell.Y != middleCell.Y && GetCellCost(middleCell2Y' true) < 2 && m_context.IsCellWalkable(middleCell2Y' false' cell)"  is complex.
Magic Number,BiM.Behaviors.Data.Maps,MapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\MapsManager.cs,Initialize,The following statement contains a magic number: new string(reader.ReadChars(4)) != "MAPS"
Magic Number,BiM.Behaviors.Data.Maps,MapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\MapsManager.cs,EndFileCreation,The following statement contains a magic number: m_writer.Seek(6' SeekOrigin.Begin);
Magic Number,BiM.Behaviors.Data.Maps,MapsPositionManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\MapsPositionManager.cs,BeginGeneration,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      // step 1 : load areas stuff                      progression.UpdateValue(0' "(1/4) Getting areas ...");                      m_subAreas = ObjectDataManager.Instance.EnumerateObjects<SubArea>().ToDictionary(x => x.id);                      progression.UpdateValue(33);                      m_areas = ObjectDataManager.Instance.EnumerateObjects<Area>().ToDictionary(x => x.id);                      progression.UpdateValue(66);                      m_superAreas = ObjectDataManager.Instance.EnumerateObjects<SuperArea>().ToDictionary(x => x.id);                      progression.UpdateValue(100);                        // step 2 : bind to each map his parents areas                      progression.UpdateValue(0' "(2/4) Getting maps ...");                      var mapsPosition = new List<MapPositionData>();                      int counter = 0;                      progression.Total = MapsManager.Instance.MapsCount;                      foreach (var map in maps)                      {                          var pos = new Point(map.X' map.Y);                          var subArea = m_subAreas.ContainsKey(map.SubAreaId) ? m_subAreas[map.SubAreaId] : null;                          var area = subArea != null && m_areas.ContainsKey(subArea.areaId) ? m_areas[subArea.areaId] : null;                          var superArea = area != null && m_subAreas.ContainsKey(area.superAreaId) ? m_superAreas[area.superAreaId] : null;                            var mapWithPrority = new MapWithPriority(map);                            if (subArea != null)                          {                              m_subAreaMaps.AddRegion(subArea.id' map.Id);                              m_subAreaMaps.AddMap(subArea.id' pos' mapWithPrority);                          }                            if (area != null)                          {                              if (!m_areaChildrens.ContainsRegion(area.id' subArea.id))                                  m_areaChildrens.AddRegion(area.id' subArea.id);                              m_areaChildrens.AddMap(area.id' pos' mapWithPrority);                          }                            if (superArea != null)                          {                              if (!m_superAreaChildrens.ContainsRegion(superArea.id' area.id))                                  m_superAreaChildrens.AddRegion(superArea.id' area.id);                              m_superAreaChildrens.AddMap(superArea.id' pos' mapWithPrority);                          }                            int? worldmapId = superArea != null ? (int?)superArea.worldmapId : null;                          if (superArea != null)                          {                              if (!m_worldMapsChildrens.ContainsRegion(worldmapId.Value' superArea.id))                                  m_worldMapsChildrens.AddRegion(worldmapId.Value' superArea.id);                              m_worldMapsChildrens.AddMap(worldmapId.Value' pos' mapWithPrority);                          }                            mapsPosition.Add(new MapPositionData                          {                              MapId = map.Id'                              SubAreaId = subArea != null ? subArea.id : (int?) null'                              AreaId = area != null ? area.id : (int?) null'                              SuperAreaId = superArea != null ? superArea.id : (int?) null'                              WorldMapId = worldmapId'                              X = map.X'                              Y = map.Y                          });                          progression.UpdateValue(counter++);                      }                        progression.UpdateValue(0' "(3/4) Finding neighbours ...");                      progression.Total = mapsPosition.Count;                      // step 3 : found for each map his neighbours                      foreach (var map in mapsPosition)                      {                          var enumerator = FindMapNeighbours(map).GetEnumerator();                          enumerator.MoveNext();                          map.RightNeighbourId = enumerator.Current;                          enumerator.MoveNext();                          map.TopNeighbourId = enumerator.Current;                          enumerator.MoveNext();                          map.LeftNeighbourId = enumerator.Current;                          enumerator.MoveNext();                          map.BottomNeighbourId = enumerator.Current;                            Debug.Assert(!enumerator.MoveNext());                          progression.Value++;                      }                        progression.UpdateValue(0' "(4/4) Saving ...");                      // step 4 : save all the datas and dispose the allocated lists                      using (var client = GetClient())                      {                          var typed = client.As<MapPositionData>();                          typed.SetRangeInHash(typed.GetHash<int>(REDIS_KEY)' mapsPosition.ToDictionary(x => x.MapId));                          client.Set(REDIS_VERSION' VERSION);                      }                        // dispose                      m_subAreaMaps.Dispose();                      m_areaChildrens.Dispose();                      m_superAreaChildrens.Dispose();                      m_worldMapsChildrens.Dispose();                        m_subAreas.Clear();                      m_areas.Clear();                      m_superAreas.Clear();                        progression.NotifyEnded();                  });
Magic Number,BiM.Behaviors.Data.Maps,MapsPositionManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\MapsPositionManager.cs,BeginGeneration,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      // step 1 : load areas stuff                      progression.UpdateValue(0' "(1/4) Getting areas ...");                      m_subAreas = ObjectDataManager.Instance.EnumerateObjects<SubArea>().ToDictionary(x => x.id);                      progression.UpdateValue(33);                      m_areas = ObjectDataManager.Instance.EnumerateObjects<Area>().ToDictionary(x => x.id);                      progression.UpdateValue(66);                      m_superAreas = ObjectDataManager.Instance.EnumerateObjects<SuperArea>().ToDictionary(x => x.id);                      progression.UpdateValue(100);                        // step 2 : bind to each map his parents areas                      progression.UpdateValue(0' "(2/4) Getting maps ...");                      var mapsPosition = new List<MapPositionData>();                      int counter = 0;                      progression.Total = MapsManager.Instance.MapsCount;                      foreach (var map in maps)                      {                          var pos = new Point(map.X' map.Y);                          var subArea = m_subAreas.ContainsKey(map.SubAreaId) ? m_subAreas[map.SubAreaId] : null;                          var area = subArea != null && m_areas.ContainsKey(subArea.areaId) ? m_areas[subArea.areaId] : null;                          var superArea = area != null && m_subAreas.ContainsKey(area.superAreaId) ? m_superAreas[area.superAreaId] : null;                            var mapWithPrority = new MapWithPriority(map);                            if (subArea != null)                          {                              m_subAreaMaps.AddRegion(subArea.id' map.Id);                              m_subAreaMaps.AddMap(subArea.id' pos' mapWithPrority);                          }                            if (area != null)                          {                              if (!m_areaChildrens.ContainsRegion(area.id' subArea.id))                                  m_areaChildrens.AddRegion(area.id' subArea.id);                              m_areaChildrens.AddMap(area.id' pos' mapWithPrority);                          }                            if (superArea != null)                          {                              if (!m_superAreaChildrens.ContainsRegion(superArea.id' area.id))                                  m_superAreaChildrens.AddRegion(superArea.id' area.id);                              m_superAreaChildrens.AddMap(superArea.id' pos' mapWithPrority);                          }                            int? worldmapId = superArea != null ? (int?)superArea.worldmapId : null;                          if (superArea != null)                          {                              if (!m_worldMapsChildrens.ContainsRegion(worldmapId.Value' superArea.id))                                  m_worldMapsChildrens.AddRegion(worldmapId.Value' superArea.id);                              m_worldMapsChildrens.AddMap(worldmapId.Value' pos' mapWithPrority);                          }                            mapsPosition.Add(new MapPositionData                          {                              MapId = map.Id'                              SubAreaId = subArea != null ? subArea.id : (int?) null'                              AreaId = area != null ? area.id : (int?) null'                              SuperAreaId = superArea != null ? superArea.id : (int?) null'                              WorldMapId = worldmapId'                              X = map.X'                              Y = map.Y                          });                          progression.UpdateValue(counter++);                      }                        progression.UpdateValue(0' "(3/4) Finding neighbours ...");                      progression.Total = mapsPosition.Count;                      // step 3 : found for each map his neighbours                      foreach (var map in mapsPosition)                      {                          var enumerator = FindMapNeighbours(map).GetEnumerator();                          enumerator.MoveNext();                          map.RightNeighbourId = enumerator.Current;                          enumerator.MoveNext();                          map.TopNeighbourId = enumerator.Current;                          enumerator.MoveNext();                          map.LeftNeighbourId = enumerator.Current;                          enumerator.MoveNext();                          map.BottomNeighbourId = enumerator.Current;                            Debug.Assert(!enumerator.MoveNext());                          progression.Value++;                      }                        progression.UpdateValue(0' "(4/4) Saving ...");                      // step 4 : save all the datas and dispose the allocated lists                      using (var client = GetClient())                      {                          var typed = client.As<MapPositionData>();                          typed.SetRangeInHash(typed.GetHash<int>(REDIS_KEY)' mapsPosition.ToDictionary(x => x.MapId));                          client.Set(REDIS_VERSION' VERSION);                      }                        // dispose                      m_subAreaMaps.Dispose();                      m_areaChildrens.Dispose();                      m_superAreaChildrens.Dispose();                      m_worldMapsChildrens.Dispose();                        m_subAreas.Clear();                      m_areas.Clear();                      m_superAreas.Clear();                        progression.NotifyEnded();                  });
Magic Number,BiM.Behaviors.Data.Maps,MapsPositionManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\MapsPositionManager.cs,BeginGeneration,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      // step 1 : load areas stuff                      progression.UpdateValue(0' "(1/4) Getting areas ...");                      m_subAreas = ObjectDataManager.Instance.EnumerateObjects<SubArea>().ToDictionary(x => x.id);                      progression.UpdateValue(33);                      m_areas = ObjectDataManager.Instance.EnumerateObjects<Area>().ToDictionary(x => x.id);                      progression.UpdateValue(66);                      m_superAreas = ObjectDataManager.Instance.EnumerateObjects<SuperArea>().ToDictionary(x => x.id);                      progression.UpdateValue(100);                        // step 2 : bind to each map his parents areas                      progression.UpdateValue(0' "(2/4) Getting maps ...");                      var mapsPosition = new List<MapPositionData>();                      int counter = 0;                      progression.Total = MapsManager.Instance.MapsCount;                      foreach (var map in maps)                      {                          var pos = new Point(map.X' map.Y);                          var subArea = m_subAreas.ContainsKey(map.SubAreaId) ? m_subAreas[map.SubAreaId] : null;                          var area = subArea != null && m_areas.ContainsKey(subArea.areaId) ? m_areas[subArea.areaId] : null;                          var superArea = area != null && m_subAreas.ContainsKey(area.superAreaId) ? m_superAreas[area.superAreaId] : null;                            var mapWithPrority = new MapWithPriority(map);                            if (subArea != null)                          {                              m_subAreaMaps.AddRegion(subArea.id' map.Id);                              m_subAreaMaps.AddMap(subArea.id' pos' mapWithPrority);                          }                            if (area != null)                          {                              if (!m_areaChildrens.ContainsRegion(area.id' subArea.id))                                  m_areaChildrens.AddRegion(area.id' subArea.id);                              m_areaChildrens.AddMap(area.id' pos' mapWithPrority);                          }                            if (superArea != null)                          {                              if (!m_superAreaChildrens.ContainsRegion(superArea.id' area.id))                                  m_superAreaChildrens.AddRegion(superArea.id' area.id);                              m_superAreaChildrens.AddMap(superArea.id' pos' mapWithPrority);                          }                            int? worldmapId = superArea != null ? (int?)superArea.worldmapId : null;                          if (superArea != null)                          {                              if (!m_worldMapsChildrens.ContainsRegion(worldmapId.Value' superArea.id))                                  m_worldMapsChildrens.AddRegion(worldmapId.Value' superArea.id);                              m_worldMapsChildrens.AddMap(worldmapId.Value' pos' mapWithPrority);                          }                            mapsPosition.Add(new MapPositionData                          {                              MapId = map.Id'                              SubAreaId = subArea != null ? subArea.id : (int?) null'                              AreaId = area != null ? area.id : (int?) null'                              SuperAreaId = superArea != null ? superArea.id : (int?) null'                              WorldMapId = worldmapId'                              X = map.X'                              Y = map.Y                          });                          progression.UpdateValue(counter++);                      }                        progression.UpdateValue(0' "(3/4) Finding neighbours ...");                      progression.Total = mapsPosition.Count;                      // step 3 : found for each map his neighbours                      foreach (var map in mapsPosition)                      {                          var enumerator = FindMapNeighbours(map).GetEnumerator();                          enumerator.MoveNext();                          map.RightNeighbourId = enumerator.Current;                          enumerator.MoveNext();                          map.TopNeighbourId = enumerator.Current;                          enumerator.MoveNext();                          map.LeftNeighbourId = enumerator.Current;                          enumerator.MoveNext();                          map.BottomNeighbourId = enumerator.Current;                            Debug.Assert(!enumerator.MoveNext());                          progression.Value++;                      }                        progression.UpdateValue(0' "(4/4) Saving ...");                      // step 4 : save all the datas and dispose the allocated lists                      using (var client = GetClient())                      {                          var typed = client.As<MapPositionData>();                          typed.SetRangeInHash(typed.GetHash<int>(REDIS_KEY)' mapsPosition.ToDictionary(x => x.MapId));                          client.Set(REDIS_VERSION' VERSION);                      }                        // dispose                      m_subAreaMaps.Dispose();                      m_areaChildrens.Dispose();                      m_superAreaChildrens.Dispose();                      m_worldMapsChildrens.Dispose();                        m_subAreas.Clear();                      m_areas.Clear();                      m_superAreas.Clear();                        progression.NotifyEnded();                  });
Magic Number,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,BeginSubMapsGeneration,The following statement contains a magic number: var progression = new ProgressionCounter(100);
Magic Number,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The following statement contains a magic number: Parallel.ForEach(MapsManager.Instance.EnumerateMaps()' map =>                  {                      var builder = new SubMapBuilder();                      AdjacentSubMap[] submaps = builder.GenerateBinders(map);                        m_submaps.TryAdd(map.Id' submaps);                        // update the counter (in percent)                      Interlocked.Increment(ref counter);                      if (counter%30 == 0)                      {                          lock (progression)                          {                              if (counter%30 == 0)                                  progression.UpdateValue(total == 0 ? 100d : (counter/total)*100d);                          }                      }                  });
Magic Number,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The following statement contains a magic number: Parallel.ForEach(MapsManager.Instance.EnumerateMaps()' map =>                  {                      var builder = new SubMapBuilder();                      AdjacentSubMap[] submaps = builder.GenerateBinders(map);                        m_submaps.TryAdd(map.Id' submaps);                        // update the counter (in percent)                      Interlocked.Increment(ref counter);                      if (counter%30 == 0)                      {                          lock (progression)                          {                              if (counter%30 == 0)                                  progression.UpdateValue(total == 0 ? 100d : (counter/total)*100d);                          }                      }                  });
Magic Number,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The following statement contains a magic number: Parallel.ForEach(MapsManager.Instance.EnumerateMaps()' map =>                  {                      var builder = new SubMapBuilder();                      AdjacentSubMap[] submaps = builder.GenerateBinders(map);                        m_submaps.TryAdd(map.Id' submaps);                        // update the counter (in percent)                      Interlocked.Increment(ref counter);                      if (counter%30 == 0)                      {                          lock (progression)                          {                              if (counter%30 == 0)                                  progression.UpdateValue(total == 0 ? 100d : (counter/total)*100d);                          }                      }                  });
Magic Number,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The following statement contains a magic number: Parallel.ForEach(MapsManager.Instance.EnumerateMaps()' map =>                  {                      var builder = new SubMapBuilder();                      AdjacentSubMap[] submaps = builder.GenerateBinders(map);                        m_submaps.TryAdd(map.Id' submaps);                        // update the counter (in percent)                      Interlocked.Increment(ref counter);                      if (counter%30 == 0)                      {                          lock (progression)                          {                              if (counter%30 == 0)                                  progression.UpdateValue(total == 0 ? 100d : (counter/total)*100d);                          }                      }                  });
Magic Number,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The following statement contains a magic number: Parallel.ForEach(m_submaps' cacheEntry =>                  {                      var neighbours = new[]                          {                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Right)'                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Top)'                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Left)'                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Bottom)'                          };                        foreach (AdjacentSubMap submap in cacheEntry.Value)                      {                          for (MapNeighbour neighbour = MapNeighbour.Right; neighbour <= MapNeighbour.Bottom; neighbour++)                          {                              int i = (int) neighbour - 1;                                if (neighbours[i] == null)                                  continue;                                MapNeighbour opposite = GetOppositeDirection(neighbour);                              AdjacentSubMap[] submaps;                              int mapChangeData = Map.MapChangeDatas[neighbour];                              int oppositeMapChangeData = Map.MapChangeDatas[neighbour];                              int cellChangement = Map.MapCellChangement[neighbour];                                if (neighbours[i] != null && m_submaps.TryGetValue(neighbours[i].Value' out submaps))                              {                                  lock (submaps)                                      foreach (AdjacentSubMap neighbourSubmap in submaps)                                      {                                          // neighbor already set                                          lock (submap.SubMap.Neighbours)                                              if (submap.SubMap.Neighbours.Any(x => x.GlobalId == neighbourSubmap.SubMap.GlobalId))                                                  continue;                                            // if any cell of the submaps is a transition to another submap                                          AdjacentSubMap submap1 = neighbourSubmap;                                          short[] links = submap.ChangeCells.Where(x => (x.MapChangeData & mapChangeData) != 0 &&                                                                                        submap1.ChangeCells.Any(y => y.Id == x.Id + cellChangement)).Select(x => x.Id).ToArray();                                          if (links.Length > 0)                                          {                                              // set in the two ways                                              lock (submap.SubMap.Neighbours)                                                  lock (neighbourSubmap.SubMap.Neighbours)                                                  {                                                      submap.SubMap.Neighbours.Add(new SubMapNeighbour(neighbourSubmap.SubMap.GlobalId' new MovementTransition(neighbour' links)));                                                      neighbourSubmap.SubMap.Neighbours.Add(new SubMapNeighbour(submap.SubMap.GlobalId'                                                                                                                new MovementTransition(opposite' links.Select(x => (short) (x + cellChangement)).ToArray())));                                                  }                                          }                                      }                              }                          }                      }                        // update the counter (in percent)                      Interlocked.Increment(ref counter);                      if (counter%30 == 0)                      {                          lock (progression)                          {                              if (counter%30 == 0)                                  progression.UpdateValue(counter/(double) m_submaps.Count*100d);                          }                      }                  });
Magic Number,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The following statement contains a magic number: Parallel.ForEach(m_submaps' cacheEntry =>                  {                      var neighbours = new[]                          {                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Right)'                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Top)'                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Left)'                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Bottom)'                          };                        foreach (AdjacentSubMap submap in cacheEntry.Value)                      {                          for (MapNeighbour neighbour = MapNeighbour.Right; neighbour <= MapNeighbour.Bottom; neighbour++)                          {                              int i = (int) neighbour - 1;                                if (neighbours[i] == null)                                  continue;                                MapNeighbour opposite = GetOppositeDirection(neighbour);                              AdjacentSubMap[] submaps;                              int mapChangeData = Map.MapChangeDatas[neighbour];                              int oppositeMapChangeData = Map.MapChangeDatas[neighbour];                              int cellChangement = Map.MapCellChangement[neighbour];                                if (neighbours[i] != null && m_submaps.TryGetValue(neighbours[i].Value' out submaps))                              {                                  lock (submaps)                                      foreach (AdjacentSubMap neighbourSubmap in submaps)                                      {                                          // neighbor already set                                          lock (submap.SubMap.Neighbours)                                              if (submap.SubMap.Neighbours.Any(x => x.GlobalId == neighbourSubmap.SubMap.GlobalId))                                                  continue;                                            // if any cell of the submaps is a transition to another submap                                          AdjacentSubMap submap1 = neighbourSubmap;                                          short[] links = submap.ChangeCells.Where(x => (x.MapChangeData & mapChangeData) != 0 &&                                                                                        submap1.ChangeCells.Any(y => y.Id == x.Id + cellChangement)).Select(x => x.Id).ToArray();                                          if (links.Length > 0)                                          {                                              // set in the two ways                                              lock (submap.SubMap.Neighbours)                                                  lock (neighbourSubmap.SubMap.Neighbours)                                                  {                                                      submap.SubMap.Neighbours.Add(new SubMapNeighbour(neighbourSubmap.SubMap.GlobalId' new MovementTransition(neighbour' links)));                                                      neighbourSubmap.SubMap.Neighbours.Add(new SubMapNeighbour(submap.SubMap.GlobalId'                                                                                                                new MovementTransition(opposite' links.Select(x => (short) (x + cellChangement)).ToArray())));                                                  }                                          }                                      }                              }                          }                      }                        // update the counter (in percent)                      Interlocked.Increment(ref counter);                      if (counter%30 == 0)                      {                          lock (progression)                          {                              if (counter%30 == 0)                                  progression.UpdateValue(counter/(double) m_submaps.Count*100d);                          }                      }                  });
Magic Number,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The following statement contains a magic number: Parallel.ForEach(m_submaps' cacheEntry =>                  {                      var neighbours = new[]                          {                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Right)'                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Top)'                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Left)'                              TryGetMapNeighbour(cacheEntry.Key' MapNeighbour.Bottom)'                          };                        foreach (AdjacentSubMap submap in cacheEntry.Value)                      {                          for (MapNeighbour neighbour = MapNeighbour.Right; neighbour <= MapNeighbour.Bottom; neighbour++)                          {                              int i = (int) neighbour - 1;                                if (neighbours[i] == null)                                  continue;                                MapNeighbour opposite = GetOppositeDirection(neighbour);                              AdjacentSubMap[] submaps;                              int mapChangeData = Map.MapChangeDatas[neighbour];                              int oppositeMapChangeData = Map.MapChangeDatas[neighbour];                              int cellChangement = Map.MapCellChangement[neighbour];                                if (neighbours[i] != null && m_submaps.TryGetValue(neighbours[i].Value' out submaps))                              {                                  lock (submaps)                                      foreach (AdjacentSubMap neighbourSubmap in submaps)                                      {                                          // neighbor already set                                          lock (submap.SubMap.Neighbours)                                              if (submap.SubMap.Neighbours.Any(x => x.GlobalId == neighbourSubmap.SubMap.GlobalId))                                                  continue;                                            // if any cell of the submaps is a transition to another submap                                          AdjacentSubMap submap1 = neighbourSubmap;                                          short[] links = submap.ChangeCells.Where(x => (x.MapChangeData & mapChangeData) != 0 &&                                                                                        submap1.ChangeCells.Any(y => y.Id == x.Id + cellChangement)).Select(x => x.Id).ToArray();                                          if (links.Length > 0)                                          {                                              // set in the two ways                                              lock (submap.SubMap.Neighbours)                                                  lock (neighbourSubmap.SubMap.Neighbours)                                                  {                                                      submap.SubMap.Neighbours.Add(new SubMapNeighbour(neighbourSubmap.SubMap.GlobalId' new MovementTransition(neighbour' links)));                                                      neighbourSubmap.SubMap.Neighbours.Add(new SubMapNeighbour(submap.SubMap.GlobalId'                                                                                                                new MovementTransition(opposite' links.Select(x => (short) (x + cellChangement)).ToArray())));                                                  }                                          }                                      }                              }                          }                      }                        // update the counter (in percent)                      Interlocked.Increment(ref counter);                      if (counter%30 == 0)                      {                          lock (progression)                          {                              if (counter%30 == 0)                                  progression.UpdateValue(counter/(double) m_submaps.Count*100d);                          }                      }                  });
Magic Number,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The following statement contains a magic number: progression.UpdateValue(50);
Magic Number,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,GenerateSubMaps,The following statement contains a magic number: progression.UpdateValue(100);
Magic Number,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,IsImmune,The following statement contains a magic number: spell.Categories == Spells.Spell.SpellCategory.Healing && HasState(76)
Magic Number,BiM.Behaviors.Game.Actors.Fighters,PlayedFighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\PlayedFighter.AI.cs,PassTurn,The following statement contains a magic number: Character.Bot.CallDelayed(200' () => Character.Bot.SendToServer(new GameFightTurnFinishMessage()));
Magic Number,BiM.Behaviors.Game.Actors.RolePlay,Humanoid,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\Humanoid.cs,GetAdaptedVelocity,The following statement contains a magic number: return path.MPCost <= 3 ? MovementBehavior.WalkingMovementBehavior : MovementBehavior.RunningMovementBehavior;
Magic Number,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,UpdateRegen,The following statement contains a magic number: elapsedSeconds < 3.0
Magic Number,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,UpdateRegen,The following statement contains a magic number: var regainedLife = (int)Math.Floor(elapsedSeconds / (RegenRate / 10.0f));
Magic Number,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,InternalChangeMap,The following statement contains a magic number: Bot.CallDelayed(6000' InternalChangeMap);
Magic Number,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,InternalChangeMap,The following statement contains a magic number: Bot.CallDelayed(400' () => Bot.AddMessage(() => Bot.SendToServer(new ChangeMapMessage(_dstLeaderMap))));
Magic Number,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,CheckCriteria,The following statement contains a magic number: Debug.Assert(match.Captures.Count == 4);
Magic Number,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,CheckCriteria,The following statement contains a magic number: bool greater = match.Captures[2].Value == "g";
Magic Number,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,CheckCriteria,The following statement contains a magic number: logger.Error("Weapon criteria : {0} is not an int"' match.Captures[3].Value);
Magic Number,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,CheckCriteria,The following statement contains a magic number: !int.TryParse(match.Captures[3].Value' out Value)
Magic Number,BiM.Behaviors.Game.Effects,EffectBase,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectBase.AI.cs,canAffectTarget,The following statement contains a magic number: spell.LevelTemplate.spellBreed == (uint)BreedEnum.Eniripsa && spell.Categories == Spell.SpellCategory.Healing && caster.HasState(76)
Magic Number,BiM.Behaviors.Game.Effects,EffectCreature,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectCreature.cs,GetHashCode,The following statement contains a magic number: return (base.GetHashCode()*397) ^ m_monsterfamily.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,FixDate,The following statement contains a magic number: m_year = 9999;
Magic Number,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,FixDate,The following statement contains a magic number: m_year > 9999
Magic Number,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,FixDate,The following statement contains a magic number: m_month = 12;
Magic Number,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,FixDate,The following statement contains a magic number: m_month > 12
Magic Number,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,FixDate,The following statement contains a magic number: m_day = 31;
Magic Number,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,FixDate,The following statement contains a magic number: m_day > 31
Magic Number,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_day.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_hour.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_minute.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_month.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectDate,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDate.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_year.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectDice,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDice.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ m_diceface;
Magic Number,BiM.Behaviors.Game.Effects,EffectDice,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDice.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ m_dicenum;
Magic Number,BiM.Behaviors.Game.Effects,EffectDuration,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDuration.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_days.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectDuration,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDuration.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_hours.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectDuration,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectDuration.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_minutes.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectInteger,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectInteger.cs,GetHashCode,The following statement contains a magic number: return (base.GetHashCode()*397) ^ m_value.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectLadder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectLadder.cs,GetHashCode,The following statement contains a magic number: return (base.GetHashCode()*397) ^ m_monsterCount.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectMinMax,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectMinMax.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_maxvalue.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectMinMax,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectMinMax.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_minvalue.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectMount,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectMount.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_date.GetHashCode();
Magic Number,BiM.Behaviors.Game.Effects,EffectMount,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectMount.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_modelId;
Magic Number,BiM.Behaviors.Game.Effects,EffectMount,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectMount.cs,GetHashCode,The following statement contains a magic number: result = (result*397) ^ m_mountId;
Magic Number,BiM.Behaviors.Game.Effects,EffectString,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Effects\EffectString.cs,GetHashCode,The following statement contains a magic number: return (base.GetHashCode()*397) ^ (m_value != null ? m_value.GetHashCode() : 0);
Magic Number,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,DispelEffect,The following statement contains a magic number: effectT.Item1.uid == boostUid && effectT.Item1.targetId == targetId && effectT.Item1.dispelable != 2
Magic Number,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,DispelTarget,The following statement contains a magic number: effectT.Item1.targetId == targetId && effectT.Item1.dispelable != 2
Magic Number,BiM.Behaviors.Game.Fights,Fight,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\Fight.cs,DispelSpell,The following statement contains a magic number: effectT.Item1.targetId == targetId && effectT.Item1.spellId == spellId && effectT.Item1.dispelable != 2
Magic Number,BiM.Behaviors.Game.Interactives,InteractiveObject,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Interactives\InteractiveObject.cs,IsFish,The following statement contains a magic number: return m_disabledSkills.Any(skill => skill.JobSkill.parentJobId == 36) || m_enabledSkills.Any(skill => skill.JobSkill.parentJobId == 36);
Magic Number,BiM.Behaviors.Game.Interactives,InteractiveObject,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Interactives\InteractiveObject.cs,IsFish,The following statement contains a magic number: return m_disabledSkills.Any(skill => skill.JobSkill.parentJobId == 36) || m_enabledSkills.Any(skill => skill.JobSkill.parentJobId == 36);
Magic Number,BiM.Behaviors.Game.Interactives,InteractiveObject,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Interactives\InteractiveObject.cs,GetAdjacentCells,The following statement contains a magic number: return Cell.GetCellsInDirections(new DirectionsEnum[] { DirectionsEnum.DIRECTION_NORTH_EAST' DirectionsEnum.DIRECTION_NORTH_WEST' DirectionsEnum.DIRECTION_SOUTH_WEST' DirectionsEnum.DIRECTION_SOUTH_EAST }' 1' 3)                              .Where(cell => Map.CanStopOnCell(cell) && Map.CanBeSeen(cell' Cell)).ToArray();
Magic Number,BiM.Behaviors.Game.Interactives,InteractiveObject,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Interactives\InteractiveObject.cs,IsAdjacentTo,The following statement contains a magic number: return Map.CanStopOnCell(cell) && cell.ManhattanDistanceTo(Cell) < 4 && cell.X == Cell.X && cell.Y == Cell.Y && Map.CanStopOnCell(cell);
Magic Number,BiM.Behaviors.Game.Items,Inventory,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Items\Inventory.AI.cs,EquipBestWeaponIfNeeded,The following statement contains a magic number: GetItems(ItemSuperTypeEnum.SUPERTYPE_WEAPON).Union(GetItems(ItemSuperTypeEnum.SUPERTYPE_WEAPON_7)).OrderByDescending(item => item.Level * 10 + item.PowerRate)
Magic Number,BiM.Behaviors.Game.Movements,TimedPath,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Movements\TimedPath.cs,Create,The following statement contains a magic number: direction % 4 == 0
Magic Number,BiM.Behaviors.Game.Spells.Shapes,Zone,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Shapes\Zone.cs,Zone,The following statement contains a magic number: splitted.Length >= 2
Magic Number,BiM.Behaviors.Game.Spells.Shapes,Zone,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Shapes\Zone.cs,InitializeShape,The following statement contains a magic number: switch (ShapeType)              {                  case SpellShapeEnum.X:                      m_shape = new Cross(0' Radius);                      break;                  case SpellShapeEnum.L:                      m_shape = new Line(Radius);                      break;                  case SpellShapeEnum.T:                      m_shape = new Cross(0' Radius)                                    {                                        OnlyPerpendicular = true                                    };                      break;                  case SpellShapeEnum.D:                      m_shape = new Cross(0' Radius);                      break;                  case SpellShapeEnum.C:                      m_shape = new Lozenge(0' Radius);                      break;                  case SpellShapeEnum.I:                      m_shape = new Lozenge(Radius' 63);                      break;                  case SpellShapeEnum.O:                      m_shape = new Cross(1' Radius);                      break;                  case SpellShapeEnum.Q:                      m_shape = new Cross(1' Radius);                      break;                  case SpellShapeEnum.V:                      m_shape = new Cone(0' Radius);                      break;                  case SpellShapeEnum.W:                      m_shape = new Square(0' Radius)                                    {                                        DiagonalFree = true                                    };                      break;                  case SpellShapeEnum.plus:                      m_shape = new Cross(0' Radius)                                    {                                        Diagonal = true                                    };                      break;                  case SpellShapeEnum.sharp:                      m_shape = new Cross(1' Radius)                                    {                                        Diagonal = true                                    };                      break;                  case SpellShapeEnum.star:                      m_shape = new Cross(0' Radius)                                    {                                        AllDirections = true                                    };                      break;                  case SpellShapeEnum.slash:                      m_shape = new Line(Radius);                      break;                  case SpellShapeEnum.U:                      m_shape = new HalfLozenge(0' Radius);                      break;                  case SpellShapeEnum.A:                      m_shape = new Lozenge(0' 63);                      break;                  case SpellShapeEnum.P:                      m_shape = new Single();                      break;                  default:                      m_shape = new Cross(0' 0);                      break;              }
Magic Number,BiM.Behaviors.Game.Spells.Shapes,Zone,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Shapes\Zone.cs,InitializeShape,The following statement contains a magic number: switch (ShapeType)              {                  case SpellShapeEnum.X:                      m_shape = new Cross(0' Radius);                      break;                  case SpellShapeEnum.L:                      m_shape = new Line(Radius);                      break;                  case SpellShapeEnum.T:                      m_shape = new Cross(0' Radius)                                    {                                        OnlyPerpendicular = true                                    };                      break;                  case SpellShapeEnum.D:                      m_shape = new Cross(0' Radius);                      break;                  case SpellShapeEnum.C:                      m_shape = new Lozenge(0' Radius);                      break;                  case SpellShapeEnum.I:                      m_shape = new Lozenge(Radius' 63);                      break;                  case SpellShapeEnum.O:                      m_shape = new Cross(1' Radius);                      break;                  case SpellShapeEnum.Q:                      m_shape = new Cross(1' Radius);                      break;                  case SpellShapeEnum.V:                      m_shape = new Cone(0' Radius);                      break;                  case SpellShapeEnum.W:                      m_shape = new Square(0' Radius)                                    {                                        DiagonalFree = true                                    };                      break;                  case SpellShapeEnum.plus:                      m_shape = new Cross(0' Radius)                                    {                                        Diagonal = true                                    };                      break;                  case SpellShapeEnum.sharp:                      m_shape = new Cross(1' Radius)                                    {                                        Diagonal = true                                    };                      break;                  case SpellShapeEnum.star:                      m_shape = new Cross(0' Radius)                                    {                                        AllDirections = true                                    };                      break;                  case SpellShapeEnum.slash:                      m_shape = new Line(Radius);                      break;                  case SpellShapeEnum.U:                      m_shape = new HalfLozenge(0' Radius);                      break;                  case SpellShapeEnum.A:                      m_shape = new Lozenge(0' 63);                      break;                  case SpellShapeEnum.P:                      m_shape = new Single();                      break;                  default:                      m_shape = new Cross(0' 0);                      break;              }
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetDamageReflection,The following statement contains a magic number: reflect += effect.arg3 + effect.arg1 * (1 + effect.arg2) / 2 ;
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetDamageReflection,The following statement contains a magic number: return reflect * (1 + target.Level * 0.05);
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,The following statement contains a magic number: reduceDamagePercent >= 100
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,The following statement contains a magic number: minDamage = (DamageType)(((minDamage * (1 + (addDamagePercent / 100.0)) + addDamage) - reduceDamage) * (1 - (reduceDamagePercent / 100.0)) * chanceToHappen);
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,The following statement contains a magic number: minDamage = (DamageType)(((minDamage * (1 + (addDamagePercent / 100.0)) + addDamage) - reduceDamage) * (1 - (reduceDamagePercent / 100.0)) * chanceToHappen);
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,The following statement contains a magic number: maxDamage = (DamageType)(((maxDamage * (1 + (addDamagePercent / 100.0)) + addDamage) - reduceDamage) * (1 - (reduceDamagePercent / 100.0)) * chanceToHappen);
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,The following statement contains a magic number: maxDamage = (DamageType)(((maxDamage * (1 + (addDamagePercent / 100.0)) + addDamage) - reduceDamage) * (1 - (reduceDamagePercent / 100.0)) * chanceToHappen);
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,The following statement contains a magic number: minDamage *= -1.5;
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,The following statement contains a magic number: maxDamage *= -1.5;
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,IsMaitrise,The following statement contains a magic number: Template.typeId == 23
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The following statement contains a magic number: chanceToHappen = effect.random / 100.0;
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The following statement contains a magic number: chanceToHappen /= 2;
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The following statement contains a magic number: ratio = target.Level * 2 * chanceToHappen;
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The following statement contains a magic number: result.Curse -= 2 * ratio;
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The following statement contains a magic number: double ratio = Math.Max(target.Stats.MaxHealth / 2' target.Stats.Health) / result.MinDamage;
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The following statement contains a magic number: result.Multiply(0.1);
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The following statement contains a magic number: target.Stats.Health < 1000
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The following statement contains a magic number: spell.Template.id == 114
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The following statement contains a magic number: result.MinHeal += reflected * 2;
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The following statement contains a magic number: result.MaxHeal += reflected * 2;
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,CumulEffects,The following statement contains a magic number: result.Multiply(1.0+boost.delta/100.0);
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetFullAreaEffect,The following statement contains a magic number: hpLeftOnFoes > 500
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetFullAreaEffect,The following statement contains a magic number: Template.id == 139
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,FillEffect,The following statement contains a magic number: splitted.Length >= 2
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetLevelTemplate,The following statement contains a magic number: Template.id == 158
Magic Number,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetLevelTemplate,The following statement contains a magic number: Template.id == 126
Magic Number,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,CanUpgradeSpell,The following statement contains a magic number: spell.Level == 5 && spell.LevelTemplate.minPlayerLevel + 100 > Character.Level
Magic Number,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,CanUpgradeSpell,The following statement contains a magic number: spell.Level == 5 && spell.LevelTemplate.minPlayerLevel + 100 > Character.Level
Magic Number,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FullDump,The following statement contains a magic number: ObjectDumper dumper = new ObjectDumper(4' true' true' (System.Reflection.BindingFlags.FlattenHierarchy));
Magic Number,BiM.Behaviors.Game.Spells,SpellsBook,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\SpellsBook.AI.cs,FullDump,The following statement contains a magic number: logger.Error("       Effect {0} : {1} - {2} {3:P}"' effect.Description' effectdice.diceNum <= effectdice.diceSide ? effectdice.diceNum : effectdice.diceSide' effectdice.diceNum > effectdice.diceSide ? effectdice.diceNum : effectdice.diceSide' effectdice.random == 0 ? 1.0 : effectdice.random / 100.0);
Magic Number,BiM.Behaviors.Game.Stats,BoostThreshold,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Stats\BoostThreshold.cs,BoostThreshold,The following statement contains a magic number: threshold.Count != 3 && threshold.Count != 2
Magic Number,BiM.Behaviors.Game.Stats,BoostThreshold,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Stats\BoostThreshold.cs,BoostThreshold,The following statement contains a magic number: threshold.Count != 3 && threshold.Count != 2
Magic Number,BiM.Behaviors.Game.Stats,BoostThreshold,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Stats\BoostThreshold.cs,BoostThreshold,The following statement contains a magic number: BoostPerPoints = threshold.Count > 2 ? threshold[2] : 1;
Magic Number,BiM.Behaviors.Game.Stats,BoostThreshold,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Stats\BoostThreshold.cs,BoostThreshold,The following statement contains a magic number: BoostPerPoints = threshold.Count > 2 ? threshold[2] : 1;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,GetCellFromPoint,The following statement contains a magic number: int lowPart = (y + (x - y) / 2);
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,GetCellFromPoint,The following statement contains a magic number: highPart < 0 || highPart > 39
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Serialize,The following statement contains a magic number: bytes[0] = (byte)(Id >> 8);
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Serialize,The following statement contains a magic number: bytes[2] = (byte)(Floor >> 8);
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Serialize,The following statement contains a magic number: bytes[2] = (byte)(Floor >> 8);
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Serialize,The following statement contains a magic number: bytes[3] = (byte)(Floor & 0xFF);
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Serialize,The following statement contains a magic number: bytes[4] = LosMov;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Serialize,The following statement contains a magic number: bytes[5] = MapChangeData;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Serialize,The following statement contains a magic number: bytes[6] = Speed;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Serialize,The following statement contains a magic number: bytes[7] = MoveZone;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Deserialize,The following statement contains a magic number: Id = (short)((data[index + 0] << 8) | data[index + 1]);
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Deserialize,The following statement contains a magic number: Floor = (short)((data[index + 2] << 8) | data[index + 3]);
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Deserialize,The following statement contains a magic number: Floor = (short)((data[index + 2] << 8) | data[index + 3]);
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Deserialize,The following statement contains a magic number: Floor = (short)((data[index + 2] << 8) | data[index + 3]);
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Deserialize,The following statement contains a magic number: LosMov = data[index + 4];
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Deserialize,The following statement contains a magic number: MapChangeData = data[index + 5];
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Deserialize,The following statement contains a magic number: Speed = data[index + 6];
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,Deserialize,The following statement contains a magic number: MoveZone = data[index + 7];
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,ManhattanDistanceTo,The following statement contains a magic number: return 255;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,IsInMap,The following statement contains a magic number: return x + y >= 0 && x - y >= 0 && x - y < Map.Height * 2 && x + y < Map.Width * 2;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,IsInMap,The following statement contains a magic number: return x + y >= 0 && x - y >= 0 && x - y < Map.Height * 2 && x + y < Map.Width * 2;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,OrientationTo,The following statement contains a magic number: double angleInDegrees = angleInRadians * 180 / Math.PI;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,OrientationTo,The following statement contains a magic number: double orientation = !diagonal ? Math.Round(transformedAngle / 90) * 2 + 1 : Math.Round(transformedAngle / 45) + 1;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,OrientationTo,The following statement contains a magic number: double orientation = !diagonal ? Math.Round(transformedAngle / 90) * 2 + 1 : Math.Round(transformedAngle / 45) + 1;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,OrientationTo,The following statement contains a magic number: double orientation = !diagonal ? Math.Round(transformedAngle / 90) * 2 + 1 : Math.Round(transformedAngle / 45) + 1;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,OrientationTo,The following statement contains a magic number: orientation = orientation + 8;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,GetCellsInLine,The following statement contains a magic number: dx *= 2;
Magic Number,BiM.Behaviors.Game.World,Cell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Cell.cs,GetCellsInLine,The following statement contains a magic number: dy *= 2;
Magic Number,BiM.Behaviors.Game.World,MapContext<T>,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\MapContext.cs,TooCloseFromSegment,The following statement contains a magic number: const double MIN_DISTANCE_SQUARED = 0.5001;
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,CellInfo,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\CellInfo.cs,CellIdFromPos,The following statement contains a magic number: HighPart < 0 || HighPart > 39
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,CellInfo,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\CellInfo.cs,CellIdFromPos,The following statement contains a magic number: int LowPart = (y + HighPart / 2);
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,CellInfo,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\CellInfo.cs,YFromId,The following statement contains a magic number: return (short)((cellId % 14) - (cellId - cellId % 28) / 28);
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,CellInfo,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\CellInfo.cs,YFromId,The following statement contains a magic number: return (short)((cellId % 14) - (cellId - cellId % 28) / 28);
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,CellInfo,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\CellInfo.cs,YFromId,The following statement contains a magic number: return (short)((cellId % 14) - (cellId - cellId % 28) / 28);
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,CellInfo,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\CellInfo.cs,XFromId,The following statement contains a magic number: return (short)(0.5 + cellId / 14.5 + (YFromId(cellId)) * 13.5 / 14.5);
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,CellInfo,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\CellInfo.cs,XFromId,The following statement contains a magic number: return (short)(0.5 + cellId / 14.5 + (YFromId(cellId)) * 13.5 / 14.5);
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,CellInfo,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\CellInfo.cs,XFromId,The following statement contains a magic number: return (short)(0.5 + cellId / 14.5 + (YFromId(cellId)) * 13.5 / 14.5);
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,CellInfo,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\CellInfo.cs,XFromId,The following statement contains a magic number: return (short)(0.5 + cellId / 14.5 + (YFromId(cellId)) * 13.5 / 14.5);
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,MapExtensions,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\MapExtensions.cs,GetMapChangeMask,The following statement contains a magic number: switch (mapNeighbour)              {                  case MapNeighbour.Bottom:                      return 4;                  case MapNeighbour.Top:                      return 64;                  case MapNeighbour.Left:                      return 16;                  case MapNeighbour.Right:                      return 1;                  case null:                  default:                      return 1 | 4 | 16 | 64;              }
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,MapExtensions,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\MapExtensions.cs,GetMapChangeMask,The following statement contains a magic number: switch (mapNeighbour)              {                  case MapNeighbour.Bottom:                      return 4;                  case MapNeighbour.Top:                      return 64;                  case MapNeighbour.Left:                      return 16;                  case MapNeighbour.Right:                      return 1;                  case null:                  default:                      return 1 | 4 | 16 | 64;              }
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,MapExtensions,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\MapExtensions.cs,GetMapChangeMask,The following statement contains a magic number: switch (mapNeighbour)              {                  case MapNeighbour.Bottom:                      return 4;                  case MapNeighbour.Top:                      return 64;                  case MapNeighbour.Left:                      return 16;                  case MapNeighbour.Right:                      return 1;                  case null:                  default:                      return 1 | 4 | 16 | 64;              }
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,MapExtensions,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\MapExtensions.cs,GetMapChangeMask,The following statement contains a magic number: switch (mapNeighbour)              {                  case MapNeighbour.Bottom:                      return 4;                  case MapNeighbour.Top:                      return 64;                  case MapNeighbour.Left:                      return 16;                  case MapNeighbour.Right:                      return 1;                  case null:                  default:                      return 1 | 4 | 16 | 64;              }
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,MapExtensions,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\MapExtensions.cs,GetMapChangeMask,The following statement contains a magic number: switch (mapNeighbour)              {                  case MapNeighbour.Bottom:                      return 4;                  case MapNeighbour.Top:                      return 64;                  case MapNeighbour.Left:                      return 16;                  case MapNeighbour.Right:                      return 1;                  case null:                  default:                      return 1 | 4 | 16 | 64;              }
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,MapExtensions,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\MapExtensions.cs,GetMapChangeMask,The following statement contains a magic number: switch (mapNeighbour)              {                  case MapNeighbour.Bottom:                      return 4;                  case MapNeighbour.Top:                      return 64;                  case MapNeighbour.Left:                      return 16;                  case MapNeighbour.Right:                      return 1;                  case null:                  default:                      return 1 | 4 | 16 | 64;              }
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,MapMovement,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\MapMovement.cs,PackPath,The following statement contains a magic number: path.Length < 2
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,MapMovement,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\MapMovement.cs,PackPath,The following statement contains a magic number: PackedPath.Add((short)((ushort)cellid | ((ushort)Orientation) << 12));
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The following statement contains a magic number: CellInfo[] changed = new CellInfo[560];
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,FindPath,The following statement contains a magic number: CellInfo[] changing = new CellInfo[560];
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,GetFlightDistance,The following statement contains a magic number: return dy * 1.414 /* diagonale part */ + /* straight line part */ dx - dy;
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,ComputeNeighbours,The following statement contains a magic number: short[][] result = new short[560][];
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,PathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\PathFinder.cs,ComputeNeighbours,The following statement contains a magic number: i < 560
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,WorldPathFinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\WorldPathFinder.cs,FindPath,The following statement contains a magic number: List<int> LowestPoints = new List<int>(10);
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,WorldPoint,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\WorldPoint.cs,WorldPoint,The following statement contains a magic number: WorldId = (mapId & 0x3FFC0000) >> 18;
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,WorldPoint,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\WorldPoint.cs,WorldPoint,The following statement contains a magic number: X = (mapId & 0x0003FFFF) >> 9 & 511;
Magic Number,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,WorldPoint,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\WorldPoint.cs,WorldPoint,The following statement contains a magic number: X = (mapId & 0x0003FFFF) >> 9 & 511;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Path,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Path.cs,GetEndCellDirection,The following statement contains a magic number: return m_cellsPath[m_cellsPath.Length - 2].OrientationToAdjacent(m_cellsPath[m_cellsPath.Length - 1]);
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Path,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Path.cs,GetClientPathKeys,The following statement contains a magic number: return compressedPath.Select(entry => (short)((ushort)entry.Cell.Id | ((ushort)entry.Direction << 12))).ToArray();
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Path,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Path.cs,BuildCompressedPath,The following statement contains a magic number: int i = path.Count - 2;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Path,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Path.cs,BuildCompletePath,The following statement contains a magic number: l > World.Map.Height * 2 + World.Map.Width
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Path,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Path.cs,BuildFromClientCompressedPath,The following statement contains a magic number: IEnumerable<PathElement> path = (from key in keys                                               let cellId = key & 4095                                               let direction = (DirectionsEnum)((key >> 12) & 7)                                               select new PathElement(map.Cells[cellId]' direction));
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Path,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Path.cs,BuildFromClientCompressedPath,The following statement contains a magic number: IEnumerable<PathElement> path = (from key in keys                                               let cellId = key & 4095                                               let direction = (DirectionsEnum)((key >> 12) & 7)                                               select new PathElement(map.Cells[cellId]' direction));
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Path,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Path.cs,BuildFromClientCompressedPath,The following statement contains a magic number: IEnumerable<PathElement> path = (from key in keys                                               let cellId = key & 4095                                               let direction = (DirectionsEnum)((key >> 12) & 7)                                               select new PathElement(map.Cells[cellId]' direction));
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,FindPath,The following statement contains a magic number: cost -= 3;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,FindPath,The following statement contains a magic number: cost -= 2;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,FindPath,The following statement contains a magic number: cost -= 3;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,FindPath,The following statement contains a magic number: cost -= 2;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,FindPath,The following statement contains a magic number: i < 8
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,CreateAndOptimisePath,The following statement contains a magic number: i + 2 < len && cell.ManhattanDistanceTo(nodes[i + 2].Cell) == 1 &&                      !cell.IsChangeZone(nodes[i + 1].Cell) &&                      !nodes[i + 1].Cell.IsChangeZone(nodes[i + 2].Cell)
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,CreateAndOptimisePath,The following statement contains a magic number: i + 2 < len && cell.ManhattanDistanceTo(nodes[i + 2].Cell) == 1 &&                      !cell.IsChangeZone(nodes[i + 1].Cell) &&                      !nodes[i + 1].Cell.IsChangeZone(nodes[i + 2].Cell)
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,CreateAndOptimisePath,The following statement contains a magic number: i + 2 < len && cell.ManhattanDistanceTo(nodes[i + 2].Cell) == 1 &&                      !cell.IsChangeZone(nodes[i + 1].Cell) &&                      !nodes[i + 1].Cell.IsChangeZone(nodes[i + 2].Cell)
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,GetCellCost,The following statement contains a magic number: return 20;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,GetCellCost,The following statement contains a magic number: return 1 + 5 - speed;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,GetCellCost,The following statement contains a magic number: return 1 + 11 + Math.Abs(speed);
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,GetCellCost,The following statement contains a magic number: cost += 0.3;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,GetCellCost,The following statement contains a magic number: cost += 0.3;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,GetCellCost,The following statement contains a magic number: cost += 0.3;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,GetCellCost,The following statement contains a magic number: cost += 0.3;
Magic Number,BiM.Behaviors.Game.World.Pathfinding,Pathfinder,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\Pathfinder.cs,GetCellCost,The following statement contains a magic number: cost += 0.3;
Missing Default,BiM.Behaviors.Data.Maps,SubMapsManager,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Data\Maps\SubMapsManager.cs,TryGetMapNeighbour,The following switch statement is missing a default case: switch (neighbour)              {                  case MapNeighbour.Left:                      return position.LeftNeighbourId;                  case MapNeighbour.Right:                      return position.RightNeighbourId;                  case MapNeighbour.Bottom:                      return position.BottomNeighbourId;                  case MapNeighbour.Top:                      return position.TopNeighbourId;              }
Missing Default,BiM.Behaviors.Game.Actors.Fighters,Fighter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\Fighters\Fighter.cs,Update,The following switch statement is missing a default case: switch ((ActionIdEnum)(message.actionId))        {          case ActionIdEnum.ACTION_CHARACTER_ACTION_POINTS_LOST_CASTER:            //if (this is PlayedFighter)            //  (this as PlayedFighter).Character.SendMessage(String.Format("{3} => AP of {0} : {1} => {2}"' Name' Stats.CurrentAP' Stats.CurrentAP + message.delta' (ActionIdEnum)(message.actionId)));            Stats.UpdateAP(message.delta);            break;          case ActionIdEnum.ACTION_CHARACTER_ACTION_POINTS_LOST:            goto case ActionIdEnum.ACTION_CHARACTER_ACTION_POINTS_LOST_CASTER;          case ActionIdEnum.ACTION_CHARACTER_DEBOOST_ACTION_POINTS:            goto case ActionIdEnum.ACTION_CHARACTER_ACTION_POINTS_LOST_CASTER;          case ActionIdEnum.ACTION_CHARACTER_ACTION_POINTS_STEAL:            goto case ActionIdEnum.ACTION_CHARACTER_ACTION_POINTS_LOST_CASTER;          case ActionIdEnum.ACTION_CHARACTER_BOOST_ACTION_POINTS:            goto case ActionIdEnum.ACTION_CHARACTER_ACTION_POINTS_LOST_CASTER;          case ActionIdEnum.ACTION_CHARACTER_ACTION_POINTS_USE:            goto case ActionIdEnum.ACTION_CHARACTER_ACTION_POINTS_LOST_CASTER;          case ActionIdEnum.ACTION_CHARACTER_ACTION_POINTS_WIN:            goto case ActionIdEnum.ACTION_CHARACTER_ACTION_POINTS_LOST_CASTER;            case ActionIdEnum.ACTION_CHARACTER_MOVEMENT_POINTS_LOST:            goto case ActionIdEnum.ACTION_CHARACTER_MOVEMEMT_POINTS_LOST_CASTER;          case ActionIdEnum.ACTION_CHARACTER_MOVEMENT_POINTS_STEAL:            goto case ActionIdEnum.ACTION_CHARACTER_MOVEMEMT_POINTS_LOST_CASTER;          case ActionIdEnum.ACTION_CHARACTER_MOVEMENT_POINTS_WIN:            goto case ActionIdEnum.ACTION_CHARACTER_MOVEMEMT_POINTS_LOST_CASTER;          case ActionIdEnum.ACTION_CHARACTER_DEBOOST_MOVEMENT_POINTS:            goto case ActionIdEnum.ACTION_CHARACTER_MOVEMEMT_POINTS_LOST_CASTER;          case ActionIdEnum.ACTION_CHARACTER_BOOST_MOVEMENT_POINTS:            goto case ActionIdEnum.ACTION_CHARACTER_MOVEMEMT_POINTS_LOST_CASTER;          case ActionIdEnum.ACTION_CHARACTER_MOVEMENT_POINTS_USE:            goto case ActionIdEnum.ACTION_CHARACTER_MOVEMEMT_POINTS_LOST_CASTER;          case ActionIdEnum.ACTION_CHARACTER_MOVEMEMT_POINTS_LOST_CASTER:            //if (this is PlayedFighter)            //  (this as PlayedFighter).Character.SendMessage(String.Format("{3} => MP of {0} : {1} => {2}"' Name' Stats.CurrentMP' Stats.CurrentMP + message.delta' (ActionIdEnum)(message.actionId)));            Stats.UpdateMP(message.delta);            break;        }
Missing Default,BiM.Behaviors.Game.Actors.RolePlay,PlayedCharacter,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Actors\RolePlay\PlayedCharacter.cs,CheckCriteria,The following switch statement is missing a default case: switch (match.Captures[1].Value)                      {                          case "C":                              if (!SubCheck(greater' Stats.Chance' Value)) return false;                              break;                          case "W":                              if (!SubCheck(greater' Stats.Wisdom' Value)) return false;                              break;                          case "S":                              if (!SubCheck(greater' Stats.Strength' Value)) return false;                              break;                          case "A":                              if (!SubCheck(greater' Stats.Agility' Value)) return false;                              break;                          case "V":                              if (!SubCheck(greater' Stats.Vitality' Value)) return false;                              break;                          case "M":                              if (!SubCheck(greater' Stats.MP' Value)) return false;                              break;                          case "I":                              if (!SubCheck(greater' Stats.Intelligence' Value)) return false;                              break;                      }
Missing Default,BiM.Behaviors.Game.Fights,FightTeam,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Fights\FightTeam.cs,Update,The following switch statement is missing a default case: switch ((FightOptionsEnum)msg.option)              {                  case FightOptionsEnum.FIGHT_OPTION_SET_SECRET:                      IsSecret = msg.state;                      break;                  case FightOptionsEnum.FIGHT_OPTION_ASK_FOR_HELP:                      IsHelpRequested = msg.state;                      break;                  case FightOptionsEnum.FIGHT_OPTION_SET_CLOSED:                      IsClosed = msg.state;                      break;                  case FightOptionsEnum.FIGHT_OPTION_SET_TO_PARTY_ONLY:                      IsRestrictedToParty = msg.state;                      break;              }
Missing Default,BiM.Behaviors.Game.Spells.Shapes,Cone,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Shapes\Cone.cs,GetCells,The following switch statement is missing a default case: switch (Direction)              {                  case DirectionsEnum.DIRECTION_NORTH_WEST:                      x = centerCell.X;                      while (x >= centerCell.X - Radius)                      {                          y = -i;                          while (y <= i)                          {                              if (MinRadius == 0 || Math.Abs(centerCell.X - x) + Math.Abs(y) >= MinRadius)                                  AddCellIfValid(x' y + centerCell.Y' map' result);                                y++;                          }                          i = i + j;                          x--;                      }                      break;                  case DirectionsEnum.DIRECTION_SOUTH_WEST:                      y = centerCell.Y;                      while (y >= centerCell.Y - Radius)                      {                          x = -i;                          while (x <= i)                          {                              if (MinRadius == 0 || Math.Abs(x) + Math.Abs(centerCell.Y - y) >= MinRadius)                                  AddCellIfValid(x + centerCell.X' y' map' result);                                x++;                          }                          i = i + j;                          y--;                      }                      break;                  case DirectionsEnum.DIRECTION_SOUTH_EAST:                      x = centerCell.X;                      while (x <= centerCell.X + Radius)                      {                          y = -i;                          while (y <= i)                          {                              if (MinRadius == 0 || Math.Abs(centerCell.X - x) + Math.Abs(y) >= MinRadius)                                  AddCellIfValid(x' y + centerCell.Y' map' result);                                y++;                          }                          i = i + j;                          x++;                      }                      break;                  case DirectionsEnum.DIRECTION_NORTH_EAST:                      y = centerCell.Y;                      while (y <= centerCell.Y - Radius)                      {                          x = -i;                          while (x <= i)                          {                              if (MinRadius == 0 || Math.Abs(x) + Math.Abs(centerCell.Y - y) >= MinRadius)                                  AddCellIfValid(x + centerCell.X' y' map' result);                                x++;                          }                          i = i + j;                          y++;                      }                      break;                }
Missing Default,BiM.Behaviors.Game.Spells.Shapes,Cross,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Shapes\Cross.cs,GetCells,The following switch statement is missing a default case: switch (Direction)                  {                      case DirectionsEnum.DIRECTION_SOUTH_EAST:                      case DirectionsEnum.DIRECTION_NORTH_WEST:                          {                              disabledDirections.Add(DirectionsEnum.DIRECTION_SOUTH_EAST);                              disabledDirections.Add(DirectionsEnum.DIRECTION_NORTH_WEST);                              break;                          }                      case DirectionsEnum.DIRECTION_NORTH_EAST:                      case DirectionsEnum.DIRECTION_SOUTH_WEST:                          {                              disabledDirections.Add(DirectionsEnum.DIRECTION_NORTH_EAST);                              disabledDirections.Add(DirectionsEnum.DIRECTION_SOUTH_WEST);                              break;                          }                      case DirectionsEnum.DIRECTION_SOUTH:                      case DirectionsEnum.DIRECTION_NORTH:                          {                              disabledDirections.Add(DirectionsEnum.DIRECTION_SOUTH);                              disabledDirections.Add(DirectionsEnum.DIRECTION_NORTH);                              break;                          }                      case DirectionsEnum.DIRECTION_EAST:                      case DirectionsEnum.DIRECTION_WEST:                          {                              disabledDirections.Add(DirectionsEnum.DIRECTION_EAST);                              disabledDirections.Add(DirectionsEnum.DIRECTION_WEST);                              break;                          }                  }
Missing Default,BiM.Behaviors.Game.Spells.Shapes,HalfLozenge,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Shapes\HalfLozenge.cs,GetCells,The following switch statement is missing a default case: switch (Direction)                  {                      case DirectionsEnum.DIRECTION_NORTH_WEST:                          AddCellIfValid(centerCell.X + i' centerCell.Y + i' map' result);                          AddCellIfValid(centerCell.X + i' centerCell.Y - i' map' result);                          break;                        case DirectionsEnum.DIRECTION_NORTH_EAST:                          AddCellIfValid(centerCell.X - i' centerCell.Y - i' map' result);                          AddCellIfValid(centerCell.X + i' centerCell.Y - i' map' result);                          break;                        case DirectionsEnum.DIRECTION_SOUTH_EAST:                          AddCellIfValid(centerCell.X - i' centerCell.Y + i' map' result);                          AddCellIfValid(centerCell.X - i' centerCell.Y - i' map' result);                          break;                        case DirectionsEnum.DIRECTION_SOUTH_WEST:                          AddCellIfValid(centerCell.X - i' centerCell.Y + i' map' result);                          AddCellIfValid(centerCell.X + i' centerCell.Y + i' map' result);                          break;                  }
Missing Default,BiM.Behaviors.Game.Spells.Shapes,Line,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Shapes\Line.cs,GetCells,The following switch statement is missing a default case: switch (Direction)                  {                      case DirectionsEnum.DIRECTION_WEST:                          AddCellIfValid(centerCell.X - i' centerCell.Y - i' map' result);                          break;                      case DirectionsEnum.DIRECTION_NORTH:                          AddCellIfValid(centerCell.X - i' centerCell.Y + i' map' result);                          break;                      case DirectionsEnum.DIRECTION_EAST:                          AddCellIfValid(centerCell.X + i' centerCell.Y + i' map' result);                          break;                      case DirectionsEnum.DIRECTION_SOUTH:                          AddCellIfValid(centerCell.X + i' centerCell.Y - i' map' result);                          break;                      case DirectionsEnum.DIRECTION_NORTH_WEST:                          AddCellIfValid(centerCell.X - i' centerCell.Y' map' result);                          break;                      case DirectionsEnum.DIRECTION_SOUTH_WEST:                          AddCellIfValid(centerCell.X' centerCell.Y - i' map' result);                          break;                      case DirectionsEnum.DIRECTION_SOUTH_EAST:                          AddCellIfValid(centerCell.X + i' centerCell.Y' map' result);                          break;                      case DirectionsEnum.DIRECTION_NORTH_EAST:                          AddCellIfValid(centerCell.X' centerCell.Y + i' map' result);                          break;                  }
Missing Default,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,GetEffectCategories,The following switch statement is missing a default case: switch ((EffectsEnum)effectId)              {                  case EffectsEnum.Effect_StealHPAir:                      return SpellCategory.DamagesAir | SpellCategory.Healing;                  case EffectsEnum.Effect_StealHPWater:                      return SpellCategory.DamagesWater | SpellCategory.Healing;                  case EffectsEnum.Effect_StealHPFire:                      return SpellCategory.DamagesFire | SpellCategory.Healing;                  case EffectsEnum.Effect_StealHPEarth:                      return SpellCategory.DamagesEarth | SpellCategory.Healing;                  case EffectsEnum.Effect_StealHPNeutral:                      return SpellCategory.DamagesNeutral | SpellCategory.Healing;                  case EffectsEnum.Effect_DamageFire:                      return SpellCategory.DamagesFire;                  case EffectsEnum.Effect_DamageWater:                      return SpellCategory.DamagesWater;                  case EffectsEnum.Effect_DamageAir:                      return SpellCategory.DamagesAir;                  case EffectsEnum.Effect_DamageNeutral:                  case EffectsEnum.Effect_Punishment_Damage:                      return SpellCategory.DamagesNeutral;                  case EffectsEnum.Effect_DamageEarth:                      return SpellCategory.DamagesEarth;                  case EffectsEnum.Effect_HealHP_108:                  case EffectsEnum.Effect_HealHP_143:                  case EffectsEnum.Effect_HealHP_81:                      return SpellCategory.Healing;                  case EffectsEnum.Effect_Summon:                  case EffectsEnum.Effect_Double:                  case EffectsEnum.Effect_185:                  case EffectsEnum.Effect_621:                  case EffectsEnum.Effect_623:                      return SpellCategory.Invocation;                  case EffectsEnum.Effect_AddArmorDamageReduction:                  case EffectsEnum.Effect_AddAirResistPercent:                  case EffectsEnum.Effect_AddFireResistPercent:                  case EffectsEnum.Effect_AddEarthResistPercent:                  case EffectsEnum.Effect_AddWaterResistPercent:                  case EffectsEnum.Effect_AddNeutralResistPercent:                  case EffectsEnum.Effect_AddAirElementReduction:                  case EffectsEnum.Effect_AddFireElementReduction:                  case EffectsEnum.Effect_AddEarthElementReduction:                  case EffectsEnum.Effect_AddWaterElementReduction:                  case EffectsEnum.Effect_AddNeutralElementReduction:                  case EffectsEnum.Effect_AddAgility:                  case EffectsEnum.Effect_AddStrength:                  case EffectsEnum.Effect_AddIntelligence:                  case EffectsEnum.Effect_AddHealth:                  case EffectsEnum.Effect_AddChance:                  case EffectsEnum.Effect_AddCriticalHit:                  case EffectsEnum.Effect_AddCriticalDamageBonus:                  case EffectsEnum.Effect_AddCriticalDamageReduction:                  case EffectsEnum.Effect_AddDamageBonus:                  case EffectsEnum.Effect_AddDamageBonusPercent:                  case EffectsEnum.Effect_AddDamageBonus_121:                  case EffectsEnum.Effect_AddFireDamageBonus:                  case EffectsEnum.Effect_AddAirDamageBonus:                  case EffectsEnum.Effect_AddWaterDamageBonus:                  case EffectsEnum.Effect_AddEarthDamageBonus:                  case EffectsEnum.Effect_AddNeutralDamageBonus:                  case EffectsEnum.Effect_AddDamageMultiplicator:                  case EffectsEnum.Effect_AddDamageReflection:                  case EffectsEnum.Effect_AddGlobalDamageReduction:                  case EffectsEnum.Effect_AddGlobalDamageReduction_105:                  case EffectsEnum.Effect_AddAP_111:                  case EffectsEnum.Effect_AddHealBonus:                  case EffectsEnum.Effect_AddWisdom:                  case EffectsEnum.Effect_AddProspecting:                  case EffectsEnum.Effect_AddMP:                  case EffectsEnum.Effect_AddMP_128:                  case EffectsEnum.Effect_AddPhysicalDamage_137:                  case EffectsEnum.Effect_AddPhysicalDamage_142:                  case EffectsEnum.Effect_AddPhysicalDamageReduction:                  case EffectsEnum.Effect_AddPushDamageReduction:                  case EffectsEnum.Effect_AddPushDamageBonus:                  case EffectsEnum.Effect_AddRange:                  case EffectsEnum.Effect_AddRange_136:                  case EffectsEnum.Effect_AddSummonLimit:                  case EffectsEnum.Effect_AddVitality:                  case EffectsEnum.Effect_AddVitalityPercent:                  case EffectsEnum.Effect_Dodge:                  case EffectsEnum.Effect_IncreaseAPAvoid:                  case EffectsEnum.Effect_IncreaseMPAvoid:                  case EffectsEnum.Effect_Invisibility:                  case EffectsEnum.Effect_ReflectSpell:                  case EffectsEnum.Effect_RegainAP:                      return SpellCategory.Buff;                  case EffectsEnum.Effect_Teleport:                      return SpellCategory.Teleport;                  case EffectsEnum.Effect_PushBack:                  case EffectsEnum.Effect_RemoveAP:                  case EffectsEnum.Effect_LostMP:                  case EffectsEnum.Effect_StealKamas:                  case EffectsEnum.Effect_LoseHPByUsingAP:                  case EffectsEnum.Effect_LosingAP:                  case EffectsEnum.Effect_LosingMP:                  case EffectsEnum.Effect_SubRange_135:                  case EffectsEnum.Effect_SkipTurn:                  case EffectsEnum.Effect_Kill:                  case EffectsEnum.Effect_SubDamageBonus:                  case EffectsEnum.Effect_SubChance:                  case EffectsEnum.Effect_SubVitality:                  case EffectsEnum.Effect_SubAgility:                  case EffectsEnum.Effect_SubIntelligence:                  case EffectsEnum.Effect_SubWisdom:                  case EffectsEnum.Effect_SubStrength:                  case EffectsEnum.Effect_SubDodgeAPProbability:                  case EffectsEnum.Effect_SubDodgeMPProbability:                  case EffectsEnum.Effect_SubAP:                  case EffectsEnum.Effect_SubMP:                  case EffectsEnum.Effect_SubCriticalHit:                  case EffectsEnum.Effect_SubMagicDamageReduction:                  case EffectsEnum.Effect_SubPhysicalDamageReduction:                  case EffectsEnum.Effect_SubInitiative:                  case EffectsEnum.Effect_SubProspecting:                  case EffectsEnum.Effect_SubHealBonus:                  case EffectsEnum.Effect_SubDamageBonusPercent:                  case EffectsEnum.Effect_197:                  case EffectsEnum.Effect_SubEarthResistPercent:                  case EffectsEnum.Effect_SubWaterResistPercent:                  case EffectsEnum.Effect_SubAirResistPercent:                  case EffectsEnum.Effect_SubFireResistPercent:                  case EffectsEnum.Effect_SubNeutralResistPercent:                  case EffectsEnum.Effect_SubEarthElementReduction:                  case EffectsEnum.Effect_SubWaterElementReduction:                  case EffectsEnum.Effect_SubAirElementReduction:                  case EffectsEnum.Effect_SubFireElementReduction:                  case EffectsEnum.Effect_SubNeutralElementReduction:                  case EffectsEnum.Effect_SubPvpEarthResistPercent:                  case EffectsEnum.Effect_SubPvpWaterResistPercent:                  case EffectsEnum.Effect_SubPvpAirResistPercent:                  case EffectsEnum.Effect_SubPvpFireResistPercent:                  case EffectsEnum.Effect_SubPvpNeutralResistPercent:                  case EffectsEnum.Effect_StealChance:                  case EffectsEnum.Effect_StealVitality:                  case EffectsEnum.Effect_StealAgility:                  case EffectsEnum.Effect_StealIntelligence:                  case EffectsEnum.Effect_StealWisdom:                  case EffectsEnum.Effect_StealStrength:                  case EffectsEnum.Effect_275:                  case EffectsEnum.Effect_276:                  case EffectsEnum.Effect_277:                  case EffectsEnum.Effect_278:                  case EffectsEnum.Effect_279:                  case EffectsEnum.Effect_411:                  case EffectsEnum.Effect_413:                  case EffectsEnum.Effect_SubCriticalDamageBonus:                  case EffectsEnum.Effect_SubPushDamageReduction:                  case EffectsEnum.Effect_SubCriticalDamageReduction:                  case EffectsEnum.Effect_SubEarthDamageBonus:                  case EffectsEnum.Effect_SubFireDamageBonus:                  case EffectsEnum.Effect_SubWaterDamageBonus:                  case EffectsEnum.Effect_SubAirDamageBonus:                  case EffectsEnum.Effect_SubNeutralDamageBonus:                  case EffectsEnum.Effect_StealAP_440:                  case EffectsEnum.Effect_StealMP_441:                      return SpellCategory.Curse;              }
Missing Default,BiM.Behaviors.Game.Spells,Spell,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\Spells\Spell.AI.cs,AdjustDamage,The following switch statement is missing a default case: switch (category)              {                  case SpellCategory.DamagesNeutral:                      damages.MinNeutral += minDamage;                      damages.MaxNeutral += maxDamage;                      break;                  case SpellCategory.DamagesFire:                      damages.MinFire += minDamage;                      damages.MaxAir += maxDamage;                      break;                  case SpellCategory.DamagesAir:                      damages.MinAir += minDamage;                      damages.MaxAir += maxDamage;                      break;                  case SpellCategory.DamagesWater:                      damages.MinWater += minDamage;                      damages.MaxWater += maxDamage;                      break;                  case SpellCategory.DamagesEarth:                      damages.MinEarth += minDamage;                      damages.MaxEarth += maxDamage;                      break;                  case SpellCategory.Healing:                      damages.MinHeal += minDamage;                      damages.MaxHeal += maxDamage;                      break;              }
Missing Default,BiM.Behaviors.Game.World.Pathfinding.FFPathFinding,WorldPoint,D:\research\architectureSmells\repos\Emudofus_BehaviorIsManaged\Behaviors\Game\World\Pathfinding\FFPathFinding\WorldPoint.cs,Move,The following switch statement is missing a default case: switch (MapNeighbour)              {                  case MapNeighbour.Bottom:                          Y += 1;                          break;                  case MapNeighbour.Top:                          Y -= 1;                          break;                  case MapNeighbour.Left:                          X -= 1;                          break;                  case MapNeighbour.Right:                          X += 1;                          break;              }
