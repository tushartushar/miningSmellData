Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,Cyclomatic complexity of the method is 16
Complex Method,DeltaEngine.Graphics,Geometry,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Geometry.cs,LoadFromFile,Cyclomatic complexity of the method is 8
Complex Method,DeltaEngine.Graphics,Drawing,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Drawing.cs,Draw3DData,Cyclomatic complexity of the method is 11
Complex Method,DeltaEngine.Graphics,Drawing,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Drawing.cs,Draw2DData,Cyclomatic complexity of the method is 9
Complex Method,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,Cyclomatic complexity of the method is 22
Long Parameter List,DeltaEngine.Graphics,ShaderWithFormatCreationData,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormatCreationData.cs,ShaderWithFormatCreationData,The method has 6 parameters.
Long Parameter List,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,Add,The method has 5 parameters.
Long Parameter List,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,AddDataNative,The method has 5 parameters.
Long Parameter List,DeltaEngine.Graphics,Drawing,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Drawing.cs,Add,The method has 5 parameters.
Long Parameter List,DeltaEngine.Graphics,Drawing,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Drawing.cs,Add,The method has 6 parameters.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,FillShaderCode,The length of the statement  "	if (string.IsNullOrEmpty (data.VertexCode) || string.IsNullOrEmpty (data.FragmentCode) || string.IsNullOrEmpty (data.DX9Code) || string.IsNullOrEmpty (data.DX11Code)) " is 166.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionUVOpenGLVertexCode' ShaderCodeOpenGL.PositionUVOpenGLFragmentCode' ShaderCodeDX11.PositionUVDX11' ShaderCodeDX9.Position2DUVDX9' VertexFormat.Position2DUV); " is 234.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionColorOpenGLVertexCode' ShaderCodeOpenGL.PositionColorOpenGLFragmentCode' ShaderCodeDX11.PositionColorDX11' ShaderCodeDX9.Position2DColorDX9' VertexFormat.Position2DColor); " is 249.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionColorUVOpenGLVertexCode' ShaderCodeOpenGL.PositionColorUVOpenGLFragmentCode' ShaderCodeDX11.PositionColorUVDX11' ShaderCodeDX9.Position2DColorUVDX9' VertexFormat.Position2DColorUV); " is 259.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionUVOpenGLVertexCode' ShaderCodeOpenGL.PositionUVOpenGLFragmentCode' ShaderCodeDX11.PositionUVDX11' ShaderCodeDX9.Position3DUVDX9' VertexFormat.Position3DUV); " is 234.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionColorOpenGLVertexCode' ShaderCodeOpenGL.PositionColorOpenGLFragmentCode' ShaderCodeDX11.PositionColorDX11' ShaderCodeDX9.Position3DColorDX9' VertexFormat.Position3DColor); " is 249.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionColorUVOpenGLVertexCode' ShaderCodeOpenGL.PositionColorUVOpenGLFragmentCode' ShaderCodeDX11.PositionColorUVDX11' ShaderCodeDX9.Position3DColorUVDX9' VertexFormat.Position3DColorUV); " is 259.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionUVLightmapVertexCode' ShaderCodeOpenGL.PositionUVLightmapFragmentCode' ShaderCodeDX11.UVLightmapHLSLCode' ShaderCodeDX9.DX9Position3DLightMap' VertexFormat.Position3DUVLightMap); " is 256.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionUVSkinnedOpenGLVertexCode' ShaderCodeOpenGL.PositionUVSkinnedOpenGLFragmentCode' ShaderCodeDX11.PositionUVSkinnedDX11' ShaderCodeDX9.PositionUVSkinnedDX9' VertexFormat.Position3DUVSkinned); " is 267.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionColorFogOpenGLVertexCode' ShaderCodeOpenGL.PositionColorFogOpenGLFragmentCode' ShaderCodeDX11.PositionColorFogDX11' ShaderCodeDX9.PositionColorFogDX9' VertexFormat.Position3DColor); " is 259.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionUVFogOpenGLVertexCode' ShaderCodeOpenGL.PositionUVFogOpenGLFragmentCode' ShaderCodeDX11.PositionUVFogDX11' ShaderCodeDX9.PositionUVFogDX9' VertexFormat.Position3DUV); " is 244.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionColorUVFogOpenGLVertexCode' ShaderCodeOpenGL.PositionColorUVFogOpenGLFragmentCode' ShaderCodeDX11.PositionColorUVFogDX11' ShaderCodeDX9.PositionColorUVFogDX9' VertexFormat.Position3DColorUV); " is 269.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionUVLightmapFogVertexCode' ShaderCodeOpenGL.PositionUVLightmapFogFragmentCode' ShaderCodeDX11.PositionUVLightmapFogDX11' ShaderCodeDX9.PositionUVLightmapFogDX9' VertexFormat.Position3DUVLightMap); " is 272.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionUVNormalOpenGLVertexCode' ShaderCodeOpenGL.PositionUVNormalOpenGLFragmentCode' ShaderCodeDX11.PositionUVNormal' ShaderCodeDX9.PositionUVNormal' VertexFormat.Position3DNormalUV); " is 255.
Long Statement,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,GetFormatCreationDataFromFlags,The length of the statement  "		return new ShaderWithFormatCreationData (Data.Flags' ShaderCodeOpenGL.PositionUVSkinnedFogOpenGLVertexCode' ShaderCodeOpenGL.PositionUVSkinnedFogOpenGLFragmentCode' ShaderCodeDX11.PositionUVSkinnedFogDX11' ShaderCodeDX9.PositionUVSkinnedFogDX9' VertexFormat.Position3DUVSkinned); " is 279.
Long Statement,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,CheckTotalDataSize,The length of the statement  "	if ((numberOfNeededVertices > maxNumberOfVertices || numberOfNeededIndices > maxNumberOfIndices) && maxNumberOfVertices < TotalMaximumVerticesLimit) " is 148.
Long Statement,DeltaEngine.Graphics,Drawing,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Drawing.cs,Add,The length of the statement  "	GetDrawBuffer (material.Shader' blendMode).Add (material.DiffuseMap' vertices' indices' numberOfVerticesUsed' numberOfIndicesUsed); " is 131.
Long Statement,DeltaEngine.Graphics.Vertices,SkinningData,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\SkinningData.cs,Lerp,The length of the statement  "	return new SkinningData ((int)FirstIndex' (int)SecondIndex' FirstWeight.Lerp (other.FirstWeight' interpolation)' SecondWeight.Lerp (other.SecondWeight' interpolation)); " is 168.
Long Statement,DeltaEngine.Graphics.Vertices,VertexPosition2DColor,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexPosition2DColor.cs,Lerp,The length of the statement  "	return new VertexPosition2DColor (Position.Lerp (other.Position' interpolation)' Color.Lerp (other.Color' interpolation)); " is 122.
Long Statement,DeltaEngine.Graphics.Vertices,VertexPosition2DColorUV,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexPosition2DColorUV.cs,Lerp,The length of the statement  "	return new VertexPosition2DColorUV (Position.Lerp (other.Position' interpolation)' Color.Lerp (other.Color' interpolation)' UV); " is 128.
Long Statement,DeltaEngine.Graphics.Vertices,VertexPosition3DColorSkinned,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexPosition3DColorSkinned.cs,Lerp,The length of the statement  "	return new VertexPosition3DColorSkinned (Position.Lerp (other.Position' interpolation)' Color.Lerp (other.Color' interpolation)' Skinning.Lerp (other.Skinning' interpolation)); " is 176.
Long Statement,DeltaEngine.Graphics.Vertices,VertexPosition3DColorUV,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexPosition3DColorUV.cs,Lerp,The length of the statement  "	return new VertexPosition3DColorUV (Position.Lerp (other.Position' interpolation)' Color.Lerp (other.Color' interpolation)' UV); " is 128.
Long Statement,DeltaEngine.Graphics.Vertices,VertexPosition3DNormalUV,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexPosition3DNormalUV.cs,Lerp,The length of the statement  "	return new VertexPosition3DNormalUV (Position.Lerp (other.Position' interpolation)' Normal.Lerp (other.Normal' interpolation)' UV); " is 131.
Long Statement,DeltaEngine.Graphics.Vertices,VertexPosition3DUVSkinned,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexPosition3DUVSkinned.cs,Lerp,The length of the statement  "	return new VertexPosition3DUVSkinned (Position.Lerp (other.Position' interpolation)' UV.Lerp (other.UV' interpolation)' Skinning.Lerp (other.Skinning' interpolation)); " is 167.
Long Statement,DeltaEngine.Graphics.Vertices,VertexPosition3DColor,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexPosition3DColor.cs,Lerp,The length of the statement  "	return new VertexPosition3DColor (Position.Lerp (other.Position' interpolation)' Color.Lerp (other.Color' interpolation)); " is 122.
Complex Conditional,DeltaEngine.Graphics,ShaderWithFormat,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\ShaderWithFormat.cs,FillShaderCode,The conditional expression  "string.IsNullOrEmpty (data.VertexCode) || string.IsNullOrEmpty (data.FragmentCode) || string.IsNullOrEmpty (data.DX9Code) || string.IsNullOrEmpty (data.DX11Code)"  is complex.
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,Add,The following statement contains a magic number: if (drawMode == VerticesMode.Triangles && numberOfIndices == 0)  	numberOfIndices = numberOfVertices == 3 ? 3 : numberOfVertices * 6 / 4;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,Add,The following statement contains a magic number: if (drawMode == VerticesMode.Triangles && numberOfIndices == 0)  	numberOfIndices = numberOfVertices == 3 ? 3 : numberOfVertices * 6 / 4;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,Add,The following statement contains a magic number: if (drawMode == VerticesMode.Triangles && numberOfIndices == 0)  	numberOfIndices = numberOfVertices == 3 ? 3 : numberOfVertices * 6 / 4;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,Add,The following statement contains a magic number: if (drawMode == VerticesMode.Triangles && numberOfIndices == 0)  	numberOfIndices = numberOfVertices == 3 ? 3 : numberOfVertices * 6 / 4;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,Add,The following statement contains a magic number: numberOfIndices = numberOfVertices == 3 ? 3 : numberOfVertices * 6 / 4;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,Add,The following statement contains a magic number: numberOfIndices = numberOfVertices == 3 ? 3 : numberOfVertices * 6 / 4;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,Add,The following statement contains a magic number: numberOfIndices = numberOfVertices == 3 ? 3 : numberOfVertices * 6 / 4;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,Add,The following statement contains a magic number: numberOfIndices = numberOfVertices == 3 ? 3 : numberOfVertices * 6 / 4;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ResizeBuffers,The following statement contains a magic number: do  	maxNumberOfVertices *= 2;  while (maxNumberOfVertices < newVerticesNeeded);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ResizeBuffers,The following statement contains a magic number: maxNumberOfVertices *= 2;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ResizeBuffers,The following statement contains a magic number: do  	maxNumberOfIndices *= 2;  while (maxNumberOfIndices < newIndicesNeeded);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ResizeBuffers,The following statement contains a magic number: maxNumberOfIndices *= 2;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ResizeBuffers,The following statement contains a magic number: if (maxNumberOfIndices > maxNumberOfVertices * 3)  	maxNumberOfIndices = maxNumberOfVertices * 3;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ResizeBuffers,The following statement contains a magic number: if (maxNumberOfIndices > maxNumberOfVertices * 3)  	maxNumberOfIndices = maxNumberOfVertices * 3;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ResizeBuffers,The following statement contains a magic number: maxNumberOfIndices = maxNumberOfVertices * 3;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: if (numberOfVertices == 4) {  	cachedQuadIndices [0] = (short)vertexOffset;  	cachedQuadIndices [1] = (short)(vertexOffset + 1);  	cachedQuadIndices [2] = (short)(vertexOffset + 2);  	cachedQuadIndices [3] = (short)vertexOffset;  	cachedQuadIndices [4] = (short)(vertexOffset + 2);  	cachedQuadIndices [5] = (short)(vertexOffset + 3);  	return cachedQuadIndices;  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: if (numberOfVertices == 4) {  	cachedQuadIndices [0] = (short)vertexOffset;  	cachedQuadIndices [1] = (short)(vertexOffset + 1);  	cachedQuadIndices [2] = (short)(vertexOffset + 2);  	cachedQuadIndices [3] = (short)vertexOffset;  	cachedQuadIndices [4] = (short)(vertexOffset + 2);  	cachedQuadIndices [5] = (short)(vertexOffset + 3);  	return cachedQuadIndices;  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: if (numberOfVertices == 4) {  	cachedQuadIndices [0] = (short)vertexOffset;  	cachedQuadIndices [1] = (short)(vertexOffset + 1);  	cachedQuadIndices [2] = (short)(vertexOffset + 2);  	cachedQuadIndices [3] = (short)vertexOffset;  	cachedQuadIndices [4] = (short)(vertexOffset + 2);  	cachedQuadIndices [5] = (short)(vertexOffset + 3);  	return cachedQuadIndices;  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: if (numberOfVertices == 4) {  	cachedQuadIndices [0] = (short)vertexOffset;  	cachedQuadIndices [1] = (short)(vertexOffset + 1);  	cachedQuadIndices [2] = (short)(vertexOffset + 2);  	cachedQuadIndices [3] = (short)vertexOffset;  	cachedQuadIndices [4] = (short)(vertexOffset + 2);  	cachedQuadIndices [5] = (short)(vertexOffset + 3);  	return cachedQuadIndices;  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: if (numberOfVertices == 4) {  	cachedQuadIndices [0] = (short)vertexOffset;  	cachedQuadIndices [1] = (short)(vertexOffset + 1);  	cachedQuadIndices [2] = (short)(vertexOffset + 2);  	cachedQuadIndices [3] = (short)vertexOffset;  	cachedQuadIndices [4] = (short)(vertexOffset + 2);  	cachedQuadIndices [5] = (short)(vertexOffset + 3);  	return cachedQuadIndices;  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: if (numberOfVertices == 4) {  	cachedQuadIndices [0] = (short)vertexOffset;  	cachedQuadIndices [1] = (short)(vertexOffset + 1);  	cachedQuadIndices [2] = (short)(vertexOffset + 2);  	cachedQuadIndices [3] = (short)vertexOffset;  	cachedQuadIndices [4] = (short)(vertexOffset + 2);  	cachedQuadIndices [5] = (short)(vertexOffset + 3);  	return cachedQuadIndices;  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: if (numberOfVertices == 4) {  	cachedQuadIndices [0] = (short)vertexOffset;  	cachedQuadIndices [1] = (short)(vertexOffset + 1);  	cachedQuadIndices [2] = (short)(vertexOffset + 2);  	cachedQuadIndices [3] = (short)vertexOffset;  	cachedQuadIndices [4] = (short)(vertexOffset + 2);  	cachedQuadIndices [5] = (short)(vertexOffset + 3);  	return cachedQuadIndices;  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: if (numberOfVertices == 4) {  	cachedQuadIndices [0] = (short)vertexOffset;  	cachedQuadIndices [1] = (short)(vertexOffset + 1);  	cachedQuadIndices [2] = (short)(vertexOffset + 2);  	cachedQuadIndices [3] = (short)vertexOffset;  	cachedQuadIndices [4] = (short)(vertexOffset + 2);  	cachedQuadIndices [5] = (short)(vertexOffset + 3);  	return cachedQuadIndices;  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: cachedQuadIndices [2] = (short)(vertexOffset + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: cachedQuadIndices [2] = (short)(vertexOffset + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: cachedQuadIndices [3] = (short)vertexOffset;  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: cachedQuadIndices [4] = (short)(vertexOffset + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: cachedQuadIndices [4] = (short)(vertexOffset + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: cachedQuadIndices [5] = (short)(vertexOffset + 3);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: cachedQuadIndices [5] = (short)(vertexOffset + 3);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: if (numberOfVertices == 3)  	return new[] {  		(short)vertexOffset'  		(short)(vertexOffset + 1)'  		(short)(vertexOffset + 2)  	};  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: if (numberOfVertices == 3)  	return new[] {  		(short)vertexOffset'  		(short)(vertexOffset + 1)'  		(short)(vertexOffset + 2)  	};  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: return new[] {  	(short)vertexOffset'  	(short)(vertexOffset + 1)'  	(short)(vertexOffset + 2)  };  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: for (int i = 0; i < numberOfVertices / 4; i++) {  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  	newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  	newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  	newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  }  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 0] = (short)(vertexOffset + i * 4 + 1);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 2] = (short)(vertexOffset + i * 4 + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 3] = (short)(vertexOffset + i * 4);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 4] = (short)(vertexOffset + i * 4 + 2);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  
Magic Number,DeltaEngine.Graphics,CircularBuffer,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\CircularBuffer.cs,ComputeIndices,The following statement contains a magic number: newIndices [i * 6 + 5] = (short)(vertexOffset + i * 4 + 3);  
Magic Number,DeltaEngine.Graphics,Geometry,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Geometry.cs,LoadFromFile,The following statement contains a magic number: if (typeOfByte == 255)  	throw new NullReferenceException ();  
Magic Number,DeltaEngine.Graphics,Geometry,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Geometry.cs,ReadNumberMostlyBelow255,The following statement contains a magic number: if (number == 255)  	number = reader.ReadInt32 ();  
Magic Number,DeltaEngine.Graphics,Device,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Device.cs,Device,The following statement contains a magic number: CameraViewMatrix = Matrix.CreateLookAt (Vector3D.One * 3' Vector3D.Zero' Vector3D.UnitZ);  
Magic Number,DeltaEngine.Graphics,Device,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Device.cs,Device,The following statement contains a magic number: CameraProjectionMatrix = Matrix.CreatePerspective (90' window.ViewportPixelSize.AspectRatio' 1' 100);  
Magic Number,DeltaEngine.Graphics,Device,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Device.cs,Device,The following statement contains a magic number: CameraProjectionMatrix = Matrix.CreatePerspective (90' window.ViewportPixelSize.AspectRatio' 1' 100);  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: switch (ElementType) {  case VertexElementType.Position3D:  case VertexElementType.Normal:  	ComponentCount = 3;  	Size = 12;  	break;  case VertexElementType.Position2D:  case VertexElementType.TextureUV:  case VertexElementType.LightMapUV:  	ComponentCount = 2;  	Size = 8;  	break;  case VertexElementType.Color:  	ComponentCount = 4;  	Size = 4;  	break;  case VertexElementType.SkinIndices:  case VertexElementType.SkinWeights:  	ComponentCount = 2;  	Size = 8;  	break;  default:  	throw new ElementTypeNotYetSupported (ElementType);  }  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: switch (ElementType) {  case VertexElementType.Position3D:  case VertexElementType.Normal:  	ComponentCount = 3;  	Size = 12;  	break;  case VertexElementType.Position2D:  case VertexElementType.TextureUV:  case VertexElementType.LightMapUV:  	ComponentCount = 2;  	Size = 8;  	break;  case VertexElementType.Color:  	ComponentCount = 4;  	Size = 4;  	break;  case VertexElementType.SkinIndices:  case VertexElementType.SkinWeights:  	ComponentCount = 2;  	Size = 8;  	break;  default:  	throw new ElementTypeNotYetSupported (ElementType);  }  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: switch (ElementType) {  case VertexElementType.Position3D:  case VertexElementType.Normal:  	ComponentCount = 3;  	Size = 12;  	break;  case VertexElementType.Position2D:  case VertexElementType.TextureUV:  case VertexElementType.LightMapUV:  	ComponentCount = 2;  	Size = 8;  	break;  case VertexElementType.Color:  	ComponentCount = 4;  	Size = 4;  	break;  case VertexElementType.SkinIndices:  case VertexElementType.SkinWeights:  	ComponentCount = 2;  	Size = 8;  	break;  default:  	throw new ElementTypeNotYetSupported (ElementType);  }  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: switch (ElementType) {  case VertexElementType.Position3D:  case VertexElementType.Normal:  	ComponentCount = 3;  	Size = 12;  	break;  case VertexElementType.Position2D:  case VertexElementType.TextureUV:  case VertexElementType.LightMapUV:  	ComponentCount = 2;  	Size = 8;  	break;  case VertexElementType.Color:  	ComponentCount = 4;  	Size = 4;  	break;  case VertexElementType.SkinIndices:  case VertexElementType.SkinWeights:  	ComponentCount = 2;  	Size = 8;  	break;  default:  	throw new ElementTypeNotYetSupported (ElementType);  }  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: switch (ElementType) {  case VertexElementType.Position3D:  case VertexElementType.Normal:  	ComponentCount = 3;  	Size = 12;  	break;  case VertexElementType.Position2D:  case VertexElementType.TextureUV:  case VertexElementType.LightMapUV:  	ComponentCount = 2;  	Size = 8;  	break;  case VertexElementType.Color:  	ComponentCount = 4;  	Size = 4;  	break;  case VertexElementType.SkinIndices:  case VertexElementType.SkinWeights:  	ComponentCount = 2;  	Size = 8;  	break;  default:  	throw new ElementTypeNotYetSupported (ElementType);  }  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: switch (ElementType) {  case VertexElementType.Position3D:  case VertexElementType.Normal:  	ComponentCount = 3;  	Size = 12;  	break;  case VertexElementType.Position2D:  case VertexElementType.TextureUV:  case VertexElementType.LightMapUV:  	ComponentCount = 2;  	Size = 8;  	break;  case VertexElementType.Color:  	ComponentCount = 4;  	Size = 4;  	break;  case VertexElementType.SkinIndices:  case VertexElementType.SkinWeights:  	ComponentCount = 2;  	Size = 8;  	break;  default:  	throw new ElementTypeNotYetSupported (ElementType);  }  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: switch (ElementType) {  case VertexElementType.Position3D:  case VertexElementType.Normal:  	ComponentCount = 3;  	Size = 12;  	break;  case VertexElementType.Position2D:  case VertexElementType.TextureUV:  case VertexElementType.LightMapUV:  	ComponentCount = 2;  	Size = 8;  	break;  case VertexElementType.Color:  	ComponentCount = 4;  	Size = 4;  	break;  case VertexElementType.SkinIndices:  case VertexElementType.SkinWeights:  	ComponentCount = 2;  	Size = 8;  	break;  default:  	throw new ElementTypeNotYetSupported (ElementType);  }  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: switch (ElementType) {  case VertexElementType.Position3D:  case VertexElementType.Normal:  	ComponentCount = 3;  	Size = 12;  	break;  case VertexElementType.Position2D:  case VertexElementType.TextureUV:  case VertexElementType.LightMapUV:  	ComponentCount = 2;  	Size = 8;  	break;  case VertexElementType.Color:  	ComponentCount = 4;  	Size = 4;  	break;  case VertexElementType.SkinIndices:  case VertexElementType.SkinWeights:  	ComponentCount = 2;  	Size = 8;  	break;  default:  	throw new ElementTypeNotYetSupported (ElementType);  }  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: ComponentCount = 3;  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: Size = 12;  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: ComponentCount = 2;  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: Size = 8;  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: ComponentCount = 4;  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: Size = 4;  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: ComponentCount = 2;  
Magic Number,DeltaEngine.Graphics.Vertices,VertexElement,C:\repos\DeltaEngine_DeltaEngine.Xna\Graphics\Vertices\VertexElement.cs,InitializeDataFromType,The following statement contains a magic number: Size = 8;  
