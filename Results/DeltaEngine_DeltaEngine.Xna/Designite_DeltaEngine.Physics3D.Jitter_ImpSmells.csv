Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DeltaEngine.Physics3D.Jitter,JitterBody,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterBody.cs,CreateShape,Cyclomatic complexity of the method is 8
Complex Method,DeltaEngine.Physics3D.Jitter,JitterJoint,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterJoint.cs,CreateJoint,Cyclomatic complexity of the method is 8
Long Parameter List,DeltaEngine.Physics3D.Jitter,JitterBody,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterBody.cs,JitterBody,The method has 5 parameters.
Long Parameter List,DeltaEngine.Physics3D.Jitter,JitterJoint,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterJoint.cs,JitterJoint,The method has 5 parameters.
Long Statement,DeltaEngine.Physics3D.Jitter,JitterBody,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterBody.cs,CreateTerrainShape,The length of the statement  "	jitterShape = new TerrainShape (ArrayExtensions.GetWithDefault<PhysicsShape.PropertyType' float[']> (Shape.Properties' PhysicsShape.PropertyType.Height)' ArrayExtensions.GetWithDefault<PhysicsShape.PropertyType' float> (Shape.Properties' PhysicsShape.PropertyType.ScaleX)' ArrayExtensions.GetWithDefault<PhysicsShape.PropertyType' float> (Shape.Properties' PhysicsShape.PropertyType.ScaleY)); " is 392.
Long Statement,DeltaEngine.Physics3D.Jitter,JitterBody,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterBody.cs,ApplyLinearImpulse,The length of the statement  "	jitterBody.ApplyImpulse (JitterDatatypesMapping.Convert (ref impulse)' JitterDatatypesMapping.Convert (ref impulsePosition)); " is 125.
Long Statement,DeltaEngine.Physics3D.Jitter,JitterJoint,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterJoint.cs,CreatePointOnLineJoint,The length of the statement  "	Vector3D tempVector = ArrayExtensions.GetWithDefault<PropertyType' Vector3D> (Properties' PropertyType.LineStartPointBody); " is 123.
Long Statement,DeltaEngine.Physics3D.Jitter,JitterJoint,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterJoint.cs,CreatePointOnLineJoint,The length of the statement  "		Logger.Warning ("You're trying to create PointOnLine with second " + "body at null.Maybe you should create SingleBodyPointOnLine."); " is 132.
Long Statement,DeltaEngine.Physics3D.Jitter,JitterJoint,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterJoint.cs,CreatePrismaticJoint,The length of the statement  "	Joint = new PrismaticJoint (physicsManager.jitterWorld' RigidBodyA' RigidBodyB' ArrayExtensions.GetWithDefault<PropertyType' float> (Properties' PropertyType.MinimumDistance)' ArrayExtensions.GetWithDefault<PropertyType' float> (Properties' PropertyType.MaximumDistance)); " is 272.
Long Statement,DeltaEngine.Physics3D.Jitter,JitterPhysics,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterPhysics.cs,CreateBody,The length of the statement  "	if (float.IsNaN (body.Position.X) || float.IsNaN (body.AngularVelocity.X) || float.IsNaN (body.BoundingBox.Min.X) || float.IsNaN (body.BoundingBox.Max.X) || float.IsNaN (body.GetOrientation ().X)) " is 196.
Complex Conditional,DeltaEngine.Physics3D.Jitter,JitterPhysics,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterPhysics.cs,CreateBody,The conditional expression  "float.IsNaN (body.Position.X) || float.IsNaN (body.AngularVelocity.X) || float.IsNaN (body.BoundingBox.Min.X) || float.IsNaN (body.BoundingBox.Max.X) || float.IsNaN (body.GetOrientation ().X)"  is complex.
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result.M13 = matrix [2];  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result.M21 = matrix [4];  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result.M22 = matrix [5];  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result.M23 = matrix [6];  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result.M31 = matrix [8];  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result.M32 = matrix [9];  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result.M33 = matrix [10];  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result [2] = matrix.M13;  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result [4] = matrix.M21;  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result [5] = matrix.M22;  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result [6] = matrix.M23;  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result [8] = matrix.M31;  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result [9] = matrix.M32;  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterDatatypesMapping,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterDatatypesMapping.cs,Convert,The following statement contains a magic number: result [10] = matrix.M33;  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterPhysics,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterPhysics.cs,JitterPhysics,The following statement contains a magic number: jitterWorld.SetIterations (100' 100);  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterPhysics,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterPhysics.cs,JitterPhysics,The following statement contains a magic number: jitterWorld.SetIterations (100' 100);  
Magic Number,DeltaEngine.Physics3D.Jitter,JitterPhysics,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterPhysics.cs,JitterPhysics,The following statement contains a magic number: jitterWorld.SetInactivityThreshold (0.005f' 0.005f' 10);  
Missing Default,DeltaEngine.Physics3D.Jitter,JitterPhysics,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterPhysics.cs,IsShapeSupported,The following switch statement is missing a default case: switch (shapeType) {  case ShapeType.Box:  case ShapeType.Sphere:  case ShapeType.Capsule:  case ShapeType.Triangle:  case ShapeType.Terrain:  case ShapeType.Cone:  case ShapeType.Cylinder:  	return true;  }  
Missing Default,DeltaEngine.Physics3D.Jitter,JitterPhysics,C:\repos\DeltaEngine_DeltaEngine.Xna\Physics3D\Jitter\JitterPhysics.cs,IsJointSupported,The following switch statement is missing a default case: switch (jointType) {  case JointType.FixedAngle:  case JointType.SingleBodyPointOnLine:  case JointType.PointOnLine:  case JointType.PointOnPoint:  case JointType.PointPointDistance:  case JointType.Hinge:  case JointType.Prismatic:  	return true;  }  
