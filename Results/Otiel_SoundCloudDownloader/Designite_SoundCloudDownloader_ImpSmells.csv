Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SoundCloudDownloader,SoundCloudHelper,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Helpers\SoundCloudHelper.cs,GetTracks,Cyclomatic complexity of the method is 8
Complex Method,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,GetTracks,Cyclomatic complexity of the method is 8
Long Parameter List,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,DownloadAndTagTrack,The method has 7 parameters.
Long Parameter List,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The method has 5 parameters.
Long Parameter List,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,buttonStart_Click,The method has 9 parameters.
Long Statement,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,GetFilesToDownload,The length of the statement  "			Log ("Failed to retrieve the size of the MP3 file for the track \"" + track.Title + "\". Progress update may be wrong."' Brushes.OrangeRed); " is 140.
Long Statement,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The length of the statement  "			bytesPerSecond = ((Double)(totalReceivedBytes - this.lastTotalReceivedBytes)) / (now - this.lastDownloadSpeedUpdate).TotalSeconds; " is 130.
Long Statement,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The length of the statement  "				labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB"; " is 168.
Long Statement,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,buttonStart_Click,The length of the statement  "			Log ("An error occured when creating the album folder. Make sure you have " + "the rights to write files in the folder you chose"' Brushes.Red); " is 144.
Empty Catch Block,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,buttonStart_Click,The method has an empty catch block.
Magic Number,SoundCloudDownloader,SoundCloudHelper,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Helpers\SoundCloudHelper.cs,ConvertUnicodeStrings,The following statement contains a magic number: return Regex.Replace (str' @"\\u([0-9A-Fa-f]{4})"' m => ((char)Convert.ToInt32 (m.Groups [1].Value' 16)).ToString ());  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 50;  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: lock (this.filesDownload) {  	// Compute new progress values  	File currentFile = this.filesDownload.Where (f => f.Url == fileUrl).First ();  	currentFile.BytesReceived = bytesReceived;  	long totalReceivedBytes = this.filesDownload.Sum (f => f.BytesReceived);  	long bytesToDownload = this.filesDownload.Sum (f => f.Size);  	Double bytesPerSecond;  	if (this.lastTotalReceivedBytes == 0) {  		// First time we update the progress  		bytesPerSecond = 0;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  	}  	else if ((now - this.lastDownloadSpeedUpdate).TotalMilliseconds > 500) {  		// Last update of progress happened more than 500 milliseconds ago  		// We only update the download speed every 500+ milliseconds  		bytesPerSecond = ((Double)(totalReceivedBytes - this.lastTotalReceivedBytes)) / (now - this.lastDownloadSpeedUpdate).TotalSeconds;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  		// Update UI  		this.Dispatcher.Invoke (new Action (() =>  {  			// Update download speed  			labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  		}));  	}  	// Update UI  	this.Dispatcher.Invoke (new Action (() =>  {  		if (!this.userCancelled) {  			// Update progress label  			labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  			// Update progress bar  			progressBar.Value = totalReceivedBytes;  			// Taskbar progress is between 0 and 1  			TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  		}  	}));  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: lock (this.filesDownload) {  	// Compute new progress values  	File currentFile = this.filesDownload.Where (f => f.Url == fileUrl).First ();  	currentFile.BytesReceived = bytesReceived;  	long totalReceivedBytes = this.filesDownload.Sum (f => f.BytesReceived);  	long bytesToDownload = this.filesDownload.Sum (f => f.Size);  	Double bytesPerSecond;  	if (this.lastTotalReceivedBytes == 0) {  		// First time we update the progress  		bytesPerSecond = 0;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  	}  	else if ((now - this.lastDownloadSpeedUpdate).TotalMilliseconds > 500) {  		// Last update of progress happened more than 500 milliseconds ago  		// We only update the download speed every 500+ milliseconds  		bytesPerSecond = ((Double)(totalReceivedBytes - this.lastTotalReceivedBytes)) / (now - this.lastDownloadSpeedUpdate).TotalSeconds;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  		// Update UI  		this.Dispatcher.Invoke (new Action (() =>  {  			// Update download speed  			labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  		}));  	}  	// Update UI  	this.Dispatcher.Invoke (new Action (() =>  {  		if (!this.userCancelled) {  			// Update progress label  			labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  			// Update progress bar  			progressBar.Value = totalReceivedBytes;  			// Taskbar progress is between 0 and 1  			TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  		}  	}));  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: lock (this.filesDownload) {  	// Compute new progress values  	File currentFile = this.filesDownload.Where (f => f.Url == fileUrl).First ();  	currentFile.BytesReceived = bytesReceived;  	long totalReceivedBytes = this.filesDownload.Sum (f => f.BytesReceived);  	long bytesToDownload = this.filesDownload.Sum (f => f.Size);  	Double bytesPerSecond;  	if (this.lastTotalReceivedBytes == 0) {  		// First time we update the progress  		bytesPerSecond = 0;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  	}  	else if ((now - this.lastDownloadSpeedUpdate).TotalMilliseconds > 500) {  		// Last update of progress happened more than 500 milliseconds ago  		// We only update the download speed every 500+ milliseconds  		bytesPerSecond = ((Double)(totalReceivedBytes - this.lastTotalReceivedBytes)) / (now - this.lastDownloadSpeedUpdate).TotalSeconds;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  		// Update UI  		this.Dispatcher.Invoke (new Action (() =>  {  			// Update download speed  			labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  		}));  	}  	// Update UI  	this.Dispatcher.Invoke (new Action (() =>  {  		if (!this.userCancelled) {  			// Update progress label  			labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  			// Update progress bar  			progressBar.Value = totalReceivedBytes;  			// Taskbar progress is between 0 and 1  			TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  		}  	}));  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: lock (this.filesDownload) {  	// Compute new progress values  	File currentFile = this.filesDownload.Where (f => f.Url == fileUrl).First ();  	currentFile.BytesReceived = bytesReceived;  	long totalReceivedBytes = this.filesDownload.Sum (f => f.BytesReceived);  	long bytesToDownload = this.filesDownload.Sum (f => f.Size);  	Double bytesPerSecond;  	if (this.lastTotalReceivedBytes == 0) {  		// First time we update the progress  		bytesPerSecond = 0;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  	}  	else if ((now - this.lastDownloadSpeedUpdate).TotalMilliseconds > 500) {  		// Last update of progress happened more than 500 milliseconds ago  		// We only update the download speed every 500+ milliseconds  		bytesPerSecond = ((Double)(totalReceivedBytes - this.lastTotalReceivedBytes)) / (now - this.lastDownloadSpeedUpdate).TotalSeconds;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  		// Update UI  		this.Dispatcher.Invoke (new Action (() =>  {  			// Update download speed  			labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  		}));  	}  	// Update UI  	this.Dispatcher.Invoke (new Action (() =>  {  		if (!this.userCancelled) {  			// Update progress label  			labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  			// Update progress bar  			progressBar.Value = totalReceivedBytes;  			// Taskbar progress is between 0 and 1  			TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  		}  	}));  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: lock (this.filesDownload) {  	// Compute new progress values  	File currentFile = this.filesDownload.Where (f => f.Url == fileUrl).First ();  	currentFile.BytesReceived = bytesReceived;  	long totalReceivedBytes = this.filesDownload.Sum (f => f.BytesReceived);  	long bytesToDownload = this.filesDownload.Sum (f => f.Size);  	Double bytesPerSecond;  	if (this.lastTotalReceivedBytes == 0) {  		// First time we update the progress  		bytesPerSecond = 0;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  	}  	else if ((now - this.lastDownloadSpeedUpdate).TotalMilliseconds > 500) {  		// Last update of progress happened more than 500 milliseconds ago  		// We only update the download speed every 500+ milliseconds  		bytesPerSecond = ((Double)(totalReceivedBytes - this.lastTotalReceivedBytes)) / (now - this.lastDownloadSpeedUpdate).TotalSeconds;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  		// Update UI  		this.Dispatcher.Invoke (new Action (() =>  {  			// Update download speed  			labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  		}));  	}  	// Update UI  	this.Dispatcher.Invoke (new Action (() =>  {  		if (!this.userCancelled) {  			// Update progress label  			labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  			// Update progress bar  			progressBar.Value = totalReceivedBytes;  			// Taskbar progress is between 0 and 1  			TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  		}  	}));  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: lock (this.filesDownload) {  	// Compute new progress values  	File currentFile = this.filesDownload.Where (f => f.Url == fileUrl).First ();  	currentFile.BytesReceived = bytesReceived;  	long totalReceivedBytes = this.filesDownload.Sum (f => f.BytesReceived);  	long bytesToDownload = this.filesDownload.Sum (f => f.Size);  	Double bytesPerSecond;  	if (this.lastTotalReceivedBytes == 0) {  		// First time we update the progress  		bytesPerSecond = 0;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  	}  	else if ((now - this.lastDownloadSpeedUpdate).TotalMilliseconds > 500) {  		// Last update of progress happened more than 500 milliseconds ago  		// We only update the download speed every 500+ milliseconds  		bytesPerSecond = ((Double)(totalReceivedBytes - this.lastTotalReceivedBytes)) / (now - this.lastDownloadSpeedUpdate).TotalSeconds;  		this.lastTotalReceivedBytes = totalReceivedBytes;  		this.lastDownloadSpeedUpdate = now;  		// Update UI  		this.Dispatcher.Invoke (new Action (() =>  {  			// Update download speed  			labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  		}));  	}  	// Update UI  	this.Dispatcher.Invoke (new Action (() =>  {  		if (!this.userCancelled) {  			// Update progress label  			labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  			// Update progress bar  			progressBar.Value = totalReceivedBytes;  			// Taskbar progress is between 0 and 1  			TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  		}  	}));  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: if (this.lastTotalReceivedBytes == 0) {  	// First time we update the progress  	bytesPerSecond = 0;  	this.lastTotalReceivedBytes = totalReceivedBytes;  	this.lastDownloadSpeedUpdate = now;  }  else if ((now - this.lastDownloadSpeedUpdate).TotalMilliseconds > 500) {  	// Last update of progress happened more than 500 milliseconds ago  	// We only update the download speed every 500+ milliseconds  	bytesPerSecond = ((Double)(totalReceivedBytes - this.lastTotalReceivedBytes)) / (now - this.lastDownloadSpeedUpdate).TotalSeconds;  	this.lastTotalReceivedBytes = totalReceivedBytes;  	this.lastDownloadSpeedUpdate = now;  	// Update UI  	this.Dispatcher.Invoke (new Action (() =>  {  		// Update download speed  		labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  	}));  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: if (this.lastTotalReceivedBytes == 0) {  	// First time we update the progress  	bytesPerSecond = 0;  	this.lastTotalReceivedBytes = totalReceivedBytes;  	this.lastDownloadSpeedUpdate = now;  }  else if ((now - this.lastDownloadSpeedUpdate).TotalMilliseconds > 500) {  	// Last update of progress happened more than 500 milliseconds ago  	// We only update the download speed every 500+ milliseconds  	bytesPerSecond = ((Double)(totalReceivedBytes - this.lastTotalReceivedBytes)) / (now - this.lastDownloadSpeedUpdate).TotalSeconds;  	this.lastTotalReceivedBytes = totalReceivedBytes;  	this.lastDownloadSpeedUpdate = now;  	// Update UI  	this.Dispatcher.Invoke (new Action (() =>  {  		// Update download speed  		labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  	}));  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: if ((now - this.lastDownloadSpeedUpdate).TotalMilliseconds > 500) {  	// Last update of progress happened more than 500 milliseconds ago  	// We only update the download speed every 500+ milliseconds  	bytesPerSecond = ((Double)(totalReceivedBytes - this.lastTotalReceivedBytes)) / (now - this.lastDownloadSpeedUpdate).TotalSeconds;  	this.lastTotalReceivedBytes = totalReceivedBytes;  	this.lastDownloadSpeedUpdate = now;  	// Update UI  	this.Dispatcher.Invoke (new Action (() =>  {  		// Update download speed  		labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  	}));  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: if ((now - this.lastDownloadSpeedUpdate).TotalMilliseconds > 500) {  	// Last update of progress happened more than 500 milliseconds ago  	// We only update the download speed every 500+ milliseconds  	bytesPerSecond = ((Double)(totalReceivedBytes - this.lastTotalReceivedBytes)) / (now - this.lastDownloadSpeedUpdate).TotalSeconds;  	this.lastTotalReceivedBytes = totalReceivedBytes;  	this.lastDownloadSpeedUpdate = now;  	// Update UI  	this.Dispatcher.Invoke (new Action (() =>  {  		// Update download speed  		labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  	}));  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: this.Dispatcher.Invoke (new Action (() =>  {  	// Update download speed  	labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  }));  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: labelDownloadSpeed.Content = (bytesPerSecond / 1024).ToString ("0.0") + " kB/s";  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: this.Dispatcher.Invoke (new Action (() =>  {  	if (!this.userCancelled) {  		// Update progress label  		labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  		// Update progress bar  		progressBar.Value = totalReceivedBytes;  		// Taskbar progress is between 0 and 1  		TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  	}  }));  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: this.Dispatcher.Invoke (new Action (() =>  {  	if (!this.userCancelled) {  		// Update progress label  		labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  		// Update progress bar  		progressBar.Value = totalReceivedBytes;  		// Taskbar progress is between 0 and 1  		TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  	}  }));  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: this.Dispatcher.Invoke (new Action (() =>  {  	if (!this.userCancelled) {  		// Update progress label  		labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  		// Update progress bar  		progressBar.Value = totalReceivedBytes;  		// Taskbar progress is between 0 and 1  		TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  	}  }));  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: this.Dispatcher.Invoke (new Action (() =>  {  	if (!this.userCancelled) {  		// Update progress label  		labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  		// Update progress bar  		progressBar.Value = totalReceivedBytes;  		// Taskbar progress is between 0 and 1  		TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  	}  }));  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: if (!this.userCancelled) {  	// Update progress label  	labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  	// Update progress bar  	progressBar.Value = totalReceivedBytes;  	// Taskbar progress is between 0 and 1  	TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: if (!this.userCancelled) {  	// Update progress label  	labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  	// Update progress bar  	progressBar.Value = totalReceivedBytes;  	// Taskbar progress is between 0 and 1  	TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: if (!this.userCancelled) {  	// Update progress label  	labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  	// Update progress bar  	progressBar.Value = totalReceivedBytes;  	// Taskbar progress is between 0 and 1  	TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: if (!this.userCancelled) {  	// Update progress label  	labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  	// Update progress bar  	progressBar.Value = totalReceivedBytes;  	// Taskbar progress is between 0 and 1  	TaskbarItemInfo.ProgressValue = totalReceivedBytes / progressBar.Maximum;  }  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  
Magic Number,SoundCloudDownloader,MainWindow,C:\repos\Otiel_SoundCloudDownloader\Sources\SoundCloudDownloader\Windows\MainWindow.xaml.cs,UpdateProgress,The following statement contains a magic number: labelProgress.Content = ((Double)totalReceivedBytes / (1024 * 1024)).ToString ("0.00") + " MB / " + ((Double)bytesToDownload / (1024 * 1024)).ToString ("0.00") + " MB";  
